
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e774  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002380  0801ea14  0801ea14  0002ea14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00000daa  08020d94  08020d94  00030d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 0000009c  08021b40  08021b40  00031b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00177000  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000064  90177000  90177000  001c7000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  08021bdc  08021bdc  001c7064  2**0
                  CONTENTS
  8 .ARM          00000000  08021bdc  08021bdc  001c7064  2**0
                  CONTENTS
  9 .preinit_array 00000000  08021bdc  08021bdc  001c7064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000018  08021bdc  08021bdc  00031bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  08021bf4  08021bf4  00031bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000011c  24000000  08021bfc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          0000e5c4  2400011c  08021d18  0004011c  2**2
                  ALLOC
 14 ._user_heap_stack 00002000  2400e6e0  08021d18  0004e6e0  2**0
                  ALLOC
 15 .ARM.attributes 0000002e  00000000  00000000  001c7064  2**0
                  CONTENTS, READONLY
 16 .debug_info   00103533  00000000  00000000  001c7092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00017916  00000000  00000000  002ca5c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003698  00000000  00000000  002e1ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 000071b8  00000000  00000000  002e5578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00051680  00000000  00000000  002ec730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   000626ca  00000000  00000000  0033ddb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001df6bb  00000000  00000000  003a047a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000cf  00000000  00000000  0057fb35  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00009f64  00000000  00000000  0057fc04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loc    00035eea  00000000  00000000  00589b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400011c 	.word	0x2400011c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801e9fc 	.word	0x0801e9fc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000120 	.word	0x24000120
 80002dc:	0801e9fc 	.word	0x0801e9fc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8000380:	4901      	ldr	r1, [pc, #4]	; (8000388 <vApplicationIdleHook+0x8>)
 8000382:	2000      	movs	r0, #0
 8000384:	f00b baf8 	b.w	800b978 <vTaskSetApplicationTaskTag>
 8000388:	08001ab1 	.word	0x08001ab1

0800038c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800038c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800038e:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000390:	224c      	movs	r2, #76	; 0x4c
 8000392:	2100      	movs	r1, #0
 8000394:	a809      	add	r0, sp, #36	; 0x24
 8000396:	f01d fb0d 	bl	801d9b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800039a:	2220      	movs	r2, #32
 800039c:	2100      	movs	r1, #0
 800039e:	a801      	add	r0, sp, #4
 80003a0:	f01d fb08 	bl	801d9b4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80003a4:	2004      	movs	r0, #4
 80003a6:	f007 fd3d 	bl	8007e24 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003aa:	2300      	movs	r3, #0
 80003ac:	9300      	str	r3, [sp, #0]
 80003ae:	4b2a      	ldr	r3, [pc, #168]	; (8000458 <SystemClock_Config+0xcc>)
 80003b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003b2:	f022 0201 	bic.w	r2, r2, #1
 80003b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80003b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ba:	f003 0301 	and.w	r3, r3, #1
 80003be:	9300      	str	r3, [sp, #0]
 80003c0:	4b26      	ldr	r3, [pc, #152]	; (800045c <SystemClock_Config+0xd0>)
 80003c2:	699a      	ldr	r2, [r3, #24]
 80003c4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80003c8:	619a      	str	r2, [r3, #24]
 80003ca:	699a      	ldr	r2, [r3, #24]
 80003cc:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80003d0:	9200      	str	r2, [sp, #0]
 80003d2:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003d4:	699a      	ldr	r2, [r3, #24]
 80003d6:	0491      	lsls	r1, r2, #18
 80003d8:	d5fc      	bpl.n	80003d4 <SystemClock_Config+0x48>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80003da:	4a21      	ldr	r2, [pc, #132]	; (8000460 <SystemClock_Config+0xd4>)

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003dc:	2703      	movs	r7, #3
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003de:	2540      	movs	r5, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003e0:	2402      	movs	r4, #2
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80003e2:	6a93      	ldr	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 160;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80003e4:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e6:	a809      	add	r0, sp, #36	; 0x24
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80003e8:	f023 0303 	bic.w	r3, r3, #3
 80003ec:	f043 0302 	orr.w	r3, r3, #2
 80003f0:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLN = 160;
 80003f6:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003f8:	9418      	str	r4, [sp, #96]	; 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003fa:	e9cd 7309 	strd	r7, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003fe:	2301      	movs	r3, #1
 8000400:	e9cd 350c 	strd	r3, r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000404:	23a0      	movs	r3, #160	; 0xa0
 8000406:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800040a:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800040c:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000410:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000414:	e9cd 6319 	strd	r6, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000418:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800041a:	f007 fff1 	bl	8008400 <HAL_RCC_OscConfig>
 800041e:	b108      	cbz	r0, 8000424 <SystemClock_Config+0x98>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000420:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000422:	e7fe      	b.n	8000422 <SystemClock_Config+0x96>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000424:	233f      	movs	r3, #63	; 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000426:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000428:	e9cd 3701 	strd	r3, r7, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800042c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000430:	e9cd 0603 	strd	r0, r6, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000434:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000436:	e9cd 5505 	strd	r5, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800043a:	e9cd 3507 	strd	r3, r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800043e:	f008 fb81 	bl	8008b44 <HAL_RCC_ClockConfig>
 8000442:	4601      	mov	r1, r0
 8000444:	b108      	cbz	r0, 800044a <SystemClock_Config+0xbe>
 8000446:	b672      	cpsid	i
  while (1)
 8000448:	e7fe      	b.n	8000448 <SystemClock_Config+0xbc>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800044a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800044e:	f008 fa8b 	bl	8008968 <HAL_RCC_MCOConfig>
}
 8000452:	b01d      	add	sp, #116	; 0x74
 8000454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000456:	bf00      	nop
 8000458:	58000400 	.word	0x58000400
 800045c:	58024800 	.word	0x58024800
 8000460:	58024400 	.word	0x58024400

08000464 <main>:
{
 8000464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000468:	b0ba      	sub	sp, #232	; 0xe8
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800046a:	2210      	movs	r2, #16
 800046c:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800046e:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000470:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000472:	2504      	movs	r5, #4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000474:	f01d fa9e 	bl	801d9b4 <memset>
  HAL_MPU_Disable();
 8000478:	f005 ff70 	bl	800635c <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 800047c:	f04f 4110 	mov.w	r1, #2415919104	; 0x90000000
 8000480:	4bb7      	ldr	r3, [pc, #732]	; (8000760 <main+0x2fc>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000482:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000484:	f8ad 40b4 	strh.w	r4, [sp, #180]	; 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000488:	9430      	str	r4, [sp, #192]	; 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 800048a:	e9cd 132e 	strd	r1, r3, [sp, #184]	; 0xb8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800048e:	f005 ff83 	bl	8006398 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000492:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000494:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000496:	f88d 40b5 	strb.w	r4, [sp, #181]	; 0xb5
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 800049a:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800049e:	f005 ff7b 	bl	8006398 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80004a2:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004a4:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80004a6:	f88d 40c2 	strb.w	r4, [sp, #194]	; 0xc2
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80004aa:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
  MPU_InitStruct.BaseAddress = 0xD0000000;
 80004ae:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80004b2:	932e      	str	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80004b4:	2318      	movs	r3, #24
 80004b6:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004ba:	f005 ff6d 	bl	8006398 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80004be:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004c0:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80004c2:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
  MPU_InitStruct.BaseAddress = 0x24000000;
 80004c6:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 80004ca:	932e      	str	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80004cc:	2312      	movs	r3, #18
 80004ce:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80004d2:	2300      	movs	r3, #0
 80004d4:	f88d 30c0 	strb.w	r3, [sp, #192]	; 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004d8:	f005 ff5e 	bl	8006398 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x10000000;
 80004dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004e0:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80004e2:	f88d 50b5 	strb.w	r5, [sp, #181]	; 0xb5
  MPU_InitStruct.BaseAddress = 0x10000000;
 80004e6:	932e      	str	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 80004e8:	2311      	movs	r3, #17
 80004ea:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004ee:	f005 ff53 	bl	8006398 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 80004f2:	2305      	movs	r3, #5
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004f4:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80004f6:	f88d 40c0 	strb.w	r4, [sp, #192]	; 0xc0
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 80004fa:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
  MPU_InitStruct.BaseAddress = 0x10040000;
 80004fe:	4b99      	ldr	r3, [pc, #612]	; (8000764 <main+0x300>)
 8000500:	932e      	str	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000502:	230e      	movs	r3, #14
 8000504:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000508:	f005 ff46 	bl	8006398 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800050c:	4628      	mov	r0, r5
 800050e:	f005 ff33 	bl	8006378 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000512:	4b95      	ldr	r3, [pc, #596]	; (8000768 <main+0x304>)
 8000514:	695a      	ldr	r2, [r3, #20]
 8000516:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 800051a:	d111      	bne.n	8000540 <main+0xdc>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800051c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000520:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000524:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000528:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800052c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000530:	695a      	ldr	r2, [r3, #20]
 8000532:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000536:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000538:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800053c:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000540:	4a89      	ldr	r2, [pc, #548]	; (8000768 <main+0x304>)
 8000542:	6953      	ldr	r3, [r2, #20]
 8000544:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8000548:	d123      	bne.n	8000592 <main+0x12e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800054a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800054e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000552:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000556:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800055a:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800055e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000562:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000564:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000568:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800056a:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800056e:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000570:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000574:	d2f9      	bcs.n	800056a <main+0x106>
    } while(sets-- != 0U);
 8000576:	3b20      	subs	r3, #32
 8000578:	f113 0f20 	cmn.w	r3, #32
 800057c:	d1f2      	bne.n	8000564 <main+0x100>
 800057e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000582:	6953      	ldr	r3, [r2, #20]
 8000584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000588:	6153      	str	r3, [r2, #20]
 800058a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800058e:	f3bf 8f6f 	isb	sy
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000592:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000596:	4d75      	ldr	r5, [pc, #468]	; (800076c <main+0x308>)
 8000598:	682c      	ldr	r4, [r5, #0]
 800059a:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
 800059e:	f000 82b0 	beq.w	8000b02 <main+0x69e>
 80005a2:	3b01      	subs	r3, #1
 80005a4:	d1f8      	bne.n	8000598 <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 80005a6:	b672      	cpsid	i
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <main+0x144>
 80005aa:	b672      	cpsid	i
 80005ac:	e7fe      	b.n	80005ac <main+0x148>
  BSP_SDRAM_DeInit(0);
 80005ae:	f005 fb65 	bl	8005c7c <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 80005b2:	4640      	mov	r0, r8
 80005b4:	f005 fbb0 	bl	8005d18 <BSP_SDRAM_Init>
 80005b8:	4603      	mov	r3, r0
 80005ba:	b108      	cbz	r0, 80005c0 <main+0x15c>
 80005bc:	b672      	cpsid	i
  while (1)
 80005be:	e7fe      	b.n	80005be <main+0x15a>
  hqspi.Instance = QUADSPI;
 80005c0:	486b      	ldr	r0, [pc, #428]	; (8000770 <main+0x30c>)
 80005c2:	4a6c      	ldr	r2, [pc, #432]	; (8000774 <main+0x310>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80005c4:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 80005c6:	6205      	str	r5, [r0, #32]
  hqspi.Init.ClockPrescaler = 3;
 80005c8:	e9c0 2700 	strd	r2, r7, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80005cc:	e9c0 4302 	strd	r4, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80005d0:	e9c0 4304 	strd	r4, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80005d4:	f007 fd3a 	bl	800804c <HAL_QSPI_Init>
 80005d8:	b108      	cbz	r0, 80005de <main+0x17a>
 80005da:	b672      	cpsid	i
  while (1)
 80005dc:	e7fe      	b.n	80005dc <main+0x178>
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 80005de:	a92d      	add	r1, sp, #180	; 0xb4
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 80005e0:	f88d 70b4 	strb.w	r7, [sp, #180]	; 0xb4
  init.TransferRate= MT25TL01G_DTR_TRANSFER ;
 80005e4:	f88d 40b5 	strb.w	r4, [sp, #181]	; 0xb5
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 80005e8:	f88d 50b6 	strb.w	r5, [sp, #182]	; 0xb6
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 80005ec:	f005 f98c 	bl	8005908 <BSP_QSPI_Init>
 80005f0:	b108      	cbz	r0, 80005f6 <main+0x192>
 80005f2:	b672      	cpsid	i
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <main+0x190>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 80005f6:	f005 f933 	bl	8005860 <BSP_QSPI_EnableMemoryMappedMode>
 80005fa:	4603      	mov	r3, r0
 80005fc:	b108      	cbz	r0, 8000602 <main+0x19e>
 80005fe:	b672      	cpsid	i
  while (1)
 8000600:	e7fe      	b.n	8000600 <main+0x19c>
  hdma2d.Instance = DMA2D;
 8000602:	485d      	ldr	r0, [pc, #372]	; (8000778 <main+0x314>)
  hdma2d.Init.Mode = DMA2D_R2M;
 8000604:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000608:	f8df e178 	ldr.w	lr, [pc, #376]	; 8000784 <main+0x320>
  hdma2d.Init.OutputOffset = 0;
 800060c:	e9c0 4302 	strd	r4, r3, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000610:	e9c0 e200 	strd	lr, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000614:	f005 ff4c 	bl	80064b0 <HAL_DMA2D_Init>
 8000618:	4605      	mov	r5, r0
 800061a:	b108      	cbz	r0, 8000620 <main+0x1bc>
 800061c:	b672      	cpsid	i
  while (1)
 800061e:	e7fe      	b.n	800061e <main+0x1ba>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 8000620:	4602      	mov	r2, r0
 8000622:	4631      	mov	r1, r6
 8000624:	4855      	ldr	r0, [pc, #340]	; (800077c <main+0x318>)
 8000626:	f006 fdef 	bl	8007208 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 800062a:	2014      	movs	r0, #20
 800062c:	f005 fe18 	bl	8006260 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 8000630:	4631      	mov	r1, r6
 8000632:	4622      	mov	r2, r4
 8000634:	4851      	ldr	r0, [pc, #324]	; (800077c <main+0x318>)
 8000636:	f006 fde7 	bl	8007208 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 800063a:	200a      	movs	r0, #10
 800063c:	f005 fe10 	bl	8006260 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000640:	2224      	movs	r2, #36	; 0x24
 8000642:	4629      	mov	r1, r5
 8000644:	a817      	add	r0, sp, #92	; 0x5c
  DSI_PLLInitTypeDef PLLInit = {0};
 8000646:	9510      	str	r5, [sp, #64]	; 0x40
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000648:	f01d f9b4 	bl	801d9b4 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800064c:	2218      	movs	r2, #24
 800064e:	4629      	mov	r1, r5
 8000650:	a811      	add	r0, sp, #68	; 0x44
  hdsi.Instance = DSI;
 8000652:	4e4b      	ldr	r6, [pc, #300]	; (8000780 <main+0x31c>)
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000654:	f01d f9ae 	bl	801d9b4 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 8000658:	2234      	movs	r2, #52	; 0x34
 800065a:	4629      	mov	r1, r5
 800065c:	a82d      	add	r0, sp, #180	; 0xb4
 800065e:	f01d f9a9 	bl	801d9b4 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000662:	4629      	mov	r1, r5
 8000664:	222c      	movs	r2, #44	; 0x2c
 8000666:	a820      	add	r0, sp, #128	; 0x80
 8000668:	f01d f9a4 	bl	801d9b4 <memset>
  hdsi.Instance = DSI;
 800066c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8000670:	f04f 0c63 	mov.w	ip, #99	; 0x63
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000674:	a90e      	add	r1, sp, #56	; 0x38
 8000676:	4630      	mov	r0, r6
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000678:	e9c6 3500 	strd	r3, r5, [r6]
  hdsi.Init.TXEscapeCkdiv = 4;
 800067c:	2304      	movs	r3, #4
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800067e:	e9c6 3402 	strd	r3, r4, [r6, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8000682:	2305      	movs	r3, #5
 8000684:	e9cd c30e 	strd	ip, r3, [sp, #56]	; 0x38
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000688:	f006 f85e 	bl	8006748 <HAL_DSI_Init>
 800068c:	b108      	cbz	r0, 8000692 <main+0x22e>
 800068e:	b672      	cpsid	i
  while (1)
 8000690:	e7fe      	b.n	8000690 <main+0x22c>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000692:	e9cd 4017 	strd	r4, r0, [sp, #92]	; 0x5c
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000696:	e9cd 0019 	strd	r0, r0, [sp, #100]	; 0x64
  HostTimeouts.HighSpeedWriteTimeout = 0;
 800069a:	e9cd 001b 	strd	r0, r0, [sp, #108]	; 0x6c
  HostTimeouts.LowPowerWriteTimeout = 0;
 800069e:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
  HostTimeouts.BTATimeout = 0;
 80006a2:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80006a4:	a917      	add	r1, sp, #92	; 0x5c
 80006a6:	4630      	mov	r0, r6
 80006a8:	f006 fa7a 	bl	8006ba0 <HAL_DSI_ConfigHostTimeouts>
 80006ac:	b108      	cbz	r0, 80006b2 <main+0x24e>
 80006ae:	b672      	cpsid	i
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <main+0x24c>
  PhyTimings.ClockLaneLP2HSTime = 33;
 80006b2:	2321      	movs	r3, #33	; 0x21
 80006b4:	261c      	movs	r6, #28
  PhyTimings.DataLaneLP2HSTime = 25;
 80006b6:	270f      	movs	r7, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80006b8:	a911      	add	r1, sp, #68	; 0x44
 80006ba:	4831      	ldr	r0, [pc, #196]	; (8000780 <main+0x31c>)
  PhyTimings.ClockLaneLP2HSTime = 33;
 80006bc:	e9cd 6311 	strd	r6, r3, [sp, #68]	; 0x44
  PhyTimings.DataLaneLP2HSTime = 25;
 80006c0:	2319      	movs	r3, #25
 80006c2:	e9cd 7313 	strd	r7, r3, [sp, #76]	; 0x4c
  PhyTimings.DataLaneMaxReadTime = 0;
 80006c6:	2300      	movs	r3, #0
  PhyTimings.StopWaitTime = 0;
 80006c8:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80006cc:	f006 fa2b 	bl	8006b26 <HAL_DSI_ConfigPhyTimer>
 80006d0:	b108      	cbz	r0, 80006d6 <main+0x272>
 80006d2:	b672      	cpsid	i
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <main+0x270>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 80006d6:	2104      	movs	r1, #4
 80006d8:	4829      	ldr	r0, [pc, #164]	; (8000780 <main+0x31c>)
 80006da:	f006 fa13 	bl	8006b04 <HAL_DSI_ConfigFlowControl>
 80006de:	b108      	cbz	r0, 80006e4 <main+0x280>
 80006e0:	b672      	cpsid	i
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <main+0x27e>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 80006e4:	f242 7110 	movw	r1, #10000	; 0x2710
 80006e8:	4825      	ldr	r0, [pc, #148]	; (8000780 <main+0x31c>)
 80006ea:	f006 fbe3 	bl	8006eb4 <HAL_DSI_SetLowPowerRXFilter>
 80006ee:	4601      	mov	r1, r0
 80006f0:	b108      	cbz	r0, 80006f6 <main+0x292>
 80006f2:	b672      	cpsid	i
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <main+0x290>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 80006f6:	4822      	ldr	r0, [pc, #136]	; (8000780 <main+0x31c>)
 80006f8:	f005 ffc4 	bl	8006684 <HAL_DSI_ConfigErrorMonitor>
 80006fc:	b108      	cbz	r0, 8000702 <main+0x29e>
 80006fe:	b672      	cpsid	i
  while (1)
 8000700:	e7fe      	b.n	8000700 <main+0x29c>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000702:	f44f 7880 	mov.w	r8, #256	; 0x100
 8000706:	f44f 7300 	mov.w	r3, #512	; 0x200
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 800070a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 800070e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000712:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000716:	f44f 3400 	mov.w	r4, #131072	; 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 800071a:	f44f 2500 	mov.w	r5, #524288	; 0x80000
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 800071e:	e9cd 832d 	strd	r8, r3, [sp, #180]	; 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000722:	f44f 6300 	mov.w	r3, #2048	; 0x800
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000726:	f04f 0802 	mov.w	r8, #2
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 800072a:	e9cd 232f 	strd	r2, r3, [sp, #188]	; 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 800072e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000732:	f8cd 80e4 	str.w	r8, [sp, #228]	; 0xe4
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000736:	e9cd 1331 	strd	r1, r3, [sp, #196]	; 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 800073a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 800073e:	a92d      	add	r1, sp, #180	; 0xb4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000740:	e9cd 0333 	strd	r0, r3, [sp, #204]	; 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000744:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000748:	480d      	ldr	r0, [pc, #52]	; (8000780 <main+0x31c>)
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 800074a:	e9cd 4335 	strd	r4, r3, [sp, #212]	; 0xd4
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 800074e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000752:	e9cd 5337 	strd	r5, r3, [sp, #220]	; 0xdc
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000756:	f006 f9a1 	bl	8006a9c <HAL_DSI_ConfigCommand>
 800075a:	b1a8      	cbz	r0, 8000788 <main+0x324>
 800075c:	b672      	cpsid	i
  while (1)
 800075e:	e7fe      	b.n	800075e <main+0x2fa>
 8000760:	0300001b 	.word	0x0300001b
 8000764:	10040000 	.word	0x10040000
 8000768:	e000ed00 	.word	0xe000ed00
 800076c:	58024400 	.word	0x58024400
 8000770:	240002bc 	.word	0x240002bc
 8000774:	52005000 	.word	0x52005000
 8000778:	24000190 	.word	0x24000190
 800077c:	58021800 	.word	0x58021800
 8000780:	240001f8 	.word	0x240001f8
 8000784:	52001000 	.word	0x52001000
  CmdCfg.CommandSize = 400;
 8000788:	2305      	movs	r3, #5
 800078a:	f44f 77c8 	mov.w	r7, #400	; 0x190
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 800078e:	2601      	movs	r6, #1
  CmdCfg.VirtualChannelID = 0;
 8000790:	9020      	str	r0, [sp, #128]	; 0x80
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000792:	9027      	str	r0, [sp, #156]	; 0x9c
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000794:	962a      	str	r6, [sp, #168]	; 0xa8
  CmdCfg.CommandSize = 400;
 8000796:	e9cd 3721 	strd	r3, r7, [sp, #132]	; 0x84
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 800079a:	2310      	movs	r3, #16
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 800079c:	e9cd 3023 	strd	r3, r0, [sp, #140]	; 0x8c
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 80007a0:	2380      	movs	r3, #128	; 0x80
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 80007a2:	e9cd 0025 	strd	r0, r0, [sp, #148]	; 0x94
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 80007a6:	eb0d 0103 	add.w	r1, sp, r3
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 80007aa:	e9cd 3028 	strd	r3, r0, [sp, #160]	; 0xa0
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 80007ae:	4851      	ldr	r0, [pc, #324]	; (80008f4 <main+0x490>)
 80007b0:	f006 f902 	bl	80069b8 <HAL_DSI_ConfigAdaptedCommandMode>
 80007b4:	4601      	mov	r1, r0
 80007b6:	b108      	cbz	r0, 80007bc <main+0x358>
 80007b8:	b672      	cpsid	i
  while (1)
 80007ba:	e7fe      	b.n	80007ba <main+0x356>
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 80007bc:	484d      	ldr	r0, [pc, #308]	; (80008f4 <main+0x490>)
 80007be:	f006 f8ea 	bl	8006996 <HAL_DSI_SetGenericVCID>
 80007c2:	4604      	mov	r4, r0
 80007c4:	b108      	cbz	r0, 80007ca <main+0x366>
 80007c6:	b672      	cpsid	i
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <main+0x364>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80007ca:	4601      	mov	r1, r0
 80007cc:	2234      	movs	r2, #52	; 0x34
 80007ce:	a820      	add	r0, sp, #128	; 0x80
  hltdc.Instance = LTDC;
 80007d0:	4d49      	ldr	r5, [pc, #292]	; (80008f8 <main+0x494>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80007d2:	f01d f8ef 	bl	801d9b4 <memset>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 80007d6:	4849      	ldr	r0, [pc, #292]	; (80008fc <main+0x498>)
 80007d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  hltdc.Init.AccumulatedActiveH = 482;
 80007dc:	f44f 7cc9 	mov.w	ip, #402	; 0x192
  hltdc.Init.TotalHeigh = 483;
 80007e0:	f240 1e93 	movw	lr, #403	; 0x193
  hltdc.Init.Backcolor.Blue = 0;
 80007e4:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.AccumulatedVBP = 2;
 80007e6:	f8c5 8020 	str.w	r8, [r5, #32]
  hltdc.Init.Backcolor.Red = 0;
 80007ea:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 80007ee:	e9c5 0300 	strd	r0, r3, [r5]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 80007f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80007f6:	4628      	mov	r0, r5
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007f8:	e9c5 3402 	strd	r3, r4, [r5, #8]
  hltdc.Init.AccumulatedActiveH = 482;
 80007fc:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 8000800:	e9c5 c309 	strd	ip, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 483;
 8000804:	f240 13e3 	movw	r3, #483	; 0x1e3
  hltdc.Init.HorizontalSync = 0;
 8000808:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hltdc.Init.AccumulatedHBP = 2;
 800080c:	e9c5 4806 	strd	r4, r8, [r5, #24]
  hltdc.Init.TotalHeigh = 483;
 8000810:	e9c5 e30b 	strd	lr, r3, [r5, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000814:	f007 f942 	bl	8007a9c <HAL_LTDC_Init>
 8000818:	b108      	cbz	r0, 800081e <main+0x3ba>
 800081a:	b672      	cpsid	i
  while (1)
 800081c:	e7fe      	b.n	800081c <main+0x3b8>
  pLayerCfg.Alpha = 255;
 800081e:	22ff      	movs	r2, #255	; 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000820:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  pLayerCfg.WindowY1 = 480;
 8000824:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  pLayerCfg.WindowY0 = 0;
 8000828:	9022      	str	r0, [sp, #136]	; 0x88
  pLayerCfg.Backcolor.Blue = 0;
 800082a:	f8ad 00b0 	strh.w	r0, [sp, #176]	; 0xb0
  pLayerCfg.Backcolor.Red = 0;
 800082e:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
  pLayerCfg.ImageHeight = 480;
 8000832:	932b      	str	r3, [sp, #172]	; 0xac
  pLayerCfg.Alpha0 = 0;
 8000834:	e9cd 2025 	strd	r2, r0, [sp, #148]	; 0x94
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000838:	2207      	movs	r2, #7
 800083a:	e9cd 1227 	strd	r1, r2, [sp, #156]	; 0x9c
  pLayerCfg.FBStartAdress = 0xD0000000;
 800083e:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000842:	a920      	add	r1, sp, #128	; 0x80
  pLayerCfg.WindowX1 = 400;
 8000844:	e9cd 0720 	strd	r0, r7, [sp, #128]	; 0x80
  pLayerCfg.ImageWidth = 400;
 8000848:	e9cd 2729 	strd	r2, r7, [sp, #164]	; 0xa4
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800084c:	4602      	mov	r2, r0
 800084e:	4628      	mov	r0, r5
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000850:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000854:	f007 f9ee 	bl	8007c34 <HAL_LTDC_ConfigLayer>
 8000858:	4604      	mov	r4, r0
 800085a:	b108      	cbz	r0, 8000860 <main+0x3fc>
 800085c:	b672      	cpsid	i
  while (1)
 800085e:	e7fe      	b.n	800085e <main+0x3fa>
  __HAL_LTDC_DISABLE(&hltdc);
 8000860:	682a      	ldr	r2, [r5, #0]
  HAL_DSI_Start(&hdsi);
 8000862:	4824      	ldr	r0, [pc, #144]	; (80008f4 <main+0x490>)
  __HAL_LTDC_DISABLE(&hltdc);
 8000864:	6993      	ldr	r3, [r2, #24]
 8000866:	f023 0301 	bic.w	r3, r3, #1
 800086a:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 800086c:	f006 f9fe 	bl	8006c6c <HAL_DSI_Start>
  IOCtx.Address     = 0;
 8000870:	4923      	ldr	r1, [pc, #140]	; (8000900 <main+0x49c>)
  IOCtx.GetTick     = BSP_GetTick;
 8000872:	4b24      	ldr	r3, [pc, #144]	; (8000904 <main+0x4a0>)
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000874:	4824      	ldr	r0, [pc, #144]	; (8000908 <main+0x4a4>)
  IOCtx.GetTick     = BSP_GetTick;
 8000876:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000878:	4b24      	ldr	r3, [pc, #144]	; (800090c <main+0x4a8>)
  IOCtx.Address     = 0;
 800087a:	800c      	strh	r4, [r1, #0]
  IOCtx.WriteReg    = DSI_IO_Write;
 800087c:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 800087e:	4b24      	ldr	r3, [pc, #144]	; (8000910 <main+0x4ac>)
 8000880:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000882:	f004 fde1 	bl	8005448 <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8000886:	4632      	mov	r2, r6
 8000888:	4621      	mov	r1, r4
 800088a:	481f      	ldr	r0, [pc, #124]	; (8000908 <main+0x4a4>)
 800088c:	f004 fa38 	bl	8004d00 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000890:	2328      	movs	r3, #40	; 0x28
 8000892:	2215      	movs	r2, #21
 8000894:	4621      	mov	r1, r4
 8000896:	4817      	ldr	r0, [pc, #92]	; (80008f4 <main+0x490>)
 8000898:	9400      	str	r4, [sp, #0]
 800089a:	f006 fa1a 	bl	8006cd2 <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 800089e:	a92d      	add	r1, sp, #180	; 0xb4
 80008a0:	4814      	ldr	r0, [pc, #80]	; (80008f4 <main+0x490>)
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 80008a2:	9437      	str	r4, [sp, #220]	; 0xdc
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 80008a4:	e9cd 442d 	strd	r4, r4, [sp, #180]	; 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 80008a8:	e9cd 442f 	strd	r4, r4, [sp, #188]	; 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 80008ac:	e9cd 4431 	strd	r4, r4, [sp, #196]	; 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 80008b0:	e9cd 4433 	strd	r4, r4, [sp, #204]	; 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 80008b4:	e9cd 4435 	strd	r4, r4, [sp, #212]	; 0xd4
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 80008b8:	f006 f8f0 	bl	8006a9c <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 80008bc:	f44f 7148 	mov.w	r1, #800	; 0x320
 80008c0:	4622      	mov	r2, r4
 80008c2:	4628      	mov	r0, r5
 80008c4:	f007 f9e4 	bl	8007c90 <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 80008c8:	682a      	ldr	r2, [r5, #0]
 80008ca:	6993      	ldr	r3, [r2, #24]
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6193      	str	r3, [r2, #24]
  MX_TouchGFX_Init();
 80008d2:	f000 fcbd 	bl	8001250 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 80008d6:	f000 fcba 	bl	800124e <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 80008da:	f009 fbc7 	bl	800a06c <osKernelInitialize>
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 80008de:	4a0d      	ldr	r2, [pc, #52]	; (8000914 <main+0x4b0>)
 80008e0:	4621      	mov	r1, r4
 80008e2:	480d      	ldr	r0, [pc, #52]	; (8000918 <main+0x4b4>)
 80008e4:	f009 fbee 	bl	800a0c4 <osThreadNew>
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <main+0x4b8>)
 80008ea:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80008ec:	f009 fbd0 	bl	800a090 <osKernelStart>
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <main+0x48c>
 80008f2:	bf00      	nop
 80008f4:	240001f8 	.word	0x240001f8
 80008f8:	24000214 	.word	0x24000214
 80008fc:	50001000 	.word	0x50001000
 8000900:	24000138 	.word	0x24000138
 8000904:	08005831 	.word	0x08005831
 8000908:	24000148 	.word	0x24000148
 800090c:	080017e5 	.word	0x080017e5
 8000910:	0800181d 	.word	0x0800181d
 8000914:	0801ea64 	.word	0x0801ea64
 8000918:	0800125f 	.word	0x0800125f
 800091c:	24000168 	.word	0x24000168
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	2214      	movs	r2, #20
 8000922:	2100      	movs	r1, #0
 8000924:	a82d      	add	r0, sp, #180	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000926:	2500      	movs	r5, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f01d f844 	bl	801d9b4 <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800092c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8000930:	2201      	movs	r2, #1
 8000932:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 800093a:	4883      	ldr	r0, [pc, #524]	; (8000b48 <main+0x6e4>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093c:	2703      	movs	r7, #3
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	f44f 7880 	mov.w	r8, #256	; 0x100
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000942:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000946:	2608      	movs	r6, #8
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000948:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800094c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000950:	9304      	str	r3, [sp, #16]
 8000952:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000954:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800095c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000960:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000968:	9305      	str	r3, [sp, #20]
 800096a:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800096c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000970:	f043 0310 	orr.w	r3, r3, #16
 8000974:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000978:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800097c:	f003 0310 	and.w	r3, r3, #16
 8000980:	9306      	str	r3, [sp, #24]
 8000982:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000984:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800098c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000990:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000998:	9307      	str	r3, [sp, #28]
 800099a:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80009a8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80009ac:	f003 0304 	and.w	r3, r3, #4
 80009b0:	9308      	str	r3, [sp, #32]
 80009b2:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80009b4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80009b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009bc:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80009c0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80009c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009c8:	9309      	str	r3, [sp, #36]	; 0x24
 80009ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009cc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80009d0:	f043 0308 	orr.w	r3, r3, #8
 80009d4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80009d8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80009dc:	f003 0308 	and.w	r3, r3, #8
 80009e0:	930a      	str	r3, [sp, #40]	; 0x28
 80009e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80009f0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80009fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009fc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000a00:	f043 0320 	orr.w	r3, r3, #32
 8000a04:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000a08:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000a0c:	f003 0320 	and.w	r3, r3, #32
 8000a10:	930c      	str	r3, [sp, #48]	; 0x30
 8000a12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a14:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000a18:	f043 0302 	orr.w	r3, r3, #2
 8000a1c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000a20:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a24:	2401      	movs	r4, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	f003 0302 	and.w	r3, r3, #2
 8000a2a:	930d      	str	r3, [sp, #52]	; 0x34
 8000a2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8000a2e:	f006 fbeb 	bl	8007208 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2108      	movs	r1, #8
 8000a36:	4845      	ldr	r0, [pc, #276]	; (8000b4c <main+0x6e8>)
 8000a38:	f006 fbe6 	bl	8007208 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a42:	4843      	ldr	r0, [pc, #268]	; (8000b50 <main+0x6ec>)
 8000a44:	f006 fbe0 	bl	8007208 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOJ, FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f44f 7142 	mov.w	r1, #776	; 0x308
 8000a4e:	483e      	ldr	r0, [pc, #248]	; (8000b48 <main+0x6e4>)
 8000a50:	f006 fbda 	bl	8007208 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	f241 3308 	movw	r3, #4872	; 0x1308
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000a58:	a92d      	add	r1, sp, #180	; 0xb4
 8000a5a:	483b      	ldr	r0, [pc, #236]	; (8000b48 <main+0x6e4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	e9cd 342d 	strd	r3, r4, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	e9cd 572f 	strd	r5, r7, [sp, #188]	; 0xbc
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000a64:	f006 fa3c 	bl	8006ee0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6a:	a92d      	add	r1, sp, #180	; 0xb4
 8000a6c:	4839      	ldr	r0, [pc, #228]	; (8000b54 <main+0x6f0>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000a6e:	9531      	str	r5, [sp, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	e9cd 832d 	strd	r8, r3, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	e9cd 552f 	strd	r5, r5, [sp, #188]	; 0xbc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a78:	f006 fa32 	bl	8006ee0 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	a92d      	add	r1, sp, #180	; 0xb4
 8000a7e:	4833      	ldr	r0, [pc, #204]	; (8000b4c <main+0x6e8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	e9cd 642d 	strd	r6, r4, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a84:	e9cd 472f 	strd	r4, r7, [sp, #188]	; 0xbc
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f006 fa2a 	bl	8006ee0 <HAL_GPIO_Init>
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	a92d      	add	r1, sp, #180	; 0xb4
 8000a8e:	4830      	ldr	r0, [pc, #192]	; (8000b50 <main+0x6ec>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	e9cd 842d 	strd	r8, r4, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a94:	e9cd 572f 	strd	r5, r7, [sp, #188]	; 0xbc
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f006 fa22 	bl	8006ee0 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8000a9c:	482e      	ldr	r0, [pc, #184]	; (8000b58 <main+0x6f4>)
 8000a9e:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <main+0x6f8>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000aa0:	8085      	strh	r5, [r0, #4]
  hcrc.Instance = CRC;
 8000aa2:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000aa4:	6204      	str	r4, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000aa6:	e9c0 5505 	strd	r5, r5, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000aaa:	f005 fca1 	bl	80063f0 <HAL_CRC_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2800      	cmp	r0, #0
 8000ab2:	f47f ad7a 	bne.w	80005aa <main+0x146>
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000ab6:	492a      	ldr	r1, [pc, #168]	; (8000b60 <main+0x6fc>)
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000ab8:	2540      	movs	r5, #64	; 0x40
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000aba:	482a      	ldr	r0, [pc, #168]	; (8000b64 <main+0x700>)
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000abc:	680a      	ldr	r2, [r1, #0]
 8000abe:	f022 0201 	bic.w	r2, r2, #1
 8000ac2:	600a      	str	r2, [r1, #0]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000ac4:	a92d      	add	r1, sp, #180	; 0xb4
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000ac6:	4a28      	ldr	r2, [pc, #160]	; (8000b68 <main+0x704>)
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000ac8:	6283      	str	r3, [r0, #40]	; 0x28
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000aca:	e9c0 2300 	strd	r2, r3, [r0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000ace:	2220      	movs	r2, #32
 8000ad0:	e9c0 2504 	strd	r2, r5, [r0, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000ad4:	2280      	movs	r2, #128	; 0x80
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8000ad6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000ada:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000ade:	e9c0 3308 	strd	r3, r3, [r0, #32]
  SdramTiming.LoadToActiveDelay = 16;
 8000ae2:	2310      	movs	r3, #16
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000ae4:	e9cd 332d 	strd	r3, r3, [sp, #180]	; 0xb4
  SdramTiming.RowCycleDelay = 16;
 8000ae8:	e9cd 332f 	strd	r3, r3, [sp, #188]	; 0xbc
  SdramTiming.RPDelay = 16;
 8000aec:	e9cd 3331 	strd	r3, r3, [sp, #196]	; 0xc4
  SdramTiming.RCDDelay = 16;
 8000af0:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000af2:	f008 ffdf 	bl	8009ab4 <HAL_SDRAM_Init>
 8000af6:	4680      	mov	r8, r0
 8000af8:	2800      	cmp	r0, #0
 8000afa:	f43f ad58 	beq.w	80005ae <main+0x14a>
 8000afe:	b672      	cpsid	i
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <main+0x69c>
  HAL_Init();
 8000b02:	f005 fb6d 	bl	80061e0 <HAL_Init>
  SystemClock_Config();
 8000b06:	f7ff fc41 	bl	800038c <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8000b0a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 8000b0e:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8000b10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b14:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8000b18:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b20:	9303      	str	r3, [sp, #12]
 8000b22:	9b03      	ldr	r3, [sp, #12]
HAL_HSEM_FastTake(HSEM_ID_0);
 8000b24:	f006 fb7e 	bl	8007224 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8000b28:	4621      	mov	r1, r4
 8000b2a:	4620      	mov	r0, r4
 8000b2c:	f006 fb88 	bl	8007240 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000b30:	4c0e      	ldr	r4, [pc, #56]	; (8000b6c <main+0x708>)
 8000b32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b36:	6822      	ldr	r2, [r4, #0]
 8000b38:	0412      	lsls	r2, r2, #16
 8000b3a:	f53f aef1 	bmi.w	8000920 <main+0x4bc>
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	d1f9      	bne.n	8000b36 <main+0x6d2>
 8000b42:	b672      	cpsid	i
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <main+0x6e0>
 8000b46:	bf00      	nop
 8000b48:	58022400 	.word	0x58022400
 8000b4c:	58021800 	.word	0x58021800
 8000b50:	58021400 	.word	0x58021400
 8000b54:	58020000 	.word	0x58020000
 8000b58:	2400016c 	.word	0x2400016c
 8000b5c:	58024c00 	.word	0x58024c00
 8000b60:	52004000 	.word	0x52004000
 8000b64:	24000308 	.word	0x24000308
 8000b68:	52004140 	.word	0x52004140
 8000b6c:	58024400 	.word	0x58024400

08000b70 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 8000b70:	6802      	ldr	r2, [r0, #0]
 8000b72:	4b03      	ldr	r3, [pc, #12]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d101      	bne.n	8000b7c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000b78:	f005 bb60 	b.w	800623c <HAL_IncTick>
}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	40001000 	.word	0x40001000

08000b84 <Error_Handler>:
 8000b84:	b672      	cpsid	i
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <Error_Handler+0x2>

08000b88 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b88:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <HAL_MspInit+0x2c>)
{
 8000b8a:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b8c:	210f      	movs	r1, #15
 8000b8e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000b96:	f042 0202 	orr.w	r2, r2, #2
 8000b9a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b9e:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ba4:	f003 0302 	and.w	r3, r3, #2
 8000ba8:	9301      	str	r3, [sp, #4]
 8000baa:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bac:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bae:	f005 bb81 	b.w	80062b4 <HAL_NVIC_SetPriority>
 8000bb2:	bf00      	nop
 8000bb4:	58024400 	.word	0x58024400

08000bb8 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000bb8:	6802      	ldr	r2, [r0, #0]
{
 8000bba:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <HAL_CRC_MspInit+0x2c>)
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d10d      	bne.n	8000bde <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000bc2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000bc6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000bca:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000bce:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bda:	9301      	str	r3, [sp, #4]
 8000bdc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000bde:	b002      	add	sp, #8
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	58024c00 	.word	0x58024c00

08000be8 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <HAL_DMA2D_MspInit+0x40>)
{
 8000bea:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8000bec:	6802      	ldr	r2, [r0, #0]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d117      	bne.n	8000c22 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000bf4:	2107      	movs	r1, #7
 8000bf6:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000bf8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000bfc:	f042 0210 	orr.w	r2, r2, #16
 8000c00:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000c04:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000c06:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000c0a:	f003 0310 	and.w	r3, r3, #16
 8000c0e:	9301      	str	r3, [sp, #4]
 8000c10:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000c12:	f005 fb4f 	bl	80062b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000c16:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000c18:	b003      	add	sp, #12
 8000c1a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000c1e:	f005 bb7b 	b.w	8006318 <HAL_NVIC_EnableIRQ>
}
 8000c22:	b003      	add	sp, #12
 8000c24:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c28:	52001000 	.word	0x52001000
 8000c2c:	58024400 	.word	0x58024400

08000c30 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8000c30:	b510      	push	{r4, lr}
 8000c32:	b0ba      	sub	sp, #232	; 0xe8
 8000c34:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c36:	2214      	movs	r2, #20
 8000c38:	2100      	movs	r1, #0
 8000c3a:	a803      	add	r0, sp, #12
 8000c3c:	f01c feba 	bl	801d9b4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c40:	22c8      	movs	r2, #200	; 0xc8
 8000c42:	2100      	movs	r1, #0
 8000c44:	a808      	add	r0, sp, #32
 8000c46:	f01c feb5 	bl	801d9b4 <memset>
  if(hdsi->Instance==DSI)
 8000c4a:	6823      	ldr	r3, [r4, #0]
 8000c4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c50:	d138      	bne.n	8000cc4 <HAL_DSI_MspInit+0x94>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8000c52:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000c56:	2300      	movs	r3, #0
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c58:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8000c5a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c5e:	f008 f9f7 	bl	8009050 <HAL_RCCEx_PeriphCLKConfig>
 8000c62:	b108      	cbz	r0, 8000c68 <HAL_DSI_MspInit+0x38>
    {
      Error_Handler();
 8000c64:	f7ff ff8e 	bl	8000b84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8000c68:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <HAL_DSI_MspInit+0x98>)
    DSI_D0N     ------> DSIHOST_D0N
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000c6c:	a903      	add	r1, sp, #12
 8000c6e:	4817      	ldr	r0, [pc, #92]	; (8000ccc <HAL_DSI_MspInit+0x9c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 8000c70:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8000c74:	f042 0210 	orr.w	r2, r2, #16
 8000c78:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8000c7c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8000c80:	f002 0210 	and.w	r2, r2, #16
 8000c84:	9201      	str	r2, [sp, #4]
 8000c86:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c88:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c90:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c9e:	9302      	str	r3, [sp, #8]
 8000ca0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8000ca8:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8000cae:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000cb0:	f006 f916 	bl	8006ee0 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8000cb4:	207b      	movs	r0, #123	; 0x7b
 8000cb6:	4622      	mov	r2, r4
 8000cb8:	2107      	movs	r1, #7
 8000cba:	f005 fafb 	bl	80062b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8000cbe:	207b      	movs	r0, #123	; 0x7b
 8000cc0:	f005 fb2a 	bl	8006318 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8000cc4:	b03a      	add	sp, #232	; 0xe8
 8000cc6:	bd10      	pop	{r4, pc}
 8000cc8:	58024400 	.word	0x58024400
 8000ccc:	58022400 	.word	0x58022400

08000cd0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000cd0:	b510      	push	{r4, lr}
 8000cd2:	b0b4      	sub	sp, #208	; 0xd0
 8000cd4:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd6:	22c8      	movs	r2, #200	; 0xc8
 8000cd8:	2100      	movs	r1, #0
 8000cda:	a802      	add	r0, sp, #8
 8000cdc:	f01c fe6a 	bl	801d9b4 <memset>
  if(hltdc->Instance==LTDC)
 8000ce0:	6822      	ldr	r2, [r4, #0]
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <HAL_LTDC_MspInit+0x74>)
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d12b      	bne.n	8000d40 <HAL_LTDC_MspInit+0x70>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000ce8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000cec:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3M = 5;
    PeriphClkInitStruct.PLL3.PLL3N = 161;
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 21;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8000cee:	2115      	movs	r1, #21
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cf0:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000cf2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 8000cf6:	23a1      	movs	r3, #161	; 0xa1
 8000cf8:	2205      	movs	r2, #5
 8000cfa:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000cfe:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000d00:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8000d04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d08:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d0c:	f008 f9a0 	bl	8009050 <HAL_RCCEx_PeriphCLKConfig>
 8000d10:	b108      	cbz	r0, 8000d16 <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 8000d12:	f7ff ff37 	bl	8000b84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <HAL_LTDC_MspInit+0x78>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8000d18:	2058      	movs	r0, #88	; 0x58
 8000d1a:	2107      	movs	r1, #7
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000d1c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8000d20:	f042 0208 	orr.w	r2, r2, #8
 8000d24:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8000d28:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000d2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000d2e:	f003 0308 	and.w	r3, r3, #8
 8000d32:	9301      	str	r3, [sp, #4]
 8000d34:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8000d36:	f005 fabd 	bl	80062b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000d3a:	2058      	movs	r0, #88	; 0x58
 8000d3c:	f005 faec 	bl	8006318 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8000d40:	b034      	add	sp, #208	; 0xd0
 8000d42:	bd10      	pop	{r4, pc}
 8000d44:	50001000 	.word	0x50001000
 8000d48:	58024400 	.word	0x58024400

08000d4c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d4e:	b0bf      	sub	sp, #252	; 0xfc
 8000d50:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d52:	2214      	movs	r2, #20
 8000d54:	2100      	movs	r1, #0
 8000d56:	a807      	add	r0, sp, #28
 8000d58:	f01c fe2c 	bl	801d9b4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d5c:	22c8      	movs	r2, #200	; 0xc8
 8000d5e:	2100      	movs	r1, #0
 8000d60:	a80c      	add	r0, sp, #48	; 0x30
 8000d62:	f01c fe27 	bl	801d9b4 <memset>
  if(hqspi->Instance==QUADSPI)
 8000d66:	6822      	ldr	r2, [r4, #0]
 8000d68:	4b53      	ldr	r3, [pc, #332]	; (8000eb8 <HAL_QSPI_MspInit+0x16c>)
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	f040 80a1 	bne.w	8000eb2 <HAL_QSPI_MspInit+0x166>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8000d70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d74:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d76:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8000d78:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d7c:	f008 f968 	bl	8009050 <HAL_RCCEx_PeriphCLKConfig>
 8000d80:	b108      	cbz	r0, 8000d86 <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 8000d82:	f7ff feff 	bl	8000b84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000d86:	4b4d      	ldr	r3, [pc, #308]	; (8000ebc <HAL_QSPI_MspInit+0x170>)
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d88:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d8c:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000d8e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d92:	a907      	add	r1, sp, #28
 8000d94:	484a      	ldr	r0, [pc, #296]	; (8000ec0 <HAL_QSPI_MspInit+0x174>)

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000d96:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000d98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d9c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000da0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000da4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000da8:	9201      	str	r2, [sp, #4]
 8000daa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000db0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000db4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000db8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000dbc:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000dc0:	9202      	str	r2, [sp, #8]
 8000dc2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dc4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000dc8:	f042 0220 	orr.w	r2, r2, #32
 8000dcc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000dd0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000dd4:	f002 0220 	and.w	r2, r2, #32
 8000dd8:	9203      	str	r2, [sp, #12]
 8000dda:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ddc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000de0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000de4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000de8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000dec:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000df0:	9204      	str	r2, [sp, #16]
 8000df2:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000df8:	f042 0202 	orr.w	r2, r2, #2
 8000dfc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000e00:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e04:	f002 0202 	and.w	r2, r2, #2
 8000e08:	9205      	str	r2, [sp, #20]
 8000e0a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e0c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e10:	f042 0208 	orr.w	r2, r2, #8
 8000e14:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1c:	f003 0308 	and.w	r3, r3, #8
 8000e20:	9306      	str	r3, [sp, #24]
 8000e22:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000e28:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e30:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e32:	f006 f855 	bl	8006ee0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e36:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e38:	a907      	add	r1, sp, #28
 8000e3a:	4821      	ldr	r0, [pc, #132]	; (8000ec0 <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e3c:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e46:	f006 f84b 	bl	8006ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e4a:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e4c:	a907      	add	r1, sp, #28
 8000e4e:	481d      	ldr	r0, [pc, #116]	; (8000ec4 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e50:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e5a:	f006 f841 	bl	8006ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e5e:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e62:	a907      	add	r1, sp, #28
 8000e64:	4817      	ldr	r0, [pc, #92]	; (8000ec4 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e66:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e70:	f006 f836 	bl	8006ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e74:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e76:	a907      	add	r1, sp, #28
 8000e78:	4813      	ldr	r0, [pc, #76]	; (8000ec8 <HAL_QSPI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e7a:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e84:	f006 f82c 	bl	8006ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e88:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8a:	a907      	add	r1, sp, #28
 8000e8c:	480f      	ldr	r0, [pc, #60]	; (8000ecc <HAL_QSPI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e8e:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e98:	f006 f822 	bl	8006ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea0:	a907      	add	r1, sp, #28
 8000ea2:	480b      	ldr	r0, [pc, #44]	; (8000ed0 <HAL_QSPI_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000ea4:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eae:	f006 f817 	bl	8006ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000eb2:	b03f      	add	sp, #252	; 0xfc
 8000eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	52005000 	.word	0x52005000
 8000ebc:	58024400 	.word	0x58024400
 8000ec0:	58021800 	.word	0x58021800
 8000ec4:	58021400 	.word	0x58021400
 8000ec8:	58021c00 	.word	0x58021c00
 8000ecc:	58020400 	.word	0x58020400
 8000ed0:	58020c00 	.word	0x58020c00

08000ed4 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8000ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ed6:	b0b9      	sub	sp, #228	; 0xe4
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000ed8:	2100      	movs	r1, #0
 8000eda:	2214      	movs	r2, #20
 8000edc:	a801      	add	r0, sp, #4
 8000ede:	f01c fd69 	bl	801d9b4 <memset>
  if (FMC_Initialized) {
 8000ee2:	4b3a      	ldr	r3, [pc, #232]	; (8000fcc <HAL_SDRAM_MspInit+0xf8>)
 8000ee4:	6819      	ldr	r1, [r3, #0]
 8000ee6:	2900      	cmp	r1, #0
 8000ee8:	d16d      	bne.n	8000fc6 <HAL_SDRAM_MspInit+0xf2>
  FMC_Initialized = 1;
 8000eea:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eec:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 8000eee:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ef0:	22c0      	movs	r2, #192	; 0xc0
 8000ef2:	f01c fd5f 	bl	801d9b4 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000ef6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000efa:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000efc:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000efe:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f02:	f008 f8a5 	bl	8009050 <HAL_RCCEx_PeriphCLKConfig>
 8000f06:	b108      	cbz	r0, 8000f0c <HAL_SDRAM_MspInit+0x38>
      Error_Handler();
 8000f08:	f7ff fe3c 	bl	8000b84 <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 8000f0c:	4b30      	ldr	r3, [pc, #192]	; (8000fd0 <HAL_SDRAM_MspInit+0xfc>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f10:	2600      	movs	r6, #0
 8000f12:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8000f14:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f18:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f1a:	a901      	add	r1, sp, #4
 8000f1c:	482d      	ldr	r0, [pc, #180]	; (8000fd4 <HAL_SDRAM_MspInit+0x100>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8000f1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000f22:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000f26:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f2a:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 8000f2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	f240 63ff 	movw	r3, #1791	; 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f38:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f40:	f005 ffce 	bl	8006ee0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8000f44:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f48:	a901      	add	r1, sp, #4
 8000f4a:	4823      	ldr	r0, [pc, #140]	; (8000fd8 <HAL_SDRAM_MspInit+0x104>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f4c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f52:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f56:	f005 ffc3 	bl	8006ee0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 8000f5a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f5e:	a901      	add	r1, sp, #4
 8000f60:	481e      	ldr	r0, [pc, #120]	; (8000fdc <HAL_SDRAM_MspInit+0x108>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f62:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f68:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f6c:	f005 ffb8 	bl	8006ee0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8000f70:	f248 1331 	movw	r3, #33073	; 0x8131
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f74:	a901      	add	r1, sp, #4
 8000f76:	481a      	ldr	r0, [pc, #104]	; (8000fe0 <HAL_SDRAM_MspInit+0x10c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f78:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7e:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f82:	f005 ffad 	bl	8006ee0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8000f86:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f8a:	a901      	add	r1, sp, #4
 8000f8c:	4815      	ldr	r0, [pc, #84]	; (8000fe4 <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f8e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f94:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f98:	f005 ffa2 	bl	8006ee0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8000f9c:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fa0:	a901      	add	r1, sp, #4
 8000fa2:	4811      	ldr	r0, [pc, #68]	; (8000fe8 <HAL_SDRAM_MspInit+0x114>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000fa4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000faa:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fae:	f005 ff97 	bl	8006ee0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8000fb2:	230d      	movs	r3, #13
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb4:	a901      	add	r1, sp, #4
 8000fb6:	480d      	ldr	r0, [pc, #52]	; (8000fec <HAL_SDRAM_MspInit+0x118>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000fb8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbe:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc2:	f005 ff8d 	bl	8006ee0 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000fc6:	b039      	add	sp, #228	; 0xe4
 8000fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	24000340 	.word	0x24000340
 8000fd0:	58024400 	.word	0x58024400
 8000fd4:	58022000 	.word	0x58022000
 8000fd8:	58021000 	.word	0x58021000
 8000fdc:	58021c00 	.word	0x58021c00
 8000fe0:	58021800 	.word	0x58021800
 8000fe4:	58020c00 	.word	0x58020c00
 8000fe8:	58021400 	.word	0x58021400
 8000fec:	58020800 	.word	0x58020800

08000ff0 <HAL_SDRAM_MspDeInit>:
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 8000ff0:	b508      	push	{r3, lr}
  if (FMC_DeInitialized) {
 8000ff2:	4b18      	ldr	r3, [pc, #96]	; (8001054 <HAL_SDRAM_MspDeInit+0x64>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	bb62      	cbnz	r2, 8001052 <HAL_SDRAM_MspDeInit+0x62>
  FMC_DeInitialized = 1;
 8000ff8:	2201      	movs	r2, #1
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8000ffa:	f240 61ff 	movw	r1, #1791	; 0x6ff
 8000ffe:	4816      	ldr	r0, [pc, #88]	; (8001058 <HAL_SDRAM_MspDeInit+0x68>)
  FMC_DeInitialized = 1;
 8001000:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 8001002:	4a16      	ldr	r2, [pc, #88]	; (800105c <HAL_SDRAM_MspDeInit+0x6c>)
 8001004:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
 8001008:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800100c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001010:	f006 f852 	bl	80070b8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001014:	f64f 7183 	movw	r1, #65411	; 0xff83
 8001018:	4811      	ldr	r0, [pc, #68]	; (8001060 <HAL_SDRAM_MspDeInit+0x70>)
 800101a:	f006 f84d 	bl	80070b8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800101e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001022:	4810      	ldr	r0, [pc, #64]	; (8001064 <HAL_SDRAM_MspDeInit+0x74>)
 8001024:	f006 f848 	bl	80070b8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001028:	f248 1131 	movw	r1, #33073	; 0x8131
 800102c:	480e      	ldr	r0, [pc, #56]	; (8001068 <HAL_SDRAM_MspDeInit+0x78>)
 800102e:	f006 f843 	bl	80070b8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001032:	f24c 7103 	movw	r1, #50947	; 0xc703
 8001036:	480d      	ldr	r0, [pc, #52]	; (800106c <HAL_SDRAM_MspDeInit+0x7c>)
 8001038:	f006 f83e 	bl	80070b8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 800103c:	f64f 013f 	movw	r1, #63551	; 0xf83f
 8001040:	480b      	ldr	r0, [pc, #44]	; (8001070 <HAL_SDRAM_MspDeInit+0x80>)
 8001042:	f006 f839 	bl	80070b8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3);
 8001046:	210d      	movs	r1, #13
 8001048:	480a      	ldr	r0, [pc, #40]	; (8001074 <HAL_SDRAM_MspDeInit+0x84>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 800104a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3);
 800104e:	f006 b833 	b.w	80070b8 <HAL_GPIO_DeInit>
}
 8001052:	bd08      	pop	{r3, pc}
 8001054:	2400033c 	.word	0x2400033c
 8001058:	58022000 	.word	0x58022000
 800105c:	58024400 	.word	0x58024400
 8001060:	58021000 	.word	0x58021000
 8001064:	58021c00 	.word	0x58021c00
 8001068:	58021800 	.word	0x58021800
 800106c:	58020c00 	.word	0x58020c00
 8001070:	58021400 	.word	0x58021400
 8001074:	58020800 	.word	0x58020800

08001078 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001078:	280f      	cmp	r0, #15
{
 800107a:	b510      	push	{r4, lr}
 800107c:	4604      	mov	r4, r0
 800107e:	b08a      	sub	sp, #40	; 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001080:	d902      	bls.n	8001088 <HAL_InitTick+0x10>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8001082:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001084:	b00a      	add	sp, #40	; 0x28
 8001086:	bd10      	pop	{r4, pc}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001088:	4601      	mov	r1, r0
 800108a:	2200      	movs	r2, #0
 800108c:	2036      	movs	r0, #54	; 0x36
 800108e:	f005 f911 	bl	80062b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001092:	2036      	movs	r0, #54	; 0x36
 8001094:	f005 f940 	bl	8006318 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001098:	4b18      	ldr	r3, [pc, #96]	; (80010fc <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800109a:	4669      	mov	r1, sp
 800109c:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 800109e:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010a0:	4b17      	ldr	r3, [pc, #92]	; (8001100 <HAL_InitTick+0x88>)
 80010a2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80010a6:	f042 0210 	orr.w	r2, r2, #16
 80010aa:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80010ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010b2:	f003 0310 	and.w	r3, r3, #16
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010ba:	f007 feaf 	bl	8008e1c <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010be:	9b07      	ldr	r3, [sp, #28]
 80010c0:	b9c3      	cbnz	r3, 80010f4 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010c2:	f007 fe87 	bl	8008dd4 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 80010c6:	4c0f      	ldr	r4, [pc, #60]	; (8001104 <HAL_InitTick+0x8c>)
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <HAL_InitTick+0x90>)
 80010ca:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80010cc:	f240 33e7 	movw	r3, #999	; 0x3e7
 80010d0:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <HAL_InitTick+0x94>)
 80010d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80010d8:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 80010da:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 80010dc:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80010de:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80010e0:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e2:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80010e4:	f008 fee6 	bl	8009eb4 <HAL_TIM_Base_Init>
 80010e8:	2800      	cmp	r0, #0
 80010ea:	d1ca      	bne.n	8001082 <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 80010ec:	4620      	mov	r0, r4
 80010ee:	f008 fd89 	bl	8009c04 <HAL_TIM_Base_Start_IT>
 80010f2:	e7c7      	b.n	8001084 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80010f4:	f007 fe6e 	bl	8008dd4 <HAL_RCC_GetPCLK1Freq>
 80010f8:	0040      	lsls	r0, r0, #1
 80010fa:	e7e4      	b.n	80010c6 <HAL_InitTick+0x4e>
 80010fc:	24000054 	.word	0x24000054
 8001100:	58024400 	.word	0x58024400
 8001104:	24000344 	.word	0x24000344
 8001108:	40001000 	.word	0x40001000
 800110c:	000f4240 	.word	0x000f4240

08001110 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <NMI_Handler>

08001112 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <HardFault_Handler>

08001114 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <MemManage_Handler>

08001116 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001116:	e7fe      	b.n	8001116 <BusFault_Handler>

08001118 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <UsageFault_Handler>

0800111a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800111a:	4770      	bx	lr

0800111c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800111c:	4801      	ldr	r0, [pc, #4]	; (8001124 <TIM6_DAC_IRQHandler+0x8>)
 800111e:	f008 bdb3 	b.w	8009c88 <HAL_TIM_IRQHandler>
 8001122:	bf00      	nop
 8001124:	24000344 	.word	0x24000344

08001128 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001128:	4801      	ldr	r0, [pc, #4]	; (8001130 <LTDC_IRQHandler+0x8>)
 800112a:	f006 bd26 	b.w	8007b7a <HAL_LTDC_IRQHandler>
 800112e:	bf00      	nop
 8001130:	24000214 	.word	0x24000214

08001134 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001134:	4801      	ldr	r0, [pc, #4]	; (800113c <DMA2D_IRQHandler+0x8>)
 8001136:	f005 b9fa 	b.w	800652e <HAL_DMA2D_IRQHandler>
 800113a:	bf00      	nop
 800113c:	24000190 	.word	0x24000190

08001140 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001140:	4801      	ldr	r0, [pc, #4]	; (8001148 <DSI_IRQHandler+0x8>)
 8001142:	f005 bbb6 	b.w	80068b2 <HAL_DSI_IRQHandler>
 8001146:	bf00      	nop
 8001148:	240001f8 	.word	0x240001f8

0800114c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800114c:	2001      	movs	r0, #1
 800114e:	4770      	bx	lr

08001150 <_kill>:

int _kill(int pid, int sig)
{
 8001150:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001152:	f01c fbd5 	bl	801d900 <__errno>
 8001156:	2316      	movs	r3, #22
 8001158:	6003      	str	r3, [r0, #0]
	return -1;
}
 800115a:	f04f 30ff 	mov.w	r0, #4294967295
 800115e:	bd08      	pop	{r3, pc}

08001160 <_exit>:

void _exit (int status)
{
 8001160:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001162:	f01c fbcd 	bl	801d900 <__errno>
 8001166:	2316      	movs	r3, #22
 8001168:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800116a:	e7fe      	b.n	800116a <_exit+0xa>

0800116c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800116c:	b570      	push	{r4, r5, r6, lr}
 800116e:	460d      	mov	r5, r1
 8001170:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001172:	460e      	mov	r6, r1
 8001174:	1b73      	subs	r3, r6, r5
 8001176:	429c      	cmp	r4, r3
 8001178:	dc01      	bgt.n	800117e <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800117a:	4620      	mov	r0, r4
 800117c:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800117e:	f3af 8000 	nop.w
 8001182:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001186:	e7f5      	b.n	8001174 <_read+0x8>

08001188 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001188:	b570      	push	{r4, r5, r6, lr}
 800118a:	460d      	mov	r5, r1
 800118c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800118e:	460e      	mov	r6, r1
 8001190:	1b73      	subs	r3, r6, r5
 8001192:	429c      	cmp	r4, r3
 8001194:	dc01      	bgt.n	800119a <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001196:	4620      	mov	r0, r4
 8001198:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800119a:	f816 0b01 	ldrb.w	r0, [r6], #1
 800119e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a2:	e7f5      	b.n	8001190 <_write+0x8>

080011a4 <_close>:

int _close(int file)
{
	return -1;
}
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	4770      	bx	lr

080011aa <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80011aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80011ae:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80011b0:	604b      	str	r3, [r1, #4]
}
 80011b2:	4770      	bx	lr

080011b4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80011b4:	2001      	movs	r0, #1
 80011b6:	4770      	bx	lr

080011b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80011b8:	2000      	movs	r0, #0
 80011ba:	4770      	bx	lr

080011bc <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011bc:	4a0b      	ldr	r2, [pc, #44]	; (80011ec <_sbrk+0x30>)
{
 80011be:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80011c0:	6811      	ldr	r1, [r2, #0]
{
 80011c2:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80011c4:	b909      	cbnz	r1, 80011ca <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80011c6:	490a      	ldr	r1, [pc, #40]	; (80011f0 <_sbrk+0x34>)
 80011c8:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ca:	6810      	ldr	r0, [r2, #0]
 80011cc:	4909      	ldr	r1, [pc, #36]	; (80011f4 <_sbrk+0x38>)
 80011ce:	4c0a      	ldr	r4, [pc, #40]	; (80011f8 <_sbrk+0x3c>)
 80011d0:	4403      	add	r3, r0
 80011d2:	1b09      	subs	r1, r1, r4
 80011d4:	428b      	cmp	r3, r1
 80011d6:	d906      	bls.n	80011e6 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80011d8:	f01c fb92 	bl	801d900 <__errno>
 80011dc:	230c      	movs	r3, #12
 80011de:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80011e4:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80011e6:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80011e8:	e7fc      	b.n	80011e4 <_sbrk+0x28>
 80011ea:	bf00      	nop
 80011ec:	24000390 	.word	0x24000390
 80011f0:	2400e6e0 	.word	0x2400e6e0
 80011f4:	24080000 	.word	0x24080000
 80011f8:	00001000 	.word	0x00001000

080011fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001234 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001200:	f004 ff7e 	bl	8006100 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001204:	480c      	ldr	r0, [pc, #48]	; (8001238 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001206:	490d      	ldr	r1, [pc, #52]	; (800123c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001208:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800120c:	e002      	b.n	8001214 <LoopCopyDataInit>

0800120e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001212:	3304      	adds	r3, #4

08001214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001218:	d3f9      	bcc.n	800120e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800121c:	4c0a      	ldr	r4, [pc, #40]	; (8001248 <LoopFillZerobss+0x22>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001220:	e001      	b.n	8001226 <LoopFillZerobss>

08001222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001224:	3204      	adds	r2, #4

08001226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001228:	d3fb      	bcc.n	8001222 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800122a:	f01c fb81 	bl	801d930 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800122e:	f7ff f919 	bl	8000464 <main>
  bx  lr
 8001232:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001234:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001238:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800123c:	2400011c 	.word	0x2400011c
  ldr r2, =_sidata
 8001240:	08021bfc 	.word	0x08021bfc
  ldr r2, =_sbss
 8001244:	2400011c 	.word	0x2400011c
  ldr r4, =_ebss
 8001248:	2400e6e0 	.word	0x2400e6e0

0800124c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800124c:	e7fe      	b.n	800124c <ADC3_IRQHandler>

0800124e <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 800124e:	4770      	bx	lr

08001250 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001250:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 8001252:	f000 ff6b 	bl	800212c <touchgfx_components_init>
  touchgfx_init();
}
 8001256:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  touchgfx_init();
 800125a:	f000 bef5 	b.w	8002048 <touchgfx_init>

0800125e <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800125e:	f000 bf67 	b.w	8002130 <touchgfx_taskEntry>

08001262 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8001262:	6840      	ldr	r0, [r0, #4]
    }
 8001264:	4770      	bx	lr

08001266 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8001266:	6041      	str	r1, [r0, #4]
    }
 8001268:	4770      	bx	lr

0800126a <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 800126a:	1a51      	subs	r1, r2, r1
 800126c:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 8001270:	fbb1 f0f3 	udiv	r0, r1, r3
 8001274:	4770      	bx	lr
	...

08001278 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 8001278:	4b02      	ldr	r3, [pc, #8]	; (8001284 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0xc>)
 800127a:	68c0      	ldr	r0, [r0, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001280:	4358      	muls	r0, r3
 8001282:	4770      	bx	lr
 8001284:	24000394 	.word	0x24000394

08001288 <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 8001288:	4770      	bx	lr
	...

0800128c <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 800128c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 800128e:	4a1e      	ldr	r2, [pc, #120]	; (8001308 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
    tim.Instance = TIM2;
 8001290:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
{
 8001294:	4605      	mov	r5, r0
    tim.Init.Period = 0xFFFFFFFF;
 8001296:	f04f 30ff 	mov.w	r0, #4294967295
    __HAL_RCC_TIM2_CLK_ENABLE();
 800129a:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012a6:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	9301      	str	r3, [sp, #4]
 80012b0:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 80012b2:	4b16      	ldr	r3, [pc, #88]	; (800130c <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 80012b4:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b6:	2100      	movs	r1, #0
    tim.Init.Period = 0xFFFFFFFF;
 80012b8:	60d8      	str	r0, [r3, #12]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ba:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012bc:	6099      	str	r1, [r3, #8]
    tim.Init.Prescaler = 0;
 80012be:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 80012c0:	2101      	movs	r1, #1
 80012c2:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 80012c4:	69d3      	ldr	r3, [r2, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c6:	2210      	movs	r2, #16
 80012c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80012cc:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 80012d0:	fab2 f282 	clz	r2, r2
 80012d4:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 80012d6:	4a0e      	ldr	r2, [pc, #56]	; (8001310 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 80012d8:	5cd3      	ldrb	r3, [r2, r3]
 80012da:	b983      	cbnz	r3, 80012fe <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x72>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 80012dc:	f007 fd58 	bl	8008d90 <HAL_RCC_GetHCLKFreq>
 80012e0:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 80012e2:	f007 fb8f 	bl	8008a04 <HAL_RCC_GetSysClockFreq>
 80012e6:	fbb0 f0f4 	udiv	r0, r0, r4
 80012ea:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 80012ec:	4807      	ldr	r0, [pc, #28]	; (800130c <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 80012ee:	f008 fde1 	bl	8009eb4 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 80012f2:	4806      	ldr	r0, [pc, #24]	; (800130c <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
}
 80012f4:	b003      	add	sp, #12
 80012f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_TIM_Base_Start(&tim);
 80012fa:	f008 bc49 	b.w	8009b90 <HAL_TIM_Base_Start>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 80012fe:	f007 fd69 	bl	8008dd4 <HAL_RCC_GetPCLK1Freq>
 8001302:	0044      	lsls	r4, r0, #1
 8001304:	e7ed      	b.n	80012e2 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x56>
 8001306:	bf00      	nop
 8001308:	58024400 	.word	0x58024400
 800130c:	24000394 	.word	0x24000394
 8001310:	080201c8 	.word	0x080201c8

08001314 <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 8001314:	b510      	push	{r4, lr}
 8001316:	4604      	mov	r4, r0
 8001318:	2110      	movs	r1, #16
 800131a:	f01c fa90 	bl	801d83e <_ZdlPvj>
 800131e:	4620      	mov	r0, r4
 8001320:	bd10      	pop	{r4, pc}

08001322 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 8001322:	b538      	push	{r3, r4, r5, lr}
    if (active) //idle task sched out
    {
        uint32_t current_cc = cc_in;
        cc_consumed += getCPUCycles() - current_cc;
 8001324:	6803      	ldr	r3, [r0, #0]
{
 8001326:	4604      	mov	r4, r0
        cc_consumed += getCPUCycles() - current_cc;
 8001328:	691a      	ldr	r2, [r3, #16]
    if (active) //idle task sched out
 800132a:	b131      	cbz	r1, 800133a <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
        uint32_t current_cc = cc_in;
 800132c:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 800132e:	4790      	blx	r2
 8001330:	6863      	ldr	r3, [r4, #4]
 8001332:	1b5b      	subs	r3, r3, r5
 8001334:	4418      	add	r0, r3
 8001336:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001338:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 800133a:	4790      	blx	r2
 800133c:	60a0      	str	r0, [r4, #8]
}
 800133e:	e7fb      	b.n	8001338 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

08001340 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001340:	4770      	bx	lr

08001342 <_ZN20STM32TouchControllerD0Ev>:
 8001342:	b510      	push	{r4, lr}
 8001344:	4604      	mov	r4, r0
 8001346:	2104      	movs	r1, #4
 8001348:	f01c fa79 	bl	801d83e <_ZdlPvj>
 800134c:	4620      	mov	r0, r4
 800134e:	bd10      	pop	{r4, pc}

08001350 <_ZN20STM32TouchController4initEv>:
static bool bsp_ts_initialized = false;
TS_Init_t* hTS;
TS_State_t  TS_State = {0};

void STM32TouchController::init()
{
 8001350:	b508      	push	{r3, lr}
    /**
     * Initialize touch controller and driver
     *
     */
    hTS->Width = 800;
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <_ZN20STM32TouchController4initEv+0x3c>)
    hTS->Height = 480;
 8001354:	f44f 7248 	mov.w	r2, #800	; 0x320
    hTS->Orientation = TS_SWAP_XY | TS_SWAP_Y;
    hTS->Accuracy = 0;
 8001358:	2000      	movs	r0, #0
    hTS->Width = 800;
 800135a:	6819      	ldr	r1, [r3, #0]
    hTS->Height = 480;
 800135c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001360:	e9c1 2300 	strd	r2, r3, [r1]
    hTS->Accuracy = 0;
 8001364:	230c      	movs	r3, #12
 8001366:	e9c1 3002 	strd	r3, r0, [r1, #8]

    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 800136a:	f004 fdd5 	bl	8005f18 <BSP_TS_Init>
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <_ZN20STM32TouchController4initEv+0x40>)
 8001370:	b910      	cbnz	r0, 8001378 <_ZN20STM32TouchController4initEv+0x28>
    {
        bsp_ts_initialized = true;
 8001372:	2201      	movs	r2, #1
 8001374:	701a      	strb	r2, [r3, #0]
    }

    assert(bsp_ts_initialized);
}
 8001376:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1fb      	bne.n	8001376 <_ZN20STM32TouchController4initEv+0x26>
 800137e:	4b05      	ldr	r3, [pc, #20]	; (8001394 <_ZN20STM32TouchController4initEv+0x44>)
 8001380:	212e      	movs	r1, #46	; 0x2e
 8001382:	4a05      	ldr	r2, [pc, #20]	; (8001398 <_ZN20STM32TouchController4initEv+0x48>)
 8001384:	4805      	ldr	r0, [pc, #20]	; (800139c <_ZN20STM32TouchController4initEv+0x4c>)
 8001386:	f01c fa89 	bl	801d89c <__assert_func>
 800138a:	bf00      	nop
 800138c:	240003f0 	.word	0x240003f0
 8001390:	240003ec 	.word	0x240003ec
 8001394:	0801eab0 	.word	0x0801eab0
 8001398:	0801eac3 	.word	0x0801eac3
 800139c:	0801eaed 	.word	0x0801eaed

080013a0 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80013a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 80013a4:	460f      	mov	r7, r1
 80013a6:	4616      	mov	r6, r2
    if (bsp_ts_initialized)
 80013a8:	781d      	ldrb	r5, [r3, #0]
 80013aa:	b915      	cbnz	r5, 80013b2 <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = TS_State.TouchX;
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
 80013ac:	2500      	movs	r5, #0
}
 80013ae:	4628      	mov	r0, r5
 80013b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BSP_TS_GetState(0, &TS_State);
 80013b2:	4c07      	ldr	r4, [pc, #28]	; (80013d0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 80013b4:	2000      	movs	r0, #0
 80013b6:	4621      	mov	r1, r4
 80013b8:	f004 fe42 	bl	8006040 <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 80013bc:	6823      	ldr	r3, [r4, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0f4      	beq.n	80013ac <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = TS_State.TouchX;
 80013c2:	6863      	ldr	r3, [r4, #4]
 80013c4:	603b      	str	r3, [r7, #0]
            y = TS_State.TouchY;
 80013c6:	68a3      	ldr	r3, [r4, #8]
 80013c8:	6033      	str	r3, [r6, #0]
            return true;
 80013ca:	e7f0      	b.n	80013ae <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 80013cc:	240003ec 	.word	0x240003ec
 80013d0:	240003e0 	.word	0x240003e0

080013d4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 80013d4:	2803      	cmp	r0, #3
 80013d6:	d825      	bhi.n	8001424 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 80013d8:	e8df f000 	tbb	[pc, r0]
 80013dc:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 80013e2:	2108      	movs	r1, #8
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	fab2 f282 	clz	r2, r2
 80013ea:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 80013ec:	480f      	ldr	r0, [pc, #60]	; (800142c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 80013ee:	f005 bf0b 	b.w	8007208 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 80013f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	fab2 f282 	clz	r2, r2
 80013fe:	0952      	lsrs	r2, r2, #5
 8001400:	e7f4      	b.n	80013ec <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001404:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	fab2 f282 	clz	r2, r2
 800140e:	0952      	lsrs	r2, r2, #5
 8001410:	e7ec      	b.n	80013ec <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001412:	4b05      	ldr	r3, [pc, #20]	; (8001428 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001414:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001418:	4805      	ldr	r0, [pc, #20]	; (8001430 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 800141a:	68da      	ldr	r2, [r3, #12]
 800141c:	fab2 f282 	clz	r2, r2
 8001420:	0952      	lsrs	r2, r2, #5
 8001422:	e7e4      	b.n	80013ee <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	240003f4 	.word	0x240003f4
 800142c:	58022400 	.word	0x58022400
 8001430:	58021400 	.word	0x58021400

08001434 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001434:	2803      	cmp	r0, #3
 8001436:	d825      	bhi.n	8001484 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 8001438:	e8df f000 	tbb	[pc, r0]
 800143c:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001442:	2108      	movs	r1, #8
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	3a00      	subs	r2, #0
 8001448:	bf18      	it	ne
 800144a:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 800144c:	480f      	ldr	r0, [pc, #60]	; (800148c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 800144e:	f005 bedb 	b.w	8007208 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001452:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001454:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	3a00      	subs	r2, #0
 800145c:	bf18      	it	ne
 800145e:	2201      	movne	r2, #1
 8001460:	e7f4      	b.n	800144c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001464:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001468:	689a      	ldr	r2, [r3, #8]
 800146a:	3a00      	subs	r2, #0
 800146c:	bf18      	it	ne
 800146e:	2201      	movne	r2, #1
 8001470:	e7ec      	b.n	800144c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001472:	4b05      	ldr	r3, [pc, #20]	; (8001488 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001474:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001478:	4805      	ldr	r0, [pc, #20]	; (8001490 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 800147a:	68da      	ldr	r2, [r3, #12]
 800147c:	3a00      	subs	r2, #0
 800147e:	bf18      	it	ne
 8001480:	2201      	movne	r2, #1
 8001482:	e7e4      	b.n	800144e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	240003f4 	.word	0x240003f4
 800148c:	58022400 	.word	0x58022400
 8001490:	58021400 	.word	0x58021400

08001494 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001494:	2803      	cmp	r0, #3
 8001496:	d811      	bhi.n	80014bc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 8001498:	e8df f000 	tbb	[pc, r0]
 800149c:	0c090602 	.word	0x0c090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80014a0:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80014a2:	4807      	ldr	r0, [pc, #28]	; (80014c0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80014a4:	f005 beb5 	b.w	8007212 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80014a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ac:	e7f9      	b.n	80014a2 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80014ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014b2:	e7f6      	b.n	80014a2 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80014b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014b8:	4802      	ldr	r0, [pc, #8]	; (80014c4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 80014ba:	e7f3      	b.n	80014a4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	58022400 	.word	0x58022400
 80014c4:	58021400 	.word	0x58021400

080014c8 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 80014c8:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 80014ca:	2803      	cmp	r0, #3
 80014cc:	d815      	bhi.n	80014fa <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 80014ce:	e8df f000 	tbb	[pc, r0]
 80014d2:	0a02      	.short	0x0a02
 80014d4:	100d      	.short	0x100d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80014d6:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80014d8:	4809      	ldr	r0, [pc, #36]	; (8001500 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80014da:	f005 fe8f 	bl	80071fc <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 80014de:	1e43      	subs	r3, r0, #1
 80014e0:	4258      	negs	r0, r3
 80014e2:	4158      	adcs	r0, r3
 80014e4:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80014e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ea:	e7f5      	b.n	80014d8 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80014ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014f0:	e7f2      	b.n	80014d8 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80014f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014f6:	4803      	ldr	r0, [pc, #12]	; (8001504 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 80014f8:	e7ef      	b.n	80014da <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 80014fa:	2000      	movs	r0, #0
 80014fc:	e7ef      	b.n	80014de <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 80014fe:	bf00      	nop
 8001500:	58022400 	.word	0x58022400
 8001504:	58021400 	.word	0x58021400

08001508 <_ZN8touchgfx4GPIO4initEv>:
{
 8001508:	b570      	push	{r4, r5, r6, lr}
 800150a:	4d08      	ldr	r5, [pc, #32]	; (800152c <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 800150c:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 800150e:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001510:	b2e0      	uxtb	r0, r4
 8001512:	f7ff ffd9 	bl	80014c8 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001516:	b118      	cbz	r0, 8001520 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001518:	682b      	ldr	r3, [r5, #0]
 800151a:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 800151c:	bf18      	it	ne
 800151e:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001520:	3401      	adds	r4, #1
 8001522:	3504      	adds	r5, #4
 8001524:	2c05      	cmp	r4, #5
 8001526:	d1f3      	bne.n	8001510 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001528:	bd70      	pop	{r4, r5, r6, pc}
 800152a:	bf00      	nop
 800152c:	240003f4 	.word	0x240003f4

08001530 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001530:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001532:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001536:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 800153a:	4770      	bx	lr

0800153c <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 800153c:	2000      	movs	r0, #0
 800153e:	4770      	bx	lr

08001540 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001540:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001542:	3900      	subs	r1, #0
 8001544:	4b02      	ldr	r3, [pc, #8]	; (8001550 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001546:	bf18      	it	ne
 8001548:	2101      	movne	r1, #1
 800154a:	7019      	strb	r1, [r3, #0]
    }
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	2400e453 	.word	0x2400e453

08001554 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001554:	2000      	movs	r0, #0
 8001556:	4770      	bx	lr

08001558 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001558:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800155a:	b10b      	cbz	r3, 8001560 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 800155c:	4608      	mov	r0, r1
 800155e:	4718      	bx	r3
        }
    }
 8001560:	4770      	bx	lr

08001562 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001562:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001566:	4770      	bx	lr

08001568 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001568:	6840      	ldr	r0, [r0, #4]
 800156a:	6803      	ldr	r3, [r0, #0]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	4718      	bx	r3

08001570 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8001570:	4b01      	ldr	r3, [pc, #4]	; (8001578 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8001572:	6818      	ldr	r0, [r3, #0]
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	24000404 	.word	0x24000404

0800157c <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800157c:	4770      	bx	lr

0800157e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800157e:	f000 be73 	b.w	8002268 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08001582 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 8001582:	f000 be51 	b.w	8002228 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001586 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8001586:	f000 beaf 	b.w	80022e8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

0800158a <_ZN11TouchGFXHAL17disableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 800158a:	f000 bea1 	b.w	80022d0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

0800158e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800158e:	f000 be53 	b.w	8002238 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001592 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001592:	b510      	push	{r4, lr}
 8001594:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001596:	f00b fea7 	bl	800d2e8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800159a:	6823      	ldr	r3, [r4, #0]
 800159c:	4620      	mov	r0, r4
 800159e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
 80015a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 80015a6:	4718      	bx	r3

080015a8 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 80015a8:	f00b b904 	b.w	800c7b4 <_ZN8touchgfx3HAL16flushFrameBufferEv>

080015ac <_ZN11TouchGFXHALD0Ev>:
 80015ac:	b510      	push	{r4, lr}
 80015ae:	4604      	mov	r4, r0
 80015b0:	217c      	movs	r1, #124	; 0x7c
 80015b2:	f01c f944 	bl	801d83e <_ZdlPvj>
 80015b6:	4620      	mov	r0, r4
 80015b8:	bd10      	pop	{r4, pc}
	...

080015bc <_ZN11TouchGFXHAL10beginFrameEv>:
    HAL::setFrameBufferStartAddresses(frameBuffer, doubleBuffer, animationStorage);
}

bool TouchGFXHAL::beginFrame()
{
    refreshRequested = false;
 80015bc:	4b02      	ldr	r3, [pc, #8]	; (80015c8 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 80015c2:	f00b b933 	b.w	800c82c <_ZN8touchgfx3HAL10beginFrameEv>
 80015c6:	bf00      	nop
 80015c8:	2400000c 	.word	0x2400000c

080015cc <_ZN11TouchGFXHAL8endFrameEv>:
}

void TouchGFXHAL::endFrame()
{
 80015cc:	b510      	push	{r4, lr}
 80015ce:	4604      	mov	r4, r0
    HAL::endFrame();
 80015d0:	f00b f938 	bl	800c844 <_ZN8touchgfx3HAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 80015d4:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 80015d8:	b113      	cbz	r3, 80015e0 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 80015da:	4b02      	ldr	r3, [pc, #8]	; (80015e4 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 80015dc:	2201      	movs	r2, #1
 80015de:	701a      	strb	r2, [r3, #0]
    }
}
 80015e0:	bd10      	pop	{r4, pc}
 80015e2:	bf00      	nop
 80015e4:	2400000c 	.word	0x2400000c

080015e8 <_ZN11TouchGFXHAL10initializeEv>:
{
 80015e8:	b538      	push	{r3, r4, r5, lr}
 80015ea:	4604      	mov	r4, r0
    GPIO::init();
 80015ec:	f7ff ff8c 	bl	8001508 <_ZN8touchgfx4GPIO4initEv>
    mcuInstr.init();
 80015f0:	4d07      	ldr	r5, [pc, #28]	; (8001610 <_ZN11TouchGFXHAL10initializeEv+0x28>)
    TouchGFXGeneratedHAL::initialize();
 80015f2:	4620      	mov	r0, r4
 80015f4:	f000 fe21 	bl	800223a <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 80015f8:	2300      	movs	r3, #0
    mcuInstr.init();
 80015fa:	4628      	mov	r0, r5
 80015fc:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
 8001600:	f7ff fe44 	bl	800128c <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        updateMCULoad = enabled;
 8001604:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001606:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001608:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
 800160c:	bd38      	pop	{r3, r4, r5, pc}
 800160e:	bf00      	nop
 8001610:	2400040c 	.word	0x2400040c

08001614 <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8001614:	6803      	ldr	r3, [r0, #0]
{
 8001616:	4604      	mov	r4, r0
 8001618:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 800161a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800161e:	4798      	blx	r3
    enableInterrupts();
 8001620:	6823      	ldr	r3, [r4, #0]
 8001622:	4620      	mov	r0, r4
 8001624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001626:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8001628:	f000 faa6 	bl	8001b78 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 800162c:	6823      	ldr	r3, [r4, #0]
 800162e:	4620      	mov	r0, r4
 8001630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001632:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8001634:	2100      	movs	r1, #0
 8001636:	2329      	movs	r3, #41	; 0x29
 8001638:	2215      	movs	r2, #21
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 800163c:	9100      	str	r1, [sp, #0]
 800163e:	f005 fb48 	bl	8006cd2 <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8001642:	f000 fa99 	bl	8001b78 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001646:	6823      	ldr	r3, [r4, #0]
 8001648:	4620      	mov	r0, r4
 800164a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164c:	4798      	blx	r3
    for (;;)
 800164e:	e7f8      	b.n	8001642 <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 8001650:	240001f8 	.word	0x240001f8

08001654 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 8001654:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8001658:	b11b      	cbz	r3, 8001662 <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 800165a:	6840      	ldr	r0, [r0, #4]
 800165c:	6803      	ldr	r3, [r0, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4718      	bx	r3
    }
 8001662:	4618      	mov	r0, r3
 8001664:	4770      	bx	lr
	...

08001668 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001668:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 800166c:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 800166e:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001670:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
            if (DISPLAY_ROTATION == rotate0)
 8001674:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001676:	428c      	cmp	r4, r1
 8001678:	d009      	beq.n	800168e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 800167a:	b93a      	cbnz	r2, 800168c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 800167c:	490a      	ldr	r1, [pc, #40]	; (80016a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800167e:	4a0b      	ldr	r2, [pc, #44]	; (80016ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001680:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001682:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001684:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001686:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001688:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 800168a:	701a      	strb	r2, [r3, #0]
        }
    }
 800168c:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 800168e:	2a00      	cmp	r2, #0
 8001690:	d0fc      	beq.n	800168c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001692:	4a06      	ldr	r2, [pc, #24]	; (80016ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001694:	4904      	ldr	r1, [pc, #16]	; (80016a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001696:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001698:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800169a:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 800169c:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 800169e:	2200      	movs	r2, #0
 80016a0:	e7f3      	b.n	800168a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 80016a2:	bf00      	nop
 80016a4:	2400e44c 	.word	0x2400e44c
 80016a8:	2400e44a 	.word	0x2400e44a
 80016ac:	2400e448 	.word	0x2400e448

080016b0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80016b0:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	428b      	cmp	r3, r1
 80016b8:	d803      	bhi.n	80016c2 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	4293      	cmp	r3, r2
 80016c0:	d905      	bls.n	80016ce <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 80016c2:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 80016c4:	219e      	movs	r1, #158	; 0x9e
 80016c6:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 80016c8:	4807      	ldr	r0, [pc, #28]	; (80016e8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 80016ca:	f01c f8e7 	bl	801d89c <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 80016ce:	4b07      	ldr	r3, [pc, #28]	; (80016ec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 80016d0:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 80016d2:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 80016d4:	801a      	strh	r2, [r3, #0]
    }
 80016d6:	bd08      	pop	{r3, pc}
 80016d8:	2400e448 	.word	0x2400e448
 80016dc:	2400e44a 	.word	0x2400e44a
 80016e0:	0801eb54 	.word	0x0801eb54
 80016e4:	0801ebb7 	.word	0x0801ebb7
 80016e8:	0801ebfa 	.word	0x0801ebfa
 80016ec:	2400e44e 	.word	0x2400e44e
 80016f0:	2400e450 	.word	0x2400e450

080016f4 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 80016f4:	b570      	push	{r4, r5, r6, lr}
 80016f6:	460d      	mov	r5, r1
 80016f8:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 80016fa:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 80016fc:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80016fe:	b935      	cbnz	r5, 800170e <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8001700:	4b0a      	ldr	r3, [pc, #40]	; (800172c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 8001702:	f240 21d2 	movw	r1, #722	; 0x2d2
 8001706:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8001708:	480a      	ldr	r0, [pc, #40]	; (8001734 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 800170a:	f01c f8c7 	bl	801d89c <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800170e:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001712:	3a00      	subs	r2, #0
 8001714:	4b08      	ldr	r3, [pc, #32]	; (8001738 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 8001716:	bf18      	it	ne
 8001718:	2201      	movne	r2, #1
 800171a:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 800171c:	6803      	ldr	r3, [r0, #0]
}
 800171e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001722:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001726:	4718      	bx	r3
 8001728:	24000404 	.word	0x24000404
 800172c:	0801ec4d 	.word	0x0801ec4d
 8001730:	0801ec85 	.word	0x0801ec85
 8001734:	0801ebfa 	.word	0x0801ebfa
 8001738:	2400e452 	.word	0x2400e452

0800173c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lastRenderMethod(HARDWARE)
 800173c:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8001740:	60c3      	str	r3, [r0, #12]
 8001742:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001746:	2300      	movs	r3, #0
 8001748:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
 800174c:	4a1d      	ldr	r2, [pc, #116]	; (80017c4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x88>)
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 800174e:	8503      	strh	r3, [r0, #40]	; 0x28
 8001750:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001754:	62c3      	str	r3, [r0, #44]	; 0x2c
 8001756:	8603      	strh	r3, [r0, #48]	; 0x30
 8001758:	6603      	str	r3, [r0, #96]	; 0x60
 800175a:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
 800175e:	6703      	str	r3, [r0, #112]	; 0x70
 8001760:	e9c0 2319 	strd	r2, r3, [r0, #100]	; 0x64
 8001764:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001768:	6742      	str	r2, [r0, #116]	; 0x74
 800176a:	2201      	movs	r2, #1
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 800176c:	b570      	push	{r4, r5, r6, lr}
 800176e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001772:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8001776:	f8bd 6014 	ldrh.w	r6, [sp, #20]
              inProgress(false)
 800177a:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800177e:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8001782:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
 8001786:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 800178a:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 800178e:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
 8001792:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001796:	42b5      	cmp	r5, r6
        instance = this;
 8001798:	4a0b      	ldr	r2, [pc, #44]	; (80017c8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
 800179a:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800179c:	4a0b      	ldr	r2, [pc, #44]	; (80017cc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
 800179e:	8015      	strh	r5, [r2, #0]
 80017a0:	4a0b      	ldr	r2, [pc, #44]	; (80017d0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 80017a2:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80017a4:	bf28      	it	cs
 80017a6:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80017a8:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80017aa:	bf38      	it	cc
 80017ac:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80017ae:	8016      	strh	r6, [r2, #0]
 80017b0:	4a09      	ldr	r2, [pc, #36]	; (80017d8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80017b2:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80017b6:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 80017b8:	4a08      	ldr	r2, [pc, #32]	; (80017dc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
 80017ba:	7013      	strb	r3, [r2, #0]
                           height)
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 80017be:	6003      	str	r3, [r0, #0]
}
 80017c0:	bd70      	pop	{r4, r5, r6, pc}
 80017c2:	bf00      	nop
 80017c4:	01000001 	.word	0x01000001
 80017c8:	2400e454 	.word	0x2400e454
 80017cc:	2400e448 	.word	0x2400e448
 80017d0:	2400e44e 	.word	0x2400e44e
 80017d4:	2400e44a 	.word	0x2400e44a
 80017d8:	2400e450 	.word	0x2400e450
 80017dc:	2400e44c 	.word	0x2400e44c
 80017e0:	0801ecdc 	.word	0x0801ecdc

080017e4 <DSI_IO_Write>:
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 80017e4:	2b01      	cmp	r3, #1
    {
 80017e6:	b513      	push	{r0, r1, r4, lr}
        if (Size <= 1U)
 80017e8:	d80e      	bhi.n	8001808 <DSI_IO_Write+0x24>
        {
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 80017ea:	5cd3      	ldrb	r3, [r2, r3]
 80017ec:	2215      	movs	r2, #21
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	460b      	mov	r3, r1
 80017f2:	4601      	mov	r1, r0
 80017f4:	4808      	ldr	r0, [pc, #32]	; (8001818 <DSI_IO_Write+0x34>)
 80017f6:	f005 fa6c 	bl	8006cd2 <HAL_DSI_ShortWrite>
 80017fa:	b118      	cbz	r0, 8001804 <DSI_IO_Write+0x20>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 80017fc:	f06f 0007 	mvn.w	r0, #7
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 8001800:	b002      	add	sp, #8
 8001802:	bd10      	pop	{r4, pc}
        int32_t ret = BSP_ERROR_NONE;
 8001804:	2000      	movs	r0, #0
 8001806:	e7fb      	b.n	8001800 <DSI_IO_Write+0x1c>
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8001808:	e9cd 1200 	strd	r1, r2, [sp]
 800180c:	4601      	mov	r1, r0
 800180e:	2239      	movs	r2, #57	; 0x39
 8001810:	4801      	ldr	r0, [pc, #4]	; (8001818 <DSI_IO_Write+0x34>)
 8001812:	f005 fa6f 	bl	8006cf4 <HAL_DSI_LongWrite>
 8001816:	e7f0      	b.n	80017fa <DSI_IO_Write+0x16>
 8001818:	240001f8 	.word	0x240001f8

0800181c <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 800181c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 800181e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8001822:	2106      	movs	r1, #6
 8001824:	9100      	str	r1, [sp, #0]
 8001826:	4601      	mov	r1, r0
 8001828:	4805      	ldr	r0, [pc, #20]	; (8001840 <DSI_IO_Read+0x24>)
 800182a:	f005 fac4 	bl	8006db6 <HAL_DSI_Read>
        {
            ret = BSP_ERROR_BUS_FAILURE;
 800182e:	2800      	cmp	r0, #0
        }

        return ret;
    }
 8001830:	bf14      	ite	ne
 8001832:	f06f 0007 	mvnne.w	r0, #7
 8001836:	2000      	moveq	r0, #0
 8001838:	b005      	add	sp, #20
 800183a:	f85d fb04 	ldr.w	pc, [sp], #4
 800183e:	bf00      	nop
 8001840:	240001f8 	.word	0x240001f8

08001844 <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 8001844:	b530      	push	{r4, r5, lr}
 8001846:	b085      	sub	sp, #20
        uint16_t scanline = 533;

        ScanLineParams[0] = scanline >> 8;
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001848:	4c0c      	ldr	r4, [pc, #48]	; (800187c <LCD_ReqTear+0x38>)
        ScanLineParams[0] = scanline >> 8;
 800184a:	2302      	movs	r3, #2
        ScanLineParams[1] = scanline & 0x00FF;
 800184c:	2515      	movs	r5, #21
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 800184e:	aa03      	add	r2, sp, #12
 8001850:	2100      	movs	r1, #0
 8001852:	4620      	mov	r0, r4
        ScanLineParams[0] = scanline >> 8;
 8001854:	f88d 300c 	strb.w	r3, [sp, #12]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001858:	9201      	str	r2, [sp, #4]
 800185a:	2244      	movs	r2, #68	; 0x44
        ScanLineParams[1] = scanline & 0x00FF;
 800185c:	f88d 500d 	strb.w	r5, [sp, #13]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001860:	9200      	str	r2, [sp, #0]
 8001862:	2239      	movs	r2, #57	; 0x39
 8001864:	f005 fa46 	bl	8006cf4 <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 8001868:	2100      	movs	r1, #0
 800186a:	2335      	movs	r3, #53	; 0x35
 800186c:	462a      	mov	r2, r5
 800186e:	4620      	mov	r0, r4
 8001870:	9100      	str	r1, [sp, #0]
 8001872:	f005 fa2e 	bl	8006cd2 <HAL_DSI_ShortWrite>
    }
 8001876:	b005      	add	sp, #20
 8001878:	bd30      	pop	{r4, r5, pc}
 800187a:	bf00      	nop
 800187c:	240001f8 	.word	0x240001f8

08001880 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8001880:	b508      	push	{r3, lr}
    LCD_ReqTear();
 8001882:	f7ff ffdf 	bl	8001844 <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 8001888:	2202      	movs	r2, #2
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8001890:	2201      	movs	r2, #1
 8001892:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 8001896:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800189a:	f042 0201 	orr.w	r2, r2, #1
 800189e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 80018a2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80018a6:	f042 0202 	orr.w	r2, r2, #2
 80018aa:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 80018ae:	2203      	movs	r2, #3
 80018b0:	4b02      	ldr	r3, [pc, #8]	; (80018bc <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 80018b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80018b4:	bd08      	pop	{r3, pc}
 80018b6:	bf00      	nop
 80018b8:	240001f8 	.word	0x240001f8
 80018bc:	50001000 	.word	0x50001000

080018c0 <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 80018c0:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <LCD_ReqEnable+0x20>)
    {
 80018c2:	b507      	push	{r0, r1, r2, lr}
        if (!firstRefreshRequested)
 80018c4:	7819      	ldrb	r1, [r3, #0]
 80018c6:	b939      	cbnz	r1, 80018d8 <LCD_ReqEnable+0x18>
        {
            firstRefreshRequested = true;
 80018c8:	2201      	movs	r2, #1

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 80018ca:	4806      	ldr	r0, [pc, #24]	; (80018e4 <LCD_ReqEnable+0x24>)
            firstRefreshRequested = true;
 80018cc:	701a      	strb	r2, [r3, #0]
            HAL_DSI_ShortWrite(&(hdsi),
 80018ce:	2329      	movs	r3, #41	; 0x29
 80018d0:	2215      	movs	r2, #21
 80018d2:	9100      	str	r1, [sp, #0]
 80018d4:	f005 f9fd 	bl	8006cd2 <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 80018d8:	b003      	add	sp, #12
 80018da:	f85d fb04 	ldr.w	pc, [sp], #4
 80018de:	bf00      	nop
 80018e0:	2400041c 	.word	0x2400041c
 80018e4:	240001f8 	.word	0x240001f8

080018e8 <LCD_SetUpdateRegionLeft>:
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <LCD_SetUpdateRegionLeft+0x1c>)
    {
 80018ea:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 80018ec:	9301      	str	r3, [sp, #4]
 80018ee:	232a      	movs	r3, #42	; 0x2a
 80018f0:	2239      	movs	r2, #57	; 0x39
 80018f2:	2100      	movs	r1, #0
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	2304      	movs	r3, #4
 80018f8:	4803      	ldr	r0, [pc, #12]	; (8001908 <LCD_SetUpdateRegionLeft+0x20>)
 80018fa:	f005 f9fb 	bl	8006cf4 <HAL_DSI_LongWrite>
    }
 80018fe:	b003      	add	sp, #12
 8001900:	f85d fb04 	ldr.w	pc, [sp], #4
 8001904:	24000004 	.word	0x24000004
 8001908:	240001f8 	.word	0x240001f8

0800190c <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <LCD_SetUpdateRegionRight+0x1c>)
    {
 800190e:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001910:	9301      	str	r3, [sp, #4]
 8001912:	232a      	movs	r3, #42	; 0x2a
 8001914:	2239      	movs	r2, #57	; 0x39
 8001916:	2100      	movs	r1, #0
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	2304      	movs	r3, #4
 800191c:	4803      	ldr	r0, [pc, #12]	; (800192c <LCD_SetUpdateRegionRight+0x20>)
 800191e:	f005 f9e9 	bl	8006cf4 <HAL_DSI_LongWrite>
    }
 8001922:	b003      	add	sp, #12
 8001924:	f85d fb04 	ldr.w	pc, [sp], #4
 8001928:	24000008 	.word	0x24000008
 800192c:	240001f8 	.word	0x240001f8

08001930 <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 8001930:	b538      	push	{r3, r4, r5, lr}
        return instance;
 8001932:	4d14      	ldr	r5, [pc, #80]	; (8001984 <HAL_DSI_TearingEffectCallback+0x54>)
 8001934:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 8001936:	2000      	movs	r0, #0
 8001938:	f7ff fd4c 	bl	80013d4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800193c:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 800193e:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8001942:	3301      	adds	r3, #1
 8001944:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 8001948:	f000 f90a 	bl	8001b60 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 800194c:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <HAL_DSI_TearingEffectCallback+0x58>)
        lockDMAToPorch = enableLock;
 800194e:	682a      	ldr	r2, [r5, #0]
 8001950:	7819      	ldrb	r1, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	f882 104a 	strb.w	r1, [r2, #74]	; 0x4a
 8001958:	b173      	cbz	r3, 8001978 <HAL_DSI_TearingEffectCallback+0x48>
 800195a:	4d0c      	ldr	r5, [pc, #48]	; (800198c <HAL_DSI_TearingEffectCallback+0x5c>)
 800195c:	782b      	ldrb	r3, [r5, #0]
 800195e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001962:	b94b      	cbnz	r3, 8001978 <HAL_DSI_TearingEffectCallback+0x48>
        {

            // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
            updateRegion = 0;
 8001964:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <HAL_DSI_TearingEffectCallback+0x60>)
 8001966:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 8001968:	f7ff ffbe 	bl	80018e8 <LCD_SetUpdateRegionLeft>

            // Transfer a quarter screen of pixel data.
            HAL_DSI_Refresh(hdsi);
 800196c:	4620      	mov	r0, r4
 800196e:	f005 f9a0 	bl	8006cb2 <HAL_DSI_Refresh>
            displayRefreshing = true;
 8001972:	2301      	movs	r3, #1
 8001974:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8001976:	bd38      	pop	{r3, r4, r5, pc}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001978:	2000      	movs	r0, #0
    }
 800197a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 800197e:	f7ff bd59 	b.w	8001434 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8001982:	bf00      	nop
 8001984:	2400e454 	.word	0x2400e454
 8001988:	2400000c 	.word	0x2400000c
 800198c:	2400041d 	.word	0x2400041d
 8001990:	24000408 	.word	0x24000408

08001994 <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
 8001994:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (displayRefreshing)
 8001998:	4e3f      	ldr	r6, [pc, #252]	; (8001a98 <HAL_DSI_EndOfRefreshCallback+0x104>)
    {
 800199a:	b085      	sub	sp, #20
 800199c:	4604      	mov	r4, r0
        if (displayRefreshing)
 800199e:	7833      	ldrb	r3, [r6, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d076      	beq.n	8001a92 <HAL_DSI_EndOfRefreshCallback+0xfe>
        {
            if (updateRegion == 0)
 80019a4:	4d3d      	ldr	r5, [pc, #244]	; (8001a9c <HAL_DSI_EndOfRefreshCallback+0x108>)
 80019a6:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8001aac <HAL_DSI_EndOfRefreshCallback+0x118>
 80019aa:	f8d5 9000 	ldr.w	r9, [r5]
 80019ae:	4f3c      	ldr	r7, [pc, #240]	; (8001aa0 <HAL_DSI_EndOfRefreshCallback+0x10c>)
 80019b0:	f1b9 0f00 	cmp.w	r9, #0
 80019b4:	d139      	bne.n	8001a2a <HAL_DSI_EndOfRefreshCallback+0x96>
            {
                HAL_Delay(1);
 80019b6:	2001      	movs	r0, #1
 80019b8:	f004 fc52 	bl	8006260 <HAL_Delay>

                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80019bc:	6823      	ldr	r3, [r4, #0]
 80019be:	f8cd 9000 	str.w	r9, [sp]
 80019c2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + (HAL::FRAME_BUFFER_WIDTH / 2) * 3;
 80019c6:	f8d8 1000 	ldr.w	r1, [r8]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80019ca:	f022 0208 	bic.w	r2, r2, #8
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + (HAL::FRAME_BUFFER_WIDTH / 2) * 3;
 80019ce:	6838      	ldr	r0, [r7, #0]
 80019d0:	f101 0684 	add.w	r6, r1, #132	; 0x84
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80019d4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80019d8:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80019dc:	f002 0208 	and.w	r2, r2, #8
 80019e0:	9200      	str	r2, [sp, #0]
 80019e2:	9a00      	ldr	r2, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + (HAL::FRAME_BUFFER_WIDTH / 2) * 3;
 80019e4:	4a2f      	ldr	r2, [pc, #188]	; (8001aa4 <HAL_DSI_EndOfRefreshCallback+0x110>)
 80019e6:	8812      	ldrh	r2, [r2, #0]
 80019e8:	0852      	lsrs	r2, r2, #1
 80019ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80019ee:	4402      	add	r2, r0
 80019f0:	62b2      	str	r2, [r6, #40]	; 0x28
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 80019f2:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80019f4:	f042 0201 	orr.w	r2, r2, #1
 80019f8:	624a      	str	r2, [r1, #36]	; 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80019fa:	f8cd 9004 	str.w	r9, [sp, #4]
 80019fe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001a02:	f042 0208 	orr.w	r2, r2, #8
 8001a06:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001a0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	9301      	str	r3, [sp, #4]
 8001a14:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 400-799
 8001a16:	f7ff ff79 	bl	800190c <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 8001a1a:	2301      	movs	r3, #1
                HAL_DSI_Refresh(hdsi);
 8001a1c:	4620      	mov	r0, r4
                updateRegion = 1;
 8001a1e:	602b      	str	r3, [r5, #0]
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 8001a20:	b005      	add	sp, #20
 8001a22:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                HAL_DSI_Refresh(hdsi);
 8001a26:	f005 b944 	b.w	8006cb2 <HAL_DSI_Refresh>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001a2a:	6803      	ldr	r3, [r0, #0]
 8001a2c:	2500      	movs	r5, #0
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001a2e:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001a30:	9502      	str	r5, [sp, #8]
 8001a32:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001a36:	f022 0208 	bic.w	r2, r2, #8
 8001a3a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001a3e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001a42:	f002 0208 	and.w	r2, r2, #8
 8001a46:	9202      	str	r2, [sp, #8]
 8001a48:	9a02      	ldr	r2, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001a4a:	f8d8 2000 	ldr.w	r2, [r8]
 8001a4e:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001a52:	4628      	mov	r0, r5
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001a54:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001a56:	f041 0101 	orr.w	r1, r1, #1
 8001a5a:	6251      	str	r1, [r2, #36]	; 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001a5c:	9503      	str	r5, [sp, #12]
 8001a5e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001a62:	f042 0208 	orr.w	r2, r2, #8
 8001a66:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001a6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	9303      	str	r3, [sp, #12]
 8001a74:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001a76:	f7ff fcdd 	bl	8001434 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 8001a7a:	f7ff ff21 	bl	80018c0 <LCD_ReqEnable>
        return instance;
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <HAL_DSI_EndOfRefreshCallback+0x114>)
                displayRefreshing = false;
 8001a80:	7035      	strb	r5, [r6, #0]
 8001a82:	6818      	ldr	r0, [r3, #0]
                if (HAL::getInstance())
 8001a84:	b128      	cbz	r0, 8001a92 <HAL_DSI_EndOfRefreshCallback+0xfe>
        allowDMATransfers();
 8001a86:	6803      	ldr	r3, [r0, #0]
 8001a88:	6a1b      	ldr	r3, [r3, #32]
    }
 8001a8a:	b005      	add	sp, #20
 8001a8c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a90:	4718      	bx	r3
 8001a92:	b005      	add	sp, #20
 8001a94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a98:	2400041d 	.word	0x2400041d
 8001a9c:	24000408 	.word	0x24000408
 8001aa0:	24000404 	.word	0x24000404
 8001aa4:	2400e44e 	.word	0x2400e44e
 8001aa8:	2400e454 	.word	0x2400e454
 8001aac:	24000214 	.word	0x24000214

08001ab0 <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 8001ab0:	4601      	mov	r1, r0
 8001ab2:	b508      	push	{r3, lr}
        return instance;
 8001ab4:	4b03      	ldr	r3, [pc, #12]	; (8001ac4 <IdleTaskHook+0x14>)
 8001ab6:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8001ab8:	b101      	cbz	r1, 8001abc <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8001aba:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8001abc:	f00b fc2e 	bl	800d31c <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	bd08      	pop	{r3, pc}
 8001ac4:	2400e454 	.word	0x2400e454

08001ac8 <_GLOBAL__sub_I_displayRefreshing>:
          cc_in(0)
 8001ac8:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <_GLOBAL__sub_I_displayRefreshing+0x10>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	4a02      	ldr	r2, [pc, #8]	; (8001adc <_GLOBAL__sub_I_displayRefreshing+0x14>)
 8001ad2:	601a      	str	r2, [r3, #0]

}
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	2400040c 	.word	0x2400040c
 8001adc:	0801ea90 	.word	0x0801ea90

08001ae0 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	2200      	movs	r2, #0
{
 8001ae4:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001ae6:	4608      	mov	r0, r1
 8001ae8:	f008 fb35 	bl	800a156 <osSemaphoreNew>
 8001aec:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001aee:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001af0:	b928      	cbnz	r0, 8001afe <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001af2:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001af4:	2128      	movs	r1, #40	; 0x28
 8001af6:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001af8:	480a      	ldr	r0, [pc, #40]	; (8001b24 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001afa:	f01b fecf 	bl	801d89c <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001afe:	2200      	movs	r2, #0
 8001b00:	2104      	movs	r1, #4
 8001b02:	2001      	movs	r0, #1
 8001b04:	f008 fbc4 	bl	800a290 <osMessageQueueNew>
 8001b08:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001b0a:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001b0c:	b918      	cbnz	r0, 8001b16 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001b0e:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001b10:	212c      	movs	r1, #44	; 0x2c
 8001b12:	4a03      	ldr	r2, [pc, #12]	; (8001b20 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001b14:	e7f0      	b.n	8001af8 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001b16:	bd08      	pop	{r3, pc}
 8001b18:	24000424 	.word	0x24000424
 8001b1c:	0801edac 	.word	0x0801edac
 8001b20:	0801edf5 	.word	0x0801edf5
 8001b24:	0801ee24 	.word	0x0801ee24
 8001b28:	24000420 	.word	0x24000420
 8001b2c:	0801ee73 	.word	0x0801ee73

08001b30 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001b30:	4b02      	ldr	r3, [pc, #8]	; (8001b3c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001b32:	f04f 31ff 	mov.w	r1, #4294967295
 8001b36:	6818      	ldr	r0, [r3, #0]
 8001b38:	f008 bb57 	b.w	800a1ea <osSemaphoreAcquire>
 8001b3c:	24000424 	.word	0x24000424

08001b40 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001b40:	4b01      	ldr	r3, [pc, #4]	; (8001b48 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001b42:	6818      	ldr	r0, [r3, #0]
 8001b44:	f008 bb7c 	b.w	800a240 <osSemaphoreRelease>
 8001b48:	24000424 	.word	0x24000424

08001b4c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001b4c:	4b02      	ldr	r3, [pc, #8]	; (8001b58 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001b4e:	2100      	movs	r1, #0
 8001b50:	6818      	ldr	r0, [r3, #0]
 8001b52:	f008 bb4a 	b.w	800a1ea <osSemaphoreAcquire>
 8001b56:	bf00      	nop
 8001b58:	24000424 	.word	0x24000424

08001b5c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8001b5c:	f7ff bff0 	b.w	8001b40 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001b60 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001b60:	2300      	movs	r3, #0
 8001b62:	4803      	ldr	r0, [pc, #12]	; (8001b70 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001b64:	4903      	ldr	r1, [pc, #12]	; (8001b74 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001b66:	461a      	mov	r2, r3
 8001b68:	6800      	ldr	r0, [r0, #0]
 8001b6a:	f008 bbcc 	b.w	800a306 <osMessageQueuePut>
 8001b6e:	bf00      	nop
 8001b70:	24000420 	.word	0x24000420
 8001b74:	24000010 	.word	0x24000010

08001b78 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001b78:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	4c07      	ldr	r4, [pc, #28]	; (8001b9c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001b7e:	a901      	add	r1, sp, #4
 8001b80:	461a      	mov	r2, r3
 8001b82:	6820      	ldr	r0, [r4, #0]
 8001b84:	f008 fbef 	bl	800a366 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001b88:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	a901      	add	r1, sp, #4
 8001b90:	6820      	ldr	r0, [r4, #0]
 8001b92:	f008 fbe8 	bl	800a366 <osMessageQueueGet>
}
 8001b96:	b002      	add	sp, #8
 8001b98:	bd10      	pop	{r4, pc}
 8001b9a:	bf00      	nop
 8001b9c:	24000420 	.word	0x24000420

08001ba0 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001ba0:	6803      	ldr	r3, [r0, #0]
 8001ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba4:	4718      	bx	r3

08001ba6 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001ba6:	2001      	movs	r0, #1
 8001ba8:	4770      	bx	lr

08001baa <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001baa:	6803      	ldr	r3, [r0, #0]
 8001bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bae:	4718      	bx	r3

08001bb0 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001bb0:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8001bb4:	4770      	bx	lr
	...

08001bb8 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8001bb8:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bbe:	6003      	str	r3, [r0, #0]
 8001bc0:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <_ZN8STM32DMAD1Ev+0x1c>)
 8001bc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001bc6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001bca:	f3bf 8f6f 	isb	sy
}
 8001bce:	4770      	bx	lr
 8001bd0:	0801f014 	.word	0x0801f014
 8001bd4:	e000e100 	.word	0xe000e100

08001bd8 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8001bd8:	b510      	push	{r4, lr}
 8001bda:	4604      	mov	r4, r0
}
 8001bdc:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8001be0:	f7ff ffea 	bl	8001bb8 <_ZN8STM32DMAD1Ev>
 8001be4:	4620      	mov	r0, r4
 8001be6:	f01b fe2a 	bl	801d83e <_ZdlPvj>
 8001bea:	4620      	mov	r0, r4
 8001bec:	bd10      	pop	{r4, pc}
	...

08001bf0 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <_ZN8STM32DMA10initializeEv+0x40>)
{
 8001bf2:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001bf4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001bf8:	f042 0210 	orr.w	r2, r2, #16
 8001bfc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001c00:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001c04:	f002 0210 	and.w	r2, r2, #16
 8001c08:	9201      	str	r2, [sp, #4]
 8001c0a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8001c0c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001c0e:	f042 0210 	orr.w	r2, r2, #16
 8001c12:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8001c14:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001c16:	f022 0210 	bic.w	r2, r2, #16
 8001c1a:	67da      	str	r2, [r3, #124]	; 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <_ZN8STM32DMA10initializeEv+0x44>)
 8001c1e:	4a06      	ldr	r2, [pc, #24]	; (8001c38 <_ZN8STM32DMA10initializeEv+0x48>)
 8001c20:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <_ZN8STM32DMA10initializeEv+0x4c>)
 8001c24:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c28:	609a      	str	r2, [r3, #8]
}
 8001c2a:	b002      	add	sp, #8
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	58024400 	.word	0x58024400
 8001c34:	24000190 	.word	0x24000190
 8001c38:	08001c41 	.word	0x08001c41
 8001c3c:	e000e100 	.word	0xe000e100

08001c40 <DMA2D_XferCpltCallback>:
 8001c40:	4b02      	ldr	r3, [pc, #8]	; (8001c4c <DMA2D_XferCpltCallback+0xc>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8001c46:	6803      	ldr	r3, [r0, #0]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	4718      	bx	r3
 8001c4c:	2400e454 	.word	0x2400e454

08001c50 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8001c50:	b570      	push	{r4, r5, r6, lr}
 8001c52:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8001c54:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <_ZN8STM32DMAC1Ev+0x30>)
 8001c56:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8001c58:	2600      	movs	r6, #0
 8001c5a:	4625      	mov	r5, r4
 8001c5c:	2260      	movs	r2, #96	; 0x60
 8001c5e:	6060      	str	r0, [r4, #4]
 8001c60:	7226      	strb	r6, [r4, #8]
 8001c62:	7266      	strb	r6, [r4, #9]
 8001c64:	f845 3b20 	str.w	r3, [r5], #32
 8001c68:	4629      	mov	r1, r5
 8001c6a:	f00b fcab 	bl	800d5c4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8001c6e:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
        : color(0)
 8001c72:	60ee      	str	r6, [r5, #12]
 8001c74:	3524      	adds	r5, #36	; 0x24
 8001c76:	42ab      	cmp	r3, r5
 8001c78:	d1fb      	bne.n	8001c72 <_ZN8STM32DMAC1Ev+0x22>
}
 8001c7a:	4620      	mov	r0, r4
 8001c7c:	bd70      	pop	{r4, r5, r6, pc}
 8001c7e:	bf00      	nop
 8001c80:	0801f014 	.word	0x0801f014

08001c84 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8001c84:	b508      	push	{r3, lr}
    switch (format)
 8001c86:	290b      	cmp	r1, #11
 8001c88:	d80b      	bhi.n	8001ca2 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 8001c8a:	e8df f001 	tbb	[pc, r1]
 8001c8e:	0612      	.short	0x0612
 8001c90:	0a0a0a10 	.word	0x0a0a0a10
 8001c94:	0808080a 	.word	0x0808080a
 8001c98:	0808      	.short	0x0808
 8001c9a:	2001      	movs	r0, #1
}
 8001c9c:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8001c9e:	2005      	movs	r0, #5
        break;
 8001ca0:	e7fc      	b.n	8001c9c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 8001ca2:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8001ca4:	2166      	movs	r1, #102	; 0x66
 8001ca6:	4a05      	ldr	r2, [pc, #20]	; (8001cbc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8001ca8:	4805      	ldr	r0, [pc, #20]	; (8001cc0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 8001caa:	f01b fdf7 	bl	801d89c <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8001cae:	2000      	movs	r0, #0
 8001cb0:	e7f4      	b.n	8001c9c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8001cb2:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001cb4:	e7f2      	b.n	8001c9c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8001cb6:	bf00      	nop
 8001cb8:	0801eeb5 	.word	0x0801eeb5
 8001cbc:	0801eed0 	.word	0x0801eed0
 8001cc0:	0801ef1a 	.word	0x0801ef1a

08001cc4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8001cc4:	b508      	push	{r3, lr}
    switch (format)
 8001cc6:	290a      	cmp	r1, #10
 8001cc8:	d809      	bhi.n	8001cde <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 8001cca:	e8df f001 	tbb	[pc, r1]
 8001cce:	0610      	.short	0x0610
 8001cd0:	0808080e 	.word	0x0808080e
 8001cd4:	06060608 	.word	0x06060608
 8001cd8:	06          	.byte	0x06
 8001cd9:	00          	.byte	0x00
 8001cda:	2001      	movs	r0, #1
}
 8001cdc:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8001cde:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 8001ce0:	2187      	movs	r1, #135	; 0x87
 8001ce2:	4a05      	ldr	r2, [pc, #20]	; (8001cf8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8001ce4:	4805      	ldr	r0, [pc, #20]	; (8001cfc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8001ce6:	f01b fdd9 	bl	801d89c <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8001cea:	2000      	movs	r0, #0
 8001cec:	e7f6      	b.n	8001cdc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8001cee:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001cf0:	e7f4      	b.n	8001cdc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8001cf2:	bf00      	nop
 8001cf4:	0801eeb5 	.word	0x0801eeb5
 8001cf8:	0801ef67 	.word	0x0801ef67
 8001cfc:	0801ef1a 	.word	0x0801ef1a

08001d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8001d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001d04:	7f4f      	ldrb	r7, [r1, #29]
{
 8001d06:	460c      	mov	r4, r1
 8001d08:	4681      	mov	r9, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001d0a:	4639      	mov	r1, r7
 8001d0c:	f7ff ffba 	bl	8001c84 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001d10:	f894 801e 	ldrb.w	r8, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001d14:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001d16:	4648      	mov	r0, r9
 8001d18:	4641      	mov	r1, r8
 8001d1a:	f7ff ffb3 	bl	8001c84 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001d1e:	4641      	mov	r1, r8
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001d20:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001d22:	4648      	mov	r0, r9
 8001d24:	f7ff ffce 	bl	8001cc4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001d28:	8aa1      	ldrh	r1, [r4, #20]
 8001d2a:	8b62      	ldrh	r2, [r4, #26]
 8001d2c:	4b42      	ldr	r3, [pc, #264]	; (8001e38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8001d2e:	1a52      	subs	r2, r2, r1
 8001d30:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001d32:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8001d34:	8b22      	ldrh	r2, [r4, #24]
 8001d36:	1a52      	subs	r2, r2, r1
 8001d38:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001d3a:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001d3c:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001d3e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001d42:	6920      	ldr	r0, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001d44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001d46:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001d48:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001d4a:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8001d4c:	6821      	ldr	r1, [r4, #0]
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d4e:	f894 c01c 	ldrb.w	ip, [r4, #28]
    switch (blitOp.operation)
 8001d52:	2980      	cmp	r1, #128	; 0x80
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d54:	ea4f 620c 	mov.w	r2, ip, lsl #24
    switch (blitOp.operation)
 8001d58:	d026      	beq.n	8001da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 8001d5a:	d810      	bhi.n	8001d7e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7e>
 8001d5c:	2920      	cmp	r1, #32
 8001d5e:	ea45 0402 	orr.w	r4, r5, r2
 8001d62:	d062      	beq.n	8001e2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 8001d64:	2940      	cmp	r1, #64	; 0x40
 8001d66:	d060      	beq.n	8001e2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 8001d68:	2904      	cmp	r1, #4
 8001d6a:	d05e      	beq.n	8001e2a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d6c:	432a      	orrs	r2, r5
 8001d6e:	4b32      	ldr	r3, [pc, #200]	; (8001e38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001d70:	4547      	cmp	r7, r8
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d72:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d76:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001d78:	d05b      	beq.n	8001e32 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8001d7a:	4a30      	ldr	r2, [pc, #192]	; (8001e3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8001d7c:	e040      	b.n	8001e00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8001d7e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001d82:	d007      	beq.n	8001d94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
 8001d84:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001d88:	d1f0      	bne.n	8001d6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d8a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d8e:	f042 0209 	orr.w	r2, r2, #9
 8001d92:	e003      	b.n	8001d9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d94:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d98:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d9c:	61da      	str	r2, [r3, #28]
        return color;
 8001d9e:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001da0:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001da2:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001da4:	6158      	str	r0, [r3, #20]
 8001da6:	e02a      	b.n	8001dfe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001da8:	432a      	orrs	r2, r5
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8001daa:	68a4      	ldr	r4, [r4, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001dac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001db0:	61da      	str	r2, [r3, #28]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8001db2:	1d22      	adds	r2, r4, #4
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001db4:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001db6:	6158      	str	r0, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8001db8:	62da      	str	r2, [r3, #44]	; 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8001dba:	7822      	ldrb	r2, [r4, #0]
 8001dbc:	b142      	cbz	r2, 8001dd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8001dbe:	2a01      	cmp	r2, #1
 8001dc0:	d021      	beq.n	8001e06 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8001dc2:	4b1f      	ldr	r3, [pc, #124]	; (8001e40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 8001dc4:	f240 1101 	movw	r1, #257	; 0x101
 8001dc8:	4a1e      	ldr	r2, [pc, #120]	; (8001e44 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8001dca:	481f      	ldr	r0, [pc, #124]	; (8001e48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8001dcc:	f01b fd66 	bl	801d89c <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001dd0:	69da      	ldr	r2, [r3, #28]
            bool blend = true;
 8001dd2:	2001      	movs	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001dd4:	8861      	ldrh	r1, [r4, #2]
 8001dd6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001dda:	3901      	subs	r1, #1
 8001ddc:	f022 0210 	bic.w	r2, r2, #16
 8001de0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001de4:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8001de6:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8001de8:	69da      	ldr	r2, [r3, #28]
 8001dea:	f042 0220 	orr.w	r2, r2, #32
 8001dee:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8001df0:	69da      	ldr	r2, [r3, #28]
 8001df2:	0692      	lsls	r2, r2, #26
 8001df4:	d4fc      	bmi.n	8001df0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8001df6:	2210      	movs	r2, #16
 8001df8:	609a      	str	r2, [r3, #8]
            if(blend)
 8001dfa:	2800      	cmp	r0, #0
 8001dfc:	d0bd      	beq.n	8001d7a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8001dfe:	4a13      	ldr	r2, [pc, #76]	; (8001e4c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8001e00:	601a      	str	r2, [r3, #0]
        }

        break;
    }
}
 8001e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001e06:	8862      	ldrh	r2, [r4, #2]
                if(blitOp.alpha == 255)
 8001e08:	f1bc 00ff 	subs.w	r0, ip, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001e0c:	69d9      	ldr	r1, [r3, #28]
 8001e0e:	f102 34ff 	add.w	r4, r2, #4294967295
                if(blitOp.alpha == 255)
 8001e12:	bf18      	it	ne
 8001e14:	2001      	movne	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001e16:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 8001e1a:	f022 0210 	bic.w	r2, r2, #16
 8001e1e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8001e22:	f042 0210 	orr.w	r2, r2, #16
 8001e26:	61da      	str	r2, [r3, #28]
                break;
 8001e28:	e7dd      	b.n	8001de6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001e2a:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 8001e2e:	61dc      	str	r4, [r3, #28]
 8001e30:	e7b7      	b.n	8001da2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8001e32:	f240 2201 	movw	r2, #513	; 0x201
 8001e36:	e7e3      	b.n	8001e00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 8001e38:	52001000 	.word	0x52001000
 8001e3c:	00010201 	.word	0x00010201
 8001e40:	0801efb2 	.word	0x0801efb2
 8001e44:	0801efcc 	.word	0x0801efcc
 8001e48:	0801ef1a 	.word	0x0801ef1a
 8001e4c:	00020201 	.word	0x00020201

08001e50 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8001e50:	b570      	push	{r4, r5, r6, lr}
 8001e52:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001e54:	7f89      	ldrb	r1, [r1, #30]
 8001e56:	f7ff ff35 	bl	8001cc4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001e5a:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001e5c:	8aa5      	ldrh	r5, [r4, #20]
 8001e5e:	8ae1      	ldrh	r1, [r4, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001e60:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001e62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001e66:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001e68:	1b52      	subs	r2, r2, r5
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001e6a:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001e6c:	6921      	ldr	r1, [r4, #16]
 8001e6e:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001e70:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8001e72:	6826      	ldr	r6, [r4, #0]
 8001e74:	68e5      	ldr	r5, [r4, #12]
 8001e76:	2e08      	cmp	r6, #8
 8001e78:	d10d      	bne.n	8001e96 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001e7a:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001e7c:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001e7e:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8001e80:	4a09      	ldr	r2, [pc, #36]	; (8001ea8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8001e82:	7f20      	ldrb	r0, [r4, #28]
 8001e84:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8001e88:	61da      	str	r2, [r3, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8001e8a:	4a08      	ldr	r2, [pc, #32]	; (8001eac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001e8c:	621d      	str	r5, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001e8e:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001e90:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001e92:	601a      	str	r2, [r3, #0]
    }
}
 8001e94:	bd70      	pop	{r4, r5, r6, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8001e96:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8001e98:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8001e9a:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001e9c:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8001e9e:	639d      	str	r5, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001ea0:	e7f7      	b.n	8001e92 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8001ea2:	bf00      	nop
 8001ea4:	52001000 	.word	0x52001000
 8001ea8:	00010009 	.word	0x00010009
 8001eac:	00020201 	.word	0x00020201
 8001eb0:	00030201 	.word	0x00030201

08001eb4 <_ZN8touchgfx5paint8tearDownEv>:
* @brief Waits until previous DMA drawing operation has finished
*/
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8001eb4:	4b03      	ldr	r3, [pc, #12]	; (8001ec4 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	07d2      	lsls	r2, r2, #31
 8001eba:	d4fc      	bmi.n	8001eb6 <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001ebc:	2223      	movs	r2, #35	; 0x23
 8001ebe:	609a      	str	r2, [r3, #8]
}
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	52001000 	.word	0x52001000

08001ec8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
*
* @brief Renders Canvas Widget chunks using DMA.
* This functions will not generate an interrupt, and will not affect the DMA queue.
*/
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 8001ec8:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8001eca:	4c10      	ldr	r4, [pc, #64]	; (8001f0c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x44>)
 8001ecc:	6825      	ldr	r5, [r4, #0]
 8001ece:	07ed      	lsls	r5, r5, #31
 8001ed0:	d4fc      	bmi.n	8001ecc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001ed2:	2523      	movs	r5, #35	; 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001ed4:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 8001ed6:	2bff      	cmp	r3, #255	; 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001ed8:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8001eda:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001ede:	ea41 0105 	orr.w	r1, r1, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8001ee2:	6365      	str	r5, [r4, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8001ee4:	6461      	str	r1, [r4, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8001ee6:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (alpha < 0xFF)
 8001ee8:	d00c      	beq.n	8001f04 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8001eea:	4909      	ldr	r1, [pc, #36]	; (8001f10 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x48>)

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8001eec:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001ef0:	6265      	str	r5, [r4, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8001ef2:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 8001ef6:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8001ef8:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8001efa:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8001efc:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8001efe:	60e0      	str	r0, [r4, #12]

        /* Set Output Color */
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8001f00:	6023      	str	r3, [r4, #0]
    }
}
 8001f02:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8001f04:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8001f06:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
        WRITE_REG(DMA2D->OCOLR, color);
 8001f08:	63a2      	str	r2, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8001f0a:	e7f9      	b.n	8001f00 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x38>
 8001f0c:	52001000 	.word	0x52001000
 8001f10:	00010009 	.word	0x00010009
 8001f14:	00020001 	.word	0x00020001
 8001f18:	00030001 	.word	0x00030001

08001f1c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	4770      	bx	lr

08001f20 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8001f20:	200c      	movs	r0, #12
 8001f22:	4770      	bx	lr

08001f24 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8001f24:	230c      	movs	r3, #12
 8001f26:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001f2a:	3008      	adds	r0, #8
 8001f2c:	4770      	bx	lr

08001f2e <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8001f2e:	230c      	movs	r3, #12
 8001f30:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001f34:	3008      	adds	r0, #8
 8001f36:	4770      	bx	lr

08001f38 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8001f38:	2001      	movs	r0, #1
 8001f3a:	4770      	bx	lr

08001f3c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8001f3c:	f243 50b8 	movw	r0, #13752	; 0x35b8
 8001f40:	4770      	bx	lr

08001f42 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001f42:	f243 53b8 	movw	r3, #13752	; 0x35b8
 8001f46:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001f4a:	3008      	adds	r0, #8
 8001f4c:	4770      	bx	lr

08001f4e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001f4e:	f243 53b8 	movw	r3, #13752	; 0x35b8
 8001f52:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001f56:	3008      	adds	r0, #8
 8001f58:	4770      	bx	lr

08001f5a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	4770      	bx	lr

08001f5e <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8001f5e:	2010      	movs	r0, #16
 8001f60:	4770      	bx	lr

08001f62 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001f62:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8001f66:	3008      	adds	r0, #8
 8001f68:	4770      	bx	lr

08001f6a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001f6a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8001f6e:	3008      	adds	r0, #8
 8001f70:	4770      	bx	lr

08001f72 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8001f72:	4608      	mov	r0, r1
 8001f74:	f000 bb88 	b.w	8002688 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

08001f78 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8001f78:	4b03      	ldr	r3, [pc, #12]	; (8001f88 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001f7a:	b510      	push	{r4, lr}
 8001f7c:	4604      	mov	r4, r0
 8001f7e:	6003      	str	r3, [r0, #0]
 8001f80:	f00a f971 	bl	800c266 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001f84:	4620      	mov	r0, r4
 8001f86:	bd10      	pop	{r4, pc}
 8001f88:	0801f0cc 	.word	0x0801f0cc

08001f8c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001f8c:	b510      	push	{r4, lr}
 8001f8e:	4604      	mov	r4, r0
 8001f90:	f7ff fff2 	bl	8001f78 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001f94:	2114      	movs	r1, #20
 8001f96:	4620      	mov	r0, r4
 8001f98:	f01b fc51 	bl	801d83e <_ZdlPvj>
 8001f9c:	4620      	mov	r0, r4
 8001f9e:	bd10      	pop	{r4, pc}

08001fa0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8001fa0:	4b03      	ldr	r3, [pc, #12]	; (8001fb0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001fa2:	b510      	push	{r4, lr}
 8001fa4:	4604      	mov	r4, r0
 8001fa6:	6003      	str	r3, [r0, #0]
 8001fa8:	f00a f95d 	bl	800c266 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001fac:	4620      	mov	r0, r4
 8001fae:	bd10      	pop	{r4, pc}
 8001fb0:	0801f098 	.word	0x0801f098

08001fb4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001fb4:	b510      	push	{r4, lr}
 8001fb6:	4604      	mov	r4, r0
 8001fb8:	f7ff fff2 	bl	8001fa0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001fbc:	f44f 5157 	mov.w	r1, #13760	; 0x35c0
 8001fc0:	4620      	mov	r0, r4
 8001fc2:	f01b fc3c 	bl	801d83e <_ZdlPvj>
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	bd10      	pop	{r4, pc}
	...

08001fcc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8001fcc:	4b03      	ldr	r3, [pc, #12]	; (8001fdc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001fce:	b510      	push	{r4, lr}
 8001fd0:	4604      	mov	r4, r0
 8001fd2:	6003      	str	r3, [r0, #0]
 8001fd4:	f00a f947 	bl	800c266 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001fd8:	4620      	mov	r0, r4
 8001fda:	bd10      	pop	{r4, pc}
 8001fdc:	0801f064 	.word	0x0801f064

08001fe0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001fe0:	b510      	push	{r4, lr}
 8001fe2:	4604      	mov	r4, r0
 8001fe4:	f7ff fff2 	bl	8001fcc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001fe8:	2118      	movs	r1, #24
 8001fea:	4620      	mov	r0, r4
 8001fec:	f01b fc27 	bl	801d83e <_ZdlPvj>
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	bd10      	pop	{r4, pc}

08001ff4 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8001ff4:	4b09      	ldr	r3, [pc, #36]	; (800201c <_ZN12FrontendHeapD1Ev+0x28>)
 8001ff6:	b510      	push	{r4, lr}
 8001ff8:	4604      	mov	r4, r0
 8001ffa:	6003      	str	r3, [r0, #0]
 8001ffc:	f500 5057 	add.w	r0, r0, #13760	; 0x35c0
 8002000:	302c      	adds	r0, #44	; 0x2c
 8002002:	f7ff ffb9 	bl	8001f78 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002006:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800200a:	f7ff ffc9 	bl	8001fa0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800200e:	f104 0014 	add.w	r0, r4, #20
 8002012:	f7ff ffdb 	bl	8001fcc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002016:	4620      	mov	r0, r4
 8002018:	bd10      	pop	{r4, pc}
 800201a:	bf00      	nop
 800201c:	0801f100 	.word	0x0801f100

08002020 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002020:	b508      	push	{r3, lr}
 8002022:	4802      	ldr	r0, [pc, #8]	; (800202c <__tcf_0+0xc>)
 8002024:	f7ff ffe6 	bl	8001ff4 <_ZN12FrontendHeapD1Ev>
 8002028:	bd08      	pop	{r3, pc}
 800202a:	bf00      	nop
 800202c:	2400042c 	.word	0x2400042c

08002030 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8002030:	b510      	push	{r4, lr}
 8002032:	4604      	mov	r4, r0
 8002034:	f7ff ffde 	bl	8001ff4 <_ZN12FrontendHeapD1Ev>
 8002038:	f243 7160 	movw	r1, #14176	; 0x3760
 800203c:	4620      	mov	r0, r4
 800203e:	f01b fbfe 	bl	801d83e <_ZdlPvj>
 8002042:	4620      	mov	r0, r4
 8002044:	bd10      	pop	{r4, pc}
	...

08002048 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 8002048:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800204c:	f000 f9a8 	bl	80023a0 <_ZN14BitmapDatabase11getInstanceEv>
 8002050:	2400      	movs	r4, #0
 8002052:	4605      	mov	r5, r0
 8002054:	f000 f9a8 	bl	80023a8 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8002058:	4623      	mov	r3, r4
 800205a:	4601      	mov	r1, r0
 800205c:	4622      	mov	r2, r4
 800205e:	4628      	mov	r0, r5
 8002060:	9400      	str	r4, [sp, #0]
 8002062:	f012 ffdb 	bl	801501c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8002066:	4b26      	ldr	r3, [pc, #152]	; (8002100 <touchgfx_init+0xb8>)
 8002068:	4a26      	ldr	r2, [pc, #152]	; (8002104 <touchgfx_init+0xbc>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 800206a:	4620      	mov	r0, r4
        static FrontendHeap instance;
 800206c:	4d26      	ldr	r5, [pc, #152]	; (8002108 <touchgfx_init+0xc0>)
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	f000 fd92 	bl	8002b98 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8002074:	4825      	ldr	r0, [pc, #148]	; (800210c <touchgfx_init+0xc4>)
 8002076:	f012 fe89 	bl	8014d8c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 800207a:	782b      	ldrb	r3, [r5, #0]
 800207c:	f3bf 8f5b 	dmb	ish
 8002080:	07db      	lsls	r3, r3, #31
 8002082:	d437      	bmi.n	80020f4 <touchgfx_init+0xac>
 8002084:	4628      	mov	r0, r5
 8002086:	f01b fbdc 	bl	801d842 <__cxa_guard_acquire>
 800208a:	b398      	cbz	r0, 80020f4 <touchgfx_init+0xac>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800208c:	4c20      	ldr	r4, [pc, #128]	; (8002110 <touchgfx_init+0xc8>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 800208e:	4b21      	ldr	r3, [pc, #132]	; (8002114 <touchgfx_init+0xcc>)
 8002090:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8002094:	f104 0014 	add.w	r0, r4, #20
 8002098:	6023      	str	r3, [r4, #0]
 800209a:	f508 5757 	add.w	r7, r8, #13760	; 0x35c0
 800209e:	6060      	str	r0, [r4, #4]
 80020a0:	f8c4 8008 	str.w	r8, [r4, #8]
 80020a4:	f107 0618 	add.w	r6, r7, #24
 80020a8:	60e7      	str	r7, [r4, #12]
 80020aa:	6126      	str	r6, [r4, #16]
 80020ac:	f00a f8dc 	bl	800c268 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80020b0:	4b19      	ldr	r3, [pc, #100]	; (8002118 <touchgfx_init+0xd0>)
 80020b2:	4640      	mov	r0, r8
 80020b4:	6163      	str	r3, [r4, #20]
 80020b6:	f00a f8d7 	bl	800c268 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80020ba:	4b18      	ldr	r3, [pc, #96]	; (800211c <touchgfx_init+0xd4>)
 80020bc:	4638      	mov	r0, r7
 80020be:	62e3      	str	r3, [r4, #44]	; 0x2c
 80020c0:	f00a f8d2 	bl	800c268 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80020c4:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 80020c8:	4a15      	ldr	r2, [pc, #84]	; (8002120 <touchgfx_init+0xd8>)
 80020ca:	f504 5058 	add.w	r0, r4, #13824	; 0x3600
 80020ce:	f8c3 25ec 	str.w	r2, [r3, #1516]	; 0x5ec
 80020d2:	f001 fda3 	bl	8003c1c <_ZN5ModelC1Ev>
 80020d6:	4622      	mov	r2, r4
 80020d8:	f504 5158 	add.w	r1, r4, #13824	; 0x3600
 80020dc:	4630      	mov	r0, r6
 80020de:	f001 fd93 	bl	8003c08 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80020e2:	4630      	mov	r0, r6
 80020e4:	f000 fad0 	bl	8002688 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 80020e8:	480e      	ldr	r0, [pc, #56]	; (8002124 <touchgfx_init+0xdc>)
 80020ea:	f01b fbf5 	bl	801d8d8 <atexit>
 80020ee:	4628      	mov	r0, r5
 80020f0:	f01b fbb3 	bl	801d85a <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80020f4:	480c      	ldr	r0, [pc, #48]	; (8002128 <touchgfx_init+0xe0>)
}
 80020f6:	b002      	add	sp, #8
 80020f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 80020fc:	f7ff ba74 	b.w	80015e8 <_ZN11TouchGFXHAL10initializeEv>
 8002100:	2400e4b8 	.word	0x2400e4b8
 8002104:	240049ac 	.word	0x240049ac
 8002108:	24000428 	.word	0x24000428
 800210c:	24000014 	.word	0x24000014
 8002110:	2400042c 	.word	0x2400042c
 8002114:	0801f100 	.word	0x0801f100
 8002118:	0801f064 	.word	0x0801f064
 800211c:	0801f098 	.word	0x0801f098
 8002120:	0801f0cc 	.word	0x0801f0cc
 8002124:	08002021 	.word	0x08002021
 8002128:	24004930 	.word	0x24004930

0800212c <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 800212c:	4770      	bx	lr
	...

08002130 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8002130:	4801      	ldr	r0, [pc, #4]	; (8002138 <touchgfx_taskEntry+0x8>)
 8002132:	f7ff ba6f 	b.w	8001614 <_ZN11TouchGFXHAL9taskEntryEv>
 8002136:	bf00      	nop
 8002138:	24004930 	.word	0x24004930

0800213c <_GLOBAL__sub_I_touchgfx_init>:
}
 800213c:	b513      	push	{r0, r1, r4, lr}
static STM32DMA dma;
 800213e:	490c      	ldr	r1, [pc, #48]	; (8002170 <_GLOBAL__sub_I_touchgfx_init+0x34>)
{
public:

    STM32TouchController() {}
 8002140:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <_GLOBAL__sub_I_touchgfx_init+0x38>)
 8002142:	4c0d      	ldr	r4, [pc, #52]	; (8002178 <_GLOBAL__sub_I_touchgfx_init+0x3c>)
 8002144:	4608      	mov	r0, r1
 8002146:	6023      	str	r3, [r4, #0]
 8002148:	f7ff fd82 	bl	8001c50 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 800214c:	4a0b      	ldr	r2, [pc, #44]	; (800217c <_GLOBAL__sub_I_touchgfx_init+0x40>)
 800214e:	4610      	mov	r0, r2
 8002150:	f015 f97e 	bl	8017450 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8002154:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002158:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800215c:	4904      	ldr	r1, [pc, #16]	; (8002170 <_GLOBAL__sub_I_touchgfx_init+0x34>)
 800215e:	4808      	ldr	r0, [pc, #32]	; (8002180 <_GLOBAL__sub_I_touchgfx_init+0x44>)
 8002160:	e9cd 3200 	strd	r3, r2, [sp]
 8002164:	4623      	mov	r3, r4
 8002166:	4a05      	ldr	r2, [pc, #20]	; (800217c <_GLOBAL__sub_I_touchgfx_init+0x40>)
 8002168:	f7ff fae8 	bl	800173c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 800216c:	b002      	add	sp, #8
 800216e:	bd10      	pop	{r4, pc}
 8002170:	24003b90 	.word	0x24003b90
 8002174:	0801eb44 	.word	0x0801eb44
 8002178:	24003b8c 	.word	0x24003b8c
 800217c:	240049b0 	.word	0x240049b0
 8002180:	24004930 	.word	0x24004930

08002184 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8002184:	4801      	ldr	r0, [pc, #4]	; (800218c <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8002186:	f7ff bd17 	b.w	8001bb8 <_ZN8STM32DMAD1Ev>
 800218a:	bf00      	nop
 800218c:	24003b90 	.word	0x24003b90

08002190 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8002190:	2000      	movs	r0, #0
 8002192:	4770      	bx	lr

08002194 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8002194:	8081      	strh	r1, [r0, #4]
    }
 8002196:	4770      	bx	lr

08002198 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8002198:	80c1      	strh	r1, [r0, #6]
    }
 800219a:	4770      	bx	lr

0800219c <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 800219c:	8101      	strh	r1, [r0, #8]
    }
 800219e:	4770      	bx	lr

080021a0 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 80021a0:	8141      	strh	r1, [r0, #10]
    }
 80021a2:	4770      	bx	lr

080021a4 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 80021a4:	4770      	bx	lr

080021a6 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 80021a6:	4770      	bx	lr

080021a8 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 80021a8:	4770      	bx	lr

080021aa <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 80021aa:	4770      	bx	lr

080021ac <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 80021ac:	4770      	bx	lr

080021ae <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80021ae:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 80021b0:	88c4      	ldrh	r4, [r0, #6]
 80021b2:	6803      	ldr	r3, [r0, #0]
 80021b4:	1b12      	subs	r2, r2, r4
 80021b6:	8884      	ldrh	r4, [r0, #4]
 80021b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ba:	1b09      	subs	r1, r1, r4
 80021bc:	b212      	sxth	r2, r2
    }
 80021be:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 80021c2:	b209      	sxth	r1, r1
 80021c4:	4718      	bx	r3

080021c6 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80021c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021ca:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80021cc:	f04f 33ff 	mov.w	r3, #4294967295
 80021d0:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 80021d2:	6813      	ldr	r3, [r2, #0]
 80021d4:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 80021d6:	6010      	str	r0, [r2, #0]
    }
 80021d8:	4770      	bx	lr

080021da <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 80021da:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80021de:	b11a      	cbz	r2, 80021e8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 80021e0:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 80021e4:	b102      	cbz	r2, 80021e8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 80021e6:	6018      	str	r0, [r3, #0]
        }
    }
 80021e8:	4770      	bx	lr

080021ea <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 80021ea:	2000      	movs	r0, #0
 80021ec:	4770      	bx	lr

080021ee <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 80021ee:	888b      	ldrh	r3, [r1, #4]
 80021f0:	8083      	strh	r3, [r0, #4]
        return true;
    }
 80021f2:	2001      	movs	r0, #1
 80021f4:	4770      	bx	lr

080021f6 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 80021f6:	4770      	bx	lr

080021f8 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 80021f8:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    }
 80021fc:	4770      	bx	lr

080021fe <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 80021fe:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8002202:	4770      	bx	lr

08002204 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8002204:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 8002206:	b510      	push	{r4, lr}
        return rect.width;
 8002208:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 800220c:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8002210:	8002      	strh	r2, [r0, #0]
 8002212:	8042      	strh	r2, [r0, #2]
 8002214:	8084      	strh	r4, [r0, #4]
 8002216:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 8002218:	bd10      	pop	{r4, pc}

0800221a <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 800221a:	2200      	movs	r2, #0
 800221c:	8002      	strh	r2, [r0, #0]
 800221e:	8042      	strh	r2, [r0, #2]
 8002220:	8082      	strh	r2, [r0, #4]
 8002222:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8002224:	4770      	bx	lr
	...

08002228 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002228:	4b02      	ldr	r3, [pc, #8]	; (8002234 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 800222a:	2290      	movs	r2, #144	; 0x90
 800222c:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	e000e100 	.word	0xe000e100

08002238 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 8002238:	4770      	bx	lr

0800223a <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 800223a:	b570      	push	{r4, r5, r6, lr}
 800223c:	4604      	mov	r4, r0
    HAL::initialize();
 800223e:	f00a fb0e 	bl	800c85e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8002242:	6823      	ldr	r3, [r4, #0]
 8002244:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8002246:	f00f fd6b 	bl	8011d20 <_ZN8touchgfx11Application11getInstanceEv>
 800224a:	4601      	mov	r1, r0
 800224c:	4620      	mov	r0, r4
 800224e:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0, (void*)0);
 8002250:	6823      	ldr	r3, [r4, #0]
 8002252:	4620      	mov	r0, r4
 8002254:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8002258:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 800225c:	2300      	movs	r3, #0
 800225e:	46ac      	mov	ip, r5
 8002260:	461a      	mov	r2, r3
}
 8002262:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0, (void*)0);
 8002266:	4760      	bx	ip

08002268 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 8002268:	f00a baaa 	b.w	800c7c0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

0800226c <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 800226c:	f00a bc05 	b.w	800ca7a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08002270 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 8002270:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002274:	b112      	cbz	r2, 800227c <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 8002276:	6803      	ldr	r3, [r0, #0]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	4718      	bx	r3
    }
 800227c:	4770      	bx	lr
	...

08002280 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002280:	4a12      	ldr	r2, [pc, #72]	; (80022cc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 8002282:	6953      	ldr	r3, [r2, #20]
 8002284:	03db      	lsls	r3, r3, #15
{
 8002286:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002288:	d51e      	bpl.n	80022c8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800228a:	2300      	movs	r3, #0
 800228c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002290:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002294:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002298:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800229c:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80022a0:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80022a4:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80022a6:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80022aa:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80022ac:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80022b0:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80022b2:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 80022b6:	d2f9      	bcs.n	80022ac <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 80022b8:	3b20      	subs	r3, #32
 80022ba:	f113 0f20 	cmn.w	r3, #32
 80022be:	d1f2      	bne.n	80022a6 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 80022c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80022c4:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 80022c8:	bd70      	pop	{r4, r5, r6, pc}
 80022ca:	bf00      	nop
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022d0:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 80022d2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80022da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80022de:	f3bf 8f6f 	isb	sy
}
 80022e2:	4770      	bx	lr
 80022e4:	e000e100 	.word	0xe000e100

080022e8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022e8:	4b02      	ldr	r3, [pc, #8]	; (80022f4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 80022ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022ee:	609a      	str	r2, [r3, #8]
}
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	e000e100 	.word	0xe000e100

080022f8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
        : widgetWidth(0)
 80022f8:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 80022fa:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80022fc:	4e12      	ldr	r6, [pc, #72]	; (8002348 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x50>)
 80022fe:	4604      	mov	r4, r0
 8002300:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 8002302:	4b12      	ldr	r3, [pc, #72]	; (800234c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x54>)
 8002304:	6003      	str	r3, [r0, #0]
 8002306:	6833      	ldr	r3, [r6, #0]
 8002308:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800230c:	b10a      	cbz	r2, 8002312 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1a>
 800230e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002310:	b900      	cbnz	r0, 8002314 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1c>
        return instance->lcdRef;
 8002312:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8002314:	6803      	ldr	r3, [r0, #0]
 8002316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002318:	4798      	blx	r3
 800231a:	1e43      	subs	r3, r0, #1
 800231c:	425d      	negs	r5, r3
 800231e:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 8002320:	6833      	ldr	r3, [r6, #0]
 8002322:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 8002324:	b130      	cbz	r0, 8002334 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8002326:	6803      	ldr	r3, [r0, #0]
 8002328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232a:	4798      	blx	r3
 800232c:	2801      	cmp	r0, #1
 800232e:	bf08      	it	eq
 8002330:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8002334:	b92d      	cbnz	r5, 8002342 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x4a>
 8002336:	4b06      	ldr	r3, [pc, #24]	; (8002350 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 8002338:	2127      	movs	r1, #39	; 0x27
 800233a:	4a06      	ldr	r2, [pc, #24]	; (8002354 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 800233c:	4806      	ldr	r0, [pc, #24]	; (8002358 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 800233e:	f01b faad 	bl	801d89c <__assert_func>
    }
 8002342:	4620      	mov	r0, r4
 8002344:	bd70      	pop	{r4, r5, r6, pc}
 8002346:	bf00      	nop
 8002348:	2400e454 	.word	0x2400e454
 800234c:	0801f21c 	.word	0x0801f21c
 8002350:	0801f10c 	.word	0x0801f10c
 8002354:	0801f16a 	.word	0x0801f16a
 8002358:	0801f1a3 	.word	0x0801f1a3

0800235c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;         // verdana_10_4bpp
    static const touchgfx::FontId TYPOGRAPHY_00 = 3; // verdana_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800235c:	4770      	bx	lr

0800235e <_ZN23ApplicationFontProviderD0Ev>:
 800235e:	b510      	push	{r4, lr}
 8002360:	4604      	mov	r4, r0
 8002362:	2104      	movs	r1, #4
 8002364:	f01b fa6b 	bl	801d83e <_ZdlPvj>
 8002368:	4620      	mov	r0, r4
 800236a:	bd10      	pop	{r4, pc}

0800236c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800236c:	b508      	push	{r3, lr}
    switch (typography)
 800236e:	2903      	cmp	r1, #3
 8002370:	d813      	bhi.n	800239a <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 8002372:	e8df f001 	tbb	[pc, r1]
 8002376:	0602      	.short	0x0602
 8002378:	0e0a      	.short	0x0e0a
    {
    case Typography::DEFAULT:
        // verdana_16_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800237a:	f000 fc59 	bl	8002c30 <_ZN17TypedTextDatabase8getFontsEv>
 800237e:	6800      	ldr	r0, [r0, #0]
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
    default:
        return 0;
    }
}
 8002380:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8002382:	f000 fc55 	bl	8002c30 <_ZN17TypedTextDatabase8getFontsEv>
 8002386:	6840      	ldr	r0, [r0, #4]
 8002388:	e7fa      	b.n	8002380 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800238a:	f000 fc51 	bl	8002c30 <_ZN17TypedTextDatabase8getFontsEv>
 800238e:	6880      	ldr	r0, [r0, #8]
 8002390:	e7f6      	b.n	8002380 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8002392:	f000 fc4d 	bl	8002c30 <_ZN17TypedTextDatabase8getFontsEv>
 8002396:	68c0      	ldr	r0, [r0, #12]
 8002398:	e7f2      	b.n	8002380 <_ZN23ApplicationFontProvider7getFontEt+0x14>
    switch (typography)
 800239a:	2000      	movs	r0, #0
 800239c:	e7f0      	b.n	8002380 <_ZN23ApplicationFontProvider7getFontEt+0x14>
	...

080023a0 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 80023a0:	4800      	ldr	r0, [pc, #0]	; (80023a4 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 80023a2:	4770      	bx	lr
 80023a4:	0801f248 	.word	0x0801f248

080023a8 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 80023a8:	2001      	movs	r0, #1
 80023aa:	4770      	bx	lr

080023ac <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80023ac:	b513      	push	{r0, r1, r4, lr}
 80023ae:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 80023b0:	b151      	cbz	r1, 80023c8 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80023b2:	6803      	ldr	r3, [r0, #0]
 80023b4:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 80023b6:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 80023b8:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80023bc:	689c      	ldr	r4, [r3, #8]
 80023be:	f10d 0303 	add.w	r3, sp, #3
 80023c2:	47a0      	blx	r4
        return glyph;
    }
 80023c4:	b002      	add	sp, #8
 80023c6:	bd10      	pop	{r4, pc}
            return 0;
 80023c8:	4608      	mov	r0, r1
 80023ca:	e7fb      	b.n	80023c4 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

080023cc <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 80023cc:	89c0      	ldrh	r0, [r0, #14]
 80023ce:	4770      	bx	lr

080023d0 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 80023d0:	8a00      	ldrh	r0, [r0, #16]
 80023d2:	4770      	bx	lr

080023d4 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 80023d4:	88c0      	ldrh	r0, [r0, #6]
 80023d6:	4770      	bx	lr

080023d8 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 80023d8:	8880      	ldrh	r0, [r0, #4]
 80023da:	4770      	bx	lr

080023dc <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 80023dc:	7a80      	ldrb	r0, [r0, #10]
    }
 80023de:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80023e2:	4770      	bx	lr

080023e4 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 80023e4:	7a80      	ldrb	r0, [r0, #10]
    }
 80023e6:	09c0      	lsrs	r0, r0, #7
 80023e8:	4770      	bx	lr

080023ea <_ZN8touchgfx9TypedTextD1Ev>:
    }
 80023ea:	4770      	bx	lr

080023ec <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 80023ec:	b510      	push	{r4, lr}
 80023ee:	4604      	mov	r4, r0
    }
 80023f0:	2108      	movs	r1, #8
 80023f2:	f01b fa24 	bl	801d83e <_ZdlPvj>
 80023f6:	4620      	mov	r0, r4
 80023f8:	bd10      	pop	{r4, pc}

080023fa <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 80023fa:	4770      	bx	lr

080023fc <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 80023fc:	4770      	bx	lr

080023fe <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 80023fe:	f500 7398 	add.w	r3, r0, #304	; 0x130
 8002402:	6808      	ldr	r0, [r1, #0]
 8002404:	6849      	ldr	r1, [r1, #4]
 8002406:	c303      	stmia	r3!, {r0, r1}
    }
 8002408:	4770      	bx	lr

0800240a <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 800240a:	4770      	bx	lr

0800240c <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 800240c:	4770      	bx	lr

0800240e <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 800240e:	6041      	str	r1, [r0, #4]
    }
 8002410:	4770      	bx	lr

08002412 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8002412:	4770      	bx	lr

08002414 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002414:	4b06      	ldr	r3, [pc, #24]	; (8002430 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8002416:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 800241a:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 800241e:	2300      	movs	r3, #0
 8002420:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8002424:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8002428:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	080024d5 	.word	0x080024d5

08002434 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8002434:	2301      	movs	r3, #1
 8002436:	7203      	strb	r3, [r0, #8]
    }
 8002438:	4770      	bx	lr

0800243a <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 800243a:	4770      	bx	lr

0800243c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 800243c:	4770      	bx	lr

0800243e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800243e:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8002440:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8002442:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8002444:	68c2      	ldr	r2, [r0, #12]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	1054      	asrs	r4, r2, #1
 800244a:	eb01 0062 	add.w	r0, r1, r2, asr #1
 800244e:	07d2      	lsls	r2, r2, #31
 8002450:	bf48      	it	mi
 8002452:	590a      	ldrmi	r2, [r1, r4]
    }
 8002454:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8002458:	bf48      	it	mi
 800245a:	58d3      	ldrmi	r3, [r2, r3]
 800245c:	4718      	bx	r3

0800245e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 800245e:	6843      	ldr	r3, [r0, #4]
 8002460:	b12b      	cbz	r3, 800246e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 8002462:	6883      	ldr	r3, [r0, #8]
 8002464:	b92b      	cbnz	r3, 8002472 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8002466:	68c0      	ldr	r0, [r0, #12]
 8002468:	f000 0001 	and.w	r0, r0, #1
 800246c:	4770      	bx	lr
 800246e:	4618      	mov	r0, r3
 8002470:	4770      	bx	lr
 8002472:	2001      	movs	r0, #1
    }
 8002474:	4770      	bx	lr

08002476 <_ZN8touchgfx12NoTransitionD0Ev>:
 8002476:	b510      	push	{r4, lr}
 8002478:	4604      	mov	r4, r0
 800247a:	210c      	movs	r1, #12
 800247c:	f01b f9df 	bl	801d83e <_ZdlPvj>
 8002480:	4620      	mov	r0, r4
 8002482:	bd10      	pop	{r4, pc}

08002484 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002484:	b510      	push	{r4, lr}
 8002486:	4604      	mov	r4, r0
 8002488:	2110      	movs	r1, #16
 800248a:	f01b f9d8 	bl	801d83e <_ZdlPvj>
 800248e:	4620      	mov	r0, r4
 8002490:	bd10      	pop	{r4, pc}

08002492 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8002492:	b510      	push	{r4, lr}
 8002494:	4604      	mov	r4, r0
 8002496:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800249a:	f01b f9d0 	bl	801d83e <_ZdlPvj>
 800249e:	4620      	mov	r0, r4
 80024a0:	bd10      	pop	{r4, pc}

080024a2 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 80024a2:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 80024a4:	f00f fc3c 	bl	8011d20 <_ZN8touchgfx11Application11getInstanceEv>
    }
 80024a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
 80024ac:	f010 b882 	b.w	80125b4 <_ZN8touchgfx11Application10invalidateEv>

080024b0 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80024b0:	b510      	push	{r4, lr}
 80024b2:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80024b4:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 80024b8:	b158      	cbz	r0, 80024d2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 80024ba:	6803      	ldr	r3, [r0, #0]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	4798      	blx	r3
 80024c0:	b138      	cbz	r0, 80024d2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 80024c2:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
 80024c6:	6803      	ldr	r3, [r0, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 80024cc:	2300      	movs	r3, #0
 80024ce:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    }
 80024d2:	bd10      	pop	{r4, pc}

080024d4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 80024d4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80024d8:	e9d0 5a55 	ldrd	r5, sl, [r0, #340]	; 0x154
{
 80024dc:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80024de:	68a8      	ldr	r0, [r5, #8]
 80024e0:	6803      	ldr	r3, [r0, #0]
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	4798      	blx	r3
 80024e6:	f243 53b7 	movw	r3, #13751	; 0x35b7
 80024ea:	4298      	cmp	r0, r3
 80024ec:	d805      	bhi.n	80024fa <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x26>
 80024ee:	4b46      	ldr	r3, [pc, #280]	; (8002608 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 80024f0:	21a3      	movs	r1, #163	; 0xa3
 80024f2:	4a46      	ldr	r2, [pc, #280]	; (800260c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80024f4:	4846      	ldr	r0, [pc, #280]	; (8002610 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 80024f6:	f01b f9d1 	bl	801d89c <__assert_func>
 80024fa:	6868      	ldr	r0, [r5, #4]
 80024fc:	6803      	ldr	r3, [r0, #0]
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	4798      	blx	r3
 8002502:	280f      	cmp	r0, #15
 8002504:	d803      	bhi.n	800250e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x3a>
 8002506:	4b43      	ldr	r3, [pc, #268]	; (8002614 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 8002508:	21a4      	movs	r1, #164	; 0xa4
 800250a:	4a40      	ldr	r2, [pc, #256]	; (800260c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 800250c:	e7f2      	b.n	80024f4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800250e:	68e8      	ldr	r0, [r5, #12]
 8002510:	6803      	ldr	r3, [r0, #0]
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	4798      	blx	r3
 8002516:	280b      	cmp	r0, #11
 8002518:	d803      	bhi.n	8002522 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4e>
 800251a:	4b3f      	ldr	r3, [pc, #252]	; (8002618 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>)
 800251c:	21a5      	movs	r1, #165	; 0xa5
 800251e:	4a3b      	ldr	r2, [pc, #236]	; (800260c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8002520:	e7e8      	b.n	80024f4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    if (*currentTrans)
 8002522:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8002620 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x14c>
    Application::getInstance()->clearAllTimerWidgets();
 8002526:	f00f fbfb 	bl	8011d20 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 800252a:	3004      	adds	r0, #4
 800252c:	f00f fc1d 	bl	8011d6a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8002530:	f8d9 0000 	ldr.w	r0, [r9]
 8002534:	b110      	cbz	r0, 800253c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 8002536:	6803      	ldr	r3, [r0, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	4798      	blx	r3
    if (*currentTrans)
 800253c:	f8d9 0000 	ldr.w	r0, [r9]
 8002540:	b110      	cbz	r0, 8002548 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 8002542:	6803      	ldr	r3, [r0, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4798      	blx	r3
    if (*currentScreen)
 8002548:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8002624 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x150>
 800254c:	f8d8 0000 	ldr.w	r0, [r8]
 8002550:	b110      	cbz	r0, 8002558 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 8002552:	6803      	ldr	r3, [r0, #0]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	4798      	blx	r3
    if (*currentPresenter)
 8002558:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800255c:	b110      	cbz	r0, 8002564 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 800255e:	6803      	ldr	r3, [r0, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	4798      	blx	r3
    if (*currentScreen)
 8002564:	f8d8 0000 	ldr.w	r0, [r8]
 8002568:	b110      	cbz	r0, 8002570 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 800256a:	6803      	ldr	r3, [r0, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4798      	blx	r3
    if (*currentPresenter)
 8002570:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8002574:	b110      	cbz	r0, 800257c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 8002576:	6803      	ldr	r3, [r0, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800257c:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 800257e:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8002580:	f04f 0b00 	mov.w	fp, #0
 8002584:	6803      	ldr	r3, [r0, #0]
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	4798      	blx	r3
 800258a:	4b24      	ldr	r3, [pc, #144]	; (800261c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>)
 800258c:	4604      	mov	r4, r0
 800258e:	f8c0 b004 	str.w	fp, [r0, #4]
 8002592:	6003      	str	r3, [r0, #0]
 8002594:	4659      	mov	r1, fp
 8002596:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800259a:	68a8      	ldr	r0, [r5, #8]
 800259c:	6803      	ldr	r3, [r0, #0]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	4798      	blx	r3
 80025a2:	4606      	mov	r6, r0
 80025a4:	f001 fb84 	bl	8003cb0 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80025a8:	6868      	ldr	r0, [r5, #4]
 80025aa:	4659      	mov	r1, fp
 80025ac:	6803      	ldr	r3, [r0, #0]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	4798      	blx	r3
 80025b2:	4605      	mov	r5, r0
 80025b4:	4631      	mov	r1, r6
 80025b6:	f001 fb43 	bl	8003c40 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 80025ba:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 80025be:	f8c7 513c 	str.w	r5, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 80025c2:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 80025c6:	b1e5      	cbz	r5, 8002602 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12e>
 80025c8:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 80025ca:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 80025ce:	4630      	mov	r0, r6
 80025d0:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 80025d2:	f8c5 a008 	str.w	sl, [r5, #8]
 80025d6:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 80025d8:	63f5      	str	r5, [r6, #60]	; 0x3c
 80025da:	4798      	blx	r3
    newPresenter->activate();
 80025dc:	682b      	ldr	r3, [r5, #0]
 80025de:	4628      	mov	r0, r5
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80025e4:	4621      	mov	r1, r4
 80025e6:	4630      	mov	r0, r6
 80025e8:	f011 f8fc 	bl	80137e4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80025ec:	6823      	ldr	r3, [r4, #0]
 80025ee:	4620      	mov	r0, r4
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	4798      	blx	r3
    newTransition->invalidate();
 80025f4:	6823      	ldr	r3, [r4, #0]
 80025f6:	4620      	mov	r0, r4
 80025f8:	695b      	ldr	r3, [r3, #20]
}
 80025fa:	b001      	add	sp, #4
 80025fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002600:	4718      	bx	r3
    model->bind(newPresenter);
 8002602:	462b      	mov	r3, r5
 8002604:	e7e1      	b.n	80025ca <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xf6>
 8002606:	bf00      	nop
 8002608:	0801f26c 	.word	0x0801f26c
 800260c:	0801f2fa 	.word	0x0801f2fa
 8002610:	0801f3fe 	.word	0x0801f3fe
 8002614:	0801f453 	.word	0x0801f453
 8002618:	0801f4f6 	.word	0x0801f4f6
 800261c:	0801f608 	.word	0x0801f608
 8002620:	2400e49c 	.word	0x2400e49c
 8002624:	2400e498 	.word	0x2400e498

08002628 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8002628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800262a:	4604      	mov	r4, r0
 800262c:	4617      	mov	r7, r2
 800262e:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8002630:	f00f fc3c 	bl	8011eac <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8002634:	4b10      	ldr	r3, [pc, #64]	; (8002678 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
          pendingScreenTransitionCallback(0)
 8002636:	2500      	movs	r5, #0
        instance = this;
 8002638:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800263a:	4629      	mov	r1, r5
      model(m)
 800263c:	4b0f      	ldr	r3, [pc, #60]	; (800267c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 800263e:	e9c4 7655 	strd	r7, r6, [r4, #340]	; 0x154
        return instance;
 8002642:	4e0f      	ldr	r6, [pc, #60]	; (8002680 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8002644:	6023      	str	r3, [r4, #0]
 8002646:	6830      	ldr	r0, [r6, #0]
        : pobject(0), pmemfun(0)
 8002648:	4b0e      	ldr	r3, [pc, #56]	; (8002684 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 800264a:	e9c4 5553 	strd	r5, r5, [r4, #332]	; 0x14c
 800264e:	e9c4 3551 	strd	r3, r5, [r4, #324]	; 0x144
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8002652:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8002654:	e9c4 554f 	strd	r5, r5, [r4, #316]	; 0x13c
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800265c:	4628      	mov	r0, r5
 800265e:	f000 fa9b 	bl	8002b98 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002662:	6833      	ldr	r3, [r6, #0]
 8002664:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8002668:	b10a      	cbz	r2, 800266e <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 800266a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800266c:	b900      	cbnz	r0, 8002670 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 800266e:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8002670:	f015 ff9f 	bl	80185b2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8002674:	4620      	mov	r0, r4
 8002676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002678:	2400e4a8 	.word	0x2400e4a8
 800267c:	0801f5bc 	.word	0x0801f5bc
 8002680:	2400e454 	.word	0x2400e454
 8002684:	0801f5a4 	.word	0x0801f5a4

08002688 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002688:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 800268a:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 800268e:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8002692:	2300      	movs	r3, #0
 8002694:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8002698:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 800269c:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	080024d5 	.word	0x080024d5

080026a8 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 80026a8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80026aa:	4770      	bx	lr

080026ac <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 80026ac:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80026ae:	4770      	bx	lr

080026b0 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 80026b0:	4770      	bx	lr

080026b2 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80026b2:	888b      	ldrh	r3, [r1, #4]
 80026b4:	69c0      	ldr	r0, [r0, #28]
 80026b6:	0adb      	lsrs	r3, r3, #11
 80026b8:	680a      	ldr	r2, [r1, #0]
 80026ba:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 80026be:	4410      	add	r0, r2
 80026c0:	4770      	bx	lr

080026c2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80026c2:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 80026c4:	b1c2      	cbz	r2, 80026f8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 80026c6:	7b13      	ldrb	r3, [r2, #12]
 80026c8:	b1b3      	cbz	r3, 80026f8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80026ca:	7b54      	ldrb	r4, [r2, #13]
 80026cc:	7ad2      	ldrb	r2, [r2, #11]
 80026ce:	0224      	lsls	r4, r4, #8
 80026d0:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80026d4:	4314      	orrs	r4, r2
 80026d6:	6a02      	ldr	r2, [r0, #32]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80026d8:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80026da:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 80026de:	8813      	ldrh	r3, [r2, #0]
 80026e0:	428b      	cmp	r3, r1
 80026e2:	d102      	bne.n	80026ea <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 80026e4:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 80026e8:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 80026ea:	d805      	bhi.n	80026f8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80026ec:	3801      	subs	r0, #1
 80026ee:	3204      	adds	r2, #4
 80026f0:	b280      	uxth	r0, r0
 80026f2:	2800      	cmp	r0, #0
 80026f4:	d1f3      	bne.n	80026de <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 80026f6:	e7f7      	b.n	80026e8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 80026f8:	2000      	movs	r0, #0
 80026fa:	e7f5      	b.n	80026e8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

080026fc <_ZN8touchgfx13GeneratedFontD0Ev>:
 80026fc:	b510      	push	{r4, lr}
 80026fe:	4604      	mov	r4, r0
 8002700:	212c      	movs	r1, #44	; 0x2c
 8002702:	f01b f89c 	bl	801d83e <_ZdlPvj>
 8002706:	4620      	mov	r0, r4
 8002708:	bd10      	pop	{r4, pc}
	...

0800270c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800270c:	b530      	push	{r4, r5, lr}
 800270e:	b08b      	sub	sp, #44	; 0x2c
 8002710:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8002712:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
 8002716:	9508      	str	r5, [sp, #32]
 8002718:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 800271c:	9507      	str	r5, [sp, #28]
 800271e:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8002722:	9506      	str	r5, [sp, #24]
 8002724:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 8002728:	9505      	str	r5, [sp, #20]
 800272a:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800272e:	9504      	str	r5, [sp, #16]
 8002730:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8002734:	9503      	str	r5, [sp, #12]
 8002736:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 800273a:	9502      	str	r5, [sp, #8]
 800273c:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8002740:	9501      	str	r5, [sp, #4]
 8002742:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8002746:	9500      	str	r5, [sp, #0]
 8002748:	f010 fbdc 	bl	8012f04 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800274c:	4b06      	ldr	r3, [pc, #24]	; (8002768 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 800274e:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8002750:	6023      	str	r3, [r4, #0]
 8002752:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002754:	61e3      	str	r3, [r4, #28]
 8002756:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002758:	6223      	str	r3, [r4, #32]
 800275a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800275c:	6263      	str	r3, [r4, #36]	; 0x24
 800275e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8002760:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002762:	b00b      	add	sp, #44	; 0x2c
 8002764:	bd30      	pop	{r4, r5, pc}
 8002766:	bf00      	nop
 8002768:	0801f62c 	.word	0x0801f62c

0800276c <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 800276c:	4770      	bx	lr

0800276e <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 800276e:	4770      	bx	lr

08002770 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8002770:	4770      	bx	lr

08002772 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8002772:	4770      	bx	lr

08002774 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8002774:	4770      	bx	lr

08002776 <_ZN15Screen1ViewBase11setupScreenEv>:
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void Screen1ViewBase::setupScreen()
{
    customGraph1.initialize();
 8002776:	3098      	adds	r0, #152	; 0x98
 8002778:	f001 bc76 	b.w	8004068 <_ZN11customGraph10initializeEv>

0800277c <_ZN15Screen1ViewBaseD1Ev>:
Screen1ViewBase::~Screen1ViewBase()
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <_ZN15Screen1ViewBaseD1Ev+0x1c>)
 800277e:	b510      	push	{r4, lr}
 8002780:	4604      	mov	r4, r0
 8002782:	6003      	str	r3, [r0, #0]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 8002784:	f00d fe4e 	bl	8010424 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>

class customGraph : public customGraphBase
{
public:
    customGraph();
    virtual ~customGraph() {}
 8002788:	4b04      	ldr	r3, [pc, #16]	; (800279c <_ZN15Screen1ViewBaseD1Ev+0x20>)
 800278a:	4620      	mov	r0, r4
 800278c:	f840 3f98 	str.w	r3, [r0, #152]!
 8002790:	f000 fd1c 	bl	80031cc <_ZN15customGraphBaseD1Ev>
}
 8002794:	4620      	mov	r0, r4
 8002796:	bd10      	pop	{r4, pc}
 8002798:	0801f68c 	.word	0x0801f68c
 800279c:	0801ffe4 	.word	0x0801ffe4

080027a0 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 80027a0:	b510      	push	{r4, lr}
 80027a2:	4604      	mov	r4, r0
}
 80027a4:	f7ff ffea 	bl	800277c <_ZN15Screen1ViewBaseD1Ev>
 80027a8:	f243 51a8 	movw	r1, #13736	; 0x35a8
 80027ac:	4620      	mov	r0, r4
 80027ae:	f01b f846 	bl	801d83e <_ZdlPvj>
 80027b2:	4620      	mov	r0, r4
 80027b4:	bd10      	pop	{r4, pc}

080027b6 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 80027b6:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 80027b8:	b570      	push	{r4, r5, r6, lr}
 80027ba:	4604      	mov	r4, r0
        setX(x);
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    void setXY(int16_t x, int16_t y)
 80027be:	4615      	mov	r5, r2
        setX(x);
 80027c0:	4798      	blx	r3
        setY(y);
 80027c2:	6823      	ldr	r3, [r4, #0]
 80027c4:	4620      	mov	r0, r4
 80027c6:	4629      	mov	r1, r5
 80027c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    }
 80027ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 80027ce:	4718      	bx	r3

080027d0 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
 80027d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80027d4:	4604      	mov	r4, r0
        : presenter(0)
 80027d6:	2500      	movs	r5, #0
 80027d8:	f010 fe58 	bl	801348c <_ZN8touchgfx6ScreenC1Ev>
 80027dc:	4b37      	ldr	r3, [pc, #220]	; (80028bc <_ZN15Screen1ViewBaseC1Ev+0xec>)
 80027de:	4626      	mov	r6, r4
 80027e0:	63e5      	str	r5, [r4, #60]	; 0x3c
          visible(true)
 80027e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027e6:	f104 076c 	add.w	r7, r4, #108	; 0x6c
 80027ea:	f846 3b40 	str.w	r3, [r6], #64
 80027ee:	f104 0998 	add.w	r9, r4, #152	; 0x98
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 80027f2:	4b33      	ldr	r3, [pc, #204]	; (80028c0 <_ZN15Screen1ViewBaseC1Ev+0xf0>)
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
    {
        Image::setBitmap(bmp);
 80027f4:	a901      	add	r1, sp, #4
 80027f6:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
 80027fa:	4638      	mov	r0, r7
 80027fc:	f8a4 2090 	strh.w	r2, [r4, #144]	; 0x90
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8002800:	f104 0804 	add.w	r8, r4, #4
        : Widget(), bitmap(bmp), alpha(255)
 8002804:	4a2f      	ldr	r2, [pc, #188]	; (80028c4 <_ZN15Screen1ViewBaseC1Ev+0xf4>)
 8002806:	6625      	str	r5, [r4, #96]	; 0x60
 8002808:	66e2      	str	r2, [r4, #108]	; 0x6c
        : color(col)
 800280a:	66a5      	str	r5, [r4, #104]	; 0x68
        : x(0), y(0), width(0), height(0)
 800280c:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
 8002810:	23ff      	movs	r3, #255	; 0xff
 8002812:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8002816:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800281a:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800281e:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
 8002822:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
 8002826:	f8ad 3004 	strh.w	r3, [sp, #4]
 800282a:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
 800282e:	e9c4 5516 	strd	r5, r5, [r4, #88]	; 0x58
 8002832:	e9c4 551c 	strd	r5, r5, [r4, #112]	; 0x70
 8002836:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
 800283a:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
 800283e:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
        Image::setBitmap(bmp);
 8002842:	f00c feea 	bl	800f61a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002846:	4648      	mov	r0, r9
 8002848:	f001 fac2 	bl	8003dd0 <_ZN11customGraphC1Ev>
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 800284c:	f504 60d9 	add.w	r0, r4, #1736	; 0x6c8
 8002850:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8002854:	f00d fddc 	bl	8010410 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
        setXY(x, y);
 8002858:	462a      	mov	r2, r5
 800285a:	4629      	mov	r1, r5
 800285c:	4630      	mov	r0, r6
 800285e:	f7ff ffaa 	bl	80027b6 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8002862:	4630      	mov	r0, r6
 8002864:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002868:	f7ff fc98 	bl	800219c <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 800286c:	4630      	mov	r0, r6
 800286e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002872:	f7ff fc95 	bl	80021a0 <_ZN8touchgfx8Drawable9setHeightEs>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8002876:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800287a:	4631      	mov	r1, r6
 800287c:	4640      	mov	r0, r8
 800287e:	66a3      	str	r3, [r4, #104]	; 0x68
 8002880:	f009 fd04 	bl	800c28c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(0, 0);
 8002884:	462a      	mov	r2, r5
 8002886:	4629      	mov	r1, r5
 8002888:	4638      	mov	r0, r7
 800288a:	f7ff ff94 	bl	80027b6 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_800X480_SHATTERED_RAIN_DARK_ID));
 800288e:	a901      	add	r1, sp, #4
 8002890:	4638      	mov	r0, r7
 8002892:	f8ad 5004 	strh.w	r5, [sp, #4]
 8002896:	f00c fec0 	bl	800f61a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800289a:	4639      	mov	r1, r7
 800289c:	4640      	mov	r0, r8
 800289e:	f009 fcf5 	bl	800c28c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    customGraph1.setXY(245, 140);
 80028a2:	228c      	movs	r2, #140	; 0x8c
 80028a4:	4648      	mov	r0, r9
 80028a6:	21f5      	movs	r1, #245	; 0xf5
 80028a8:	f7ff ff85 	bl	80027b6 <_ZN8touchgfx8Drawable5setXYEss>
 80028ac:	4640      	mov	r0, r8
 80028ae:	4649      	mov	r1, r9
 80028b0:	f009 fcec 	bl	800c28c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80028b4:	4620      	mov	r0, r4
 80028b6:	b003      	add	sp, #12
 80028b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80028bc:	0801f68c 	.word	0x0801f68c
 80028c0:	08020860 	.word	0x08020860
 80028c4:	080208c8 	.word	0x080208c8

080028c8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80028c8:	4770      	bx	lr
	...

080028cc <_Z23getFont_verdana_10_4bppv>:
{
 80028cc:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80028ce:	4d16      	ldr	r5, [pc, #88]	; (8002928 <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 80028d0:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80028d2:	782c      	ldrb	r4, [r5, #0]
 80028d4:	f3bf 8f5b 	dmb	ish
 80028d8:	f014 0401 	ands.w	r4, r4, #1
 80028dc:	d120      	bne.n	8002920 <_Z23getFont_verdana_10_4bppv+0x54>
 80028de:	4628      	mov	r0, r5
 80028e0:	f01a ffaf 	bl	801d842 <__cxa_guard_acquire>
 80028e4:	b1e0      	cbz	r0, 8002920 <_Z23getFont_verdana_10_4bppv+0x54>
 80028e6:	233f      	movs	r3, #63	; 0x3f
 80028e8:	2201      	movs	r2, #1
 80028ea:	4910      	ldr	r1, [pc, #64]	; (800292c <_Z23getFont_verdana_10_4bppv+0x60>)
 80028ec:	9309      	str	r3, [sp, #36]	; 0x24
 80028ee:	4b10      	ldr	r3, [pc, #64]	; (8002930 <_Z23getFont_verdana_10_4bppv+0x64>)
 80028f0:	4810      	ldr	r0, [pc, #64]	; (8002934 <_Z23getFont_verdana_10_4bppv+0x68>)
 80028f2:	9308      	str	r3, [sp, #32]
 80028f4:	4b10      	ldr	r3, [pc, #64]	; (8002938 <_Z23getFont_verdana_10_4bppv+0x6c>)
 80028f6:	940a      	str	r4, [sp, #40]	; 0x28
 80028f8:	9405      	str	r4, [sp, #20]
 80028fa:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80028fe:	2304      	movs	r3, #4
 8002900:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8002904:	230a      	movs	r3, #10
 8002906:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002910:	f7ff fefc 	bl	800270c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002914:	4809      	ldr	r0, [pc, #36]	; (800293c <_Z23getFont_verdana_10_4bppv+0x70>)
 8002916:	f01a ffdf 	bl	801d8d8 <atexit>
 800291a:	4628      	mov	r0, r5
 800291c:	f01a ff9d 	bl	801d85a <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8002920:	4804      	ldr	r0, [pc, #16]	; (8002934 <_Z23getFont_verdana_10_4bppv+0x68>)
 8002922:	b00f      	add	sp, #60	; 0x3c
 8002924:	bd30      	pop	{r4, r5, pc}
 8002926:	bf00      	nop
 8002928:	24004a08 	.word	0x24004a08
 800292c:	08021898 	.word	0x08021898
 8002930:	08021b40 	.word	0x08021b40
 8002934:	24004a0c 	.word	0x24004a0c
 8002938:	08021bcc 	.word	0x08021bcc
 800293c:	080028c9 	.word	0x080028c9

08002940 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_16_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_16_4bpp();

touchgfx::GeneratedFont& getFont_verdana_16_4bpp()
{
    static touchgfx::GeneratedFont verdana_16_4bpp(glyphs_verdana_16_4bpp, 45, 19, 16, 0, 0, 4, 1, 0, 0, unicodes_verdana_16_4bpp, kerning_verdana_16_4bpp, 58, 0, 0, 0);
 8002940:	4770      	bx	lr
	...

08002944 <_Z23getFont_verdana_16_4bppv>:
{
 8002944:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_16_4bpp(glyphs_verdana_16_4bpp, 45, 19, 16, 0, 0, 4, 1, 0, 0, unicodes_verdana_16_4bpp, kerning_verdana_16_4bpp, 58, 0, 0, 0);
 8002946:	4d17      	ldr	r5, [pc, #92]	; (80029a4 <_Z23getFont_verdana_16_4bppv+0x60>)
{
 8002948:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_16_4bpp(glyphs_verdana_16_4bpp, 45, 19, 16, 0, 0, 4, 1, 0, 0, unicodes_verdana_16_4bpp, kerning_verdana_16_4bpp, 58, 0, 0, 0);
 800294a:	782c      	ldrb	r4, [r5, #0]
 800294c:	f3bf 8f5b 	dmb	ish
 8002950:	f014 0401 	ands.w	r4, r4, #1
 8002954:	d122      	bne.n	800299c <_Z23getFont_verdana_16_4bppv+0x58>
 8002956:	4628      	mov	r0, r5
 8002958:	f01a ff73 	bl	801d842 <__cxa_guard_acquire>
 800295c:	b1f0      	cbz	r0, 800299c <_Z23getFont_verdana_16_4bppv+0x58>
 800295e:	233a      	movs	r3, #58	; 0x3a
 8002960:	2201      	movs	r2, #1
 8002962:	4911      	ldr	r1, [pc, #68]	; (80029a8 <_Z23getFont_verdana_16_4bppv+0x64>)
 8002964:	9309      	str	r3, [sp, #36]	; 0x24
 8002966:	4b11      	ldr	r3, [pc, #68]	; (80029ac <_Z23getFont_verdana_16_4bppv+0x68>)
 8002968:	4811      	ldr	r0, [pc, #68]	; (80029b0 <_Z23getFont_verdana_16_4bppv+0x6c>)
 800296a:	9308      	str	r3, [sp, #32]
 800296c:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <_Z23getFont_verdana_16_4bppv+0x70>)
 800296e:	940a      	str	r4, [sp, #40]	; 0x28
 8002970:	9405      	str	r4, [sp, #20]
 8002972:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8002976:	2304      	movs	r3, #4
 8002978:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800297c:	2310      	movs	r3, #16
 800297e:	222d      	movs	r2, #45	; 0x2d
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	2313      	movs	r3, #19
 8002984:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8002988:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800298c:	f7ff febe 	bl	800270c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002990:	4809      	ldr	r0, [pc, #36]	; (80029b8 <_Z23getFont_verdana_16_4bppv+0x74>)
 8002992:	f01a ffa1 	bl	801d8d8 <atexit>
 8002996:	4628      	mov	r0, r5
 8002998:	f01a ff5f 	bl	801d85a <__cxa_guard_release>
    return verdana_16_4bpp;
}
 800299c:	4804      	ldr	r0, [pc, #16]	; (80029b0 <_Z23getFont_verdana_16_4bppv+0x6c>)
 800299e:	b00f      	add	sp, #60	; 0x3c
 80029a0:	bd30      	pop	{r4, r5, pc}
 80029a2:	bf00      	nop
 80029a4:	24004a38 	.word	0x24004a38
 80029a8:	080218a8 	.word	0x080218a8
 80029ac:	08021b44 	.word	0x08021b44
 80029b0:	24004a3c 	.word	0x24004a3c
 80029b4:	08021bd0 	.word	0x08021bd0
 80029b8:	08002941 	.word	0x08002941

080029bc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80029bc:	4770      	bx	lr
	...

080029c0 <_Z23getFont_verdana_20_4bppv>:
{
 80029c0:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80029c2:	4d16      	ldr	r5, [pc, #88]	; (8002a1c <_Z23getFont_verdana_20_4bppv+0x5c>)
{
 80029c4:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80029c6:	782c      	ldrb	r4, [r5, #0]
 80029c8:	f3bf 8f5b 	dmb	ish
 80029cc:	f014 0401 	ands.w	r4, r4, #1
 80029d0:	d120      	bne.n	8002a14 <_Z23getFont_verdana_20_4bppv+0x54>
 80029d2:	4628      	mov	r0, r5
 80029d4:	f01a ff35 	bl	801d842 <__cxa_guard_acquire>
 80029d8:	b1e0      	cbz	r0, 8002a14 <_Z23getFont_verdana_20_4bppv+0x54>
 80029da:	233f      	movs	r3, #63	; 0x3f
 80029dc:	2201      	movs	r2, #1
 80029de:	4910      	ldr	r1, [pc, #64]	; (8002a20 <_Z23getFont_verdana_20_4bppv+0x60>)
 80029e0:	9309      	str	r3, [sp, #36]	; 0x24
 80029e2:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <_Z23getFont_verdana_20_4bppv+0x64>)
 80029e4:	4810      	ldr	r0, [pc, #64]	; (8002a28 <_Z23getFont_verdana_20_4bppv+0x68>)
 80029e6:	9308      	str	r3, [sp, #32]
 80029e8:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <_Z23getFont_verdana_20_4bppv+0x6c>)
 80029ea:	940a      	str	r4, [sp, #40]	; 0x28
 80029ec:	9405      	str	r4, [sp, #20]
 80029ee:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80029f2:	2304      	movs	r3, #4
 80029f4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80029f8:	2314      	movs	r3, #20
 80029fa:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002a04:	f7ff fe82 	bl	800270c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002a08:	4809      	ldr	r0, [pc, #36]	; (8002a30 <_Z23getFont_verdana_20_4bppv+0x70>)
 8002a0a:	f01a ff65 	bl	801d8d8 <atexit>
 8002a0e:	4628      	mov	r0, r5
 8002a10:	f01a ff23 	bl	801d85a <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8002a14:	4804      	ldr	r0, [pc, #16]	; (8002a28 <_Z23getFont_verdana_20_4bppv+0x68>)
 8002a16:	b00f      	add	sp, #60	; 0x3c
 8002a18:	bd30      	pop	{r4, r5, pc}
 8002a1a:	bf00      	nop
 8002a1c:	24004a68 	.word	0x24004a68
 8002a20:	08021b20 	.word	0x08021b20
 8002a24:	08021bc4 	.word	0x08021bc4
 8002a28:	24004a6c 	.word	0x24004a6c
 8002a2c:	08021bd4 	.word	0x08021bd4
 8002a30:	080029bd 	.word	0x080029bd

08002a34 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8002a34:	4770      	bx	lr
	...

08002a38 <_Z23getFont_verdana_40_4bppv>:
{
 8002a38:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8002a3a:	4d16      	ldr	r5, [pc, #88]	; (8002a94 <_Z23getFont_verdana_40_4bppv+0x5c>)
{
 8002a3c:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8002a3e:	782c      	ldrb	r4, [r5, #0]
 8002a40:	f3bf 8f5b 	dmb	ish
 8002a44:	f014 0401 	ands.w	r4, r4, #1
 8002a48:	d120      	bne.n	8002a8c <_Z23getFont_verdana_40_4bppv+0x54>
 8002a4a:	4628      	mov	r0, r5
 8002a4c:	f01a fef9 	bl	801d842 <__cxa_guard_acquire>
 8002a50:	b1e0      	cbz	r0, 8002a8c <_Z23getFont_verdana_40_4bppv+0x54>
 8002a52:	233f      	movs	r3, #63	; 0x3f
 8002a54:	2201      	movs	r2, #1
 8002a56:	4910      	ldr	r1, [pc, #64]	; (8002a98 <_Z23getFont_verdana_40_4bppv+0x60>)
 8002a58:	9309      	str	r3, [sp, #36]	; 0x24
 8002a5a:	4b10      	ldr	r3, [pc, #64]	; (8002a9c <_Z23getFont_verdana_40_4bppv+0x64>)
 8002a5c:	4810      	ldr	r0, [pc, #64]	; (8002aa0 <_Z23getFont_verdana_40_4bppv+0x68>)
 8002a5e:	9308      	str	r3, [sp, #32]
 8002a60:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8002a62:	940a      	str	r4, [sp, #40]	; 0x28
 8002a64:	9405      	str	r4, [sp, #20]
 8002a66:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8002a6a:	2304      	movs	r3, #4
 8002a6c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8002a70:	2328      	movs	r3, #40	; 0x28
 8002a72:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002a7c:	f7ff fe46 	bl	800270c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002a80:	4809      	ldr	r0, [pc, #36]	; (8002aa8 <_Z23getFont_verdana_40_4bppv+0x70>)
 8002a82:	f01a ff29 	bl	801d8d8 <atexit>
 8002a86:	4628      	mov	r0, r5
 8002a88:	f01a fee7 	bl	801d85a <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8002a8c:	4804      	ldr	r0, [pc, #16]	; (8002aa0 <_Z23getFont_verdana_40_4bppv+0x68>)
 8002a8e:	b00f      	add	sp, #60	; 0x3c
 8002a90:	bd30      	pop	{r4, r5, pc}
 8002a92:	bf00      	nop
 8002a94:	24004a98 	.word	0x24004a98
 8002a98:	08021b30 	.word	0x08021b30
 8002a9c:	08021bc8 	.word	0x08021bc8
 8002aa0:	24004a9c 	.word	0x24004a9c
 8002aa4:	08021bd8 	.word	0x08021bd8
 8002aa8:	08002a35 	.word	0x08002a35

08002aac <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8002aac:	2000      	movs	r0, #0
 8002aae:	4770      	bx	lr

08002ab0 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	4770      	bx	lr

08002ab4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8002ab4:	b40e      	push	{r1, r2, r3}
 8002ab6:	b503      	push	{r0, r1, lr}
 8002ab8:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8002aba:	2100      	movs	r1, #0
{
 8002abc:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8002ac0:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8002ac2:	f010 f847 	bl	8012b54 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8002ac6:	b002      	add	sp, #8
 8002ac8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002acc:	b003      	add	sp, #12
 8002ace:	4770      	bx	lr

08002ad0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8002ad0:	b40c      	push	{r2, r3}
 8002ad2:	b507      	push	{r0, r1, r2, lr}
 8002ad4:	ab04      	add	r3, sp, #16
 8002ad6:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8002ada:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8002adc:	f010 f83a 	bl	8012b54 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8002ae0:	b003      	add	sp, #12
 8002ae2:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ae6:	b002      	add	sp, #8
 8002ae8:	4770      	bx	lr
	...

08002aec <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8002aec:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8002aee:	b510      	push	{r4, lr}
 8002af0:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8002af2:	b373      	cbz	r3, 8002b52 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8002af4:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8002af6:	b92b      	cbnz	r3, 8002b04 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8002af8:	4b18      	ldr	r3, [pc, #96]	; (8002b5c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8002afa:	21c5      	movs	r1, #197	; 0xc5
 8002afc:	4a18      	ldr	r2, [pc, #96]	; (8002b60 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8002afe:	4819      	ldr	r0, [pc, #100]	; (8002b64 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8002b00:	f01a fecc 	bl	801d89c <__assert_func>
            return buffer[pos];
 8002b04:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8002b06:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002b0a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002b0c:	b30b      	cbz	r3, 8002b52 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8002b0e:	f011 fb81 	bl	8014214 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8002b12:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d803      	bhi.n	8002b20 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8002b18:	4b13      	ldr	r3, [pc, #76]	; (8002b68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8002b1a:	21cb      	movs	r1, #203	; 0xcb
 8002b1c:	4a13      	ldr	r2, [pc, #76]	; (8002b6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8002b1e:	e7ee      	b.n	8002afe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8002b20:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8002b22:	f640 103f 	movw	r0, #2367	; 0x93f
 8002b26:	1c53      	adds	r3, r2, #1
 8002b28:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8002b2a:	2b09      	cmp	r3, #9
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	bf88      	it	hi
 8002b30:	f1a3 010a 	subhi.w	r1, r3, #10
 8002b34:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8002b38:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 8002b3a:	4281      	cmp	r1, r0
 8002b3c:	d109      	bne.n	8002b52 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8002b3e:	2b0a      	cmp	r3, #10
 8002b40:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8002b44:	bf28      	it	cs
 8002b46:	2300      	movcs	r3, #0
            return buffer[pos];
 8002b48:	8c50      	ldrh	r0, [r2, #34]	; 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8002b4a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8002b4e:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8002b50:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8002b52:	4620      	mov	r0, r4
}
 8002b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8002b58:	f011 ba5e 	b.w	8014018 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8002b5c:	0801f6b8 	.word	0x0801f6b8
 8002b60:	0801f6c1 	.word	0x0801f6c1
 8002b64:	0801f76c 	.word	0x0801f76c
 8002b68:	0801f7c4 	.word	0x0801f7c4
 8002b6c:	0801f7d2 	.word	0x0801f7d2

08002b70 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8002b70:	f011 ba1b 	b.w	8013faa <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08002b74 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8002b74:	b510      	push	{r4, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	ac02      	add	r4, sp, #8
 8002b7a:	e884 0006 	stmia.w	r4, {r1, r2}
 8002b7e:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8002b80:	ab0a      	add	r3, sp, #40	; 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8002b82:	4621      	mov	r1, r4
    va_start(pArg, format);
 8002b84:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8002b86:	9301      	str	r3, [sp, #4]
 8002b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	9b08      	ldr	r3, [sp, #32]
 8002b8e:	f00e fccb 	bl	8011528 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8002b92:	b006      	add	sp, #24
 8002b94:	bd10      	pop	{r4, pc}
	...

08002b98 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8002b98:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8002b9a:	bb18      	cbnz	r0, 8002be4 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8002b9c:	4b12      	ldr	r3, [pc, #72]	; (8002be8 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8002b9e:	4813      	ldr	r0, [pc, #76]	; (8002bec <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4913      	ldr	r1, [pc, #76]	; (8002bf0 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8002ba4:	b1b3      	cbz	r3, 8002bd4 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8002ba6:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8002ba8:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8002baa:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8002bac:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8002bae:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	441a      	add	r2, r3
 8002bb4:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8002bb6:	4b0f      	ldr	r3, [pc, #60]	; (8002bf4 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8002bbc:	f000 f838 	bl	8002c30 <_ZN17TypedTextDatabase8getFontsEv>
 8002bc0:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8002bc2:	f000 f833 	bl	8002c2c <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8002bc6:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8002bc8:	601c      	str	r4, [r3, #0]
        fonts = f;
 8002bca:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8002bcc:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8002bce:	4b0c      	ldr	r3, [pc, #48]	; (8002c00 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8002bd0:	8018      	strh	r0, [r3, #0]
    }
}
 8002bd2:	e007      	b.n	8002be4 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8002bd4:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8002bd6:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8002bda:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8002bde:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8002be0:	2c00      	cmp	r4, #0
 8002be2:	d1e8      	bne.n	8002bb6 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8002be4:	bd38      	pop	{r3, r4, r5, pc}
 8002be6:	bf00      	nop
 8002be8:	24004ac8 	.word	0x24004ac8
 8002bec:	24004acc 	.word	0x24004acc
 8002bf0:	24004ad0 	.word	0x24004ad0
 8002bf4:	24004ad4 	.word	0x24004ad4
 8002bf8:	2400e4ac 	.word	0x2400e4ac
 8002bfc:	2400e4b4 	.word	0x2400e4b4
 8002c00:	2400e4b0 	.word	0x2400e4b0
 8002c04:	9017702c 	.word	0x9017702c
 8002c08:	90177000 	.word	0x90177000
 8002c0c:	90177060 	.word	0x90177060

08002c10 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8002c10:	4b04      	ldr	r3, [pc, #16]	; (8002c24 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8002c18:	4b03      	ldr	r3, [pc, #12]	; (8002c28 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
}
 8002c1c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	24004ad0 	.word	0x24004ad0
 8002c28:	24004acc 	.word	0x24004acc

08002c2c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8002c2c:	200b      	movs	r0, #11
 8002c2e:	4770      	bx	lr

08002c30 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8002c30:	4800      	ldr	r0, [pc, #0]	; (8002c34 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8002c32:	4770      	bx	lr
 8002c34:	24004ad8 	.word	0x24004ad8

08002c38 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 3:
        touchgfx_fonts[3] = &(getFont_verdana_20_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8002c38:	b510      	push	{r4, lr}
};
 8002c3a:	4c07      	ldr	r4, [pc, #28]	; (8002c58 <_GLOBAL__sub_I_touchgfx_fonts+0x20>)
    &(getFont_verdana_16_4bpp()),
 8002c3c:	f7ff fe82 	bl	8002944 <_Z23getFont_verdana_16_4bppv>
};
 8002c40:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8002c42:	f7ff fef9 	bl	8002a38 <_Z23getFont_verdana_40_4bppv>
};
 8002c46:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp()),
 8002c48:	f7ff fe40 	bl	80028cc <_Z23getFont_verdana_10_4bppv>
};
 8002c4c:	60a0      	str	r0, [r4, #8]
    &(getFont_verdana_20_4bpp())
 8002c4e:	f7ff feb7 	bl	80029c0 <_Z23getFont_verdana_20_4bppv>
};
 8002c52:	60e0      	str	r0, [r4, #12]
} // namespace TypedTextDatabase
 8002c54:	bd10      	pop	{r4, pc}
 8002c56:	bf00      	nop
 8002c58:	24004ad8 	.word	0x24004ad8

08002c5c <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 8002c5c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002c5e:	4770      	bx	lr

08002c60 <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>:
     * @see setScaleX, setScaleY, getScaleY
     */
    virtual int getScaleX() const
    {
        return xScale;
    }
 8002c60:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8002c62:	4770      	bx	lr

08002c64 <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>:
     * @see setScaleY, setScaleX, getScaleX
     */
    virtual int getScaleY() const
    {
        return yScale;
    }
 8002c64:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002c66:	4770      	bx	lr

08002c68 <_ZN8touchgfx17AbstractDataGraph8setAlphaEh>:
     *
     * @note All graph elements have to take this alpha into consideration.
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8002c68:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    }
 8002c6c:	4770      	bx	lr

08002c6e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>:
     * @param  min The minimum x value.
     * @param  max The maximum x value.
     *
     * @note The graph as well as the area above and below are automatically redrawn (invalidated).
     */
    virtual void setGraphRangeX(int min, int max)
 8002c6e:	b410      	push	{r4}
    {
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8002c70:	6803      	ldr	r3, [r0, #0]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int int2scaledX(int i) const
    {
        return int2scaled(i, xScale);
 8002c72:	6b04      	ldr	r4, [r0, #48]	; 0x30
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8002c74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002c78:	4362      	muls	r2, r4
 8002c7a:	4361      	muls	r1, r4
    }
 8002c7c:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8002c80:	4718      	bx	r3

08002c82 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff>:
     *
     * @return The product of the two numbers, rounded to nearest integer value.
     */
    FORCE_INLINE_FUNCTION static int float2scaled(float f, int scale)
    {
        const float fs = f * (float)scale;
 8002c82:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8002c86:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8002c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8002c8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
        const float fs = f * (float)scale;
 8002c90:	ee20 0a27 	vmul.f32	s0, s0, s15
        if (fs >= 0)
 8002c94:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c9c:	db17      	blt.n	8002cce <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x4c>
        {
            return (int)(fs + 0.5f);
 8002c9e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ca2:	ee30 0a07 	vadd.f32	s0, s0, s14
 8002ca6:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8002caa:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 8002cae:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 8002cb2:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8002cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cba:	db1c      	blt.n	8002cf6 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x74>
            return (int)(fs + 0.5f);
 8002cbc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002cc0:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8002cc4:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8002cc8:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8002ccc:	4718      	bx	r3
        }
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8002cce:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8002cd2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002cd6:	ee17 2a10 	vmov	r2, s14
 8002cda:	1e51      	subs	r1, r2, #1
 8002cdc:	ee30 0a66 	vsub.f32	s0, s0, s13
 8002ce0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8002ce4:	ee30 0a26 	vadd.f32	s0, s0, s13
 8002ce8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002cec:	ee10 2a10 	vmov	r2, s0
 8002cf0:	440a      	add	r2, r1
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	e7db      	b.n	8002cae <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x2c>
 8002cf6:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8002cfa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cfe:	ee17 2a90 	vmov	r2, s15
 8002d02:	3a01      	subs	r2, #1
 8002d04:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8002d08:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002d0c:	ee70 0a87 	vadd.f32	s1, s1, s14
 8002d10:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8002d14:	ee10 ca90 	vmov	ip, s1
 8002d18:	4494      	add	ip, r2
 8002d1a:	4662      	mov	r2, ip
 8002d1c:	e7d6      	b.n	8002ccc <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x4a>

08002d1e <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi>:
    virtual void setGraphRangeXAuto(bool showYaxis = true, int margin = 0)
 8002d1e:	b410      	push	{r4}
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8002d20:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 8002d22:	6b04      	ldr	r4, [r0, #48]	; 0x30
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8002d24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d28:	4362      	muls	r2, r4
    }
 8002d2a:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8002d2e:	4718      	bx	r3

08002d30 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf>:
        const float fs = f * (float)scale;
 8002d30:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8002d34:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8002d36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8002d3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
        const float fs = f * (float)scale;
 8002d3e:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 8002d42:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d4a:	db08      	blt.n	8002d5e <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x2e>
            return (int)(fs + 0.5f);
 8002d4c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002d50:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002d54:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002d58:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8002d5c:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8002d5e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002d62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d66:	ee17 2a90 	vmov	r2, s15
 8002d6a:	3a01      	subs	r2, #1
 8002d6c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002d70:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002d74:	ee30 0a07 	vadd.f32	s0, s0, s14
 8002d78:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002d7c:	ee10 ca10 	vmov	ip, s0
 8002d80:	4494      	add	ip, r2
 8002d82:	4662      	mov	r2, ip
 8002d84:	e7ea      	b.n	8002d5c <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x2c>

08002d86 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>:
    virtual void setGraphRangeY(int min, int max)
 8002d86:	b410      	push	{r4}
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8002d88:	6803      	ldr	r3, [r0, #0]
        return int2scaled(i, yScale);
 8002d8a:	6b44      	ldr	r4, [r0, #52]	; 0x34
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8002d8c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002d90:	4362      	muls	r2, r4
 8002d92:	4361      	muls	r1, r4
    }
 8002d94:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8002d98:	4718      	bx	r3

08002d9a <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff>:
        const float fs = f * (float)scale;
 8002d9a:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8002d9e:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8002da0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8002da4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
        const float fs = f * (float)scale;
 8002da8:	ee20 0a27 	vmul.f32	s0, s0, s15
        if (fs >= 0)
 8002dac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db4:	db17      	blt.n	8002de6 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x4c>
            return (int)(fs + 0.5f);
 8002db6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002dba:	ee30 0a07 	vadd.f32	s0, s0, s14
 8002dbe:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8002dc2:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 8002dc6:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 8002dca:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8002dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd2:	db1c      	blt.n	8002e0e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x74>
            return (int)(fs + 0.5f);
 8002dd4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002dd8:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8002ddc:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8002de0:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8002de4:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8002de6:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8002dea:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002dee:	ee17 2a10 	vmov	r2, s14
 8002df2:	1e51      	subs	r1, r2, #1
 8002df4:	ee30 0a66 	vsub.f32	s0, s0, s13
 8002df8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8002dfc:	ee30 0a26 	vadd.f32	s0, s0, s13
 8002e00:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002e04:	ee10 2a10 	vmov	r2, s0
 8002e08:	440a      	add	r2, r1
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	e7db      	b.n	8002dc6 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x2c>
 8002e0e:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8002e12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e16:	ee17 2a90 	vmov	r2, s15
 8002e1a:	3a01      	subs	r2, #1
 8002e1c:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8002e20:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002e24:	ee70 0a87 	vadd.f32	s1, s1, s14
 8002e28:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8002e2c:	ee10 ca90 	vmov	ip, s1
 8002e30:	4494      	add	ip, r2
 8002e32:	4662      	mov	r2, ip
 8002e34:	e7d6      	b.n	8002de4 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x4a>

08002e36 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbi>:
    virtual void setGraphRangeYAuto(bool showXaxis = true, int margin = 0)
 8002e36:	b410      	push	{r4}
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8002e38:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 8002e3a:	6b44      	ldr	r4, [r0, #52]	; 0x34
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8002e3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002e40:	4362      	muls	r2, r4
    }
 8002e42:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8002e46:	4718      	bx	r3

08002e48 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf>:
        const float fs = f * (float)scale;
 8002e48:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8002e4c:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8002e4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8002e52:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
        const float fs = f * (float)scale;
 8002e56:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 8002e5a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e62:	db08      	blt.n	8002e76 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x2e>
            return (int)(fs + 0.5f);
 8002e64:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002e68:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002e6c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002e70:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8002e74:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8002e76:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002e7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e7e:	ee17 2a90 	vmov	r2, s15
 8002e82:	3a01      	subs	r2, #1
 8002e84:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002e88:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002e8c:	ee30 0a07 	vadd.f32	s0, s0, s14
 8002e90:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002e94:	ee10 ca10 	vmov	ip, s0
 8002e98:	4494      	add	ip, r2
 8002e9a:	4662      	mov	r2, ip
 8002e9c:	e7ea      	b.n	8002e74 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x2c>

08002e9e <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>:
        return scaled2intX(graphRangeMinX);
 8002e9e:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int scaled2intX(int i) const
    {
        return scaled2int(i, xScale);
 8002ea2:	6b02      	ldr	r2, [r0, #48]	; 0x30
        if (i >= 0)
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	db07      	blt.n	8002eb8 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8002ea8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002eac:	fb93 f0f2 	sdiv	r0, r3, r2
 8002eb0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002eb4:	1040      	asrs	r0, r0, #1
 8002eb6:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8002eb8:	f06f 0001 	mvn.w	r0, #1
 8002ebc:	fb00 2003 	mla	r0, r0, r3, r2
 8002ec0:	3801      	subs	r0, #1
 8002ec2:	fb90 f0f2 	sdiv	r0, r0, r2
 8002ec6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002eca:	1040      	asrs	r0, r0, #1
 8002ecc:	4240      	negs	r0, r0
    }
 8002ece:	4770      	bx	lr

08002ed0 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMinAsFloatEv>:
     *
     * @return The number divided by the scale.
     */
    FORCE_INLINE_FUNCTION static float scaled2float(int i, int scale)
    {
        return (float)i / (float)scale;
 8002ed0:	edd0 7a4b 	vldr	s15, [r0, #300]	; 0x12c
 8002ed4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002ed8:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8002edc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8002ee0:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8002ee4:	4770      	bx	lr

08002ee6 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMinScaledEv>:
    }
 8002ee6:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
 8002eea:	4770      	bx	lr

08002eec <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>:
        return scaled2intX(graphRangeMaxX);
 8002eec:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
        return scaled2int(i, xScale);
 8002ef0:	6b02      	ldr	r2, [r0, #48]	; 0x30
        if (i >= 0)
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	db07      	blt.n	8002f06 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8002ef6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002efa:	fb93 f0f2 	sdiv	r0, r3, r2
 8002efe:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002f02:	1040      	asrs	r0, r0, #1
 8002f04:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8002f06:	f06f 0001 	mvn.w	r0, #1
 8002f0a:	fb00 2003 	mla	r0, r0, r3, r2
 8002f0e:	3801      	subs	r0, #1
 8002f10:	fb90 f0f2 	sdiv	r0, r0, r2
 8002f14:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002f18:	1040      	asrs	r0, r0, #1
 8002f1a:	4240      	negs	r0, r0
    }
 8002f1c:	4770      	bx	lr

08002f1e <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMaxAsFloatEv>:
        return (float)i / (float)scale;
 8002f1e:	edd0 7a4c 	vldr	s15, [r0, #304]	; 0x130
 8002f22:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002f26:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8002f2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8002f2e:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8002f32:	4770      	bx	lr

08002f34 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMaxScaledEv>:
    }
 8002f34:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
 8002f38:	4770      	bx	lr

08002f3a <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>:
        return scaled2intY(graphRangeMinY);
 8002f3a:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
        return scaled2int(i, yScale);
 8002f3e:	6b42      	ldr	r2, [r0, #52]	; 0x34
        if (i >= 0)
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	db07      	blt.n	8002f54 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8002f44:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002f48:	fb93 f0f2 	sdiv	r0, r3, r2
 8002f4c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002f50:	1040      	asrs	r0, r0, #1
 8002f52:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8002f54:	f06f 0001 	mvn.w	r0, #1
 8002f58:	fb00 2003 	mla	r0, r0, r3, r2
 8002f5c:	3801      	subs	r0, #1
 8002f5e:	fb90 f0f2 	sdiv	r0, r0, r2
 8002f62:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002f66:	1040      	asrs	r0, r0, #1
 8002f68:	4240      	negs	r0, r0
    }
 8002f6a:	4770      	bx	lr

08002f6c <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMinAsFloatEv>:
        return (float)i / (float)scale;
 8002f6c:	edd0 7a4d 	vldr	s15, [r0, #308]	; 0x134
 8002f70:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002f74:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
 8002f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8002f7c:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8002f80:	4770      	bx	lr

08002f82 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMinScaledEv>:
    }
 8002f82:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
 8002f86:	4770      	bx	lr

08002f88 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>:
        return scaled2intY(graphRangeMaxY);
 8002f88:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
        return scaled2int(i, yScale);
 8002f8c:	6b42      	ldr	r2, [r0, #52]	; 0x34
        if (i >= 0)
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	db07      	blt.n	8002fa2 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8002f92:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002f96:	fb93 f0f2 	sdiv	r0, r3, r2
 8002f9a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002f9e:	1040      	asrs	r0, r0, #1
 8002fa0:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8002fa2:	f06f 0001 	mvn.w	r0, #1
 8002fa6:	fb00 2003 	mla	r0, r0, r3, r2
 8002faa:	3801      	subs	r0, #1
 8002fac:	fb90 f0f2 	sdiv	r0, r0, r2
 8002fb0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002fb4:	1040      	asrs	r0, r0, #1
 8002fb6:	4240      	negs	r0, r0
    }
 8002fb8:	4770      	bx	lr

08002fba <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMaxAsFloatEv>:
        return (float)i / (float)scale;
 8002fba:	edd0 7a4e 	vldr	s15, [r0, #312]	; 0x138
 8002fbe:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002fc2:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
 8002fc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8002fca:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8002fce:	4770      	bx	lr

08002fd0 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMaxScaledEv>:
    }
 8002fd0:	f8d0 0138 	ldr.w	r0, [r0, #312]	; 0x138
 8002fd4:	4770      	bx	lr

08002fd6 <_ZNK8touchgfx15StaticDataGraph12indexToXAxisEii>:
    virtual int16_t deleteIndex(int index);

    virtual int indexToXAxis(const int /*valueScaled*/, const int labelScaled) const
    {
        return labelScaled;
    }
 8002fd6:	4610      	mov	r0, r2
 8002fd8:	4770      	bx	lr

08002fda <_ZNK8touchgfx15StaticDataGraph16indexToScreenXQ5Es>:

    virtual bool xScreenRangeToIndexRange(int16_t xMin, int16_t xMax, int16_t& indexMin, int16_t& indexMax) const;

    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
    {
        return valueToScreenXQ5(xValues[index]);
 8002fda:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
 8002fde:	6803      	ldr	r3, [r0, #0]
 8002fe0:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8002fe4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002fe8:	4718      	bx	r3

08002fea <_ZNK8touchgfx15StaticDataGraph16indexToScreenYQ5Es>:
    }

    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
    {
        return valueToScreenYQ5(yValues[index]);
 8002fea:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
 8002fee:	6803      	ldr	r3, [r0, #0]
 8002ff0:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8002ff4:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8002ff8:	4718      	bx	r3

08002ffa <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>:
     *
     * @see getColor
     */
    virtual void setColor(colortype newColor)
    {
        color = newColor;
 8002ffa:	62c1      	str	r1, [r0, #44]	; 0x2c
    }
 8002ffc:	4770      	bx	lr

08002ffe <_ZNK8touchgfx25AbstractGraphElementNoCWR8getColorEv>:
     * @see setColor
     */
    virtual colortype getColor() const
    {
        return color;
    }
 8002ffe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8003000:	4770      	bx	lr

08003002 <_ZNK8touchgfx25AbstractGraphElementNoCWR16drawCanvasWidgetERKNS_4RectE>:

    virtual bool drawCanvasWidget(const Rect&) const
    {
        return true;
    }
 8003002:	2001      	movs	r0, #1
 8003004:	4770      	bx	lr

08003006 <_ZN8touchgfx25AbstractGraphElementNoCWR10setPainterERNS_15AbstractPainterE>:
    void normalizeRect(Rect& r) const;

private:
    virtual void setPainter(AbstractPainter& /*painter*/)
    {
    }
 8003006:	4770      	bx	lr

08003008 <_ZN8touchgfx20GraphElementGridBase22invalidateGraphPointAtEs>:
        return lineWidth;
    }

    virtual void invalidateGraphPointAt(int16_t)
    {
    }
 8003008:	4770      	bx	lr

0800300a <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
     *
     * @return The correctly scaled major interval.
     */
    virtual int getCorrectlyScaledMajorInterval(const AbstractDataGraph* graph) const
    {
        return majorGrid == 0 ? 0 : majorGrid->getCorrectlyScaledGridInterval(graph);
 800300a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800300c:	b118      	cbz	r0, 8003016 <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0xc>
 800300e:	6803      	ldr	r3, [r0, #0]
 8003010:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003014:	4718      	bx	r3
    }
 8003016:	4770      	bx	lr

08003018 <_ZNK8touchgfx17GraphElementGridX13enclosingAreaEPKNS_17AbstractDataGraphE>:
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8003018:	f8b2 111a 	ldrh.w	r1, [r2, #282]	; 0x11a
    {
        return convertToGraphScaleX(graph, gridInterval, dataScale);
    }

protected:
    virtual Rect enclosingArea(const AbstractDataGraph* graph) const
 800301c:	b530      	push	{r4, r5, lr}
        return topPadding;
 800301e:	f9b2 4114 	ldrsh.w	r4, [r2, #276]	; 0x114
        return rect.width;
 8003022:	f9b2 5040 	ldrsh.w	r5, [r2, #64]	; 0x40
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8003026:	4421      	add	r1, r4
 8003028:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800302c:	8044      	strh	r4, [r0, #2]
 800302e:	1a52      	subs	r2, r2, r1
 8003030:	2100      	movs	r1, #0
 8003032:	8085      	strh	r5, [r0, #4]
 8003034:	8001      	strh	r1, [r0, #0]
 8003036:	80c2      	strh	r2, [r0, #6]
    {
        return Rect(0, graph->getGraphAreaPaddingTop(), graph->getGraphAreaWidthIncludingPadding(), graph->getGraphAreaHeight());
    }
 8003038:	bd30      	pop	{r4, r5, pc}

0800303a <_ZNK8touchgfx17GraphElementGridX8lineRectEssss>:

    virtual Rect lineRect(int16_t start, int16_t length, int16_t pos, int16_t width) const
 800303a:	b510      	push	{r4, lr}
 800303c:	8042      	strh	r2, [r0, #2]
 800303e:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 8003042:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8003046:	8004      	strh	r4, [r0, #0]
 8003048:	8082      	strh	r2, [r0, #4]
 800304a:	80c3      	strh	r3, [r0, #6]
    {
        return Rect(pos, start, width, length);
    }
 800304c:	bd10      	pop	{r4, pc}

0800304e <_ZNK8touchgfx17GraphElementGridX22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeXMinScaled();
 800304e:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
 8003050:	4608      	mov	r0, r1
        return graph->getGraphRangeXMinScaled();
 8003052:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003056:	4718      	bx	r3

08003058 <_ZNK8touchgfx17GraphElementGridX22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeXMaxScaled();
 8003058:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
 800305a:	4608      	mov	r0, r1
        return graph->getGraphRangeXMaxScaled();
 800305c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003060:	4718      	bx	r3

08003062 <_ZNK8touchgfx17GraphElementGridX17getGraphAreaStartEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphAreaStart(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingTop();
    }
 8003062:	f9b1 0114 	ldrsh.w	r0, [r1, #276]	; 0x114
 8003066:	4770      	bx	lr

08003068 <_ZNK8touchgfx17GraphElementGridX18getGraphAreaLengthEPKNS_17AbstractDataGraphE>:
 8003068:	f8b1 0114 	ldrh.w	r0, [r1, #276]	; 0x114
 800306c:	f8b1 311a 	ldrh.w	r3, [r1, #282]	; 0x11a
 8003070:	4403      	add	r3, r0
 8003072:	f8b1 0042 	ldrh.w	r0, [r1, #66]	; 0x42
 8003076:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaLength(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaHeight();
    }
 8003078:	b200      	sxth	r0, r0
 800307a:	4770      	bx	lr

0800307c <_ZNK8touchgfx17GraphElementGridX20getGraphAreaStartPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStartPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingLeft();
    }
 800307c:	f9b1 0116 	ldrsh.w	r0, [r1, #278]	; 0x116
 8003080:	4770      	bx	lr

08003082 <_ZNK8touchgfx17GraphElementGridX18getGraphAreaEndPosEPKNS_17AbstractDataGraphE>:
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8003082:	f8b1 0116 	ldrh.w	r0, [r1, #278]	; 0x116
 8003086:	f8b1 3118 	ldrh.w	r3, [r1, #280]	; 0x118
 800308a:	4403      	add	r3, r0
 800308c:	f8b1 0040 	ldrh.w	r0, [r1, #64]	; 0x40
 8003090:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaEndPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaWidth();
    }
 8003092:	b200      	sxth	r0, r0
 8003094:	4770      	bx	lr

08003096 <_ZNK8touchgfx17GraphElementGridX15valueToScreenQ5EPKNS_17AbstractDataGraphEi>:
        return graph->valueToScreenXQ5(x);
 8003096:	680b      	ldr	r3, [r1, #0]

    virtual CWRUtil::Q5 valueToScreenQ5(const AbstractDataGraph* graph, int value) const
 8003098:	4608      	mov	r0, r1
        return graph->valueToScreenXQ5(x);
 800309a:	4611      	mov	r1, r2
 800309c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80030a0:	4718      	bx	r3

080030a2 <_ZNK8touchgfx17GraphElementGridY13enclosingAreaEPKNS_17AbstractDataGraphE>:
 80030a2:	f8b2 1118 	ldrh.w	r1, [r2, #280]	; 0x118
    {
        return convertToGraphScaleY(graph, gridInterval, dataScale);
    }

protected:
    virtual Rect enclosingArea(const AbstractDataGraph* graph) const
 80030a6:	b530      	push	{r4, r5, lr}
        return leftPadding;
 80030a8:	f9b2 5116 	ldrsh.w	r5, [r2, #278]	; 0x116
        return graphArea.getWidth() - (leftPadding + rightPadding);
 80030ac:	186c      	adds	r4, r5, r1
 80030ae:	f8b2 1040 	ldrh.w	r1, [r2, #64]	; 0x40
        return rect.height;
 80030b2:	f9b2 2042 	ldrsh.w	r2, [r2, #66]	; 0x42
 80030b6:	1b09      	subs	r1, r1, r4
 80030b8:	2400      	movs	r4, #0
 80030ba:	8005      	strh	r5, [r0, #0]
 80030bc:	8044      	strh	r4, [r0, #2]
 80030be:	8081      	strh	r1, [r0, #4]
 80030c0:	80c2      	strh	r2, [r0, #6]
    {
        return Rect(graph->getGraphAreaPaddingLeft(), 0, graph->getGraphAreaWidth(), graph->getGraphAreaHeightIncludingPadding());
    }
 80030c2:	bd30      	pop	{r4, r5, pc}

080030c4 <_ZNK8touchgfx17GraphElementGridY8lineRectEssss>:
 80030c4:	8002      	strh	r2, [r0, #0]
 80030c6:	8083      	strh	r3, [r0, #4]
 80030c8:	f9bd 2000 	ldrsh.w	r2, [sp]
 80030cc:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80030d0:	8042      	strh	r2, [r0, #2]
 80030d2:	80c3      	strh	r3, [r0, #6]

    virtual Rect lineRect(int16_t start, int16_t length, int16_t pos, int16_t width) const
    {
        return Rect(start, pos, length, width);
    }
 80030d4:	4770      	bx	lr

080030d6 <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeYMinScaled();
 80030d6:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
 80030d8:	4608      	mov	r0, r1
        return graph->getGraphRangeYMinScaled();
 80030da:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80030de:	4718      	bx	r3

080030e0 <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeYMaxScaled();
 80030e0:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
 80030e2:	4608      	mov	r0, r1
        return graph->getGraphRangeYMaxScaled();
 80030e4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80030e8:	4718      	bx	r3

080030ea <_ZNK8touchgfx17GraphElementGridY17getGraphAreaStartEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphAreaStart(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingLeft();
    }
 80030ea:	f9b1 0116 	ldrsh.w	r0, [r1, #278]	; 0x116
 80030ee:	4770      	bx	lr

080030f0 <_ZNK8touchgfx17GraphElementGridY18getGraphAreaLengthEPKNS_17AbstractDataGraphE>:
 80030f0:	f8b1 0116 	ldrh.w	r0, [r1, #278]	; 0x116
 80030f4:	f8b1 3118 	ldrh.w	r3, [r1, #280]	; 0x118
 80030f8:	4403      	add	r3, r0
 80030fa:	f8b1 0040 	ldrh.w	r0, [r1, #64]	; 0x40
 80030fe:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaLength(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaWidth();
    }
 8003100:	b200      	sxth	r0, r0
 8003102:	4770      	bx	lr

08003104 <_ZNK8touchgfx17GraphElementGridY20getGraphAreaStartPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStartPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingTop();
    }
 8003104:	f9b1 0114 	ldrsh.w	r0, [r1, #276]	; 0x114
 8003108:	4770      	bx	lr

0800310a <_ZNK8touchgfx17GraphElementGridY18getGraphAreaEndPosEPKNS_17AbstractDataGraphE>:
        return graphArea.getHeight() - (topPadding + bottomPadding);
 800310a:	f8b1 0114 	ldrh.w	r0, [r1, #276]	; 0x114
 800310e:	f8b1 311a 	ldrh.w	r3, [r1, #282]	; 0x11a
 8003112:	4403      	add	r3, r0
 8003114:	f8b1 0042 	ldrh.w	r0, [r1, #66]	; 0x42
 8003118:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaEndPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaHeight();
    }
 800311a:	b200      	sxth	r0, r0
 800311c:	4770      	bx	lr

0800311e <_ZNK8touchgfx17GraphElementGridY15valueToScreenQ5EPKNS_17AbstractDataGraphEi>:
        return graph->valueToScreenYQ5(y);
 800311e:	680b      	ldr	r3, [r1, #0]

    virtual CWRUtil::Q5 valueToScreenQ5(const AbstractDataGraph* graph, int value) const
 8003120:	4608      	mov	r0, r1
        return graph->valueToScreenYQ5(y);
 8003122:	4611      	mov	r1, r2
 8003124:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8003128:	4718      	bx	r3

0800312a <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 800312a:	b530      	push	{r4, r5, lr}
 800312c:	b085      	sub	sp, #20
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 800312e:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 8003130:	4604      	mov	r4, r0
        rect.width = width;
 8003132:	8101      	strh	r1, [r0, #8]
        boundingArea = calculateBoundingArea();
 8003134:	466d      	mov	r5, sp
 8003136:	4601      	mov	r1, r0
 8003138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800313c:	343c      	adds	r4, #60	; 0x3c
 800313e:	4628      	mov	r0, r5
 8003140:	4798      	blx	r3
 8003142:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003146:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 800314a:	b005      	add	sp, #20
 800314c:	bd30      	pop	{r4, r5, pc}

0800314e <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 800314e:	b530      	push	{r4, r5, lr}
 8003150:	b085      	sub	sp, #20
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 8003152:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 8003154:	4604      	mov	r4, r0
        rect.height = height;
 8003156:	8141      	strh	r1, [r0, #10]
        boundingArea = calculateBoundingArea();
 8003158:	466d      	mov	r5, sp
 800315a:	4601      	mov	r1, r0
 800315c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003160:	343c      	adds	r4, #60	; 0x3c
 8003162:	4628      	mov	r0, r5
 8003164:	4798      	blx	r3
 8003166:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800316a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 800316e:	b005      	add	sp, #20
 8003170:	bd30      	pop	{r4, r5, pc}

08003172 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 8003172:	2200      	movs	r2, #0
 8003174:	8002      	strh	r2, [r0, #0]
 8003176:	8042      	strh	r2, [r0, #2]
 8003178:	8082      	strh	r2, [r0, #4]
 800317a:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 800317c:	4770      	bx	lr

0800317e <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 800317e:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    }
 8003182:	4770      	bx	lr

08003184 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
    {
        setX(x);
 8003184:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8003186:	b570      	push	{r4, r5, r6, lr}
 8003188:	4604      	mov	r4, r0
        setX(x);
 800318a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800318c:	4615      	mov	r5, r2
        setX(x);
 800318e:	4798      	blx	r3
        setBaselineY(baselineY);
 8003190:	6823      	ldr	r3, [r4, #0]
 8003192:	4620      	mov	r0, r4
 8003194:	4629      	mov	r1, r5
 8003196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    }
 8003198:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 800319c:	4718      	bx	r3

0800319e <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 800319e:	2000      	movs	r0, #0
 80031a0:	4770      	bx	lr

080031a2 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 80031a2:	2200      	movs	r2, #0
 80031a4:	f04f 31ff 	mov.w	r1, #4294967295
              text(0)
 80031a8:	6082      	str	r2, [r0, #8]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 80031aa:	e9c0 2100 	strd	r2, r1, [r0]

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
    {
        return TextArea::BoundingArea();
    }
 80031ae:	4770      	bx	lr

080031b0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 80031b0:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80031b2:	4770      	bx	lr

080031b4 <_ZN15customGraphBase13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE>:
    virtual void initialize();

    /*
     * Virtual Action Handlers
     */
    virtual void graph1Dragged(AbstractDataGraph::GraphDragEvent value)
 80031b4:	b082      	sub	sp, #8
 80031b6:	ab02      	add	r3, sp, #8
 80031b8:	e903 0006 	stmdb	r3, {r1, r2}
    {
        // Override and implement this function in customGraph
    }
 80031bc:	b002      	add	sp, #8
 80031be:	4770      	bx	lr

080031c0 <_ZN15customGraphBase13graph1clickedEN8touchgfx17AbstractDataGraph15GraphClickEventE>:
    virtual void graph1clicked(AbstractDataGraph::GraphClickEvent value)
 80031c0:	b082      	sub	sp, #8
 80031c2:	ab02      	add	r3, sp, #8
 80031c4:	e903 0006 	stmdb	r3, {r1, r2}
    {
        // Override and implement this function in customGraph
    }
 80031c8:	b002      	add	sp, #8
 80031ca:	4770      	bx	lr

080031cc <_ZN15customGraphBaseD1Ev>:
}

customGraphBase::~customGraphBase()
{

}
 80031cc:	4770      	bx	lr

080031ce <_ZN15customGraphBase10initializeEv>:

void customGraphBase::initialize()
{

}
 80031ce:	4770      	bx	lr

080031d0 <_ZN8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 80031d0:	4770      	bx	lr

080031d2 <_ZN8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvED1Ev>:
 80031d2:	4770      	bx	lr

080031d4 <_ZN8touchgfx5GraphILs10EED1Ev>:
 * The Graph will show a graph of data points, drawn from lower x valut to highest x value.
 *
 * @tparam CAPACITY The maximum number of data points on the graph.
 */
template <int16_t CAPACITY>
class Graph : public GraphData
 80031d4:	4770      	bx	lr

080031d6 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 80031d6:	4770      	bx	lr

080031d8 <_ZN8touchgfx17GraphElementGridYD1Ev>:
class GraphElementGridY : public GraphElementGridBase
 80031d8:	4770      	bx	lr

080031da <_ZN8touchgfx17GraphElementGridXD1Ev>:
class GraphElementGridX : public GraphElementGridBase
 80031da:	4770      	bx	lr

080031dc <_ZN8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvE7executeES4_S7_>:
    virtual void execute(T1 t1, T2 t2)
 80031dc:	b470      	push	{r4, r5, r6}
        (pobject->*pmemfun)(t1, t2);
 80031de:	6845      	ldr	r5, [r0, #4]
    virtual void execute(T1 t1, T2 t2)
 80031e0:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1, t2);
 80031e2:	68c4      	ldr	r4, [r0, #12]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	1066      	asrs	r6, r4, #1
 80031e8:	eb05 0064 	add.w	r0, r5, r4, asr #1
 80031ec:	07e4      	lsls	r4, r4, #31
 80031ee:	bf44      	itt	mi
 80031f0:	59ac      	ldrmi	r4, [r5, r6]
 80031f2:	58e3      	ldrmi	r3, [r4, r3]
    }
 80031f4:	bc70      	pop	{r4, r5, r6}
        (pobject->*pmemfun)(t1, t2);
 80031f6:	4718      	bx	r3

080031f8 <_ZNK8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 80031f8:	6843      	ldr	r3, [r0, #4]
 80031fa:	b12b      	cbz	r3, 8003208 <_ZNK8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvE7isValidEv+0x10>
 80031fc:	6883      	ldr	r3, [r0, #8]
 80031fe:	b92b      	cbnz	r3, 800320c <_ZNK8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvE7isValidEv+0x14>
 8003200:	68c0      	ldr	r0, [r0, #12]
 8003202:	f000 0001 	and.w	r0, r0, #1
 8003206:	4770      	bx	lr
 8003208:	4618      	mov	r0, r3
 800320a:	4770      	bx	lr
 800320c:	2001      	movs	r0, #1
    }
 800320e:	4770      	bx	lr

08003210 <_ZN8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvE7executeES4_S7_>:
    virtual void execute(T1 t1, T2 t2)
 8003210:	b470      	push	{r4, r5, r6}
        (pobject->*pmemfun)(t1, t2);
 8003212:	6845      	ldr	r5, [r0, #4]
    virtual void execute(T1 t1, T2 t2)
 8003214:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1, t2);
 8003216:	68c4      	ldr	r4, [r0, #12]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	1066      	asrs	r6, r4, #1
 800321c:	eb05 0064 	add.w	r0, r5, r4, asr #1
 8003220:	07e4      	lsls	r4, r4, #31
 8003222:	bf44      	itt	mi
 8003224:	59ac      	ldrmi	r4, [r5, r6]
 8003226:	58e3      	ldrmi	r3, [r4, r3]
    }
 8003228:	bc70      	pop	{r4, r5, r6}
        (pobject->*pmemfun)(t1, t2);
 800322a:	4718      	bx	r3

0800322c <_ZNK8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 800322c:	6843      	ldr	r3, [r0, #4]
 800322e:	b12b      	cbz	r3, 800323c <_ZNK8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvE7isValidEv+0x10>
 8003230:	6883      	ldr	r3, [r0, #8]
 8003232:	b92b      	cbnz	r3, 8003240 <_ZNK8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvE7isValidEv+0x14>
 8003234:	68c0      	ldr	r0, [r0, #12]
 8003236:	f000 0001 	and.w	r0, r0, #1
 800323a:	4770      	bx	lr
 800323c:	4618      	mov	r0, r3
 800323e:	4770      	bx	lr
 8003240:	2001      	movs	r0, #1
    }
 8003242:	4770      	bx	lr

08003244 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8003244:	b510      	push	{r4, lr}
 8003246:	4604      	mov	r4, r0
 8003248:	214c      	movs	r1, #76	; 0x4c
 800324a:	f01a faf8 	bl	801d83e <_ZdlPvj>
 800324e:	4620      	mov	r0, r4
 8003250:	bd10      	pop	{r4, pc}

08003252 <_ZN8touchgfx17GraphElementGridXD0Ev>:
 8003252:	b510      	push	{r4, lr}
 8003254:	4604      	mov	r4, r0
 8003256:	2140      	movs	r1, #64	; 0x40
 8003258:	f01a faf1 	bl	801d83e <_ZdlPvj>
 800325c:	4620      	mov	r0, r4
 800325e:	bd10      	pop	{r4, pc}

08003260 <_ZN8touchgfx17GraphElementGridYD0Ev>:
class GraphElementGridY : public GraphElementGridBase
 8003260:	b510      	push	{r4, lr}
 8003262:	4604      	mov	r4, r0
 8003264:	2140      	movs	r1, #64	; 0x40
 8003266:	f01a faea 	bl	801d83e <_ZdlPvj>
 800326a:	4620      	mov	r0, r4
 800326c:	bd10      	pop	{r4, pc}

0800326e <_ZN8touchgfx5GraphILs10EED0Ev>:
 800326e:	b510      	push	{r4, lr}
 8003270:	4604      	mov	r4, r0
 8003272:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8003276:	f01a fae2 	bl	801d83e <_ZdlPvj>
 800327a:	4620      	mov	r0, r4
 800327c:	bd10      	pop	{r4, pc}

0800327e <_ZN8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvED0Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 800327e:	b510      	push	{r4, lr}
 8003280:	4604      	mov	r4, r0
 8003282:	2110      	movs	r1, #16
 8003284:	f01a fadb 	bl	801d83e <_ZdlPvj>
 8003288:	4620      	mov	r0, r4
 800328a:	bd10      	pop	{r4, pc}

0800328c <_ZN8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvED0Ev>:
 800328c:	b510      	push	{r4, lr}
 800328e:	4604      	mov	r4, r0
 8003290:	2110      	movs	r1, #16
 8003292:	f01a fad4 	bl	801d83e <_ZdlPvj>
 8003296:	4620      	mov	r0, r4
 8003298:	bd10      	pop	{r4, pc}

0800329a <_ZN15customGraphBaseD0Ev>:
customGraphBase::~customGraphBase()
 800329a:	b510      	push	{r4, lr}
 800329c:	4604      	mov	r4, r0
}
 800329e:	f44f 61a9 	mov.w	r1, #1352	; 0x548
 80032a2:	f01a facc 	bl	801d83e <_ZdlPvj>
 80032a6:	4620      	mov	r0, r4
 80032a8:	bd10      	pop	{r4, pc}

080032aa <_ZNK8touchgfx17GraphElementGridX30getCorrectlyScaledGridIntervalEPKNS_17AbstractDataGraphE>:
    virtual int getCorrectlyScaledGridInterval(const AbstractDataGraph* graph) const
 80032aa:	b513      	push	{r0, r1, r4, lr}
 80032ac:	4603      	mov	r3, r0
 80032ae:	4608      	mov	r0, r1
        return convertToGraphScaleX(graph, gridInterval, dataScale);
 80032b0:	e9d3 140c 	ldrd	r1, r4, [r3, #48]	; 0x30
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 80032b4:	6803      	ldr	r3, [r0, #0]
        return convertToGraphScaleX(graph, gridInterval, dataScale);
 80032b6:	9101      	str	r1, [sp, #4]
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 80032b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032bc:	4798      	blx	r3
 80032be:	9901      	ldr	r1, [sp, #4]
 80032c0:	4602      	mov	r2, r0
 80032c2:	4620      	mov	r0, r4
    }
 80032c4:	b002      	add	sp, #8
 80032c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 80032ca:	f00a be5b 	b.w	800df84 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

080032ce <_ZNK8touchgfx17GraphElementGridY30getCorrectlyScaledGridIntervalEPKNS_17AbstractDataGraphE>:
    virtual int getCorrectlyScaledGridInterval(const AbstractDataGraph* graph) const
 80032ce:	b513      	push	{r0, r1, r4, lr}
 80032d0:	4603      	mov	r3, r0
 80032d2:	4608      	mov	r0, r1
        return convertToGraphScaleY(graph, gridInterval, dataScale);
 80032d4:	e9d3 140c 	ldrd	r1, r4, [r3, #48]	; 0x30
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 80032d8:	6803      	ldr	r3, [r0, #0]
        return convertToGraphScaleY(graph, gridInterval, dataScale);
 80032da:	9101      	str	r1, [sp, #4]
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 80032dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032e0:	4798      	blx	r3
 80032e2:	9901      	ldr	r1, [sp, #4]
 80032e4:	4602      	mov	r2, r0
 80032e6:	4620      	mov	r0, r4
    }
 80032e8:	b002      	add	sp, #8
 80032ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 80032ee:	f00a be49 	b.w	800df84 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

080032f2 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv>:
    virtual void invalidateContent() const
 80032f2:	b508      	push	{r3, lr}
        if (alpha > 0)
 80032f4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80032f8:	b10b      	cbz	r3, 80032fe <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv+0xc>
            Container::invalidateContent();
 80032fa:	f7fe ffb9 	bl	8002270 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 80032fe:	bd08      	pop	{r3, pc}

08003300 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 8003300:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 8003302:	f7fe ffb5 	bl	8002270 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 8003306:	bd08      	pop	{r3, pc}

08003308 <_ZN15customGraphBase27graphDraggedCallbackHandlerERKN8touchgfx17AbstractDataGraphERKNS1_14GraphDragEventE>:

void customGraphBase::graphDraggedCallbackHandler(const touchgfx::AbstractDataGraph& src, const touchgfx::AbstractDataGraph::GraphDragEvent& value)
{
 8003308:	b410      	push	{r4}
    if (&src == &graph1)
 800330a:	f100 0458 	add.w	r4, r0, #88	; 0x58
 800330e:	428c      	cmp	r4, r1
 8003310:	d106      	bne.n	8003320 <_ZN15customGraphBase27graphDraggedCallbackHandlerERKN8touchgfx17AbstractDataGraphERKNS1_14GraphDragEventE+0x18>
    {
        //Interaction1
        //When graph1 dragged call virtual function
        //Call graph1Dragged
        graph1Dragged(value);
 8003312:	6803      	ldr	r3, [r0, #0]
    }
}
 8003314:	f85d 4b04 	ldr.w	r4, [sp], #4
        graph1Dragged(value);
 8003318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800331c:	ca06      	ldmia	r2, {r1, r2}
 800331e:	4718      	bx	r3
}
 8003320:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003324:	4770      	bx	lr

08003326 <_ZN15customGraphBase27graphClickedCallbackHandlerERKN8touchgfx17AbstractDataGraphERKNS1_15GraphClickEventE>:

void customGraphBase::graphClickedCallbackHandler(const touchgfx::AbstractDataGraph& src, const touchgfx::AbstractDataGraph::GraphClickEvent& value)
{
 8003326:	b410      	push	{r4}
    if (&src == &graph1)
 8003328:	f100 0458 	add.w	r4, r0, #88	; 0x58
 800332c:	428c      	cmp	r4, r1
 800332e:	d106      	bne.n	800333e <_ZN15customGraphBase27graphClickedCallbackHandlerERKN8touchgfx17AbstractDataGraphERKNS1_15GraphClickEventE+0x18>
    {
        //Interaction2
        //When graph1 clicked call virtual function
        //Call graph1clicked
        graph1clicked(value);
 8003330:	6803      	ldr	r3, [r0, #0]
    }
}
 8003332:	f85d 4b04 	ldr.w	r4, [sp], #4
        graph1clicked(value);
 8003336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333a:	ca06      	ldmia	r2, {r1, r2}
 800333c:	4718      	bx	r3
}
 800333e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003342:	4770      	bx	lr

08003344 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 8003344:	2900      	cmp	r1, #0
    virtual int indexToDataPointYScaled(int16_t index) const
 8003346:	b508      	push	{r3, lr}
        assert(index >= 0 && index < usedCapacity);
 8003348:	db03      	blt.n	8003352 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs+0xe>
 800334a:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 800334e:	428b      	cmp	r3, r1
 8003350:	dc06      	bgt.n	8003360 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs+0x1c>
 8003352:	4b06      	ldr	r3, [pc, #24]	; (800336c <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs+0x28>)
 8003354:	f240 61f5 	movw	r1, #1781	; 0x6f5
 8003358:	4a05      	ldr	r2, [pc, #20]	; (8003370 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs+0x2c>)
 800335a:	4806      	ldr	r0, [pc, #24]	; (8003374 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs+0x30>)
 800335c:	f01a fa9e 	bl	801d89c <__assert_func>
        return yValues[index];
 8003360:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
    }
 8003364:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003368:	bd08      	pop	{r3, pc}
 800336a:	bf00      	nop
 800336c:	0801f8a4 	.word	0x0801f8a4
 8003370:	0801f8c7 	.word	0x0801f8c7
 8003374:	0801f915 	.word	0x0801f915

08003378 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 8003378:	2900      	cmp	r1, #0
    virtual int indexToDataPointXScaled(int16_t index) const
 800337a:	b508      	push	{r3, lr}
        assert(index >= 0 && index < usedCapacity);
 800337c:	db03      	blt.n	8003386 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs+0xe>
 800337e:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 8003382:	428b      	cmp	r3, r1
 8003384:	dc06      	bgt.n	8003394 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs+0x1c>
 8003386:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs+0x28>)
 8003388:	f240 61e5 	movw	r1, #1765	; 0x6e5
 800338c:	4a05      	ldr	r2, [pc, #20]	; (80033a4 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs+0x2c>)
 800338e:	4806      	ldr	r0, [pc, #24]	; (80033a8 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs+0x30>)
 8003390:	f01a fa84 	bl	801d89c <__assert_func>
        return xValues[index];
 8003394:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    }
 8003398:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800339c:	bd08      	pop	{r3, pc}
 800339e:	bf00      	nop
 80033a0:	0801f8a4 	.word	0x0801f8a4
 80033a4:	0801f980 	.word	0x0801f980
 80033a8:	0801f915 	.word	0x0801f915

080033ac <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80033ac:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 80033ae:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80033b0:	6b5e      	ldr	r6, [r3, #52]	; 0x34
    virtual void setBaselineY(int16_t baselineY)
 80033b2:	4604      	mov	r4, r0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80033b4:	4b11      	ldr	r3, [pc, #68]	; (80033fc <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80033b6:	b28d      	uxth	r5, r1
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	b92b      	cbnz	r3, 80033c8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 80033bc:	4b10      	ldr	r3, [pc, #64]	; (8003400 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 80033be:	216c      	movs	r1, #108	; 0x6c
 80033c0:	4a10      	ldr	r2, [pc, #64]	; (8003404 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80033c2:	4811      	ldr	r0, [pc, #68]	; (8003408 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 80033c4:	f01a fa6a 	bl	801d89c <__assert_func>
        return typedTextId < numberOfTypedTexts;
 80033c8:	4910      	ldr	r1, [pc, #64]	; (800340c <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 80033ca:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80033cc:	8809      	ldrh	r1, [r1, #0]
 80033ce:	4291      	cmp	r1, r2
 80033d0:	d803      	bhi.n	80033da <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 80033d2:	4b0f      	ldr	r3, [pc, #60]	; (8003410 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 80033d4:	216d      	movs	r1, #109	; 0x6d
 80033d6:	4a0b      	ldr	r2, [pc, #44]	; (8003404 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80033d8:	e7f3      	b.n	80033c2 <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 80033da:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80033de:	4b0d      	ldr	r3, [pc, #52]	; (8003414 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80033e6:	6803      	ldr	r3, [r0, #0]
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	4798      	blx	r3
 80033ec:	1a28      	subs	r0, r5, r0
 80033ee:	4633      	mov	r3, r6
 80033f0:	b201      	sxth	r1, r0
 80033f2:	4620      	mov	r0, r4
    }
 80033f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80033f8:	4718      	bx	r3
 80033fa:	bf00      	nop
 80033fc:	2400e4ac 	.word	0x2400e4ac
 8003400:	0801f9ce 	.word	0x0801f9ce
 8003404:	0801fa10 	.word	0x0801fa10
 8003408:	0801fa4b 	.word	0x0801fa4b
 800340c:	2400e4b0 	.word	0x2400e4b0
 8003410:	0801faa0 	.word	0x0801faa0
 8003414:	2400e4b4 	.word	0x2400e4b4

08003418 <_ZN8touchgfx8DrawableC1Ev>:
          visible(true)
 8003418:	4a07      	ldr	r2, [pc, #28]	; (8003438 <_ZN8touchgfx8DrawableC1Ev+0x20>)
 800341a:	6002      	str	r2, [r0, #0]
 800341c:	2200      	movs	r2, #0
 800341e:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8003422:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8003426:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800342a:	e9c0 2207 	strd	r2, r2, [r0, #28]
 800342e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003432:	8482      	strh	r2, [r0, #36]	; 0x24
    }
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	08020990 	.word	0x08020990

0800343c <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800343c:	b570      	push	{r4, r5, r6, lr}
 800343e:	4604      	mov	r4, r0
 8003440:	461d      	mov	r5, r3
 8003442:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 8003446:	f7ff f9b6 	bl	80027b6 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 800344a:	6823      	ldr	r3, [r4, #0]
 800344c:	4629      	mov	r1, r5
 800344e:	4620      	mov	r0, r4
 8003450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003452:	4798      	blx	r3
        setHeight(height);
 8003454:	6823      	ldr	r3, [r4, #0]
 8003456:	4631      	mov	r1, r6
 8003458:	4620      	mov	r0, r4
 800345a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    }
 800345c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 8003460:	4718      	bx	r3

08003462 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>:
     * @param  factor2 The second factor.
     * @param  divisor The divisor.
     *
     * @return factor1 * factor2 / divisor as a Q5
     */
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 8003462:	b537      	push	{r0, r1, r2, r4, r5, lr}
    {
        int32_t remainder;
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 8003464:	ab01      	add	r3, sp, #4
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 8003466:	4615      	mov	r5, r2
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 8003468:	f00f fe47 	bl	80130fa <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
 800346c:	2800      	cmp	r0, #0
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 800346e:	462a      	mov	r2, r5
 8003470:	9901      	ldr	r1, [sp, #4]
 8003472:	ea4f 1440 	mov.w	r4, r0, lsl #5
 8003476:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
 800347a:	db04      	blt.n	8003486 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x24>
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 800347c:	f00f fe5c 	bl	8013138 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
 8003480:	4420      	add	r0, r4
        {
            return toQ5(result) + muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
        }
        return toQ5(result) - muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
    }
 8003482:	b003      	add	sp, #12
 8003484:	bd30      	pop	{r4, r5, pc}
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 8003486:	f00f fe57 	bl	8013138 <_ZN8touchgfx6muldivElll>
            return Q5(v - q5.v);
 800348a:	1a20      	subs	r0, r4, r0
 800348c:	e7f9      	b.n	8003482 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x20>

0800348e <_ZNK8touchgfx17AbstractDataGraph16valueToScreenYQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 800348e:	b570      	push	{r4, r5, r6, lr}
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8003490:	f9b0 4114 	ldrsh.w	r4, [r0, #276]	; 0x114
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 8003494:	460e      	mov	r6, r1
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8003496:	f8b0 511a 	ldrh.w	r5, [r0, #282]	; 0x11a
 800349a:	1963      	adds	r3, r4, r5
 800349c:	f8b0 5042 	ldrh.w	r5, [r0, #66]	; 0x42
 80034a0:	1aed      	subs	r5, r5, r3
        return CWRUtil::toQ5(graphAreaHeight + topPadding - 1) - CWRUtil::muldiv_toQ5(y - graphRangeMinY, graphAreaHeight - 1, graphRangeMaxY - graphRangeMinY);
 80034a2:	b22d      	sxth	r5, r5
 80034a4:	442c      	add	r4, r5
 80034a6:	1e69      	subs	r1, r5, #1
 80034a8:	e9d0 324d 	ldrd	r3, r2, [r0, #308]	; 0x134
 80034ac:	3c01      	subs	r4, #1
 80034ae:	1ad2      	subs	r2, r2, r3
 80034b0:	1af0      	subs	r0, r6, r3
 80034b2:	f7ff ffd6 	bl	8003462 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
    }
 80034b6:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 80034ba:	bd70      	pop	{r4, r5, r6, pc}

080034bc <_ZNK8touchgfx17AbstractDataGraph16valueToScreenXQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
 80034bc:	b538      	push	{r3, r4, r5, lr}
 80034be:	4604      	mov	r4, r0
 80034c0:	4608      	mov	r0, r1
        return graphArea.getWidth() - (leftPadding + rightPadding);
 80034c2:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 80034c6:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
 80034ca:	440b      	add	r3, r1
 80034cc:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 80034d0:	1ac9      	subs	r1, r1, r3
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
 80034d2:	e9d4 524b 	ldrd	r5, r2, [r4, #300]	; 0x12c
 80034d6:	b209      	sxth	r1, r1
 80034d8:	1b52      	subs	r2, r2, r5
 80034da:	1b40      	subs	r0, r0, r5
 80034dc:	3901      	subs	r1, #1
 80034de:	f7ff ffc0 	bl	8003462 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
            return Q5(v + q5.v);
 80034e2:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
    }
 80034e6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80034ea:	bd38      	pop	{r3, r4, r5, pc}

080034ec <_ZN8touchgfx15GraphLabelsBaseC1Ev>:
 * @see GraphLabelsX, GraphLabelsY
 */
class GraphLabelsBase : public AbstractGraphDecoration
{
public:
    GraphLabelsBase()
 80034ec:	b510      	push	{r4, lr}
 80034ee:	4604      	mov	r4, r0
        : CanvasWidget()
 80034f0:	f00a f946 	bl	800d780 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : AbstractGraphDecoration(),
          dataScale(1), labelInterval(0), labelTypedText(TYPED_TEXT_INVALID), labelRotation(TEXT_ROTATE_0), labelDecimals(0), labelDecimalPoint('.'), majorLabel(0)
 80034f4:	4a0a      	ldr	r2, [pc, #40]	; (8003520 <_ZN8touchgfx15GraphLabelsBaseC1Ev+0x34>)
        : color(col)
 80034f6:	2300      	movs	r3, #0
    {
    }
 80034f8:	4620      	mov	r0, r4
          dataScale(1), labelInterval(0), labelTypedText(TYPED_TEXT_INVALID), labelRotation(TEXT_ROTATE_0), labelDecimals(0), labelDecimalPoint('.'), majorLabel(0)
 80034fa:	6022      	str	r2, [r4, #0]
 80034fc:	2201      	movs	r2, #1
 80034fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003500:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003504:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 8003508:	64a3      	str	r3, [r4, #72]	; 0x48
 800350a:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
        : typedTextId(id)
 800350e:	4a05      	ldr	r2, [pc, #20]	; (8003524 <_ZN8touchgfx15GraphLabelsBaseC1Ev+0x38>)
 8003510:	63a2      	str	r2, [r4, #56]	; 0x38
 8003512:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003516:	87a2      	strh	r2, [r4, #60]	; 0x3c
 8003518:	222e      	movs	r2, #46	; 0x2e
 800351a:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
    }
 800351e:	bd10      	pop	{r4, pc}
 8003520:	080207c0 	.word	0x080207c0
 8003524:	0801f264 	.word	0x0801f264

08003528 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
    TextAreaWithOneWildcard()
 8003528:	b510      	push	{r4, lr}
 800352a:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800352c:	2226      	movs	r2, #38	; 0x26
 800352e:	2100      	movs	r1, #0
 8003530:	f01a fa40 	bl	801d9b4 <memset>
class Widget : public Drawable
 8003534:	4620      	mov	r0, r4
 8003536:	f7ff ff6f 	bl	8003418 <_ZN8touchgfx8DrawableC1Ev>
 800353a:	4b0a      	ldr	r3, [pc, #40]	; (8003564 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x3c>)
 800353c:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    }
 8003540:	4620      	mov	r0, r4
 8003542:	62a3      	str	r3, [r4, #40]	; 0x28
 8003544:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003548:	85a3      	strh	r3, [r4, #44]	; 0x2c
 800354a:	2300      	movs	r3, #0
 800354c:	e9c4 320c 	strd	r3, r2, [r4, #48]	; 0x30
        : TextAreaWithWildcardBase(), wc1(0)
 8003550:	4a05      	ldr	r2, [pc, #20]	; (8003568 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x40>)
 8003552:	8723      	strh	r3, [r4, #56]	; 0x38
 8003554:	6022      	str	r2, [r4, #0]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003556:	f04f 32ff 	mov.w	r2, #4294967295
 800355a:	63e3      	str	r3, [r4, #60]	; 0x3c
 800355c:	64a3      	str	r3, [r4, #72]	; 0x48
              text(0)
 800355e:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    }
 8003562:	bd10      	pop	{r4, pc}
 8003564:	0801f264 	.word	0x0801f264
 8003568:	0801fc94 	.word	0x0801fc94

0800356c <_ZN15customGraphBaseC1Ev>:
customGraphBase::customGraphBase() :
 800356c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003570:	4604      	mov	r4, r0
          firstChild(0)
 8003572:	2500      	movs	r5, #0
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 8003574:	2701      	movs	r7, #1
    graphClickedCallback(this, &customGraphBase::graphClickedCallbackHandler)
 8003576:	46a0      	mov	r8, r4
 8003578:	f104 0658 	add.w	r6, r4, #88	; 0x58
 800357c:	f504 7952 	add.w	r9, r4, #840	; 0x348
 8003580:	f504 7b78 	add.w	fp, r4, #992	; 0x3e0
 8003584:	f204 4a2c 	addw	sl, r4, #1068	; 0x42c
customGraphBase::customGraphBase() :
 8003588:	ed2d 8b08 	vpush	{d8-d11}
 800358c:	b08b      	sub	sp, #44	; 0x2c
 800358e:	f7ff ff43 	bl	8003418 <_ZN8touchgfx8DrawableC1Ev>
    graphClickedCallback(this, &customGraphBase::graphClickedCallbackHandler)
 8003592:	4bec      	ldr	r3, [pc, #944]	; (8003944 <_ZN15customGraphBaseC1Ev+0x3d8>)
        : Widget(), alpha(255), color(0)
 8003594:	2226      	movs	r2, #38	; 0x26
 8003596:	4629      	mov	r1, r5
 8003598:	62a5      	str	r5, [r4, #40]	; 0x28
 800359a:	f848 3b2c 	str.w	r3, [r8], #44
 800359e:	4640      	mov	r0, r8
 80035a0:	f01a fa08 	bl	801d9b4 <memset>
 80035a4:	4640      	mov	r0, r8
 80035a6:	f7ff ff37 	bl	8003418 <_ZN8touchgfx8DrawableC1Ev>
 80035aa:	4be7      	ldr	r3, [pc, #924]	; (8003948 <_ZN15customGraphBaseC1Ev+0x3dc>)
        : AbstractDataGraph(capacity), xValues(xvalues), yValues(yvalues)
 80035ac:	210a      	movs	r1, #10
 80035ae:	4630      	mov	r0, r6
 80035b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80035b2:	23ff      	movs	r3, #255	; 0xff
        : color(col)
 80035b4:	6565      	str	r5, [r4, #84]	; 0x54
 80035b6:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
 80035ba:	f00a fc7f 	bl	800debc <_ZN8touchgfx17AbstractDataGraphC1Es>
 80035be:	4be3      	ldr	r3, [pc, #908]	; (800394c <_ZN15customGraphBaseC1Ev+0x3e0>)
        StaticDataGraph::setGraphRangeX(0, capacity - 1);
 80035c0:	2209      	movs	r2, #9
 80035c2:	4629      	mov	r1, r5
        : AbstractDataGraph(capacity), xValues(xvalues), yValues(yvalues)
 80035c4:	65a3      	str	r3, [r4, #88]	; 0x58
{
public:
    Graph()
        : GraphData(CAPACITY, x, y)
 80035c6:	f504 73ce 	add.w	r3, r4, #412	; 0x19c
        StaticDataGraph::setGraphRangeX(0, capacity - 1);
 80035ca:	4630      	mov	r0, r6
        : AbstractDataGraph(capacity), xValues(xvalues), yValues(yvalues)
 80035cc:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
 80035d0:	f504 73e2 	add.w	r3, r4, #452	; 0x1c4
 80035d4:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
        StaticDataGraph::setGraphRangeX(0, capacity - 1);
 80035d8:	f7ff fb49 	bl	8002c6e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
 80035dc:	4bdc      	ldr	r3, [pc, #880]	; (8003950 <_ZN15customGraphBaseC1Ev+0x3e4>)
 80035de:	65a3      	str	r3, [r4, #88]	; 0x58
 80035e0:	f504 73f6 	add.w	r3, r4, #492	; 0x1ec
        : CanvasWidget()
 80035e4:	4618      	mov	r0, r3
 80035e6:	ee09 3a10 	vmov	s18, r3
 80035ea:	f00a f8c9 	bl	800d780 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 80035ee:	230a      	movs	r3, #10
 80035f0:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
 80035f4:	f884 7224 	strb.w	r7, [r4, #548]	; 0x224
 80035f8:	f8c4 5228 	str.w	r5, [r4, #552]	; 0x228
 80035fc:	e9c4 7387 	strd	r7, r3, [r4, #540]	; 0x21c
class GraphElementGridX : public GraphElementGridBase
 8003600:	4bd4      	ldr	r3, [pc, #848]	; (8003954 <_ZN15customGraphBaseC1Ev+0x3e8>)
 8003602:	f8c4 31ec 	str.w	r3, [r4, #492]	; 0x1ec
 8003606:	f504 730b 	add.w	r3, r4, #556	; 0x22c
        : CanvasWidget()
 800360a:	4618      	mov	r0, r3
 800360c:	ee09 3a90 	vmov	s19, r3
 8003610:	f00a f8b6 	bl	800d780 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 8003614:	230a      	movs	r3, #10
 8003616:	f884 7264 	strb.w	r7, [r4, #612]	; 0x264
 800361a:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
class GraphElementGridY : public GraphElementGridBase
 800361e:	4bce      	ldr	r3, [pc, #824]	; (8003958 <_ZN15customGraphBaseC1Ev+0x3ec>)
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 8003620:	f8c4 5268 	str.w	r5, [r4, #616]	; 0x268
class GraphElementGridY : public GraphElementGridBase
 8003624:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
 8003628:	f504 731b 	add.w	r3, r4, #620	; 0x26c
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 800362c:	e9c4 5796 	strd	r5, r7, [r4, #600]	; 0x258

/**
 * GraphLabelsX will draw labels along the X axis at given intervals. By combining two
 * GraphLabelsX it is possible to have different appearance for major and minor y offsets.
 */
class GraphLabelsX : public GraphLabelsBase
 8003630:	4618      	mov	r0, r3
 8003632:	ee0a 3a10 	vmov	s20, r3
 8003636:	f7ff ff59 	bl	80034ec <_ZN8touchgfx15GraphLabelsBaseC1Ev>
 800363a:	4bc8      	ldr	r3, [pc, #800]	; (800395c <_ZN15customGraphBaseC1Ev+0x3f0>)
 800363c:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
 8003640:	f504 732e 	add.w	r3, r4, #696	; 0x2b8

/**
 * GraphLabelsY will draw labels along the Y axis at given intervals. By combining two
 * GraphLabelsY it is possible to have different appearance for major and minor y offsets.
 */
class GraphLabelsY : public GraphLabelsBase
 8003644:	4618      	mov	r0, r3
 8003646:	ee0a 3a90 	vmov	s21, r3
 800364a:	f7ff ff4f 	bl	80034ec <_ZN8touchgfx15GraphLabelsBaseC1Ev>
 800364e:	4bc4      	ldr	r3, [pc, #784]	; (8003960 <_ZN15customGraphBaseC1Ev+0x3f4>)
 8003650:	f8c4 32b8 	str.w	r3, [r4, #696]	; 0x2b8
 8003654:	f504 7341 	add.w	r3, r4, #772	; 0x304
        : CanvasWidget()
 8003658:	4618      	mov	r0, r3
 800365a:	ee0b 3a10 	vmov	s22, r3
 800365e:	f00a f88f 	bl	800d780 <_ZN8touchgfx12CanvasWidgetC1Ev>
 */
class GraphElementLine : public AbstractGraphElement
{
public:
    GraphElementLine()
        : lineWidth(2)
 8003662:	4bc0      	ldr	r3, [pc, #768]	; (8003964 <_ZN15customGraphBaseC1Ev+0x3f8>)
 8003664:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
 8003668:	f04f 0302 	mov.w	r3, #2
 800366c:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
 8003670:	f504 734d 	add.w	r3, r4, #820	; 0x334
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 8003674:	4618      	mov	r0, r3
 8003676:	9303      	str	r3, [sp, #12]
 8003678:	f7fe fe3e 	bl	80022f8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 800367c:	4bba      	ldr	r3, [pc, #744]	; (8003968 <_ZN15customGraphBaseC1Ev+0x3fc>)
 800367e:	4648      	mov	r0, r9
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 8003680:	f8c4 5340 	str.w	r5, [r4, #832]	; 0x340
 8003684:	f8c4 3334 	str.w	r3, [r4, #820]	; 0x334
 8003688:	3324      	adds	r3, #36	; 0x24
 800368a:	f8c4 333c 	str.w	r3, [r4, #828]	; 0x33c
 800368e:	f7ff ff4b 	bl	8003528 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8003692:	f504 7365 	add.w	r3, r4, #916	; 0x394
 8003696:	4618      	mov	r0, r3
 8003698:	ee08 3a10 	vmov	s16, r3
 800369c:	f7ff ff44 	bl	8003528 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80036a0:	4658      	mov	r0, fp
 80036a2:	f7ff ff41 	bl	8003528 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80036a6:	4650      	mov	r0, sl
 80036a8:	f7ff ff3e 	bl	8003528 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80036ac:	f504 638f 	add.w	r3, r4, #1144	; 0x478
 80036b0:	4618      	mov	r0, r3
 80036b2:	ee08 3a90 	vmov	s17, r3
 80036b6:	f7ff ff37 	bl	8003528 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
        : pobject(pObject), pmemfun(pmemfun_2)
 80036ba:	4bac      	ldr	r3, [pc, #688]	; (800396c <_ZN15customGraphBaseC1Ev+0x400>)
    box1.setPosition(0, 0, 310, 200);
 80036bc:	462a      	mov	r2, r5
 80036be:	4640      	mov	r0, r8
 80036c0:	f8c4 3528 	str.w	r3, [r4, #1320]	; 0x528
 80036c4:	4629      	mov	r1, r5
 80036c6:	4baa      	ldr	r3, [pc, #680]	; (8003970 <_ZN15customGraphBaseC1Ev+0x404>)
 80036c8:	f8c4 452c 	str.w	r4, [r4, #1324]	; 0x52c
 80036cc:	f8c4 3530 	str.w	r3, [r4, #1328]	; 0x530
 80036d0:	4ba8      	ldr	r3, [pc, #672]	; (8003974 <_ZN15customGraphBaseC1Ev+0x408>)
 80036d2:	f8c4 5534 	str.w	r5, [r4, #1332]	; 0x534
 80036d6:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
 80036da:	4ba7      	ldr	r3, [pc, #668]	; (8003978 <_ZN15customGraphBaseC1Ev+0x40c>)
 80036dc:	f8c4 453c 	str.w	r4, [r4, #1340]	; 0x53c
 80036e0:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
        rect.width = width;
 80036e4:	4ba5      	ldr	r3, [pc, #660]	; (800397c <_ZN15customGraphBaseC1Ev+0x410>)
 80036e6:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544
 80036ea:	60a3      	str	r3, [r4, #8]
 80036ec:	23c8      	movs	r3, #200	; 0xc8
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	f44f 739b 	mov.w	r3, #310	; 0x136
 80036f4:	f7ff fea2 	bl	800343c <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 80036f8:	f04f 33ff 	mov.w	r3, #4294967295
    add(box1);
 80036fc:	4641      	mov	r1, r8
 80036fe:	4620      	mov	r0, r4
 8003700:	6563      	str	r3, [r4, #84]	; 0x54
        setIntervalScaled(abs(interval) * dataScale);
 8003702:	f04f 0819 	mov.w	r8, #25
 8003706:	f008 fdc1 	bl	800c28c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    graph1.setPosition(0, 0, 310, 200);
 800370a:	23c8      	movs	r3, #200	; 0xc8
 800370c:	4630      	mov	r0, r6
 800370e:	462a      	mov	r2, r5
 8003710:	4629      	mov	r1, r5
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	f44f 739b 	mov.w	r3, #310	; 0x136
 8003718:	f7ff fe90 	bl	800343c <_ZN8touchgfx8Drawable11setPositionEssss>
    graph1.setScaleX(1);
 800371c:	4630      	mov	r0, r6
 800371e:	462a      	mov	r2, r5
 8003720:	4639      	mov	r1, r7
 8003722:	f00a fc37 	bl	800df94 <_ZN8touchgfx15StaticDataGraph9setScaleXEib>
    graph1.setScaleY(1);
 8003726:	4630      	mov	r0, r6
 8003728:	462a      	mov	r2, r5
 800372a:	4639      	mov	r1, r7
 800372c:	f00a fc51 	bl	800dfd2 <_ZN8touchgfx15StaticDataGraph9setScaleYEib>
    graph1.setGraphAreaMargin(25, 45, 5, 40);
 8003730:	2328      	movs	r3, #40	; 0x28
 8003732:	4630      	mov	r0, r6
 8003734:	222d      	movs	r2, #45	; 0x2d
 8003736:	2119      	movs	r1, #25
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	2305      	movs	r3, #5
 800373c:	f00a fb6f 	bl	800de1e <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    graph1.setGraphAreaPadding(0, 0, 0, 0);
 8003740:	462b      	mov	r3, r5
 8003742:	4630      	mov	r0, r6
 8003744:	462a      	mov	r2, r5
 8003746:	4629      	mov	r1, r5
 8003748:	9500      	str	r5, [sp, #0]
 800374a:	f00a fa7b 	bl	800dc44 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    graph1.setGraphRangeX(0, 500);
 800374e:	4630      	mov	r0, r6
 8003750:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003754:	4629      	mov	r1, r5
 8003756:	f7ff fa8a 	bl	8002c6e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
    graph1.setGraphRangeY(-100, 100);
 800375a:	4630      	mov	r0, r6
 800375c:	2264      	movs	r2, #100	; 0x64
 800375e:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8003762:	f7ff fb10 	bl	8002d86 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>
 8003766:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
    graph1.setDragAction(graphDraggedCallback);
 800376a:	f504 63a5 	add.w	r3, r4, #1320	; 0x528
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 800376e:	463a      	mov	r2, r7
        setIntervalScaled(abs(interval) * dataScale);
 8003770:	fb08 f001 	mul.w	r0, r8, r1
        dragAction = &callback;
 8003774:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
    graph1.setClickAction(graphClickedCallback);
 8003778:	f504 63a7 	add.w	r3, r4, #1336	; 0x538
 * @return The absolute (non-negative) value of d.
 */
template <typename T>
T abs(T d)
{
    return (d < 0) ? -d : d;
 800377c:	2800      	cmp	r0, #0
        lineWidth = width;
 800377e:	f884 7224 	strb.w	r7, [r4, #548]	; 0x224
        clickAction = &callback;
 8003782:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
 8003786:	bfb8      	it	lt
 8003788:	4240      	neglt	r0, r0
        color = newColor;
 800378a:	4b7d      	ldr	r3, [pc, #500]	; (8003980 <_ZN15customGraphBaseC1Ev+0x414>)
        gridInterval = abs(interval);
 800378c:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
        color = newColor;
 8003790:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8003794:	f00a fbf6 	bl	800df84 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    graph1.addGraphElement(graph1MajorXAxisGrid);
 8003798:	ee19 1a10 	vmov	r1, s18
        dataScale = scale;
 800379c:	e9c4 7087 	strd	r7, r0, [r4, #540]	; 0x21c
 80037a0:	4630      	mov	r0, r6
 80037a2:	f00a fa5a 	bl	800dc5a <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        setIntervalScaled(abs(interval) * dataScale);
 80037a6:	f8d4 125c 	ldr.w	r1, [r4, #604]	; 0x25c
 80037aa:	2014      	movs	r0, #20
        color = newColor;
 80037ac:	4b74      	ldr	r3, [pc, #464]	; (8003980 <_ZN15customGraphBaseC1Ev+0x414>)
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 80037ae:	463a      	mov	r2, r7
        lineWidth = width;
 80037b0:	f884 7264 	strb.w	r7, [r4, #612]	; 0x264
        setIntervalScaled(abs(interval) * dataScale);
 80037b4:	4348      	muls	r0, r1
        color = newColor;
 80037b6:	f8c4 3258 	str.w	r3, [r4, #600]	; 0x258
 80037ba:	2800      	cmp	r0, #0
 80037bc:	bfb8      	it	lt
 80037be:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 80037c0:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 80037c4:	f00a fbde 	bl	800df84 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    graph1.addGraphElement(graph1MajorYAxisGrid);
 80037c8:	ee19 1a90 	vmov	r1, s19
        dataScale = scale;
 80037cc:	e9c4 7097 	strd	r7, r0, [r4, #604]	; 0x25c
 80037d0:	4630      	mov	r0, r6
 80037d2:	f00a fa42 	bl	800dc5a <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        setIntervalScaled(AbstractDataGraph::int2scaled(interval, dataScale));
 80037d6:	f8d4 129c 	ldr.w	r1, [r4, #668]	; 0x29c
class TypedText
 80037da:	2307      	movs	r3, #7
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 80037dc:	463a      	mov	r2, r7
        return i * scale;
 80037de:	fb08 f001 	mul.w	r0, r8, r1
    Unicode::snprintf(debugTextBuffer, DEBUGTEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_IZT7).getText());
 80037e2:	f204 48c4 	addw	r8, r4, #1220	; 0x4c4
 80037e6:	f8a4 32a8 	strh.w	r3, [r4, #680]	; 0x2a8
        color = newColor;
 80037ea:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80037ee:	2800      	cmp	r0, #0
 80037f0:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 80037f4:	bfb8      	it	lt
 80037f6:	4240      	neglt	r0, r0
        labelInterval = abs(interval);
 80037f8:	f8c4 02a0 	str.w	r0, [r4, #672]	; 0x2a0
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 80037fc:	f00a fbc2 	bl	800df84 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    graph1.addBottomElement(graph1MajorXAxisLabel);
 8003800:	ee1a 1a10 	vmov	r1, s20
        dataScale = scale;
 8003804:	e9c4 70a7 	strd	r7, r0, [r4, #668]	; 0x29c
 8003808:	4630      	mov	r0, r6
 800380a:	f00a fa4a 	bl	800dca2 <_ZN8touchgfx17AbstractDataGraph16addBottomElementERNS_23AbstractGraphDecorationE>
        setIntervalScaled(AbstractDataGraph::int2scaled(interval, dataScale));
 800380e:	f8d4 12e8 	ldr.w	r1, [r4, #744]	; 0x2e8
 8003812:	2328      	movs	r3, #40	; 0x28
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8003814:	463a      	mov	r2, r7
 8003816:	fb03 f001 	mul.w	r0, r3, r1
 800381a:	f04f 030a 	mov.w	r3, #10
 800381e:	2800      	cmp	r0, #0
 8003820:	f8a4 32f4 	strh.w	r3, [r4, #756]	; 0x2f4
 8003824:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8003828:	bfb8      	it	lt
 800382a:	4240      	neglt	r0, r0
 800382c:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
        labelInterval = abs(interval);
 8003830:	f8c4 02ec 	str.w	r0, [r4, #748]	; 0x2ec
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8003834:	f00a fba6 	bl	800df84 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    graph1.addLeftElement(graph1MajorYAxisLabel);
 8003838:	ee1a 1a90 	vmov	r1, s21
        dataScale = scale;
 800383c:	e9c4 70ba 	strd	r7, r0, [r4, #744]	; 0x2e8
 8003840:	4630      	mov	r0, r6
 8003842:	f00a fa1c 	bl	800dc7e <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>
 8003846:	4b4f      	ldr	r3, [pc, #316]	; (8003984 <_ZN15customGraphBaseC1Ev+0x418>)
    graph1.addGraphElement(graph1Line1);
 8003848:	4630      	mov	r0, r6
 800384a:	ee1b 1a10 	vmov	r1, s22
 800384e:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    }

    virtual void setColor(colortype color)
    {
        AbstractPainterColor::setColor(color);
        painterRed = Color::getRed(color);
 8003852:	f24c 2332 	movw	r3, #49714	; 0xc232
 8003856:	f8a4 3344 	strh.w	r3, [r4, #836]	; 0x344
        painterGreen = Color::getGreen(color);
        painterBlue = Color::getBlue(color);
 800385a:	2337      	movs	r3, #55	; 0x37
 800385c:	f884 3346 	strb.w	r3, [r4, #838]	; 0x346
        canvasPainter = &painter;
 8003860:	9b03      	ldr	r3, [sp, #12]
 8003862:	f8c4 332c 	str.w	r3, [r4, #812]	; 0x32c
     *
     * @see getLineWidth
     */
    FORCE_INLINE_FUNCTION void setLineWidth(uint8_t width)
    {
        lineWidth = width;
 8003866:	2304      	movs	r3, #4
 8003868:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
 800386c:	f00a f9f5 	bl	800dc5a <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
 8003870:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
        return addValue(int2scaledX(x), int2scaledY(y));
 8003874:	f06f 0140 	mvn.w	r1, #64	; 0x40
 8003878:	4630      	mov	r0, r6
 800387a:	434a      	muls	r2, r1
 800387c:	4629      	mov	r1, r5
 800387e:	f00a fbc7 	bl	800e010 <_ZN8touchgfx9GraphData8addValueEii>
 8003882:	2032      	movs	r0, #50	; 0x32
        return i * scale;
 8003884:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8003888:	4341      	muls	r1, r0
 800388a:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 800388e:	4630      	mov	r0, r6
 8003890:	f00a fbbe 	bl	800e010 <_ZN8touchgfx9GraphData8addValueEii>
 8003894:	2064      	movs	r0, #100	; 0x64
        return i * scale;
 8003896:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800389a:	4341      	muls	r1, r0
 800389c:	0092      	lsls	r2, r2, #2
 800389e:	4630      	mov	r0, r6
 80038a0:	f00a fbb6 	bl	800e010 <_ZN8touchgfx9GraphData8addValueEii>
 80038a4:	2096      	movs	r0, #150	; 0x96
        return i * scale;
 80038a6:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80038aa:	4341      	muls	r1, r0
 80038ac:	0112      	lsls	r2, r2, #4
 80038ae:	4630      	mov	r0, r6
 80038b0:	f00a fbae 	bl	800e010 <_ZN8touchgfx9GraphData8addValueEii>
 80038b4:	23c8      	movs	r3, #200	; 0xc8
 80038b6:	2033      	movs	r0, #51	; 0x33
        return i * scale;
 80038b8:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80038bc:	4359      	muls	r1, r3
 80038be:	4342      	muls	r2, r0
 80038c0:	4630      	mov	r0, r6
 80038c2:	f00a fba5 	bl	800e010 <_ZN8touchgfx9GraphData8addValueEii>
 80038c6:	f06f 0035 	mvn.w	r0, #53	; 0x35
        return i * scale;
 80038ca:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80038ce:	4342      	muls	r2, r0
 80038d0:	20fa      	movs	r0, #250	; 0xfa
 80038d2:	4341      	muls	r1, r0
 80038d4:	4630      	mov	r0, r6
 80038d6:	f00a fb9b 	bl	800e010 <_ZN8touchgfx9GraphData8addValueEii>
 80038da:	f06f 0047 	mvn.w	r0, #71	; 0x47
        return i * scale;
 80038de:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80038e2:	4342      	muls	r2, r0
 80038e4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80038e8:	4341      	muls	r1, r0
 80038ea:	4630      	mov	r0, r6
 80038ec:	f00a fb90 	bl	800e010 <_ZN8touchgfx9GraphData8addValueEii>
 80038f0:	2048      	movs	r0, #72	; 0x48
        return i * scale;
 80038f2:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80038f6:	4342      	muls	r2, r0
 80038f8:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80038fc:	4341      	muls	r1, r0
 80038fe:	4630      	mov	r0, r6
 8003900:	f00a fb86 	bl	800e010 <_ZN8touchgfx9GraphData8addValueEii>
 8003904:	2036      	movs	r0, #54	; 0x36
        return i * scale;
 8003906:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800390a:	4342      	muls	r2, r0
 800390c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003910:	4341      	muls	r1, r0
 8003912:	4630      	mov	r0, r6
 8003914:	f00a fb7c 	bl	800e010 <_ZN8touchgfx9GraphData8addValueEii>
 8003918:	f06f 0032 	mvn.w	r0, #50	; 0x32
        return i * scale;
 800391c:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8003920:	4342      	muls	r2, r0
 8003922:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8003926:	4341      	muls	r1, r0
 8003928:	4630      	mov	r0, r6
 800392a:	f00a fb71 	bl	800e010 <_ZN8touchgfx9GraphData8addValueEii>
    add(graph1);
 800392e:	4631      	mov	r1, r6
 8003930:	4620      	mov	r0, r4
        boundingArea = calculateBoundingArea();
 8003932:	ae04      	add	r6, sp, #16
 8003934:	f008 fcaa 	bl	800c28c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    debugText.setXY(94, 0);
 8003938:	462a      	mov	r2, r5
 800393a:	215e      	movs	r1, #94	; 0x5e
 800393c:	4648      	mov	r0, r9
 800393e:	f7fe ff3a 	bl	80027b6 <_ZN8touchgfx8Drawable5setXYEss>
 8003942:	e021      	b.n	8003988 <_ZN15customGraphBaseC1Ev+0x41c>
 8003944:	0801fe90 	.word	0x0801fe90
 8003948:	08020860 	.word	0x08020860
 800394c:	08020398 	.word	0x08020398
 8003950:	0801fd24 	.word	0x0801fd24
 8003954:	0801fb24 	.word	0x0801fb24
 8003958:	0801fbdc 	.word	0x0801fbdc
 800395c:	08020680 	.word	0x08020680
 8003960:	08020720 	.word	0x08020720
 8003964:	08020604 	.word	0x08020604
 8003968:	080202e8 	.word	0x080202e8
 800396c:	0801fe60 	.word	0x0801fe60
 8003970:	08003309 	.word	0x08003309
 8003974:	0801fe78 	.word	0x0801fe78
 8003978:	08003327 	.word	0x08003327
 800397c:	00c80136 	.word	0x00c80136
 8003980:	ff1497c5 	.word	0xff1497c5
 8003984:	ff32c237 	.word	0xff32c237
        color = newColor;
 8003988:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 800398c:	f8d4 2348 	ldr.w	r2, [r4, #840]	; 0x348
 8003990:	4649      	mov	r1, r9
 8003992:	4630      	mov	r0, r6
        color = newColor;
 8003994:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
        boundingArea = calculateBoundingArea();
 8003998:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
        linespace = space;
 800399c:	f8a4 537c 	strh.w	r5, [r4, #892]	; 0x37c
        boundingArea = calculateBoundingArea();
 80039a0:	4790      	blx	r2
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80039a2:	4b86      	ldr	r3, [pc, #536]	; (8003bbc <_ZN15customGraphBaseC1Ev+0x650>)
 80039a4:	f504 7c61 	add.w	ip, r4, #900	; 0x384
 80039a8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80039ac:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	2304      	movs	r3, #4
 80039b4:	b92a      	cbnz	r2, 80039c2 <_ZN15customGraphBaseC1Ev+0x456>
 80039b6:	4b82      	ldr	r3, [pc, #520]	; (8003bc0 <_ZN15customGraphBaseC1Ev+0x654>)
 80039b8:	2160      	movs	r1, #96	; 0x60
 80039ba:	4a82      	ldr	r2, [pc, #520]	; (8003bc4 <_ZN15customGraphBaseC1Ev+0x658>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80039bc:	4882      	ldr	r0, [pc, #520]	; (8003bc8 <_ZN15customGraphBaseC1Ev+0x65c>)
 80039be:	f019 ff6d 	bl	801d89c <__assert_func>
 80039c2:	4a82      	ldr	r2, [pc, #520]	; (8003bcc <_ZN15customGraphBaseC1Ev+0x660>)
 80039c4:	8812      	ldrh	r2, [r2, #0]
 80039c6:	2a04      	cmp	r2, #4
 80039c8:	d803      	bhi.n	80039d2 <_ZN15customGraphBaseC1Ev+0x466>
 80039ca:	4b81      	ldr	r3, [pc, #516]	; (8003bd0 <_ZN15customGraphBaseC1Ev+0x664>)
 80039cc:	2161      	movs	r1, #97	; 0x61
 80039ce:	4a7d      	ldr	r2, [pc, #500]	; (8003bc4 <_ZN15customGraphBaseC1Ev+0x658>)
 80039d0:	e7f4      	b.n	80039bc <_ZN15customGraphBaseC1Ev+0x450>
        return texts->getText(typedTextId);
 80039d2:	4619      	mov	r1, r3
 80039d4:	4b7f      	ldr	r3, [pc, #508]	; (8003bd4 <_ZN15customGraphBaseC1Ev+0x668>)
 80039d6:	6818      	ldr	r0, [r3, #0]
 80039d8:	f7ff f91a 	bl	8002c10 <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(debugTextBuffer, DEBUGTEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_IZT7).getText());
 80039dc:	4a7e      	ldr	r2, [pc, #504]	; (8003bd8 <_ZN15customGraphBaseC1Ev+0x66c>)
 80039de:	4603      	mov	r3, r0
 80039e0:	210a      	movs	r1, #10
 80039e2:	4640      	mov	r0, r8
 80039e4:	f011 f9c4 	bl	8014d70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    debugText.resizeToCurrentText();
 80039e8:	4648      	mov	r0, r9
        wc1 = value;
 80039ea:	f8c4 8390 	str.w	r8, [r4, #912]	; 0x390
 80039ee:	f00b fd2d 	bl	800f44c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 80039f2:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8003bdc <_ZN15customGraphBaseC1Ev+0x670>
 80039f6:	2306      	movs	r3, #6
    debugText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LR9V));
 80039f8:	a908      	add	r1, sp, #32
 80039fa:	4648      	mov	r0, r9
 80039fc:	f8cd 8020 	str.w	r8, [sp, #32]
 8003a00:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8003a04:	f00b fd42 	bl	800f48c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    add(debugText);
 8003a08:	4649      	mov	r1, r9
 8003a0a:	4620      	mov	r0, r4
 8003a0c:	f008 fc3e 	bl	800c28c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    timeLabel3.setXY(235, 180);
 8003a10:	22b4      	movs	r2, #180	; 0xb4
 8003a12:	21eb      	movs	r1, #235	; 0xeb
 8003a14:	ee18 0a10 	vmov	r0, s16
 8003a18:	f7fe fecd 	bl	80027b6 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003a1c:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 8003a20:	f8d4 3394 	ldr.w	r3, [r4, #916]	; 0x394
 8003a24:	4630      	mov	r0, r6
 8003a26:	ee18 1a10 	vmov	r1, s16
        color = newColor;
 8003a2a:	f8c4 23c4 	str.w	r2, [r4, #964]	; 0x3c4
        boundingArea = calculateBoundingArea();
 8003a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        linespace = space;
 8003a32:	f8a4 53c8 	strh.w	r5, [r4, #968]	; 0x3c8
        boundingArea = calculateBoundingArea();
 8003a36:	4798      	blx	r3
 8003a38:	f504 7374 	add.w	r3, r4, #976	; 0x3d0
 8003a3c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003a40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    timeLabel3.setWildcard(timeLabel3Buffer);
 8003a44:	f504 639b 	add.w	r3, r4, #1240	; 0x4d8
    timeLabel3.resizeToCurrentText();
 8003a48:	ee18 0a10 	vmov	r0, s16
    timeLabel3Buffer[0] = 0;
 8003a4c:	f8a4 54d8 	strh.w	r5, [r4, #1240]	; 0x4d8
 8003a50:	f8c4 33dc 	str.w	r3, [r4, #988]	; 0x3dc
    timeLabel3.resizeToCurrentText();
 8003a54:	f00b fcfa 	bl	800f44c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8003a58:	f04f 0202 	mov.w	r2, #2
    timeLabel3.setTypedText(touchgfx::TypedText(T_TIMEL3));
 8003a5c:	a908      	add	r1, sp, #32
 8003a5e:	ee18 0a10 	vmov	r0, s16
 8003a62:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8003a66:	f8cd 8020 	str.w	r8, [sp, #32]
 8003a6a:	f00b fd0f 	bl	800f48c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    add(timeLabel3);
 8003a6e:	ee18 1a10 	vmov	r1, s16
 8003a72:	4620      	mov	r0, r4
 8003a74:	f008 fc0a 	bl	800c28c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    timeLabel2.setXY(171, 180);
 8003a78:	22b4      	movs	r2, #180	; 0xb4
 8003a7a:	21ab      	movs	r1, #171	; 0xab
 8003a7c:	4658      	mov	r0, fp
 8003a7e:	f7fe fe9a 	bl	80027b6 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003a82:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 8003a86:	f8d4 33e0 	ldr.w	r3, [r4, #992]	; 0x3e0
 8003a8a:	4630      	mov	r0, r6
 8003a8c:	4659      	mov	r1, fp
        color = newColor;
 8003a8e:	f8c4 2410 	str.w	r2, [r4, #1040]	; 0x410
        boundingArea = calculateBoundingArea();
 8003a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        linespace = space;
 8003a96:	f8a4 5414 	strh.w	r5, [r4, #1044]	; 0x414
        boundingArea = calculateBoundingArea();
 8003a9a:	4798      	blx	r3
 8003a9c:	f204 431c 	addw	r3, r4, #1052	; 0x41c
 8003aa0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003aa4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    timeLabel2.setWildcard(timeLabel2Buffer);
 8003aa8:	f204 43ec 	addw	r3, r4, #1260	; 0x4ec
    timeLabel2.resizeToCurrentText();
 8003aac:	4658      	mov	r0, fp
    timeLabel2Buffer[0] = 0;
 8003aae:	f8a4 54ec 	strh.w	r5, [r4, #1260]	; 0x4ec
 8003ab2:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    timeLabel2.resizeToCurrentText();
 8003ab6:	f00b fcc9 	bl	800f44c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8003aba:	2303      	movs	r3, #3
    timeLabel2.setTypedText(touchgfx::TypedText(T_TIMEL2));
 8003abc:	a908      	add	r1, sp, #32
 8003abe:	4658      	mov	r0, fp
 8003ac0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8003ac4:	f8cd 8020 	str.w	r8, [sp, #32]
 8003ac8:	f00b fce0 	bl	800f48c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    add(timeLabel2);
 8003acc:	4659      	mov	r1, fp
 8003ace:	4620      	mov	r0, r4
 8003ad0:	f008 fbdc 	bl	800c28c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    timeLabel1.setXY(105, 180);
 8003ad4:	22b4      	movs	r2, #180	; 0xb4
 8003ad6:	2169      	movs	r1, #105	; 0x69
 8003ad8:	4650      	mov	r0, sl
 8003ada:	f7fe fe6c 	bl	80027b6 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003ade:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 8003ae2:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
 8003ae6:	4630      	mov	r0, r6
 8003ae8:	4651      	mov	r1, sl
        color = newColor;
 8003aea:	f8c4 245c 	str.w	r2, [r4, #1116]	; 0x45c
        boundingArea = calculateBoundingArea();
 8003aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        linespace = space;
 8003af2:	f8a4 5460 	strh.w	r5, [r4, #1120]	; 0x460
        boundingArea = calculateBoundingArea();
 8003af6:	4798      	blx	r3
 8003af8:	f504 638d 	add.w	r3, r4, #1128	; 0x468
 8003afc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003b00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    timeLabel1.setWildcard(timeLabel1Buffer);
 8003b04:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
    timeLabel1.resizeToCurrentText();
 8003b08:	4650      	mov	r0, sl
    timeLabel1Buffer[0] = 0;
 8003b0a:	f8a4 5500 	strh.w	r5, [r4, #1280]	; 0x500
    Unicode::snprintf(dateLabelBuffer, DATELABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_WAHU).getText());
 8003b0e:	f204 5614 	addw	r6, r4, #1300	; 0x514
 8003b12:	f8c4 3474 	str.w	r3, [r4, #1140]	; 0x474
    timeLabel1.resizeToCurrentText();
 8003b16:	f00b fc99 	bl	800f44c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8003b1a:	2305      	movs	r3, #5
    timeLabel1.setTypedText(touchgfx::TypedText(T_TIMEL1));
 8003b1c:	a908      	add	r1, sp, #32
 8003b1e:	4650      	mov	r0, sl
 8003b20:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8003b24:	f8cd 8020 	str.w	r8, [sp, #32]
 8003b28:	f00b fcb0 	bl	800f48c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    add(timeLabel1);
 8003b2c:	4651      	mov	r1, sl
 8003b2e:	4620      	mov	r0, r4
 8003b30:	f008 fbac 	bl	800c28c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    dateLabel.setXY(215, 0);
 8003b34:	462a      	mov	r2, r5
 8003b36:	21d7      	movs	r1, #215	; 0xd7
 8003b38:	ee18 0a90 	vmov	r0, s17
 8003b3c:	f7fe fe3b 	bl	80027b6 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003b40:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        linespace = space;
 8003b44:	f8a4 54ac 	strh.w	r5, [r4, #1196]	; 0x4ac
        color = newColor;
 8003b48:	f8c4 24a8 	str.w	r2, [r4, #1192]	; 0x4a8
        boundingArea = calculateBoundingArea();
 8003b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b50:	f8c4 54b4 	str.w	r5, [r4, #1204]	; 0x4b4
 8003b54:	f8c4 24b8 	str.w	r2, [r4, #1208]	; 0x4b8
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003b58:	4a18      	ldr	r2, [pc, #96]	; (8003bbc <_ZN15customGraphBaseC1Ev+0x650>)
 8003b5a:	f8c4 54bc 	str.w	r5, [r4, #1212]	; 0x4bc
 8003b5e:	6813      	ldr	r3, [r2, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f43f af28 	beq.w	80039b6 <_ZN15customGraphBaseC1Ev+0x44a>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003b66:	4a19      	ldr	r2, [pc, #100]	; (8003bcc <_ZN15customGraphBaseC1Ev+0x660>)
 8003b68:	8813      	ldrh	r3, [r2, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f43f af2d 	beq.w	80039ca <_ZN15customGraphBaseC1Ev+0x45e>
        return texts->getText(typedTextId);
 8003b70:	4b18      	ldr	r3, [pc, #96]	; (8003bd4 <_ZN15customGraphBaseC1Ev+0x668>)
 8003b72:	4629      	mov	r1, r5
 8003b74:	6818      	ldr	r0, [r3, #0]
 8003b76:	f7ff f84b 	bl	8002c10 <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(dateLabelBuffer, DATELABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_WAHU).getText());
 8003b7a:	4a17      	ldr	r2, [pc, #92]	; (8003bd8 <_ZN15customGraphBaseC1Ev+0x66c>)
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	210a      	movs	r1, #10
 8003b80:	4630      	mov	r0, r6
 8003b82:	f011 f8f5 	bl	8014d70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    dateLabel.resizeToCurrentText();
 8003b86:	ee18 0a90 	vmov	r0, s17
 8003b8a:	f8c4 64c0 	str.w	r6, [r4, #1216]	; 0x4c0
 8003b8e:	f00b fc5d 	bl	800f44c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    dateLabel.setTypedText(touchgfx::TypedText(T_DATE));
 8003b92:	a908      	add	r1, sp, #32
 8003b94:	ee18 0a90 	vmov	r0, s17
        : typedTextId(id)
 8003b98:	f8cd 8020 	str.w	r8, [sp, #32]
 8003b9c:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8003ba0:	f00b fc74 	bl	800f48c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    add(dateLabel);
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	ee18 1a90 	vmov	r1, s17
 8003baa:	f008 fb6f 	bl	800c28c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003bae:	4620      	mov	r0, r4
 8003bb0:	b00b      	add	sp, #44	; 0x2c
 8003bb2:	ecbd 8b08 	vpop	{d8-d11}
 8003bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bba:	bf00      	nop
 8003bbc:	2400e4ac 	.word	0x2400e4ac
 8003bc0:	0801f9ce 	.word	0x0801f9ce
 8003bc4:	0801fade 	.word	0x0801fade
 8003bc8:	0801fa4b 	.word	0x0801fa4b
 8003bcc:	2400e4b0 	.word	0x2400e4b0
 8003bd0:	0801faa0 	.word	0x0801faa0
 8003bd4:	2400e4b8 	.word	0x2400e4b8
 8003bd8:	0801fb16 	.word	0x0801fb16
 8003bdc:	0801f264 	.word	0x0801f264

08003be0 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003be0:	4770      	bx	lr

08003be2 <_ZN19FrontendApplicationD0Ev>:
 8003be2:	b510      	push	{r4, lr}
 8003be4:	4604      	mov	r4, r0
 8003be6:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8003bea:	f019 fe28 	bl	801d83e <_ZdlPvj>
 8003bee:	4620      	mov	r0, r4
 8003bf0:	bd10      	pop	{r4, pc}

08003bf2 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8003bf2:	b510      	push	{r4, lr}
 8003bf4:	4604      	mov	r4, r0
    {
        model.tick();
 8003bf6:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 8003bfa:	f000 f812 	bl	8003c22 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8003bfe:	4620      	mov	r0, r4
    }
 8003c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8003c04:	f00e b90e 	b.w	8011e24 <_ZN8touchgfx11Application15handleTickEventEv>

08003c08 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8003c08:	b510      	push	{r4, lr}
 8003c0a:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8003c0c:	f7fe fd0c 	bl	8002628 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8003c10:	4b01      	ldr	r3, [pc, #4]	; (8003c18 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8003c12:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8003c14:	6023      	str	r3, [r4, #0]
}
 8003c16:	bd10      	pop	{r4, pc}
 8003c18:	0801ff2c 	.word	0x0801ff2c

08003c1c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	6002      	str	r2, [r0, #0]
{

}
 8003c20:	4770      	bx	lr

08003c22 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8003c22:	4770      	bx	lr

08003c24 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8003c24:	4770      	bx	lr

08003c26 <_ZThn4_N16Screen1PresenterD1Ev>:
 8003c26:	3804      	subs	r0, #4
 8003c28:	4770      	bx	lr

08003c2a <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 8003c2a:	4770      	bx	lr

08003c2c <_ZN16Screen1PresenterD0Ev>:
 8003c2c:	b510      	push	{r4, lr}
 8003c2e:	4604      	mov	r4, r0
 8003c30:	2110      	movs	r1, #16
 8003c32:	f019 fe04 	bl	801d83e <_ZdlPvj>
 8003c36:	4620      	mov	r0, r4
 8003c38:	bd10      	pop	{r4, pc}

08003c3a <_ZThn4_N16Screen1PresenterD0Ev>:
 8003c3a:	f1a0 0004 	sub.w	r0, r0, #4
 8003c3e:	e7f5      	b.n	8003c2c <_ZN16Screen1PresenterD0Ev>

08003c40 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8003c40:	2200      	movs	r2, #0
    : view(v)
 8003c42:	60c1      	str	r1, [r0, #12]
 8003c44:	6082      	str	r2, [r0, #8]
 8003c46:	4a04      	ldr	r2, [pc, #16]	; (8003c58 <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
Screen1Presenter::Screen1Presenter(Screen1View& v)
 8003c48:	b510      	push	{r4, lr}
    : view(v)
 8003c4a:	f102 0408 	add.w	r4, r2, #8
 8003c4e:	3220      	adds	r2, #32
 8003c50:	6004      	str	r4, [r0, #0]
 8003c52:	6042      	str	r2, [r0, #4]
}
 8003c54:	bd10      	pop	{r4, pc}
 8003c56:	bf00      	nop
 8003c58:	0801ff70 	.word	0x0801ff70

08003c5c <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8003c5c:	4770      	bx	lr

08003c5e <_ZN11Screen1View15handleTickEventEv>:

void Screen1View::handleTickEvent()
{
	tickCounter++;
 8003c5e:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8003c62:	f8d0 35a8 	ldr.w	r3, [r0, #1448]	; 0x5a8
	tickCounter2++;
 8003c66:	f8d0 25ac 	ldr.w	r2, [r0, #1452]	; 0x5ac
	tickCounter++;
 8003c6a:	3301      	adds	r3, #1
	tickCounter2++;
 8003c6c:	3201      	adds	r2, #1
	if(tickCounter == 10){
 8003c6e:	2b0a      	cmp	r3, #10
	tickCounter++;
 8003c70:	f8c0 35a8 	str.w	r3, [r0, #1448]	; 0x5a8
	tickCounter2++;
 8003c74:	f8c0 25ac 	str.w	r2, [r0, #1452]	; 0x5ac
		tickCounter= 0;
 8003c78:	bf04      	itt	eq
 8003c7a:	2300      	moveq	r3, #0
 8003c7c:	f8c0 35a8 	streq.w	r3, [r0, #1448]	; 0x5a8
	if(tickCounter2 % 3 == 0)
	{
		//customGraph1.addPoint((sinf(tickCounter2 * 0.07) + 1) * 40 + rand() % 10, (float)tickCounter2);
		//graph1.addDataPoint((int)(sinf(tickCounter2 * 0.07) + 1) * 40 + rand() % 10, tickCounter2);
	}
}
 8003c80:	4770      	bx	lr
	...

08003c84 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8003c84:	4b03      	ldr	r3, [pc, #12]	; (8003c94 <_ZN11Screen1ViewD1Ev+0x10>)
 8003c86:	b510      	push	{r4, lr}
 8003c88:	4604      	mov	r4, r0
 8003c8a:	6003      	str	r3, [r0, #0]
 8003c8c:	f7fe fd76 	bl	800277c <_ZN15Screen1ViewBaseD1Ev>
 8003c90:	4620      	mov	r0, r4
 8003c92:	bd10      	pop	{r4, pc}
 8003c94:	0801ffa0 	.word	0x0801ffa0

08003c98 <_ZN11Screen1ViewD0Ev>:
 8003c98:	b510      	push	{r4, lr}
 8003c9a:	4604      	mov	r4, r0
 8003c9c:	f7ff fff2 	bl	8003c84 <_ZN11Screen1ViewD1Ev>
 8003ca0:	f243 51b8 	movw	r1, #13752	; 0x35b8
 8003ca4:	4620      	mov	r0, r4
 8003ca6:	f019 fdca 	bl	801d83e <_ZdlPvj>
 8003caa:	4620      	mov	r0, r4
 8003cac:	bd10      	pop	{r4, pc}
	...

08003cb0 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8003cb0:	b510      	push	{r4, lr}
 8003cb2:	4604      	mov	r4, r0
 8003cb4:	f7fe fd8c 	bl	80027d0 <_ZN15Screen1ViewBaseC1Ev>
 8003cb8:	4b07      	ldr	r3, [pc, #28]	; (8003cd8 <_ZN11Screen1ViewC1Ev+0x28>)
 8003cba:	2200      	movs	r2, #0
}
 8003cbc:	4620      	mov	r0, r4
Screen1View::Screen1View()
 8003cbe:	6023      	str	r3, [r4, #0]
 8003cc0:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 8003cc4:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0
 8003cc8:	f8c3 25b4 	str.w	r2, [r3, #1460]	; 0x5b4
	tickCounter  = 0;
 8003ccc:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
	tickCounter2 = 0;
 8003cd0:	f8c3 25ac 	str.w	r2, [r3, #1452]	; 0x5ac
}
 8003cd4:	bd10      	pop	{r4, pc}
 8003cd6:	bf00      	nop
 8003cd8:	0801ffa0 	.word	0x0801ffa0

08003cdc <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8003cdc:	f7fe bd4b 	b.w	8002776 <_ZN15Screen1ViewBase11setupScreenEv>

08003ce0 <_ZN11customGraphD1Ev>:
 8003ce0:	4b03      	ldr	r3, [pc, #12]	; (8003cf0 <_ZN11customGraphD1Ev+0x10>)
 8003ce2:	b510      	push	{r4, lr}
 8003ce4:	4604      	mov	r4, r0
 8003ce6:	6003      	str	r3, [r0, #0]
 8003ce8:	f7ff fa70 	bl	80031cc <_ZN15customGraphBaseD1Ev>
 8003cec:	4620      	mov	r0, r4
 8003cee:	bd10      	pop	{r4, pc}
 8003cf0:	0801ffe4 	.word	0x0801ffe4

08003cf4 <_ZN11customGraphD0Ev>:
 8003cf4:	b510      	push	{r4, lr}
 8003cf6:	4604      	mov	r4, r0
 8003cf8:	f7ff fff2 	bl	8003ce0 <_ZN11customGraphD1Ev>
 8003cfc:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8003d00:	4620      	mov	r0, r4
 8003d02:	f019 fd9c 	bl	801d83e <_ZdlPvj>
 8003d06:	4620      	mov	r0, r4
 8003d08:	bd10      	pop	{r4, pc}

08003d0a <_ZNK8touchgfx7CWRUtil2Q55roundEv>:
            return v < 0 ? Q5((v + 1) - toQ5(1).v / 2).to<int>() : Q5(v + toQ5(1).v / 2).to<int>();
 8003d0a:	6803      	ldr	r3, [r0, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	da02      	bge.n	8003d16 <_ZNK8touchgfx7CWRUtil2Q55roundEv+0xc>
            return (T)((T)v / (T)Rasterizer::POLY_BASE_SIZE);
 8003d10:	f1b3 000f 	subs.w	r0, r3, #15
 8003d14:	d501      	bpl.n	8003d1a <_ZNK8touchgfx7CWRUtil2Q55roundEv+0x10>
 8003d16:	f103 0010 	add.w	r0, r3, #16
 8003d1a:	1140      	asrs	r0, r0, #5
 8003d1c:	4770      	bx	lr
	...

08003d20 <_ZN11customGraph13graph1clickedEN8touchgfx17AbstractDataGraph15GraphClickEventE>:
		timeLabel2.setX(graph1.getX() + timeLabel2_Pos.round()  + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - 22);
		timeLabel3.setX(graph1.getX() + timeLabel3_Pos.round()  + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - 22);

	}

	virtual void graph1clicked(AbstractDataGraph::GraphClickEvent value)
 8003d20:	b530      	push	{r4, r5, lr}
 8003d22:	b087      	sub	sp, #28
 8003d24:	4604      	mov	r4, r0
 8003d26:	ab02      	add	r3, sp, #8
 8003d28:	e883 0006 	stmia.w	r3, {r1, r2}
            : v(0)
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	9305      	str	r3, [sp, #20]
	{
		CWRUtil::Q5 test;
		//int x;
		// Override and implement this function in customGraph
		if(value.clickEvent.getType() == ClickEvent::PRESSED){
 8003d30:	7913      	ldrb	r3, [r2, #4]
 8003d32:	bb6b      	cbnz	r3, 8003d90 <_ZN11customGraph13graph1clickedEN8touchgfx17AbstractDataGraph15GraphClickEventE+0x70>
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8003d34:	f8b4 116e 	ldrh.w	r1, [r4, #366]	; 0x16e
			//Unicode::snprintf(debugTextBuffer, 10, "%d", graph1.getUsedCapacity());
			//x = graph1.int2scaledX(value.index);
			test = CWRUtil::muldiv_toQ5(12 - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
			Unicode::snprintf(debugTextBuffer, 10, "%d", test.round());
 8003d38:	f204 45c4 	addw	r5, r4, #1220	; 0x4c4
 8003d3c:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
 8003d40:	440b      	add	r3, r1
 8003d42:	f8b4 1098 	ldrh.w	r1, [r4, #152]	; 0x98
 8003d46:	1ac9      	subs	r1, r1, r3
			test = CWRUtil::muldiv_toQ5(12 - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 8003d48:	e9d0 0261 	ldrd	r0, r2, [r0, #388]	; 0x184
 8003d4c:	b209      	sxth	r1, r1
 8003d4e:	1a12      	subs	r2, r2, r0
 8003d50:	f1c0 000c 	rsb	r0, r0, #12
 8003d54:	3901      	subs	r1, #1
 8003d56:	f7ff fb84 	bl	8003462 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
            return Q5(v + q5.v);
 8003d5a:	f9b4 316e 	ldrsh.w	r3, [r4, #366]	; 0x16e
 8003d5e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003d62:	9005      	str	r0, [sp, #20]
			Unicode::snprintf(debugTextBuffer, 10, "%d", test.round());
 8003d64:	a805      	add	r0, sp, #20
 8003d66:	f7ff ffd0 	bl	8003d0a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8003d6a:	4a0a      	ldr	r2, [pc, #40]	; (8003d94 <_ZN11customGraph13graph1clickedEN8touchgfx17AbstractDataGraph15GraphClickEventE+0x74>)
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	210a      	movs	r1, #10
 8003d70:	4628      	mov	r0, r5
 8003d72:	f010 fffd 	bl	8014d70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			//Unicode::snprintf(debugTextBuffer, 10, "%d", graph1.indexToScreenX(value.index));
			//Unicode::snprintf(debugTextBuffer, 10, "%d", graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled());
			//Unicode::snprintf(debugTextBuffer, 10, "%d", graph1.getGraphAreaPaddingLeft());
			debugText.setWildcard(debugTextBuffer);
			debugText.invalidate();
 8003d76:	f504 7052 	add.w	r0, r4, #840	; 0x348
 8003d7a:	f8c4 5390 	str.w	r5, [r4, #912]	; 0x390
 8003d7e:	9001      	str	r0, [sp, #4]
 8003d80:	f00f f813 	bl	8012daa <_ZNK8touchgfx8Drawable10invalidateEv>
			debugText.resizeToCurrentText();
 8003d84:	9801      	ldr	r0, [sp, #4]
 8003d86:	f00b fb61 	bl	800f44c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
			debugText.invalidate();
 8003d8a:	9801      	ldr	r0, [sp, #4]
 8003d8c:	f00f f80d 	bl	8012daa <_ZNK8touchgfx8Drawable10invalidateEv>
		}
		if(value.clickEvent.getType() == ClickEvent::RELEASED){

		}
	}
 8003d90:	b007      	add	sp, #28
 8003d92:	bd30      	pop	{r4, r5, pc}
 8003d94:	0801ffcc 	.word	0x0801ffcc

08003d98 <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>:
    void updateTimeLabel(touchgfx::TextAreaWithOneWildcard * timelabel, touchgfx::Unicode::UnicodeChar * timeLabelBuf, struct tm * time)
 8003d98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d9a:	4615      	mov	r5, r2
    	Unicode::snprintf(timeLabelBuf, 10, "%02dc%02d",time->tm_hour, time->tm_min);
 8003d9c:	685a      	ldr	r2, [r3, #4]
    void updateTimeLabel(touchgfx::TextAreaWithOneWildcard * timelabel, touchgfx::Unicode::UnicodeChar * timeLabelBuf, struct tm * time)
 8003d9e:	460c      	mov	r4, r1
    	Unicode::snprintf(timeLabelBuf, 10, "%02dc%02d",time->tm_hour, time->tm_min);
 8003da0:	210a      	movs	r1, #10
 8003da2:	9200      	str	r2, [sp, #0]
 8003da4:	4628      	mov	r0, r5
 8003da6:	4a09      	ldr	r2, [pc, #36]	; (8003dcc <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm+0x34>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f010 ffe1 	bl	8014d70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    	timelabel->invalidate();
 8003dae:	6823      	ldr	r3, [r4, #0]
 8003db0:	4620      	mov	r0, r4
 8003db2:	64a5      	str	r5, [r4, #72]	; 0x48
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	4798      	blx	r3
    	timelabel->resizeToCurrentText();
 8003db8:	4620      	mov	r0, r4
 8003dba:	f00b fb47 	bl	800f44c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    	timelabel->invalidate();
 8003dbe:	6823      	ldr	r3, [r4, #0]
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	695b      	ldr	r3, [r3, #20]
    }
 8003dc4:	b003      	add	sp, #12
 8003dc6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    	timelabel->invalidate();
 8003dca:	4718      	bx	r3
 8003dcc:	0801ffcf 	.word	0x0801ffcf

08003dd0 <_ZN11customGraphC1Ev>:
#include <gui/containers/customGraph.hpp>

customGraph::customGraph()
 8003dd0:	b510      	push	{r4, lr}
 8003dd2:	4604      	mov	r4, r0
 8003dd4:	f7ff fbca 	bl	800356c <_ZN15customGraphBaseC1Ev>
 8003dd8:	4b0e      	ldr	r3, [pc, #56]	; (8003e14 <_ZN11customGraphC1Ev+0x44>)
{

}
 8003dda:	4620      	mov	r0, r4
customGraph::customGraph()
 8003ddc:	6023      	str	r3, [r4, #0]
            : v(0)
 8003dde:	2300      	movs	r3, #0
 8003de0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
 8003de4:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
 8003de8:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
 8003dec:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
 8003df0:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
 8003df4:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
 8003df8:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
 8003dfc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003e00:	f8a4 3624 	strh.w	r3, [r4, #1572]	; 0x624
 8003e04:	2318      	movs	r3, #24
 8003e06:	f8c4 3628 	str.w	r3, [r4, #1576]	; 0x628
 8003e0a:	237d      	movs	r3, #125	; 0x7d
 8003e0c:	f8c4 362c 	str.w	r3, [r4, #1580]	; 0x62c
}
 8003e10:	bd10      	pop	{r4, pc}
 8003e12:	bf00      	nop
 8003e14:	0801ffe4 	.word	0x0801ffe4

08003e18 <_ZN11customGraph12setTimeRangeEi>:

void customGraph::setTimeRange(int hours)
{
	int success = 0;

	switch(hours){
 8003e18:	2908      	cmp	r1, #8
{
 8003e1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e1c:	4604      	mov	r4, r0
 8003e1e:	460d      	mov	r5, r1
	switch(hours){
 8003e20:	d073      	beq.n	8003f0a <_ZN11customGraph12setTimeRangeEi+0xf2>
 8003e22:	2918      	cmp	r1, #24
 8003e24:	f000 80cf 	beq.w	8003fc6 <_ZN11customGraph12setTimeRangeEi+0x1ae>
 8003e28:	2901      	cmp	r1, #1
 8003e2a:	f040 80ca 	bne.w	8003fc2 <_ZN11customGraph12setTimeRangeEi+0x1aa>
		case 1:
			customGraphTimeRange = 1;
			customGraphInterval = (customGraphMaxPoint/(24/customGraphTimeRange))/3;
 8003e2e:	f9b0 2624 	ldrsh.w	r2, [r0, #1572]	; 0x624
 8003e32:	2348      	movs	r3, #72	; 0x48
			customGraphBase::graph1.setGraphRangeX(0, customGraphMaxPoint/(24/customGraphTimeRange));
 8003e34:	f100 0758 	add.w	r7, r0, #88	; 0x58
			customGraphTimeRange = 1;
 8003e38:	f8c0 1628 	str.w	r1, [r0, #1576]	; 0x628
			customGraphBase::graph1.setGraphRangeX(0, customGraphMaxPoint/(24/customGraphTimeRange));
 8003e3c:	2100      	movs	r1, #0
			customGraphBase::graph1MajorXAxisLabel.setInterval(customGraphInterval);
			customGraphBase::graph1MajorXAxisGrid.setInterval(customGraphInterval);
			customGraphBase::graph1.setGraphRangeYAutoScaled(true,30);
			customGraphBase::graph1MajorYAxisLabel.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/3);
 8003e3e:	2603      	movs	r6, #3
			customGraphInterval = (customGraphMaxPoint/(24/customGraphTimeRange))/3;
 8003e40:	fb92 f3f3 	sdiv	r3, r2, r3
 8003e44:	f8c0 362c 	str.w	r3, [r0, #1580]	; 0x62c
			customGraphBase::graph1.setGraphRangeX(0, customGraphMaxPoint/(24/customGraphTimeRange));
 8003e48:	2318      	movs	r3, #24
 8003e4a:	4638      	mov	r0, r7
 8003e4c:	fb92 f2f3 	sdiv	r2, r2, r3
 8003e50:	f7fe ff0d 	bl	8002c6e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
			customGraphBase::graph1MajorXAxisLabel.setInterval(customGraphInterval);
 8003e54:	f8d4 362c 	ldr.w	r3, [r4, #1580]	; 0x62c
        return i * scale;
 8003e58:	f8d4 229c 	ldr.w	r2, [r4, #668]	; 0x29c
			customGraphBase::graph1.setGraphRangeYAutoScaled(true,30);
 8003e5c:	4629      	mov	r1, r5
 8003e5e:	4638      	mov	r0, r7
 8003e60:	435a      	muls	r2, r3
 8003e62:	2a00      	cmp	r2, #0
 8003e64:	bfb8      	it	lt
 8003e66:	4252      	neglt	r2, r2
        labelInterval = abs(interval);
 8003e68:	f8c4 22a0 	str.w	r2, [r4, #672]	; 0x2a0
        setIntervalScaled(abs(interval) * dataScale);
 8003e6c:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
 8003e70:	4353      	muls	r3, r2
 8003e72:	221e      	movs	r2, #30
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	bfb8      	it	lt
 8003e78:	425b      	neglt	r3, r3
        gridInterval = abs(interval);
 8003e7a:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
 8003e7e:	f009 fd4b 	bl	800d918 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi>
			customGraphBase::graph1MajorYAxisLabel.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/3);
 8003e82:	4638      	mov	r0, r7
 8003e84:	f7ff f880 	bl	8002f88 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>
 8003e88:	4605      	mov	r5, r0
 8003e8a:	4638      	mov	r0, r7
 8003e8c:	f7ff f855 	bl	8002f3a <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>
 8003e90:	1a2d      	subs	r5, r5, r0
 8003e92:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 8003e96:	fb95 f5f6 	sdiv	r5, r5, r6
 8003e9a:	4345      	muls	r5, r0
			customGraphBase::graph1MajorYAxisGrid.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/3);
 8003e9c:	4638      	mov	r0, r7
 8003e9e:	2d00      	cmp	r5, #0
 8003ea0:	bfb8      	it	lt
 8003ea2:	426d      	neglt	r5, r5
 8003ea4:	f8c4 52ec 	str.w	r5, [r4, #748]	; 0x2ec
 8003ea8:	f7ff f86e 	bl	8002f88 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>
 8003eac:	4605      	mov	r5, r0
 8003eae:	4638      	mov	r0, r7
 8003eb0:	f7ff f843 	bl	8002f3a <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>
 8003eb4:	1a2d      	subs	r5, r5, r0
        setIntervalScaled(abs(interval) * dataScale);
 8003eb6:	f8d4 025c 	ldr.w	r0, [r4, #604]	; 0x25c
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8003eba:	f8b4 1170 	ldrh.w	r1, [r4, #368]	; 0x170
 8003ebe:	f8b4 316e 	ldrh.w	r3, [r4, #366]	; 0x16e
 8003ec2:	fb95 f5f6 	sdiv	r5, r5, r6
 8003ec6:	4345      	muls	r5, r0
 8003ec8:	2d00      	cmp	r5, #0
 8003eca:	bfb8      	it	lt
 8003ecc:	426d      	neglt	r5, r5
        gridInterval = abs(interval);
 8003ece:	f8c4 5260 	str.w	r5, [r4, #608]	; 0x260
 8003ed2:	440b      	add	r3, r1
 8003ed4:	f8b4 1098 	ldrh.w	r1, [r4, #152]	; 0x98
 8003ed8:	f8b4 00c4 	ldrh.w	r0, [r4, #196]	; 0xc4
 8003edc:	1ac9      	subs	r1, r1, r3
 8003ede:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8003ee2:	4403      	add	r3, r0
 8003ee4:	b20a      	sxth	r2, r1
        return rect.width;
 8003ee6:	f8b4 00f0 	ldrh.w	r0, [r4, #240]	; 0xf0
 8003eea:	3b16      	subs	r3, #22
 8003eec:	1a1b      	subs	r3, r3, r0
			customGraphBase::graph1MajorXAxisGrid.setInterval(customGraphInterval);
			customGraphBase::graph1.setGraphRangeYAutoScaled(true,30);
			customGraphBase::graph1MajorYAxisLabel.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/3);
			customGraphBase::graph1MajorYAxisGrid.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/3);

			customGraphBase::timeLabel1.setX(graph1.getX() + (graph1.getGraphAreaWidth()*1/3) + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - 22);
 8003eee:	fb92 f0f6 	sdiv	r0, r2, r6
			customGraphBase::timeLabel2.setX(graph1.getX() + (graph1.getGraphAreaWidth()*2/3) + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - 22);
 8003ef2:	0052      	lsls	r2, r2, #1
			customGraphBase::timeLabel1.setX(graph1.getX() + (graph1.getGraphAreaWidth()*1/3) + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - 22);
 8003ef4:	fa10 f083 	uxtah	r0, r0, r3
			customGraphBase::timeLabel2.setX(graph1.getX() + (graph1.getGraphAreaWidth()*2/3) + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - 22);
 8003ef8:	fb92 f6f6 	sdiv	r6, r2, r6
 8003efc:	fa16 f683 	uxtah	r6, r6, r3
        rect.x = x;
 8003f00:	f8a4 0430 	strh.w	r0, [r4, #1072]	; 0x430
 8003f04:	f8a4 63e4 	strh.w	r6, [r4, #996]	; 0x3e4
 8003f08:	e058      	b.n	8003fbc <_ZN11customGraph12setTimeRangeEi+0x1a4>
			customGraphInterval = (customGraphMaxPoint/(24/customGraphTimeRange))/3;
 8003f0a:	f9b0 2624 	ldrsh.w	r2, [r0, #1572]	; 0x624
 8003f0e:	2309      	movs	r3, #9
 8003f10:	2503      	movs	r5, #3
			customGraphTimeRange = 8;
 8003f12:	f8c0 1628 	str.w	r1, [r0, #1576]	; 0x628
			customGraphBase::graph1.setGraphRangeX(0, customGraphMaxPoint/(24/customGraphTimeRange));
 8003f16:	3058      	adds	r0, #88	; 0x58
 8003f18:	2100      	movs	r1, #0
			customGraphInterval = (customGraphMaxPoint/(24/customGraphTimeRange))/3;
 8003f1a:	fb92 f3f3 	sdiv	r3, r2, r3
			customGraphBase::graph1.setGraphRangeX(0, customGraphMaxPoint/(24/customGraphTimeRange));
 8003f1e:	fb92 f2f5 	sdiv	r2, r2, r5
			customGraphInterval = (customGraphMaxPoint/(24/customGraphTimeRange))/3;
 8003f22:	f8c0 35d4 	str.w	r3, [r0, #1492]	; 0x5d4
			customGraphBase::graph1.setGraphRangeX(0, customGraphMaxPoint/(24/customGraphTimeRange));
 8003f26:	9001      	str	r0, [sp, #4]
 8003f28:	f7fe fea1 	bl	8002c6e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
			customGraphBase::graph1MajorXAxisLabel.setInterval(customGraphInterval);
 8003f2c:	f8d4 362c 	ldr.w	r3, [r4, #1580]	; 0x62c
			customGraphBase::graph1.setGraphRangeYAutoScaled(true,30);
 8003f30:	2101      	movs	r1, #1
        return i * scale;
 8003f32:	f8d4 229c 	ldr.w	r2, [r4, #668]	; 0x29c
 8003f36:	9801      	ldr	r0, [sp, #4]
 8003f38:	435a      	muls	r2, r3
 8003f3a:	2a00      	cmp	r2, #0
 8003f3c:	bfb8      	it	lt
 8003f3e:	4252      	neglt	r2, r2
 8003f40:	f8c4 22a0 	str.w	r2, [r4, #672]	; 0x2a0
        setIntervalScaled(abs(interval) * dataScale);
 8003f44:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
 8003f48:	4353      	muls	r3, r2
 8003f4a:	221e      	movs	r2, #30
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	bfb8      	it	lt
 8003f50:	425b      	neglt	r3, r3
        gridInterval = abs(interval);
 8003f52:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
 8003f56:	f009 fcdf 	bl	800d918 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi>
			customGraphBase::graph1MajorYAxisLabel.setInterval(customGraphInterval);
 8003f5a:	f8d4 362c 	ldr.w	r3, [r4, #1580]	; 0x62c
 8003f5e:	f8d4 22e8 	ldr.w	r2, [r4, #744]	; 0x2e8
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8003f62:	f8b4 116e 	ldrh.w	r1, [r4, #366]	; 0x16e
        return i * scale;
 8003f66:	435a      	muls	r2, r3
 8003f68:	f8b4 00c4 	ldrh.w	r0, [r4, #196]	; 0xc4
 8003f6c:	2a00      	cmp	r2, #0
 8003f6e:	bfb8      	it	lt
 8003f70:	4252      	neglt	r2, r2
 8003f72:	f8c4 22ec 	str.w	r2, [r4, #748]	; 0x2ec
        setIntervalScaled(abs(interval) * dataScale);
 8003f76:	f8d4 225c 	ldr.w	r2, [r4, #604]	; 0x25c
 8003f7a:	4353      	muls	r3, r2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	bfb8      	it	lt
 8003f80:	425b      	neglt	r3, r3
        gridInterval = abs(interval);
 8003f82:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8003f86:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
 8003f8a:	440b      	add	r3, r1
 8003f8c:	f8b4 1098 	ldrh.w	r1, [r4, #152]	; 0x98
 8003f90:	1ac9      	subs	r1, r1, r3
 8003f92:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8003f96:	4403      	add	r3, r0
 8003f98:	b20a      	sxth	r2, r1
        return rect.width;
 8003f9a:	f8b4 00f0 	ldrh.w	r0, [r4, #240]	; 0xf0
 8003f9e:	3b16      	subs	r3, #22
 8003fa0:	1a1b      	subs	r3, r3, r0
			customGraphBase::timeLabel1.setX(graph1.getX() + (graph1.getGraphAreaWidth()*1/3) + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - 22);
 8003fa2:	fb92 f0f5 	sdiv	r0, r2, r5
			customGraphBase::timeLabel2.setX(graph1.getX() + (graph1.getGraphAreaWidth()*2/3) + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - 22);
 8003fa6:	0052      	lsls	r2, r2, #1
			customGraphBase::timeLabel1.setX(graph1.getX() + (graph1.getGraphAreaWidth()*1/3) + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - 22);
 8003fa8:	fa10 f083 	uxtah	r0, r0, r3
			customGraphBase::timeLabel2.setX(graph1.getX() + (graph1.getGraphAreaWidth()*2/3) + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - 22);
 8003fac:	fb92 f2f5 	sdiv	r2, r2, r5
 8003fb0:	fa12 f283 	uxtah	r2, r2, r3
        rect.x = x;
 8003fb4:	f8a4 0430 	strh.w	r0, [r4, #1072]	; 0x430
 8003fb8:	f8a4 23e4 	strh.w	r2, [r4, #996]	; 0x3e4
			customGraphBase::timeLabel3.setX(graph1.getX() + (graph1.getGraphAreaWidth()*3/3) + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - 22);
 8003fbc:	440b      	add	r3, r1
 8003fbe:	f8a4 3398 	strh.w	r3, [r4, #920]	; 0x398
			success = 0;


		}
	}
}
 8003fc2:	b003      	add	sp, #12
 8003fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			customGraphInterval = (customGraphMaxPoint/(24/customGraphTimeRange))/3;
 8003fc6:	f9b0 2624 	ldrsh.w	r2, [r0, #1572]	; 0x624
 8003fca:	2603      	movs	r6, #3
			customGraphBase::graph1.setGraphRangeX(0, customGraphMaxPoint/(24/customGraphTimeRange));
 8003fcc:	f100 0758 	add.w	r7, r0, #88	; 0x58
			customGraphTimeRange = 24;
 8003fd0:	f8c0 1628 	str.w	r1, [r0, #1576]	; 0x628
			customGraphBase::graph1.setGraphRangeX(0, customGraphMaxPoint/(24/customGraphTimeRange));
 8003fd4:	2100      	movs	r1, #0
			customGraphInterval = (customGraphMaxPoint/(24/customGraphTimeRange))/3;
 8003fd6:	fb92 f3f6 	sdiv	r3, r2, r6
 8003fda:	f8c0 362c 	str.w	r3, [r0, #1580]	; 0x62c
			customGraphBase::graph1.setGraphRangeX(0, customGraphMaxPoint/(24/customGraphTimeRange));
 8003fde:	4638      	mov	r0, r7
 8003fe0:	f7fe fe45 	bl	8002c6e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
			customGraphBase::graph1MajorXAxisLabel.setInterval(customGraphInterval);
 8003fe4:	f8d4 362c 	ldr.w	r3, [r4, #1580]	; 0x62c
        return i * scale;
 8003fe8:	f8d4 229c 	ldr.w	r2, [r4, #668]	; 0x29c
			customGraphBase::graph1.setGraphRangeYAutoScaled(true,30);
 8003fec:	2101      	movs	r1, #1
 8003fee:	4638      	mov	r0, r7
 8003ff0:	435a      	muls	r2, r3
 8003ff2:	2a00      	cmp	r2, #0
 8003ff4:	bfb8      	it	lt
 8003ff6:	4252      	neglt	r2, r2
 8003ff8:	f8c4 22a0 	str.w	r2, [r4, #672]	; 0x2a0
        setIntervalScaled(abs(interval) * dataScale);
 8003ffc:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
 8004000:	4353      	muls	r3, r2
 8004002:	221e      	movs	r2, #30
 8004004:	2b00      	cmp	r3, #0
 8004006:	bfb8      	it	lt
 8004008:	425b      	neglt	r3, r3
        gridInterval = abs(interval);
 800400a:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
 800400e:	f009 fc83 	bl	800d918 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi>
			customGraphBase::graph1MajorYAxisLabel.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/3);
 8004012:	4638      	mov	r0, r7
 8004014:	f7fe ffb8 	bl	8002f88 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>
 8004018:	4605      	mov	r5, r0
 800401a:	4638      	mov	r0, r7
 800401c:	f7fe ff8d 	bl	8002f3a <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>
 8004020:	1a2d      	subs	r5, r5, r0
 8004022:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 8004026:	fb95 f5f6 	sdiv	r5, r5, r6
 800402a:	4345      	muls	r5, r0
			customGraphBase::graph1MajorYAxisGrid.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/3);
 800402c:	4638      	mov	r0, r7
 800402e:	2d00      	cmp	r5, #0
 8004030:	bfb8      	it	lt
 8004032:	426d      	neglt	r5, r5
 8004034:	f8c4 52ec 	str.w	r5, [r4, #748]	; 0x2ec
 8004038:	f7fe ffa6 	bl	8002f88 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>
 800403c:	4605      	mov	r5, r0
 800403e:	4638      	mov	r0, r7
 8004040:	f7fe ff7b 	bl	8002f3a <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>
 8004044:	1a2d      	subs	r5, r5, r0
        setIntervalScaled(abs(interval) * dataScale);
 8004046:	f8d4 025c 	ldr.w	r0, [r4, #604]	; 0x25c
        return graphArea.getWidth() - (leftPadding + rightPadding);
 800404a:	f8b4 116e 	ldrh.w	r1, [r4, #366]	; 0x16e
 800404e:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
 8004052:	fb95 f5f6 	sdiv	r5, r5, r6
 8004056:	4345      	muls	r5, r0
 8004058:	2d00      	cmp	r5, #0
 800405a:	bfb8      	it	lt
 800405c:	426d      	neglt	r5, r5
        gridInterval = abs(interval);
 800405e:	f8c4 5260 	str.w	r5, [r4, #608]	; 0x260
        return rect.width;
 8004062:	e736      	b.n	8003ed2 <_ZN11customGraph12setTimeRangeEi+0xba>
 8004064:	0000      	movs	r0, r0
	...

08004068 <_ZN11customGraph10initializeEv>:
{
 8004068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800406a:	4604      	mov	r4, r0
    customGraphBase::initialize();
 800406c:	f7ff f8af 	bl	80031ce <_ZN15customGraphBase10initializeEv>
    setTimeRange(24);
 8004070:	2118      	movs	r1, #24
 8004072:	4620      	mov	r0, r4
    timeLabel1_time = firstDataTime + 300 + 1200;
 8004074:	f504 67b4 	add.w	r7, r4, #1440	; 0x5a0
    setTimeRange(24);
 8004078:	f7ff fece 	bl	8003e18 <_ZN11customGraph12setTimeRangeEi>
    firstDataTime = 1681492804;			// 1681492804 --> 14 April 2023 17:20			//firstDataTime = time(NULL);
 800407c:	f504 63ae 	add.w	r3, r4, #1392	; 0x570
    timeLabel2_time = timeLabel1_time + 1200;
 8004080:	f504 66ba 	add.w	r6, r4, #1488	; 0x5d0
    timeLabel3_time = timeLabel2_time + 1200;
 8004084:	f504 65c0 	add.w	r5, r4, #1536	; 0x600
	updateTimeLabel(&dateLabel, dateLabelBuffer, &firstDataTime_tm);
 8004088:	f204 5214 	addw	r2, r4, #1300	; 0x514
    firstDataTime = 1681492804;			// 1681492804 --> 14 April 2023 17:20			//firstDataTime = time(NULL);
 800408c:	a118      	add	r1, pc, #96	; (adr r1, 80040f0 <_ZN11customGraph10initializeEv+0x88>)
 800408e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004092:	e943 0102 	strd	r0, r1, [r3, #-8]
    timeLabel1_time = firstDataTime + 300 + 1200;
 8004096:	a118      	add	r1, pc, #96	; (adr r1, 80040f8 <_ZN11customGraph10initializeEv+0x90>)
 8004098:	e9d1 0100 	ldrd	r0, r1, [r1]
 800409c:	e947 0102 	strd	r0, r1, [r7, #-8]
    timeLabel2_time = timeLabel1_time + 1200;
 80040a0:	a117      	add	r1, pc, #92	; (adr r1, 8004100 <_ZN11customGraph10initializeEv+0x98>)
 80040a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040a6:	e946 0102 	strd	r0, r1, [r6, #-8]
    timeLabel3_time = timeLabel2_time + 1200;
 80040aa:	a117      	add	r1, pc, #92	; (adr r1, 8004108 <_ZN11customGraph10initializeEv+0xa0>)
 80040ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040b0:	e945 0102 	strd	r0, r1, [r5, #-8]
	updateTimeLabel(&dateLabel, dateLabelBuffer, &firstDataTime_tm);
 80040b4:	f504 618f 	add.w	r1, r4, #1144	; 0x478
 80040b8:	4620      	mov	r0, r4
 80040ba:	f7ff fe6d 	bl	8003d98 <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
	updateTimeLabel(&timeLabel1, timeLabel1Buffer, &timeLabel1_time_tm);
 80040be:	463b      	mov	r3, r7
 80040c0:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
 80040c4:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 80040c8:	4620      	mov	r0, r4
 80040ca:	f7ff fe65 	bl	8003d98 <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
	updateTimeLabel(&timeLabel2, timeLabel2Buffer, &timeLabel2_time_tm);
 80040ce:	4633      	mov	r3, r6
 80040d0:	f204 42ec 	addw	r2, r4, #1260	; 0x4ec
 80040d4:	f504 7178 	add.w	r1, r4, #992	; 0x3e0
 80040d8:	4620      	mov	r0, r4
 80040da:	f7ff fe5d 	bl	8003d98 <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
	updateTimeLabel(&timeLabel3, timeLabel3Buffer, &timeLabel3_time_tm);
 80040de:	462b      	mov	r3, r5
 80040e0:	f504 629b 	add.w	r2, r4, #1240	; 0x4d8
 80040e4:	f504 7165 	add.w	r1, r4, #916	; 0x394
 80040e8:	4620      	mov	r0, r4
 80040ea:	f7ff fe55 	bl	8003d98 <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
}
 80040ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040f0:	64398b44 	.word	0x64398b44
 80040f4:	00000000 	.word	0x00000000
 80040f8:	64399120 	.word	0x64399120
 80040fc:	00000000 	.word	0x00000000
 8004100:	643995d0 	.word	0x643995d0
 8004104:	00000000 	.word	0x00000000
 8004108:	64399a80 	.word	0x64399a80
 800410c:	00000000 	.word	0x00000000

08004110 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE>:
    virtual void graph1Dragged(AbstractDataGraph::GraphDragEvent value)
 8004110:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004112:	ab02      	add	r3, sp, #8
 8004114:	4604      	mov	r4, r0
 8004116:	e903 0006 	stmdb	r3, {r1, r2}
 800411a:	4613      	mov	r3, r2
     *
     * @return The new x coordinate (dragged to).
     */
    int16_t getNewX() const
    {
        return dragNewX;
 800411c:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
        return dragOldX;
 8004120:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
		if(value.dragEvent.getNewX() > value.dragEvent.getOldX() && scrollCounter>0){
 8004124:	4293      	cmp	r3, r2
 8004126:	f280 80b8 	bge.w	800429a <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x18a>
 800412a:	f8d0 5554 	ldr.w	r5, [r0, #1364]	; 0x554
 800412e:	2d00      	cmp	r5, #0
 8004130:	f340 80b5 	ble.w	800429e <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x18e>
			graph1.setGraphRangeX(0 + scrollCounter, (graph1.getGraphRangeXMaxAsInt() - graph1.getGraphRangeXMinAsInt()) + scrollCounter);
 8004134:	f100 0658 	add.w	r6, r0, #88	; 0x58
			scrollCounter -= 1;
 8004138:	3d01      	subs	r5, #1
 800413a:	f8c0 5554 	str.w	r5, [r0, #1364]	; 0x554
			graph1.setGraphRangeX(0 + scrollCounter, (graph1.getGraphRangeXMaxAsInt() - graph1.getGraphRangeXMinAsInt()) + scrollCounter);
 800413e:	4630      	mov	r0, r6
 8004140:	f7fe fed4 	bl	8002eec <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>
 8004144:	4607      	mov	r7, r0
 8004146:	4630      	mov	r0, r6
 8004148:	f7fe fea9 	bl	8002e9e <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>
 800414c:	1a38      	subs	r0, r7, r0
 800414e:	4629      	mov	r1, r5
			graph1MajorYAxisLabel.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/3);
 8004150:	2703      	movs	r7, #3
			graph1.setGraphRangeX(0 + scrollCounter, (graph1.getGraphRangeXMaxAsInt() - graph1.getGraphRangeXMinAsInt()) + scrollCounter);
 8004152:	1942      	adds	r2, r0, r5
 8004154:	4630      	mov	r0, r6
 8004156:	f7fe fd8a 	bl	8002c6e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
			graph1.setGraphRangeYAutoScaled(true,30);
 800415a:	221e      	movs	r2, #30
 800415c:	2101      	movs	r1, #1
 800415e:	4630      	mov	r0, r6
 8004160:	f009 fbda 	bl	800d918 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi>
			graph1MajorYAxisLabel.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/3);
 8004164:	4630      	mov	r0, r6
 8004166:	f7fe ff0f 	bl	8002f88 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>
 800416a:	4605      	mov	r5, r0
 800416c:	4630      	mov	r0, r6
 800416e:	f7fe fee4 	bl	8002f3a <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>
 8004172:	1a2b      	subs	r3, r5, r0
        return i * scale;
 8004174:	f8d4 52e8 	ldr.w	r5, [r4, #744]	; 0x2e8
			graph1MajorYAxisGrid.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/3);
 8004178:	4630      	mov	r0, r6
			graph1MajorYAxisLabel.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/3);
 800417a:	fb93 f3f7 	sdiv	r3, r3, r7
 800417e:	436b      	muls	r3, r5
 8004180:	2b00      	cmp	r3, #0
 8004182:	bfb8      	it	lt
 8004184:	425b      	neglt	r3, r3
 8004186:	f8c4 32ec 	str.w	r3, [r4, #748]	; 0x2ec
			graph1MajorYAxisGrid.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/3);
 800418a:	f7fe fefd 	bl	8002f88 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>
 800418e:	4605      	mov	r5, r0
 8004190:	4630      	mov	r0, r6
 8004192:	f7fe fed2 	bl	8002f3a <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>
 8004196:	1a2d      	subs	r5, r5, r0
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8004198:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
 800419c:	f8b4 116e 	ldrh.w	r1, [r4, #366]	; 0x16e
        setIntervalScaled(abs(interval) * dataScale);
 80041a0:	f8d4 025c 	ldr.w	r0, [r4, #604]	; 0x25c
 80041a4:	4419      	add	r1, r3
 80041a6:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
			if(timeLabel1.getX() + 16 >= graph1.getX() + graph1.getGraphAreaMarginLeft() + graph1.getGraphAreaWidth() - graph1.getGraphAreaMarginRight()){
 80041aa:	f9b4 2430 	ldrsh.w	r2, [r4, #1072]	; 0x430
 80041ae:	1a5b      	subs	r3, r3, r1
 80041b0:	f9b4 105c 	ldrsh.w	r1, [r4, #92]	; 0x5c
 80041b4:	3210      	adds	r2, #16
			graph1MajorYAxisGrid.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/3);
 80041b6:	fb95 f5f7 	sdiv	r5, r5, r7
 80041ba:	4345      	muls	r5, r0
			if(timeLabel1.getX() + 16 >= graph1.getX() + graph1.getGraphAreaMarginLeft() + graph1.getGraphAreaWidth() - graph1.getGraphAreaMarginRight()){
 80041bc:	f9b4 00c4 	ldrsh.w	r0, [r4, #196]	; 0xc4
 80041c0:	4401      	add	r1, r0
 80041c2:	2d00      	cmp	r5, #0
 80041c4:	fa01 f383 	sxtah	r3, r1, r3
 80041c8:	f9b4 10f0 	ldrsh.w	r1, [r4, #240]	; 0xf0
 80041cc:	bfb8      	it	lt
 80041ce:	426d      	neglt	r5, r5
 80041d0:	1a5b      	subs	r3, r3, r1
        gridInterval = abs(interval);
 80041d2:	f8c4 5260 	str.w	r5, [r4, #608]	; 0x260
 80041d6:	429a      	cmp	r2, r3
 80041d8:	f280 80da 	bge.w	8004390 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x280>
 80041dc:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
 80041e0:	f8b4 116e 	ldrh.w	r1, [r4, #366]	; 0x16e
			if(timeLabel2.getX() + 16 >= graph1.getX() + graph1.getGraphAreaMarginLeft() + graph1.getGraphAreaWidth() - graph1.getGraphAreaMarginRight()){
 80041e4:	f9b4 00c4 	ldrsh.w	r0, [r4, #196]	; 0xc4
 80041e8:	4419      	add	r1, r3
 80041ea:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
 80041ee:	f9b4 23e4 	ldrsh.w	r2, [r4, #996]	; 0x3e4
 80041f2:	1a5b      	subs	r3, r3, r1
 80041f4:	f9b4 105c 	ldrsh.w	r1, [r4, #92]	; 0x5c
 80041f8:	3210      	adds	r2, #16
 80041fa:	4401      	add	r1, r0
 80041fc:	fa01 f383 	sxtah	r3, r1, r3
 8004200:	f9b4 10f0 	ldrsh.w	r1, [r4, #240]	; 0xf0
 8004204:	1a5b      	subs	r3, r3, r1
 8004206:	429a      	cmp	r2, r3
 8004208:	db17      	blt.n	800423a <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x12a>
				if(timeLabel2_pageCNTR > 0){
 800420a:	f8d4 355c 	ldr.w	r3, [r4, #1372]	; 0x55c
 800420e:	2b00      	cmp	r3, #0
 8004210:	dd13      	ble.n	800423a <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x12a>
					timeLabel2_pageCNTR--;
 8004212:	3b01      	subs	r3, #1
					updateTimeLabel(&timeLabel2, timeLabel2Buffer, &timeLabel2_time_tm);
 8004214:	4620      	mov	r0, r4
					timeLabel2_pageCNTR--;
 8004216:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
					timeLabel2_time = timeLabel2_time - 4800;
 800421a:	f504 63ba 	add.w	r3, r4, #1488	; 0x5d0
 800421e:	e953 2102 	ldrd	r2, r1, [r3, #-8]
 8004222:	f5b2 5296 	subs.w	r2, r2, #4800	; 0x12c0
 8004226:	f141 31ff 	adc.w	r1, r1, #4294967295
 800422a:	e943 2102 	strd	r2, r1, [r3, #-8]
					updateTimeLabel(&timeLabel2, timeLabel2Buffer, &timeLabel2_time_tm);
 800422e:	f204 42ec 	addw	r2, r4, #1260	; 0x4ec
 8004232:	f504 7178 	add.w	r1, r4, #992	; 0x3e0
 8004236:	f7ff fdaf 	bl	8003d98 <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
 800423a:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
 800423e:	f8b4 116e 	ldrh.w	r1, [r4, #366]	; 0x16e
			if(timeLabel3.getX() + 16 >= graph1.getX() + graph1.getGraphAreaMarginLeft() + graph1.getGraphAreaWidth() - graph1.getGraphAreaMarginRight()){
 8004242:	f9b4 00c4 	ldrsh.w	r0, [r4, #196]	; 0xc4
 8004246:	4419      	add	r1, r3
 8004248:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
 800424c:	f9b4 2398 	ldrsh.w	r2, [r4, #920]	; 0x398
 8004250:	1a5b      	subs	r3, r3, r1
 8004252:	f9b4 105c 	ldrsh.w	r1, [r4, #92]	; 0x5c
 8004256:	3210      	adds	r2, #16
 8004258:	4401      	add	r1, r0
 800425a:	fa01 f383 	sxtah	r3, r1, r3
 800425e:	f9b4 10f0 	ldrsh.w	r1, [r4, #240]	; 0xf0
 8004262:	1a5b      	subs	r3, r3, r1
 8004264:	429a      	cmp	r2, r3
 8004266:	db1a      	blt.n	800429e <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x18e>
				if(timeLabel3_pageCNTR > 0){
 8004268:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
 800426c:	2b00      	cmp	r3, #0
 800426e:	dd16      	ble.n	800429e <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x18e>
					timeLabel3_pageCNTR--;
 8004270:	3b01      	subs	r3, #1
 8004272:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
					timeLabel3_time = timeLabel3_time - 4800;
 8004276:	f504 63c0 	add.w	r3, r4, #1536	; 0x600
 800427a:	e953 2102 	ldrd	r2, r1, [r3, #-8]
 800427e:	f5b2 5296 	subs.w	r2, r2, #4800	; 0x12c0
 8004282:	f141 31ff 	adc.w	r1, r1, #4294967295
				updateTimeLabel(&timeLabel3, timeLabel3Buffer, &timeLabel3_time_tm);
 8004286:	4620      	mov	r0, r4
				timeLabel3_time = timeLabel3_time + 4800;
 8004288:	e943 2102 	strd	r2, r1, [r3, #-8]
				updateTimeLabel(&timeLabel3, timeLabel3Buffer, &timeLabel3_time_tm);
 800428c:	f504 629b 	add.w	r2, r4, #1240	; 0x4d8
 8004290:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8004294:	f7ff fd80 	bl	8003d98 <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
 8004298:	e001      	b.n	800429e <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x18e>
		else if(value.dragEvent.getNewX() < value.dragEvent.getOldX()/* && (graph1.getGraphRangeXMaxAsInt() - graph1.getGraphRangeXMinAsInt())+scrollCounter<graph1.getUsedCapacity()*/){
 800429a:	f300 8093 	bgt.w	80043c4 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x2b4>
		timeLabel1_Pos = CWRUtil::muldiv_toQ5(((timeLabel1_pageCNTR*customGraphInterval*3)+1*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 800429e:	f8d4 662c 	ldr.w	r6, [r4, #1580]	; 0x62c
 80042a2:	f8b4 116e 	ldrh.w	r1, [r4, #366]	; 0x16e
 80042a6:	f8b4 5170 	ldrh.w	r5, [r4, #368]	; 0x170
 80042aa:	f8d4 3558 	ldr.w	r3, [r4, #1368]	; 0x558
 80042ae:	440d      	add	r5, r1
 80042b0:	f8b4 1098 	ldrh.w	r1, [r4, #152]	; 0x98
 80042b4:	4373      	muls	r3, r6
 80042b6:	1b49      	subs	r1, r1, r5
 80042b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80042bc:	b209      	sxth	r1, r1
 80042be:	4433      	add	r3, r6
 80042c0:	3901      	subs	r1, #1
 80042c2:	e9d4 0261 	ldrd	r0, r2, [r4, #388]	; 0x184
 80042c6:	1a12      	subs	r2, r2, r0
 80042c8:	1a18      	subs	r0, r3, r0
 80042ca:	f7ff f8ca 	bl	8003462 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
        return leftPadding;
 80042ce:	f9b4 116e 	ldrsh.w	r1, [r4, #366]	; 0x16e
		timeLabel2_Pos = CWRUtil::muldiv_toQ5(((timeLabel2_pageCNTR*customGraphInterval*3)+2*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 80042d2:	f8d4 662c 	ldr.w	r6, [r4, #1580]	; 0x62c
        return graphArea.getWidth() - (leftPadding + rightPadding);
 80042d6:	f8b4 5170 	ldrh.w	r5, [r4, #368]	; 0x170
            return Q5(v + q5.v);
 80042da:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 80042de:	f8d4 355c 	ldr.w	r3, [r4, #1372]	; 0x55c
 80042e2:	440d      	add	r5, r1
 80042e4:	f8b4 1098 	ldrh.w	r1, [r4, #152]	; 0x98
 80042e8:	4373      	muls	r3, r6
 80042ea:	1b49      	subs	r1, r1, r5
		timeLabel1_Pos = CWRUtil::muldiv_toQ5(((timeLabel1_pageCNTR*customGraphInterval*3)+1*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 80042ec:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
		timeLabel2_Pos = CWRUtil::muldiv_toQ5(((timeLabel2_pageCNTR*customGraphInterval*3)+2*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 80042f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80042f4:	b209      	sxth	r1, r1
 80042f6:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 80042fa:	3901      	subs	r1, #1
 80042fc:	e9d4 0261 	ldrd	r0, r2, [r4, #388]	; 0x184
 8004300:	1a12      	subs	r2, r2, r0
 8004302:	1a18      	subs	r0, r3, r0
 8004304:	f7ff f8ad 	bl	8003462 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
        return leftPadding;
 8004308:	f9b4 116e 	ldrsh.w	r1, [r4, #366]	; 0x16e
        return graphArea.getWidth() - (leftPadding + rightPadding);
 800430c:	f8b4 5170 	ldrh.w	r5, [r4, #368]	; 0x170
 8004310:	eb00 1041 	add.w	r0, r0, r1, lsl #5
		timeLabel3_Pos = CWRUtil::muldiv_toQ5(((timeLabel3_pageCNTR*customGraphInterval*3)+3*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 8004314:	f8d4 362c 	ldr.w	r3, [r4, #1580]	; 0x62c
 8004318:	440d      	add	r5, r1
 800431a:	f8b4 1098 	ldrh.w	r1, [r4, #152]	; 0x98
		timeLabel2_Pos = CWRUtil::muldiv_toQ5(((timeLabel2_pageCNTR*customGraphInterval*3)+2*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 800431e:	f8c4 054c 	str.w	r0, [r4, #1356]	; 0x54c
 8004322:	1b49      	subs	r1, r1, r5
		timeLabel3_Pos = CWRUtil::muldiv_toQ5(((timeLabel3_pageCNTR*customGraphInterval*3)+3*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 8004324:	f8d4 5560 	ldr.w	r5, [r4, #1376]	; 0x560
 8004328:	fb05 3303 	mla	r3, r5, r3, r3
 800432c:	b209      	sxth	r1, r1
 800432e:	e9d4 0261 	ldrd	r0, r2, [r4, #388]	; 0x184
 8004332:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004336:	3901      	subs	r1, #1
 8004338:	1a12      	subs	r2, r2, r0
 800433a:	1a18      	subs	r0, r3, r0
 800433c:	f7ff f891 	bl	8003462 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
 8004340:	f9b4 316e 	ldrsh.w	r3, [r4, #366]	; 0x16e
 8004344:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004348:	f8c4 0550 	str.w	r0, [r4, #1360]	; 0x550
		timeLabel1.setX(graph1.getX() + timeLabel1_Pos.round()  + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - 22);
 800434c:	f504 60a9 	add.w	r0, r4, #1352	; 0x548
 8004350:	f7ff fcdb 	bl	8003d0a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8004354:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
 8004358:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 800435c:	4413      	add	r3, r2
 800435e:	f8b4 20f0 	ldrh.w	r2, [r4, #240]	; 0xf0
 8004362:	3b16      	subs	r3, #22
 8004364:	1a9b      	subs	r3, r3, r2
 8004366:	fa10 f083 	uxtah	r0, r0, r3
 800436a:	b29d      	uxth	r5, r3
        rect.x = x;
 800436c:	f8a4 0430 	strh.w	r0, [r4, #1072]	; 0x430
		timeLabel2.setX(graph1.getX() + timeLabel2_Pos.round()  + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - 22);
 8004370:	f204 504c 	addw	r0, r4, #1356	; 0x54c
 8004374:	f7ff fcc9 	bl	8003d0a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8004378:	4428      	add	r0, r5
 800437a:	f8a4 03e4 	strh.w	r0, [r4, #996]	; 0x3e4
		timeLabel3.setX(graph1.getX() + timeLabel3_Pos.round()  + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - 22);
 800437e:	f504 60aa 	add.w	r0, r4, #1360	; 0x550
 8004382:	f7ff fcc2 	bl	8003d0a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8004386:	4428      	add	r0, r5
 8004388:	f8a4 0398 	strh.w	r0, [r4, #920]	; 0x398
	}
 800438c:	b003      	add	sp, #12
 800438e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if(timeLabel1_pageCNTR > 0){
 8004390:	f8d4 3558 	ldr.w	r3, [r4, #1368]	; 0x558
 8004394:	2b00      	cmp	r3, #0
 8004396:	f77f af21 	ble.w	80041dc <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0xcc>
					timeLabel1_pageCNTR--;
 800439a:	3b01      	subs	r3, #1
					updateTimeLabel(&timeLabel1, timeLabel1Buffer, &timeLabel1_time_tm);
 800439c:	4620      	mov	r0, r4
					timeLabel1_pageCNTR--;
 800439e:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
					timeLabel1_time = timeLabel1_time - 4800;
 80043a2:	f504 63b4 	add.w	r3, r4, #1440	; 0x5a0
 80043a6:	e953 2102 	ldrd	r2, r1, [r3, #-8]
 80043aa:	f5b2 5296 	subs.w	r2, r2, #4800	; 0x12c0
 80043ae:	f141 31ff 	adc.w	r1, r1, #4294967295
 80043b2:	e943 2102 	strd	r2, r1, [r3, #-8]
					updateTimeLabel(&timeLabel1, timeLabel1Buffer, &timeLabel1_time_tm);
 80043b6:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
 80043ba:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 80043be:	f7ff fceb 	bl	8003d98 <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
 80043c2:	e70b      	b.n	80041dc <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0xcc>
			scrollCounter += 1;
 80043c4:	f8d0 5554 	ldr.w	r5, [r0, #1364]	; 0x554
			graph1.setGraphRangeX(0 + scrollCounter, (graph1.getGraphRangeXMaxAsInt() - graph1.getGraphRangeXMinAsInt()) + scrollCounter);
 80043c8:	f100 0658 	add.w	r6, r0, #88	; 0x58
			scrollCounter += 1;
 80043cc:	3501      	adds	r5, #1
 80043ce:	f8c0 5554 	str.w	r5, [r0, #1364]	; 0x554
			graph1.setGraphRangeX(0 + scrollCounter, (graph1.getGraphRangeXMaxAsInt() - graph1.getGraphRangeXMinAsInt()) + scrollCounter);
 80043d2:	4630      	mov	r0, r6
 80043d4:	f7fe fd8a 	bl	8002eec <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>
 80043d8:	4607      	mov	r7, r0
 80043da:	4630      	mov	r0, r6
 80043dc:	f7fe fd5f 	bl	8002e9e <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>
 80043e0:	1a38      	subs	r0, r7, r0
 80043e2:	4629      	mov	r1, r5
			graph1MajorYAxisLabel.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/3);
 80043e4:	2703      	movs	r7, #3
			graph1.setGraphRangeX(0 + scrollCounter, (graph1.getGraphRangeXMaxAsInt() - graph1.getGraphRangeXMinAsInt()) + scrollCounter);
 80043e6:	1942      	adds	r2, r0, r5
 80043e8:	4630      	mov	r0, r6
 80043ea:	f7fe fc40 	bl	8002c6e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
			graph1.setGraphRangeYAutoScaled(true,30);
 80043ee:	221e      	movs	r2, #30
 80043f0:	2101      	movs	r1, #1
 80043f2:	4630      	mov	r0, r6
 80043f4:	f009 fa90 	bl	800d918 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi>
			graph1MajorYAxisLabel.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/3);
 80043f8:	4630      	mov	r0, r6
 80043fa:	f7fe fdc5 	bl	8002f88 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>
 80043fe:	4605      	mov	r5, r0
 8004400:	4630      	mov	r0, r6
 8004402:	f7fe fd9a 	bl	8002f3a <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>
 8004406:	1a2b      	subs	r3, r5, r0
        return i * scale;
 8004408:	f8d4 52e8 	ldr.w	r5, [r4, #744]	; 0x2e8
			graph1MajorYAxisGrid.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/3);
 800440c:	4630      	mov	r0, r6
			graph1MajorYAxisLabel.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/3);
 800440e:	fb93 f3f7 	sdiv	r3, r3, r7
 8004412:	436b      	muls	r3, r5
 8004414:	2b00      	cmp	r3, #0
 8004416:	bfb8      	it	lt
 8004418:	425b      	neglt	r3, r3
 800441a:	f8c4 32ec 	str.w	r3, [r4, #748]	; 0x2ec
			graph1MajorYAxisGrid.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/3);
 800441e:	f7fe fdb3 	bl	8002f88 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>
 8004422:	4605      	mov	r5, r0
 8004424:	4630      	mov	r0, r6
 8004426:	f7fe fd88 	bl	8002f3a <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>
 800442a:	1a2d      	subs	r5, r5, r0
			if(timeLabel1.getX() + 16 <= graph1.getX() + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight()){
 800442c:	f9b4 10c4 	ldrsh.w	r1, [r4, #196]	; 0xc4
        setIntervalScaled(abs(interval) * dataScale);
 8004430:	f8d4 025c 	ldr.w	r0, [r4, #604]	; 0x25c
 8004434:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8004438:	f9b4 2430 	ldrsh.w	r2, [r4, #1072]	; 0x430
 800443c:	440b      	add	r3, r1
 800443e:	f9b4 10f0 	ldrsh.w	r1, [r4, #240]	; 0xf0
 8004442:	320f      	adds	r2, #15
 8004444:	1a5b      	subs	r3, r3, r1
			graph1MajorYAxisGrid.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/3);
 8004446:	fb95 f5f7 	sdiv	r5, r5, r7
 800444a:	4345      	muls	r5, r0
 800444c:	2d00      	cmp	r5, #0
 800444e:	bfb8      	it	lt
 8004450:	426d      	neglt	r5, r5
			if(timeLabel1.getX() + 16 <= graph1.getX() + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight()){
 8004452:	429a      	cmp	r2, r3
        gridInterval = abs(interval);
 8004454:	f8c4 5260 	str.w	r5, [r4, #608]	; 0x260
 8004458:	da15      	bge.n	8004486 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x376>
				timeLabel1_pageCNTR++;
 800445a:	f8d4 3558 	ldr.w	r3, [r4, #1368]	; 0x558
				updateTimeLabel(&timeLabel1, timeLabel1Buffer, &timeLabel1_time_tm);
 800445e:	4620      	mov	r0, r4
				timeLabel1_pageCNTR++;
 8004460:	3301      	adds	r3, #1
 8004462:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
				timeLabel1_time = timeLabel1_time + 4800;
 8004466:	f504 63b4 	add.w	r3, r4, #1440	; 0x5a0
 800446a:	e953 2102 	ldrd	r2, r1, [r3, #-8]
 800446e:	f512 5296 	adds.w	r2, r2, #4800	; 0x12c0
 8004472:	f141 0100 	adc.w	r1, r1, #0
 8004476:	e943 2102 	strd	r2, r1, [r3, #-8]
				updateTimeLabel(&timeLabel1, timeLabel1Buffer, &timeLabel1_time_tm);
 800447a:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
 800447e:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8004482:	f7ff fc89 	bl	8003d98 <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
			if(timeLabel2.getX() + 16 <= graph1.getX() + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight()){
 8004486:	f9b4 10c4 	ldrsh.w	r1, [r4, #196]	; 0xc4
 800448a:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 800448e:	f9b4 23e4 	ldrsh.w	r2, [r4, #996]	; 0x3e4
 8004492:	440b      	add	r3, r1
 8004494:	f9b4 10f0 	ldrsh.w	r1, [r4, #240]	; 0xf0
 8004498:	320f      	adds	r2, #15
 800449a:	1a5b      	subs	r3, r3, r1
 800449c:	429a      	cmp	r2, r3
 800449e:	da15      	bge.n	80044cc <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x3bc>
				timeLabel2_pageCNTR++;
 80044a0:	f8d4 355c 	ldr.w	r3, [r4, #1372]	; 0x55c
				updateTimeLabel(&timeLabel2, timeLabel2Buffer, &timeLabel2_time_tm);
 80044a4:	4620      	mov	r0, r4
				timeLabel2_pageCNTR++;
 80044a6:	3301      	adds	r3, #1
 80044a8:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
				timeLabel2_time = timeLabel2_time + 4800;
 80044ac:	f504 63ba 	add.w	r3, r4, #1488	; 0x5d0
 80044b0:	e953 2102 	ldrd	r2, r1, [r3, #-8]
 80044b4:	f512 5296 	adds.w	r2, r2, #4800	; 0x12c0
 80044b8:	f141 0100 	adc.w	r1, r1, #0
 80044bc:	e943 2102 	strd	r2, r1, [r3, #-8]
				updateTimeLabel(&timeLabel2, timeLabel2Buffer, &timeLabel2_time_tm);
 80044c0:	f204 42ec 	addw	r2, r4, #1260	; 0x4ec
 80044c4:	f504 7178 	add.w	r1, r4, #992	; 0x3e0
 80044c8:	f7ff fc66 	bl	8003d98 <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
			if(timeLabel3.getX() + 16 <= graph1.getX() + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight()){
 80044cc:	f9b4 10c4 	ldrsh.w	r1, [r4, #196]	; 0xc4
 80044d0:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 80044d4:	f9b4 2398 	ldrsh.w	r2, [r4, #920]	; 0x398
 80044d8:	440b      	add	r3, r1
 80044da:	f9b4 10f0 	ldrsh.w	r1, [r4, #240]	; 0xf0
 80044de:	320f      	adds	r2, #15
 80044e0:	1a5b      	subs	r3, r3, r1
 80044e2:	429a      	cmp	r2, r3
 80044e4:	f6bf aedb 	bge.w	800429e <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x18e>
				timeLabel3_pageCNTR++;
 80044e8:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
 80044ec:	3301      	adds	r3, #1
 80044ee:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
				timeLabel3_time = timeLabel3_time + 4800;
 80044f2:	f504 63c0 	add.w	r3, r4, #1536	; 0x600
 80044f6:	e953 2102 	ldrd	r2, r1, [r3, #-8]
 80044fa:	f512 5296 	adds.w	r2, r2, #4800	; 0x12c0
 80044fe:	f141 0100 	adc.w	r1, r1, #0
 8004502:	e6c0      	b.n	8004286 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x176>

08004504 <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8004504:	2301      	movs	r3, #1
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 8004506:	f44f 7248 	mov.w	r2, #800	; 0x320
  
  return FT6X06_OK;
}
 800450a:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 800450c:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 800450e:	2302      	movs	r3, #2
 8004510:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 8004512:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004516:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 800451a:	4770      	bx	lr

0800451c <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 800451c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8004520:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 8004522:	bf04      	itt	eq
 8004524:	2300      	moveq	r3, #0
 8004526:	f880 3024 	strbeq.w	r3, [r0, #36]	; 0x24
  }
  
  return FT6X06_OK;
}
 800452a:	2000      	movs	r0, #0
 800452c:	4770      	bx	lr

0800452e <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 800452e:	2000      	movs	r0, #0
 8004530:	4770      	bx	lr

08004532 <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8004532:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004534:	6904      	ldr	r4, [r0, #16]
 8004536:	8900      	ldrh	r0, [r0, #8]
 8004538:	46a4      	mov	ip, r4
}
 800453a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800453e:	4760      	bx	ip

08004540 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8004540:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004542:	68c4      	ldr	r4, [r0, #12]
 8004544:	8900      	ldrh	r0, [r0, #8]
 8004546:	46a4      	mov	ip, r4
}
 8004548:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800454c:	4760      	bx	ip

0800454e <FT6X06_GestureConfig>:
{
 800454e:	e92d 4320 	stmdb	sp!, {r5, r8, r9, lr}
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8004552:	f100 0818 	add.w	r8, r0, #24
{
 8004556:	4689      	mov	r9, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8004558:	7809      	ldrb	r1, [r1, #0]
 800455a:	4640      	mov	r0, r8
 800455c:	f000 f918 	bl	8004790 <ft6x06_radian_value>
 8004560:	4605      	mov	r5, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8004562:	f899 1004 	ldrb.w	r1, [r9, #4]
 8004566:	4640      	mov	r0, r8
 8004568:	f000 f91e 	bl	80047a8 <ft6x06_offset_left_right>
 800456c:	4405      	add	r5, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800456e:	f899 1008 	ldrb.w	r1, [r9, #8]
 8004572:	4640      	mov	r0, r8
 8004574:	f000 f924 	bl	80047c0 <ft6x06_offset_up_down>
 8004578:	4405      	add	r5, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800457a:	f899 100c 	ldrb.w	r1, [r9, #12]
 800457e:	4640      	mov	r0, r8
 8004580:	f000 f92a 	bl	80047d8 <ft6x06_disatnce_left_right>
 8004584:	4405      	add	r5, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8004586:	f899 1010 	ldrb.w	r1, [r9, #16]
 800458a:	4640      	mov	r0, r8
 800458c:	f000 f930 	bl	80047f0 <ft6x06_distance_up_down>
 8004590:	4405      	add	r5, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8004592:	f899 1014 	ldrb.w	r1, [r9, #20]
 8004596:	4640      	mov	r0, r8
 8004598:	f000 f936 	bl	8004808 <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 800459c:	42c5      	cmn	r5, r0
}
 800459e:	bf14      	ite	ne
 80045a0:	f04f 30ff 	movne.w	r0, #4294967295
 80045a4:	2000      	moveq	r0, #0
 80045a6:	e8bd 8320 	ldmia.w	sp!, {r5, r8, r9, pc}

080045aa <FT6X06_ReadID>:
{
 80045aa:	b513      	push	{r0, r1, r4, lr}
 80045ac:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 80045ae:	3018      	adds	r0, #24
 80045b0:	f10d 0107 	add.w	r1, sp, #7
 80045b4:	f000 f940 	bl	8004838 <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 80045b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80045bc:	6023      	str	r3, [r4, #0]
}
 80045be:	b002      	add	sp, #8
 80045c0:	bd10      	pop	{r4, pc}

080045c2 <FT6X06_GetState>:
{
 80045c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80045c4:	f100 0518 	add.w	r5, r0, #24
{
 80045c8:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80045ca:	a901      	add	r1, sp, #4
 80045cc:	4628      	mov	r0, r5
 80045ce:	f000 f8d2 	bl	8004776 <ft6x06_td_status>
 80045d2:	bb08      	cbnz	r0, 8004618 <FT6X06_GetState+0x56>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 80045d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 80045d8:	2b02      	cmp	r3, #2
 80045da:	bf98      	it	ls
 80045dc:	4618      	movls	r0, r3
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 80045de:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 80045e0:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 80045e2:	2103      	movs	r1, #3
 80045e4:	4628      	mov	r0, r5
 80045e6:	eb0d 0203 	add.w	r2, sp, r3
 80045ea:	f000 f8b1 	bl	8004750 <ft6x06_read_reg>
 80045ee:	b9b0      	cbnz	r0, 800461e <FT6X06_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80045f0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80045f4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80045f8:	021b      	lsls	r3, r3, #8
 80045fa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80045fe:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8004600:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004604:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8004606:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800460a:	021b      	lsls	r3, r3, #8
 800460c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004610:	4313      	orrs	r3, r2
 8004612:	60a3      	str	r3, [r4, #8]
}
 8004614:	b003      	add	sp, #12
 8004616:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8004618:	f04f 30ff 	mov.w	r0, #4294967295
 800461c:	e7df      	b.n	80045de <FT6X06_GetState+0x1c>
    ret = FT6X06_ERROR;
 800461e:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8004622:	e7f7      	b.n	8004614 <FT6X06_GetState+0x52>

08004624 <FT6X06_GetGesture>:
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 8004624:	3018      	adds	r0, #24
 8004626:	f000 b8a1 	b.w	800476c <ft6x06_gest_id>

0800462a <FT6X06_EnableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 800462a:	2101      	movs	r1, #1
 800462c:	3018      	adds	r0, #24
 800462e:	f000 b8f7 	b.w	8004820 <ft6x06_g_mode>

08004632 <FT6X06_DisableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 8004632:	2100      	movs	r1, #0
 8004634:	3018      	adds	r0, #24
 8004636:	f000 b8f3 	b.w	8004820 <ft6x06_g_mode>

0800463a <FT6X06_Init>:
{
 800463a:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 800463c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8004640:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 8004642:	b96b      	cbnz	r3, 8004660 <FT6X06_Init+0x26>
    pObj->IO.Init();
 8004644:	6803      	ldr	r3, [r0, #0]
 8004646:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 8004648:	4620      	mov	r0, r4
 800464a:	f7ff fff2 	bl	8004632 <FT6X06_DisableIT>
  if(ret != FT6X06_OK)
 800464e:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 8004650:	f04f 0301 	mov.w	r3, #1
  if(ret != FT6X06_OK)
 8004654:	bf18      	it	ne
 8004656:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 8004658:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if(ret != FT6X06_OK)
 800465c:	4240      	negs	r0, r0
}
 800465e:	bd10      	pop	{r4, pc}
  int32_t ret = FT6X06_OK;
 8004660:	2000      	movs	r0, #0
  return ret;
 8004662:	e7fc      	b.n	800465e <FT6X06_Init+0x24>

08004664 <FT6X06_ClearIT>:
 8004664:	2000      	movs	r0, #0
 8004666:	4770      	bx	lr

08004668 <FT6X06_GetMultiTouchState>:
{
 8004668:	b530      	push	{r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 800466a:	f100 0518 	add.w	r5, r0, #24
{
 800466e:	b085      	sub	sp, #20
 8004670:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8004672:	4628      	mov	r0, r5
 8004674:	a901      	add	r1, sp, #4
 8004676:	f000 f87e 	bl	8004776 <ft6x06_td_status>
 800467a:	2800      	cmp	r0, #0
 800467c:	d145      	bne.n	800470a <FT6X06_GetMultiTouchState+0xa2>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 800467e:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8004682:	2b02      	cmp	r3, #2
 8004684:	bf98      	it	ls
 8004686:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8004688:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 800468a:	230c      	movs	r3, #12
 800468c:	aa01      	add	r2, sp, #4
 800468e:	2103      	movs	r1, #3
 8004690:	4628      	mov	r0, r5
 8004692:	f000 f85d 	bl	8004750 <ft6x06_read_reg>
 8004696:	2800      	cmp	r0, #0
 8004698:	d13a      	bne.n	8004710 <FT6X06_GetMultiTouchState+0xa8>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800469a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800469e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80046a2:	0213      	lsls	r3, r2, #8
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 80046a4:	0992      	lsrs	r2, r2, #6
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80046a6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 80046aa:	61e2      	str	r2, [r4, #28]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80046ac:	430b      	orrs	r3, r1
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80046ae:	f89d 1007 	ldrb.w	r1, [sp, #7]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80046b2:	f89d 200a 	ldrb.w	r2, [sp, #10]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80046b6:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80046b8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80046bc:	021b      	lsls	r3, r3, #8
 80046be:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80046c2:	430b      	orrs	r3, r1
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80046c4:	f89d 100b 	ldrb.w	r1, [sp, #11]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80046c8:	60e3      	str	r3, [r4, #12]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 80046ca:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80046ce:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 80046d0:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80046d4:	091b      	lsrs	r3, r3, #4
 80046d6:	6263      	str	r3, [r4, #36]	; 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80046d8:	0213      	lsls	r3, r2, #8
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 80046da:	0992      	lsrs	r2, r2, #6
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80046dc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 80046e0:	6222      	str	r2, [r4, #32]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80046e2:	430b      	orrs	r3, r1
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 80046e4:	f89d 100d 	ldrb.w	r1, [sp, #13]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80046e8:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 80046ea:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80046ee:	021b      	lsls	r3, r3, #8
 80046f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80046f4:	430b      	orrs	r3, r1
 80046f6:	6123      	str	r3, [r4, #16]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 80046f8:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80046fc:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 80046fe:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8004702:	091b      	lsrs	r3, r3, #4
 8004704:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8004706:	b005      	add	sp, #20
 8004708:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 800470a:	f04f 30ff 	mov.w	r0, #4294967295
 800470e:	e7bb      	b.n	8004688 <FT6X06_GetMultiTouchState+0x20>
    ret = FT6X06_ERROR;
 8004710:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 8004714:	e7f7      	b.n	8004706 <FT6X06_GetMultiTouchState+0x9e>
	...

08004718 <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 8004718:	b190      	cbz	r0, 8004740 <FT6X06_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 800471a:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 800471c:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800471e:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8004720:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8004722:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 8004724:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004726:	68ca      	ldr	r2, [r1, #12]
 8004728:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800472a:	690a      	ldr	r2, [r1, #16]
 800472c:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800472e:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8004730:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 8004732:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8004734:	4a04      	ldr	r2, [pc, #16]	; (8004748 <FT6X06_RegisterBusIO+0x30>)
 8004736:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8004738:	4a04      	ldr	r2, [pc, #16]	; (800474c <FT6X06_RegisterBusIO+0x34>)
 800473a:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 800473c:	b103      	cbz	r3, 8004740 <FT6X06_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 800473e:	4718      	bx	r3
}
 8004740:	f04f 30ff 	mov.w	r0, #4294967295
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	08004533 	.word	0x08004533
 800474c:	08004541 	.word	0x08004541

08004750 <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8004750:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004752:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8004756:	46a4      	mov	ip, r4
}
 8004758:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800475c:	4760      	bx	ip

0800475e <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 800475e:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8004760:	6804      	ldr	r4, [r0, #0]
 8004762:	6880      	ldr	r0, [r0, #8]
 8004764:	46a4      	mov	ip, r4
}
 8004766:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800476a:	4760      	bx	ip

0800476c <ft6x06_gest_id>:
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 800476c:	2301      	movs	r3, #1
{
 800476e:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8004770:	4619      	mov	r1, r3
 8004772:	f7ff bfed 	b.w	8004750 <ft6x06_read_reg>

08004776 <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8004776:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8004778:	460a      	mov	r2, r1
{
 800477a:	460c      	mov	r4, r1
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 800477c:	2301      	movs	r3, #1
 800477e:	2102      	movs	r1, #2
 8004780:	f7ff ffe6 	bl	8004750 <ft6x06_read_reg>
  
  if(ret == 0)
 8004784:	b918      	cbnz	r0, 800478e <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 8004786:	7823      	ldrb	r3, [r4, #0]
 8004788:	f003 030f 	and.w	r3, r3, #15
 800478c:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 800478e:	bd10      	pop	{r4, pc}

08004790 <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004790:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8004792:	2301      	movs	r3, #1
{
 8004794:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8004798:	f10d 0207 	add.w	r2, sp, #7
 800479c:	2191      	movs	r1, #145	; 0x91
 800479e:	f7ff ffde 	bl	800475e <ft6x06_write_reg>
}
 80047a2:	b003      	add	sp, #12
 80047a4:	f85d fb04 	ldr.w	pc, [sp], #4

080047a8 <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 80047a8:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 80047aa:	2301      	movs	r3, #1
{
 80047ac:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 80047b0:	f10d 0207 	add.w	r2, sp, #7
 80047b4:	2192      	movs	r1, #146	; 0x92
 80047b6:	f7ff ffd2 	bl	800475e <ft6x06_write_reg>
}
 80047ba:	b003      	add	sp, #12
 80047bc:	f85d fb04 	ldr.w	pc, [sp], #4

080047c0 <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 80047c0:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 80047c2:	2301      	movs	r3, #1
{
 80047c4:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 80047c8:	f10d 0207 	add.w	r2, sp, #7
 80047cc:	2193      	movs	r1, #147	; 0x93
 80047ce:	f7ff ffc6 	bl	800475e <ft6x06_write_reg>
}
 80047d2:	b003      	add	sp, #12
 80047d4:	f85d fb04 	ldr.w	pc, [sp], #4

080047d8 <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 80047d8:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 80047da:	2301      	movs	r3, #1
{
 80047dc:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 80047e0:	f10d 0207 	add.w	r2, sp, #7
 80047e4:	2194      	movs	r1, #148	; 0x94
 80047e6:	f7ff ffba 	bl	800475e <ft6x06_write_reg>
}
 80047ea:	b003      	add	sp, #12
 80047ec:	f85d fb04 	ldr.w	pc, [sp], #4

080047f0 <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 80047f0:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 80047f2:	2301      	movs	r3, #1
{
 80047f4:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 80047f8:	f10d 0207 	add.w	r2, sp, #7
 80047fc:	2195      	movs	r1, #149	; 0x95
 80047fe:	f7ff ffae 	bl	800475e <ft6x06_write_reg>
}
 8004802:	b003      	add	sp, #12
 8004804:	f85d fb04 	ldr.w	pc, [sp], #4

08004808 <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004808:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 800480a:	2301      	movs	r3, #1
{
 800480c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8004810:	f10d 0207 	add.w	r2, sp, #7
 8004814:	2196      	movs	r1, #150	; 0x96
 8004816:	f7ff ffa2 	bl	800475e <ft6x06_write_reg>
}
 800481a:	b003      	add	sp, #12
 800481c:	f85d fb04 	ldr.w	pc, [sp], #4

08004820 <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004820:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8004822:	2301      	movs	r3, #1
{
 8004824:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8004828:	f10d 0207 	add.w	r2, sp, #7
 800482c:	21a4      	movs	r1, #164	; 0xa4
 800482e:	f7ff ff96 	bl	800475e <ft6x06_write_reg>
}
 8004832:	b003      	add	sp, #12
 8004834:	f85d fb04 	ldr.w	pc, [sp], #4

08004838 <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8004838:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 800483a:	2301      	movs	r3, #1
 800483c:	21a8      	movs	r1, #168	; 0xa8
 800483e:	f7ff bf87 	b.w	8004750 <ft6x06_read_reg>
	...

08004844 <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8004844:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8004846:	2201      	movs	r2, #1
 8004848:	4b07      	ldr	r3, [pc, #28]	; (8004868 <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 800484a:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 800484e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004850:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004852:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 8004854:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004856:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800485a:	f005 f961 	bl	8009b20 <HAL_SDRAM_SendCommand>
 800485e:	3800      	subs	r0, #0
 8004860:	bf18      	it	ne
 8004862:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004864:	4240      	negs	r0, r0
 8004866:	bd08      	pop	{r3, pc}
 8004868:	24004ae8 	.word	0x24004ae8

0800486c <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800486c:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 800486e:	2202      	movs	r2, #2
 8004870:	4b08      	ldr	r3, [pc, #32]	; (8004894 <IS42S32800J_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 8004872:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 8004876:	2101      	movs	r1, #1
 8004878:	2200      	movs	r2, #0
 800487a:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800487e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004882:	4619      	mov	r1, r3
 8004884:	f005 f94c 	bl	8009b20 <HAL_SDRAM_SendCommand>
 8004888:	3800      	subs	r0, #0
 800488a:	bf18      	it	ne
 800488c:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 800488e:	4240      	negs	r0, r0
 8004890:	bd08      	pop	{r3, pc}
 8004892:	bf00      	nop
 8004894:	24004ae8 	.word	0x24004ae8

08004898 <IS42S32800J_ModeRegConfig>:
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004898:	e9d1 3203 	ldrd	r3, r2, [r1, #12]
{
 800489c:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800489e:	4313      	orrs	r3, r2
                     pRegMode->BurstType     |\
 80048a0:	694a      	ldr	r2, [r1, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80048a2:	4c0b      	ldr	r4, [pc, #44]	; (80048d0 <IS42S32800J_ModeRegConfig+0x38>)
                     pRegMode->BurstType     |\
 80048a4:	4313      	orrs	r3, r2
                     pRegMode->CASLatency    |\
 80048a6:	698a      	ldr	r2, [r1, #24]
 80048a8:	4313      	orrs	r3, r2
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80048aa:	69ca      	ldr	r2, [r1, #28]
 80048ac:	4313      	orrs	r3, r2
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80048ae:	2204      	movs	r2, #4
 80048b0:	6022      	str	r2, [r4, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 80048b2:	680a      	ldr	r2, [r1, #0]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80048b4:	4621      	mov	r1, r4
  Command.CommandTarget          = pRegMode->TargetBank;
 80048b6:	6062      	str	r2, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 80048b8:	2201      	movs	r2, #1
  Command.ModeRegisterDefinition = tmpmrd;
 80048ba:	e9c4 2302 	strd	r2, r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80048be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048c2:	f005 f92d 	bl	8009b20 <HAL_SDRAM_SendCommand>
 80048c6:	3800      	subs	r0, #0
 80048c8:	bf18      	it	ne
 80048ca:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80048cc:	4240      	negs	r0, r0
 80048ce:	bd10      	pop	{r4, pc}
 80048d0:	24004ae8 	.word	0x24004ae8

080048d4 <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 80048d4:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 80048d6:	4b08      	ldr	r3, [pc, #32]	; (80048f8 <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 80048d8:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 80048dc:	2108      	movs	r1, #8
 80048de:	2200      	movs	r2, #0
 80048e0:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80048e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048e8:	4619      	mov	r1, r3
 80048ea:	f005 f919 	bl	8009b20 <HAL_SDRAM_SendCommand>
 80048ee:	3800      	subs	r0, #0
 80048f0:	bf18      	it	ne
 80048f2:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80048f4:	4240      	negs	r0, r0
 80048f6:	bd08      	pop	{r3, pc}
 80048f8:	24004ae8 	.word	0x24004ae8

080048fc <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 80048fc:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 80048fe:	f005 f92e 	bl	8009b5e <HAL_SDRAM_ProgramRefreshRate>
 8004902:	3800      	subs	r0, #0
 8004904:	bf18      	it	ne
 8004906:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004908:	4240      	negs	r0, r0
 800490a:	bd08      	pop	{r3, pc}

0800490c <IS42S32800J_Init>:
{
 800490c:	b570      	push	{r4, r5, r6, lr}
 800490e:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8004910:	6809      	ldr	r1, [r1, #0]
{
 8004912:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8004914:	f7ff ff96 	bl	8004844 <IS42S32800J_ClockEnable>
 8004918:	b110      	cbz	r0, 8004920 <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 800491a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800491e:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8004920:	f001 fc98 	bl	8006254 <HAL_GetTick>
 8004924:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8004926:	f001 fc95 	bl	8006254 <HAL_GetTick>
 800492a:	4286      	cmp	r6, r0
 800492c:	d0fb      	beq.n	8004926 <IS42S32800J_Init+0x1a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 800492e:	6821      	ldr	r1, [r4, #0]
 8004930:	4628      	mov	r0, r5
 8004932:	f7ff ff9b 	bl	800486c <IS42S32800J_Precharge>
 8004936:	2800      	cmp	r0, #0
 8004938:	d1ef      	bne.n	800491a <IS42S32800J_Init+0xe>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 800493a:	4628      	mov	r0, r5
 800493c:	e9d4 1200 	ldrd	r1, r2, [r4]
 8004940:	f7ff ffc8 	bl	80048d4 <IS42S32800J_RefreshMode>
 8004944:	2800      	cmp	r0, #0
 8004946:	d1e8      	bne.n	800491a <IS42S32800J_Init+0xe>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8004948:	4621      	mov	r1, r4
 800494a:	4628      	mov	r0, r5
 800494c:	f7ff ffa4 	bl	8004898 <IS42S32800J_ModeRegConfig>
 8004950:	2800      	cmp	r0, #0
 8004952:	d1e2      	bne.n	800491a <IS42S32800J_Init+0xe>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 8004954:	68a1      	ldr	r1, [r4, #8]
 8004956:	4628      	mov	r0, r5
 8004958:	f7ff ffd0 	bl	80048fc <IS42S32800J_RefreshRate>
 800495c:	3800      	subs	r0, #0
 800495e:	bf18      	it	ne
 8004960:	2001      	movne	r0, #1
 8004962:	4240      	negs	r0, r0
  return ret;
 8004964:	e7db      	b.n	800491e <IS42S32800J_Init+0x12>

08004966 <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8004966:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800496a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 800496e:	f44f 7180 	mov.w	r1, #256	; 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8004972:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8004976:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800497a:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 800497e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004982:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 8004984:	2000      	movs	r0, #0
 8004986:	4770      	bx	lr

08004988 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8004988:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800498a:	f44f 7340 	mov.w	r3, #768	; 0x300
{
 800498e:	b095      	sub	sp, #84	; 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004990:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004994:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8004996:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004998:	920f      	str	r2, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 2;
 800499a:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 800499c:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800499e:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 80049a0:	920b      	str	r2, [sp, #44]	; 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80049a2:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80049a4:	9313      	str	r3, [sp, #76]	; 0x4c
  s_config.Match           = 0;
 80049a6:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80049a8:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 80049aa:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80049ac:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80049ae:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80049b2:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  s_config.Interval        = 0x10;
 80049b6:	2310      	movs	r3, #16
 80049b8:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80049ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80049be:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 80049c0:	f240 1301 	movw	r3, #257	; 0x101
 80049c4:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80049c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80049ca:	f003 fc88 	bl	80082de <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 80049ce:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;

}
 80049d0:	bf14      	ite	ne
 80049d2:	f06f 0004 	mvnne.w	r0, #4
 80049d6:	2000      	moveq	r0, #0
 80049d8:	b015      	add	sp, #84	; 0x54
 80049da:	f85d fb04 	ldr.w	pc, [sp], #4

080049de <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80049de:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80049e0:	f241 3288 	movw	r2, #5000	; 0x1388
{
 80049e4:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80049e6:	bf08      	it	eq
 80049e8:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 80049ec:	b095      	sub	sp, #84	; 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80049ee:	bf18      	it	ne
 80049f0:	f44f 7380 	movne.w	r3, #256	; 0x100
{
 80049f4:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80049f6:	a906      	add	r1, sp, #24
{
 80049f8:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80049fa:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 80049fc:	2306      	movs	r3, #6
 80049fe:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004a00:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004a02:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8004a06:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 8004a08:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004a0a:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004a0c:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a10:	f003 fb6a 	bl	80080e8 <HAL_QSPI_Command>
 8004a14:	bb20      	cbnz	r0, 8004a60 <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8004a16:	f240 2302 	movw	r3, #514	; 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 8004a1a:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8004a1c:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8004a1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004a22:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a24:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8004a26:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8004a2a:	f04f 0310 	mov.w	r3, #16
 8004a2e:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8004a32:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a36:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8004a38:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8004a3c:	bf0c      	ite	eq
 8004a3e:	f04f 7340 	moveq.w	r3, #50331648	; 0x3000000
 8004a42:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a46:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8004a48:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a4a:	f241 3388 	movw	r3, #5000	; 0x1388
 8004a4e:	f003 fc46 	bl	80082de <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 8004a52:	2800      	cmp	r0, #0
 8004a54:	bf0c      	ite	eq
 8004a56:	2000      	moveq	r0, #0
 8004a58:	f06f 0004 	mvnne.w	r0, #4
  }

  return MT25TL01G_OK;
}
 8004a5c:	b015      	add	sp, #84	; 0x54
 8004a5e:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 8004a60:	f06f 0001 	mvn.w	r0, #1
 8004a64:	e7fa      	b.n	8004a5c <MT25TL01G_WriteEnable+0x7e>

08004a66 <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004a66:	2903      	cmp	r1, #3
{
 8004a68:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004a6a:	bf08      	it	eq
 8004a6c:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 8004a70:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004a72:	bf18      	it	ne
 8004a74:	f44f 7380 	movne.w	r3, #256	; 0x100
{
 8004a78:	4604      	mov	r4, r0
 8004a7a:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004a7c:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8004a7e:	23b7      	movs	r3, #183	; 0xb7
 8004a80:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004a82:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004a84:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004a88:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 8004a8a:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004a8c:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004a8e:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 8004a92:	f7ff ffa4 	bl	80049de <MT25TL01G_WriteEnable>
 8004a96:	b958      	cbnz	r0, 8004ab0 <MT25TL01G_Enter4BytesAddressMode+0x4a>
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a9c:	4669      	mov	r1, sp
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	f003 fb22 	bl	80080e8 <HAL_QSPI_Command>
 8004aa4:	b920      	cbnz	r0, 8004ab0 <MT25TL01G_Enter4BytesAddressMode+0x4a>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8004aa6:	4629      	mov	r1, r5
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	f7ff ff6d 	bl	8004988 <MT25TL01G_AutoPollingMemReady>
 8004aae:	b108      	cbz	r0, 8004ab4 <MT25TL01G_Enter4BytesAddressMode+0x4e>
    return MT25TL01G_ERROR_COMMAND;
 8004ab0:	f06f 0001 	mvn.w	r0, #1
}
 8004ab4:	b00f      	add	sp, #60	; 0x3c
 8004ab6:	bd30      	pop	{r4, r5, pc}

08004ab8 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8004ab8:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004aba:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8004abe:	b08f      	sub	sp, #60	; 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004ac0:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004ac4:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8004ac6:	2335      	movs	r3, #53	; 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004ac8:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8004aca:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004acc:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004ace:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004ad2:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 8004ad4:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004ad6:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004ad8:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004adc:	f003 fb04 	bl	80080e8 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 8004ae0:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 8004ae2:	bf14      	ite	ne
 8004ae4:	f06f 0001 	mvnne.w	r0, #1
 8004ae8:	2000      	moveq	r0, #0
 8004aea:	b00f      	add	sp, #60	; 0x3c
 8004aec:	f85d fb04 	ldr.w	pc, [sp], #4

08004af0 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8004af0:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004af2:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8004af6:	b08f      	sub	sp, #60	; 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004af8:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004afc:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8004afe:	23f5      	movs	r3, #245	; 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004b00:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8004b02:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004b04:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004b06:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004b0a:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 8004b0c:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004b0e:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004b10:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004b14:	f003 fae8 	bl	80080e8 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 8004b18:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 8004b1a:	bf14      	ite	ne
 8004b1c:	f06f 0001 	mvnne.w	r0, #1
 8004b20:	2000      	moveq	r0, #0
 8004b22:	b00f      	add	sp, #60	; 0x3c
 8004b24:	f85d fb04 	ldr.w	pc, [sp], #4

08004b28 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8004b28:	b500      	push	{lr}
 8004b2a:	b091      	sub	sp, #68	; 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8004b2c:	2903      	cmp	r1, #3
 8004b2e:	d80e      	bhi.n	8004b4e <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 8004b30:	e8df f001 	tbb	[pc, r1]
 8004b34:	3f342902 	.word	0x3f342902
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004b38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b3c:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8004b3e:	230e      	movs	r3, #14
 8004b40:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8004b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b46:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8004b48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004b4c:	930b      	str	r3, [sp, #44]	; 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8004b4e:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004b50:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8004b54:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004b58:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8004b5a:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8004b5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004b60:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004b62:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8004b64:	e9cd c20d 	strd	ip, r2, [sp, #52]	; 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004b68:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004b6a:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004b6c:	930f      	str	r3, [sp, #60]	; 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8004b6e:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004b72:	f003 fc04 	bl	800837e <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 8004b76:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 8004b78:	bf14      	ite	ne
 8004b7a:	f06f 0005 	mvnne.w	r0, #5
 8004b7e:	2000      	moveq	r0, #0
 8004b80:	b011      	add	sp, #68	; 0x44
 8004b82:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004b86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b8a:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8004b8c:	233d      	movs	r3, #61	; 0x3d
 8004b8e:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8004b90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b94:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8004b96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b9a:	e7d7      	b.n	8004b4c <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004b9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ba0:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8004ba2:	23ee      	movs	r3, #238	; 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8004ba4:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004ba6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004baa:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004bac:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8004bb0:	e7cc      	b.n	8004b4c <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004bb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004bb6:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8004bb8:	23ed      	movs	r3, #237	; 0xed
 8004bba:	e7f3      	b.n	8004ba4 <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

08004bbc <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8004bbc:	b500      	push	{lr}
 8004bbe:	b091      	sub	sp, #68	; 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8004bc0:	2903      	cmp	r1, #3
 8004bc2:	d80e      	bhi.n	8004be2 <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 8004bc4:	e8df f001 	tbb	[pc, r1]
 8004bc8:	3b302502 	.word	0x3b302502
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004bcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bd0:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 8004bd2:	230c      	movs	r3, #12
 8004bd4:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8004bd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bda:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8004bdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004be0:	930b      	str	r3, [sp, #44]	; 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8004be2:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004be4:	466a      	mov	r2, sp
 8004be6:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8004be8:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004bea:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004bee:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004bf4:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004bf6:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8004bfa:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004bfe:	f003 fbbe 	bl	800837e <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 8004c02:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 8004c04:	bf14      	ite	ne
 8004c06:	f06f 0005 	mvnne.w	r0, #5
 8004c0a:	2000      	moveq	r0, #0
 8004c0c:	b011      	add	sp, #68	; 0x44
 8004c0e:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004c12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c16:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8004c18:	23bc      	movs	r3, #188	; 0xbc
 8004c1a:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 8004c1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c20:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8004c22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c26:	e7db      	b.n	8004be0 <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004c28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c2c:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8004c2e:	23ec      	movs	r3, #236	; 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8004c30:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004c32:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004c36:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004c38:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8004c3c:	e7d0      	b.n	8004be0 <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004c3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004c42:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8004c44:	23eb      	movs	r3, #235	; 0xeb
 8004c46:	e7f3      	b.n	8004c30 <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

08004c48 <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004c48:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004c4a:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8004c4e:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004c50:	bf08      	it	eq
 8004c52:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 8004c56:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004c58:	bf18      	it	ne
 8004c5a:	f44f 7380 	movne.w	r3, #256	; 0x100
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004c5e:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004c60:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 8004c62:	2366      	movs	r3, #102	; 0x66
 8004c64:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004c66:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004c68:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004c6c:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 8004c6e:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004c70:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004c72:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004c76:	f003 fa37 	bl	80080e8 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 8004c7a:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 8004c7c:	bf14      	ite	ne
 8004c7e:	f06f 0001 	mvnne.w	r0, #1
 8004c82:	2000      	moveq	r0, #0
 8004c84:	b00f      	add	sp, #60	; 0x3c
 8004c86:	f85d fb04 	ldr.w	pc, [sp], #4

08004c8a <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004c8a:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004c8c:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8004c90:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004c92:	bf08      	it	eq
 8004c94:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 8004c98:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004c9a:	bf18      	it	ne
 8004c9c:	f44f 7380 	movne.w	r3, #256	; 0x100
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004ca0:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004ca2:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8004ca4:	2399      	movs	r3, #153	; 0x99
 8004ca6:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004ca8:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004caa:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004cae:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 8004cb0:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004cb2:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004cb4:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004cb8:	f003 fa16 	bl	80080e8 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 8004cbc:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 8004cbe:	bf14      	ite	ne
 8004cc0:	f06f 0001 	mvnne.w	r0, #1
 8004cc4:	2000      	moveq	r0, #0
 8004cc6:	b00f      	add	sp, #60	; 0x3c
 8004cc8:	f85d fb04 	ldr.w	pc, [sp], #4

08004ccc <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8004ccc:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004cce:	6884      	ldr	r4, [r0, #8]
 8004cd0:	8800      	ldrh	r0, [r0, #0]
 8004cd2:	46a4      	mov	ip, r4
}
 8004cd4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004cd8:	4760      	bx	ip

08004cda <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004cda:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004cdc:	6844      	ldr	r4, [r0, #4]
 8004cde:	8800      	ldrh	r0, [r0, #0]
 8004ce0:	46a4      	mov	ip, r4
}
 8004ce2:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004ce6:	4760      	bx	ip

08004ce8 <OTM8009A_IO_Delay.isra.0>:

/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8004ce8:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8004cea:	68c3      	ldr	r3, [r0, #12]
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8004cec:	4604      	mov	r4, r0
 8004cee:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 8004cf0:	4798      	blx	r3
 8004cf2:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8004cf4:	68e3      	ldr	r3, [r4, #12]
 8004cf6:	4798      	blx	r3
 8004cf8:	1b83      	subs	r3, r0, r6
 8004cfa:	42ab      	cmp	r3, r5
 8004cfc:	d3fa      	bcc.n	8004cf4 <OTM8009A_IO_Delay.isra.0+0xc>
  {
  }
  return OTM8009A_OK;
}
 8004cfe:	bd70      	pop	{r4, r5, r6, pc}

08004d00 <OTM8009A_Init>:
{
 8004d00:	e92d 4f37 	stmdb	sp!, {r0, r1, r2, r4, r5, r8, r9, sl, fp, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004d04:	2300      	movs	r3, #0
 8004d06:	f100 0810 	add.w	r8, r0, #16
{
 8004d0a:	4682      	mov	sl, r0
 8004d0c:	4689      	mov	r9, r1
 8004d0e:	4693      	mov	fp, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004d10:	4619      	mov	r1, r3
 8004d12:	4add      	ldr	r2, [pc, #884]	; (8005088 <OTM8009A_Init+0x388>)
 8004d14:	4640      	mov	r0, r8
 8004d16:	f000 fbad 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004d1a:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004d1c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004d1e:	4adb      	ldr	r2, [pc, #876]	; (800508c <OTM8009A_Init+0x38c>)
 8004d20:	21ff      	movs	r1, #255	; 0xff
 8004d22:	4640      	mov	r0, r8
 8004d24:	f000 fba6 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004d28:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004d2a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004d2c:	4ad8      	ldr	r2, [pc, #864]	; (8005090 <OTM8009A_Init+0x390>)
 8004d2e:	4619      	mov	r1, r3
 8004d30:	4640      	mov	r0, r8
 8004d32:	f000 fb9f 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004d36:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004d38:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004d3a:	4ad6      	ldr	r2, [pc, #856]	; (8005094 <OTM8009A_Init+0x394>)
 8004d3c:	21ff      	movs	r1, #255	; 0xff
 8004d3e:	4640      	mov	r0, r8
 8004d40:	f000 fb98 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004d44:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004d46:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004d48:	4ad1      	ldr	r2, [pc, #836]	; (8005090 <OTM8009A_Init+0x390>)
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	4640      	mov	r0, r8
 8004d4e:	f000 fb91 	bl	8005474 <otm8009a_write_reg>
 8004d52:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004d54:	2300      	movs	r3, #0
 8004d56:	4ad0      	ldr	r2, [pc, #832]	; (8005098 <OTM8009A_Init+0x398>)
 8004d58:	21c4      	movs	r1, #196	; 0xc4
 8004d5a:	4640      	mov	r0, r8
 8004d5c:	f000 fb8a 	bl	8005474 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004d60:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004d62:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004d64:	4650      	mov	r0, sl
 8004d66:	f7ff ffbf 	bl	8004ce8 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	4acb      	ldr	r2, [pc, #812]	; (800509c <OTM8009A_Init+0x39c>)
 8004d6e:	4640      	mov	r0, r8
 8004d70:	4619      	mov	r1, r3
 8004d72:	4dcb      	ldr	r5, [pc, #812]	; (80050a0 <OTM8009A_Init+0x3a0>)
 8004d74:	f000 fb7e 	bl	8005474 <otm8009a_write_reg>
 8004d78:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	4ac9      	ldr	r2, [pc, #804]	; (80050a4 <OTM8009A_Init+0x3a4>)
 8004d7e:	21c4      	movs	r1, #196	; 0xc4
 8004d80:	4640      	mov	r0, r8
 8004d82:	f000 fb77 	bl	8005474 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004d86:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004d88:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004d8a:	4650      	mov	r0, sl
 8004d8c:	f7ff ffac 	bl	8004ce8 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004d90:	2300      	movs	r3, #0
 8004d92:	4ac5      	ldr	r2, [pc, #788]	; (80050a8 <OTM8009A_Init+0x3a8>)
 8004d94:	4640      	mov	r0, r8
 8004d96:	4619      	mov	r1, r3
 8004d98:	f000 fb6c 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004d9c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004d9e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004da0:	4ac2      	ldr	r2, [pc, #776]	; (80050ac <OTM8009A_Init+0x3ac>)
 8004da2:	21c5      	movs	r1, #197	; 0xc5
 8004da4:	4640      	mov	r0, r8
 8004da6:	f000 fb65 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004daa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004dac:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004dae:	4ac0      	ldr	r2, [pc, #768]	; (80050b0 <OTM8009A_Init+0x3b0>)
 8004db0:	4619      	mov	r1, r3
 8004db2:	4640      	mov	r0, r8
 8004db4:	f000 fb5e 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004db8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004dba:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004dbc:	4abd      	ldr	r2, [pc, #756]	; (80050b4 <OTM8009A_Init+0x3b4>)
 8004dbe:	21c5      	movs	r1, #197	; 0xc5
 8004dc0:	4640      	mov	r0, r8
 8004dc2:	f000 fb57 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004dc6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004dc8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004dca:	4abb      	ldr	r2, [pc, #748]	; (80050b8 <OTM8009A_Init+0x3b8>)
 8004dcc:	4619      	mov	r1, r3
 8004dce:	4640      	mov	r0, r8
 8004dd0:	f000 fb50 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004dd4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004dd6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004dd8:	4ab8      	ldr	r2, [pc, #736]	; (80050bc <OTM8009A_Init+0x3bc>)
 8004dda:	21c0      	movs	r1, #192	; 0xc0
 8004ddc:	4640      	mov	r0, r8
 8004dde:	f000 fb49 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004de2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004de4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004de6:	4aa8      	ldr	r2, [pc, #672]	; (8005088 <OTM8009A_Init+0x388>)
 8004de8:	4619      	mov	r1, r3
 8004dea:	4640      	mov	r0, r8
 8004dec:	f000 fb42 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004df0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004df2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004df4:	4ab2      	ldr	r2, [pc, #712]	; (80050c0 <OTM8009A_Init+0x3c0>)
 8004df6:	21d9      	movs	r1, #217	; 0xd9
 8004df8:	4640      	mov	r0, r8
 8004dfa:	f000 fb3b 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004dfe:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004e00:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004e02:	4ab0      	ldr	r2, [pc, #704]	; (80050c4 <OTM8009A_Init+0x3c4>)
 8004e04:	4619      	mov	r1, r3
 8004e06:	4640      	mov	r0, r8
 8004e08:	f000 fb34 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8004e0c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004e0e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8004e10:	4aad      	ldr	r2, [pc, #692]	; (80050c8 <OTM8009A_Init+0x3c8>)
 8004e12:	21c1      	movs	r1, #193	; 0xc1
 8004e14:	4640      	mov	r0, r8
 8004e16:	f000 fb2d 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004e1a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8004e1c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004e1e:	4aab      	ldr	r2, [pc, #684]	; (80050cc <OTM8009A_Init+0x3cc>)
 8004e20:	4619      	mov	r1, r3
 8004e22:	4640      	mov	r0, r8
 8004e24:	f000 fb26 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004e28:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004e2a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004e2c:	4aa8      	ldr	r2, [pc, #672]	; (80050d0 <OTM8009A_Init+0x3d0>)
 8004e2e:	21c1      	movs	r1, #193	; 0xc1
 8004e30:	4640      	mov	r0, r8
 8004e32:	f000 fb1f 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004e36:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004e38:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004e3a:	4aa6      	ldr	r2, [pc, #664]	; (80050d4 <OTM8009A_Init+0x3d4>)
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	4640      	mov	r0, r8
 8004e40:	f000 fb18 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004e44:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004e46:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004e48:	4aa3      	ldr	r2, [pc, #652]	; (80050d8 <OTM8009A_Init+0x3d8>)
 8004e4a:	21c5      	movs	r1, #197	; 0xc5
 8004e4c:	4640      	mov	r0, r8
 8004e4e:	f000 fb11 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004e52:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004e54:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004e56:	4aa1      	ldr	r2, [pc, #644]	; (80050dc <OTM8009A_Init+0x3dc>)
 8004e58:	4619      	mov	r1, r3
 8004e5a:	4640      	mov	r0, r8
 8004e5c:	f000 fb0a 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004e60:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004e62:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004e64:	4a93      	ldr	r2, [pc, #588]	; (80050b4 <OTM8009A_Init+0x3b4>)
 8004e66:	21c5      	movs	r1, #197	; 0xc5
 8004e68:	4640      	mov	r0, r8
 8004e6a:	f000 fb03 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004e6e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004e70:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004e72:	4a85      	ldr	r2, [pc, #532]	; (8005088 <OTM8009A_Init+0x388>)
 8004e74:	4619      	mov	r1, r3
 8004e76:	4640      	mov	r0, r8
 8004e78:	f000 fafc 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004e7c:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004e7e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004e80:	4a97      	ldr	r2, [pc, #604]	; (80050e0 <OTM8009A_Init+0x3e0>)
 8004e82:	21d8      	movs	r1, #216	; 0xd8
 8004e84:	4640      	mov	r0, r8
 8004e86:	f000 faf5 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004e8a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004e8c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004e8e:	4a95      	ldr	r2, [pc, #596]	; (80050e4 <OTM8009A_Init+0x3e4>)
 8004e90:	4619      	mov	r1, r3
 8004e92:	4640      	mov	r0, r8
 8004e94:	f000 faee 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004e98:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004e9a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004e9c:	4a92      	ldr	r2, [pc, #584]	; (80050e8 <OTM8009A_Init+0x3e8>)
 8004e9e:	21c5      	movs	r1, #197	; 0xc5
 8004ea0:	4640      	mov	r0, r8
 8004ea2:	f000 fae7 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004ea6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004ea8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004eaa:	4a90      	ldr	r2, [pc, #576]	; (80050ec <OTM8009A_Init+0x3ec>)
 8004eac:	4619      	mov	r1, r3
 8004eae:	4640      	mov	r0, r8
 8004eb0:	f000 fae0 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004eb4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004eb6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004eb8:	4a8d      	ldr	r2, [pc, #564]	; (80050f0 <OTM8009A_Init+0x3f0>)
 8004eba:	21c0      	movs	r1, #192	; 0xc0
 8004ebc:	4640      	mov	r0, r8
 8004ebe:	f000 fad9 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004ec2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004ec4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004ec6:	4a8b      	ldr	r2, [pc, #556]	; (80050f4 <OTM8009A_Init+0x3f4>)
 8004ec8:	4619      	mov	r1, r3
 8004eca:	4640      	mov	r0, r8
 8004ecc:	f000 fad2 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004ed0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004ed2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004ed4:	4a88      	ldr	r2, [pc, #544]	; (80050f8 <OTM8009A_Init+0x3f8>)
 8004ed6:	21c5      	movs	r1, #197	; 0xc5
 8004ed8:	4640      	mov	r0, r8
 8004eda:	f000 facb 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004ede:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004ee0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004ee2:	4a78      	ldr	r2, [pc, #480]	; (80050c4 <OTM8009A_Init+0x3c4>)
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4640      	mov	r0, r8
 8004ee8:	f000 fac4 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004eec:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004eee:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004ef0:	4a82      	ldr	r2, [pc, #520]	; (80050fc <OTM8009A_Init+0x3fc>)
 8004ef2:	21c4      	movs	r1, #196	; 0xc4
 8004ef4:	4640      	mov	r0, r8
 8004ef6:	f000 fabd 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004efa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004efc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004efe:	4a73      	ldr	r2, [pc, #460]	; (80050cc <OTM8009A_Init+0x3cc>)
 8004f00:	4619      	mov	r1, r3
 8004f02:	4640      	mov	r0, r8
 8004f04:	f000 fab6 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004f08:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004f0a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004f0c:	4a7c      	ldr	r2, [pc, #496]	; (8005100 <OTM8009A_Init+0x400>)
 8004f0e:	21c1      	movs	r1, #193	; 0xc1
 8004f10:	4640      	mov	r0, r8
 8004f12:	f000 faaf 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004f16:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004f18:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004f1a:	4a7a      	ldr	r2, [pc, #488]	; (8005104 <OTM8009A_Init+0x404>)
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4640      	mov	r0, r8
 8004f20:	f000 faa8 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004f24:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004f26:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004f28:	4a77      	ldr	r2, [pc, #476]	; (8005108 <OTM8009A_Init+0x408>)
 8004f2a:	21b3      	movs	r1, #179	; 0xb3
 8004f2c:	4640      	mov	r0, r8
 8004f2e:	f000 faa1 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004f32:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004f34:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004f36:	4a56      	ldr	r2, [pc, #344]	; (8005090 <OTM8009A_Init+0x390>)
 8004f38:	4619      	mov	r1, r3
 8004f3a:	4640      	mov	r0, r8
 8004f3c:	f000 fa9a 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004f40:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004f42:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004f44:	4a71      	ldr	r2, [pc, #452]	; (800510c <OTM8009A_Init+0x40c>)
 8004f46:	21ce      	movs	r1, #206	; 0xce
 8004f48:	4640      	mov	r0, r8
 8004f4a:	f000 fa93 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004f4e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004f50:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004f52:	4a6f      	ldr	r2, [pc, #444]	; (8005110 <OTM8009A_Init+0x410>)
 8004f54:	4619      	mov	r1, r3
 8004f56:	4640      	mov	r0, r8
 8004f58:	f000 fa8c 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004f5c:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004f5e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004f60:	4a6c      	ldr	r2, [pc, #432]	; (8005114 <OTM8009A_Init+0x414>)
 8004f62:	21ce      	movs	r1, #206	; 0xce
 8004f64:	4640      	mov	r0, r8
 8004f66:	f000 fa85 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004f6a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004f6c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004f6e:	4a6a      	ldr	r2, [pc, #424]	; (8005118 <OTM8009A_Init+0x418>)
 8004f70:	4619      	mov	r1, r3
 8004f72:	4640      	mov	r0, r8
 8004f74:	f000 fa7e 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004f78:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004f7a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004f7c:	4a67      	ldr	r2, [pc, #412]	; (800511c <OTM8009A_Init+0x41c>)
 8004f7e:	21ce      	movs	r1, #206	; 0xce
 8004f80:	4640      	mov	r0, r8
 8004f82:	f000 fa77 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004f86:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004f88:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004f8a:	4a65      	ldr	r2, [pc, #404]	; (8005120 <OTM8009A_Init+0x420>)
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4640      	mov	r0, r8
 8004f90:	f000 fa70 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004f94:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004f96:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004f98:	4a62      	ldr	r2, [pc, #392]	; (8005124 <OTM8009A_Init+0x424>)
 8004f9a:	21cf      	movs	r1, #207	; 0xcf
 8004f9c:	4640      	mov	r0, r8
 8004f9e:	f000 fa69 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004fa2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004fa4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004fa6:	4a60      	ldr	r2, [pc, #384]	; (8005128 <OTM8009A_Init+0x428>)
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4640      	mov	r0, r8
 8004fac:	f000 fa62 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004fb0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004fb2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004fb4:	4a5d      	ldr	r2, [pc, #372]	; (800512c <OTM8009A_Init+0x42c>)
 8004fb6:	21cf      	movs	r1, #207	; 0xcf
 8004fb8:	4640      	mov	r0, r8
 8004fba:	f000 fa5b 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004fbe:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004fc0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004fc2:	4a33      	ldr	r2, [pc, #204]	; (8005090 <OTM8009A_Init+0x390>)
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	4640      	mov	r0, r8
 8004fc8:	f000 fa54 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004fcc:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004fce:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004fd0:	4a57      	ldr	r2, [pc, #348]	; (8005130 <OTM8009A_Init+0x430>)
 8004fd2:	21cb      	movs	r1, #203	; 0xcb
 8004fd4:	4640      	mov	r0, r8
 8004fd6:	f000 fa4d 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004fda:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004fdc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004fde:	4a55      	ldr	r2, [pc, #340]	; (8005134 <OTM8009A_Init+0x434>)
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	4640      	mov	r0, r8
 8004fe4:	f000 fa46 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004fe8:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004fea:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004fec:	4a52      	ldr	r2, [pc, #328]	; (8005138 <OTM8009A_Init+0x438>)
 8004fee:	21cb      	movs	r1, #203	; 0xcb
 8004ff0:	4640      	mov	r0, r8
 8004ff2:	f000 fa3f 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004ff6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004ff8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004ffa:	4a45      	ldr	r2, [pc, #276]	; (8005110 <OTM8009A_Init+0x410>)
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	4640      	mov	r0, r8
 8005000:	f000 fa38 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8005004:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005006:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8005008:	4a4c      	ldr	r2, [pc, #304]	; (800513c <OTM8009A_Init+0x43c>)
 800500a:	21cb      	movs	r1, #203	; 0xcb
 800500c:	4640      	mov	r0, r8
 800500e:	f000 fa31 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005012:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8005014:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005016:	4a40      	ldr	r2, [pc, #256]	; (8005118 <OTM8009A_Init+0x418>)
 8005018:	4619      	mov	r1, r3
 800501a:	4640      	mov	r0, r8
 800501c:	f000 fa2a 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8005020:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005022:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8005024:	4a46      	ldr	r2, [pc, #280]	; (8005140 <OTM8009A_Init+0x440>)
 8005026:	21cb      	movs	r1, #203	; 0xcb
 8005028:	4640      	mov	r0, r8
 800502a:	f000 fa23 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800502e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8005030:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005032:	4a3b      	ldr	r2, [pc, #236]	; (8005120 <OTM8009A_Init+0x420>)
 8005034:	4619      	mov	r1, r3
 8005036:	4640      	mov	r0, r8
 8005038:	f000 fa1c 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 800503c:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800503e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8005040:	4a40      	ldr	r2, [pc, #256]	; (8005144 <OTM8009A_Init+0x444>)
 8005042:	21cb      	movs	r1, #203	; 0xcb
 8005044:	4640      	mov	r0, r8
 8005046:	f000 fa15 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800504a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 800504c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800504e:	4a36      	ldr	r2, [pc, #216]	; (8005128 <OTM8009A_Init+0x428>)
 8005050:	4619      	mov	r1, r3
 8005052:	4640      	mov	r0, r8
 8005054:	f000 fa0e 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8005058:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800505a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800505c:	4a3a      	ldr	r2, [pc, #232]	; (8005148 <OTM8009A_Init+0x448>)
 800505e:	21cb      	movs	r1, #203	; 0xcb
 8005060:	4640      	mov	r0, r8
 8005062:	f000 fa07 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8005066:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8005068:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800506a:	4a38      	ldr	r2, [pc, #224]	; (800514c <OTM8009A_Init+0x44c>)
 800506c:	4619      	mov	r1, r3
 800506e:	4640      	mov	r0, r8
 8005070:	f000 fa00 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8005074:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8005076:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8005078:	4a35      	ldr	r2, [pc, #212]	; (8005150 <OTM8009A_Init+0x450>)
 800507a:	21cb      	movs	r1, #203	; 0xcb
 800507c:	4640      	mov	r0, r8
 800507e:	f000 f9f9 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8005082:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8005084:	4404      	add	r4, r0
 8005086:	e065      	b.n	8005154 <OTM8009A_Init+0x454>
 8005088:	0802018d 	.word	0x0802018d
 800508c:	08020080 	.word	0x08020080
 8005090:	0802018e 	.word	0x0802018e
 8005094:	080200fb 	.word	0x080200fb
 8005098:	0802018f 	.word	0x0802018f
 800509c:	08020190 	.word	0x08020190
 80050a0:	24004af8 	.word	0x24004af8
 80050a4:	08020191 	.word	0x08020191
 80050a8:	08020192 	.word	0x08020192
 80050ac:	08020193 	.word	0x08020193
 80050b0:	08020194 	.word	0x08020194
 80050b4:	08020195 	.word	0x08020195
 80050b8:	08020196 	.word	0x08020196
 80050bc:	08020197 	.word	0x08020197
 80050c0:	08020198 	.word	0x08020198
 80050c4:	08020199 	.word	0x08020199
 80050c8:	0802019a 	.word	0x0802019a
 80050cc:	0802019b 	.word	0x0802019b
 80050d0:	0802019c 	.word	0x0802019c
 80050d4:	0802019d 	.word	0x0802019d
 80050d8:	0802019e 	.word	0x0802019e
 80050dc:	0802019f 	.word	0x0802019f
 80050e0:	08020166 	.word	0x08020166
 80050e4:	080201a0 	.word	0x080201a0
 80050e8:	080201a1 	.word	0x080201a1
 80050ec:	080201a2 	.word	0x080201a2
 80050f0:	080201a3 	.word	0x080201a3
 80050f4:	080201a4 	.word	0x080201a4
 80050f8:	080201a5 	.word	0x080201a5
 80050fc:	080201a6 	.word	0x080201a6
 8005100:	080201a7 	.word	0x080201a7
 8005104:	080201a8 	.word	0x080201a8
 8005108:	08020168 	.word	0x08020168
 800510c:	0802016a 	.word	0x0802016a
 8005110:	080201a9 	.word	0x080201a9
 8005114:	08020170 	.word	0x08020170
 8005118:	080201aa 	.word	0x080201aa
 800511c:	0802017e 	.word	0x0802017e
 8005120:	080201ab 	.word	0x080201ab
 8005124:	08020083 	.word	0x08020083
 8005128:	080201ac 	.word	0x080201ac
 800512c:	080201b9 	.word	0x080201b9
 8005130:	0802008d 	.word	0x0802008d
 8005134:	080201ad 	.word	0x080201ad
 8005138:	08020097 	.word	0x08020097
 800513c:	080200a6 	.word	0x080200a6
 8005140:	080200b5 	.word	0x080200b5
 8005144:	080200bf 	.word	0x080200bf
 8005148:	080200ce 	.word	0x080200ce
 800514c:	080201ae 	.word	0x080201ae
 8005150:	080200dd 	.word	0x080200dd
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8005154:	4a99      	ldr	r2, [pc, #612]	; (80053bc <OTM8009A_Init+0x6bc>)
 8005156:	4619      	mov	r1, r3
 8005158:	4640      	mov	r0, r8
 800515a:	f000 f98b 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 800515e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8005160:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8005162:	4a97      	ldr	r2, [pc, #604]	; (80053c0 <OTM8009A_Init+0x6c0>)
 8005164:	21cb      	movs	r1, #203	; 0xcb
 8005166:	4640      	mov	r0, r8
 8005168:	f000 f984 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800516c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 800516e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005170:	4a94      	ldr	r2, [pc, #592]	; (80053c4 <OTM8009A_Init+0x6c4>)
 8005172:	4619      	mov	r1, r3
 8005174:	4640      	mov	r0, r8
 8005176:	f000 f97d 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 800517a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800517c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 800517e:	4a92      	ldr	r2, [pc, #584]	; (80053c8 <OTM8009A_Init+0x6c8>)
 8005180:	21cc      	movs	r1, #204	; 0xcc
 8005182:	4640      	mov	r0, r8
 8005184:	f000 f976 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005188:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 800518a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800518c:	4a8f      	ldr	r2, [pc, #572]	; (80053cc <OTM8009A_Init+0x6cc>)
 800518e:	4619      	mov	r1, r3
 8005190:	4640      	mov	r0, r8
 8005192:	f000 f96f 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8005196:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005198:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 800519a:	4a8d      	ldr	r2, [pc, #564]	; (80053d0 <OTM8009A_Init+0x6d0>)
 800519c:	21cc      	movs	r1, #204	; 0xcc
 800519e:	4640      	mov	r0, r8
 80051a0:	f000 f968 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80051a4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80051a6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80051a8:	4a8a      	ldr	r2, [pc, #552]	; (80053d4 <OTM8009A_Init+0x6d4>)
 80051aa:	4619      	mov	r1, r3
 80051ac:	4640      	mov	r0, r8
 80051ae:	f000 f961 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80051b2:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80051b4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80051b6:	4a88      	ldr	r2, [pc, #544]	; (80053d8 <OTM8009A_Init+0x6d8>)
 80051b8:	21cc      	movs	r1, #204	; 0xcc
 80051ba:	4640      	mov	r0, r8
 80051bc:	f000 f95a 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80051c0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80051c2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80051c4:	4a85      	ldr	r2, [pc, #532]	; (80053dc <OTM8009A_Init+0x6dc>)
 80051c6:	4619      	mov	r1, r3
 80051c8:	4640      	mov	r0, r8
 80051ca:	f000 f953 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80051ce:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80051d0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80051d2:	4a83      	ldr	r2, [pc, #524]	; (80053e0 <OTM8009A_Init+0x6e0>)
 80051d4:	21cc      	movs	r1, #204	; 0xcc
 80051d6:	4640      	mov	r0, r8
 80051d8:	f000 f94c 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80051dc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80051de:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80051e0:	4a80      	ldr	r2, [pc, #512]	; (80053e4 <OTM8009A_Init+0x6e4>)
 80051e2:	4619      	mov	r1, r3
 80051e4:	4640      	mov	r0, r8
 80051e6:	f000 f945 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80051ea:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80051ec:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80051ee:	4a7e      	ldr	r2, [pc, #504]	; (80053e8 <OTM8009A_Init+0x6e8>)
 80051f0:	21cc      	movs	r1, #204	; 0xcc
 80051f2:	4640      	mov	r0, r8
 80051f4:	f000 f93e 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80051f8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80051fa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80051fc:	4a7b      	ldr	r2, [pc, #492]	; (80053ec <OTM8009A_Init+0x6ec>)
 80051fe:	4619      	mov	r1, r3
 8005200:	4640      	mov	r0, r8
 8005202:	f000 f937 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8005206:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005208:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800520a:	4a79      	ldr	r2, [pc, #484]	; (80053f0 <OTM8009A_Init+0x6f0>)
 800520c:	21cc      	movs	r1, #204	; 0xcc
 800520e:	4640      	mov	r0, r8
 8005210:	f000 f930 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005214:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8005216:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005218:	4a76      	ldr	r2, [pc, #472]	; (80053f4 <OTM8009A_Init+0x6f4>)
 800521a:	4619      	mov	r1, r3
 800521c:	4640      	mov	r0, r8
 800521e:	f000 f929 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005222:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005224:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005226:	4a74      	ldr	r2, [pc, #464]	; (80053f8 <OTM8009A_Init+0x6f8>)
 8005228:	21c5      	movs	r1, #197	; 0xc5
 800522a:	4640      	mov	r0, r8
 800522c:	f000 f922 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005230:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005232:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005234:	4a71      	ldr	r2, [pc, #452]	; (80053fc <OTM8009A_Init+0x6fc>)
 8005236:	4619      	mov	r1, r3
 8005238:	4640      	mov	r0, r8
 800523a:	f000 f91b 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 800523e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005240:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005242:	4a6f      	ldr	r2, [pc, #444]	; (8005400 <OTM8009A_Init+0x700>)
 8005244:	21f5      	movs	r1, #245	; 0xf5
 8005246:	4640      	mov	r0, r8
 8005248:	f000 f914 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800524c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 800524e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005250:	4a6c      	ldr	r2, [pc, #432]	; (8005404 <OTM8009A_Init+0x704>)
 8005252:	4619      	mov	r1, r3
 8005254:	4640      	mov	r0, r8
 8005256:	f000 f90d 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800525a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800525c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800525e:	4a6a      	ldr	r2, [pc, #424]	; (8005408 <OTM8009A_Init+0x708>)
 8005260:	21c6      	movs	r1, #198	; 0xc6
 8005262:	4640      	mov	r0, r8
 8005264:	f000 f906 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005268:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800526a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800526c:	4a67      	ldr	r2, [pc, #412]	; (800540c <OTM8009A_Init+0x70c>)
 800526e:	4619      	mov	r1, r3
 8005270:	4640      	mov	r0, r8
 8005272:	f000 f8ff 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8005276:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005278:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800527a:	4a65      	ldr	r2, [pc, #404]	; (8005410 <OTM8009A_Init+0x710>)
 800527c:	21ff      	movs	r1, #255	; 0xff
 800527e:	4640      	mov	r0, r8
 8005280:	f000 f8f8 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005284:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8005286:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005288:	4a60      	ldr	r2, [pc, #384]	; (800540c <OTM8009A_Init+0x70c>)
 800528a:	4619      	mov	r1, r3
 800528c:	4640      	mov	r0, r8
 800528e:	f000 f8f1 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005292:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005294:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005296:	4a5d      	ldr	r2, [pc, #372]	; (800540c <OTM8009A_Init+0x70c>)
 8005298:	4619      	mov	r1, r3
 800529a:	4640      	mov	r0, r8
 800529c:	f000 f8ea 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80052a0:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80052a2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80052a4:	4a5b      	ldr	r2, [pc, #364]	; (8005414 <OTM8009A_Init+0x714>)
 80052a6:	21e1      	movs	r1, #225	; 0xe1
 80052a8:	4640      	mov	r0, r8
 80052aa:	f000 f8e3 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80052ae:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80052b0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80052b2:	4a56      	ldr	r2, [pc, #344]	; (800540c <OTM8009A_Init+0x70c>)
 80052b4:	4619      	mov	r1, r3
 80052b6:	4640      	mov	r0, r8
 80052b8:	f000 f8dc 	bl	8005474 <otm8009a_write_reg>
 80052bc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 80052be:	2310      	movs	r3, #16
 80052c0:	4a55      	ldr	r2, [pc, #340]	; (8005418 <OTM8009A_Init+0x718>)
 80052c2:	21e2      	movs	r1, #226	; 0xe2
 80052c4:	4640      	mov	r0, r8
 80052c6:	f000 f8d5 	bl	8005474 <otm8009a_write_reg>
 80052ca:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80052cc:	2300      	movs	r3, #0
 80052ce:	4a53      	ldr	r2, [pc, #332]	; (800541c <OTM8009A_Init+0x71c>)
 80052d0:	2111      	movs	r1, #17
 80052d2:	4640      	mov	r0, r8
 80052d4:	f000 f8ce 	bl	8005474 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 120);
 80052d8:	2178      	movs	r1, #120	; 0x78
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80052da:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 80052dc:	4650      	mov	r0, sl
 80052de:	f7ff fd03 	bl	8004ce8 <OTM8009A_IO_Delay.isra.0>
  switch(ColorCoding)
 80052e2:	f1b9 0f00 	cmp.w	r9, #0
 80052e6:	d062      	beq.n	80053ae <OTM8009A_Init+0x6ae>
 80052e8:	f1b9 0f02 	cmp.w	r9, #2
 80052ec:	d108      	bne.n	8005300 <OTM8009A_Init+0x600>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 80052ee:	2300      	movs	r3, #0
 80052f0:	4a4b      	ldr	r2, [pc, #300]	; (8005420 <OTM8009A_Init+0x720>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 80052f2:	213a      	movs	r1, #58	; 0x3a
 80052f4:	4640      	mov	r0, r8
 80052f6:	f000 f8bd 	bl	8005474 <otm8009a_write_reg>
 80052fa:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 80052fc:	f8c5 9004 	str.w	r9, [r5, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8005300:	f1bb 0f01 	cmp.w	fp, #1
 8005304:	d156      	bne.n	80053b4 <OTM8009A_Init+0x6b4>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8005306:	2360      	movs	r3, #96	; 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8005308:	f10d 0207 	add.w	r2, sp, #7
 800530c:	2136      	movs	r1, #54	; 0x36
 800530e:	4640      	mov	r0, r8
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8005310:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8005314:	2300      	movs	r3, #0
 8005316:	f000 f8ad 	bl	8005474 <otm8009a_write_reg>
 800531a:	4404      	add	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800531c:	2304      	movs	r3, #4
 800531e:	4a41      	ldr	r2, [pc, #260]	; (8005424 <OTM8009A_Init+0x724>)
 8005320:	212a      	movs	r1, #42	; 0x2a
 8005322:	4640      	mov	r0, r8
 8005324:	f000 f8a6 	bl	8005474 <otm8009a_write_reg>
 8005328:	4404      	add	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 800532a:	2304      	movs	r3, #4
 800532c:	4a3e      	ldr	r2, [pc, #248]	; (8005428 <OTM8009A_Init+0x728>)
 800532e:	212b      	movs	r1, #43	; 0x2b
 8005330:	4640      	mov	r0, r8
 8005332:	f000 f89f 	bl	8005474 <otm8009a_write_reg>
 8005336:	4404      	add	r4, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8005338:	f8c5 b000 	str.w	fp, [r5]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 800533c:	2300      	movs	r3, #0
 800533e:	4a3b      	ldr	r2, [pc, #236]	; (800542c <OTM8009A_Init+0x72c>)
 8005340:	2151      	movs	r1, #81	; 0x51
 8005342:	4640      	mov	r0, r8
 8005344:	f000 f896 	bl	8005474 <otm8009a_write_reg>
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8005348:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 800534a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 800534c:	4a38      	ldr	r2, [pc, #224]	; (8005430 <OTM8009A_Init+0x730>)
 800534e:	2153      	movs	r1, #83	; 0x53
 8005350:	4640      	mov	r0, r8
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8005352:	60ab      	str	r3, [r5, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8005354:	f000 f88e 	bl	8005474 <otm8009a_write_reg>
 8005358:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 800535a:	2300      	movs	r3, #0
 800535c:	4a35      	ldr	r2, [pc, #212]	; (8005434 <OTM8009A_Init+0x734>)
 800535e:	2155      	movs	r1, #85	; 0x55
 8005360:	4640      	mov	r0, r8
 8005362:	f000 f887 	bl	8005474 <otm8009a_write_reg>
 8005366:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8005368:	2300      	movs	r3, #0
 800536a:	4a33      	ldr	r2, [pc, #204]	; (8005438 <OTM8009A_Init+0x738>)
 800536c:	215e      	movs	r1, #94	; 0x5e
 800536e:	4640      	mov	r0, r8
 8005370:	f000 f880 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8005374:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8005376:	1825      	adds	r5, r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8005378:	4a30      	ldr	r2, [pc, #192]	; (800543c <OTM8009A_Init+0x73c>)
 800537a:	2129      	movs	r1, #41	; 0x29
 800537c:	4640      	mov	r0, r8
 800537e:	f000 f879 	bl	8005474 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005382:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8005384:	4405      	add	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005386:	4a21      	ldr	r2, [pc, #132]	; (800540c <OTM8009A_Init+0x70c>)
 8005388:	4619      	mov	r1, r3
 800538a:	4640      	mov	r0, r8
 800538c:	f000 f872 	bl	8005474 <otm8009a_write_reg>
 8005390:	4405      	add	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8005392:	2300      	movs	r3, #0
 8005394:	4a2a      	ldr	r2, [pc, #168]	; (8005440 <OTM8009A_Init+0x740>)
 8005396:	212c      	movs	r1, #44	; 0x2c
 8005398:	4640      	mov	r0, r8
 800539a:	f000 f86b 	bl	8005474 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 800539e:	42c5      	cmn	r5, r0
}
 80053a0:	bf14      	ite	ne
 80053a2:	f04f 30ff 	movne.w	r0, #4294967295
 80053a6:	2000      	moveq	r0, #0
 80053a8:	b003      	add	sp, #12
 80053aa:	e8bd 8f30 	ldmia.w	sp!, {r4, r5, r8, r9, sl, fp, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 80053ae:	464b      	mov	r3, r9
 80053b0:	4a24      	ldr	r2, [pc, #144]	; (8005444 <OTM8009A_Init+0x744>)
 80053b2:	e79e      	b.n	80052f2 <OTM8009A_Init+0x5f2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 80053b4:	2300      	movs	r3, #0
 80053b6:	602b      	str	r3, [r5, #0]
 80053b8:	e7c0      	b.n	800533c <OTM8009A_Init+0x63c>
 80053ba:	bf00      	nop
 80053bc:	080201af 	.word	0x080201af
 80053c0:	080200e7 	.word	0x080200e7
 80053c4:	0802018e 	.word	0x0802018e
 80053c8:	080200f1 	.word	0x080200f1
 80053cc:	080201ad 	.word	0x080201ad
 80053d0:	080200fd 	.word	0x080200fd
 80053d4:	080201a9 	.word	0x080201a9
 80053d8:	0802010c 	.word	0x0802010c
 80053dc:	080201aa 	.word	0x080201aa
 80053e0:	0802011b 	.word	0x0802011b
 80053e4:	080201ab 	.word	0x080201ab
 80053e8:	08020125 	.word	0x08020125
 80053ec:	080201ac 	.word	0x080201ac
 80053f0:	08020134 	.word	0x08020134
 80053f4:	08020199 	.word	0x08020199
 80053f8:	080201ba 	.word	0x080201ba
 80053fc:	080201bb 	.word	0x080201bb
 8005400:	080201bc 	.word	0x080201bc
 8005404:	080201bd 	.word	0x080201bd
 8005408:	080201be 	.word	0x080201be
 800540c:	0802018d 	.word	0x0802018d
 8005410:	08020143 	.word	0x08020143
 8005414:	08020146 	.word	0x08020146
 8005418:	08020156 	.word	0x08020156
 800541c:	080201b0 	.word	0x080201b0
 8005420:	080201b1 	.word	0x080201b1
 8005424:	08020078 	.word	0x08020078
 8005428:	0802007c 	.word	0x0802007c
 800542c:	080201b3 	.word	0x080201b3
 8005430:	080201b4 	.word	0x080201b4
 8005434:	080201b5 	.word	0x080201b5
 8005438:	080201b6 	.word	0x080201b6
 800543c:	080201b7 	.word	0x080201b7
 8005440:	080201b8 	.word	0x080201b8
 8005444:	080201b2 	.word	0x080201b2

08005448 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8005448:	b160      	cbz	r0, 8005464 <OTM8009A_RegisterBusIO+0x1c>
    pObj->IO.WriteReg  = pIO->WriteReg;
 800544a:	684b      	ldr	r3, [r1, #4]
 800544c:	6043      	str	r3, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800544e:	688b      	ldr	r3, [r1, #8]
 8005450:	6083      	str	r3, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 8005452:	68cb      	ldr	r3, [r1, #12]
    pObj->Ctx.handle   = pObj;
 8005454:	6180      	str	r0, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8005456:	60c3      	str	r3, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8005458:	4b04      	ldr	r3, [pc, #16]	; (800546c <OTM8009A_RegisterBusIO+0x24>)
 800545a:	6143      	str	r3, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 800545c:	4b04      	ldr	r3, [pc, #16]	; (8005470 <OTM8009A_RegisterBusIO+0x28>)
 800545e:	6103      	str	r3, [r0, #16]
  int32_t ret = OTM8009A_OK;
 8005460:	2000      	movs	r0, #0
 8005462:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 8005464:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	08004ccd 	.word	0x08004ccd
 8005470:	08004cdb 	.word	0x08004cdb

08005474 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8005474:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8005476:	6804      	ldr	r4, [r0, #0]
 8005478:	6880      	ldr	r0, [r0, #8]
 800547a:	46a4      	mov	ip, r4
}
 800547c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8005480:	4760      	bx	ip
	...

08005484 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 8005484:	4a10      	ldr	r2, [pc, #64]	; (80054c8 <BSP_I2C4_DeInit+0x44>)
{
 8005486:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 8005488:	6813      	ldr	r3, [r2, #0]
 800548a:	3b01      	subs	r3, #1
 800548c:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 800548e:	b10b      	cbz	r3, 8005494 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 8005490:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 8005492:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8005494:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005498:	480c      	ldr	r0, [pc, #48]	; (80054cc <BSP_I2C4_DeInit+0x48>)
 800549a:	f001 fe0d 	bl	80070b8 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800549e:	480b      	ldr	r0, [pc, #44]	; (80054cc <BSP_I2C4_DeInit+0x48>)
 80054a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80054a4:	f001 fe08 	bl	80070b8 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 80054a8:	4a09      	ldr	r2, [pc, #36]	; (80054d0 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80054aa:	480a      	ldr	r0, [pc, #40]	; (80054d4 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 80054ac:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
 80054b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054b4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80054b8:	f002 f849 	bl	800754e <HAL_I2C_DeInit>
 80054bc:	2800      	cmp	r0, #0
 80054be:	d0e7      	beq.n	8005490 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 80054c0:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80054c4:	e7e5      	b.n	8005492 <BSP_I2C4_DeInit+0xe>
 80054c6:	bf00      	nop
 80054c8:	24004b04 	.word	0x24004b04
 80054cc:	58020c00 	.word	0x58020c00
 80054d0:	58024400 	.word	0x58024400
 80054d4:	2400550c 	.word	0x2400550c

080054d8 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80054d8:	2300      	movs	r3, #0
 80054da:	2201      	movs	r2, #1
{
 80054dc:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 80054de:	6041      	str	r1, [r0, #4]
{
 80054e0:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80054e2:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80054e4:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 80054e8:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80054ec:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 80054f0:	f001 ffdb 	bl	80074aa <HAL_I2C_Init>
 80054f4:	4601      	mov	r1, r0
 80054f6:	b108      	cbz	r0, 80054fc <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 80054f8:	2001      	movs	r0, #1
}
 80054fa:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 80054fc:	4620      	mov	r0, r4
 80054fe:	f002 f9fc 	bl	80078fa <HAL_I2CEx_ConfigAnalogFilter>
 8005502:	4601      	mov	r1, r0
 8005504:	2800      	cmp	r0, #0
 8005506:	d1f7      	bne.n	80054f8 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8005508:	4620      	mov	r0, r4
 800550a:	f002 fa1c 	bl	8007946 <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
 800550e:	3800      	subs	r0, #0
 8005510:	bf18      	it	ne
 8005512:	2001      	movne	r0, #1
 8005514:	e7f1      	b.n	80054fa <MX_I2C4_Init+0x22>
	...

08005518 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 8005518:	4ba3      	ldr	r3, [pc, #652]	; (80057a8 <BSP_I2C4_Init+0x290>)
 800551a:	48a4      	ldr	r0, [pc, #656]	; (80057ac <BSP_I2C4_Init+0x294>)
{
 800551c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 8005520:	6003      	str	r3, [r0, #0]
{
 8005522:	b093      	sub	sp, #76	; 0x4c
  if (I2c4InitCounter == 0U)
 8005524:	4ba2      	ldr	r3, [pc, #648]	; (80057b0 <BSP_I2C4_Init+0x298>)
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	9200      	str	r2, [sp, #0]
 800552a:	2a00      	cmp	r2, #0
 800552c:	f040 80cf 	bne.w	80056ce <BSP_I2C4_Init+0x1b6>
    I2c4InitCounter++;
 8005530:	2201      	movs	r2, #1
 8005532:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8005534:	f002 f9dc 	bl	80078f0 <HAL_I2C_GetState>
 8005538:	2800      	cmp	r0, #0
 800553a:	f040 80c8 	bne.w	80056ce <BSP_I2C4_Init+0x1b6>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800553e:	4d9d      	ldr	r5, [pc, #628]	; (80057b4 <BSP_I2C4_Init+0x29c>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8005540:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8005544:	2702      	movs	r7, #2
 8005546:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8005548:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800554c:	a90d      	add	r1, sp, #52	; 0x34
 800554e:	489a      	ldr	r0, [pc, #616]	; (80057b8 <BSP_I2C4_Init+0x2a0>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8005550:	f043 0308 	orr.w	r3, r3, #8
 8005554:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8005558:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800555c:	f003 0308 	and.w	r3, r3, #8
 8005560:	930a      	str	r3, [sp, #40]	; 0x28
 8005562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8005564:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005568:	f043 0308 	orr.w	r3, r3, #8
 800556c:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8005570:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005574:	f003 0308 	and.w	r3, r3, #8
 8005578:	930b      	str	r3, [sp, #44]	; 0x2c
 800557a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800557c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005580:	e9cd 380d 	strd	r3, r8, [sp, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005584:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8005586:	e9cd 7610 	strd	r7, r6, [sp, #64]	; 0x40
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800558a:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800558c:	f001 fca8 	bl	8006ee0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8005590:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8005594:	a90d      	add	r1, sp, #52	; 0x34
 8005596:	4888      	ldr	r0, [pc, #544]	; (80057b8 <BSP_I2C4_Init+0x2a0>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8005598:	9611      	str	r6, [sp, #68]	; 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800559a:	e9cd 380d 	strd	r3, r8, [sp, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800559e:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80055a0:	e9cd 370f 	strd	r3, r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80055a4:	f001 fc9c 	bl	8006ee0 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 80055a8:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 80055ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055b0:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 80055b4:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 80055b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055bc:	930c      	str	r3, [sp, #48]	; 0x30
 80055be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  BUS_I2C4_FORCE_RESET();
 80055c0:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 80055c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055c8:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
 80055cc:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 80055d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055d4:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80055d8:	f003 fc0e 	bl	8008df8 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 80055dc:	2800      	cmp	r0, #0
 80055de:	d070      	beq.n	80056c2 <BSP_I2C4_Init+0x1aa>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80055e0:	4b76      	ldr	r3, [pc, #472]	; (80057bc <BSP_I2C4_Init+0x2a4>)
  uint32_t prev_presc = I2C_PRESC_MAX;
 80055e2:	f04f 0810 	mov.w	r8, #16
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80055e6:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 80057c4 <BSP_I2C4_Init+0x2ac>
 80055ea:	f04f 0a14 	mov.w	sl, #20
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80055ee:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 80055f2:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80055f6:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80055fa:	f640 13f6 	movw	r3, #2550	; 0x9f6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80055fe:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8005600:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8005604:	eba3 0380 	sub.w	r3, r3, r0, lsl #2
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8005608:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800560c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005610:	32e2      	adds	r2, #226	; 0xe2
  if (tsdadel_min <= 0)
 8005612:	9302      	str	r3, [sp, #8]
 8005614:	4b6a      	ldr	r3, [pc, #424]	; (80057c0 <BSP_I2C4_Init+0x2a8>)
 8005616:	ea22 7be2 	bic.w	fp, r2, r2, asr #31
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800561a:	9a00      	ldr	r2, [sp, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4696      	mov	lr, r2
{
 8005620:	468c      	mov	ip, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8005622:	2600      	movs	r6, #0
      if (tscldel >= (uint32_t)tscldel_min)
 8005624:	f240 3479 	movw	r4, #889	; 0x379
 8005628:	9601      	str	r6, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800562a:	3601      	adds	r6, #1
      if (tscldel >= (uint32_t)tscldel_min)
 800562c:	45a4      	cmp	ip, r4
 800562e:	d959      	bls.n	80056e4 <BSP_I2C4_Init+0x1cc>
 8005630:	2500      	movs	r5, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8005632:	462f      	mov	r7, r5
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8005634:	45ab      	cmp	fp, r5
 8005636:	d851      	bhi.n	80056dc <BSP_I2C4_Init+0x1c4>
 8005638:	9c02      	ldr	r4, [sp, #8]
 800563a:	42ac      	cmp	r4, r5
 800563c:	d34e      	bcc.n	80056dc <BSP_I2C4_Init+0x1c4>
            if(presc != prev_presc)
 800563e:	4590      	cmp	r8, r2
 8005640:	d04c      	beq.n	80056dc <BSP_I2C4_Init+0x1c4>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005642:	fb0a f803 	mul.w	r8, sl, r3
              I2c_valid_timing_nbr ++;
 8005646:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8005648:	9c01      	ldr	r4, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800564a:	eb09 0e08 	add.w	lr, r9, r8
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800564e:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005650:	f849 2008 	str.w	r2, [r9, r8]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8005654:	e9ce 4701 	strd	r4, r7, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8005658:	d93d      	bls.n	80056d6 <BSP_I2C4_Init+0x1be>
 800565a:	4a59      	ldr	r2, [pc, #356]	; (80057c0 <BSP_I2C4_Init+0x2a8>)
 800565c:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800565e:	4b58      	ldr	r3, [pc, #352]	; (80057c0 <BSP_I2C4_Init+0x2a8>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005660:	f242 7210 	movw	r2, #10000	; 0x2710
 8005664:	4957      	ldr	r1, [pc, #348]	; (80057c4 <BSP_I2C4_Init+0x2ac>)
 8005666:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005668:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800566a:	9203      	str	r2, [sp, #12]
 800566c:	f04f 32ff 	mov.w	r2, #4294967295
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005670:	9305      	str	r3, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005672:	0043      	lsls	r3, r0, #1
 8005674:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8005678:	f5c3 5b90 	rsb	fp, r3, #4608	; 0x1200
 800567c:	f5a3 5311 	sub.w	r3, r3, #9280	; 0x2440
 8005680:	f10b 0b0c 	add.w	fp, fp, #12
 8005684:	9409      	str	r4, [sp, #36]	; 0x24
 8005686:	3b0a      	subs	r3, #10
 8005688:	9302      	str	r3, [sp, #8]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800568a:	9b05      	ldr	r3, [sp, #20]
 800568c:	429f      	cmp	r7, r3
 800568e:	d134      	bne.n	80056fa <BSP_I2C4_Init+0x1e2>
        if (idx < I2C_VALID_TIMING_NBR)
 8005690:	2a7f      	cmp	r2, #127	; 0x7f
 8005692:	d816      	bhi.n	80056c2 <BSP_I2C4_Init+0x1aa>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005694:	2314      	movs	r3, #20
 8005696:	435a      	muls	r2, r3
 8005698:	4b4a      	ldr	r3, [pc, #296]	; (80057c4 <BSP_I2C4_Init+0x2ac>)
 800569a:	1899      	adds	r1, r3, r2
 800569c:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800569e:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80056a0:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80056a4:	684b      	ldr	r3, [r1, #4]
 80056a6:	051b      	lsls	r3, r3, #20
 80056a8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80056ac:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80056ae:	688b      	ldr	r3, [r1, #8]
 80056b0:	041b      	lsls	r3, r3, #16
 80056b2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80056b6:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80056b8:	68cb      	ldr	r3, [r1, #12]
 80056ba:	021b      	lsls	r3, r3, #8
 80056bc:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80056be:	4323      	orrs	r3, r4
 80056c0:	9300      	str	r3, [sp, #0]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80056c2:	9900      	ldr	r1, [sp, #0]
 80056c4:	4839      	ldr	r0, [pc, #228]	; (80057ac <BSP_I2C4_Init+0x294>)
 80056c6:	f7ff ff07 	bl	80054d8 <MX_I2C4_Init>
 80056ca:	2800      	cmp	r0, #0
 80056cc:	d169      	bne.n	80057a2 <BSP_I2C4_Init+0x28a>
  int32_t ret = BSP_ERROR_NONE;
 80056ce:	2000      	movs	r0, #0
}
 80056d0:	b013      	add	sp, #76	; 0x4c
 80056d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056d6:	4690      	mov	r8, r2
 80056d8:	f04f 0e01 	mov.w	lr, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80056dc:	3701      	adds	r7, #1
 80056de:	440d      	add	r5, r1
 80056e0:	2f10      	cmp	r7, #16
 80056e2:	d1a7      	bne.n	8005634 <BSP_I2C4_Init+0x11c>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80056e4:	2e10      	cmp	r6, #16
 80056e6:	448c      	add	ip, r1
 80056e8:	d19c      	bne.n	8005624 <BSP_I2C4_Init+0x10c>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80056ea:	3201      	adds	r2, #1
 80056ec:	4401      	add	r1, r0
 80056ee:	2a10      	cmp	r2, #16
 80056f0:	d196      	bne.n	8005620 <BSP_I2C4_Init+0x108>
 80056f2:	f1be 0f00 	cmp.w	lr, #0
 80056f6:	d1b0      	bne.n	800565a <BSP_I2C4_Init+0x142>
 80056f8:	e7b1      	b.n	800565e <BSP_I2C4_Init+0x146>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80056fa:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80056fc:	f04f 0c00 	mov.w	ip, #0
 8005700:	9c09      	ldr	r4, [sp, #36]	; 0x24
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005702:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005706:	441c      	add	r4, r3
 8005708:	ebab 0503 	sub.w	r5, fp, r3
 800570c:	9404      	str	r4, [sp, #16]
 800570e:	006c      	lsls	r4, r5, #1
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005710:	9d04      	ldr	r5, [sp, #16]
 8005712:	9401      	str	r4, [sp, #4]
 8005714:	9c02      	ldr	r4, [sp, #8]
 8005716:	441c      	add	r4, r3
 8005718:	9408      	str	r4, [sp, #32]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800571a:	f241 245c 	movw	r4, #4700	; 0x125c
 800571e:	f8cd c018 	str.w	ip, [sp, #24]
 8005722:	f1a5 0632 	sub.w	r6, r5, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005726:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800572a:	42a5      	cmp	r5, r4
 800572c:	d92e      	bls.n	800578c <BSP_I2C4_Init+0x274>
 800572e:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 8005732:	d22b      	bcs.n	800578c <BSP_I2C4_Init+0x274>
 8005734:	9c08      	ldr	r4, [sp, #32]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8005736:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800573a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800573e:	1966      	adds	r6, r4, r5
 8005740:	f8dd 9004 	ldr.w	r9, [sp, #4]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8005744:	f206 6a83 	addw	sl, r6, #1667	; 0x683
 8005748:	f241 0447 	movw	r4, #4167	; 0x1047
 800574c:	f8cd e01c 	str.w	lr, [sp, #28]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8005750:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8005754:	45a2      	cmp	sl, r4
 8005756:	d812      	bhi.n	800577e <BSP_I2C4_Init+0x266>
 8005758:	f5b8 6f7a 	cmp.w	r8, #4000	; 0xfa0
 800575c:	d30f      	bcc.n	800577e <BSP_I2C4_Init+0x266>
 800575e:	4540      	cmp	r0, r8
 8005760:	d20d      	bcs.n	800577e <BSP_I2C4_Init+0x266>
              error = -error;
 8005762:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 8005766:	bf28      	it	cs
 8005768:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 800576a:	9c03      	ldr	r4, [sp, #12]
 800576c:	45a2      	cmp	sl, r4
 800576e:	d206      	bcs.n	800577e <BSP_I2C4_Init+0x266>
              I2c_valid_timing[count].scll = scll;
 8005770:	9a06      	ldr	r2, [sp, #24]
              I2c_valid_timing[count].sclh = sclh;
 8005772:	f8cd a00c 	str.w	sl, [sp, #12]
              I2c_valid_timing[count].scll = scll;
 8005776:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 8005778:	9a07      	ldr	r2, [sp, #28]
 800577a:	60ca      	str	r2, [r1, #12]
 800577c:	463a      	mov	r2, r7
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800577e:	f5be 7f80 	cmp.w	lr, #256	; 0x100
 8005782:	eba9 0903 	sub.w	r9, r9, r3
 8005786:	441e      	add	r6, r3
 8005788:	4498      	add	r8, r3
 800578a:	d1db      	bne.n	8005744 <BSP_I2C4_Init+0x22c>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800578c:	9c01      	ldr	r4, [sp, #4]
 800578e:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 8005792:	441d      	add	r5, r3
 8005794:	eba4 0403 	sub.w	r4, r4, r3
 8005798:	9401      	str	r4, [sp, #4]
 800579a:	d1be      	bne.n	800571a <BSP_I2C4_Init+0x202>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800579c:	3701      	adds	r7, #1
 800579e:	3114      	adds	r1, #20
 80057a0:	e773      	b.n	800568a <BSP_I2C4_Init+0x172>
          ret = BSP_ERROR_BUS_FAILURE;
 80057a2:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80057a6:	e793      	b.n	80056d0 <BSP_I2C4_Init+0x1b8>
 80057a8:	58001c00 	.word	0x58001c00
 80057ac:	2400550c 	.word	0x2400550c
 80057b0:	24004b04 	.word	0x24004b04
 80057b4:	58024400 	.word	0x58024400
 80057b8:	58020c00 	.word	0x58020c00
 80057bc:	3b9aca00 	.word	0x3b9aca00
 80057c0:	24005508 	.word	0x24005508
 80057c4:	24004b08 	.word	0x24004b08

080057c8 <BSP_I2C4_WriteReg>:
{
 80057c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80057ca:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80057ce:	9200      	str	r2, [sp, #0]
 80057d0:	460a      	mov	r2, r1
 80057d2:	4601      	mov	r1, r0
 80057d4:	4808      	ldr	r0, [pc, #32]	; (80057f8 <BSP_I2C4_WriteReg+0x30>)
 80057d6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80057da:	2301      	movs	r3, #1
 80057dc:	f001 fed0 	bl	8007580 <HAL_I2C_Mem_Write>
 80057e0:	b140      	cbz	r0, 80057f4 <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80057e2:	4805      	ldr	r0, [pc, #20]	; (80057f8 <BSP_I2C4_WriteReg+0x30>)
 80057e4:	f002 f887 	bl	80078f6 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80057e8:	2804      	cmp	r0, #4
 80057ea:	bf0c      	ite	eq
 80057ec:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 80057f0:	f06f 0003 	mvnne.w	r0, #3
}
 80057f4:	b004      	add	sp, #16
 80057f6:	bd10      	pop	{r4, pc}
 80057f8:	2400550c 	.word	0x2400550c

080057fc <BSP_I2C4_ReadReg>:
{
 80057fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80057fe:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005802:	9200      	str	r2, [sp, #0]
 8005804:	460a      	mov	r2, r1
 8005806:	4601      	mov	r1, r0
 8005808:	4808      	ldr	r0, [pc, #32]	; (800582c <BSP_I2C4_ReadReg+0x30>)
 800580a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800580e:	2301      	movs	r3, #1
 8005810:	f001 ff90 	bl	8007734 <HAL_I2C_Mem_Read>
 8005814:	b140      	cbz	r0, 8005828 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8005816:	4805      	ldr	r0, [pc, #20]	; (800582c <BSP_I2C4_ReadReg+0x30>)
 8005818:	f002 f86d 	bl	80078f6 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800581c:	2804      	cmp	r0, #4
 800581e:	bf0c      	ite	eq
 8005820:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8005824:	f06f 0003 	mvnne.w	r0, #3
}
 8005828:	b004      	add	sp, #16
 800582a:	bd10      	pop	{r4, pc}
 800582c:	2400550c 	.word	0x2400550c

08005830 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8005830:	f000 bd10 	b.w	8006254 <HAL_GetTick>

08005834 <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 8005834:	4a09      	ldr	r2, [pc, #36]	; (800585c <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8005836:	f44f 7c40 	mov.w	ip, #768	; 0x300
  hQspi->Instance                = QUADSPI;
 800583a:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800583c:	684a      	ldr	r2, [r1, #4]
 800583e:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 8005840:	2201      	movs	r2, #1
 8005842:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 8005844:	688a      	ldr	r2, [r1, #8]
 8005846:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 8005848:	680a      	ldr	r2, [r1, #0]
 800584a:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800584c:	2200      	movs	r2, #0
 800584e:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 8005852:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 8005854:	68ca      	ldr	r2, [r1, #12]
 8005856:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 8005858:	f002 bbf8 	b.w	800804c <HAL_QSPI_Init>
 800585c:	52005000 	.word	0x52005000

08005860 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 8005860:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8005862:	b988      	cbnz	r0, 8005888 <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005864:	4c0a      	ldr	r4, [pc, #40]	; (8005890 <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 8005866:	480b      	ldr	r0, [pc, #44]	; (8005894 <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8005868:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800586a:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800586c:	b94b      	cbnz	r3, 8005882 <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800586e:	f7ff f9a5 	bl	8004bbc <MT25TL01G_EnableMemoryMappedModeSTR>
 8005872:	b110      	cbz	r0, 800587a <BSP_QSPI_EnableMemoryMappedMode+0x1a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005874:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 8005878:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800587a:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 800587c:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800587e:	7023      	strb	r3, [r4, #0]
 8005880:	e7fa      	b.n	8005878 <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005882:	f7ff f951 	bl	8004b28 <MT25TL01G_EnableMemoryMappedModeDTR>
 8005886:	e7f4      	b.n	8005872 <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 8005888:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800588c:	e7f4      	b.n	8005878 <BSP_QSPI_EnableMemoryMappedMode+0x18>
 800588e:	bf00      	nop
 8005890:	24005560 	.word	0x24005560
 8005894:	240002bc 	.word	0x240002bc

08005898 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 8005898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589a:	460c      	mov	r4, r1
 800589c:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800589e:	bb28      	cbnz	r0, 80058ec <BSP_QSPI_ConfigFlash+0x54>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 80058a0:	4d17      	ldr	r5, [pc, #92]	; (8005900 <BSP_QSPI_ConfigFlash+0x68>)
 80058a2:	782b      	ldrb	r3, [r5, #0]
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d024      	beq.n	80058f2 <BSP_QSPI_ConfigFlash+0x5a>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80058a8:	2a00      	cmp	r2, #0
 80058aa:	4e16      	ldr	r6, [pc, #88]	; (8005904 <BSP_QSPI_ConfigFlash+0x6c>)
 80058ac:	bf08      	it	eq
 80058ae:	2010      	moveq	r0, #16
 80058b0:	60f0      	str	r0, [r6, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 80058b2:	4630      	mov	r0, r6
 80058b4:	f002 fbca 	bl	800804c <HAL_QSPI_Init>
 80058b8:	b9f0      	cbnz	r0, 80058f8 <BSP_QSPI_ConfigFlash+0x60>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 80058ba:	786b      	ldrb	r3, [r5, #1]
 80058bc:	2b03      	cmp	r3, #3
 80058be:	d10f      	bne.n	80058e0 <BSP_QSPI_ConfigFlash+0x48>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 80058c0:	2c03      	cmp	r4, #3
 80058c2:	d105      	bne.n	80058d0 <BSP_QSPI_ConfigFlash+0x38>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 80058c4:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 80058c6:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 80058c8:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 80058ca:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 80058cc:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 80058ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 80058d0:	4630      	mov	r0, r6
 80058d2:	f7ff f90d 	bl	8004af0 <MT25TL01G_ExitQPIMode>
 80058d6:	2800      	cmp	r0, #0
 80058d8:	d0f4      	beq.n	80058c4 <BSP_QSPI_ConfigFlash+0x2c>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 80058da:	f06f 0004 	mvn.w	r0, #4
 80058de:	e7f6      	b.n	80058ce <BSP_QSPI_ConfigFlash+0x36>
          if(Mode == MT25TL01G_QPI_MODE)
 80058e0:	2c03      	cmp	r4, #3
 80058e2:	d1ef      	bne.n	80058c4 <BSP_QSPI_ConfigFlash+0x2c>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 80058e4:	4630      	mov	r0, r6
 80058e6:	f7ff f8e7 	bl	8004ab8 <MT25TL01G_EnterQPIMode>
 80058ea:	e7f4      	b.n	80058d6 <BSP_QSPI_ConfigFlash+0x3e>
    ret = BSP_ERROR_WRONG_PARAM;
 80058ec:	f06f 0001 	mvn.w	r0, #1
 80058f0:	e7ed      	b.n	80058ce <BSP_QSPI_ConfigFlash+0x36>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 80058f2:	f06f 0019 	mvn.w	r0, #25
 80058f6:	e7ea      	b.n	80058ce <BSP_QSPI_ConfigFlash+0x36>
        ret = BSP_ERROR_PERIPH_FAILURE;
 80058f8:	f06f 0003 	mvn.w	r0, #3
  return ret;
 80058fc:	e7e7      	b.n	80058ce <BSP_QSPI_ConfigFlash+0x36>
 80058fe:	bf00      	nop
 8005900:	24005560 	.word	0x24005560
 8005904:	240002bc 	.word	0x240002bc

08005908 <BSP_QSPI_Init>:
{
 8005908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800590c:	460d      	mov	r5, r1
 800590e:	b0a4      	sub	sp, #144	; 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8005910:	4604      	mov	r4, r0
 8005912:	2800      	cmp	r0, #0
 8005914:	f040 81ac 	bne.w	8005c70 <BSP_QSPI_Init+0x368>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 8005918:	4e03      	ldr	r6, [pc, #12]	; (8005928 <BSP_QSPI_Init+0x20>)
 800591a:	7833      	ldrb	r3, [r6, #0]
 800591c:	b133      	cbz	r3, 800592c <BSP_QSPI_Init+0x24>
  int32_t ret = BSP_ERROR_NONE;
 800591e:	2000      	movs	r0, #0
}
 8005920:	b024      	add	sp, #144	; 0x90
 8005922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005926:	bf00      	nop
 8005928:	24005560 	.word	0x24005560
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 800592c:	4bc2      	ldr	r3, [pc, #776]	; (8005c38 <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800592e:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005932:	2709      	movs	r7, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8005934:	a916      	add	r1, sp, #88	; 0x58
  QSPI_CLK_ENABLE();
 8005936:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800593a:	f04f 0840 	mov.w	r8, #64	; 0x40
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800593e:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 8005942:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005946:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800594a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800594e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005952:	9201      	str	r2, [sp, #4]
 8005954:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 8005956:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005958:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800595c:	67da      	str	r2, [r3, #124]	; 0x7c
  QSPI_RELEASE_RESET();
 800595e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005960:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005964:	67da      	str	r2, [r3, #124]	; 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 8005966:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800596a:	f042 0202 	orr.w	r2, r2, #2
 800596e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005972:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005976:	f002 0202 	and.w	r2, r2, #2
 800597a:	9202      	str	r2, [sp, #8]
 800597c:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 800597e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005982:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005986:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800598a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800598e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8005992:	9203      	str	r2, [sp, #12]
 8005994:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 8005996:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800599a:	f042 0208 	orr.w	r2, r2, #8
 800599e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80059a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80059a6:	f002 0208 	and.w	r2, r2, #8
 80059aa:	9204      	str	r2, [sp, #16]
 80059ac:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 80059ae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80059b2:	f042 0220 	orr.w	r2, r2, #32
 80059b6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80059ba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80059be:	f002 0220 	and.w	r2, r2, #32
 80059c2:	9205      	str	r2, [sp, #20]
 80059c4:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 80059c6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80059ca:	f042 0220 	orr.w	r2, r2, #32
 80059ce:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80059d2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80059d6:	f002 0220 	and.w	r2, r2, #32
 80059da:	9206      	str	r2, [sp, #24]
 80059dc:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 80059de:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80059e2:	f042 0220 	orr.w	r2, r2, #32
 80059e6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80059ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80059ee:	f002 0220 	and.w	r2, r2, #32
 80059f2:	9207      	str	r2, [sp, #28]
 80059f4:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 80059f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80059fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059fe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005a02:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005a06:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8005a0a:	9208      	str	r2, [sp, #32]
 8005a0c:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 8005a0e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005a12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a16:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005a1a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005a1e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005a22:	9209      	str	r2, [sp, #36]	; 0x24
 8005a24:	9a09      	ldr	r2, [sp, #36]	; 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 8005a26:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005a2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a2e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005a32:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005a36:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005a3a:	920a      	str	r2, [sp, #40]	; 0x28
 8005a3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 8005a3e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005a42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a46:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005a4a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005a4e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8005a52:	920b      	str	r2, [sp, #44]	; 0x2c
 8005a54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 8005a56:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005a5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a5e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6a:	930c      	str	r3, [sp, #48]	; 0x30
 8005a6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005a6e:	2302      	movs	r3, #2
 8005a70:	e9cd 9316 	strd	r9, r3, [sp, #88]	; 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a74:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005a76:	971a      	str	r7, [sp, #104]	; 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005a78:	e9cd 0318 	strd	r0, r3, [sp, #96]	; 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8005a7c:	486f      	ldr	r0, [pc, #444]	; (8005c3c <BSP_QSPI_Init+0x334>)
 8005a7e:	f001 fa2f 	bl	8006ee0 <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005a82:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8005a84:	a916      	add	r1, sp, #88	; 0x58
 8005a86:	486e      	ldr	r0, [pc, #440]	; (8005c40 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005a88:	9318      	str	r3, [sp, #96]	; 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8005a8a:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8005a8e:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8005a92:	f001 fa25 	bl	8006ee0 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8005a96:	f44f 6300 	mov.w	r3, #2048	; 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8005a9a:	a916      	add	r1, sp, #88	; 0x58
 8005a9c:	4869      	ldr	r0, [pc, #420]	; (8005c44 <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8005a9e:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005aa0:	9418      	str	r4, [sp, #96]	; 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005aa2:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8005aa4:	f001 fa1c 	bl	8006ee0 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8005aa8:	a916      	add	r1, sp, #88	; 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 8005aaa:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8005aae:	4866      	ldr	r0, [pc, #408]	; (8005c48 <BSP_QSPI_Init+0x340>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8005ab0:	f44f 7900 	mov.w	r9, #512	; 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005ab4:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8005ab6:	f001 fa13 	bl	8006ee0 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8005aba:	a916      	add	r1, sp, #88	; 0x58
 8005abc:	4863      	ldr	r0, [pc, #396]	; (8005c4c <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8005abe:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8005ac2:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8005ac6:	f001 fa0b 	bl	8006ee0 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8005aca:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8005acc:	a916      	add	r1, sp, #88	; 0x58
 8005ace:	485e      	ldr	r0, [pc, #376]	; (8005c48 <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8005ad0:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005ad2:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8005ad4:	f001 fa04 	bl	8006ee0 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8005ad8:	2380      	movs	r3, #128	; 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8005ada:	a916      	add	r1, sp, #88	; 0x58
 8005adc:	485b      	ldr	r0, [pc, #364]	; (8005c4c <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8005ade:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005ae0:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8005ae2:	f001 f9fd 	bl	8006ee0 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8005ae6:	a916      	add	r1, sp, #88	; 0x58
 8005ae8:	4855      	ldr	r0, [pc, #340]	; (8005c40 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 8005aea:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8005aee:	f001 f9f7 	bl	8006ee0 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8005af2:	a916      	add	r1, sp, #88	; 0x58
 8005af4:	4855      	ldr	r0, [pc, #340]	; (8005c4c <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 8005af6:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8005afa:	f001 f9f1 	bl	8006ee0 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8005afe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8005b02:	a916      	add	r1, sp, #88	; 0x58
 8005b04:	484e      	ldr	r0, [pc, #312]	; (8005c40 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8005b06:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8005b08:	f001 f9ea 	bl	8006ee0 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8005b0c:	4622      	mov	r2, r4
 8005b0e:	210f      	movs	r1, #15
 8005b10:	205c      	movs	r0, #92	; 0x5c
 8005b12:	f000 fbcf 	bl	80062b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8005b16:	205c      	movs	r0, #92	; 0x5c
 8005b18:	f000 fbfe 	bl	8006318 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 8005b1c:	a811      	add	r0, sp, #68	; 0x44
 8005b1e:	f7fe ff22 	bl	8004966 <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8005b22:	786a      	ldrb	r2, [r5, #1]
 8005b24:	4b4a      	ldr	r3, [pc, #296]	; (8005c50 <BSP_QSPI_Init+0x348>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 8005b26:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8005b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b2e:	930e      	str	r3, [sp, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b32:	fa93 f3a3 	rbit	r3, r3
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005b36:	2a00      	cmp	r2, #0
  return __builtin_clz(value);
 8005b38:	fab3 f383 	clz	r3, r3
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8005b3c:	a90d      	add	r1, sp, #52	; 0x34
 8005b3e:	4845      	ldr	r0, [pc, #276]	; (8005c54 <BSP_QSPI_Init+0x34c>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005b40:	bf08      	it	eq
 8005b42:	2410      	moveq	r4, #16
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8005b44:	3b01      	subs	r3, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005b46:	940f      	str	r4, [sp, #60]	; 0x3c
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8005b48:	930d      	str	r3, [sp, #52]	; 0x34
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8005b4a:	f7ff fe73 	bl	8005834 <MX_QSPI_Init>
 8005b4e:	2800      	cmp	r0, #0
 8005b50:	f040 8091 	bne.w	8005c76 <BSP_QSPI_Init+0x36e>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8005b54:	2103      	movs	r1, #3
 8005b56:	483f      	ldr	r0, [pc, #252]	; (8005c54 <BSP_QSPI_Init+0x34c>)
 8005b58:	f7ff f876 	bl	8004c48 <MT25TL01G_ResetEnable>
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	d17c      	bne.n	8005c5a <BSP_QSPI_Init+0x352>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8005b60:	2103      	movs	r1, #3
 8005b62:	483c      	ldr	r0, [pc, #240]	; (8005c54 <BSP_QSPI_Init+0x34c>)
 8005b64:	f7ff f891 	bl	8004c8a <MT25TL01G_ResetMemory>
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	d176      	bne.n	8005c5a <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005b6c:	7871      	ldrb	r1, [r6, #1]
 8005b6e:	4839      	ldr	r0, [pc, #228]	; (8005c54 <BSP_QSPI_Init+0x34c>)
 8005b70:	f7fe ff0a 	bl	8004988 <MT25TL01G_AutoPollingMemReady>
 8005b74:	4601      	mov	r1, r0
 8005b76:	2800      	cmp	r0, #0
 8005b78:	d16f      	bne.n	8005c5a <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8005b7a:	4836      	ldr	r0, [pc, #216]	; (8005c54 <BSP_QSPI_Init+0x34c>)
 8005b7c:	f7ff f864 	bl	8004c48 <MT25TL01G_ResetEnable>
 8005b80:	4601      	mov	r1, r0
 8005b82:	2800      	cmp	r0, #0
 8005b84:	d169      	bne.n	8005c5a <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8005b86:	4833      	ldr	r0, [pc, #204]	; (8005c54 <BSP_QSPI_Init+0x34c>)
 8005b88:	f7ff f87f 	bl	8004c8a <MT25TL01G_ResetMemory>
 8005b8c:	4601      	mov	r1, r0
 8005b8e:	2800      	cmp	r0, #0
 8005b90:	d163      	bne.n	8005c5a <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8005b92:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 8005b94:	70b0      	strb	r0, [r6, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005b96:	482f      	ldr	r0, [pc, #188]	; (8005c54 <BSP_QSPI_Init+0x34c>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8005b98:	8033      	strh	r3, [r6, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005b9a:	f7fe fef5 	bl	8004988 <MT25TL01G_AutoPollingMemReady>
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	d15b      	bne.n	8005c5a <BSP_QSPI_Init+0x352>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005ba2:	7871      	ldrb	r1, [r6, #1]
 8005ba4:	482b      	ldr	r0, [pc, #172]	; (8005c54 <BSP_QSPI_Init+0x34c>)
 8005ba6:	f7fe ff5e 	bl	8004a66 <MT25TL01G_Enter4BytesAddressMode>
 8005baa:	2800      	cmp	r0, #0
 8005bac:	d155      	bne.n	8005c5a <BSP_QSPI_Init+0x352>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005bae:	f44f 7340 	mov.w	r3, #768	; 0x300
  uint16_t reg=0;
 8005bb2:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 8005bb6:	901b      	str	r0, [sp, #108]	; 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005bb8:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005bbc:	931c      	str	r3, [sp, #112]	; 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8005bbe:	2385      	movs	r3, #133	; 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005bc0:	a916      	add	r1, sp, #88	; 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8005bc2:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8005bc4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8005bc8:	931f      	str	r3, [sp, #124]	; 0x7c
  s_command.NbData            = 2;
 8005bca:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005bcc:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005bd0:	e9cd 3020 	strd	r3, r0, [sp, #128]	; 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005bd4:	e9cd 0022 	strd	r0, r0, [sp, #136]	; 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005bd8:	481e      	ldr	r0, [pc, #120]	; (8005c54 <BSP_QSPI_Init+0x34c>)
 8005bda:	f002 fa85 	bl	80080e8 <HAL_QSPI_Command>
 8005bde:	2800      	cmp	r0, #0
 8005be0:	d13b      	bne.n	8005c5a <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005be6:	f10d 0102 	add.w	r1, sp, #2
 8005bea:	481a      	ldr	r0, [pc, #104]	; (8005c54 <BSP_QSPI_Init+0x34c>)
 8005bec:	f002 fb18 	bl	8008220 <HAL_QSPI_Receive>
 8005bf0:	bb98      	cbnz	r0, 8005c5a <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005bf2:	7871      	ldrb	r1, [r6, #1]
 8005bf4:	4817      	ldr	r0, [pc, #92]	; (8005c54 <BSP_QSPI_Init+0x34c>)
 8005bf6:	f7fe fef2 	bl	80049de <MT25TL01G_WriteEnable>
 8005bfa:	bb70      	cbnz	r0, 8005c5a <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8005bfc:	2381      	movs	r3, #129	; 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c02:	a916      	add	r1, sp, #88	; 0x58
 8005c04:	4813      	ldr	r0, [pc, #76]	; (8005c54 <BSP_QSPI_Init+0x34c>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8005c06:	9316      	str	r3, [sp, #88]	; 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 8005c08:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005c0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c10:	051b      	lsls	r3, r3, #20
 8005c12:	0d1b      	lsrs	r3, r3, #20
 8005c14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c1c:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005c20:	f002 fa62 	bl	80080e8 <HAL_QSPI_Command>
 8005c24:	b9c8      	cbnz	r0, 8005c5a <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c2a:	f10d 0102 	add.w	r1, sp, #2
 8005c2e:	4809      	ldr	r0, [pc, #36]	; (8005c54 <BSP_QSPI_Init+0x34c>)
 8005c30:	f002 fa9d 	bl	800816e <HAL_QSPI_Transmit>
 8005c34:	e010      	b.n	8005c58 <BSP_QSPI_Init+0x350>
 8005c36:	bf00      	nop
 8005c38:	58024400 	.word	0x58024400
 8005c3c:	58020400 	.word	0x58020400
 8005c40:	58021800 	.word	0x58021800
 8005c44:	58020c00 	.word	0x58020c00
 8005c48:	58021c00 	.word	0x58021c00
 8005c4c:	58021400 	.word	0x58021400
 8005c50:	080201c0 	.word	0x080201c0
 8005c54:	240002bc 	.word	0x240002bc
 8005c58:	b110      	cbz	r0, 8005c60 <BSP_QSPI_Init+0x358>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8005c5a:	f06f 0004 	mvn.w	r0, #4
 8005c5e:	e65f      	b.n	8005920 <BSP_QSPI_Init+0x18>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8005c60:	786a      	ldrb	r2, [r5, #1]
 8005c62:	7829      	ldrb	r1, [r5, #0]
 8005c64:	f7ff fe18 	bl	8005898 <BSP_QSPI_ConfigFlash>
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	f43f ae58 	beq.w	800591e <BSP_QSPI_Init+0x16>
 8005c6e:	e7f4      	b.n	8005c5a <BSP_QSPI_Init+0x352>
    ret = BSP_ERROR_WRONG_PARAM;
 8005c70:	f06f 0001 	mvn.w	r0, #1
 8005c74:	e654      	b.n	8005920 <BSP_QSPI_Init+0x18>
          ret = BSP_ERROR_PERIPH_FAILURE;
 8005c76:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8005c7a:	e651      	b.n	8005920 <BSP_QSPI_Init+0x18>

08005c7c <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 8005c7c:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 8005c7e:	4604      	mov	r4, r0
 8005c80:	b970      	cbnz	r0, 8005ca0 <BSP_SDRAM_DeInit+0x24>
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 8005c82:	4b09      	ldr	r3, [pc, #36]	; (8005ca8 <BSP_SDRAM_DeInit+0x2c>)
 8005c84:	4809      	ldr	r0, [pc, #36]	; (8005cac <BSP_SDRAM_DeInit+0x30>)
 8005c86:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 8005c88:	f003 ff3c 	bl	8009b04 <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 8005c8c:	207a      	movs	r0, #122	; 0x7a
 8005c8e:	f000 fb51 	bl	8006334 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8005c92:	4807      	ldr	r0, [pc, #28]	; (8005cb0 <BSP_SDRAM_DeInit+0x34>)
 8005c94:	4b07      	ldr	r3, [pc, #28]	; (8005cb4 <BSP_SDRAM_DeInit+0x38>)
 8005c96:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8005c98:	f002 f8a5 	bl	8007de6 <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 8005c9c:	4620      	mov	r0, r4
}
 8005c9e:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8005ca0:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8005ca4:	e7fb      	b.n	8005c9e <BSP_SDRAM_DeInit+0x22>
 8005ca6:	bf00      	nop
 8005ca8:	52004140 	.word	0x52004140
 8005cac:	2400556c 	.word	0x2400556c
 8005cb0:	240055a0 	.word	0x240055a0
 8005cb4:	52000040 	.word	0x52000040

08005cb8 <MX_SDRAM_Init>:
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8005cb8:	2201      	movs	r2, #1
 8005cba:	4915      	ldr	r1, [pc, #84]	; (8005d10 <MX_SDRAM_Init+0x58>)
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005cbc:	4b15      	ldr	r3, [pc, #84]	; (8005d14 <MX_SDRAM_Init+0x5c>)
{
 8005cbe:	b510      	push	{r4, lr}
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8005cc0:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8005cc4:	6082      	str	r2, [r0, #8]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8005cc6:	2104      	movs	r1, #4
 8005cc8:	2220      	movs	r2, #32
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8005cca:	2440      	movs	r4, #64	; 0x40
{
 8005ccc:	b088      	sub	sp, #32
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8005cce:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8005cd2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8005cd6:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8005ce0:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005ce4:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8005ce8:	6244      	str	r4, [r0, #36]	; 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005cea:	629a      	str	r2, [r3, #40]	; 0x28
  sdram_timing.ExitSelfRefreshDelay = 7;
 8005cec:	2207      	movs	r2, #7
 8005cee:	2302      	movs	r3, #2
  sdram_timing.RowCycleDelay        = 7;
 8005cf0:	e9cd 1203 	strd	r1, r2, [sp, #12]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8005cf4:	4469      	add	r1, sp
  sdram_timing.RCDDelay             = 2;
 8005cf6:	9307      	str	r3, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8005cf8:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 8005cfc:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8005d00:	f003 fed8 	bl	8009ab4 <HAL_SDRAM_Init>
}
 8005d04:	3800      	subs	r0, #0
 8005d06:	bf18      	it	ne
 8005d08:	2001      	movne	r0, #1
 8005d0a:	b008      	add	sp, #32
 8005d0c:	bd10      	pop	{r4, pc}
 8005d0e:	bf00      	nop
 8005d10:	52004140 	.word	0x52004140
 8005d14:	2400556c 	.word	0x2400556c

08005d18 <BSP_SDRAM_Init>:
{
 8005d18:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 8005d1a:	4605      	mov	r5, r0
{
 8005d1c:	b08f      	sub	sp, #60	; 0x3c
  if(Instance >=SDRAM_INSTANCES_NBR)
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	f040 80dd 	bne.w	8005ede <BSP_SDRAM_Init+0x1c6>
  __HAL_RCC_FMC_CLK_ENABLE();
 8005d24:	4b71      	ldr	r3, [pc, #452]	; (8005eec <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005d26:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005d28:	a909      	add	r1, sp, #36	; 0x24
 8005d2a:	4871      	ldr	r0, [pc, #452]	; (8005ef0 <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8005d2c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8005d30:	4c70      	ldr	r4, [pc, #448]	; (8005ef4 <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8005d32:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8005d36:	4e70      	ldr	r6, [pc, #448]	; (8005ef8 <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8005d38:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8005d3c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005d40:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005d44:	9201      	str	r2, [sp, #4]
 8005d46:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 8005d48:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005d4c:	f042 0201 	orr.w	r2, r2, #1
 8005d50:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8005d54:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005d58:	f002 0201 	and.w	r2, r2, #1
 8005d5c:	9202      	str	r2, [sp, #8]
 8005d5e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005d60:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005d64:	f042 0208 	orr.w	r2, r2, #8
 8005d68:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005d6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005d70:	f002 0208 	and.w	r2, r2, #8
 8005d74:	9203      	str	r2, [sp, #12]
 8005d76:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005d78:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005d7c:	f042 0210 	orr.w	r2, r2, #16
 8005d80:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005d84:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005d88:	f002 0210 	and.w	r2, r2, #16
 8005d8c:	9204      	str	r2, [sp, #16]
 8005d8e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005d90:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005d94:	f042 0220 	orr.w	r2, r2, #32
 8005d98:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005d9c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005da0:	f002 0220 	and.w	r2, r2, #32
 8005da4:	9205      	str	r2, [sp, #20]
 8005da6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005da8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005dac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005db0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005db4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005db8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8005dbc:	9206      	str	r2, [sp, #24]
 8005dbe:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005dc0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005dc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005dc8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005dcc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005dd0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005dd4:	9207      	str	r2, [sp, #28]
 8005dd6:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005dd8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005ddc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005de0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005de4:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dee:	9308      	str	r3, [sp, #32]
 8005df0:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005df8:	230c      	movs	r3, #12
 8005dfa:	e9cd 730c 	strd	r7, r3, [sp, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8005dfe:	f24c 7303 	movw	r3, #50947	; 0xc703
 8005e02:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005e04:	f001 f86c 	bl	8006ee0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005e08:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005e0c:	a909      	add	r1, sp, #36	; 0x24
 8005e0e:	483b      	ldr	r0, [pc, #236]	; (8005efc <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005e10:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005e12:	f001 f865 	bl	8006ee0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005e16:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005e1a:	a909      	add	r1, sp, #36	; 0x24
 8005e1c:	4838      	ldr	r0, [pc, #224]	; (8005f00 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005e1e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005e20:	f001 f85e 	bl	8006ee0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8005e24:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005e28:	a909      	add	r1, sp, #36	; 0x24
 8005e2a:	4836      	ldr	r0, [pc, #216]	; (8005f04 <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8005e2c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005e2e:	f001 f857 	bl	8006ee0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8005e32:	f64f 73e0 	movw	r3, #65504	; 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8005e36:	a909      	add	r1, sp, #36	; 0x24
 8005e38:	4833      	ldr	r0, [pc, #204]	; (8005f08 <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8005e3a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8005e3c:	f001 f850 	bl	8006ee0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8005e40:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8005e44:	a909      	add	r1, sp, #36	; 0x24
 8005e46:	4831      	ldr	r0, [pc, #196]	; (8005f0c <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8005e48:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8005e4a:	f001 f849 	bl	8006ee0 <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8005e4e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005e52:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8005e56:	f240 2002 	movw	r0, #514	; 0x202
 8005e5a:	f640 0208 	movw	r2, #2056	; 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8005e5e:	6334      	str	r4, [r6, #48]	; 0x30
 8005e60:	6426      	str	r6, [r4, #64]	; 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8005e62:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8005e66:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8005e6a:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8005e6c:	2220      	movs	r2, #32
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8005e6e:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 8005e70:	62a3      	str	r3, [r4, #40]	; 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8005e72:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8005e76:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8005e7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8005e7e:	4b24      	ldr	r3, [pc, #144]	; (8005f10 <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8005e80:	6262      	str	r2, [r4, #36]	; 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8005e82:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8005e84:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8005e88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8005e8c:	f001 ffab 	bl	8007de6 <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 8005e90:	4620      	mov	r0, r4
 8005e92:	f001 ff39 	bl	8007d08 <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8005e96:	462a      	mov	r2, r5
 8005e98:	210f      	movs	r1, #15
 8005e9a:	207a      	movs	r0, #122	; 0x7a
 8005e9c:	f000 fa0a 	bl	80062b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8005ea0:	207a      	movs	r0, #122	; 0x7a
 8005ea2:	f000 fa39 	bl	8006318 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 8005ea6:	4630      	mov	r0, r6
 8005ea8:	f7ff ff06 	bl	8005cb8 <MX_SDRAM_Init>
 8005eac:	b9d0      	cbnz	r0, 8005ee4 <BSP_SDRAM_Init+0x1cc>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8005eae:	4919      	ldr	r1, [pc, #100]	; (8005f14 <BSP_SDRAM_Init+0x1fc>)
 8005eb0:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8005eb2:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8005eb6:	f240 6303 	movw	r3, #1539	; 0x603
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 8005eba:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 8005ebc:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8005ec0:	2330      	movs	r3, #48	; 0x30
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8005ec2:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8005ec6:	f44f 7300 	mov.w	r3, #512	; 0x200
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8005eca:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8005ecc:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8005ece:	f7fe fd1d 	bl	800490c <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8005ed2:	2800      	cmp	r0, #0
 8005ed4:	bf18      	it	ne
 8005ed6:	f06f 0004 	mvnne.w	r0, #4
}
 8005eda:	b00f      	add	sp, #60	; 0x3c
 8005edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8005ede:	f06f 0001 	mvn.w	r0, #1
 8005ee2:	e7fa      	b.n	8005eda <BSP_SDRAM_Init+0x1c2>
      ret = BSP_ERROR_NO_INIT;
 8005ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee8:	e7f7      	b.n	8005eda <BSP_SDRAM_Init+0x1c2>
 8005eea:	bf00      	nop
 8005eec:	58024400 	.word	0x58024400
 8005ef0:	58020c00 	.word	0x58020c00
 8005ef4:	2400560c 	.word	0x2400560c
 8005ef8:	2400556c 	.word	0x2400556c
 8005efc:	58021000 	.word	0x58021000
 8005f00:	58021400 	.word	0x58021400
 8005f04:	58021800 	.word	0x58021800
 8005f08:	58021c00 	.word	0x58021c00
 8005f0c:	58022000 	.word	0x58022000
 8005f10:	52000040 	.word	0x52000040
 8005f14:	24005678 	.word	0x24005678

08005f18 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8005f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f1c:	460c      	mov	r4, r1
 8005f1e:	b08c      	sub	sp, #48	; 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8005f20:	4606      	mov	r6, r0
 8005f22:	2800      	cmp	r0, #0
 8005f24:	d171      	bne.n	800600a <BSP_TS_Init+0xf2>
 8005f26:	680b      	ldr	r3, [r1, #0]
 8005f28:	1e5a      	subs	r2, r3, #1
 8005f2a:	f5b2 7f48 	cmp.w	r2, #800	; 0x320
 8005f2e:	d26c      	bcs.n	800600a <BSP_TS_Init+0xf2>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8005f30:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8005f32:	1e51      	subs	r1, r2, #1
 8005f34:	f5b1 7ff0 	cmp.w	r1, #480	; 0x1e0
 8005f38:	d267      	bcs.n	800600a <BSP_TS_Init+0xf2>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	bf28      	it	cs
 8005f3e:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8005f40:	68e2      	ldr	r2, [r4, #12]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d861      	bhi.n	800600a <BSP_TS_Init+0xf2>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8005f46:	2370      	movs	r3, #112	; 0x70
 8005f48:	2254      	movs	r2, #84	; 0x54
 8005f4a:	f10d 0a04 	add.w	sl, sp, #4

  for(i = 0; i < 2UL; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8005f4e:	4f32      	ldr	r7, [pc, #200]	; (8006018 <BSP_TS_Init+0x100>)
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
      Ts_CompObj[Instance] = &FT6X06Obj;
 8005f50:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8006038 <BSP_TS_Init+0x120>
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8005f54:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 800603c <BSP_TS_Init+0x124>
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8005f58:	e9cd 2301 	strd	r2, r3, [sp, #4]
  IOCtx.Init        = BSP_I2C4_Init;
 8005f5c:	4b2f      	ldr	r3, [pc, #188]	; (800601c <BSP_TS_Init+0x104>)
 8005f5e:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8005f60:	4b2f      	ldr	r3, [pc, #188]	; (8006020 <BSP_TS_Init+0x108>)
 8005f62:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8005f64:	4b2f      	ldr	r3, [pc, #188]	; (8006024 <BSP_TS_Init+0x10c>)
 8005f66:	930a      	str	r3, [sp, #40]	; 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8005f68:	4b2f      	ldr	r3, [pc, #188]	; (8006028 <BSP_TS_Init+0x110>)
 8005f6a:	9309      	str	r3, [sp, #36]	; 0x24
  IOCtx.GetTick     = BSP_GetTick;
 8005f6c:	4b2f      	ldr	r3, [pc, #188]	; (800602c <BSP_TS_Init+0x114>)
 8005f6e:	930b      	str	r3, [sp, #44]	; 0x2c
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8005f70:	f85a 3b04 	ldr.w	r3, [sl], #4
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8005f74:	a906      	add	r1, sp, #24
 8005f76:	4828      	ldr	r0, [pc, #160]	; (8006018 <BSP_TS_Init+0x100>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8005f78:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8005f7c:	f7fe fbcc 	bl	8004718 <FT6X06_RegisterBusIO>
 8005f80:	b118      	cbz	r0, 8005f8a <BSP_TS_Init+0x72>
  for(i = 0; i < 2UL; i++)
 8005f82:	2e01      	cmp	r6, #1
 8005f84:	d044      	beq.n	8006010 <BSP_TS_Init+0xf8>
 8005f86:	2601      	movs	r6, #1
 8005f88:	e7f2      	b.n	8005f70 <BSP_TS_Init+0x58>
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 8005f8a:	4669      	mov	r1, sp
 8005f8c:	4638      	mov	r0, r7
 8005f8e:	f7fe fb0c 	bl	80045aa <FT6X06_ReadID>
 8005f92:	2800      	cmp	r0, #0
 8005f94:	d1f5      	bne.n	8005f82 <BSP_TS_Init+0x6a>
    else if(id != FT6X06_ID)
 8005f96:	9b00      	ldr	r3, [sp, #0]
 8005f98:	2b11      	cmp	r3, #17
 8005f9a:	d1f2      	bne.n	8005f82 <BSP_TS_Init+0x6a>
      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 8005f9c:	a903      	add	r1, sp, #12
 8005f9e:	4638      	mov	r0, r7
 8005fa0:	f7fe fab0 	bl	8004504 <FT6X06_GetCapabilities>
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8005fa4:	4b22      	ldr	r3, [pc, #136]	; (8006030 <BSP_TS_Init+0x118>)

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 8005fa6:	4638      	mov	r0, r7
      Ts_CompObj[Instance] = &FT6X06Obj;
 8005fa8:	f8c8 7000 	str.w	r7, [r8]
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8005fac:	f8c9 3000 	str.w	r3, [r9]
      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4798      	blx	r3
 8005fb4:	4605      	mov	r5, r0
 8005fb6:	2800      	cmp	r0, #0
 8005fb8:	d1e3      	bne.n	8005f82 <BSP_TS_Init+0x6a>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8005fba:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8005fbc:	a906      	add	r1, sp, #24
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8005fbe:	4e1d      	ldr	r6, [pc, #116]	; (8006034 <BSP_TS_Init+0x11c>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8005fc0:	f8d8 0000 	ldr.w	r0, [r8]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8005fc4:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8005fc6:	6863      	ldr	r3, [r4, #4]
 8005fc8:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8005fca:	68a3      	ldr	r3, [r4, #8]
 8005fcc:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8005fce:	68e3      	ldr	r3, [r4, #12]
 8005fd0:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8005fd2:	f8d9 3000 	ldr.w	r3, [r9]
 8005fd6:	69db      	ldr	r3, [r3, #28]
 8005fd8:	4798      	blx	r3
 8005fda:	2800      	cmp	r0, #0
 8005fdc:	da02      	bge.n	8005fe4 <BSP_TS_Init+0xcc>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005fde:	f06f 0504 	mvn.w	r5, #4
 8005fe2:	e00e      	b.n	8006002 <BSP_TS_Init+0xea>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8005fe4:	9b07      	ldr	r3, [sp, #28]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005fe6:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8005fe8:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8005fea:	9b08      	ldr	r3, [sp, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005fec:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8005fee:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005ff0:	68e3      	ldr	r3, [r4, #12]
 8005ff2:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005ff4:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005ff6:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005ff8:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005ffa:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005ffc:	6273      	str	r3, [r6, #36]	; 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005ffe:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 8006002:	4628      	mov	r0, r5
 8006004:	b00c      	add	sp, #48	; 0x30
 8006006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800600a:	f06f 0501 	mvn.w	r5, #1
  return ret;
 800600e:	e7f8      	b.n	8006002 <BSP_TS_Init+0xea>
      ret = BSP_ERROR_NO_INIT;
 8006010:	f04f 35ff 	mov.w	r5, #4294967295
 8006014:	e7f5      	b.n	8006002 <BSP_TS_Init+0xea>
 8006016:	bf00      	nop
 8006018:	24005698 	.word	0x24005698
 800601c:	08005519 	.word	0x08005519
 8006020:	08005485 	.word	0x08005485
 8006024:	080057fd 	.word	0x080057fd
 8006028:	080057c9 	.word	0x080057c9
 800602c:	08005831 	.word	0x08005831
 8006030:	24000018 	.word	0x24000018
 8006034:	240056c4 	.word	0x240056c4
 8006038:	240056c0 	.word	0x240056c0
 800603c:	240056ec 	.word	0x240056ec

08006040 <BSP_TS_GetState>:
{
 8006040:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006044:	460e      	mov	r6, r1
  if(Instance >= TS_INSTANCES_NBR)
 8006046:	2800      	cmp	r0, #0
 8006048:	d151      	bne.n	80060ee <BSP_TS_GetState+0xae>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800604a:	4b2a      	ldr	r3, [pc, #168]	; (80060f4 <BSP_TS_GetState+0xb4>)
 800604c:	a901      	add	r1, sp, #4
 800604e:	4a2a      	ldr	r2, [pc, #168]	; (80060f8 <BSP_TS_GetState+0xb8>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	6810      	ldr	r0, [r2, #0]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	4798      	blx	r3
 8006058:	2800      	cmp	r0, #0
 800605a:	db45      	blt.n	80060e8 <BSP_TS_GetState+0xa8>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800605c:	4927      	ldr	r1, [pc, #156]	; (80060fc <BSP_TS_GetState+0xbc>)
    else if(state.TouchDetected != 0U)
 800605e:	9801      	ldr	r0, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8006060:	f8d1 c018 	ldr.w	ip, [r1, #24]
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8006064:	6a0f      	ldr	r7, [r1, #32]
    else if(state.TouchDetected != 0U)
 8006066:	2800      	cmp	r0, #0
 8006068:	d03a      	beq.n	80060e0 <BSP_TS_GetState+0xa0>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800606a:	688b      	ldr	r3, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 800606c:	f8d1 8010 	ldr.w	r8, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8006070:	071c      	lsls	r4, r3, #28
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8006072:	f8d1 e014 	ldr.w	lr, [r1, #20]
      y_oriented = state.TouchY;
 8006076:	e9dd 5202 	ldrd	r5, r2, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800607a:	bf42      	ittt	mi
 800607c:	462c      	movmi	r4, r5
        x_oriented = state.TouchY;
 800607e:	4615      	movmi	r5, r2
        y_oriented = state.TouchX;
 8006080:	4622      	movmi	r2, r4
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8006082:	079c      	lsls	r4, r3, #30
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8006084:	bf44      	itt	mi
 8006086:	f108 34ff 	addmi.w	r4, r8, #4294967295
 800608a:	1b65      	submi	r5, r4, r5
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800608c:	075b      	lsls	r3, r3, #29
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800608e:	680c      	ldr	r4, [r1, #0]
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8006090:	bf48      	it	mi
 8006092:	f10e 33ff 	addmi.w	r3, lr, #4294967295
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8006096:	fb05 f404 	mul.w	r4, r5, r4
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 800609a:	bf48      	it	mi
 800609c:	1a9a      	submi	r2, r3, r2
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800609e:	684b      	ldr	r3, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 80060a0:	6030      	str	r0, [r6, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80060a2:	4353      	muls	r3, r2
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80060a4:	68c8      	ldr	r0, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80060a6:	fbb4 f4f8 	udiv	r4, r4, r8
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80060aa:	fbb3 f3fe 	udiv	r3, r3, lr
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80060ae:	4564      	cmp	r4, ip
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80060b0:	6074      	str	r4, [r6, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80060b2:	60b3      	str	r3, [r6, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80060b4:	bf8c      	ite	hi
 80060b6:	eba4 050c 	subhi.w	r5, r4, ip
 80060ba:	ebac 0504 	subls.w	r5, ip, r4
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 80060be:	42bb      	cmp	r3, r7
 80060c0:	bf8c      	ite	hi
 80060c2:	1bda      	subhi	r2, r3, r7
 80060c4:	1afa      	subls	r2, r7, r3
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80060c6:	42a8      	cmp	r0, r5
 80060c8:	d301      	bcc.n	80060ce <BSP_TS_GetState+0x8e>
 80060ca:	4290      	cmp	r0, r2
 80060cc:	d205      	bcs.n	80060da <BSP_TS_GetState+0x9a>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 80060ce:	618c      	str	r4, [r1, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 80060d0:	620b      	str	r3, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 80060d2:	2000      	movs	r0, #0
}
 80060d4:	b004      	add	sp, #16
 80060d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80060da:	e9c6 c701 	strd	ip, r7, [r6, #4]
 80060de:	e7f8      	b.n	80060d2 <BSP_TS_GetState+0x92>
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 80060e0:	e9c6 0c00 	strd	r0, ip, [r6]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80060e4:	60b7      	str	r7, [r6, #8]
 80060e6:	e7f5      	b.n	80060d4 <BSP_TS_GetState+0x94>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80060e8:	f06f 0004 	mvn.w	r0, #4
 80060ec:	e7f2      	b.n	80060d4 <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 80060ee:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80060f2:	e7ef      	b.n	80060d4 <BSP_TS_GetState+0x94>
 80060f4:	240056ec 	.word	0x240056ec
 80060f8:	240056c0 	.word	0x240056c0
 80060fc:	240056c4 	.word	0x240056c4

08006100 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006100:	4b2d      	ldr	r3, [pc, #180]	; (80061b8 <SystemInit+0xb8>)
 8006102:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006106:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800610a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800610e:	691a      	ldr	r2, [r3, #16]
 8006110:	f042 0210 	orr.w	r2, r2, #16
 8006114:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006116:	4a29      	ldr	r2, [pc, #164]	; (80061bc <SystemInit+0xbc>)
 8006118:	6813      	ldr	r3, [r2, #0]
 800611a:	f003 030f 	and.w	r3, r3, #15
 800611e:	2b06      	cmp	r3, #6
 8006120:	d805      	bhi.n	800612e <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006122:	6813      	ldr	r3, [r2, #0]
 8006124:	f023 030f 	bic.w	r3, r3, #15
 8006128:	f043 0307 	orr.w	r3, r3, #7
 800612c:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800612e:	4b24      	ldr	r3, [pc, #144]	; (80061c0 <SystemInit+0xc0>)
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	f042 0201 	orr.w	r2, r2, #1
 8006136:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006138:	2200      	movs	r2, #0
 800613a:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800613c:	4a21      	ldr	r2, [pc, #132]	; (80061c4 <SystemInit+0xc4>)
 800613e:	6819      	ldr	r1, [r3, #0]
 8006140:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006142:	491e      	ldr	r1, [pc, #120]	; (80061bc <SystemInit+0xbc>)
  RCC->CR &= 0xEAF6ED7FU;
 8006144:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006146:	680a      	ldr	r2, [r1, #0]
 8006148:	0712      	lsls	r2, r2, #28
 800614a:	d505      	bpl.n	8006158 <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800614c:	680a      	ldr	r2, [r1, #0]
 800614e:	f022 020f 	bic.w	r2, r2, #15
 8006152:	f042 0207 	orr.w	r2, r2, #7
 8006156:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8006158:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800615a:	491b      	ldr	r1, [pc, #108]	; (80061c8 <SystemInit+0xc8>)
  RCC->D1CFGR = 0x00000000;
 800615c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800615e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8006160:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8006162:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8006164:	4919      	ldr	r1, [pc, #100]	; (80061cc <SystemInit+0xcc>)
 8006166:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8006168:	4919      	ldr	r1, [pc, #100]	; (80061d0 <SystemInit+0xd0>)
 800616a:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800616c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800616e:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8006170:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8006172:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006174:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006176:	6819      	ldr	r1, [r3, #0]
 8006178:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800617c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800617e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8006180:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006184:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 8006188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800618c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006190:	4b10      	ldr	r3, [pc, #64]	; (80061d4 <SystemInit+0xd4>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	0c1b      	lsrs	r3, r3, #16
 8006196:	041b      	lsls	r3, r3, #16
 8006198:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800619c:	d203      	bcs.n	80061a6 <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800619e:	4b0e      	ldr	r3, [pc, #56]	; (80061d8 <SystemInit+0xd8>)
 80061a0:	2201      	movs	r2, #1
 80061a2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80061a6:	4b0d      	ldr	r3, [pc, #52]	; (80061dc <SystemInit+0xdc>)
 80061a8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80061ac:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80061ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80061b2:	4b01      	ldr	r3, [pc, #4]	; (80061b8 <SystemInit+0xb8>)
 80061b4:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80061b6:	4770      	bx	lr
 80061b8:	e000ed00 	.word	0xe000ed00
 80061bc:	52002000 	.word	0x52002000
 80061c0:	58024400 	.word	0x58024400
 80061c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80061c8:	02020200 	.word	0x02020200
 80061cc:	01ff0000 	.word	0x01ff0000
 80061d0:	01010280 	.word	0x01010280
 80061d4:	5c001000 	.word	0x5c001000
 80061d8:	51008000 	.word	0x51008000
 80061dc:	52004000 	.word	0x52004000

080061e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80061e0:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80061e2:	2003      	movs	r0, #3
 80061e4:	f000 f854 	bl	8006290 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80061e8:	f002 fc0c 	bl	8008a04 <HAL_RCC_GetSysClockFreq>
 80061ec:	490f      	ldr	r1, [pc, #60]	; (800622c <HAL_Init+0x4c>)
 80061ee:	4a10      	ldr	r2, [pc, #64]	; (8006230 <HAL_Init+0x50>)
 80061f0:	698b      	ldr	r3, [r1, #24]
 80061f2:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80061f6:	5cd3      	ldrb	r3, [r2, r3]
 80061f8:	f003 031f 	and.w	r3, r3, #31
 80061fc:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80061fe:	698b      	ldr	r3, [r1, #24]
 8006200:	f003 030f 	and.w	r3, r3, #15
 8006204:	5cd3      	ldrb	r3, [r2, r3]
 8006206:	4a0b      	ldr	r2, [pc, #44]	; (8006234 <HAL_Init+0x54>)
 8006208:	f003 031f 	and.w	r3, r3, #31
 800620c:	fa20 f303 	lsr.w	r3, r0, r3
 8006210:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006212:	4b09      	ldr	r3, [pc, #36]	; (8006238 <HAL_Init+0x58>)
 8006214:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006216:	2000      	movs	r0, #0
 8006218:	f7fa ff2e 	bl	8001078 <HAL_InitTick>
 800621c:	4604      	mov	r4, r0
 800621e:	b918      	cbnz	r0, 8006228 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006220:	f7fa fcb2 	bl	8000b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8006224:	4620      	mov	r0, r4
 8006226:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006228:	2401      	movs	r4, #1
 800622a:	e7fb      	b.n	8006224 <HAL_Init+0x44>
 800622c:	58024400 	.word	0x58024400
 8006230:	080201c8 	.word	0x080201c8
 8006234:	2400004c 	.word	0x2400004c
 8006238:	24000048 	.word	0x24000048

0800623c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800623c:	4a03      	ldr	r2, [pc, #12]	; (800624c <HAL_IncTick+0x10>)
 800623e:	4b04      	ldr	r3, [pc, #16]	; (8006250 <HAL_IncTick+0x14>)
 8006240:	6811      	ldr	r1, [r2, #0]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	440b      	add	r3, r1
 8006246:	6013      	str	r3, [r2, #0]
}
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	240056f0 	.word	0x240056f0
 8006250:	24000050 	.word	0x24000050

08006254 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006254:	4b01      	ldr	r3, [pc, #4]	; (800625c <HAL_GetTick+0x8>)
 8006256:	6818      	ldr	r0, [r3, #0]
}
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	240056f0 	.word	0x240056f0

08006260 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006260:	b538      	push	{r3, r4, r5, lr}
 8006262:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006264:	f7ff fff6 	bl	8006254 <HAL_GetTick>
 8006268:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800626a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800626c:	bf1e      	ittt	ne
 800626e:	4b04      	ldrne	r3, [pc, #16]	; (8006280 <HAL_Delay+0x20>)
 8006270:	781b      	ldrbne	r3, [r3, #0]
 8006272:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006274:	f7ff ffee 	bl	8006254 <HAL_GetTick>
 8006278:	1b43      	subs	r3, r0, r5
 800627a:	42a3      	cmp	r3, r4
 800627c:	d3fa      	bcc.n	8006274 <HAL_Delay+0x14>
  {
  }
}
 800627e:	bd38      	pop	{r3, r4, r5, pc}
 8006280:	24000050 	.word	0x24000050

08006284 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8006284:	4b01      	ldr	r3, [pc, #4]	; (800628c <HAL_GetREVID+0x8>)
 8006286:	6818      	ldr	r0, [r3, #0]
}
 8006288:	0c00      	lsrs	r0, r0, #16
 800628a:	4770      	bx	lr
 800628c:	5c001000 	.word	0x5c001000

08006290 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006290:	4907      	ldr	r1, [pc, #28]	; (80062b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006292:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006294:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006296:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800629a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800629e:	0412      	lsls	r2, r2, #16
 80062a0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80062a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80062a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80062a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80062ac:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80062ae:	4770      	bx	lr
 80062b0:	e000ed00 	.word	0xe000ed00

080062b4 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062b4:	4b16      	ldr	r3, [pc, #88]	; (8006310 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062b6:	b530      	push	{r4, r5, lr}
 80062b8:	68dc      	ldr	r4, [r3, #12]
 80062ba:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062be:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062c2:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062c4:	2d04      	cmp	r5, #4
 80062c6:	bf28      	it	cs
 80062c8:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062ca:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062cc:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062d0:	bf8c      	ite	hi
 80062d2:	3c03      	subhi	r4, #3
 80062d4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062d6:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 80062da:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80062dc:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062e0:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80062e4:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062e8:	fa01 f104 	lsl.w	r1, r1, r4
 80062ec:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062f0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80062f4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80062f6:	db06      	blt.n	8006306 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062f8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80062fc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8006300:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006304:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006306:	f000 000f 	and.w	r0, r0, #15
 800630a:	4a02      	ldr	r2, [pc, #8]	; (8006314 <HAL_NVIC_SetPriority+0x60>)
 800630c:	5413      	strb	r3, [r2, r0]
 800630e:	e7f9      	b.n	8006304 <HAL_NVIC_SetPriority+0x50>
 8006310:	e000ed00 	.word	0xe000ed00
 8006314:	e000ed14 	.word	0xe000ed14

08006318 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006318:	2800      	cmp	r0, #0
 800631a:	db08      	blt.n	800632e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800631c:	2301      	movs	r3, #1
 800631e:	0942      	lsrs	r2, r0, #5
 8006320:	f000 001f 	and.w	r0, r0, #31
 8006324:	fa03 f000 	lsl.w	r0, r3, r0
 8006328:	4b01      	ldr	r3, [pc, #4]	; (8006330 <HAL_NVIC_EnableIRQ+0x18>)
 800632a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800632e:	4770      	bx	lr
 8006330:	e000e100 	.word	0xe000e100

08006334 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006334:	2800      	cmp	r0, #0
 8006336:	db0d      	blt.n	8006354 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006338:	0943      	lsrs	r3, r0, #5
 800633a:	2201      	movs	r2, #1
 800633c:	f000 001f 	and.w	r0, r0, #31
 8006340:	3320      	adds	r3, #32
 8006342:	fa02 f000 	lsl.w	r0, r2, r0
 8006346:	4a04      	ldr	r2, [pc, #16]	; (8006358 <HAL_NVIC_DisableIRQ+0x24>)
 8006348:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800634c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006350:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	e000e100 	.word	0xe000e100

0800635c <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800635c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006360:	4b04      	ldr	r3, [pc, #16]	; (8006374 <HAL_MPU_Disable+0x18>)
 8006362:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006364:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006368:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800636a:	2200      	movs	r2, #0
 800636c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	e000ed00 	.word	0xe000ed00

08006378 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006378:	4b06      	ldr	r3, [pc, #24]	; (8006394 <HAL_MPU_Enable+0x1c>)
 800637a:	f040 0001 	orr.w	r0, r0, #1
 800637e:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006382:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006384:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006388:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800638a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800638e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006392:	4770      	bx	lr
 8006394:	e000ed00 	.word	0xe000ed00

08006398 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006398:	7843      	ldrb	r3, [r0, #1]
 800639a:	4a14      	ldr	r2, [pc, #80]	; (80063ec <HAL_MPU_ConfigRegion+0x54>)
{
 800639c:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 800639e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 80063a2:	7801      	ldrb	r1, [r0, #0]
 80063a4:	b1e9      	cbz	r1, 80063e2 <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80063a6:	6843      	ldr	r3, [r0, #4]
 80063a8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80063ac:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80063ae:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80063b0:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80063b2:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80063b6:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80063b8:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80063ba:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80063be:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80063c0:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80063c4:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80063c6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80063ca:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80063cc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80063d0:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80063d2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80063d6:	7a01      	ldrb	r1, [r0, #8]
 80063d8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80063dc:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80063e0:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 80063e2:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 80063e6:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 80063ea:	e7f9      	b.n	80063e0 <HAL_MPU_ConfigRegion+0x48>
 80063ec:	e000ed00 	.word	0xe000ed00

080063f0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80063f0:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80063f2:	4604      	mov	r4, r0
 80063f4:	b908      	cbnz	r0, 80063fa <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 80063f6:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80063f8:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 80063fa:	7f43      	ldrb	r3, [r0, #29]
 80063fc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006400:	b913      	cbnz	r3, 8006408 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8006402:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8006404:	f7fa fbd8 	bl	8000bb8 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006408:	2302      	movs	r3, #2
 800640a:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800640c:	7923      	ldrb	r3, [r4, #4]
 800640e:	b9e3      	cbnz	r3, 800644a <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006410:	6823      	ldr	r3, [r4, #0]
 8006412:	4a13      	ldr	r2, [pc, #76]	; (8006460 <HAL_CRC_Init+0x70>)
 8006414:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006416:	689a      	ldr	r2, [r3, #8]
 8006418:	f022 0218 	bic.w	r2, r2, #24
 800641c:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800641e:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006420:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006422:	b9d2      	cbnz	r2, 800645a <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006424:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006428:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 800642a:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800642c:	689a      	ldr	r2, [r3, #8]
 800642e:	6961      	ldr	r1, [r4, #20]
 8006430:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006434:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006436:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006438:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800643a:	689a      	ldr	r2, [r3, #8]
 800643c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006440:	430a      	orrs	r2, r1
 8006442:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8006444:	2301      	movs	r3, #1
 8006446:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8006448:	e7d6      	b.n	80063f8 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800644a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800644e:	4620      	mov	r0, r4
 8006450:	f000 f808 	bl	8006464 <HAL_CRCEx_Polynomial_Set>
 8006454:	2800      	cmp	r0, #0
 8006456:	d0e2      	beq.n	800641e <HAL_CRC_Init+0x2e>
 8006458:	e7cd      	b.n	80063f6 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800645a:	6922      	ldr	r2, [r4, #16]
 800645c:	e7e4      	b.n	8006428 <HAL_CRC_Init+0x38>
 800645e:	bf00      	nop
 8006460:	04c11db7 	.word	0x04c11db7

08006464 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8006464:	07cb      	lsls	r3, r1, #31
{
 8006466:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8006468:	d50c      	bpl.n	8006484 <HAL_CRCEx_Polynomial_Set+0x20>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800646a:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800646c:	3b01      	subs	r3, #1
 800646e:	d31c      	bcc.n	80064aa <HAL_CRCEx_Polynomial_Set+0x46>
 8006470:	fa21 f403 	lsr.w	r4, r1, r3
 8006474:	07e4      	lsls	r4, r4, #31
 8006476:	d5f9      	bpl.n	800646c <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 8006478:	2a10      	cmp	r2, #16
 800647a:	d012      	beq.n	80064a2 <HAL_CRCEx_Polynomial_Set+0x3e>
 800647c:	d804      	bhi.n	8006488 <HAL_CRCEx_Polynomial_Set+0x24>
 800647e:	b13a      	cbz	r2, 8006490 <HAL_CRCEx_Polynomial_Set+0x2c>
 8006480:	2a08      	cmp	r2, #8
 8006482:	d010      	beq.n	80064a6 <HAL_CRCEx_Polynomial_Set+0x42>
        }
        break;
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
        {
          status =   HAL_ERROR;
 8006484:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8006486:	e00b      	b.n	80064a0 <HAL_CRCEx_Polynomial_Set+0x3c>
    switch (PolyLength)
 8006488:	2a18      	cmp	r2, #24
 800648a:	d1fb      	bne.n	8006484 <HAL_CRCEx_Polynomial_Set+0x20>
        if (msb >= HAL_CRC_LENGTH_7B)
 800648c:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 800648e:	d8f9      	bhi.n	8006484 <HAL_CRCEx_Polynomial_Set+0x20>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006490:	6800      	ldr	r0, [r0, #0]
 8006492:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006494:	6883      	ldr	r3, [r0, #8]
 8006496:	f023 0318 	bic.w	r3, r3, #24
 800649a:	431a      	orrs	r2, r3
 800649c:	6082      	str	r2, [r0, #8]
 800649e:	2000      	movs	r0, #0
}
 80064a0:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 80064a2:	2b07      	cmp	r3, #7
 80064a4:	e7f3      	b.n	800648e <HAL_CRCEx_Polynomial_Set+0x2a>
        if (msb >= HAL_CRC_LENGTH_16B)
 80064a6:	2b0f      	cmp	r3, #15
 80064a8:	e7f1      	b.n	800648e <HAL_CRCEx_Polynomial_Set+0x2a>
    switch (PolyLength)
 80064aa:	2a00      	cmp	r2, #0
 80064ac:	d1ea      	bne.n	8006484 <HAL_CRCEx_Polynomial_Set+0x20>
 80064ae:	e7ef      	b.n	8006490 <HAL_CRCEx_Polynomial_Set+0x2c>

080064b0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80064b0:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80064b2:	4604      	mov	r4, r0
 80064b4:	2800      	cmp	r0, #0
 80064b6:	d036      	beq.n	8006526 <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80064b8:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 80064bc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80064c0:	b91b      	cbnz	r3, 80064ca <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80064c2:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80064c6:	f7fa fb8f 	bl	8000be8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80064ca:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80064cc:	69e0      	ldr	r0, [r4, #28]
 80064ce:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80064d0:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80064d4:	6823      	ldr	r3, [r4, #0]
 80064d6:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80064d8:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80064da:	6819      	ldr	r1, [r3, #0]
 80064dc:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 80064e0:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80064e4:	430a      	orrs	r2, r1
 80064e6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80064e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80064ea:	68a2      	ldr	r2, [r4, #8]
 80064ec:	f421 7183 	bic.w	r1, r1, #262	; 0x106
 80064f0:	4302      	orrs	r2, r0
 80064f2:	f021 0101 	bic.w	r1, r1, #1
 80064f6:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80064f8:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80064fa:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80064fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064fe:	0c12      	lsrs	r2, r2, #16
 8006500:	0412      	lsls	r2, r2, #16
 8006502:	430a      	orrs	r2, r1
 8006504:	641a      	str	r2, [r3, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006506:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006508:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800650c:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8006510:	0552      	lsls	r2, r2, #21
 8006512:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006516:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006518:	430a      	orrs	r2, r1
 800651a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800651c:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800651e:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006520:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
 8006524:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006526:	2001      	movs	r0, #1
 8006528:	e7fc      	b.n	8006524 <HAL_DMA2D_Init+0x74>

0800652a <HAL_DMA2D_LineEventCallback>:
 800652a:	4770      	bx	lr

0800652c <HAL_DMA2D_CLUTLoadingCpltCallback>:
 800652c:	4770      	bx	lr

0800652e <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800652e:	6803      	ldr	r3, [r0, #0]
{
 8006530:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006532:	685e      	ldr	r6, [r3, #4]
{
 8006534:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006536:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006538:	07f2      	lsls	r2, r6, #31
 800653a:	d514      	bpl.n	8006566 <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800653c:	05e9      	lsls	r1, r5, #23
 800653e:	d512      	bpl.n	8006566 <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006546:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006548:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800654a:	f042 0201 	orr.w	r2, r2, #1
 800654e:	6642      	str	r2, [r0, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006550:	2201      	movs	r2, #1
 8006552:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006554:	2304      	movs	r3, #4
 8006556:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800655a:	2300      	movs	r3, #0
 800655c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8006560:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006562:	b103      	cbz	r3, 8006566 <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006564:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006566:	06b2      	lsls	r2, r6, #26
 8006568:	d516      	bpl.n	8006598 <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800656a:	04ab      	lsls	r3, r5, #18
 800656c:	d514      	bpl.n	8006598 <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800656e:	6823      	ldr	r3, [r4, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006576:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006578:	2220      	movs	r2, #32
 800657a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800657c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800657e:	f043 0302 	orr.w	r3, r3, #2
 8006582:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006584:	2304      	movs	r3, #4
 8006586:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800658a:	2300      	movs	r3, #0
 800658c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8006590:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006592:	b10b      	cbz	r3, 8006598 <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006594:	4620      	mov	r0, r4
 8006596:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006598:	0730      	lsls	r0, r6, #28
 800659a:	d516      	bpl.n	80065ca <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800659c:	0529      	lsls	r1, r5, #20
 800659e:	d514      	bpl.n	80065ca <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80065a0:	6823      	ldr	r3, [r4, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065a8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80065aa:	2208      	movs	r2, #8
 80065ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80065ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065b0:	f043 0304 	orr.w	r3, r3, #4
 80065b4:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80065b6:	2304      	movs	r3, #4
 80065b8:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80065bc:	2300      	movs	r3, #0
 80065be:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 80065c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065c4:	b10b      	cbz	r3, 80065ca <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80065c6:	4620      	mov	r0, r4
 80065c8:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80065ca:	0772      	lsls	r2, r6, #29
 80065cc:	d50b      	bpl.n	80065e6 <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80065ce:	056b      	lsls	r3, r5, #21
 80065d0:	d509      	bpl.n	80065e6 <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80065d2:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80065d4:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065dc:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80065de:	2204      	movs	r2, #4
 80065e0:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80065e2:	f7ff ffa2 	bl	800652a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80065e6:	07b0      	lsls	r0, r6, #30
 80065e8:	d514      	bpl.n	8006614 <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80065ea:	05a9      	lsls	r1, r5, #22
 80065ec:	d512      	bpl.n	8006614 <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80065ee:	6823      	ldr	r3, [r4, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80065f6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80065f8:	2202      	movs	r2, #2
 80065fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80065fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065fe:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006600:	2301      	movs	r3, #1
 8006602:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006606:	2300      	movs	r3, #0
 8006608:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 800660c:	6a23      	ldr	r3, [r4, #32]
 800660e:	b10b      	cbz	r3, 8006614 <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8006610:	4620      	mov	r0, r4
 8006612:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8006614:	06f2      	lsls	r2, r6, #27
 8006616:	d513      	bpl.n	8006640 <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006618:	04eb      	lsls	r3, r5, #19
 800661a:	d511      	bpl.n	8006640 <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800661c:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800661e:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006626:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8006628:	2210      	movs	r2, #16
 800662a:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800662c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800662e:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006630:	2301      	movs	r3, #1
 8006632:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 8006636:	2300      	movs	r3, #0
 8006638:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800663c:	f7ff ff76 	bl	800652c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8006640:	bd70      	pop	{r4, r5, r6, pc}

08006642 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8006642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006646:	4607      	mov	r7, r0
 8006648:	460d      	mov	r5, r1
 800664a:	4614      	mov	r4, r2
 800664c:	461e      	mov	r6, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800664e:	f7ff fe01 	bl	8006254 <HAL_GetTick>
 8006652:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006658:	07d2      	lsls	r2, r2, #31
 800665a:	d50a      	bpl.n	8006672 <DSI_ShortWrite+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800665c:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8006660:	9906      	ldr	r1, [sp, #24]

  return HAL_OK;
 8006662:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8006664:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8006668:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800666c:	66dc      	str	r4, [r3, #108]	; 0x6c
}
 800666e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006672:	f7ff fdef 	bl	8006254 <HAL_GetTick>
 8006676:	eba0 0008 	sub.w	r0, r0, r8
 800667a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800667e:	d9e9      	bls.n	8006654 <DSI_ShortWrite+0x12>
      return HAL_TIMEOUT;
 8006680:	2003      	movs	r0, #3
 8006682:	e7f4      	b.n	800666e <DSI_ShortWrite+0x2c>

08006684 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006684:	7c03      	ldrb	r3, [r0, #16]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d05c      	beq.n	8006744 <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 800668a:	2200      	movs	r2, #0
 800668c:	6803      	ldr	r3, [r0, #0]
 800668e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8006692:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8006696:	07ca      	lsls	r2, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 8006698:	6181      	str	r1, [r0, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800669a:	d507      	bpl.n	80066ac <HAL_DSI_ConfigErrorMonitor+0x28>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 800669c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80066a0:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 80066a4:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 80066a8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80066ac:	078a      	lsls	r2, r1, #30
 80066ae:	d505      	bpl.n	80066bc <HAL_DSI_ConfigErrorMonitor+0x38>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80066b0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80066b4:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 80066b8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80066bc:	074a      	lsls	r2, r1, #29
 80066be:	d505      	bpl.n	80066cc <HAL_DSI_ConfigErrorMonitor+0x48>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80066c0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80066c4:	f042 0201 	orr.w	r2, r2, #1
 80066c8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80066cc:	070a      	lsls	r2, r1, #28
 80066ce:	d505      	bpl.n	80066dc <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80066d0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80066d4:	f042 0202 	orr.w	r2, r2, #2
 80066d8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80066dc:	06ca      	lsls	r2, r1, #27
 80066de:	d505      	bpl.n	80066ec <HAL_DSI_ConfigErrorMonitor+0x68>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80066e0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80066e4:	f042 020c 	orr.w	r2, r2, #12
 80066e8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 80066ec:	068a      	lsls	r2, r1, #26
 80066ee:	d505      	bpl.n	80066fc <HAL_DSI_ConfigErrorMonitor+0x78>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80066f0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80066f4:	f042 0210 	orr.w	r2, r2, #16
 80066f8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80066fc:	064a      	lsls	r2, r1, #25
 80066fe:	d505      	bpl.n	800670c <HAL_DSI_ConfigErrorMonitor+0x88>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8006700:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006704:	f042 0220 	orr.w	r2, r2, #32
 8006708:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800670c:	060a      	lsls	r2, r1, #24
 800670e:	d505      	bpl.n	800671c <HAL_DSI_ConfigErrorMonitor+0x98>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8006710:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006714:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006718:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800671c:	05ca      	lsls	r2, r1, #23
 800671e:	d505      	bpl.n	800672c <HAL_DSI_ConfigErrorMonitor+0xa8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8006720:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006724:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006728:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800672c:	058a      	lsls	r2, r1, #22
 800672e:	d505      	bpl.n	800673c <HAL_DSI_ConfigErrorMonitor+0xb8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8006730:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006734:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8006738:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800673c:	2300      	movs	r3, #0
 800673e:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8006740:	4618      	mov	r0, r3
 8006742:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006744:	2002      	movs	r0, #2
}
 8006746:	4770      	bx	lr

08006748 <HAL_DSI_Init>:
{
 8006748:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800674a:	460d      	mov	r5, r1
  if (hdsi == NULL)
 800674c:	4604      	mov	r4, r0
 800674e:	2800      	cmp	r0, #0
 8006750:	f000 80a9 	beq.w	80068a6 <HAL_DSI_Init+0x15e>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8006754:	7c43      	ldrb	r3, [r0, #17]
 8006756:	b90b      	cbnz	r3, 800675c <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 8006758:	f7fa fa6a 	bl	8000c30 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 800675c:	2303      	movs	r3, #3
 800675e:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8006760:	2300      	movs	r3, #0
 8006762:	9300      	str	r3, [sp, #0]
 8006764:	6823      	ldr	r3, [r4, #0]
 8006766:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800676a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800676e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8006772:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8006776:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800677a:	9300      	str	r3, [sp, #0]
 800677c:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800677e:	f7ff fd69 	bl	8006254 <HAL_GetTick>
 8006782:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8006784:	6822      	ldr	r2, [r4, #0]
 8006786:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 800678a:	04d9      	lsls	r1, r3, #19
 800678c:	d57a      	bpl.n	8006884 <HAL_DSI_Init+0x13c>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800678e:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8006792:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8006796:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 800679a:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800679e:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80067a2:	e9d5 0300 	ldrd	r0, r3, [r5]
 80067a6:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80067a8:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 80067ac:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80067ae:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 80067b2:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80067b4:	430b      	orrs	r3, r1
 80067b6:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 80067ba:	2300      	movs	r3, #0
 80067bc:	9301      	str	r3, [sp, #4]
 80067be:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 80067c2:	f043 0301 	orr.w	r3, r3, #1
 80067c6:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 80067ca:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	9301      	str	r3, [sp, #4]
 80067d4:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 80067d6:	f7ff fd43 	bl	8006260 <HAL_Delay>
  tickstart = HAL_GetTick();
 80067da:	f7ff fd3b 	bl	8006254 <HAL_GetTick>
 80067de:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80067e0:	6823      	ldr	r3, [r4, #0]
 80067e2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80067e6:	05d2      	lsls	r2, r2, #23
 80067e8:	d556      	bpl.n	8006898 <HAL_DSI_Init+0x150>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80067ea:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80067ee:	f246 10a8 	movw	r0, #25000	; 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80067f2:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80067f4:	f042 0206 	orr.w	r2, r2, #6
 80067f8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80067fc:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8006800:	f022 0203 	bic.w	r2, r2, #3
 8006804:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8006808:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800680c:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800680e:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8006810:	f042 0201 	orr.w	r2, r2, #1
 8006814:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8006818:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800681c:	f022 0203 	bic.w	r2, r2, #3
 8006820:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8006824:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8006828:	430a      	orrs	r2, r1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800682a:	68a1      	ldr	r1, [r4, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800682c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8006830:	689a      	ldr	r2, [r3, #8]
 8006832:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006836:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8006838:	689a      	ldr	r2, [r3, #8]
 800683a:	430a      	orrs	r2, r1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800683c:	491b      	ldr	r1, [pc, #108]	; (80068ac <HAL_DSI_Init+0x164>)
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800683e:	609a      	str	r2, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006840:	686a      	ldr	r2, [r5, #4]
 8006842:	2a01      	cmp	r2, #1
 8006844:	bf38      	it	cc
 8006846:	2201      	movcc	r2, #1
 8006848:	434a      	muls	r2, r1
 800684a:	68a9      	ldr	r1, [r5, #8]
 800684c:	f001 0103 	and.w	r1, r1, #3
 8006850:	408a      	lsls	r2, r1
 8006852:	6829      	ldr	r1, [r5, #0]
 8006854:	4341      	muls	r1, r0
  hdsi->Instance->IER[0U] = 0U;
 8006856:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006858:	fbb2 f2f1 	udiv	r2, r2, r1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800685c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8006860:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8006864:	f8c3 1418 	str.w	r1, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8006868:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 800686c:	430a      	orrs	r2, r1
 800686e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 8006872:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8006876:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  hdsi->State = HAL_DSI_STATE_READY;
 800687a:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800687c:	6160      	str	r0, [r4, #20]
  hdsi->ErrorMsk = 0U;
 800687e:	61a0      	str	r0, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 8006880:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 8006882:	e007      	b.n	8006894 <HAL_DSI_Init+0x14c>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006884:	f7ff fce6 	bl	8006254 <HAL_GetTick>
 8006888:	1b80      	subs	r0, r0, r6
 800688a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800688e:	f67f af79 	bls.w	8006784 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8006892:	2003      	movs	r0, #3
}
 8006894:	b002      	add	sp, #8
 8006896:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006898:	f7ff fcdc 	bl	8006254 <HAL_GetTick>
 800689c:	1b80      	subs	r0, r0, r6
 800689e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80068a2:	d99d      	bls.n	80067e0 <HAL_DSI_Init+0x98>
 80068a4:	e7f5      	b.n	8006892 <HAL_DSI_Init+0x14a>
    return HAL_ERROR;
 80068a6:	2001      	movs	r0, #1
 80068a8:	e7f4      	b.n	8006894 <HAL_DSI_Init+0x14c>
 80068aa:	bf00      	nop
 80068ac:	003d0900 	.word	0x003d0900

080068b0 <HAL_DSI_ErrorCallback>:
 80068b0:	4770      	bx	lr

080068b2 <HAL_DSI_IRQHandler>:
{
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80068b2:	6803      	ldr	r3, [r0, #0]
 80068b4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80068b8:	07d1      	lsls	r1, r2, #31
{
 80068ba:	b510      	push	{r4, lr}
 80068bc:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80068be:	d508      	bpl.n	80068d2 <HAL_DSI_IRQHandler+0x20>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 80068c0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80068c4:	07d2      	lsls	r2, r2, #31
 80068c6:	d504      	bpl.n	80068d2 <HAL_DSI_IRQHandler+0x20>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 80068c8:	2201      	movs	r2, #1
 80068ca:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 80068ce:	f7fb f82f 	bl	8001930 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80068d2:	6823      	ldr	r3, [r4, #0]
 80068d4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80068d8:	0791      	lsls	r1, r2, #30
 80068da:	d509      	bpl.n	80068f0 <HAL_DSI_IRQHandler+0x3e>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 80068dc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80068e0:	0792      	lsls	r2, r2, #30
 80068e2:	d505      	bpl.n	80068f0 <HAL_DSI_IRQHandler+0x3e>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80068e4:	2202      	movs	r2, #2
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80068e6:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80068e8:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80068ec:	f7fb f852 	bl	8001994 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 80068f0:	69a3      	ldr	r3, [r4, #24]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d04e      	beq.n	8006994 <HAL_DSI_IRQHandler+0xe2>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 80068f6:	6821      	ldr	r1, [r4, #0]
 80068f8:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80068fc:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8006900:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8006904:	401a      	ands	r2, r3
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8006906:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800690a:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800690c:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800690e:	b119      	cbz	r1, 8006918 <HAL_DSI_IRQHandler+0x66>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8006910:	6961      	ldr	r1, [r4, #20]
 8006912:	f041 0101 	orr.w	r1, r1, #1
 8006916:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8006918:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 800691c:	d003      	beq.n	8006926 <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800691e:	6962      	ldr	r2, [r4, #20]
 8006920:	f042 0202 	orr.w	r2, r2, #2
 8006924:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8006926:	07d8      	lsls	r0, r3, #31
 8006928:	d503      	bpl.n	8006932 <HAL_DSI_IRQHandler+0x80>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800692a:	6962      	ldr	r2, [r4, #20]
 800692c:	f042 0204 	orr.w	r2, r2, #4
 8006930:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8006932:	0799      	lsls	r1, r3, #30
 8006934:	d503      	bpl.n	800693e <HAL_DSI_IRQHandler+0x8c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8006936:	6962      	ldr	r2, [r4, #20]
 8006938:	f042 0208 	orr.w	r2, r2, #8
 800693c:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800693e:	f013 0f0c 	tst.w	r3, #12
 8006942:	d003      	beq.n	800694c <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8006944:	6962      	ldr	r2, [r4, #20]
 8006946:	f042 0210 	orr.w	r2, r2, #16
 800694a:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800694c:	06da      	lsls	r2, r3, #27
 800694e:	d503      	bpl.n	8006958 <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8006950:	6962      	ldr	r2, [r4, #20]
 8006952:	f042 0220 	orr.w	r2, r2, #32
 8006956:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8006958:	0698      	lsls	r0, r3, #26
 800695a:	d503      	bpl.n	8006964 <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800695c:	6962      	ldr	r2, [r4, #20]
 800695e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006962:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8006964:	0659      	lsls	r1, r3, #25
 8006966:	d503      	bpl.n	8006970 <HAL_DSI_IRQHandler+0xbe>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8006968:	6962      	ldr	r2, [r4, #20]
 800696a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800696e:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8006970:	061a      	lsls	r2, r3, #24
 8006972:	d503      	bpl.n	800697c <HAL_DSI_IRQHandler+0xca>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8006974:	6962      	ldr	r2, [r4, #20]
 8006976:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800697a:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800697c:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 8006980:	d003      	beq.n	800698a <HAL_DSI_IRQHandler+0xd8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8006982:	6963      	ldr	r3, [r4, #20]
 8006984:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006988:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800698a:	6963      	ldr	r3, [r4, #20]
 800698c:	b113      	cbz	r3, 8006994 <HAL_DSI_IRQHandler+0xe2>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 800698e:	4620      	mov	r0, r4
 8006990:	f7ff ff8e 	bl	80068b0 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8006994:	bd10      	pop	{r4, pc}

08006996 <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006996:	7c03      	ldrb	r3, [r0, #16]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d00b      	beq.n	80069b4 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 800699c:	6803      	ldr	r3, [r0, #0]
 800699e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069a0:	f022 0203 	bic.w	r2, r2, #3
 80069a4:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80069a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069a8:	4311      	orrs	r1, r2
 80069aa:	6319      	str	r1, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80069ac:	2300      	movs	r3, #0
 80069ae:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80069b0:	4618      	mov	r0, r3
 80069b2:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80069b4:	2002      	movs	r0, #2
}
 80069b6:	4770      	bx	lr

080069b8 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 80069b8:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 80069ba:	7c03      	ldrb	r3, [r0, #16]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d06a      	beq.n	8006a96 <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80069c0:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80069c2:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80069c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069c6:	f042 0201 	orr.w	r2, r2, #1
 80069ca:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80069cc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80069d0:	f022 0201 	bic.w	r2, r2, #1
 80069d4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80069d8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80069dc:	f042 0201 	orr.w	r2, r2, #1
 80069e0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80069e4:	68da      	ldr	r2, [r3, #12]
 80069e6:	f022 0203 	bic.w	r2, r2, #3
 80069ea:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80069ec:	68da      	ldr	r2, [r3, #12]
 80069ee:	4322      	orrs	r2, r4
 80069f0:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80069f2:	695a      	ldr	r2, [r3, #20]
 80069f4:	f022 0207 	bic.w	r2, r2, #7
 80069f8:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80069fa:	695c      	ldr	r4, [r3, #20]
 80069fc:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 8006a00:	432a      	orrs	r2, r5
 8006a02:	694d      	ldr	r5, [r1, #20]
 8006a04:	432a      	orrs	r2, r5

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8006a06:	684d      	ldr	r5, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8006a08:	4322      	orrs	r2, r4
 8006a0a:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8006a0c:	691a      	ldr	r2, [r3, #16]
 8006a0e:	f022 020f 	bic.w	r2, r2, #15
 8006a12:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8006a14:	691c      	ldr	r4, [r3, #16]
 8006a16:	432c      	orrs	r4, r5
 8006a18:	611c      	str	r4, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8006a1a:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 8006a1e:	f024 040e 	bic.w	r4, r4, #14
 8006a22:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8006a26:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8006a2a:	688c      	ldr	r4, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8006a2c:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8006a30:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8006a34:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006a36:	0c12      	lsrs	r2, r2, #16
 8006a38:	0412      	lsls	r2, r2, #16
 8006a3a:	665a      	str	r2, [r3, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8006a3c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006a3e:	4322      	orrs	r2, r4
 8006a40:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8006a42:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8006a46:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006a4a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8006a4e:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 8006a52:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 8006a56:	432a      	orrs	r2, r5
 8006a58:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8006a5a:	432a      	orrs	r2, r5
 8006a5c:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8006a5e:	6a89      	ldr	r1, [r1, #40]	; 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8006a60:	432a      	orrs	r2, r5
 8006a62:	4322      	orrs	r2, r4
 8006a64:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8006a68:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006a6a:	f022 0201 	bic.w	r2, r2, #1
 8006a6e:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8006a70:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006a72:	430a      	orrs	r2, r1
 8006a74:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8006a76:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8006a7a:	f042 0201 	orr.w	r2, r2, #1
 8006a7e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8006a82:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8006a86:	f042 0202 	orr.w	r2, r2, #2
 8006a8a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006a8e:	2300      	movs	r3, #0
 8006a90:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8006a92:	4618      	mov	r0, r3
}
 8006a94:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006a96:	2002      	movs	r0, #2
 8006a98:	e7fc      	b.n	8006a94 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

08006a9c <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8006a9c:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006a9e:	7c03      	ldrb	r3, [r0, #16]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d02a      	beq.n	8006afa <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8006aa4:	6802      	ldr	r2, [r0, #0]
 8006aa6:	4b16      	ldr	r3, [pc, #88]	; (8006b00 <HAL_DSI_ConfigCommand+0x64>)
 8006aa8:	6e94      	ldr	r4, [r2, #104]	; 0x68
 8006aaa:	4023      	ands	r3, r4
 8006aac:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8006aae:	6e94      	ldr	r4, [r2, #104]	; 0x68
 8006ab0:	e9d1 3500 	ldrd	r3, r5, [r1]
 8006ab4:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 8006ab6:	688d      	ldr	r5, [r1, #8]
 8006ab8:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 8006aba:	68cd      	ldr	r5, [r1, #12]
 8006abc:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 8006abe:	690d      	ldr	r5, [r1, #16]
 8006ac0:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 8006ac2:	694d      	ldr	r5, [r1, #20]
 8006ac4:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 8006ac6:	698d      	ldr	r5, [r1, #24]
 8006ac8:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 8006aca:	69cd      	ldr	r5, [r1, #28]
 8006acc:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 8006ace:	6a0d      	ldr	r5, [r1, #32]
 8006ad0:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 8006ad2:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8006ad4:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 8006ad6:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8006ad8:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 8006ada:	6acd      	ldr	r5, [r1, #44]	; 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8006adc:	6b09      	ldr	r1, [r1, #48]	; 0x30
                           LPCmd->LPDcsLongWrite      | \
 8006ade:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8006ae0:	4323      	orrs	r3, r4
 8006ae2:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8006ae4:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8006ae6:	f023 0302 	bic.w	r3, r3, #2
 8006aea:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8006aec:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8006aee:	430b      	orrs	r3, r1
 8006af0:	6693      	str	r3, [r2, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006af2:	2300      	movs	r3, #0
 8006af4:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8006af6:	4618      	mov	r0, r3
}
 8006af8:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006afa:	2002      	movs	r0, #2
 8006afc:	e7fc      	b.n	8006af8 <HAL_DSI_ConfigCommand+0x5c>
 8006afe:	bf00      	nop
 8006b00:	fef080ff 	.word	0xfef080ff

08006b04 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006b04:	7c03      	ldrb	r3, [r0, #16]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d00b      	beq.n	8006b22 <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8006b0a:	6803      	ldr	r3, [r0, #0]
 8006b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b0e:	f022 021f 	bic.w	r2, r2, #31
 8006b12:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8006b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b16:	4311      	orrs	r1, r2
 8006b18:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8006b1e:	4618      	mov	r0, r3
 8006b20:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006b22:	2002      	movs	r0, #2
}
 8006b24:	4770      	bx	lr

08006b26 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8006b26:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006b28:	7c03      	ldrb	r3, [r0, #16]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d035      	beq.n	8006b9a <HAL_DSI_ConfigPhyTimer+0x74>
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8006b2e:	6803      	ldr	r3, [r0, #0]
  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8006b30:	e9d1 2400 	ldrd	r2, r4, [r1]
 8006b34:	4294      	cmp	r4, r2
 8006b36:	bf38      	it	cc
 8006b38:	4614      	movcc	r4, r2
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8006b3a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8006b3e:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8006b42:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8006b46:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8006b4a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006b4e:	4322      	orrs	r2, r4
 8006b50:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8006b54:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8006b58:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8006b5c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8006b60:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8006b64:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8006b68:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8006b6a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8006b6e:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8006b70:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8006b72:	432a      	orrs	r2, r5
 8006b74:	4322      	orrs	r2, r4
 8006b76:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8006b7a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8006b7e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8006b82:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8006b86:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8006b8a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006b8e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006b92:	2300      	movs	r3, #0
 8006b94:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8006b96:	4618      	mov	r0, r3
}
 8006b98:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006b9a:	2002      	movs	r0, #2
 8006b9c:	e7fc      	b.n	8006b98 <HAL_DSI_ConfigPhyTimer+0x72>
	...

08006ba0 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8006ba0:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006ba2:	7c03      	ldrb	r3, [r0, #16]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d05c      	beq.n	8006c62 <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8006ba8:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8006baa:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8006bac:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8006bae:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8006bb0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8006bb4:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8006bb6:	689a      	ldr	r2, [r3, #8]
 8006bb8:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8006bbc:	684c      	ldr	r4, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8006bbe:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8006bc0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006bc2:	b292      	uxth	r2, r2
 8006bc4:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8006bc6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006bc8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006bcc:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8006bce:	4a26      	ldr	r2, [pc, #152]	; (8006c68 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 8006bd0:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8006bd2:	4014      	ands	r4, r2
 8006bd4:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8006bd6:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8006bd8:	432c      	orrs	r4, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8006bda:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8006bdc:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8006bde:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 8006be0:	4014      	ands	r4, r2
 8006be2:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8006be4:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 8006be6:	432c      	orrs	r4, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8006be8:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8006bea:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8006bec:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8006bf0:	4014      	ands	r4, r2
 8006bf2:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8006bf6:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8006bfa:	432c      	orrs	r4, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8006bfc:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8006bfe:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8006c02:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006c06:	4014      	ands	r4, r2
 8006c08:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8006c0c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006c10:	432c      	orrs	r4, r5
 8006c12:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8006c16:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006c1a:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8006c1e:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8006c22:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006c26:	698d      	ldr	r5, [r1, #24]
 8006c28:	432c      	orrs	r4, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8006c2a:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8006c2c:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8006c2e:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8006c32:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 8006c36:	4014      	ands	r4, r2
 8006c38:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8006c3c:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 8006c40:	432c      	orrs	r4, r5
 8006c42:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8006c46:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8006c4a:	4022      	ands	r2, r4
 8006c4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8006c50:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006c54:	430a      	orrs	r2, r1
 8006c56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8006c5e:	4618      	mov	r0, r3
}
 8006c60:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006c62:	2002      	movs	r0, #2
 8006c64:	e7fc      	b.n	8006c60 <HAL_DSI_ConfigHostTimeouts+0xc0>
 8006c66:	bf00      	nop
 8006c68:	ffff0000 	.word	0xffff0000

08006c6c <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006c6c:	7c03      	ldrb	r3, [r0, #16]
{
 8006c6e:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d01c      	beq.n	8006cae <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8006c74:	6802      	ldr	r2, [r0, #0]
 8006c76:	2300      	movs	r3, #0
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	6851      	ldr	r1, [r2, #4]
 8006c7c:	f041 0101 	orr.w	r1, r1, #1
 8006c80:	6051      	str	r1, [r2, #4]
 8006c82:	6851      	ldr	r1, [r2, #4]
 8006c84:	f001 0101 	and.w	r1, r1, #1
 8006c88:	9100      	str	r1, [sp, #0]
 8006c8a:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8006c8c:	9301      	str	r3, [sp, #4]
 8006c8e:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 8006c92:	f041 0108 	orr.w	r1, r1, #8
 8006c96:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 8006c9a:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006c9e:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8006ca0:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8006ca2:	f002 0208 	and.w	r2, r2, #8
 8006ca6:	9201      	str	r2, [sp, #4]
 8006ca8:	9a01      	ldr	r2, [sp, #4]
}
 8006caa:	b002      	add	sp, #8
 8006cac:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006cae:	2002      	movs	r0, #2
 8006cb0:	e7fb      	b.n	8006caa <HAL_DSI_Start+0x3e>

08006cb2 <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006cb2:	7c03      	ldrb	r3, [r0, #16]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d00a      	beq.n	8006cce <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8006cb8:	6802      	ldr	r2, [r0, #0]
 8006cba:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 8006cbe:	f043 0304 	orr.w	r3, r3, #4
 8006cc2:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8006cca:	4618      	mov	r0, r3
 8006ccc:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006cce:	2002      	movs	r0, #2
}
 8006cd0:	4770      	bx	lr

08006cd2 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8006cd2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006cd4:	7c05      	ldrb	r5, [r0, #16]
{
 8006cd6:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8006cd8:	2d01      	cmp	r5, #1
 8006cda:	d009      	beq.n	8006cf0 <HAL_DSI_ShortWrite+0x1e>
 8006cdc:	2501      	movs	r5, #1
 8006cde:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8006ce0:	9d06      	ldr	r5, [sp, #24]
 8006ce2:	9500      	str	r5, [sp, #0]
 8006ce4:	f7ff fcad 	bl	8006642 <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006ce8:	2300      	movs	r3, #0
 8006cea:	7423      	strb	r3, [r4, #16]

  return status;
}
 8006cec:	b003      	add	sp, #12
 8006cee:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006cf0:	2002      	movs	r0, #2
 8006cf2:	e7fb      	b.n	8006cec <HAL_DSI_ShortWrite+0x1a>

08006cf4 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8006cf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf8:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006cfa:	7c03      	ldrb	r3, [r0, #16]
{
 8006cfc:	4606      	mov	r6, r0
 8006cfe:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 8006d00:	2b01      	cmp	r3, #1
{
 8006d02:	4615      	mov	r5, r2
 8006d04:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
  __HAL_LOCK(hdsi);
 8006d08:	d053      	beq.n	8006db2 <HAL_DSI_LongWrite+0xbe>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d0e:	f7ff faa1 	bl	8006254 <HAL_GetTick>
 8006d12:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006d14:	6831      	ldr	r1, [r6, #0]
 8006d16:	6f4b      	ldr	r3, [r1, #116]	; 0x74
 8006d18:	f013 0a01 	ands.w	sl, r3, #1
 8006d1c:	d01a      	beq.n	8006d54 <HAL_DSI_LongWrite+0x60>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8006d1e:	2c03      	cmp	r4, #3
 8006d20:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 8006d22:	f04f 0200 	mov.w	r2, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8006d26:	bf28      	it	cs
 8006d28:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 8006d2a:	4282      	cmp	r2, r0
 8006d2c:	d11e      	bne.n	8006d6c <HAL_DSI_LongWrite+0x78>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 8006d2e:	1aa3      	subs	r3, r4, r2
  pparams += nbBytes;
 8006d30:	4442      	add	r2, r8
  hdsi->Instance->GPDR = fifoword;
 8006d32:	f8c1 9070 	str.w	r9, [r1, #112]	; 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8006d36:	bb1b      	cbnz	r3, 8006d80 <HAL_DSI_LongWrite+0x8c>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8006d38:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006d3a:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 8006d3e:	4618      	mov	r0, r3
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006d40:	0222      	lsls	r2, r4, #8
 8006d42:	0224      	lsls	r4, r4, #8
 8006d44:	b292      	uxth	r2, r2
 8006d46:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 8006d4a:	4315      	orrs	r5, r2
 8006d4c:	432c      	orrs	r4, r5
 8006d4e:	66cc      	str	r4, [r1, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 8006d50:	7433      	strb	r3, [r6, #16]
  return HAL_OK;
 8006d52:	e009      	b.n	8006d68 <HAL_DSI_LongWrite+0x74>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006d54:	f7ff fa7e 	bl	8006254 <HAL_GetTick>
 8006d58:	eba0 000b 	sub.w	r0, r0, fp
 8006d5c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006d60:	d9d8      	bls.n	8006d14 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 8006d62:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8006d64:	f886 a010 	strb.w	sl, [r6, #16]
}
 8006d68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8006d6c:	f818 3002 	ldrb.w	r3, [r8, r2]
 8006d70:	3201      	adds	r2, #1
 8006d72:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 8006d76:	fa03 f30c 	lsl.w	r3, r3, ip
 8006d7a:	ea49 0903 	orr.w	r9, r9, r3
  for (count = 0U; count < nbBytes; count++)
 8006d7e:	e7d4      	b.n	8006d2a <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8006d80:	2b04      	cmp	r3, #4
    fifoword = 0U;
 8006d82:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8006d86:	469e      	mov	lr, r3
    for (count = 0U; count < nbBytes; count++)
 8006d88:	4660      	mov	r0, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8006d8a:	bf28      	it	cs
 8006d8c:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8006d90:	f812 8000 	ldrb.w	r8, [r2, r0]
 8006d94:	ea4f 09c0 	mov.w	r9, r0, lsl #3
    for (count = 0U; count < nbBytes; count++)
 8006d98:	3001      	adds	r0, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8006d9a:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 8006d9e:	4586      	cmp	lr, r0
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8006da0:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 8006da4:	d1f4      	bne.n	8006d90 <HAL_DSI_LongWrite+0x9c>
    uicounter -= nbBytes;
 8006da6:	eba3 030e 	sub.w	r3, r3, lr
    pparams += nbBytes;
 8006daa:	4472      	add	r2, lr
    hdsi->Instance->GPDR = fifoword;
 8006dac:	f8c1 c070 	str.w	ip, [r1, #112]	; 0x70
    pparams += nbBytes;
 8006db0:	e7c1      	b.n	8006d36 <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 8006db2:	2002      	movs	r0, #2
 8006db4:	e7d8      	b.n	8006d68 <HAL_DSI_LongWrite+0x74>

08006db6 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8006db6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006dba:	461e      	mov	r6, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006dbc:	7c03      	ldrb	r3, [r0, #16]
{
 8006dbe:	4605      	mov	r5, r0
 8006dc0:	460c      	mov	r4, r1
  __HAL_LOCK(hdsi);
 8006dc2:	2b01      	cmp	r3, #1
{
 8006dc4:	4617      	mov	r7, r2
 8006dc6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8006dca:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  __HAL_LOCK(hdsi);
 8006dce:	d06f      	beq.n	8006eb0 <HAL_DSI_Read+0xfa>
 8006dd0:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 8006dd2:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 8006dd4:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 8006dd6:	d90d      	bls.n	8006df4 <HAL_DSI_Read+0x3e>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 8006dd8:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8006ddc:	2237      	movs	r2, #55	; 0x37
 8006dde:	9300      	str	r3, [sp, #0]
 8006de0:	b2f3      	uxtb	r3, r6
 8006de2:	f7ff fc2e 	bl	8006642 <DSI_ShortWrite>
 8006de6:	b128      	cbz	r0, 8006df4 <HAL_DSI_Read+0x3e>
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8006de8:	2300      	movs	r3, #0

      return HAL_ERROR;
 8006dea:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 8006dec:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 8006dee:	b003      	add	sp, #12
 8006df0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8006df4:	f1b9 0f06 	cmp.w	r9, #6
 8006df8:	d10f      	bne.n	8006e1a <HAL_DSI_Read+0x64>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006dfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 8006dfc:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006dfe:	021b      	lsls	r3, r3, #8
 8006e00:	ea43 1484 	orr.w	r4, r3, r4, lsl #6
 8006e04:	f044 0406 	orr.w	r4, r4, #6
 8006e08:	66d4      	str	r4, [r2, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8006e0a:	f7ff fa23 	bl	8006254 <HAL_GetTick>
 8006e0e:	4604      	mov	r4, r0
  while (((int32_t)(datasize)) > 0)
 8006e10:	2e00      	cmp	r6, #0
 8006e12:	dc27      	bgt.n	8006e64 <HAL_DSI_Read+0xae>
  __HAL_UNLOCK(hdsi);
 8006e14:	2000      	movs	r0, #0
 8006e16:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 8006e18:	e7e9      	b.n	8006dee <HAL_DSI_Read+0x38>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 8006e1a:	f1b9 0f04 	cmp.w	r9, #4
 8006e1e:	d105      	bne.n	8006e2c <HAL_DSI_Read+0x76>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006e20:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 8006e22:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006e24:	f044 0404 	orr.w	r4, r4, #4
 8006e28:	66dc      	str	r4, [r3, #108]	; 0x6c
}
 8006e2a:	e7ee      	b.n	8006e0a <HAL_DSI_Read+0x54>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 8006e2c:	f1b9 0f14 	cmp.w	r9, #20
 8006e30:	d108      	bne.n	8006e44 <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8006e32:	f898 1000 	ldrb.w	r1, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006e36:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8006e38:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006e3a:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
 8006e3e:	f044 0414 	orr.w	r4, r4, #20
 8006e42:	e7f1      	b.n	8006e28 <HAL_DSI_Read+0x72>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 8006e44:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
 8006e48:	d1ce      	bne.n	8006de8 <HAL_DSI_Read+0x32>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8006e4a:	f898 1001 	ldrb.w	r1, [r8, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006e4e:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8006e50:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006e54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8006e58:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006e5a:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8006e5e:	f044 0424 	orr.w	r4, r4, #36	; 0x24
 8006e62:	e7e1      	b.n	8006e28 <HAL_DSI_Read+0x72>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 8006e64:	682a      	ldr	r2, [r5, #0]
 8006e66:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8006e68:	f013 0310 	ands.w	r3, r3, #16
 8006e6c:	d10d      	bne.n	8006e8a <HAL_DSI_Read+0xd4>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8006e6e:	2e04      	cmp	r6, #4
      fifoword = hdsi->Instance->GPDR;
 8006e70:	6f10      	ldr	r0, [r2, #112]	; 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8006e72:	4632      	mov	r2, r6
 8006e74:	bf28      	it	cs
 8006e76:	2204      	movcs	r2, #4
        *pdata = (uint8_t)(fifoword >> (8U * count));
 8006e78:	00d9      	lsls	r1, r3, #3
 8006e7a:	fa20 f101 	lsr.w	r1, r0, r1
 8006e7e:	54f9      	strb	r1, [r7, r3]
      for (count = 0U; count < nbbytes; count++)
 8006e80:	3301      	adds	r3, #1
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d1f8      	bne.n	8006e78 <HAL_DSI_Read+0xc2>
        pdata++;
 8006e86:	4417      	add	r7, r2
        datasize--;
 8006e88:	1ab6      	subs	r6, r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006e8a:	f7ff f9e3 	bl	8006254 <HAL_GetTick>
 8006e8e:	1b00      	subs	r0, r0, r4
 8006e90:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006e94:	d903      	bls.n	8006e9e <HAL_DSI_Read+0xe8>
      __HAL_UNLOCK(hdsi);
 8006e96:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8006e98:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8006e9a:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 8006e9c:	e7a7      	b.n	8006dee <HAL_DSI_Read+0x38>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 8006e9e:	682b      	ldr	r3, [r5, #0]
 8006ea0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006ea2:	0652      	lsls	r2, r2, #25
 8006ea4:	d4b4      	bmi.n	8006e10 <HAL_DSI_Read+0x5a>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 8006ea6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006eaa:	069b      	lsls	r3, r3, #26
 8006eac:	d49c      	bmi.n	8006de8 <HAL_DSI_Read+0x32>
 8006eae:	e7af      	b.n	8006e10 <HAL_DSI_Read+0x5a>
  __HAL_LOCK(hdsi);
 8006eb0:	2002      	movs	r0, #2
 8006eb2:	e79c      	b.n	8006dee <HAL_DSI_Read+0x38>

08006eb4 <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006eb4:	7c03      	ldrb	r3, [r0, #16]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d010      	beq.n	8006edc <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8006eba:	6803      	ldr	r3, [r0, #0]
 8006ebc:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8006ec0:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8006ec4:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8006ec8:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8006ecc:	ea42 6141 	orr.w	r1, r2, r1, lsl #25
 8006ed0:	f8c3 141c 	str.w	r1, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8006ed8:	4618      	mov	r0, r3
 8006eda:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006edc:	2002      	movs	r0, #2
}
 8006ede:	4770      	bx	lr

08006ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ee0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8006ee4:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ee6:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 80070b4 <HAL_GPIO_Init+0x1d4>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006eea:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006eee:	680a      	ldr	r2, [r1, #0]
 8006ef0:	fa32 f503 	lsrs.w	r5, r2, r3
 8006ef4:	d102      	bne.n	8006efc <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8006ef6:	b003      	add	sp, #12
 8006ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006efc:	f04f 0e01 	mov.w	lr, #1
 8006f00:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00U)
 8006f04:	ea1e 0202 	ands.w	r2, lr, r2
 8006f08:	f000 80bd 	beq.w	8007086 <HAL_GPIO_Init+0x1a6>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006f0c:	684e      	ldr	r6, [r1, #4]
 8006f0e:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f12:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006f16:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f1a:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006f1e:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f20:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006f24:	2f01      	cmp	r7, #1
 8006f26:	d834      	bhi.n	8006f92 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8006f28:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f2a:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f2e:	68cf      	ldr	r7, [r1, #12]
 8006f30:	fa07 f708 	lsl.w	r7, r7, r8
 8006f34:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8006f38:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8006f3a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006f3c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f40:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8006f44:	409f      	lsls	r7, r3
 8006f46:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8006f4a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8006f4c:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f4e:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006f50:	ea07 0e0c 	and.w	lr, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f54:	688f      	ldr	r7, [r1, #8]
 8006f56:	fa07 f708 	lsl.w	r7, r7, r8
 8006f5a:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->PUPDR = temp;
 8006f5e:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f60:	d119      	bne.n	8006f96 <HAL_GPIO_Init+0xb6>
        temp = GPIOx->AFR[position >> 3U];
 8006f62:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006f66:	f003 0b07 	and.w	fp, r3, #7
 8006f6a:	f04f 0e0f 	mov.w	lr, #15
 8006f6e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8006f72:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8006f76:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006f7a:	fa0e fe0b 	lsl.w	lr, lr, fp
 8006f7e:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006f82:	690f      	ldr	r7, [r1, #16]
 8006f84:	fa07 f70b 	lsl.w	r7, r7, fp
 8006f88:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8006f8c:	f8ca 7020 	str.w	r7, [sl, #32]
 8006f90:	e001      	b.n	8006f96 <HAL_GPIO_Init+0xb6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f92:	2d03      	cmp	r5, #3
 8006f94:	d1da      	bne.n	8006f4c <HAL_GPIO_Init+0x6c>
      temp = GPIOx->MODER;
 8006f96:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f98:	fa05 f508 	lsl.w	r5, r5, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006f9c:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006fa0:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006fa4:	ea47 0705 	orr.w	r7, r7, r5
      GPIOx->MODER = temp;
 8006fa8:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006faa:	d06c      	beq.n	8007086 <HAL_GPIO_Init+0x1a6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fac:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 8006fb0:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006fb4:	f003 0c03 	and.w	ip, r3, #3
 8006fb8:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fbc:	f045 0502 	orr.w	r5, r5, #2
 8006fc0:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006fc4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fc8:	f8c9 50f4 	str.w	r5, [r9, #244]	; 0xf4
 8006fcc:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8006fd0:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 8006fd4:	f005 0502 	and.w	r5, r5, #2
 8006fd8:	9501      	str	r5, [sp, #4]
 8006fda:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006fdc:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2U];
 8006fe0:	f8d7 8008 	ldr.w	r8, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006fe4:	ea28 0e05 	bic.w	lr, r8, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006fe8:	4d31      	ldr	r5, [pc, #196]	; (80070b0 <HAL_GPIO_Init+0x1d0>)
 8006fea:	42a8      	cmp	r0, r5
 8006fec:	d04d      	beq.n	800708a <HAL_GPIO_Init+0x1aa>
 8006fee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006ff2:	42a8      	cmp	r0, r5
 8006ff4:	d04b      	beq.n	800708e <HAL_GPIO_Init+0x1ae>
 8006ff6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006ffa:	42a8      	cmp	r0, r5
 8006ffc:	d049      	beq.n	8007092 <HAL_GPIO_Init+0x1b2>
 8006ffe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007002:	42a8      	cmp	r0, r5
 8007004:	d047      	beq.n	8007096 <HAL_GPIO_Init+0x1b6>
 8007006:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800700a:	42a8      	cmp	r0, r5
 800700c:	d045      	beq.n	800709a <HAL_GPIO_Init+0x1ba>
 800700e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007012:	42a8      	cmp	r0, r5
 8007014:	d043      	beq.n	800709e <HAL_GPIO_Init+0x1be>
 8007016:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800701a:	42a8      	cmp	r0, r5
 800701c:	d041      	beq.n	80070a2 <HAL_GPIO_Init+0x1c2>
 800701e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007022:	42a8      	cmp	r0, r5
 8007024:	d03f      	beq.n	80070a6 <HAL_GPIO_Init+0x1c6>
 8007026:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800702a:	42a8      	cmp	r0, r5
 800702c:	d03d      	beq.n	80070aa <HAL_GPIO_Init+0x1ca>
 800702e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007032:	42a8      	cmp	r0, r5
 8007034:	bf0c      	ite	eq
 8007036:	2509      	moveq	r5, #9
 8007038:	250a      	movne	r5, #10
 800703a:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800703e:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007042:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007046:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8007048:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 800704c:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800704e:	bf0c      	ite	eq
 8007050:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8007052:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007054:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 8007058:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 800705a:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 800705c:	bf0c      	ite	eq
 800705e:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8007060:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007062:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 8007066:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8007068:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
        temp &= ~(iocurrent);
 800706c:	bf0c      	ite	eq
 800706e:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8007070:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007072:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8007074:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8007078:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        temp &= ~(iocurrent);
 800707c:	bf54      	ite	pl
 800707e:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8007080:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8007082:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    position++;
 8007086:	3301      	adds	r3, #1
 8007088:	e731      	b.n	8006eee <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800708a:	2500      	movs	r5, #0
 800708c:	e7d5      	b.n	800703a <HAL_GPIO_Init+0x15a>
 800708e:	2501      	movs	r5, #1
 8007090:	e7d3      	b.n	800703a <HAL_GPIO_Init+0x15a>
 8007092:	2502      	movs	r5, #2
 8007094:	e7d1      	b.n	800703a <HAL_GPIO_Init+0x15a>
 8007096:	2503      	movs	r5, #3
 8007098:	e7cf      	b.n	800703a <HAL_GPIO_Init+0x15a>
 800709a:	2504      	movs	r5, #4
 800709c:	e7cd      	b.n	800703a <HAL_GPIO_Init+0x15a>
 800709e:	2505      	movs	r5, #5
 80070a0:	e7cb      	b.n	800703a <HAL_GPIO_Init+0x15a>
 80070a2:	2506      	movs	r5, #6
 80070a4:	e7c9      	b.n	800703a <HAL_GPIO_Init+0x15a>
 80070a6:	2507      	movs	r5, #7
 80070a8:	e7c7      	b.n	800703a <HAL_GPIO_Init+0x15a>
 80070aa:	2508      	movs	r5, #8
 80070ac:	e7c5      	b.n	800703a <HAL_GPIO_Init+0x15a>
 80070ae:	bf00      	nop
 80070b0:	58020000 	.word	0x58020000
 80070b4:	58024400 	.word	0x58024400

080070b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80070b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 80070bc:	2200      	movs	r2, #0
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80070be:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80071ec <HAL_GPIO_DeInit+0x134>
 80070c2:	f8df 912c 	ldr.w	r9, [pc, #300]	; 80071f0 <HAL_GPIO_DeInit+0x138>
 80070c6:	f8df a12c 	ldr.w	sl, [pc, #300]	; 80071f4 <HAL_GPIO_DeInit+0x13c>
 80070ca:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80071f8 <HAL_GPIO_DeInit+0x140>
  while ((GPIO_Pin >> position) != 0x00U)
 80070ce:	fa31 f302 	lsrs.w	r3, r1, r2
 80070d2:	d101      	bne.n	80070d8 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 80070d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 80070d8:	2301      	movs	r3, #1
 80070da:	fa03 fc02 	lsl.w	ip, r3, r2
    if (iocurrent != 0x00U)
 80070de:	ea1c 0601 	ands.w	r6, ip, r1
 80070e2:	d06d      	beq.n	80071c0 <HAL_GPIO_DeInit+0x108>
      tmp = SYSCFG->EXTICR[position >> 2U];
 80070e4:	f022 0403 	bic.w	r4, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80070e8:	f002 0703 	and.w	r7, r2, #3
 80070ec:	250f      	movs	r5, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80070ee:	4b3e      	ldr	r3, [pc, #248]	; (80071e8 <HAL_GPIO_DeInit+0x130>)
 80070f0:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80070f4:	00bf      	lsls	r7, r7, #2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80070f6:	4298      	cmp	r0, r3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80070f8:	fa05 f507 	lsl.w	r5, r5, r7
      tmp = SYSCFG->EXTICR[position >> 2U];
 80070fc:	f8d4 e408 	ldr.w	lr, [r4, #1032]	; 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007100:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007104:	ea05 0e0e 	and.w	lr, r5, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007108:	d05c      	beq.n	80071c4 <HAL_GPIO_DeInit+0x10c>
 800710a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800710e:	4298      	cmp	r0, r3
 8007110:	d05a      	beq.n	80071c8 <HAL_GPIO_DeInit+0x110>
 8007112:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007116:	4298      	cmp	r0, r3
 8007118:	d058      	beq.n	80071cc <HAL_GPIO_DeInit+0x114>
 800711a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800711e:	4298      	cmp	r0, r3
 8007120:	d056      	beq.n	80071d0 <HAL_GPIO_DeInit+0x118>
 8007122:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007126:	4298      	cmp	r0, r3
 8007128:	d054      	beq.n	80071d4 <HAL_GPIO_DeInit+0x11c>
 800712a:	4540      	cmp	r0, r8
 800712c:	d054      	beq.n	80071d8 <HAL_GPIO_DeInit+0x120>
 800712e:	4548      	cmp	r0, r9
 8007130:	d054      	beq.n	80071dc <HAL_GPIO_DeInit+0x124>
 8007132:	4550      	cmp	r0, sl
 8007134:	d054      	beq.n	80071e0 <HAL_GPIO_DeInit+0x128>
 8007136:	4558      	cmp	r0, fp
 8007138:	d054      	beq.n	80071e4 <HAL_GPIO_DeInit+0x12c>
 800713a:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800713e:	4298      	cmp	r0, r3
 8007140:	bf0c      	ite	eq
 8007142:	2309      	moveq	r3, #9
 8007144:	230a      	movne	r3, #10
 8007146:	40bb      	lsls	r3, r7
 8007148:	4573      	cmp	r3, lr
 800714a:	d119      	bne.n	8007180 <HAL_GPIO_DeInit+0xc8>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800714c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007150:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
 8007154:	ea27 0706 	bic.w	r7, r7, r6
 8007158:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800715c:	f8d3 7084 	ldr.w	r7, [r3, #132]	; 0x84
 8007160:	ea27 0706 	bic.w	r7, r7, r6
 8007164:	f8c3 7084 	str.w	r7, [r3, #132]	; 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 8007168:	685f      	ldr	r7, [r3, #4]
 800716a:	ea27 0706 	bic.w	r7, r7, r6
 800716e:	605f      	str	r7, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8007170:	681f      	ldr	r7, [r3, #0]
 8007172:	ea27 0606 	bic.w	r6, r7, r6
 8007176:	601e      	str	r6, [r3, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007178:	68a3      	ldr	r3, [r4, #8]
 800717a:	ea23 0305 	bic.w	r3, r3, r5
 800717e:	60a3      	str	r3, [r4, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007180:	2503      	movs	r5, #3
 8007182:	0053      	lsls	r3, r2, #1
 8007184:	6804      	ldr	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007186:	f002 0707 	and.w	r7, r2, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800718a:	fa05 f303 	lsl.w	r3, r5, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800718e:	260f      	movs	r6, #15
 8007190:	00bf      	lsls	r7, r7, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007192:	431c      	orrs	r4, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007194:	40be      	lsls	r6, r7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007196:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007198:	fa22 f405 	lsr.w	r4, r2, r5
 800719c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80071a0:	6a25      	ldr	r5, [r4, #32]
 80071a2:	ea25 0606 	bic.w	r6, r5, r6
 80071a6:	6226      	str	r6, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80071a8:	68c4      	ldr	r4, [r0, #12]
 80071aa:	ea24 0403 	bic.w	r4, r4, r3
 80071ae:	60c4      	str	r4, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80071b0:	6844      	ldr	r4, [r0, #4]
 80071b2:	ea24 040c 	bic.w	r4, r4, ip
 80071b6:	6044      	str	r4, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80071b8:	6884      	ldr	r4, [r0, #8]
 80071ba:	ea24 0303 	bic.w	r3, r4, r3
 80071be:	6083      	str	r3, [r0, #8]
    position++;
 80071c0:	3201      	adds	r2, #1
 80071c2:	e784      	b.n	80070ce <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80071c4:	2300      	movs	r3, #0
 80071c6:	e7be      	b.n	8007146 <HAL_GPIO_DeInit+0x8e>
 80071c8:	2301      	movs	r3, #1
 80071ca:	e7bc      	b.n	8007146 <HAL_GPIO_DeInit+0x8e>
 80071cc:	2302      	movs	r3, #2
 80071ce:	e7ba      	b.n	8007146 <HAL_GPIO_DeInit+0x8e>
 80071d0:	2303      	movs	r3, #3
 80071d2:	e7b8      	b.n	8007146 <HAL_GPIO_DeInit+0x8e>
 80071d4:	2304      	movs	r3, #4
 80071d6:	e7b6      	b.n	8007146 <HAL_GPIO_DeInit+0x8e>
 80071d8:	2305      	movs	r3, #5
 80071da:	e7b4      	b.n	8007146 <HAL_GPIO_DeInit+0x8e>
 80071dc:	2306      	movs	r3, #6
 80071de:	e7b2      	b.n	8007146 <HAL_GPIO_DeInit+0x8e>
 80071e0:	2307      	movs	r3, #7
 80071e2:	e7b0      	b.n	8007146 <HAL_GPIO_DeInit+0x8e>
 80071e4:	2308      	movs	r3, #8
 80071e6:	e7ae      	b.n	8007146 <HAL_GPIO_DeInit+0x8e>
 80071e8:	58020000 	.word	0x58020000
 80071ec:	58021400 	.word	0x58021400
 80071f0:	58021800 	.word	0x58021800
 80071f4:	58021c00 	.word	0x58021c00
 80071f8:	58022000 	.word	0x58022000

080071fc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80071fc:	6903      	ldr	r3, [r0, #16]
 80071fe:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8007200:	bf14      	ite	ne
 8007202:	2001      	movne	r0, #1
 8007204:	2000      	moveq	r0, #0
 8007206:	4770      	bx	lr

08007208 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007208:	b10a      	cbz	r2, 800720e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800720a:	6181      	str	r1, [r0, #24]
  }
}
 800720c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800720e:	0409      	lsls	r1, r1, #16
 8007210:	e7fb      	b.n	800720a <HAL_GPIO_WritePin+0x2>

08007212 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007212:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007214:	ea01 0203 	and.w	r2, r1, r3
 8007218:	ea21 0103 	bic.w	r1, r1, r3
 800721c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007220:	6181      	str	r1, [r0, #24]
}
 8007222:	4770      	bx	lr

08007224 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8007224:	4b04      	ldr	r3, [pc, #16]	; (8007238 <HAL_HSEM_FastTake+0x14>)
 8007226:	3020      	adds	r0, #32
 8007228:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 800722c:	4b03      	ldr	r3, [pc, #12]	; (800723c <HAL_HSEM_FastTake+0x18>)
 800722e:	1ac0      	subs	r0, r0, r3
 8007230:	bf18      	it	ne
 8007232:	2001      	movne	r0, #1
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	58026400 	.word	0x58026400
 800723c:	80000300 	.word	0x80000300

08007240 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8007240:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 8007244:	4b01      	ldr	r3, [pc, #4]	; (800724c <HAL_HSEM_Release+0xc>)
 8007246:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 800724a:	4770      	bx	lr
 800724c:	58026400 	.word	0x58026400

08007250 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007250:	6803      	ldr	r3, [r0, #0]
 8007252:	699a      	ldr	r2, [r3, #24]
 8007254:	0791      	lsls	r1, r2, #30
 8007256:	d501      	bpl.n	800725c <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007258:	2200      	movs	r2, #0
 800725a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800725c:	699a      	ldr	r2, [r3, #24]
 800725e:	07d2      	lsls	r2, r2, #31
 8007260:	d403      	bmi.n	800726a <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007262:	699a      	ldr	r2, [r3, #24]
 8007264:	f042 0201 	orr.w	r2, r2, #1
 8007268:	619a      	str	r2, [r3, #24]
  }
}
 800726a:	4770      	bx	lr

0800726c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800726c:	b530      	push	{r4, r5, lr}
 800726e:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007270:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007274:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007276:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8007278:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800727a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800727e:	4a05      	ldr	r2, [pc, #20]	; (8007294 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007280:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8007282:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007286:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800728a:	ea20 0002 	bic.w	r0, r0, r2
 800728e:	4303      	orrs	r3, r0
 8007290:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007292:	bd30      	pop	{r4, r5, pc}
 8007294:	03ff63ff 	.word	0x03ff63ff

08007298 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 8007298:	6803      	ldr	r3, [r0, #0]
{
 800729a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800729e:	699c      	ldr	r4, [r3, #24]
{
 80072a0:	4605      	mov	r5, r0
 80072a2:	460f      	mov	r7, r1
 80072a4:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80072a6:	f014 0410 	ands.w	r4, r4, #16
 80072aa:	d070      	beq.n	800738e <I2C_IsErrorOccurred+0xf6>
  uint32_t error_code = 0;
 80072ac:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072ae:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 80072b0:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072b2:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80072b4:	682b      	ldr	r3, [r5, #0]
 80072b6:	699a      	ldr	r2, [r3, #24]
 80072b8:	0692      	lsls	r2, r2, #26
 80072ba:	d462      	bmi.n	8007382 <I2C_IsErrorOccurred+0xea>
 80072bc:	f1b8 0f00 	cmp.w	r8, #0
 80072c0:	d036      	beq.n	8007330 <I2C_IsErrorOccurred+0x98>
    error_code |= HAL_I2C_ERROR_AF;
 80072c2:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 80072c6:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 80072c8:	682b      	ldr	r3, [r5, #0]
 80072ca:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80072cc:	05d6      	lsls	r6, r2, #23
 80072ce:	d505      	bpl.n	80072dc <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80072d0:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 80072d4:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 80072d8:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80072da:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80072dc:	0551      	lsls	r1, r2, #21
 80072de:	d505      	bpl.n	80072ec <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80072e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 80072e4:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 80072e8:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80072ea:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80072ec:	0592      	lsls	r2, r2, #22
 80072ee:	d550      	bpl.n	8007392 <I2C_IsErrorOccurred+0xfa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80072f0:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80072f4:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80072f8:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80072fa:	4628      	mov	r0, r5
 80072fc:	f7ff ffa8 	bl	8007250 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8007300:	682a      	ldr	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8007302:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8007304:	6853      	ldr	r3, [r2, #4]
 8007306:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800730a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800730e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8007312:	f023 0301 	bic.w	r3, r3, #1
 8007316:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8007318:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800731a:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 800731c:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 800731e:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007320:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007324:	2300      	movs	r3, #0
 8007326:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800732a:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 800732e:	e032      	b.n	8007396 <I2C_IsErrorOccurred+0xfe>
      if (Timeout != HAL_MAX_DELAY)
 8007330:	1c7a      	adds	r2, r7, #1
 8007332:	d0c0      	beq.n	80072b6 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007334:	f7fe ff8e 	bl	8006254 <HAL_GetTick>
 8007338:	1b80      	subs	r0, r0, r6
 800733a:	42b8      	cmp	r0, r7
 800733c:	d801      	bhi.n	8007342 <I2C_IsErrorOccurred+0xaa>
 800733e:	2f00      	cmp	r7, #0
 8007340:	d1b8      	bne.n	80072b4 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007342:	682b      	ldr	r3, [r5, #0]
 8007344:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8007346:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800734a:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 800734c:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800734e:	0400      	lsls	r0, r0, #16
 8007350:	d50a      	bpl.n	8007368 <I2C_IsErrorOccurred+0xd0>
 8007352:	0448      	lsls	r0, r1, #17
 8007354:	d408      	bmi.n	8007368 <I2C_IsErrorOccurred+0xd0>
              (tmp1 != I2C_CR2_STOP) && \
 8007356:	2a20      	cmp	r2, #32
 8007358:	d006      	beq.n	8007368 <I2C_IsErrorOccurred+0xd0>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007360:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8007362:	f7fe ff77 	bl	8006254 <HAL_GetTick>
 8007366:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007368:	682b      	ldr	r3, [r5, #0]
 800736a:	699b      	ldr	r3, [r3, #24]
 800736c:	0699      	lsls	r1, r3, #26
 800736e:	d4a1      	bmi.n	80072b4 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007370:	f7fe ff70 	bl	8006254 <HAL_GetTick>
 8007374:	1b80      	subs	r0, r0, r6
 8007376:	2819      	cmp	r0, #25
 8007378:	d9f6      	bls.n	8007368 <I2C_IsErrorOccurred+0xd0>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800737a:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800737c:	f04f 0801 	mov.w	r8, #1
 8007380:	e798      	b.n	80072b4 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8007382:	f1b8 0f00 	cmp.w	r8, #0
 8007386:	d19c      	bne.n	80072c2 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007388:	2220      	movs	r2, #32
 800738a:	61da      	str	r2, [r3, #28]
 800738c:	e799      	b.n	80072c2 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 800738e:	4620      	mov	r0, r4
 8007390:	e79a      	b.n	80072c8 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 8007392:	2800      	cmp	r0, #0
 8007394:	d1b1      	bne.n	80072fa <I2C_IsErrorOccurred+0x62>
}
 8007396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800739a <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800739a:	b570      	push	{r4, r5, r6, lr}
 800739c:	4604      	mov	r4, r0
 800739e:	460d      	mov	r5, r1
 80073a0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80073a2:	6823      	ldr	r3, [r4, #0]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	079b      	lsls	r3, r3, #30
 80073a8:	d501      	bpl.n	80073ae <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80073aa:	2000      	movs	r0, #0
}
 80073ac:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80073ae:	4632      	mov	r2, r6
 80073b0:	4629      	mov	r1, r5
 80073b2:	4620      	mov	r0, r4
 80073b4:	f7ff ff70 	bl	8007298 <I2C_IsErrorOccurred>
 80073b8:	b9c0      	cbnz	r0, 80073ec <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80073ba:	1c6a      	adds	r2, r5, #1
 80073bc:	d0f1      	beq.n	80073a2 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073be:	f7fe ff49 	bl	8006254 <HAL_GetTick>
 80073c2:	1b80      	subs	r0, r0, r6
 80073c4:	42a8      	cmp	r0, r5
 80073c6:	d801      	bhi.n	80073cc <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80073c8:	2d00      	cmp	r5, #0
 80073ca:	d1ea      	bne.n	80073a2 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80073cc:	6823      	ldr	r3, [r4, #0]
 80073ce:	699b      	ldr	r3, [r3, #24]
 80073d0:	f013 0302 	ands.w	r3, r3, #2
 80073d4:	d1e5      	bne.n	80073a2 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073d6:	6c62      	ldr	r2, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 80073d8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073dc:	f042 0220 	orr.w	r2, r2, #32
 80073e0:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80073e2:	2220      	movs	r2, #32
 80073e4:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80073e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_ERROR;
 80073ec:	2001      	movs	r0, #1
 80073ee:	e7dd      	b.n	80073ac <I2C_WaitOnTXISFlagUntilTimeout+0x12>

080073f0 <I2C_WaitOnFlagUntilTimeout>:
{
 80073f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073f4:	9f06      	ldr	r7, [sp, #24]
 80073f6:	4604      	mov	r4, r0
 80073f8:	4688      	mov	r8, r1
 80073fa:	4616      	mov	r6, r2
 80073fc:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073fe:	6822      	ldr	r2, [r4, #0]
 8007400:	6993      	ldr	r3, [r2, #24]
 8007402:	ea38 0303 	bics.w	r3, r8, r3
 8007406:	bf0c      	ite	eq
 8007408:	2301      	moveq	r3, #1
 800740a:	2300      	movne	r3, #0
 800740c:	42b3      	cmp	r3, r6
 800740e:	d001      	beq.n	8007414 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8007410:	2000      	movs	r0, #0
 8007412:	e01e      	b.n	8007452 <I2C_WaitOnFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 8007414:	1c6b      	adds	r3, r5, #1
 8007416:	d0f3      	beq.n	8007400 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007418:	f7fe ff1c 	bl	8006254 <HAL_GetTick>
 800741c:	1bc0      	subs	r0, r0, r7
 800741e:	42a8      	cmp	r0, r5
 8007420:	d801      	bhi.n	8007426 <I2C_WaitOnFlagUntilTimeout+0x36>
 8007422:	2d00      	cmp	r5, #0
 8007424:	d1eb      	bne.n	80073fe <I2C_WaitOnFlagUntilTimeout+0xe>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007426:	6823      	ldr	r3, [r4, #0]
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	ea38 0303 	bics.w	r3, r8, r3
 800742e:	bf0c      	ite	eq
 8007430:	2301      	moveq	r3, #1
 8007432:	2300      	movne	r3, #0
 8007434:	42b3      	cmp	r3, r6
 8007436:	d1e2      	bne.n	80073fe <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007438:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 800743a:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800743c:	f043 0320 	orr.w	r3, r3, #32
 8007440:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007442:	2320      	movs	r3, #32
 8007444:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007448:	2300      	movs	r3, #0
 800744a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 800744e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8007452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007456 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8007456:	b570      	push	{r4, r5, r6, lr}
 8007458:	4604      	mov	r4, r0
 800745a:	460d      	mov	r5, r1
 800745c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800745e:	6823      	ldr	r3, [r4, #0]
 8007460:	699b      	ldr	r3, [r3, #24]
 8007462:	069b      	lsls	r3, r3, #26
 8007464:	d501      	bpl.n	800746a <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8007466:	2000      	movs	r0, #0
}
 8007468:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800746a:	4632      	mov	r2, r6
 800746c:	4629      	mov	r1, r5
 800746e:	4620      	mov	r0, r4
 8007470:	f7ff ff12 	bl	8007298 <I2C_IsErrorOccurred>
 8007474:	b9b0      	cbnz	r0, 80074a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007476:	f7fe feed 	bl	8006254 <HAL_GetTick>
 800747a:	1b80      	subs	r0, r0, r6
 800747c:	42a8      	cmp	r0, r5
 800747e:	d801      	bhi.n	8007484 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8007480:	2d00      	cmp	r5, #0
 8007482:	d1ec      	bne.n	800745e <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007484:	6823      	ldr	r3, [r4, #0]
 8007486:	699b      	ldr	r3, [r3, #24]
 8007488:	f013 0320 	ands.w	r3, r3, #32
 800748c:	d1e7      	bne.n	800745e <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800748e:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8007490:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007494:	f042 0220 	orr.w	r2, r2, #32
 8007498:	6462      	str	r2, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800749a:	2220      	movs	r2, #32
 800749c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80074a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_ERROR;
 80074a4:	2001      	movs	r0, #1
 80074a6:	e7df      	b.n	8007468 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

080074a8 <HAL_I2C_MspInit>:
}
 80074a8:	4770      	bx	lr

080074aa <HAL_I2C_Init>:
{
 80074aa:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80074ac:	4604      	mov	r4, r0
 80074ae:	2800      	cmp	r0, #0
 80074b0:	d04a      	beq.n	8007548 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80074b2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80074b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80074ba:	b91b      	cbnz	r3, 80074c4 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80074bc:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80074c0:	f7ff fff2 	bl	80074a8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80074c4:	2324      	movs	r3, #36	; 0x24
 80074c6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80074ca:	6823      	ldr	r3, [r4, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	f022 0201 	bic.w	r2, r2, #1
 80074d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80074d4:	6862      	ldr	r2, [r4, #4]
 80074d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80074da:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80074dc:	689a      	ldr	r2, [r3, #8]
 80074de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80074e2:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80074e4:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80074e8:	2901      	cmp	r1, #1
 80074ea:	d124      	bne.n	8007536 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80074ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074f0:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80074f2:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074f4:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80074f6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80074fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074fe:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007500:	68da      	ldr	r2, [r3, #12]
 8007502:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007506:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007508:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800750c:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800750e:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007510:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007514:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007516:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800751a:	430a      	orrs	r2, r1
 800751c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	f042 0201 	orr.w	r2, r2, #1
 8007524:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8007526:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007528:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800752a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800752e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007530:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8007534:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007536:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800753a:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800753c:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800753e:	d1d8      	bne.n	80074f2 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007540:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007544:	605a      	str	r2, [r3, #4]
 8007546:	e7d4      	b.n	80074f2 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8007548:	2001      	movs	r0, #1
 800754a:	e7f3      	b.n	8007534 <HAL_I2C_Init+0x8a>

0800754c <HAL_I2C_MspDeInit>:
 800754c:	4770      	bx	lr

0800754e <HAL_I2C_DeInit>:
{
 800754e:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8007550:	4604      	mov	r4, r0
 8007552:	b198      	cbz	r0, 800757c <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8007554:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007556:	2324      	movs	r3, #36	; 0x24
 8007558:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800755c:	6813      	ldr	r3, [r2, #0]
 800755e:	f023 0301 	bic.w	r3, r3, #1
 8007562:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8007564:	f7ff fff2 	bl	800754c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007568:	2000      	movs	r0, #0
 800756a:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 800756c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8007570:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007574:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007576:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800757a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800757c:	2001      	movs	r0, #1
 800757e:	e7fc      	b.n	800757a <HAL_I2C_DeInit+0x2c>

08007580 <HAL_I2C_Mem_Write>:
{
 8007580:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007584:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007586:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800758a:	4604      	mov	r4, r0
 800758c:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800758e:	2b20      	cmp	r3, #32
{
 8007590:	4616      	mov	r6, r2
 8007592:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8007596:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800759a:	f040 80c6 	bne.w	800772a <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 800759e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075a0:	b113      	cbz	r3, 80075a8 <HAL_I2C_Mem_Write+0x28>
 80075a2:	f1ba 0f00 	cmp.w	sl, #0
 80075a6:	d106      	bne.n	80075b6 <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80075a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075ac:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80075ae:	2001      	movs	r0, #1
}
 80075b0:	b003      	add	sp, #12
 80075b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80075b6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	f000 80b5 	beq.w	800772a <HAL_I2C_Mem_Write+0x1aa>
 80075c0:	f04f 0b01 	mov.w	fp, #1
 80075c4:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80075c8:	f7fe fe44 	bl	8006254 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80075cc:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80075ce:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80075d0:	9000      	str	r0, [sp, #0]
 80075d2:	465a      	mov	r2, fp
 80075d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80075d8:	4620      	mov	r0, r4
 80075da:	f7ff ff09 	bl	80073f0 <I2C_WaitOnFlagUntilTimeout>
 80075de:	2800      	cmp	r0, #0
 80075e0:	d1e5      	bne.n	80075ae <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80075e2:	2321      	movs	r3, #33	; 0x21
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80075e4:	fa5f f289 	uxtb.w	r2, r9
 80075e8:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 80075ea:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80075ec:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80075f0:	2340      	movs	r3, #64	; 0x40
 80075f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80075f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075f8:	6460      	str	r0, [r4, #68]	; 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80075fa:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80075fc:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80075fe:	4b4c      	ldr	r3, [pc, #304]	; (8007730 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 8007600:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800760a:	f7ff fe2f 	bl	800726c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800760e:	462a      	mov	r2, r5
 8007610:	4641      	mov	r1, r8
 8007612:	4620      	mov	r0, r4
 8007614:	f7ff fec1 	bl	800739a <I2C_WaitOnTXISFlagUntilTimeout>
 8007618:	bb18      	cbnz	r0, 8007662 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800761a:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800761e:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007620:	d115      	bne.n	800764e <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007622:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007624:	2200      	movs	r2, #0
 8007626:	2180      	movs	r1, #128	; 0x80
 8007628:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800762a:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800762c:	4643      	mov	r3, r8
 800762e:	9500      	str	r5, [sp, #0]
 8007630:	f7ff fede 	bl	80073f0 <I2C_WaitOnFlagUntilTimeout>
 8007634:	b9a8      	cbnz	r0, 8007662 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007636:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007638:	b29b      	uxth	r3, r3
 800763a:	2bff      	cmp	r3, #255	; 0xff
 800763c:	d815      	bhi.n	800766a <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800763e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007640:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007644:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8007646:	b292      	uxth	r2, r2
 8007648:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800764a:	b2d2      	uxtb	r2, r2
 800764c:	e012      	b.n	8007674 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800764e:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007650:	4641      	mov	r1, r8
 8007652:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007654:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007656:	462a      	mov	r2, r5
 8007658:	f7ff fe9f 	bl	800739a <I2C_WaitOnTXISFlagUntilTimeout>
 800765c:	b908      	cbnz	r0, 8007662 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800765e:	6823      	ldr	r3, [r4, #0]
 8007660:	e7df      	b.n	8007622 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8007662:	2300      	movs	r3, #0
 8007664:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007668:	e7a1      	b.n	80075ae <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800766a:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800766c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007670:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007672:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007674:	4639      	mov	r1, r7
 8007676:	4620      	mov	r0, r4
 8007678:	f7ff fdf8 	bl	800726c <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800767c:	462a      	mov	r2, r5
 800767e:	4641      	mov	r1, r8
 8007680:	4620      	mov	r0, r4
 8007682:	f7ff fe8a 	bl	800739a <I2C_WaitOnTXISFlagUntilTimeout>
 8007686:	2800      	cmp	r0, #0
 8007688:	d191      	bne.n	80075ae <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800768a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800768c:	6822      	ldr	r2, [r4, #0]
 800768e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8007692:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8007694:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8007696:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007698:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800769a:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800769c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800769e:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80076a0:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80076a2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80076a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80076a6:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	b1b3      	cbz	r3, 80076da <HAL_I2C_Mem_Write+0x15a>
 80076ac:	b9aa      	cbnz	r2, 80076da <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80076ae:	4643      	mov	r3, r8
 80076b0:	2180      	movs	r1, #128	; 0x80
 80076b2:	4620      	mov	r0, r4
 80076b4:	9500      	str	r5, [sp, #0]
 80076b6:	f7ff fe9b 	bl	80073f0 <I2C_WaitOnFlagUntilTimeout>
 80076ba:	2800      	cmp	r0, #0
 80076bc:	f47f af77 	bne.w	80075ae <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	2bff      	cmp	r3, #255	; 0xff
 80076c6:	d928      	bls.n	800771a <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80076c8:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80076ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80076ce:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80076d0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80076d2:	4639      	mov	r1, r7
 80076d4:	4620      	mov	r0, r4
 80076d6:	f7ff fdc9 	bl	800726c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80076da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80076dc:	b29b      	uxth	r3, r3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1cc      	bne.n	800767c <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076e2:	462a      	mov	r2, r5
 80076e4:	4641      	mov	r1, r8
 80076e6:	4620      	mov	r0, r4
 80076e8:	f7ff feb5 	bl	8007456 <I2C_WaitOnSTOPFlagUntilTimeout>
 80076ec:	2800      	cmp	r0, #0
 80076ee:	f47f af5e 	bne.w	80075ae <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076f2:	6823      	ldr	r3, [r4, #0]
 80076f4:	2120      	movs	r1, #32
 80076f6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80076f8:	685a      	ldr	r2, [r3, #4]
 80076fa:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80076fe:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8007702:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8007706:	f022 0201 	bic.w	r2, r2, #1
 800770a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800770c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007710:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007714:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8007718:	e74a      	b.n	80075b0 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800771a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800771c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007720:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8007722:	b292      	uxth	r2, r2
 8007724:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007726:	b2d2      	uxtb	r2, r2
 8007728:	e7d3      	b.n	80076d2 <HAL_I2C_Mem_Write+0x152>
    return HAL_BUSY;
 800772a:	2002      	movs	r0, #2
 800772c:	e740      	b.n	80075b0 <HAL_I2C_Mem_Write+0x30>
 800772e:	bf00      	nop
 8007730:	80002000 	.word	0x80002000

08007734 <HAL_I2C_Mem_Read>:
{
 8007734:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007738:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800773a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800773e:	4604      	mov	r4, r0
 8007740:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007742:	2b20      	cmp	r3, #32
{
 8007744:	4616      	mov	r6, r2
 8007746:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800774a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800774e:	f040 80c9 	bne.w	80078e4 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8007752:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007754:	b113      	cbz	r3, 800775c <HAL_I2C_Mem_Read+0x28>
 8007756:	f1ba 0f00 	cmp.w	sl, #0
 800775a:	d106      	bne.n	800776a <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800775c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007760:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8007762:	2001      	movs	r0, #1
}
 8007764:	b003      	add	sp, #12
 8007766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800776a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800776e:	2b01      	cmp	r3, #1
 8007770:	f000 80b8 	beq.w	80078e4 <HAL_I2C_Mem_Read+0x1b0>
 8007774:	f04f 0b01 	mov.w	fp, #1
 8007778:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800777c:	f7fe fd6a 	bl	8006254 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007780:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8007782:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007784:	9000      	str	r0, [sp, #0]
 8007786:	465a      	mov	r2, fp
 8007788:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800778c:	4620      	mov	r0, r4
 800778e:	f7ff fe2f 	bl	80073f0 <I2C_WaitOnFlagUntilTimeout>
 8007792:	2800      	cmp	r0, #0
 8007794:	d1e5      	bne.n	8007762 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007796:	2322      	movs	r3, #34	; 0x22
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007798:	fa5f f289 	uxtb.w	r2, r9
 800779c:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 800779e:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80077a0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80077a4:	2340      	movs	r3, #64	; 0x40
 80077a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80077aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077ac:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80077ae:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80077b0:	4b4d      	ldr	r3, [pc, #308]	; (80078e8 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 80077b2:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	4603      	mov	r3, r0
 80077ba:	4620      	mov	r0, r4
 80077bc:	f7ff fd56 	bl	800726c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077c0:	462a      	mov	r2, r5
 80077c2:	4641      	mov	r1, r8
 80077c4:	4620      	mov	r0, r4
 80077c6:	f7ff fde8 	bl	800739a <I2C_WaitOnTXISFlagUntilTimeout>
 80077ca:	bb20      	cbnz	r0, 8007816 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80077cc:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80077d0:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80077d2:	d116      	bne.n	8007802 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80077d4:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80077d6:	2200      	movs	r2, #0
 80077d8:	2140      	movs	r1, #64	; 0x40
 80077da:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80077dc:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80077de:	4643      	mov	r3, r8
 80077e0:	9500      	str	r5, [sp, #0]
 80077e2:	f7ff fe05 	bl	80073f0 <I2C_WaitOnFlagUntilTimeout>
 80077e6:	b9b0      	cbnz	r0, 8007816 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	2bff      	cmp	r3, #255	; 0xff
 80077ee:	4b3f      	ldr	r3, [pc, #252]	; (80078ec <HAL_I2C_Mem_Read+0x1b8>)
 80077f0:	d815      	bhi.n	800781e <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 80077f2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80077f4:	9300      	str	r3, [sp, #0]
 80077f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 80077fa:	b292      	uxth	r2, r2
 80077fc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80077fe:	b2d2      	uxtb	r2, r2
 8007800:	e012      	b.n	8007828 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007802:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007804:	4641      	mov	r1, r8
 8007806:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007808:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800780a:	462a      	mov	r2, r5
 800780c:	f7ff fdc5 	bl	800739a <I2C_WaitOnTXISFlagUntilTimeout>
 8007810:	b908      	cbnz	r0, 8007816 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007812:	6823      	ldr	r3, [r4, #0]
 8007814:	e7de      	b.n	80077d4 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8007816:	2300      	movs	r3, #0
 8007818:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800781c:	e7a1      	b.n	8007762 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800781e:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007826:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007828:	4639      	mov	r1, r7
 800782a:	4620      	mov	r0, r4
 800782c:	f7ff fd1e 	bl	800726c <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007830:	4643      	mov	r3, r8
 8007832:	2200      	movs	r2, #0
 8007834:	2104      	movs	r1, #4
 8007836:	4620      	mov	r0, r4
 8007838:	9500      	str	r5, [sp, #0]
 800783a:	f7ff fdd9 	bl	80073f0 <I2C_WaitOnFlagUntilTimeout>
 800783e:	2800      	cmp	r0, #0
 8007840:	d18f      	bne.n	8007762 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007842:	6823      	ldr	r3, [r4, #0]
 8007844:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007846:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007848:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800784a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800784c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800784e:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8007850:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8007852:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8007854:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007856:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8007858:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800785a:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800785c:	b29b      	uxth	r3, r3
 800785e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007860:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007862:	b29b      	uxth	r3, r3
 8007864:	b1b3      	cbz	r3, 8007894 <HAL_I2C_Mem_Read+0x160>
 8007866:	b9aa      	cbnz	r2, 8007894 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007868:	4643      	mov	r3, r8
 800786a:	2180      	movs	r1, #128	; 0x80
 800786c:	4620      	mov	r0, r4
 800786e:	9500      	str	r5, [sp, #0]
 8007870:	f7ff fdbe 	bl	80073f0 <I2C_WaitOnFlagUntilTimeout>
 8007874:	2800      	cmp	r0, #0
 8007876:	f47f af74 	bne.w	8007762 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800787a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800787c:	b29b      	uxth	r3, r3
 800787e:	2bff      	cmp	r3, #255	; 0xff
 8007880:	d928      	bls.n	80078d4 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007882:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007884:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007888:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800788a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800788c:	4639      	mov	r1, r7
 800788e:	4620      	mov	r0, r4
 8007890:	f7ff fcec 	bl	800726c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8007894:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007896:	b29b      	uxth	r3, r3
 8007898:	2b00      	cmp	r3, #0
 800789a:	d1c9      	bne.n	8007830 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800789c:	462a      	mov	r2, r5
 800789e:	4641      	mov	r1, r8
 80078a0:	4620      	mov	r0, r4
 80078a2:	f7ff fdd8 	bl	8007456 <I2C_WaitOnSTOPFlagUntilTimeout>
 80078a6:	2800      	cmp	r0, #0
 80078a8:	f47f af5b 	bne.w	8007762 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078ac:	6823      	ldr	r3, [r4, #0]
 80078ae:	2120      	movs	r1, #32
 80078b0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80078b2:	685a      	ldr	r2, [r3, #4]
 80078b4:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80078b8:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80078bc:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80078c0:	f022 0201 	bic.w	r2, r2, #1
 80078c4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80078c6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80078ca:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80078ce:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80078d2:	e747      	b.n	8007764 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 80078d4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80078d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078da:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80078dc:	b292      	uxth	r2, r2
 80078de:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80078e0:	b2d2      	uxtb	r2, r2
 80078e2:	e7d3      	b.n	800788c <HAL_I2C_Mem_Read+0x158>
    return HAL_BUSY;
 80078e4:	2002      	movs	r0, #2
 80078e6:	e73d      	b.n	8007764 <HAL_I2C_Mem_Read+0x30>
 80078e8:	80002000 	.word	0x80002000
 80078ec:	80002400 	.word	0x80002400

080078f0 <HAL_I2C_GetState>:
  return hi2c->State;
 80078f0:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 80078f4:	4770      	bx	lr

080078f6 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 80078f6:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 80078f8:	4770      	bx	lr

080078fa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80078fa:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078fc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007900:	2b20      	cmp	r3, #32
 8007902:	b2dc      	uxtb	r4, r3
 8007904:	d11d      	bne.n	8007942 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007906:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800790a:	2b01      	cmp	r3, #1
 800790c:	d019      	beq.n	8007942 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800790e:	2324      	movs	r3, #36	; 0x24
 8007910:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007914:	6803      	ldr	r3, [r0, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	f022 0201 	bic.w	r2, r2, #1
 800791c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007924:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	4311      	orrs	r1, r2
 800792a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	f042 0201 	orr.w	r2, r2, #1
 8007932:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007934:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8007936:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800793a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800793e:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8007940:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8007942:	2002      	movs	r0, #2
 8007944:	e7fc      	b.n	8007940 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08007946 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007946:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007948:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800794c:	2b20      	cmp	r3, #32
 800794e:	b2dc      	uxtb	r4, r3
 8007950:	d11c      	bne.n	800798c <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007952:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007956:	2b01      	cmp	r3, #1
 8007958:	d018      	beq.n	800798c <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800795a:	2324      	movs	r3, #36	; 0x24
 800795c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007960:	6803      	ldr	r3, [r0, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	f022 0201 	bic.w	r2, r2, #1
 8007968:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800796a:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800796c:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007970:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007974:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	f042 0201 	orr.w	r2, r2, #1
 800797c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800797e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8007980:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007984:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8007988:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800798a:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800798c:	2002      	movs	r0, #2
 800798e:	e7fc      	b.n	800798a <HAL_I2CEx_ConfigDigitalFilter+0x44>

08007990 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007990:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007992:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007994:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007998:	3284      	adds	r2, #132	; 0x84
 800799a:	1883      	adds	r3, r0, r2
{
 800799c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80079a0:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80079a2:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80079a6:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80079a8:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80079ac:	684c      	ldr	r4, [r1, #4]
 80079ae:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80079b2:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80079b6:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80079ba:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80079bc:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80079be:	68c5      	ldr	r5, [r0, #12]
 80079c0:	f3c5 450b 	ubfx	r5, r5, #16, #12
 80079c4:	443d      	add	r5, r7
 80079c6:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80079ca:	68ce      	ldr	r6, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80079cc:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80079ce:	68c5      	ldr	r5, [r0, #12]
 80079d0:	f3c5 050a 	ubfx	r5, r5, #0, #11
 80079d4:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80079d6:	689d      	ldr	r5, [r3, #8]
 80079d8:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 80079dc:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80079de:	688d      	ldr	r5, [r1, #8]
 80079e0:	68c7      	ldr	r7, [r0, #12]
 80079e2:	3501      	adds	r5, #1
 80079e4:	f3c7 070a 	ubfx	r7, r7, #0, #11
 80079e8:	443d      	add	r5, r7
 80079ea:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80079ee:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80079f0:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80079f2:	691d      	ldr	r5, [r3, #16]
 80079f4:	f025 0507 	bic.w	r5, r5, #7
 80079f8:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80079fa:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80079fc:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80079fe:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007a02:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8007a06:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007a0a:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8007a0e:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8007a12:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8007a16:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8007a1a:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007a1c:	695d      	ldr	r5, [r3, #20]
 8007a1e:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8007a22:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007a24:	694d      	ldr	r5, [r1, #20]
 8007a26:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007a28:	69dd      	ldr	r5, [r3, #28]
 8007a2a:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 8007a2e:	f025 0507 	bic.w	r5, r5, #7
 8007a32:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007a34:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8007a38:	433d      	orrs	r5, r7
 8007a3a:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007a3c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007a3e:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007a40:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007a44:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007a46:	b31e      	cbz	r6, 8007a90 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007a48:	2e01      	cmp	r6, #1
 8007a4a:	d023      	beq.n	8007a94 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007a4c:	1eb5      	subs	r5, r6, #2
 8007a4e:	2d02      	cmp	r5, #2
 8007a50:	d922      	bls.n	8007a98 <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8007a52:	2e07      	cmp	r6, #7
 8007a54:	bf0c      	ite	eq
 8007a56:	2502      	moveq	r5, #2
 8007a58:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007a5a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007a5c:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007a60:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007a64:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007a66:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007a68:	3407      	adds	r4, #7
 8007a6a:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007a6c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8007a6e:	436e      	muls	r6, r5
 8007a70:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8007a74:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007a76:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8007a78:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 8007a7c:	f024 0407 	bic.w	r4, r4, #7
 8007a80:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007a82:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007a84:	5883      	ldr	r3, [r0, r2]
 8007a86:	f043 0301 	orr.w	r3, r3, #1
 8007a8a:	5083      	str	r3, [r0, r2]
}
 8007a8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8007a90:	2504      	movs	r5, #4
 8007a92:	e7e2      	b.n	8007a5a <LTDC_SetConfig+0xca>
    tmp = 3U;
 8007a94:	2503      	movs	r5, #3
 8007a96:	e7e0      	b.n	8007a5a <LTDC_SetConfig+0xca>
    tmp = 2U;
 8007a98:	2502      	movs	r5, #2
 8007a9a:	e7de      	b.n	8007a5a <LTDC_SetConfig+0xca>

08007a9c <HAL_LTDC_Init>:
{
 8007a9c:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8007a9e:	4604      	mov	r4, r0
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	d063      	beq.n	8007b6c <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007aa4:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8007aa8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007aac:	b91b      	cbnz	r3, 8007ab6 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8007aae:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8007ab2:	f7f9 f90d 	bl	8000cd0 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007ab6:	2302      	movs	r3, #2
 8007ab8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007abc:	6823      	ldr	r3, [r4, #0]
 8007abe:	699a      	ldr	r2, [r3, #24]
 8007ac0:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007ac4:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007ac6:	6999      	ldr	r1, [r3, #24]
 8007ac8:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8007acc:	4302      	orrs	r2, r0
 8007ace:	68e0      	ldr	r0, [r4, #12]
 8007ad0:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007ad2:	6920      	ldr	r0, [r4, #16]
 8007ad4:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007ad6:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007ad8:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007ada:	4925      	ldr	r1, [pc, #148]	; (8007b70 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007adc:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007ade:	689a      	ldr	r2, [r3, #8]
 8007ae0:	400a      	ands	r2, r1
 8007ae2:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007ae4:	689a      	ldr	r2, [r3, #8]
 8007ae6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8007aea:	69a0      	ldr	r0, [r4, #24]
 8007aec:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007aee:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007af0:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007af2:	68da      	ldr	r2, [r3, #12]
 8007af4:	400a      	ands	r2, r1
 8007af6:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007af8:	68da      	ldr	r2, [r3, #12]
 8007afa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8007afe:	6a20      	ldr	r0, [r4, #32]
 8007b00:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007b02:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007b04:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007b06:	691a      	ldr	r2, [r3, #16]
 8007b08:	400a      	ands	r2, r1
 8007b0a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007b0c:	691a      	ldr	r2, [r3, #16]
 8007b0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8007b12:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007b14:	4302      	orrs	r2, r0
 8007b16:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007b18:	695a      	ldr	r2, [r3, #20]
 8007b1a:	4011      	ands	r1, r2
 8007b1c:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007b1e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007b20:	695a      	ldr	r2, [r3, #20]
 8007b22:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007b26:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007b28:	430a      	orrs	r2, r1
 8007b2a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007b2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007b2e:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007b32:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007b36:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007b3a:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007b3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007b3e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8007b42:	430a      	orrs	r2, r1
 8007b44:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8007b48:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007b4c:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007b4e:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007b50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b52:	f042 0206 	orr.w	r2, r2, #6
 8007b56:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8007b58:	699a      	ldr	r2, [r3, #24]
 8007b5a:	f042 0201 	orr.w	r2, r2, #1
 8007b5e:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8007b60:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007b62:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8007b66:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8007b6a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007b6c:	2001      	movs	r0, #1
 8007b6e:	e7fc      	b.n	8007b6a <HAL_LTDC_Init+0xce>
 8007b70:	f000f800 	.word	0xf000f800

08007b74 <HAL_LTDC_ErrorCallback>:
 8007b74:	4770      	bx	lr

08007b76 <HAL_LTDC_LineEventCallback>:
 8007b76:	4770      	bx	lr

08007b78 <HAL_LTDC_ReloadEventCallback>:
 8007b78:	4770      	bx	lr

08007b7a <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007b7a:	6803      	ldr	r3, [r0, #0]
{
 8007b7c:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007b7e:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 8007b80:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007b82:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007b84:	0772      	lsls	r2, r6, #29
 8007b86:	d514      	bpl.n	8007bb2 <HAL_LTDC_IRQHandler+0x38>
 8007b88:	0769      	lsls	r1, r5, #29
 8007b8a:	d512      	bpl.n	8007bb2 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007b8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b8e:	f022 0204 	bic.w	r2, r2, #4
 8007b92:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007b94:	2204      	movs	r2, #4
 8007b96:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007b98:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8007b9c:	f043 0301 	orr.w	r3, r3, #1
 8007ba0:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8007ba4:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007ba6:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8007baa:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8007bae:	f7ff ffe1 	bl	8007b74 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007bb2:	07b2      	lsls	r2, r6, #30
 8007bb4:	d516      	bpl.n	8007be4 <HAL_LTDC_IRQHandler+0x6a>
 8007bb6:	07ab      	lsls	r3, r5, #30
 8007bb8:	d514      	bpl.n	8007be4 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007bba:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 8007bbc:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bc0:	f022 0202 	bic.w	r2, r2, #2
 8007bc4:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007bca:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007bd4:	2304      	movs	r3, #4
 8007bd6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8007bda:	2300      	movs	r3, #0
 8007bdc:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8007be0:	f7ff ffc8 	bl	8007b74 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007be4:	07f0      	lsls	r0, r6, #31
 8007be6:	d510      	bpl.n	8007c0a <HAL_LTDC_IRQHandler+0x90>
 8007be8:	07e9      	lsls	r1, r5, #31
 8007bea:	d50e      	bpl.n	8007c0a <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007bec:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8007bee:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bf2:	f022 0201 	bic.w	r2, r2, #1
 8007bf6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 8007bfc:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8007bfe:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8007c02:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8007c06:	f7ff ffb6 	bl	8007b76 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007c0a:	0732      	lsls	r2, r6, #28
 8007c0c:	d511      	bpl.n	8007c32 <HAL_LTDC_IRQHandler+0xb8>
 8007c0e:	072b      	lsls	r3, r5, #28
 8007c10:	d50f      	bpl.n	8007c32 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007c12:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007c14:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007c16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c18:	f022 0208 	bic.w	r2, r2, #8
 8007c1c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007c1e:	2208      	movs	r2, #8
 8007c20:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8007c22:	2301      	movs	r3, #1
 8007c24:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8007c28:	2300      	movs	r3, #0
 8007c2a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007c2e:	f7ff ffa3 	bl	8007b78 <HAL_LTDC_ReloadEventCallback>
}
 8007c32:	bd70      	pop	{r4, r5, r6, pc}

08007c34 <HAL_LTDC_ConfigLayer>:
{
 8007c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8007c38:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8007c3c:	4606      	mov	r6, r0
 8007c3e:	460f      	mov	r7, r1
 8007c40:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	f04f 0002 	mov.w	r0, #2
 8007c48:	d01f      	beq.n	8007c8a <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007c4a:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8007c4c:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007c50:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007c52:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007c56:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8007c5a:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007c5e:	3438      	adds	r4, #56	; 0x38
 8007c60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c6c:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007c6e:	4630      	mov	r0, r6
 8007c70:	4662      	mov	r2, ip
 8007c72:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007c74:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007c76:	f7ff fe8b 	bl	8007990 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007c7a:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8007c7c:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007c7e:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007c82:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007c86:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8007c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08007c90 <HAL_LTDC_SetPitch>:
{
 8007c90:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 8007c92:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	f04f 0302 	mov.w	r3, #2
 8007c9c:	d02c      	beq.n	8007cf8 <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8007c9e:	2434      	movs	r4, #52	; 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007ca0:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8007ca4:	fb04 0402 	mla	r4, r4, r2, r0
 8007ca8:	6ca4      	ldr	r4, [r4, #72]	; 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007caa:	b33c      	cbz	r4, 8007cfc <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007cac:	2c01      	cmp	r4, #1
 8007cae:	d027      	beq.n	8007d00 <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007cb0:	1ea5      	subs	r5, r4, #2
 8007cb2:	429d      	cmp	r5, r3
 8007cb4:	d902      	bls.n	8007cbc <HAL_LTDC_SetPitch+0x2c>
    tmp = 1U;
 8007cb6:	2c07      	cmp	r4, #7
 8007cb8:	bf18      	it	ne
 8007cba:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8007cbc:	01d2      	lsls	r2, r2, #7
 8007cbe:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 8007cc0:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8007cc2:	3284      	adds	r2, #132	; 0x84
 8007cc4:	4422      	add	r2, r4
 8007cc6:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8007cc8:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8007ccc:	f424 14f8 	bic.w	r4, r4, #2031616	; 0x1f0000
 8007cd0:	62d4      	str	r4, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8007cd2:	4c0c      	ldr	r4, [pc, #48]	; (8007d04 <HAL_LTDC_SetPitch+0x74>)
 8007cd4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007cd6:	f045 0501 	orr.w	r5, r5, #1
 8007cda:	6265      	str	r5, [r4, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 8007cdc:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8007cde:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8007ce2:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8007ce4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ce6:	f043 0301 	orr.w	r3, r3, #1
 8007cea:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8007cec:	2301      	movs	r3, #1
 8007cee:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 8007cfc:	2304      	movs	r3, #4
 8007cfe:	e7dd      	b.n	8007cbc <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 8007d00:	2303      	movs	r3, #3
 8007d02:	e7db      	b.n	8007cbc <HAL_LTDC_SetPitch+0x2c>
 8007d04:	50001000 	.word	0x50001000

08007d08 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8007d08:	b538      	push	{r3, r4, r5, lr}
 8007d0a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007d0c:	f7fe faa2 	bl	8006254 <HAL_GetTick>
 8007d10:	4605      	mov	r5, r0

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8007d12:	2c00      	cmp	r4, #0
 8007d14:	d061      	beq.n	8007dda <HAL_MDMA_Init+0xd2>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8007d16:	2300      	movs	r3, #0

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8007d18:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 8007d1a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8007d1e:	2302      	movs	r3, #2
 8007d20:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 8007d24:	68d3      	ldr	r3, [r2, #12]
 8007d26:	f023 0301 	bic.w	r3, r3, #1
 8007d2a:	60d3      	str	r3, [r2, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8007d2c:	6823      	ldr	r3, [r4, #0]
 8007d2e:	68da      	ldr	r2, [r3, #12]
 8007d30:	07d2      	lsls	r2, r2, #31
 8007d32:	d448      	bmi.n	8007dc6 <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8007d34:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 8007d38:	430a      	orrs	r2, r1
 8007d3a:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8007d3c:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 8007d40:	430a      	orrs	r2, r1
 8007d42:	69e1      	ldr	r1, [r4, #28]
 8007d44:	430a      	orrs	r2, r1
 8007d46:	6a21      	ldr	r1, [r4, #32]
 8007d48:	430a      	orrs	r2, r1
 8007d4a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007d4c:	430a      	orrs	r2, r1
 8007d4e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007d50:	430a      	orrs	r2, r1
 8007d52:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007d54:	430a      	orrs	r2, r1
 8007d56:	68a1      	ldr	r1, [r4, #8]
 8007d58:	430a      	orrs	r2, r1
 8007d5a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007d5c:	3901      	subs	r1, #1
 8007d5e:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8007d62:	6861      	ldr	r1, [r4, #4]
 8007d64:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007d68:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8007d6a:	d103      	bne.n	8007d74 <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8007d6c:	691a      	ldr	r2, [r3, #16]
 8007d6e:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8007d72:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8007d74:	2200      	movs	r2, #0
 8007d76:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8007d78:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007d7a:	2a00      	cmp	r2, #0
 8007d7c:	da04      	bge.n	8007d88 <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8007d7e:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8007d80:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8007d82:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 8007d86:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8007d88:	b292      	uxth	r2, r2
 8007d8a:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8007d8c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007d8e:	2a00      	cmp	r2, #0
 8007d90:	da25      	bge.n	8007dde <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8007d92:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8007d94:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8007d96:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 8007d9a:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007d9c:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007d9e:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8007da2:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007da6:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8007da8:	f04f 0200 	mov.w	r2, #0
 8007dac:	d019      	beq.n	8007de2 <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8007dae:	b2c9      	uxtb	r1, r1
 8007db0:	6299      	str	r1, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8007db2:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 8007db4:	2000      	movs	r0, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 8007db6:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8007db8:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8007dba:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 8007dbc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 8007dc0:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 8007dc4:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8007dc6:	f7fe fa45 	bl	8006254 <HAL_GetTick>
 8007dca:	1b40      	subs	r0, r0, r5
 8007dcc:	2805      	cmp	r0, #5
 8007dce:	d9ad      	bls.n	8007d2c <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8007dd0:	2340      	movs	r3, #64	; 0x40
 8007dd2:	66a3      	str	r3, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_ERROR;
 8007dda:	2001      	movs	r0, #1
 8007ddc:	e7f2      	b.n	8007dc4 <HAL_MDMA_Init+0xbc>
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007dde:	6a18      	ldr	r0, [r3, #32]
 8007de0:	e7dd      	b.n	8007d9e <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 8007de2:	629a      	str	r2, [r3, #40]	; 0x28
 8007de4:	e7e5      	b.n	8007db2 <HAL_MDMA_Init+0xaa>

08007de6 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 8007de6:	b1d8      	cbz	r0, 8007e20 <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 8007de8:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8007dea:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 8007dec:	68d3      	ldr	r3, [r2, #12]
 8007dee:	f023 0301 	bic.w	r3, r3, #1
 8007df2:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 8007df4:	2300      	movs	r3, #0
 8007df6:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 8007df8:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 8007dfa:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 8007dfc:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 8007dfe:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 8007e00:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 8007e02:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 8007e04:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 8007e06:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 8007e08:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8007e0a:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8007e0c:	6683      	str	r3, [r0, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8007e0e:	6643      	str	r3, [r0, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 8007e10:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
 8007e14:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 8007e18:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
  return HAL_OK;
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	4770      	bx	lr
    return HAL_ERROR;
 8007e20:	2001      	movs	r0, #1
}
 8007e22:	4770      	bx	lr

08007e24 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007e24:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007e26:	4d1c      	ldr	r5, [pc, #112]	; (8007e98 <HAL_PWREx_ConfigSupply+0x74>)
{
 8007e28:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007e2a:	68eb      	ldr	r3, [r5, #12]
 8007e2c:	f003 0307 	and.w	r3, r3, #7
 8007e30:	2b06      	cmp	r3, #6
 8007e32:	d006      	beq.n	8007e42 <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007e34:	68e8      	ldr	r0, [r5, #12]
 8007e36:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007e3a:	1b00      	subs	r0, r0, r4
 8007e3c:	bf18      	it	ne
 8007e3e:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8007e40:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007e42:	68eb      	ldr	r3, [r5, #12]
 8007e44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007e48:	4303      	orrs	r3, r0
 8007e4a:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 8007e4c:	f7fe fa02 	bl	8006254 <HAL_GetTick>
 8007e50:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007e52:	686b      	ldr	r3, [r5, #4]
 8007e54:	049a      	lsls	r2, r3, #18
 8007e56:	d508      	bpl.n	8007e6a <HAL_PWREx_ConfigSupply+0x46>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007e58:	f1a4 031d 	sub.w	r3, r4, #29
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d90c      	bls.n	8007e7a <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8007e60:	3c2d      	subs	r4, #45	; 0x2d
 8007e62:	2c01      	cmp	r4, #1
 8007e64:	d909      	bls.n	8007e7a <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 8007e66:	2000      	movs	r0, #0
 8007e68:	e7ea      	b.n	8007e40 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007e6a:	f7fe f9f3 	bl	8006254 <HAL_GetTick>
 8007e6e:	1b80      	subs	r0, r0, r6
 8007e70:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007e74:	d9ed      	bls.n	8007e52 <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 8007e76:	2001      	movs	r0, #1
 8007e78:	e7e2      	b.n	8007e40 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 8007e7a:	f7fe f9eb 	bl	8006254 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007e7e:	4d06      	ldr	r5, [pc, #24]	; (8007e98 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 8007e80:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007e82:	68eb      	ldr	r3, [r5, #12]
 8007e84:	03db      	lsls	r3, r3, #15
 8007e86:	d4ee      	bmi.n	8007e66 <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007e88:	f7fe f9e4 	bl	8006254 <HAL_GetTick>
 8007e8c:	1b00      	subs	r0, r0, r4
 8007e8e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007e92:	d9f6      	bls.n	8007e82 <HAL_PWREx_ConfigSupply+0x5e>
 8007e94:	e7ef      	b.n	8007e76 <HAL_PWREx_ConfigSupply+0x52>
 8007e96:	bf00      	nop
 8007e98:	58024800 	.word	0x58024800

08007e9c <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8007e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8007ea0:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8007ea2:	b136      	cbz	r6, 8007eb2 <QSPI_Config+0x16>
 8007ea4:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8007ea8:	d003      	beq.n	8007eb2 <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8007eaa:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8007eac:	6804      	ldr	r4, [r0, #0]
 8007eae:	3b01      	subs	r3, #1
 8007eb0:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8007eb2:	f8d1 9018 	ldr.w	r9, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007eb6:	e9d1 7507 	ldrd	r7, r5, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8007eba:	f1b9 0f00 	cmp.w	r9, #0
 8007ebe:	d04f      	beq.n	8007f60 <QSPI_Config+0xc4>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007ec0:	694b      	ldr	r3, [r1, #20]
 8007ec2:	ea46 0909 	orr.w	r9, r6, r9
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8007ec6:	6800      	ldr	r0, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007ec8:	f8d1 a000 	ldr.w	sl, [r1]
 8007ecc:	ea4f 4c83 	mov.w	ip, r3, lsl #18
 8007ed0:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
 8007ed4:	ea49 0902 	orr.w	r9, r9, r2
 8007ed8:	e9d1 480b 	ldrd	r4, r8, [r1, #44]	; 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8007edc:	b335      	cbz	r5, 8007f2c <QSPI_Config+0x90>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8007ede:	688b      	ldr	r3, [r1, #8]
 8007ee0:	ea49 0505 	orr.w	r5, r9, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007ee4:	690e      	ldr	r6, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8007ee6:	61c3      	str	r3, [r0, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007ee8:	b19f      	cbz	r7, 8007f12 <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007eea:	ea4a 0307 	orr.w	r3, sl, r7
 8007eee:	4323      	orrs	r3, r4
 8007ef0:	68cc      	ldr	r4, [r1, #12]
 8007ef2:	ea43 0308 	orr.w	r3, r3, r8
 8007ef6:	ea43 030e 	orr.w	r3, r3, lr
 8007efa:	4333      	orrs	r3, r6
 8007efc:	4323      	orrs	r3, r4
 8007efe:	ea43 030c 	orr.w	r3, r3, ip
 8007f02:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize |
                                         cmd->AddressMode | cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007f04:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007f08:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007f0a:	d00d      	beq.n	8007f28 <QSPI_Config+0x8c>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007f0c:	684b      	ldr	r3, [r1, #4]
 8007f0e:	6183      	str	r3, [r0, #24]
 8007f10:	e00a      	b.n	8007f28 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007f12:	ea4a 0304 	orr.w	r3, sl, r4
 8007f16:	ea43 0308 	orr.w	r3, r3, r8
 8007f1a:	ea43 030e 	orr.w	r3, r3, lr
 8007f1e:	4333      	orrs	r3, r6
 8007f20:	ea43 030c 	orr.w	r3, r3, ip
 8007f24:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007f26:	6143      	str	r3, [r0, #20]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8007f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007f2c:	b16f      	cbz	r7, 8007f4a <QSPI_Config+0xae>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007f2e:	ea4a 0307 	orr.w	r3, sl, r7
 8007f32:	4323      	orrs	r3, r4
 8007f34:	68cc      	ldr	r4, [r1, #12]
 8007f36:	ea43 0308 	orr.w	r3, r3, r8
 8007f3a:	ea43 030e 	orr.w	r3, r3, lr
 8007f3e:	4323      	orrs	r3, r4
 8007f40:	ea43 030c 	orr.w	r3, r3, ip
 8007f44:	ea43 0309 	orr.w	r3, r3, r9
 8007f48:	e7dc      	b.n	8007f04 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007f4a:	ea4a 0304 	orr.w	r3, sl, r4
 8007f4e:	ea43 0308 	orr.w	r3, r3, r8
 8007f52:	ea43 030e 	orr.w	r3, r3, lr
 8007f56:	ea43 030c 	orr.w	r3, r3, ip
 8007f5a:	ea43 0309 	orr.w	r3, r3, r9
 8007f5e:	e7e2      	b.n	8007f26 <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8007f60:	b365      	cbz	r5, 8007fbc <QSPI_Config+0x120>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8007f62:	6804      	ldr	r4, [r0, #0]
 8007f64:	688b      	ldr	r3, [r1, #8]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007f66:	6908      	ldr	r0, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8007f68:	61e3      	str	r3, [r4, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007f6a:	ea46 0305 	orr.w	r3, r6, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007f6e:	694e      	ldr	r6, [r1, #20]
 8007f70:	ea43 0502 	orr.w	r5, r3, r2
 8007f74:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 8007f78:	04b6      	lsls	r6, r6, #18
 8007f7a:	e9d1 830b 	ldrd	r8, r3, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007f7e:	b1a7      	cbz	r7, 8007faa <QSPI_Config+0x10e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007f80:	4338      	orrs	r0, r7
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007f82:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007f86:	ea40 0008 	orr.w	r0, r0, r8
 8007f8a:	ea43 0300 	orr.w	r3, r3, r0
 8007f8e:	68c8      	ldr	r0, [r1, #12]
 8007f90:	ea43 030c 	orr.w	r3, r3, ip
 8007f94:	ea43 0300 	orr.w	r3, r3, r0
 8007f98:	ea43 0306 	orr.w	r3, r3, r6
 8007f9c:	ea43 0305 	orr.w	r3, r3, r5
 8007fa0:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007fa2:	d0c1      	beq.n	8007f28 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007fa4:	684b      	ldr	r3, [r1, #4]
 8007fa6:	61a3      	str	r3, [r4, #24]
 8007fa8:	e7be      	b.n	8007f28 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007faa:	ea40 0008 	orr.w	r0, r0, r8
 8007fae:	4303      	orrs	r3, r0
 8007fb0:	ea43 030c 	orr.w	r3, r3, ip
 8007fb4:	4333      	orrs	r3, r6
 8007fb6:	432b      	orrs	r3, r5
 8007fb8:	6163      	str	r3, [r4, #20]
 8007fba:	e7b5      	b.n	8007f28 <QSPI_Config+0x8c>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007fbc:	b17f      	cbz	r7, 8007fde <QSPI_Config+0x142>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007fbe:	ea46 0307 	orr.w	r3, r6, r7
 8007fc2:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8007fc4:	6800      	ldr	r0, [r0, #0]
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	4323      	orrs	r3, r4
 8007fca:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8007fcc:	4323      	orrs	r3, r4
 8007fce:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8007fd0:	4323      	orrs	r3, r4
 8007fd2:	68cc      	ldr	r4, [r1, #12]
 8007fd4:	4323      	orrs	r3, r4
 8007fd6:	694c      	ldr	r4, [r1, #20]
 8007fd8:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8007fdc:	e792      	b.n	8007f04 <QSPI_Config+0x68>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8007fde:	2e00      	cmp	r6, #0
 8007fe0:	d0a2      	beq.n	8007f28 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007fe2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8007fe4:	6800      	ldr	r0, [r0, #0]
 8007fe6:	4333      	orrs	r3, r6
 8007fe8:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8007fea:	431a      	orrs	r2, r3
 8007fec:	694b      	ldr	r3, [r1, #20]
 8007fee:	4332      	orrs	r2, r6
 8007ff0:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8007ff2:	4332      	orrs	r2, r6
 8007ff4:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 8007ff8:	6142      	str	r2, [r0, #20]
}
 8007ffa:	e795      	b.n	8007f28 <QSPI_Config+0x8c>

08007ffc <QSPI_WaitFlagStateUntilTimeout>:
{
 8007ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008000:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008004:	4604      	mov	r4, r0
 8008006:	460e      	mov	r6, r1
 8008008:	4615      	mov	r5, r2
 800800a:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800800c:	6822      	ldr	r2, [r4, #0]
 800800e:	6893      	ldr	r3, [r2, #8]
 8008010:	4233      	tst	r3, r6
 8008012:	bf14      	ite	ne
 8008014:	2301      	movne	r3, #1
 8008016:	2300      	moveq	r3, #0
 8008018:	42ab      	cmp	r3, r5
 800801a:	d101      	bne.n	8008020 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 800801c:	2000      	movs	r0, #0
 800801e:	e012      	b.n	8008046 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8008020:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008024:	d0f3      	beq.n	800800e <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008026:	f7fe f915 	bl	8006254 <HAL_GetTick>
 800802a:	1bc0      	subs	r0, r0, r7
 800802c:	4540      	cmp	r0, r8
 800802e:	d802      	bhi.n	8008036 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8008030:	f1b8 0f00 	cmp.w	r8, #0
 8008034:	d1ea      	bne.n	800800c <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008036:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008038:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800803a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800803e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008040:	f043 0301 	orr.w	r3, r3, #1
 8008044:	6463      	str	r3, [r4, #68]	; 0x44
}
 8008046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800804c <HAL_QSPI_Init>:
{
 800804c:	b530      	push	{r4, r5, lr}
 800804e:	4604      	mov	r4, r0
 8008050:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8008052:	f7fe f8ff 	bl	8006254 <HAL_GetTick>
 8008056:	4603      	mov	r3, r0
  if(hqspi == NULL)
 8008058:	2c00      	cmp	r4, #0
 800805a:	d040      	beq.n	80080de <HAL_QSPI_Init+0x92>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800805c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8008060:	b93a      	cbnz	r2, 8008072 <HAL_QSPI_Init+0x26>
 8008062:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 8008064:	4620      	mov	r0, r4
 8008066:	f7f8 fe71 	bl	8000d4c <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800806a:	f241 3288 	movw	r2, #5000	; 0x1388
 800806e:	9b03      	ldr	r3, [sp, #12]
 8008070:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008072:	6820      	ldr	r0, [r4, #0]
 8008074:	68a1      	ldr	r1, [r4, #8]
 8008076:	6802      	ldr	r2, [r0, #0]
 8008078:	3901      	subs	r1, #1
 800807a:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800807e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008082:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008084:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008086:	4620      	mov	r0, r4
 8008088:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800808a:	9200      	str	r2, [sp, #0]
 800808c:	2200      	movs	r2, #0
 800808e:	f7ff ffb5 	bl	8007ffc <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8008092:	bb10      	cbnz	r0, 80080da <HAL_QSPI_Init+0x8e>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8008094:	6822      	ldr	r2, [r4, #0]
 8008096:	69e5      	ldr	r5, [r4, #28]
 8008098:	68e3      	ldr	r3, [r4, #12]
 800809a:	6811      	ldr	r1, [r2, #0]
 800809c:	432b      	orrs	r3, r5
 800809e:	6a25      	ldr	r5, [r4, #32]
 80080a0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80080a4:	432b      	orrs	r3, r5
 80080a6:	6865      	ldr	r5, [r4, #4]
 80080a8:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 80080ac:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80080b0:	430b      	orrs	r3, r1
 80080b2:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80080b4:	6855      	ldr	r5, [r2, #4]
 80080b6:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 80080ba:	430b      	orrs	r3, r1
 80080bc:	6921      	ldr	r1, [r4, #16]
 80080be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80080c2:	4908      	ldr	r1, [pc, #32]	; (80080e4 <HAL_QSPI_Init+0x98>)
 80080c4:	4029      	ands	r1, r5
 80080c6:	430b      	orrs	r3, r1
 80080c8:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 80080ca:	6813      	ldr	r3, [r2, #0]
 80080cc:	f043 0301 	orr.w	r3, r3, #1
 80080d0:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 80080d2:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80080d4:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 80080d6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 80080da:	b005      	add	sp, #20
 80080dc:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80080de:	2001      	movs	r0, #1
 80080e0:	e7fb      	b.n	80080da <HAL_QSPI_Init+0x8e>
 80080e2:	bf00      	nop
 80080e4:	ffe0f8fe 	.word	0xffe0f8fe

080080e8 <HAL_QSPI_Command>:
{
 80080e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80080ec:	4604      	mov	r4, r0
 80080ee:	b085      	sub	sp, #20
 80080f0:	4617      	mov	r7, r2
 80080f2:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 80080f4:	f7fe f8ae 	bl	8006254 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80080f8:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80080fc:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 80080fe:	2a01      	cmp	r2, #1
 8008100:	d033      	beq.n	800816a <HAL_QSPI_Command+0x82>
 8008102:	2201      	movs	r2, #1
 8008104:	2602      	movs	r6, #2
 8008106:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800810a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800810e:	2a01      	cmp	r2, #1
 8008110:	fa5f f882 	uxtb.w	r8, r2
 8008114:	d127      	bne.n	8008166 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008116:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008118:	9003      	str	r0, [sp, #12]
 800811a:	2120      	movs	r1, #32
 800811c:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800811e:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008120:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8008122:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008126:	f7ff ff69 	bl	8007ffc <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800812a:	4605      	mov	r5, r0
 800812c:	b9a0      	cbnz	r0, 8008158 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800812e:	4602      	mov	r2, r0
 8008130:	4649      	mov	r1, r9
 8008132:	4620      	mov	r0, r4
 8008134:	f7ff feb2 	bl	8007e9c <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8008138:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 800813c:	9b03      	ldr	r3, [sp, #12]
 800813e:	b94a      	cbnz	r2, 8008154 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8008140:	4642      	mov	r2, r8
 8008142:	4631      	mov	r1, r6
 8008144:	4620      	mov	r0, r4
 8008146:	9700      	str	r7, [sp, #0]
 8008148:	f7ff ff58 	bl	8007ffc <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800814c:	4605      	mov	r5, r0
 800814e:	b918      	cbnz	r0, 8008158 <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8008150:	6823      	ldr	r3, [r4, #0]
 8008152:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8008154:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8008158:	2300      	movs	r3, #0
 800815a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800815e:	4628      	mov	r0, r5
 8008160:	b005      	add	sp, #20
 8008162:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 8008166:	4635      	mov	r5, r6
 8008168:	e7f6      	b.n	8008158 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 800816a:	2502      	movs	r5, #2
 800816c:	e7f7      	b.n	800815e <HAL_QSPI_Command+0x76>

0800816e <HAL_QSPI_Transmit>:
{
 800816e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008170:	4604      	mov	r4, r0
 8008172:	b085      	sub	sp, #20
 8008174:	4616      	mov	r6, r2
 8008176:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8008178:	f7fe f86c 	bl	8006254 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800817c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8008180:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8008182:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 8008184:	2a01      	cmp	r2, #1
 8008186:	d049      	beq.n	800821c <HAL_QSPI_Transmit+0xae>
 8008188:	2201      	movs	r2, #1
 800818a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800818e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8008192:	2a01      	cmp	r2, #1
 8008194:	b2d0      	uxtb	r0, r2
 8008196:	d13f      	bne.n	8008218 <HAL_QSPI_Transmit+0xaa>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008198:	2200      	movs	r2, #0
 800819a:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 800819c:	2f00      	cmp	r7, #0
 800819e:	d036      	beq.n	800820e <HAL_QSPI_Transmit+0xa0>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80081a0:	2212      	movs	r2, #18
 80081a2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80081a6:	692a      	ldr	r2, [r5, #16]
 80081a8:	3201      	adds	r2, #1
 80081aa:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80081ac:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 80081ae:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80081b0:	3201      	adds	r2, #1
 80081b2:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80081b4:	696a      	ldr	r2, [r5, #20]
 80081b6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80081ba:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 80081bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80081be:	b98a      	cbnz	r2, 80081e4 <HAL_QSPI_Transmit+0x76>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80081c0:	2201      	movs	r2, #1
 80081c2:	2102      	movs	r1, #2
 80081c4:	4620      	mov	r0, r4
 80081c6:	9600      	str	r6, [sp, #0]
 80081c8:	f7ff ff18 	bl	8007ffc <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80081cc:	b910      	cbnz	r0, 80081d4 <HAL_QSPI_Transmit+0x66>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80081ce:	6823      	ldr	r3, [r4, #0]
 80081d0:	2202      	movs	r2, #2
 80081d2:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 80081d4:	2301      	movs	r3, #1
 80081d6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80081da:	2300      	movs	r3, #0
 80081dc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80081e0:	b005      	add	sp, #20
 80081e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80081e4:	2201      	movs	r2, #1
 80081e6:	2104      	movs	r1, #4
 80081e8:	4620      	mov	r0, r4
 80081ea:	9600      	str	r6, [sp, #0]
 80081ec:	9303      	str	r3, [sp, #12]
 80081ee:	f7ff ff05 	bl	8007ffc <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 80081f2:	2800      	cmp	r0, #0
 80081f4:	d1ee      	bne.n	80081d4 <HAL_QSPI_Transmit+0x66>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80081f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 80081f8:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80081fa:	7812      	ldrb	r2, [r2, #0]
 80081fc:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 8008200:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008202:	3201      	adds	r2, #1
 8008204:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8008206:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008208:	3a01      	subs	r2, #1
 800820a:	62e2      	str	r2, [r4, #44]	; 0x2c
 800820c:	e7d6      	b.n	80081bc <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800820e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008210:	f043 0308 	orr.w	r3, r3, #8
 8008214:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8008216:	e7e0      	b.n	80081da <HAL_QSPI_Transmit+0x6c>
    status = HAL_BUSY;
 8008218:	2002      	movs	r0, #2
 800821a:	e7de      	b.n	80081da <HAL_QSPI_Transmit+0x6c>
  __HAL_LOCK(hqspi);
 800821c:	2002      	movs	r0, #2
 800821e:	e7df      	b.n	80081e0 <HAL_QSPI_Transmit+0x72>

08008220 <HAL_QSPI_Receive>:
{
 8008220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008222:	4604      	mov	r4, r0
 8008224:	b085      	sub	sp, #20
 8008226:	4616      	mov	r6, r2
 8008228:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800822a:	f7fe f813 	bl	8006254 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800822e:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8008230:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8008232:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 8008236:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800823a:	2a01      	cmp	r2, #1
 800823c:	d04d      	beq.n	80082da <HAL_QSPI_Receive+0xba>
 800823e:	2201      	movs	r2, #1
 8008240:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008244:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8008248:	2a01      	cmp	r2, #1
 800824a:	b2d0      	uxtb	r0, r2
 800824c:	d143      	bne.n	80082d6 <HAL_QSPI_Receive+0xb6>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800824e:	2200      	movs	r2, #0
 8008250:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8008252:	2f00      	cmp	r7, #0
 8008254:	d03a      	beq.n	80082cc <HAL_QSPI_Receive+0xac>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8008256:	2222      	movs	r2, #34	; 0x22
 8008258:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800825c:	692a      	ldr	r2, [r5, #16]
 800825e:	3201      	adds	r2, #1
 8008260:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8008262:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 8008264:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8008266:	3201      	adds	r2, #1
 8008268:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800826a:	6969      	ldr	r1, [r5, #20]
 800826c:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8008270:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8008274:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8008276:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800827a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800827c:	b98a      	cbnz	r2, 80082a2 <HAL_QSPI_Receive+0x82>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800827e:	2201      	movs	r2, #1
 8008280:	2102      	movs	r1, #2
 8008282:	4620      	mov	r0, r4
 8008284:	9600      	str	r6, [sp, #0]
 8008286:	f7ff feb9 	bl	8007ffc <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800828a:	b910      	cbnz	r0, 8008292 <HAL_QSPI_Receive+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800828c:	6823      	ldr	r3, [r4, #0]
 800828e:	2202      	movs	r2, #2
 8008290:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 8008292:	2301      	movs	r3, #1
 8008294:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8008298:	2300      	movs	r3, #0
 800829a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800829e:	b005      	add	sp, #20
 80082a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80082a2:	2201      	movs	r2, #1
 80082a4:	2106      	movs	r1, #6
 80082a6:	4620      	mov	r0, r4
 80082a8:	9600      	str	r6, [sp, #0]
 80082aa:	9303      	str	r3, [sp, #12]
 80082ac:	f7ff fea6 	bl	8007ffc <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 80082b0:	2800      	cmp	r0, #0
 80082b2:	d1ee      	bne.n	8008292 <HAL_QSPI_Receive+0x72>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80082b4:	f895 1020 	ldrb.w	r1, [r5, #32]
 80082b8:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 80082ba:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80082bc:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 80082be:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80082c0:	3201      	adds	r2, #1
 80082c2:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 80082c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80082c6:	3a01      	subs	r2, #1
 80082c8:	63a2      	str	r2, [r4, #56]	; 0x38
 80082ca:	e7d6      	b.n	800827a <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80082cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80082ce:	f043 0308 	orr.w	r3, r3, #8
 80082d2:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 80082d4:	e7e0      	b.n	8008298 <HAL_QSPI_Receive+0x78>
    status = HAL_BUSY;
 80082d6:	2002      	movs	r0, #2
 80082d8:	e7de      	b.n	8008298 <HAL_QSPI_Receive+0x78>
  __HAL_LOCK(hqspi);
 80082da:	2002      	movs	r0, #2
 80082dc:	e7df      	b.n	800829e <HAL_QSPI_Receive+0x7e>

080082de <HAL_QSPI_AutoPolling>:
{
 80082de:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80082e2:	4604      	mov	r4, r0
 80082e4:	4615      	mov	r5, r2
 80082e6:	461e      	mov	r6, r3
 80082e8:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 80082ea:	f7fd ffb3 	bl	8006254 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80082ee:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80082f2:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 80082f4:	2a01      	cmp	r2, #1
 80082f6:	d040      	beq.n	800837a <HAL_QSPI_AutoPolling+0x9c>
 80082f8:	2201      	movs	r2, #1
 80082fa:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80082fe:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8008302:	2a01      	cmp	r2, #1
 8008304:	b2d7      	uxtb	r7, r2
 8008306:	d136      	bne.n	8008376 <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8008308:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800830a:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800830c:	9003      	str	r0, [sp, #12]
 800830e:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008310:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008312:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8008314:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008318:	2120      	movs	r1, #32
 800831a:	f7ff fe6f 	bl	8007ffc <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800831e:	bb20      	cbnz	r0, 800836a <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8008320:	6821      	ldr	r1, [r4, #0]
 8008322:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8008324:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8008326:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8008328:	686a      	ldr	r2, [r5, #4]
 800832a:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800832c:	68aa      	ldr	r2, [r5, #8]
 800832e:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8008330:	680a      	ldr	r2, [r1, #0]
 8008332:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8008336:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8008338:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800833a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800833e:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8008340:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 8008342:	68ea      	ldr	r2, [r5, #12]
 8008344:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8008348:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800834c:	f7ff fda6 	bl	8007e9c <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8008350:	9b03      	ldr	r3, [sp, #12]
 8008352:	463a      	mov	r2, r7
 8008354:	2108      	movs	r1, #8
 8008356:	4620      	mov	r0, r4
 8008358:	9600      	str	r6, [sp, #0]
 800835a:	f7ff fe4f 	bl	8007ffc <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800835e:	b920      	cbnz	r0, 800836a <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8008360:	6823      	ldr	r3, [r4, #0]
 8008362:	2208      	movs	r2, #8
 8008364:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8008366:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800836a:	2300      	movs	r3, #0
 800836c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8008370:	b004      	add	sp, #16
 8008372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 8008376:	2002      	movs	r0, #2
 8008378:	e7f7      	b.n	800836a <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 800837a:	2002      	movs	r0, #2
 800837c:	e7f8      	b.n	8008370 <HAL_QSPI_AutoPolling+0x92>

0800837e <HAL_QSPI_MemoryMapped>:
{
 800837e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008380:	4604      	mov	r4, r0
 8008382:	4616      	mov	r6, r2
 8008384:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8008386:	f7fd ff65 	bl	8006254 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800838a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800838e:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8008390:	2a01      	cmp	r2, #1
 8008392:	d033      	beq.n	80083fc <HAL_QSPI_MemoryMapped+0x7e>
 8008394:	2201      	movs	r2, #1
 8008396:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800839a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800839e:	2a01      	cmp	r2, #1
 80083a0:	d12a      	bne.n	80083f8 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80083a2:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80083a4:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80083a6:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80083a8:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80083aa:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80083ae:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80083b0:	9100      	str	r1, [sp, #0]
 80083b2:	2120      	movs	r1, #32
 80083b4:	f7ff fe22 	bl	8007ffc <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80083b8:	4605      	mov	r5, r0
 80083ba:	b9b8      	cbnz	r0, 80083ec <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80083bc:	6823      	ldr	r3, [r4, #0]
 80083be:	6872      	ldr	r2, [r6, #4]
 80083c0:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80083c2:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80083c4:	f020 0008 	bic.w	r0, r0, #8
 80083c8:	ea40 0002 	orr.w	r0, r0, r2
 80083cc:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80083ce:	d107      	bne.n	80083e0 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 80083d0:	6832      	ldr	r2, [r6, #0]
 80083d2:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 80083d4:	2210      	movs	r2, #16
 80083d6:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80083de:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 80083e0:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80083e4:	4639      	mov	r1, r7
 80083e6:	4620      	mov	r0, r4
 80083e8:	f7ff fd58 	bl	8007e9c <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 80083ec:	2300      	movs	r3, #0
 80083ee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80083f2:	4628      	mov	r0, r5
 80083f4:	b003      	add	sp, #12
 80083f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 80083f8:	2502      	movs	r5, #2
 80083fa:	e7f7      	b.n	80083ec <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 80083fc:	2502      	movs	r5, #2
 80083fe:	e7f8      	b.n	80083f2 <HAL_QSPI_MemoryMapped+0x74>

08008400 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008402:	4604      	mov	r4, r0
 8008404:	b908      	cbnz	r0, 800840a <HAL_RCC_OscConfig+0xa>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 8008406:	2001      	movs	r0, #1
 8008408:	e08b      	b.n	8008522 <HAL_RCC_OscConfig+0x122>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800840a:	6803      	ldr	r3, [r0, #0]
 800840c:	07df      	lsls	r7, r3, #31
 800840e:	d45e      	bmi.n	80084ce <HAL_RCC_OscConfig+0xce>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008410:	6823      	ldr	r3, [r4, #0]
 8008412:	079e      	lsls	r6, r3, #30
 8008414:	f100 80af 	bmi.w	8008576 <HAL_RCC_OscConfig+0x176>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008418:	6823      	ldr	r3, [r4, #0]
 800841a:	06da      	lsls	r2, r3, #27
 800841c:	d527      	bpl.n	800846e <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800841e:	4b9e      	ldr	r3, [pc, #632]	; (8008698 <HAL_RCC_OscConfig+0x298>)
 8008420:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008422:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008424:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008428:	2a08      	cmp	r2, #8
 800842a:	d007      	beq.n	800843c <HAL_RCC_OscConfig+0x3c>
 800842c:	2a18      	cmp	r2, #24
 800842e:	f040 8107 	bne.w	8008640 <HAL_RCC_OscConfig+0x240>
 8008432:	f001 0203 	and.w	r2, r1, #3
 8008436:	2a01      	cmp	r2, #1
 8008438:	f040 8102 	bne.w	8008640 <HAL_RCC_OscConfig+0x240>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	05db      	lsls	r3, r3, #23
 8008440:	d502      	bpl.n	8008448 <HAL_RCC_OscConfig+0x48>
 8008442:	69e3      	ldr	r3, [r4, #28]
 8008444:	2b80      	cmp	r3, #128	; 0x80
 8008446:	d1de      	bne.n	8008406 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008448:	f7fd ff1c 	bl	8006284 <HAL_GetREVID>
 800844c:	f241 0303 	movw	r3, #4099	; 0x1003
 8008450:	6a21      	ldr	r1, [r4, #32]
 8008452:	4298      	cmp	r0, r3
 8008454:	4b90      	ldr	r3, [pc, #576]	; (8008698 <HAL_RCC_OscConfig+0x298>)
 8008456:	f200 80ec 	bhi.w	8008632 <HAL_RCC_OscConfig+0x232>
 800845a:	685a      	ldr	r2, [r3, #4]
 800845c:	2920      	cmp	r1, #32
 800845e:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 8008462:	bf0c      	ite	eq
 8008464:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 8008468:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 800846c:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800846e:	6823      	ldr	r3, [r4, #0]
 8008470:	0719      	lsls	r1, r3, #28
 8008472:	f100 8127 	bmi.w	80086c4 <HAL_RCC_OscConfig+0x2c4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008476:	6823      	ldr	r3, [r4, #0]
 8008478:	069a      	lsls	r2, r3, #26
 800847a:	f100 8148 	bmi.w	800870e <HAL_RCC_OscConfig+0x30e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800847e:	6823      	ldr	r3, [r4, #0]
 8008480:	075d      	lsls	r5, r3, #29
 8008482:	d51e      	bpl.n	80084c2 <HAL_RCC_OscConfig+0xc2>
    PWR->CR1 |= PWR_CR1_DBP;
 8008484:	4d85      	ldr	r5, [pc, #532]	; (800869c <HAL_RCC_OscConfig+0x29c>)
 8008486:	682b      	ldr	r3, [r5, #0]
 8008488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800848c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800848e:	f7fd fee1 	bl	8006254 <HAL_GetTick>
 8008492:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008494:	682b      	ldr	r3, [r5, #0]
 8008496:	05da      	lsls	r2, r3, #23
 8008498:	f140 815e 	bpl.w	8008758 <HAL_RCC_OscConfig+0x358>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800849c:	68a3      	ldr	r3, [r4, #8]
 800849e:	4d7e      	ldr	r5, [pc, #504]	; (8008698 <HAL_RCC_OscConfig+0x298>)
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	f040 8160 	bne.w	8008766 <HAL_RCC_OscConfig+0x366>
 80084a6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80084a8:	f043 0301 	orr.w	r3, r3, #1
 80084ac:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084ae:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80084b2:	f7fd fecf 	bl	8006254 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084b6:	4e78      	ldr	r6, [pc, #480]	; (8008698 <HAL_RCC_OscConfig+0x298>)
      tickstart = HAL_GetTick();
 80084b8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084ba:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80084bc:	079b      	lsls	r3, r3, #30
 80084be:	f140 8178 	bpl.w	80087b2 <HAL_RCC_OscConfig+0x3b2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80084c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80084c4:	2800      	cmp	r0, #0
 80084c6:	f040 817b 	bne.w	80087c0 <HAL_RCC_OscConfig+0x3c0>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 80084ca:	2000      	movs	r0, #0
 80084cc:	e029      	b.n	8008522 <HAL_RCC_OscConfig+0x122>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80084ce:	4b72      	ldr	r3, [pc, #456]	; (8008698 <HAL_RCC_OscConfig+0x298>)
 80084d0:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80084d2:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80084d4:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80084d8:	2a10      	cmp	r2, #16
 80084da:	d005      	beq.n	80084e8 <HAL_RCC_OscConfig+0xe8>
 80084dc:	2a18      	cmp	r2, #24
 80084de:	d10a      	bne.n	80084f6 <HAL_RCC_OscConfig+0xf6>
 80084e0:	f001 0203 	and.w	r2, r1, #3
 80084e4:	2a02      	cmp	r2, #2
 80084e6:	d106      	bne.n	80084f6 <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	039d      	lsls	r5, r3, #14
 80084ec:	d590      	bpl.n	8008410 <HAL_RCC_OscConfig+0x10>
 80084ee:	6863      	ldr	r3, [r4, #4]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d18d      	bne.n	8008410 <HAL_RCC_OscConfig+0x10>
 80084f4:	e787      	b.n	8008406 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80084f6:	6862      	ldr	r2, [r4, #4]
 80084f8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80084fc:	d112      	bne.n	8008524 <HAL_RCC_OscConfig+0x124>
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008504:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008506:	f7fd fea5 	bl	8006254 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800850a:	4e63      	ldr	r6, [pc, #396]	; (8008698 <HAL_RCC_OscConfig+0x298>)
        tickstart = HAL_GetTick();
 800850c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800850e:	6833      	ldr	r3, [r6, #0]
 8008510:	0398      	lsls	r0, r3, #14
 8008512:	f53f af7d 	bmi.w	8008410 <HAL_RCC_OscConfig+0x10>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008516:	f7fd fe9d 	bl	8006254 <HAL_GetTick>
 800851a:	1b40      	subs	r0, r0, r5
 800851c:	2864      	cmp	r0, #100	; 0x64
 800851e:	d9f6      	bls.n	800850e <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8008520:	2003      	movs	r0, #3
}
 8008522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008524:	4d5c      	ldr	r5, [pc, #368]	; (8008698 <HAL_RCC_OscConfig+0x298>)
 8008526:	682b      	ldr	r3, [r5, #0]
 8008528:	b99a      	cbnz	r2, 8008552 <HAL_RCC_OscConfig+0x152>
 800852a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800852e:	602b      	str	r3, [r5, #0]
 8008530:	682b      	ldr	r3, [r5, #0]
 8008532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008536:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008538:	f7fd fe8c 	bl	8006254 <HAL_GetTick>
 800853c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800853e:	682b      	ldr	r3, [r5, #0]
 8008540:	0399      	lsls	r1, r3, #14
 8008542:	f57f af65 	bpl.w	8008410 <HAL_RCC_OscConfig+0x10>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008546:	f7fd fe85 	bl	8006254 <HAL_GetTick>
 800854a:	1b80      	subs	r0, r0, r6
 800854c:	2864      	cmp	r0, #100	; 0x64
 800854e:	d9f6      	bls.n	800853e <HAL_RCC_OscConfig+0x13e>
 8008550:	e7e6      	b.n	8008520 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008552:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8008556:	d107      	bne.n	8008568 <HAL_RCC_OscConfig+0x168>
 8008558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800855c:	602b      	str	r3, [r5, #0]
 800855e:	682b      	ldr	r3, [r5, #0]
 8008560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008564:	602b      	str	r3, [r5, #0]
 8008566:	e7ce      	b.n	8008506 <HAL_RCC_OscConfig+0x106>
 8008568:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800856c:	602b      	str	r3, [r5, #0]
 800856e:	682b      	ldr	r3, [r5, #0]
 8008570:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008574:	e7f6      	b.n	8008564 <HAL_RCC_OscConfig+0x164>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008576:	4b48      	ldr	r3, [pc, #288]	; (8008698 <HAL_RCC_OscConfig+0x298>)
 8008578:	68e1      	ldr	r1, [r4, #12]
 800857a:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800857c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800857e:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 8008582:	d003      	beq.n	800858c <HAL_RCC_OscConfig+0x18c>
 8008584:	2a18      	cmp	r2, #24
 8008586:	d12b      	bne.n	80085e0 <HAL_RCC_OscConfig+0x1e0>
 8008588:	0782      	lsls	r2, r0, #30
 800858a:	d129      	bne.n	80085e0 <HAL_RCC_OscConfig+0x1e0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	075b      	lsls	r3, r3, #29
 8008590:	d502      	bpl.n	8008598 <HAL_RCC_OscConfig+0x198>
 8008592:	2900      	cmp	r1, #0
 8008594:	f43f af37 	beq.w	8008406 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008598:	4d3f      	ldr	r5, [pc, #252]	; (8008698 <HAL_RCC_OscConfig+0x298>)
 800859a:	682a      	ldr	r2, [r5, #0]
 800859c:	f022 0219 	bic.w	r2, r2, #25
 80085a0:	430a      	orrs	r2, r1
 80085a2:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 80085a4:	f7fd fe56 	bl	8006254 <HAL_GetTick>
 80085a8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085aa:	682b      	ldr	r3, [r5, #0]
 80085ac:	075f      	lsls	r7, r3, #29
 80085ae:	d511      	bpl.n	80085d4 <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085b0:	f7fd fe68 	bl	8006284 <HAL_GetREVID>
 80085b4:	f241 0303 	movw	r3, #4099	; 0x1003
 80085b8:	6922      	ldr	r2, [r4, #16]
 80085ba:	4298      	cmp	r0, r3
 80085bc:	686b      	ldr	r3, [r5, #4]
 80085be:	d822      	bhi.n	8008606 <HAL_RCC_OscConfig+0x206>
 80085c0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80085c4:	2a40      	cmp	r2, #64	; 0x40
 80085c6:	bf0c      	ite	eq
 80085c8:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 80085cc:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 80085d0:	606b      	str	r3, [r5, #4]
 80085d2:	e721      	b.n	8008418 <HAL_RCC_OscConfig+0x18>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085d4:	f7fd fe3e 	bl	8006254 <HAL_GetTick>
 80085d8:	1b80      	subs	r0, r0, r6
 80085da:	2802      	cmp	r0, #2
 80085dc:	d9e5      	bls.n	80085aa <HAL_RCC_OscConfig+0x1aa>
 80085de:	e79f      	b.n	8008520 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80085e0:	681a      	ldr	r2, [r3, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80085e2:	b1a9      	cbz	r1, 8008610 <HAL_RCC_OscConfig+0x210>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80085e4:	f022 0219 	bic.w	r2, r2, #25
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085e8:	4d2b      	ldr	r5, [pc, #172]	; (8008698 <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80085ea:	430a      	orrs	r2, r1
 80085ec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80085ee:	f7fd fe31 	bl	8006254 <HAL_GetTick>
 80085f2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085f4:	682b      	ldr	r3, [r5, #0]
 80085f6:	0758      	lsls	r0, r3, #29
 80085f8:	d4da      	bmi.n	80085b0 <HAL_RCC_OscConfig+0x1b0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085fa:	f7fd fe2b 	bl	8006254 <HAL_GetTick>
 80085fe:	1b80      	subs	r0, r0, r6
 8008600:	2802      	cmp	r0, #2
 8008602:	d9f7      	bls.n	80085f4 <HAL_RCC_OscConfig+0x1f4>
 8008604:	e78c      	b.n	8008520 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008606:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800860a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800860e:	e7df      	b.n	80085d0 <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_HSI_DISABLE();
 8008610:	f022 0201 	bic.w	r2, r2, #1
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008614:	4e20      	ldr	r6, [pc, #128]	; (8008698 <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_HSI_DISABLE();
 8008616:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008618:	f7fd fe1c 	bl	8006254 <HAL_GetTick>
 800861c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800861e:	6833      	ldr	r3, [r6, #0]
 8008620:	0759      	lsls	r1, r3, #29
 8008622:	f57f aef9 	bpl.w	8008418 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008626:	f7fd fe15 	bl	8006254 <HAL_GetTick>
 800862a:	1b40      	subs	r0, r0, r5
 800862c:	2802      	cmp	r0, #2
 800862e:	d9f6      	bls.n	800861e <HAL_RCC_OscConfig+0x21e>
 8008630:	e776      	b.n	8008520 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008632:	68da      	ldr	r2, [r3, #12]
 8008634:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 8008638:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800863c:	60da      	str	r2, [r3, #12]
 800863e:	e716      	b.n	800846e <HAL_RCC_OscConfig+0x6e>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008640:	69e2      	ldr	r2, [r4, #28]
 8008642:	b36a      	cbz	r2, 80086a0 <HAL_RCC_OscConfig+0x2a0>
        __HAL_RCC_CSI_ENABLE();
 8008644:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008646:	4d14      	ldr	r5, [pc, #80]	; (8008698 <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_CSI_ENABLE();
 8008648:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800864c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800864e:	f7fd fe01 	bl	8006254 <HAL_GetTick>
 8008652:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008654:	682b      	ldr	r3, [r5, #0]
 8008656:	05df      	lsls	r7, r3, #23
 8008658:	d511      	bpl.n	800867e <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800865a:	f7fd fe13 	bl	8006284 <HAL_GetREVID>
 800865e:	f241 0303 	movw	r3, #4099	; 0x1003
 8008662:	6a22      	ldr	r2, [r4, #32]
 8008664:	4298      	cmp	r0, r3
 8008666:	d810      	bhi.n	800868a <HAL_RCC_OscConfig+0x28a>
 8008668:	686b      	ldr	r3, [r5, #4]
 800866a:	2a20      	cmp	r2, #32
 800866c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008670:	bf0c      	ite	eq
 8008672:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8008676:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800867a:	606b      	str	r3, [r5, #4]
 800867c:	e6f7      	b.n	800846e <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800867e:	f7fd fde9 	bl	8006254 <HAL_GetTick>
 8008682:	1b80      	subs	r0, r0, r6
 8008684:	2802      	cmp	r0, #2
 8008686:	d9e5      	bls.n	8008654 <HAL_RCC_OscConfig+0x254>
 8008688:	e74a      	b.n	8008520 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800868a:	68eb      	ldr	r3, [r5, #12]
 800868c:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8008690:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008694:	60eb      	str	r3, [r5, #12]
 8008696:	e6ea      	b.n	800846e <HAL_RCC_OscConfig+0x6e>
 8008698:	58024400 	.word	0x58024400
 800869c:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 80086a0:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80086a2:	4e88      	ldr	r6, [pc, #544]	; (80088c4 <HAL_RCC_OscConfig+0x4c4>)
        __HAL_RCC_CSI_DISABLE();
 80086a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086a8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80086aa:	f7fd fdd3 	bl	8006254 <HAL_GetTick>
 80086ae:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80086b0:	6833      	ldr	r3, [r6, #0]
 80086b2:	05d8      	lsls	r0, r3, #23
 80086b4:	f57f aedb 	bpl.w	800846e <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80086b8:	f7fd fdcc 	bl	8006254 <HAL_GetTick>
 80086bc:	1b40      	subs	r0, r0, r5
 80086be:	2802      	cmp	r0, #2
 80086c0:	d9f6      	bls.n	80086b0 <HAL_RCC_OscConfig+0x2b0>
 80086c2:	e72d      	b.n	8008520 <HAL_RCC_OscConfig+0x120>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80086c4:	6963      	ldr	r3, [r4, #20]
 80086c6:	4d7f      	ldr	r5, [pc, #508]	; (80088c4 <HAL_RCC_OscConfig+0x4c4>)
 80086c8:	b183      	cbz	r3, 80086ec <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_LSI_ENABLE();
 80086ca:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80086cc:	f043 0301 	orr.w	r3, r3, #1
 80086d0:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80086d2:	f7fd fdbf 	bl	8006254 <HAL_GetTick>
 80086d6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80086d8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80086da:	079b      	lsls	r3, r3, #30
 80086dc:	f53f aecb 	bmi.w	8008476 <HAL_RCC_OscConfig+0x76>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80086e0:	f7fd fdb8 	bl	8006254 <HAL_GetTick>
 80086e4:	1b80      	subs	r0, r0, r6
 80086e6:	2802      	cmp	r0, #2
 80086e8:	d9f6      	bls.n	80086d8 <HAL_RCC_OscConfig+0x2d8>
 80086ea:	e719      	b.n	8008520 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_LSI_DISABLE();
 80086ec:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80086ee:	f023 0301 	bic.w	r3, r3, #1
 80086f2:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80086f4:	f7fd fdae 	bl	8006254 <HAL_GetTick>
 80086f8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80086fa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80086fc:	079f      	lsls	r7, r3, #30
 80086fe:	f57f aeba 	bpl.w	8008476 <HAL_RCC_OscConfig+0x76>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008702:	f7fd fda7 	bl	8006254 <HAL_GetTick>
 8008706:	1b80      	subs	r0, r0, r6
 8008708:	2802      	cmp	r0, #2
 800870a:	d9f6      	bls.n	80086fa <HAL_RCC_OscConfig+0x2fa>
 800870c:	e708      	b.n	8008520 <HAL_RCC_OscConfig+0x120>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800870e:	69a3      	ldr	r3, [r4, #24]
 8008710:	4d6c      	ldr	r5, [pc, #432]	; (80088c4 <HAL_RCC_OscConfig+0x4c4>)
 8008712:	b183      	cbz	r3, 8008736 <HAL_RCC_OscConfig+0x336>
      __HAL_RCC_HSI48_ENABLE();
 8008714:	682b      	ldr	r3, [r5, #0]
 8008716:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800871a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800871c:	f7fd fd9a 	bl	8006254 <HAL_GetTick>
 8008720:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008722:	682b      	ldr	r3, [r5, #0]
 8008724:	0498      	lsls	r0, r3, #18
 8008726:	f53f aeaa 	bmi.w	800847e <HAL_RCC_OscConfig+0x7e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800872a:	f7fd fd93 	bl	8006254 <HAL_GetTick>
 800872e:	1b80      	subs	r0, r0, r6
 8008730:	2802      	cmp	r0, #2
 8008732:	d9f6      	bls.n	8008722 <HAL_RCC_OscConfig+0x322>
 8008734:	e6f4      	b.n	8008520 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSI48_DISABLE();
 8008736:	682b      	ldr	r3, [r5, #0]
 8008738:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800873c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800873e:	f7fd fd89 	bl	8006254 <HAL_GetTick>
 8008742:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008744:	682b      	ldr	r3, [r5, #0]
 8008746:	0499      	lsls	r1, r3, #18
 8008748:	f57f ae99 	bpl.w	800847e <HAL_RCC_OscConfig+0x7e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800874c:	f7fd fd82 	bl	8006254 <HAL_GetTick>
 8008750:	1b80      	subs	r0, r0, r6
 8008752:	2802      	cmp	r0, #2
 8008754:	d9f6      	bls.n	8008744 <HAL_RCC_OscConfig+0x344>
 8008756:	e6e3      	b.n	8008520 <HAL_RCC_OscConfig+0x120>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008758:	f7fd fd7c 	bl	8006254 <HAL_GetTick>
 800875c:	1b80      	subs	r0, r0, r6
 800875e:	2864      	cmp	r0, #100	; 0x64
 8008760:	f67f ae98 	bls.w	8008494 <HAL_RCC_OscConfig+0x94>
 8008764:	e6dc      	b.n	8008520 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008766:	b9b3      	cbnz	r3, 8008796 <HAL_RCC_OscConfig+0x396>
 8008768:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800876a:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800876e:	f023 0301 	bic.w	r3, r3, #1
 8008772:	672b      	str	r3, [r5, #112]	; 0x70
 8008774:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008776:	f023 0304 	bic.w	r3, r3, #4
 800877a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800877c:	f7fd fd6a 	bl	8006254 <HAL_GetTick>
 8008780:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008782:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008784:	0798      	lsls	r0, r3, #30
 8008786:	f57f ae9c 	bpl.w	80084c2 <HAL_RCC_OscConfig+0xc2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800878a:	f7fd fd63 	bl	8006254 <HAL_GetTick>
 800878e:	1b80      	subs	r0, r0, r6
 8008790:	42b8      	cmp	r0, r7
 8008792:	d9f6      	bls.n	8008782 <HAL_RCC_OscConfig+0x382>
 8008794:	e6c4      	b.n	8008520 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008796:	2b05      	cmp	r3, #5
 8008798:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800879a:	d103      	bne.n	80087a4 <HAL_RCC_OscConfig+0x3a4>
 800879c:	f043 0304 	orr.w	r3, r3, #4
 80087a0:	672b      	str	r3, [r5, #112]	; 0x70
 80087a2:	e680      	b.n	80084a6 <HAL_RCC_OscConfig+0xa6>
 80087a4:	f023 0301 	bic.w	r3, r3, #1
 80087a8:	672b      	str	r3, [r5, #112]	; 0x70
 80087aa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80087ac:	f023 0304 	bic.w	r3, r3, #4
 80087b0:	e67c      	b.n	80084ac <HAL_RCC_OscConfig+0xac>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087b2:	f7fd fd4f 	bl	8006254 <HAL_GetTick>
 80087b6:	1b40      	subs	r0, r0, r5
 80087b8:	42b8      	cmp	r0, r7
 80087ba:	f67f ae7e 	bls.w	80084ba <HAL_RCC_OscConfig+0xba>
 80087be:	e6af      	b.n	8008520 <HAL_RCC_OscConfig+0x120>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80087c0:	4d40      	ldr	r5, [pc, #256]	; (80088c4 <HAL_RCC_OscConfig+0x4c4>)
 80087c2:	692b      	ldr	r3, [r5, #16]
 80087c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087c8:	2b18      	cmp	r3, #24
 80087ca:	d07d      	beq.n	80088c8 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_PLL_DISABLE();
 80087cc:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80087ce:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80087d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087d4:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80087d6:	d167      	bne.n	80088a8 <HAL_RCC_OscConfig+0x4a8>
        tickstart = HAL_GetTick();
 80087d8:	f7fd fd3c 	bl	8006254 <HAL_GetTick>
 80087dc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80087de:	682b      	ldr	r3, [r5, #0]
 80087e0:	0199      	lsls	r1, r3, #6
 80087e2:	d45b      	bmi.n	800889c <HAL_RCC_OscConfig+0x49c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80087e4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80087e6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80087e8:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 80087ec:	f023 0303 	bic.w	r3, r3, #3
 80087f0:	4313      	orrs	r3, r2
 80087f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80087f4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80087f8:	62ab      	str	r3, [r5, #40]	; 0x28
 80087fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80087fe:	3b01      	subs	r3, #1
 8008800:	3a01      	subs	r2, #1
 8008802:	025b      	lsls	r3, r3, #9
 8008804:	0412      	lsls	r2, r2, #16
 8008806:	b29b      	uxth	r3, r3
 8008808:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800880c:	4313      	orrs	r3, r2
 800880e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008810:	3a01      	subs	r2, #1
 8008812:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008816:	4313      	orrs	r3, r2
 8008818:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800881a:	3a01      	subs	r2, #1
 800881c:	0612      	lsls	r2, r2, #24
 800881e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008822:	4313      	orrs	r3, r2
 8008824:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8008826:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008828:	f023 0301 	bic.w	r3, r3, #1
 800882c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800882e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8008830:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8008832:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008836:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800883a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800883e:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008840:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008842:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008844:	f023 030c 	bic.w	r3, r3, #12
 8008848:	4313      	orrs	r3, r2
 800884a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800884c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800884e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008850:	f023 0302 	bic.w	r3, r3, #2
 8008854:	4313      	orrs	r3, r2
 8008856:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008858:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800885a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800885e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008860:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008866:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008868:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800886a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800886e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8008870:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008872:	f043 0301 	orr.w	r3, r3, #1
 8008876:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8008878:	682b      	ldr	r3, [r5, #0]
 800887a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800887e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008880:	f7fd fce8 	bl	8006254 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008884:	4d0f      	ldr	r5, [pc, #60]	; (80088c4 <HAL_RCC_OscConfig+0x4c4>)
        tickstart = HAL_GetTick();
 8008886:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008888:	682b      	ldr	r3, [r5, #0]
 800888a:	019a      	lsls	r2, r3, #6
 800888c:	f53f ae1d 	bmi.w	80084ca <HAL_RCC_OscConfig+0xca>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008890:	f7fd fce0 	bl	8006254 <HAL_GetTick>
 8008894:	1b00      	subs	r0, r0, r4
 8008896:	2802      	cmp	r0, #2
 8008898:	d9f6      	bls.n	8008888 <HAL_RCC_OscConfig+0x488>
 800889a:	e641      	b.n	8008520 <HAL_RCC_OscConfig+0x120>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800889c:	f7fd fcda 	bl	8006254 <HAL_GetTick>
 80088a0:	1b80      	subs	r0, r0, r6
 80088a2:	2802      	cmp	r0, #2
 80088a4:	d99b      	bls.n	80087de <HAL_RCC_OscConfig+0x3de>
 80088a6:	e63b      	b.n	8008520 <HAL_RCC_OscConfig+0x120>
        tickstart = HAL_GetTick();
 80088a8:	f7fd fcd4 	bl	8006254 <HAL_GetTick>
 80088ac:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80088ae:	682b      	ldr	r3, [r5, #0]
 80088b0:	019b      	lsls	r3, r3, #6
 80088b2:	f57f ae0a 	bpl.w	80084ca <HAL_RCC_OscConfig+0xca>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088b6:	f7fd fccd 	bl	8006254 <HAL_GetTick>
 80088ba:	1b00      	subs	r0, r0, r4
 80088bc:	2802      	cmp	r0, #2
 80088be:	d9f6      	bls.n	80088ae <HAL_RCC_OscConfig+0x4ae>
 80088c0:	e62e      	b.n	8008520 <HAL_RCC_OscConfig+0x120>
 80088c2:	bf00      	nop
 80088c4:	58024400 	.word	0x58024400
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088c8:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80088ca:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80088cc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088ce:	f43f ae28 	beq.w	8008522 <HAL_RCC_OscConfig+0x122>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088d2:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088d6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80088d8:	4281      	cmp	r1, r0
 80088da:	f47f ad94 	bne.w	8008406 <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80088de:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088e2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80088e4:	428a      	cmp	r2, r1
 80088e6:	f47f ad8e 	bne.w	8008406 <HAL_RCC_OscConfig+0x6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80088ea:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80088ec:	f3c3 0108 	ubfx	r1, r3, #0, #9
 80088f0:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80088f2:	4291      	cmp	r1, r2
 80088f4:	f47f ad87 	bne.w	8008406 <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80088f8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80088fa:	f3c3 2146 	ubfx	r1, r3, #9, #7
 80088fe:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008900:	4291      	cmp	r1, r2
 8008902:	f47f ad80 	bne.w	8008406 <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008906:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008908:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800890c:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800890e:	4291      	cmp	r1, r2
 8008910:	f47f ad79 	bne.w	8008406 <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008914:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008916:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800891a:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800891c:	4293      	cmp	r3, r2
 800891e:	f47f ad72 	bne.w	8008406 <HAL_RCC_OscConfig+0x6>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008922:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008924:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008926:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800892a:	429a      	cmp	r2, r3
 800892c:	f43f adcd 	beq.w	80084ca <HAL_RCC_OscConfig+0xca>
          __HAL_RCC_PLLFRACN_DISABLE();
 8008930:	4d0c      	ldr	r5, [pc, #48]	; (8008964 <HAL_RCC_OscConfig+0x564>)
 8008932:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008934:	f023 0301 	bic.w	r3, r3, #1
 8008938:	62eb      	str	r3, [r5, #44]	; 0x2c
          tickstart = HAL_GetTick();
 800893a:	f7fd fc8b 	bl	8006254 <HAL_GetTick>
 800893e:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008940:	f7fd fc88 	bl	8006254 <HAL_GetTick>
 8008944:	42b0      	cmp	r0, r6
 8008946:	d0fb      	beq.n	8008940 <HAL_RCC_OscConfig+0x540>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008948:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800894a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800894c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008950:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008954:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008958:	636b      	str	r3, [r5, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800895a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800895c:	f043 0301 	orr.w	r3, r3, #1
 8008960:	62eb      	str	r3, [r5, #44]	; 0x2c
 8008962:	e5b2      	b.n	80084ca <HAL_RCC_OscConfig+0xca>
 8008964:	58024400 	.word	0x58024400

08008968 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8008968:	b570      	push	{r4, r5, r6, lr}
 800896a:	4c23      	ldr	r4, [pc, #140]	; (80089f8 <HAL_RCC_MCOConfig+0x90>)
 800896c:	b088      	sub	sp, #32
 800896e:	460e      	mov	r6, r1
 8008970:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8008972:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  if (RCC_MCOx == RCC_MCO1)
 8008976:	b9f8      	cbnz	r0, 80089b8 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 8008978:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800897c:	f44f 7c80 	mov.w	ip, #256	; 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8008980:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 8008982:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8008986:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800898a:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 800898c:	f003 0301 	and.w	r3, r3, #1
 8008990:	9301      	str	r3, [sp, #4]
 8008992:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008994:	2302      	movs	r3, #2
 8008996:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800899a:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800899c:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80089a0:	4816      	ldr	r0, [pc, #88]	; (80089fc <HAL_RCC_MCOConfig+0x94>)
 80089a2:	f7fe fa9d 	bl	8006ee0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80089a6:	6923      	ldr	r3, [r4, #16]
 80089a8:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 80089ac:	ea43 0106 	orr.w	r1, r3, r6
 80089b0:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80089b2:	6121      	str	r1, [r4, #16]
  }
}
 80089b4:	b008      	add	sp, #32
 80089b6:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 80089b8:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089bc:	f44f 7200 	mov.w	r2, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089c0:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80089c2:	480f      	ldr	r0, [pc, #60]	; (8008a00 <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 80089c4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80089c8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80089cc:	f003 0304 	and.w	r3, r3, #4
 80089d0:	9302      	str	r3, [sp, #8]
 80089d2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089d4:	2302      	movs	r3, #2
 80089d6:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089da:	2300      	movs	r3, #0
 80089dc:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80089e0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80089e2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80089e4:	f7fe fa7c 	bl	8006ee0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80089e8:	6923      	ldr	r3, [r4, #16]
 80089ea:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80089ee:	ea43 0106 	orr.w	r1, r3, r6
 80089f2:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 80089f6:	e7dc      	b.n	80089b2 <HAL_RCC_MCOConfig+0x4a>
 80089f8:	58024400 	.word	0x58024400
 80089fc:	58020000 	.word	0x58020000
 8008a00:	58020800 	.word	0x58020800

08008a04 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a04:	4b48      	ldr	r3, [pc, #288]	; (8008b28 <HAL_RCC_GetSysClockFreq+0x124>)
 8008a06:	691a      	ldr	r2, [r3, #16]
 8008a08:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8008a0c:	2a10      	cmp	r2, #16
{
 8008a0e:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a10:	f000 8086 	beq.w	8008b20 <HAL_RCC_GetSysClockFreq+0x11c>
 8008a14:	2a18      	cmp	r2, #24
 8008a16:	d00c      	beq.n	8008a32 <HAL_RCC_GetSysClockFreq+0x2e>
 8008a18:	2a00      	cmp	r2, #0
 8008a1a:	f040 8083 	bne.w	8008b24 <HAL_RCC_GetSysClockFreq+0x120>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	4842      	ldr	r0, [pc, #264]	; (8008b2c <HAL_RCC_GetSysClockFreq+0x128>)
 8008a22:	f012 0f20 	tst.w	r2, #32
 8008a26:	d003      	beq.n	8008a30 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008a2e:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8008a30:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a32:	6a99      	ldr	r1, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008a34:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008a36:	6adc      	ldr	r4, [r3, #44]	; 0x2c
      if (pllm != 0U)
 8008a38:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008a3c:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008a40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      if (pllm != 0U)
 8008a42:	d0f5      	beq.n	8008a30 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008a44:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008a48:	f004 0401 	and.w	r4, r4, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a4c:	ee07 0a90 	vmov	s15, r0
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a50:	f001 0103 	and.w	r1, r1, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008a54:	4362      	muls	r2, r4
 8008a56:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a5a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008a5e:	2901      	cmp	r1, #1
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008a60:	ee07 2a90 	vmov	s15, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a64:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 8008a68:	d04c      	beq.n	8008b04 <HAL_RCC_GetSysClockFreq+0x100>
 8008a6a:	2902      	cmp	r1, #2
 8008a6c:	d03c      	beq.n	8008ae8 <HAL_RCC_GetSysClockFreq+0xe4>
 8008a6e:	2900      	cmp	r1, #0
 8008a70:	d148      	bne.n	8008b04 <HAL_RCC_GetSysClockFreq+0x100>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	0692      	lsls	r2, r2, #26
 8008a76:	d527      	bpl.n	8008ac8 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a78:	6819      	ldr	r1, [r3, #0]
 8008a7a:	4a2c      	ldr	r2, [pc, #176]	; (8008b2c <HAL_RCC_GetSysClockFreq+0x128>)
 8008a7c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a82:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a88:	ee07 2a10 	vmov	s14, r2
 8008a8c:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8008a90:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8008a94:	ee06 3a90 	vmov	s13, r3
 8008a98:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008a9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aa0:	ee77 7a86 	vadd.f32	s15, s15, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008aa4:	4b20      	ldr	r3, [pc, #128]	; (8008b28 <HAL_RCC_GetSysClockFreq+0x124>)
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008aa6:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aac:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008ab0:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008ab2:	ee07 3a10 	vmov	s14, r3
 8008ab6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008aba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008abe:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8008ac2:	ee17 0a90 	vmov	r0, s15
 8008ac6:	e7b3      	b.n	8008a30 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ace:	ee07 3a10 	vmov	s14, r3
 8008ad2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008ad6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ada:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008ade:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8008b30 <HAL_RCC_GetSysClockFreq+0x12c>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ae2:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008ae6:	e7dd      	b.n	8008aa4 <HAL_RCC_GetSysClockFreq+0xa0>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aee:	ee07 3a10 	vmov	s14, r3
 8008af2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008af6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008afa:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008afe:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8008b34 <HAL_RCC_GetSysClockFreq+0x130>
 8008b02:	e7ee      	b.n	8008ae2 <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b0a:	ee07 3a10 	vmov	s14, r3
 8008b0e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008b12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b16:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008b1a:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8008b38 <HAL_RCC_GetSysClockFreq+0x134>
 8008b1e:	e7e0      	b.n	8008ae2 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b20:	4806      	ldr	r0, [pc, #24]	; (8008b3c <HAL_RCC_GetSysClockFreq+0x138>)
 8008b22:	e785      	b.n	8008a30 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 8008b24:	4806      	ldr	r0, [pc, #24]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x13c>)
 8008b26:	e783      	b.n	8008a30 <HAL_RCC_GetSysClockFreq+0x2c>
 8008b28:	58024400 	.word	0x58024400
 8008b2c:	03d09000 	.word	0x03d09000
 8008b30:	4c742400 	.word	0x4c742400
 8008b34:	4bbebc20 	.word	0x4bbebc20
 8008b38:	4a742400 	.word	0x4a742400
 8008b3c:	017d7840 	.word	0x017d7840
 8008b40:	003d0900 	.word	0x003d0900

08008b44 <HAL_RCC_ClockConfig>:
{
 8008b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b48:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8008b4a:	4604      	mov	r4, r0
 8008b4c:	b910      	cbnz	r0, 8008b54 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8008b4e:	2001      	movs	r0, #1
}
 8008b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008b54:	4a88      	ldr	r2, [pc, #544]	; (8008d78 <HAL_RCC_ClockConfig+0x234>)
 8008b56:	6813      	ldr	r3, [r2, #0]
 8008b58:	f003 030f 	and.w	r3, r3, #15
 8008b5c:	428b      	cmp	r3, r1
 8008b5e:	f0c0 8093 	bcc.w	8008c88 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008b62:	6823      	ldr	r3, [r4, #0]
 8008b64:	075f      	lsls	r7, r3, #29
 8008b66:	f100 809b 	bmi.w	8008ca0 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b6a:	071e      	lsls	r6, r3, #28
 8008b6c:	d50b      	bpl.n	8008b86 <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008b6e:	4983      	ldr	r1, [pc, #524]	; (8008d7c <HAL_RCC_ClockConfig+0x238>)
 8008b70:	6966      	ldr	r6, [r4, #20]
 8008b72:	69c8      	ldr	r0, [r1, #28]
 8008b74:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8008b78:	4286      	cmp	r6, r0
 8008b7a:	d904      	bls.n	8008b86 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008b7c:	69ca      	ldr	r2, [r1, #28]
 8008b7e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008b82:	4332      	orrs	r2, r6
 8008b84:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b86:	06d8      	lsls	r0, r3, #27
 8008b88:	d50b      	bpl.n	8008ba2 <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008b8a:	497c      	ldr	r1, [pc, #496]	; (8008d7c <HAL_RCC_ClockConfig+0x238>)
 8008b8c:	69a6      	ldr	r6, [r4, #24]
 8008b8e:	69c8      	ldr	r0, [r1, #28]
 8008b90:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8008b94:	4286      	cmp	r6, r0
 8008b96:	d904      	bls.n	8008ba2 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008b98:	69ca      	ldr	r2, [r1, #28]
 8008b9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008b9e:	4332      	orrs	r2, r6
 8008ba0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008ba2:	0699      	lsls	r1, r3, #26
 8008ba4:	d50b      	bpl.n	8008bbe <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008ba6:	4975      	ldr	r1, [pc, #468]	; (8008d7c <HAL_RCC_ClockConfig+0x238>)
 8008ba8:	69e6      	ldr	r6, [r4, #28]
 8008baa:	6a08      	ldr	r0, [r1, #32]
 8008bac:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8008bb0:	4286      	cmp	r6, r0
 8008bb2:	d904      	bls.n	8008bbe <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008bb4:	6a0a      	ldr	r2, [r1, #32]
 8008bb6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008bba:	4332      	orrs	r2, r6
 8008bbc:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008bbe:	079a      	lsls	r2, r3, #30
 8008bc0:	d50b      	bpl.n	8008bda <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008bc2:	496e      	ldr	r1, [pc, #440]	; (8008d7c <HAL_RCC_ClockConfig+0x238>)
 8008bc4:	68e6      	ldr	r6, [r4, #12]
 8008bc6:	6988      	ldr	r0, [r1, #24]
 8008bc8:	f000 000f 	and.w	r0, r0, #15
 8008bcc:	4286      	cmp	r6, r0
 8008bce:	d904      	bls.n	8008bda <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008bd0:	698a      	ldr	r2, [r1, #24]
 8008bd2:	f022 020f 	bic.w	r2, r2, #15
 8008bd6:	4332      	orrs	r2, r6
 8008bd8:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008bda:	07df      	lsls	r7, r3, #31
 8008bdc:	d46e      	bmi.n	8008cbc <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008bde:	6823      	ldr	r3, [r4, #0]
 8008be0:	079e      	lsls	r6, r3, #30
 8008be2:	f100 80a1 	bmi.w	8008d28 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008be6:	4964      	ldr	r1, [pc, #400]	; (8008d78 <HAL_RCC_ClockConfig+0x234>)
 8008be8:	680a      	ldr	r2, [r1, #0]
 8008bea:	f002 020f 	and.w	r2, r2, #15
 8008bee:	42aa      	cmp	r2, r5
 8008bf0:	f200 80a8 	bhi.w	8008d44 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008bf4:	0758      	lsls	r0, r3, #29
 8008bf6:	f100 80b1 	bmi.w	8008d5c <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bfa:	0719      	lsls	r1, r3, #28
 8008bfc:	d50b      	bpl.n	8008c16 <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008bfe:	495f      	ldr	r1, [pc, #380]	; (8008d7c <HAL_RCC_ClockConfig+0x238>)
 8008c00:	6965      	ldr	r5, [r4, #20]
 8008c02:	69c8      	ldr	r0, [r1, #28]
 8008c04:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8008c08:	4285      	cmp	r5, r0
 8008c0a:	d204      	bcs.n	8008c16 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008c0c:	69ca      	ldr	r2, [r1, #28]
 8008c0e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008c12:	432a      	orrs	r2, r5
 8008c14:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c16:	06da      	lsls	r2, r3, #27
 8008c18:	d50b      	bpl.n	8008c32 <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008c1a:	4958      	ldr	r1, [pc, #352]	; (8008d7c <HAL_RCC_ClockConfig+0x238>)
 8008c1c:	69a5      	ldr	r5, [r4, #24]
 8008c1e:	69c8      	ldr	r0, [r1, #28]
 8008c20:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8008c24:	4285      	cmp	r5, r0
 8008c26:	d204      	bcs.n	8008c32 <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008c28:	69ca      	ldr	r2, [r1, #28]
 8008c2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008c2e:	432a      	orrs	r2, r5
 8008c30:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008c32:	069b      	lsls	r3, r3, #26
 8008c34:	d50b      	bpl.n	8008c4e <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008c36:	4a51      	ldr	r2, [pc, #324]	; (8008d7c <HAL_RCC_ClockConfig+0x238>)
 8008c38:	69e0      	ldr	r0, [r4, #28]
 8008c3a:	6a11      	ldr	r1, [r2, #32]
 8008c3c:	f001 0170 	and.w	r1, r1, #112	; 0x70
 8008c40:	4288      	cmp	r0, r1
 8008c42:	d204      	bcs.n	8008c4e <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008c44:	6a13      	ldr	r3, [r2, #32]
 8008c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c4a:	4303      	orrs	r3, r0
 8008c4c:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008c4e:	f7ff fed9 	bl	8008a04 <HAL_RCC_GetSysClockFreq>
 8008c52:	494a      	ldr	r1, [pc, #296]	; (8008d7c <HAL_RCC_ClockConfig+0x238>)
 8008c54:	4a4a      	ldr	r2, [pc, #296]	; (8008d80 <HAL_RCC_ClockConfig+0x23c>)
 8008c56:	698b      	ldr	r3, [r1, #24]
 8008c58:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8008c5c:	5cd3      	ldrb	r3, [r2, r3]
 8008c5e:	f003 031f 	and.w	r3, r3, #31
 8008c62:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c64:	698b      	ldr	r3, [r1, #24]
 8008c66:	f003 030f 	and.w	r3, r3, #15
 8008c6a:	5cd3      	ldrb	r3, [r2, r3]
 8008c6c:	4a45      	ldr	r2, [pc, #276]	; (8008d84 <HAL_RCC_ClockConfig+0x240>)
 8008c6e:	f003 031f 	and.w	r3, r3, #31
 8008c72:	fa20 f303 	lsr.w	r3, r0, r3
 8008c76:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8008c78:	4b43      	ldr	r3, [pc, #268]	; (8008d88 <HAL_RCC_ClockConfig+0x244>)
 8008c7a:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 8008c7c:	4b43      	ldr	r3, [pc, #268]	; (8008d8c <HAL_RCC_ClockConfig+0x248>)
}
 8008c7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8008c82:	6818      	ldr	r0, [r3, #0]
 8008c84:	f7f8 b9f8 	b.w	8001078 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c88:	6813      	ldr	r3, [r2, #0]
 8008c8a:	f023 030f 	bic.w	r3, r3, #15
 8008c8e:	430b      	orrs	r3, r1
 8008c90:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c92:	6813      	ldr	r3, [r2, #0]
 8008c94:	f003 030f 	and.w	r3, r3, #15
 8008c98:	428b      	cmp	r3, r1
 8008c9a:	f47f af58 	bne.w	8008b4e <HAL_RCC_ClockConfig+0xa>
 8008c9e:	e760      	b.n	8008b62 <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008ca0:	4936      	ldr	r1, [pc, #216]	; (8008d7c <HAL_RCC_ClockConfig+0x238>)
 8008ca2:	6926      	ldr	r6, [r4, #16]
 8008ca4:	6988      	ldr	r0, [r1, #24]
 8008ca6:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8008caa:	4286      	cmp	r6, r0
 8008cac:	f67f af5d 	bls.w	8008b6a <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008cb0:	698a      	ldr	r2, [r1, #24]
 8008cb2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008cb6:	4332      	orrs	r2, r6
 8008cb8:	618a      	str	r2, [r1, #24]
 8008cba:	e756      	b.n	8008b6a <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008cbc:	4b2f      	ldr	r3, [pc, #188]	; (8008d7c <HAL_RCC_ClockConfig+0x238>)
 8008cbe:	68a1      	ldr	r1, [r4, #8]
 8008cc0:	699a      	ldr	r2, [r3, #24]
 8008cc2:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8008cc6:	430a      	orrs	r2, r1
 8008cc8:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008cca:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ccc:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008cce:	2a02      	cmp	r2, #2
 8008cd0:	d11d      	bne.n	8008d0e <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008cd2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008cd6:	f43f af3a 	beq.w	8008b4e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008cda:	4e28      	ldr	r6, [pc, #160]	; (8008d7c <HAL_RCC_ClockConfig+0x238>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008cdc:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008ce0:	6933      	ldr	r3, [r6, #16]
 8008ce2:	f023 0307 	bic.w	r3, r3, #7
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 8008cea:	f7fd fab3 	bl	8006254 <HAL_GetTick>
 8008cee:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cf0:	6933      	ldr	r3, [r6, #16]
 8008cf2:	6862      	ldr	r2, [r4, #4]
 8008cf4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008cf8:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8008cfc:	f43f af6f 	beq.w	8008bde <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d00:	f7fd faa8 	bl	8006254 <HAL_GetTick>
 8008d04:	1bc0      	subs	r0, r0, r7
 8008d06:	4540      	cmp	r0, r8
 8008d08:	d9f2      	bls.n	8008cf0 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 8008d0a:	2003      	movs	r0, #3
 8008d0c:	e720      	b.n	8008b50 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d0e:	2a03      	cmp	r2, #3
 8008d10:	d102      	bne.n	8008d18 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d12:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008d16:	e7de      	b.n	8008cd6 <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008d18:	2a01      	cmp	r2, #1
 8008d1a:	d102      	bne.n	8008d22 <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d1c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008d20:	e7d9      	b.n	8008cd6 <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d22:	f013 0f04 	tst.w	r3, #4
 8008d26:	e7d6      	b.n	8008cd6 <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008d28:	4914      	ldr	r1, [pc, #80]	; (8008d7c <HAL_RCC_ClockConfig+0x238>)
 8008d2a:	68e6      	ldr	r6, [r4, #12]
 8008d2c:	6988      	ldr	r0, [r1, #24]
 8008d2e:	f000 000f 	and.w	r0, r0, #15
 8008d32:	4286      	cmp	r6, r0
 8008d34:	f4bf af57 	bcs.w	8008be6 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d38:	698a      	ldr	r2, [r1, #24]
 8008d3a:	f022 020f 	bic.w	r2, r2, #15
 8008d3e:	4332      	orrs	r2, r6
 8008d40:	618a      	str	r2, [r1, #24]
 8008d42:	e750      	b.n	8008be6 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d44:	680a      	ldr	r2, [r1, #0]
 8008d46:	f022 020f 	bic.w	r2, r2, #15
 8008d4a:	432a      	orrs	r2, r5
 8008d4c:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d4e:	680a      	ldr	r2, [r1, #0]
 8008d50:	f002 020f 	and.w	r2, r2, #15
 8008d54:	42aa      	cmp	r2, r5
 8008d56:	f47f aefa 	bne.w	8008b4e <HAL_RCC_ClockConfig+0xa>
 8008d5a:	e74b      	b.n	8008bf4 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008d5c:	4907      	ldr	r1, [pc, #28]	; (8008d7c <HAL_RCC_ClockConfig+0x238>)
 8008d5e:	6925      	ldr	r5, [r4, #16]
 8008d60:	6988      	ldr	r0, [r1, #24]
 8008d62:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8008d66:	4285      	cmp	r5, r0
 8008d68:	f4bf af47 	bcs.w	8008bfa <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008d6c:	698a      	ldr	r2, [r1, #24]
 8008d6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008d72:	432a      	orrs	r2, r5
 8008d74:	618a      	str	r2, [r1, #24]
 8008d76:	e740      	b.n	8008bfa <HAL_RCC_ClockConfig+0xb6>
 8008d78:	52002000 	.word	0x52002000
 8008d7c:	58024400 	.word	0x58024400
 8008d80:	080201c8 	.word	0x080201c8
 8008d84:	2400004c 	.word	0x2400004c
 8008d88:	24000048 	.word	0x24000048
 8008d8c:	24000054 	.word	0x24000054

08008d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d90:	b510      	push	{r4, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008d92:	4c0c      	ldr	r4, [pc, #48]	; (8008dc4 <HAL_RCC_GetHCLKFreq+0x34>)
 8008d94:	f7ff fe36 	bl	8008a04 <HAL_RCC_GetSysClockFreq>
 8008d98:	490b      	ldr	r1, [pc, #44]	; (8008dc8 <HAL_RCC_GetHCLKFreq+0x38>)
 8008d9a:	69a3      	ldr	r3, [r4, #24]
 8008d9c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8008da0:	5cca      	ldrb	r2, [r1, r3]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008da2:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008da4:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008da8:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008dac:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008db0:	5ccb      	ldrb	r3, [r1, r3]
 8008db2:	f003 031f 	and.w	r3, r3, #31
 8008db6:	fa22 f003 	lsr.w	r0, r2, r3
 8008dba:	4b04      	ldr	r3, [pc, #16]	; (8008dcc <HAL_RCC_GetHCLKFreq+0x3c>)
 8008dbc:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008dbe:	4b04      	ldr	r3, [pc, #16]	; (8008dd0 <HAL_RCC_GetHCLKFreq+0x40>)
 8008dc0:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8008dc2:	bd10      	pop	{r4, pc}
 8008dc4:	58024400 	.word	0x58024400
 8008dc8:	080201c8 	.word	0x080201c8
 8008dcc:	2400004c 	.word	0x2400004c
 8008dd0:	24000048 	.word	0x24000048

08008dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008dd4:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008dd6:	f7ff ffdb 	bl	8008d90 <HAL_RCC_GetHCLKFreq>
 8008dda:	4b05      	ldr	r3, [pc, #20]	; (8008df0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8008ddc:	4a05      	ldr	r2, [pc, #20]	; (8008df4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008dde:	69db      	ldr	r3, [r3, #28]
 8008de0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8008de4:	5cd3      	ldrb	r3, [r2, r3]
 8008de6:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008dea:	40d8      	lsrs	r0, r3
 8008dec:	bd08      	pop	{r3, pc}
 8008dee:	bf00      	nop
 8008df0:	58024400 	.word	0x58024400
 8008df4:	080201c8 	.word	0x080201c8

08008df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008df8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008dfa:	f7ff ffc9 	bl	8008d90 <HAL_RCC_GetHCLKFreq>
 8008dfe:	4b05      	ldr	r3, [pc, #20]	; (8008e14 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8008e00:	4a05      	ldr	r2, [pc, #20]	; (8008e18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008e02:	69db      	ldr	r3, [r3, #28]
 8008e04:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8008e08:	5cd3      	ldrb	r3, [r2, r3]
 8008e0a:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008e0e:	40d8      	lsrs	r0, r3
 8008e10:	bd08      	pop	{r3, pc}
 8008e12:	bf00      	nop
 8008e14:	58024400 	.word	0x58024400
 8008e18:	080201c8 	.word	0x080201c8

08008e1c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008e1c:	233f      	movs	r3, #63	; 0x3f
 8008e1e:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008e20:	4b11      	ldr	r3, [pc, #68]	; (8008e68 <HAL_RCC_GetClockConfig+0x4c>)
 8008e22:	691a      	ldr	r2, [r3, #16]
 8008e24:	f002 0207 	and.w	r2, r2, #7
 8008e28:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008e2a:	699a      	ldr	r2, [r3, #24]
 8008e2c:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8008e30:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008e32:	699a      	ldr	r2, [r3, #24]
 8008e34:	f002 020f 	and.w	r2, r2, #15
 8008e38:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008e3a:	699a      	ldr	r2, [r3, #24]
 8008e3c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008e40:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008e42:	69da      	ldr	r2, [r3, #28]
 8008e44:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8008e48:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008e4a:	69da      	ldr	r2, [r3, #28]
 8008e4c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8008e50:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008e52:	6a1b      	ldr	r3, [r3, #32]
 8008e54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e58:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008e5a:	4b04      	ldr	r3, [pc, #16]	; (8008e6c <HAL_RCC_GetClockConfig+0x50>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f003 030f 	and.w	r3, r3, #15
 8008e62:	600b      	str	r3, [r1, #0]
}
 8008e64:	4770      	bx	lr
 8008e66:	bf00      	nop
 8008e68:	58024400 	.word	0x58024400
 8008e6c:	52002000 	.word	0x52002000

08008e70 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008e72:	4c3a      	ldr	r4, [pc, #232]	; (8008f5c <RCCEx_PLL2_Config+0xec>)
{
 8008e74:	4606      	mov	r6, r0
 8008e76:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008e78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008e7a:	f003 0303 	and.w	r3, r3, #3
 8008e7e:	2b03      	cmp	r3, #3
 8008e80:	d069      	beq.n	8008f56 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008e82:	6823      	ldr	r3, [r4, #0]
 8008e84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008e88:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e8a:	f7fd f9e3 	bl	8006254 <HAL_GetTick>
 8008e8e:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e90:	6823      	ldr	r3, [r4, #0]
 8008e92:	011a      	lsls	r2, r3, #4
 8008e94:	d44b      	bmi.n	8008f2e <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008e96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008e98:	6832      	ldr	r2, [r6, #0]
 8008e9a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008e9e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8008ea2:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ea4:	68b3      	ldr	r3, [r6, #8]
 8008ea6:	68f2      	ldr	r2, [r6, #12]
 8008ea8:	3b01      	subs	r3, #1
 8008eaa:	3a01      	subs	r2, #1
 8008eac:	025b      	lsls	r3, r3, #9
 8008eae:	0412      	lsls	r2, r2, #16
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	6872      	ldr	r2, [r6, #4]
 8008eba:	3a01      	subs	r2, #1
 8008ebc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	6932      	ldr	r2, [r6, #16]
 8008ec4:	3a01      	subs	r2, #1
 8008ec6:	0612      	lsls	r2, r2, #24
 8008ec8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008ed0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008ed2:	6972      	ldr	r2, [r6, #20]
 8008ed4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008edc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008ede:	69b2      	ldr	r2, [r6, #24]
 8008ee0:	f023 0320 	bic.w	r3, r3, #32
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008ee8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008eea:	f023 0310 	bic.w	r3, r3, #16
 8008eee:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008ef0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008ef2:	69f2      	ldr	r2, [r6, #28]
 8008ef4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ef8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008efc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008f00:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008f02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008f04:	f043 0310 	orr.w	r3, r3, #16
 8008f08:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008f0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8008f0c:	b9b5      	cbnz	r5, 8008f3c <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008f0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008f12:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008f14:	4c11      	ldr	r4, [pc, #68]	; (8008f5c <RCCEx_PLL2_Config+0xec>)
 8008f16:	6823      	ldr	r3, [r4, #0]
 8008f18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008f1c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f1e:	f7fd f999 	bl	8006254 <HAL_GetTick>
 8008f22:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008f24:	6823      	ldr	r3, [r4, #0]
 8008f26:	011b      	lsls	r3, r3, #4
 8008f28:	d50f      	bpl.n	8008f4a <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8008f2a:	2000      	movs	r0, #0
 8008f2c:	e005      	b.n	8008f3a <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008f2e:	f7fd f991 	bl	8006254 <HAL_GetTick>
 8008f32:	1bc0      	subs	r0, r0, r7
 8008f34:	2802      	cmp	r0, #2
 8008f36:	d9ab      	bls.n	8008e90 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8008f38:	2003      	movs	r0, #3
}
 8008f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8008f3c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008f3e:	bf0c      	ite	eq
 8008f40:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008f44:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8008f48:	e7e3      	b.n	8008f12 <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008f4a:	f7fd f983 	bl	8006254 <HAL_GetTick>
 8008f4e:	1b40      	subs	r0, r0, r5
 8008f50:	2802      	cmp	r0, #2
 8008f52:	d9e7      	bls.n	8008f24 <RCCEx_PLL2_Config+0xb4>
 8008f54:	e7f0      	b.n	8008f38 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8008f56:	2001      	movs	r0, #1
 8008f58:	e7ef      	b.n	8008f3a <RCCEx_PLL2_Config+0xca>
 8008f5a:	bf00      	nop
 8008f5c:	58024400 	.word	0x58024400

08008f60 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f62:	4c3a      	ldr	r4, [pc, #232]	; (800904c <RCCEx_PLL3_Config+0xec>)
{
 8008f64:	4606      	mov	r6, r0
 8008f66:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008f6a:	f003 0303 	and.w	r3, r3, #3
 8008f6e:	2b03      	cmp	r3, #3
 8008f70:	d069      	beq.n	8009046 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008f72:	6823      	ldr	r3, [r4, #0]
 8008f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f78:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f7a:	f7fd f96b 	bl	8006254 <HAL_GetTick>
 8008f7e:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008f80:	6823      	ldr	r3, [r4, #0]
 8008f82:	009a      	lsls	r2, r3, #2
 8008f84:	d44b      	bmi.n	800901e <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008f86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008f88:	6832      	ldr	r2, [r6, #0]
 8008f8a:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8008f8e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8008f92:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f94:	68b3      	ldr	r3, [r6, #8]
 8008f96:	68f2      	ldr	r2, [r6, #12]
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	3a01      	subs	r2, #1
 8008f9c:	025b      	lsls	r3, r3, #9
 8008f9e:	0412      	lsls	r2, r2, #16
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	6872      	ldr	r2, [r6, #4]
 8008faa:	3a01      	subs	r2, #1
 8008fac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	6932      	ldr	r2, [r6, #16]
 8008fb4:	3a01      	subs	r2, #1
 8008fb6:	0612      	lsls	r2, r2, #24
 8008fb8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008fc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008fc2:	6972      	ldr	r2, [r6, #20]
 8008fc4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008fcc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008fce:	69b2      	ldr	r2, [r6, #24]
 8008fd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008fd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008fda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fde:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008fe0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008fe2:	69f2      	ldr	r2, [r6, #28]
 8008fe4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008fe8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008fec:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008ff0:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008ff2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ff8:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008ffa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8008ffc:	b9b5      	cbnz	r5, 800902c <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008ffe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009002:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009004:	4c11      	ldr	r4, [pc, #68]	; (800904c <RCCEx_PLL3_Config+0xec>)
 8009006:	6823      	ldr	r3, [r4, #0]
 8009008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800900c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800900e:	f7fd f921 	bl	8006254 <HAL_GetTick>
 8009012:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009014:	6823      	ldr	r3, [r4, #0]
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	d50f      	bpl.n	800903a <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 800901a:	2000      	movs	r0, #0
 800901c:	e005      	b.n	800902a <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800901e:	f7fd f919 	bl	8006254 <HAL_GetTick>
 8009022:	1bc0      	subs	r0, r0, r7
 8009024:	2802      	cmp	r0, #2
 8009026:	d9ab      	bls.n	8008f80 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8009028:	2003      	movs	r0, #3
}
 800902a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800902c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800902e:	bf0c      	ite	eq
 8009030:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009034:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8009038:	e7e3      	b.n	8009002 <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800903a:	f7fd f90b 	bl	8006254 <HAL_GetTick>
 800903e:	1b40      	subs	r0, r0, r5
 8009040:	2802      	cmp	r0, #2
 8009042:	d9e7      	bls.n	8009014 <RCCEx_PLL3_Config+0xb4>
 8009044:	e7f0      	b.n	8009028 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8009046:	2001      	movs	r0, #1
 8009048:	e7ef      	b.n	800902a <RCCEx_PLL3_Config+0xca>
 800904a:	bf00      	nop
 800904c:	58024400 	.word	0x58024400

08009050 <HAL_RCCEx_PeriphCLKConfig>:
{
 8009050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009054:	6803      	ldr	r3, [r0, #0]
{
 8009056:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009058:	011c      	lsls	r4, r3, #4
 800905a:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 800905e:	d509      	bpl.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x24>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8009060:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8009062:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009066:	d02e      	beq.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009068:	d813      	bhi.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x42>
 800906a:	b1f3      	cbz	r3, 80090aa <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800906c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009070:	d021      	beq.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x66>
 8009072:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009074:	682b      	ldr	r3, [r5, #0]
 8009076:	05d8      	lsls	r0, r3, #23
 8009078:	f140 8104 	bpl.w	8009284 <HAL_RCCEx_PeriphCLKConfig+0x234>
    switch (PeriphClkInit->Sai1ClockSelection)
 800907c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800907e:	2b04      	cmp	r3, #4
 8009080:	f200 80ff 	bhi.w	8009282 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8009084:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009088:	002b0024 	.word	0x002b0024
 800908c:	002900f7 	.word	0x002900f7
 8009090:	0029      	.short	0x0029
    switch (PeriphClkInit->SpdifrxClockSelection)
 8009092:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009096:	d1ec      	bne.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009098:	4aaa      	ldr	r2, [pc, #680]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800909a:	2600      	movs	r6, #0
 800909c:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 800909e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80090a0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80090a4:	430b      	orrs	r3, r1
 80090a6:	6513      	str	r3, [r2, #80]	; 0x50
 80090a8:	e7e4      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x24>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090aa:	4aa6      	ldr	r2, [pc, #664]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80090ac:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80090ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090b2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80090b4:	e7f0      	b.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x48>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80090b6:	2102      	movs	r1, #2
 80090b8:	3008      	adds	r0, #8
 80090ba:	f7ff fed9 	bl	8008e70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80090be:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 80090c0:	2800      	cmp	r0, #0
 80090c2:	d1d7      	bne.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x24>
 80090c4:	e7e8      	b.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x48>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80090c6:	2102      	movs	r1, #2
 80090c8:	3028      	adds	r0, #40	; 0x28
 80090ca:	f7ff ff49 	bl	8008f60 <RCCEx_PLL3_Config>
 80090ce:	e7f6      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x6e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090d0:	4a9c      	ldr	r2, [pc, #624]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80090d2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80090d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch (PeriphClkInit->Sai1ClockSelection)
 80090da:	4634      	mov	r4, r6
 80090dc:	e005      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090de:	2100      	movs	r1, #0
 80090e0:	f105 0008 	add.w	r0, r5, #8
 80090e4:	f7ff fec4 	bl	8008e70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80090e8:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 80090ea:	2c00      	cmp	r4, #0
 80090ec:	f040 80cc 	bne.w	8009288 <HAL_RCCEx_PeriphCLKConfig+0x238>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80090f0:	4a94      	ldr	r2, [pc, #592]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80090f2:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 80090f4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80090f6:	f023 0307 	bic.w	r3, r3, #7
 80090fa:	430b      	orrs	r3, r1
 80090fc:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80090fe:	682b      	ldr	r3, [r5, #0]
 8009100:	0599      	lsls	r1, r3, #22
 8009102:	d50d      	bpl.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    switch (PeriphClkInit->Sai23ClockSelection)
 8009104:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8009106:	2b80      	cmp	r3, #128	; 0x80
 8009108:	f000 80dc 	beq.w	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800910c:	f200 80be 	bhi.w	800928c <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8009110:	2b00      	cmp	r3, #0
 8009112:	f000 80ca 	beq.w	80092aa <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8009116:	2b40      	cmp	r3, #64	; 0x40
 8009118:	f000 80cd 	beq.w	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x266>
 800911c:	2601      	movs	r6, #1
 800911e:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009120:	682b      	ldr	r3, [r5, #0]
 8009122:	055a      	lsls	r2, r3, #21
 8009124:	d510      	bpl.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    switch (PeriphClkInit->Sai4AClockSelection)
 8009126:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 800912a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800912e:	f000 80ef 	beq.w	8009310 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8009132:	f200 80cf 	bhi.w	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8009136:	2b00      	cmp	r3, #0
 8009138:	f000 80dd 	beq.w	80092f6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800913c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009140:	f000 80df 	beq.w	8009302 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 8009144:	2601      	movs	r6, #1
 8009146:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009148:	682b      	ldr	r3, [r5, #0]
 800914a:	051b      	lsls	r3, r3, #20
 800914c:	d510      	bpl.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x120>
    switch (PeriphClkInit->Sai4BClockSelection)
 800914e:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8009152:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009156:	f000 8104 	beq.w	8009362 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800915a:	f200 80e1 	bhi.w	8009320 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800915e:	2b00      	cmp	r3, #0
 8009160:	f000 80f2 	beq.w	8009348 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8009164:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009168:	f000 80f4 	beq.w	8009354 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800916c:	2601      	movs	r6, #1
 800916e:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009170:	682b      	ldr	r3, [r5, #0]
 8009172:	019f      	lsls	r7, r3, #6
 8009174:	d50d      	bpl.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x142>
    switch (PeriphClkInit->QspiClockSelection)
 8009176:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8009178:	2b20      	cmp	r3, #32
 800917a:	f000 810c 	beq.w	8009396 <HAL_RCCEx_PeriphCLKConfig+0x346>
 800917e:	f200 80f8 	bhi.w	8009372 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8009182:	2b00      	cmp	r3, #0
 8009184:	f000 80f8 	beq.w	8009378 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8009188:	2b10      	cmp	r3, #16
 800918a:	f000 80fe 	beq.w	800938a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800918e:	2601      	movs	r6, #1
 8009190:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009192:	682b      	ldr	r3, [r5, #0]
 8009194:	04d8      	lsls	r0, r3, #19
 8009196:	d50f      	bpl.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x168>
    switch (PeriphClkInit->Spi123ClockSelection)
 8009198:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800919a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800919e:	f000 8120 	beq.w	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80091a2:	f200 8101 	bhi.w	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x358>
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f000 810e 	beq.w	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x378>
 80091ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091b0:	f000 8110 	beq.w	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80091b4:	2601      	movs	r6, #1
 80091b6:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80091b8:	682b      	ldr	r3, [r5, #0]
 80091ba:	0499      	lsls	r1, r3, #18
 80091bc:	d50f      	bpl.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x18e>
    switch (PeriphClkInit->Spi45ClockSelection)
 80091be:	6eab      	ldr	r3, [r5, #104]	; 0x68
 80091c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091c4:	f000 812e 	beq.w	8009424 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 80091c8:	f200 8113 	bhi.w	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f000 8119 	beq.w	8009404 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 80091d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091d6:	f000 811e 	beq.w	8009416 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 80091da:	2601      	movs	r6, #1
 80091dc:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80091de:	682b      	ldr	r3, [r5, #0]
 80091e0:	045a      	lsls	r2, r3, #17
 80091e2:	d510      	bpl.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch (PeriphClkInit->Spi6ClockSelection)
 80091e4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
 80091e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091ec:	f000 813c 	beq.w	8009468 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80091f0:	f200 8120 	bhi.w	8009434 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f000 8126 	beq.w	8009446 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 80091fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091fe:	f000 812c 	beq.w	800945a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8009202:	2601      	movs	r6, #1
 8009204:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8009206:	682b      	ldr	r3, [r5, #0]
 8009208:	015b      	lsls	r3, r3, #5
 800920a:	d515      	bpl.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch (PeriphClkInit->DsiClockSelection)
 800920c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800920e:	b14b      	cbz	r3, 8009224 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8009210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009214:	f040 8130 	bne.w	8009478 <HAL_RCCEx_PeriphCLKConfig+0x428>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009218:	2101      	movs	r1, #1
 800921a:	f105 0008 	add.w	r0, r5, #8
 800921e:	f7ff fe27 	bl	8008e70 <RCCEx_PLL2_Config>
 8009222:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8009224:	2c00      	cmp	r4, #0
 8009226:	f040 812a 	bne.w	800947e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800922a:	4a46      	ldr	r2, [pc, #280]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800922c:	6d29      	ldr	r1, [r5, #80]	; 0x50
 800922e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009230:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009234:	430b      	orrs	r3, r1
 8009236:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009238:	682b      	ldr	r3, [r5, #0]
 800923a:	041f      	lsls	r7, r3, #16
 800923c:	d50d      	bpl.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x20a>
    switch (PeriphClkInit->FdcanClockSelection)
 800923e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009240:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009244:	f000 811d 	beq.w	8009482 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8009248:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800924c:	f000 8127 	beq.w	800949e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8009250:	2b00      	cmp	r3, #0
 8009252:	f000 811b 	beq.w	800948c <HAL_RCCEx_PeriphCLKConfig+0x43c>
 8009256:	2601      	movs	r6, #1
 8009258:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800925a:	682b      	ldr	r3, [r5, #0]
 800925c:	01d8      	lsls	r0, r3, #7
 800925e:	f140 8135 	bpl.w	80094cc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    switch (PeriphClkInit->FmcClockSelection)
 8009262:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8009264:	2b03      	cmp	r3, #3
 8009266:	f200 8176 	bhi.w	8009556 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800926a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800926e:	0126      	.short	0x0126
 8009270:	016d0121 	.word	0x016d0121
 8009274:	0126      	.short	0x0126
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009276:	2100      	movs	r1, #0
 8009278:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800927c:	f7ff fe70 	bl	8008f60 <RCCEx_PLL3_Config>
 8009280:	e732      	b.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    switch (PeriphClkInit->Sai1ClockSelection)
 8009282:	2601      	movs	r6, #1
 8009284:	4634      	mov	r4, r6
 8009286:	e73a      	b.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0xae>
 8009288:	4626      	mov	r6, r4
 800928a:	e738      	b.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch (PeriphClkInit->Sai23ClockSelection)
 800928c:	2bc0      	cmp	r3, #192	; 0xc0
 800928e:	d003      	beq.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x248>
 8009290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009294:	f47f af42 	bne.w	800911c <HAL_RCCEx_PeriphCLKConfig+0xcc>
    if (ret == HAL_OK)
 8009298:	b9d4      	cbnz	r4, 80092d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800929a:	4a2a      	ldr	r2, [pc, #168]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800929c:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800929e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80092a0:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 80092a4:	430b      	orrs	r3, r1
 80092a6:	6513      	str	r3, [r2, #80]	; 0x50
 80092a8:	e73a      	b.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0xd0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092aa:	4a26      	ldr	r2, [pc, #152]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80092ac:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80092ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092b2:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80092b4:	e7f0      	b.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x248>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092b6:	2100      	movs	r1, #0
 80092b8:	f105 0008 	add.w	r0, r5, #8
 80092bc:	f7ff fdd8 	bl	8008e70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80092c0:	4604      	mov	r4, r0
        break;
 80092c2:	e7e9      	b.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x248>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80092c4:	2100      	movs	r1, #0
 80092c6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80092ca:	f7ff fe49 	bl	8008f60 <RCCEx_PLL3_Config>
 80092ce:	e7f7      	b.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x270>
 80092d0:	4626      	mov	r6, r4
 80092d2:	e725      	b.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    switch (PeriphClkInit->Sai4AClockSelection)
 80092d4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80092d8:	d003      	beq.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80092da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80092de:	f47f af31 	bne.w	8009144 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    if (ret == HAL_OK)
 80092e2:	b9dc      	cbnz	r4, 800931c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80092e4:	4a17      	ldr	r2, [pc, #92]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80092e6:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 80092ea:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80092ec:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80092f0:	430b      	orrs	r3, r1
 80092f2:	6593      	str	r3, [r2, #88]	; 0x58
 80092f4:	e728      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0xf8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092f6:	4a13      	ldr	r2, [pc, #76]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80092f8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80092fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092fe:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8009300:	e7ef      	b.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x292>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009302:	2100      	movs	r1, #0
 8009304:	f105 0008 	add.w	r0, r5, #8
 8009308:	f7ff fdb2 	bl	8008e70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800930c:	4604      	mov	r4, r0
        break;
 800930e:	e7e8      	b.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x292>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009310:	2100      	movs	r1, #0
 8009312:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8009316:	f7ff fe23 	bl	8008f60 <RCCEx_PLL3_Config>
 800931a:	e7f7      	b.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800931c:	4626      	mov	r6, r4
 800931e:	e713      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    switch (PeriphClkInit->Sai4BClockSelection)
 8009320:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009324:	d003      	beq.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009326:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800932a:	f47f af1f 	bne.w	800916c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    if (ret == HAL_OK)
 800932e:	b9f4      	cbnz	r4, 800936e <HAL_RCCEx_PeriphCLKConfig+0x31e>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009330:	4a04      	ldr	r2, [pc, #16]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009332:	f8d5 10b0 	ldr.w	r1, [r5, #176]	; 0xb0
 8009336:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009338:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800933c:	430b      	orrs	r3, r1
 800933e:	6593      	str	r3, [r2, #88]	; 0x58
 8009340:	e716      	b.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8009342:	bf00      	nop
 8009344:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009348:	4aa1      	ldr	r2, [pc, #644]	; (80095d0 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800934a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800934c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009350:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8009352:	e7ec      	b.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x2de>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009354:	2100      	movs	r1, #0
 8009356:	f105 0008 	add.w	r0, r5, #8
 800935a:	f7ff fd89 	bl	8008e70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800935e:	4604      	mov	r4, r0
        break;
 8009360:	e7e5      	b.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x2de>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009362:	2100      	movs	r1, #0
 8009364:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8009368:	f7ff fdfa 	bl	8008f60 <RCCEx_PLL3_Config>
 800936c:	e7f7      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x30e>
 800936e:	4626      	mov	r6, r4
 8009370:	e6fe      	b.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x120>
    switch (PeriphClkInit->QspiClockSelection)
 8009372:	2b30      	cmp	r3, #48	; 0x30
 8009374:	f47f af0b 	bne.w	800918e <HAL_RCCEx_PeriphCLKConfig+0x13e>
    if (ret == HAL_OK)
 8009378:	b9a4      	cbnz	r4, 80093a4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800937a:	4a95      	ldr	r2, [pc, #596]	; (80095d0 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800937c:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 800937e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009380:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8009384:	430b      	orrs	r3, r1
 8009386:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009388:	e703      	b.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x142>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800938a:	4a91      	ldr	r2, [pc, #580]	; (80095d0 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800938c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800938e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009392:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8009394:	e7f0      	b.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x328>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009396:	2102      	movs	r1, #2
 8009398:	f105 0008 	add.w	r0, r5, #8
 800939c:	f7ff fd68 	bl	8008e70 <RCCEx_PLL2_Config>
 80093a0:	4604      	mov	r4, r0
        break;
 80093a2:	e7e9      	b.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x328>
 80093a4:	4626      	mov	r6, r4
 80093a6:	e6f4      	b.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x142>
    switch (PeriphClkInit->Spi123ClockSelection)
 80093a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80093ac:	d003      	beq.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0x366>
 80093ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093b2:	f47f aeff 	bne.w	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x164>
    if (ret == HAL_OK)
 80093b6:	b9d4      	cbnz	r4, 80093ee <HAL_RCCEx_PeriphCLKConfig+0x39e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80093b8:	4a85      	ldr	r2, [pc, #532]	; (80095d0 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 80093ba:	6e69      	ldr	r1, [r5, #100]	; 0x64
 80093bc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80093be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093c2:	430b      	orrs	r3, r1
 80093c4:	6513      	str	r3, [r2, #80]	; 0x50
 80093c6:	e6f7      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x168>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093c8:	4a81      	ldr	r2, [pc, #516]	; (80095d0 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 80093ca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80093cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093d0:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80093d2:	e7f0      	b.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0x366>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093d4:	2100      	movs	r1, #0
 80093d6:	f105 0008 	add.w	r0, r5, #8
 80093da:	f7ff fd49 	bl	8008e70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80093de:	4604      	mov	r4, r0
        break;
 80093e0:	e7e9      	b.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0x366>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80093e2:	2100      	movs	r1, #0
 80093e4:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80093e8:	f7ff fdba 	bl	8008f60 <RCCEx_PLL3_Config>
 80093ec:	e7f7      	b.n	80093de <HAL_RCCEx_PeriphCLKConfig+0x38e>
 80093ee:	4626      	mov	r6, r4
 80093f0:	e6e2      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x168>
    switch (PeriphClkInit->Spi45ClockSelection)
 80093f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80093f6:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80093fa:	d003      	beq.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 80093fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009400:	f47f aeeb 	bne.w	80091da <HAL_RCCEx_PeriphCLKConfig+0x18a>
    if (ret == HAL_OK)
 8009404:	b9a4      	cbnz	r4, 8009430 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009406:	4a72      	ldr	r2, [pc, #456]	; (80095d0 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8009408:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 800940a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800940c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8009410:	430b      	orrs	r3, r1
 8009412:	6513      	str	r3, [r2, #80]	; 0x50
 8009414:	e6e3      	b.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x18e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009416:	2101      	movs	r1, #1
 8009418:	f105 0008 	add.w	r0, r5, #8
 800941c:	f7ff fd28 	bl	8008e70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009420:	4604      	mov	r4, r0
        break;
 8009422:	e7ef      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009424:	2101      	movs	r1, #1
 8009426:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800942a:	f7ff fd99 	bl	8008f60 <RCCEx_PLL3_Config>
 800942e:	e7f7      	b.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8009430:	4626      	mov	r6, r4
 8009432:	e6d4      	b.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x18e>
    switch (PeriphClkInit->Spi6ClockSelection)
 8009434:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009438:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800943c:	d003      	beq.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 800943e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009442:	f47f aede 	bne.w	8009202 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    if (ret == HAL_OK)
 8009446:	b9ac      	cbnz	r4, 8009474 <HAL_RCCEx_PeriphCLKConfig+0x424>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009448:	4a61      	ldr	r2, [pc, #388]	; (80095d0 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800944a:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
 800944e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009450:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8009454:	430b      	orrs	r3, r1
 8009456:	6593      	str	r3, [r2, #88]	; 0x58
 8009458:	e6d5      	b.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800945a:	2101      	movs	r1, #1
 800945c:	f105 0008 	add.w	r0, r5, #8
 8009460:	f7ff fd06 	bl	8008e70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009464:	4604      	mov	r4, r0
        break;
 8009466:	e7ee      	b.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009468:	2101      	movs	r1, #1
 800946a:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800946e:	f7ff fd77 	bl	8008f60 <RCCEx_PLL3_Config>
 8009472:	e7f7      	b.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009474:	4626      	mov	r6, r4
 8009476:	e6c6      	b.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch (PeriphClkInit->DsiClockSelection)
 8009478:	2601      	movs	r6, #1
 800947a:	4634      	mov	r4, r6
 800947c:	e6dc      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800947e:	4626      	mov	r6, r4
 8009480:	e6da      	b.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009482:	4a53      	ldr	r2, [pc, #332]	; (80095d0 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8009484:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800948a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800948c:	b974      	cbnz	r4, 80094ac <HAL_RCCEx_PeriphCLKConfig+0x45c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800948e:	4a50      	ldr	r2, [pc, #320]	; (80095d0 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8009490:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8009492:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009494:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8009498:	430b      	orrs	r3, r1
 800949a:	6513      	str	r3, [r2, #80]	; 0x50
 800949c:	e6dd      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x20a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800949e:	2101      	movs	r1, #1
 80094a0:	f105 0008 	add.w	r0, r5, #8
 80094a4:	f7ff fce4 	bl	8008e70 <RCCEx_PLL2_Config>
 80094a8:	4604      	mov	r4, r0
        break;
 80094aa:	e7ef      	b.n	800948c <HAL_RCCEx_PeriphCLKConfig+0x43c>
 80094ac:	4626      	mov	r6, r4
 80094ae:	e6d4      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x20a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094b0:	4a47      	ldr	r2, [pc, #284]	; (80095d0 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 80094b2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80094b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80094ba:	2c00      	cmp	r4, #0
 80094bc:	d14e      	bne.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80094be:	4a44      	ldr	r2, [pc, #272]	; (80095d0 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 80094c0:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80094c2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80094c4:	f023 0303 	bic.w	r3, r3, #3
 80094c8:	430b      	orrs	r3, r1
 80094ca:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80094cc:	682b      	ldr	r3, [r5, #0]
 80094ce:	0259      	lsls	r1, r3, #9
 80094d0:	d54e      	bpl.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x520>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80094d2:	4f40      	ldr	r7, [pc, #256]	; (80095d4 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094da:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80094dc:	f7fc feba 	bl	8006254 <HAL_GetTick>
 80094e0:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	05da      	lsls	r2, r3, #23
 80094e6:	d53b      	bpl.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0x510>
    if (ret == HAL_OK)
 80094e8:	2c00      	cmp	r4, #0
 80094ea:	d16f      	bne.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x57c>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80094ec:	4b38      	ldr	r3, [pc, #224]	; (80095d0 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 80094ee:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
 80094f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80094f4:	4042      	eors	r2, r0
 80094f6:	f412 7f40 	tst.w	r2, #768	; 0x300
 80094fa:	d00b      	beq.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80094fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80094fe:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009500:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8009504:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8009508:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800950a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800950c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8009510:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8009512:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009514:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8009518:	d043      	beq.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x552>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800951a:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
 800951e:	492c      	ldr	r1, [pc, #176]	; (80095d0 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8009520:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8009524:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8009528:	d14c      	bne.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x574>
 800952a:	6908      	ldr	r0, [r1, #16]
 800952c:	4a2a      	ldr	r2, [pc, #168]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800952e:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8009532:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8009536:	4302      	orrs	r2, r0
 8009538:	610a      	str	r2, [r1, #16]
 800953a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800953e:	4a24      	ldr	r2, [pc, #144]	; (80095d0 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8009540:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8009542:	430b      	orrs	r3, r1
 8009544:	6713      	str	r3, [r2, #112]	; 0x70
 8009546:	e013      	b.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x520>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009548:	2102      	movs	r1, #2
 800954a:	f105 0008 	add.w	r0, r5, #8
 800954e:	f7ff fc8f 	bl	8008e70 <RCCEx_PLL2_Config>
 8009552:	4604      	mov	r4, r0
        break;
 8009554:	e7b1      	b.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x46a>
    switch (PeriphClkInit->FmcClockSelection)
 8009556:	2601      	movs	r6, #1
 8009558:	4634      	mov	r4, r6
 800955a:	e7b7      	b.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800955c:	4626      	mov	r6, r4
 800955e:	e7b5      	b.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009560:	f7fc fe78 	bl	8006254 <HAL_GetTick>
 8009564:	eba0 0008 	sub.w	r0, r0, r8
 8009568:	2864      	cmp	r0, #100	; 0x64
 800956a:	d9ba      	bls.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x492>
        ret = HAL_TIMEOUT;
 800956c:	2603      	movs	r6, #3
 800956e:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009570:	682b      	ldr	r3, [r5, #0]
 8009572:	07d8      	lsls	r0, r3, #31
 8009574:	d50a      	bpl.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x53c>
    switch (PeriphClkInit->Usart16ClockSelection)
 8009576:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800957a:	2b10      	cmp	r3, #16
 800957c:	d045      	beq.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 800957e:	d82d      	bhi.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x58c>
 8009580:	2b00      	cmp	r3, #0
 8009582:	d031      	beq.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8009584:	2b08      	cmp	r3, #8
 8009586:	d039      	beq.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8009588:	2601      	movs	r6, #1
 800958a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800958c:	682b      	ldr	r3, [r5, #0]
 800958e:	0799      	lsls	r1, r3, #30
 8009590:	d551      	bpl.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009592:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8009594:	2b05      	cmp	r3, #5
 8009596:	d864      	bhi.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8009598:	e8df f003 	tbb	[pc, r3]
 800959c:	455d3f45 	.word	0x455d3f45
 80095a0:	4545      	.short	0x4545
        tickstart = HAL_GetTick();
 80095a2:	f7fc fe57 	bl	8006254 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80095a6:	f8df 8028 	ldr.w	r8, [pc, #40]	; 80095d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
        tickstart = HAL_GetTick();
 80095aa:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095ac:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80095b0:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80095b4:	079b      	lsls	r3, r3, #30
 80095b6:	d4b0      	bmi.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095b8:	f7fc fe4c 	bl	8006254 <HAL_GetTick>
 80095bc:	1bc0      	subs	r0, r0, r7
 80095be:	4548      	cmp	r0, r9
 80095c0:	d9f6      	bls.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x560>
 80095c2:	e7d3      	b.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x51c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80095c4:	690a      	ldr	r2, [r1, #16]
 80095c6:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80095ca:	e7b5      	b.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
 80095cc:	4626      	mov	r6, r4
 80095ce:	e7cf      	b.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80095d0:	58024400 	.word	0x58024400
 80095d4:	58024800 	.word	0x58024800
 80095d8:	00ffffcf 	.word	0x00ffffcf
    switch (PeriphClkInit->Usart16ClockSelection)
 80095dc:	f023 0208 	bic.w	r2, r3, #8
 80095e0:	2a20      	cmp	r2, #32
 80095e2:	d001      	beq.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80095e4:	2b18      	cmp	r3, #24
 80095e6:	d1cf      	bne.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0x538>
    if (ret == HAL_OK)
 80095e8:	b9ac      	cbnz	r4, 8009616 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80095ea:	4a20      	ldr	r2, [pc, #128]	; (800966c <HAL_RCCEx_PeriphCLKConfig+0x61c>)
 80095ec:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 80095f0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80095f2:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80095f6:	430b      	orrs	r3, r1
 80095f8:	6553      	str	r3, [r2, #84]	; 0x54
 80095fa:	e7c7      	b.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x53c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80095fc:	2101      	movs	r1, #1
 80095fe:	f105 0008 	add.w	r0, r5, #8
 8009602:	f7ff fc35 	bl	8008e70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009606:	4604      	mov	r4, r0
        break;
 8009608:	e7ee      	b.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x598>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800960a:	2101      	movs	r1, #1
 800960c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8009610:	f7ff fca6 	bl	8008f60 <RCCEx_PLL3_Config>
 8009614:	e7f7      	b.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
 8009616:	4626      	mov	r6, r4
 8009618:	e7b8      	b.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x53c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800961a:	2101      	movs	r1, #1
 800961c:	f105 0008 	add.w	r0, r5, #8
 8009620:	f7ff fc26 	bl	8008e70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009624:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8009626:	b9fc      	cbnz	r4, 8009668 <HAL_RCCEx_PeriphCLKConfig+0x618>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009628:	4a10      	ldr	r2, [pc, #64]	; (800966c <HAL_RCCEx_PeriphCLKConfig+0x61c>)
 800962a:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 800962c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800962e:	f023 0307 	bic.w	r3, r3, #7
 8009632:	430b      	orrs	r3, r1
 8009634:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009636:	682b      	ldr	r3, [r5, #0]
 8009638:	075a      	lsls	r2, r3, #29
 800963a:	d52a      	bpl.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x642>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800963c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8009640:	2b05      	cmp	r3, #5
 8009642:	f200 817b 	bhi.w	800993c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8009646:	e8df f013 	tbh	[pc, r3, lsl #1]
 800964a:	0019      	.short	0x0019
 800964c:	01730013 	.word	0x01730013
 8009650:	00190019 	.word	0x00190019
 8009654:	0019      	.short	0x0019
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009656:	2101      	movs	r1, #1
 8009658:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800965c:	f7ff fc80 	bl	8008f60 <RCCEx_PLL3_Config>
 8009660:	e7e0      	b.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009662:	2601      	movs	r6, #1
 8009664:	4634      	mov	r4, r6
 8009666:	e7e6      	b.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8009668:	4626      	mov	r6, r4
 800966a:	e7e4      	b.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 800966c:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009670:	2101      	movs	r1, #1
 8009672:	f105 0008 	add.w	r0, r5, #8
 8009676:	f7ff fbfb 	bl	8008e70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800967a:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800967c:	2c00      	cmp	r4, #0
 800967e:	f040 8160 	bne.w	8009942 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009682:	4aaa      	ldr	r2, [pc, #680]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8009684:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 8009688:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800968a:	f023 0307 	bic.w	r3, r3, #7
 800968e:	430b      	orrs	r3, r1
 8009690:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009692:	682b      	ldr	r3, [r5, #0]
 8009694:	069b      	lsls	r3, r3, #26
 8009696:	d510      	bpl.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0x66a>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009698:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800969c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096a0:	f000 816b 	beq.w	800997a <HAL_RCCEx_PeriphCLKConfig+0x92a>
 80096a4:	f200 814f 	bhi.w	8009946 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f000 8155 	beq.w	8009958 <HAL_RCCEx_PeriphCLKConfig+0x908>
 80096ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096b2:	f000 815b 	beq.w	800996c <HAL_RCCEx_PeriphCLKConfig+0x91c>
 80096b6:	2601      	movs	r6, #1
 80096b8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80096ba:	682b      	ldr	r3, [r5, #0]
 80096bc:	065f      	lsls	r7, r3, #25
 80096be:	d510      	bpl.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0x692>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80096c0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 80096c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096c8:	f000 8179 	beq.w	80099be <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80096cc:	f200 815d 	bhi.w	800998a <HAL_RCCEx_PeriphCLKConfig+0x93a>
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	f000 8163 	beq.w	800999c <HAL_RCCEx_PeriphCLKConfig+0x94c>
 80096d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096da:	f000 8169 	beq.w	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80096de:	2601      	movs	r6, #1
 80096e0:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80096e2:	682b      	ldr	r3, [r5, #0]
 80096e4:	0618      	lsls	r0, r3, #24
 80096e6:	d510      	bpl.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x6ba>
    switch (PeriphClkInit->Lptim345ClockSelection)
 80096e8:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 80096ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096f0:	f000 8187 	beq.w	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 80096f4:	f200 816b 	bhi.w	80099ce <HAL_RCCEx_PeriphCLKConfig+0x97e>
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	f000 8171 	beq.w	80099e0 <HAL_RCCEx_PeriphCLKConfig+0x990>
 80096fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009702:	f000 8177 	beq.w	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8009706:	2601      	movs	r6, #1
 8009708:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800970a:	682b      	ldr	r3, [r5, #0]
 800970c:	0719      	lsls	r1, r3, #28
 800970e:	d514      	bpl.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009710:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8009714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009718:	d107      	bne.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x6da>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800971a:	2102      	movs	r1, #2
 800971c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8009720:	f7ff fc1e 	bl	8008f60 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8009724:	2800      	cmp	r0, #0
 8009726:	bf18      	it	ne
 8009728:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800972a:	4a80      	ldr	r2, [pc, #512]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800972c:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 8009730:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009732:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009736:	430b      	orrs	r3, r1
 8009738:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800973a:	682b      	ldr	r3, [r5, #0]
 800973c:	06da      	lsls	r2, r3, #27
 800973e:	d514      	bpl.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x71a>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009740:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8009744:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009748:	d107      	bne.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x70a>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800974a:	2102      	movs	r1, #2
 800974c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8009750:	f7ff fc06 	bl	8008f60 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8009754:	2800      	cmp	r0, #0
 8009756:	bf18      	it	ne
 8009758:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800975a:	4a74      	ldr	r2, [pc, #464]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800975c:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 8009760:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009766:	430b      	orrs	r3, r1
 8009768:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800976a:	682b      	ldr	r3, [r5, #0]
 800976c:	031b      	lsls	r3, r3, #12
 800976e:	d51b      	bpl.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0x758>
    switch (PeriphClkInit->AdcClockSelection)
 8009770:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8009774:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8009778:	f000 814b 	beq.w	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800977c:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8009780:	d007      	beq.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0x742>
 8009782:	2900      	cmp	r1, #0
 8009784:	f040 814b 	bne.w	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x9ce>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009788:	f105 0008 	add.w	r0, r5, #8
 800978c:	f7ff fb70 	bl	8008e70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009790:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8009792:	2c00      	cmp	r4, #0
 8009794:	f040 8146 	bne.w	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009798:	4a64      	ldr	r2, [pc, #400]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800979a:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 800979e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80097a0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80097a4:	430b      	orrs	r3, r1
 80097a6:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80097a8:	682b      	ldr	r3, [r5, #0]
 80097aa:	035f      	lsls	r7, r3, #13
 80097ac:	d51c      	bpl.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x798>
    switch (PeriphClkInit->UsbClockSelection)
 80097ae:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80097b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80097b6:	f000 8137 	beq.w	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
 80097ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80097be:	d008      	beq.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x782>
 80097c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097c4:	f040 8137 	bne.w	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097c8:	4a58      	ldr	r2, [pc, #352]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 80097ca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80097cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80097d2:	2c00      	cmp	r4, #0
 80097d4:	f040 8132 	bne.w	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x9ec>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80097d8:	4a54      	ldr	r2, [pc, #336]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 80097da:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 80097de:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80097e0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80097e4:	430b      	orrs	r3, r1
 80097e6:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80097e8:	682b      	ldr	r3, [r5, #0]
 80097ea:	03d8      	lsls	r0, r3, #15
 80097ec:	d509      	bpl.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
    switch (PeriphClkInit->SdmmcClockSelection)
 80097ee:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	f000 8125 	beq.w	8009a40 <HAL_RCCEx_PeriphCLKConfig+0x9f0>
 80097f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097fa:	f000 812f 	beq.w	8009a5c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80097fe:	2601      	movs	r6, #1
 8009800:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009802:	682b      	ldr	r3, [r5, #0]
 8009804:	0099      	lsls	r1, r3, #2
 8009806:	d507      	bpl.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009808:	2102      	movs	r1, #2
 800980a:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800980e:	f7ff fba7 	bl	8008f60 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 8009812:	2800      	cmp	r0, #0
 8009814:	bf18      	it	ne
 8009816:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009818:	e9d5 3100 	ldrd	r3, r1, [r5]
 800981c:	039a      	lsls	r2, r3, #14
 800981e:	d50b      	bpl.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
    switch (PeriphClkInit->RngClockSelection)
 8009820:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
 8009824:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8009828:	f000 812f 	beq.w	8009a8a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 800982c:	f200 811f 	bhi.w	8009a6e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8009830:	2800      	cmp	r0, #0
 8009832:	f000 8122 	beq.w	8009a7a <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8009836:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009838:	02df      	lsls	r7, r3, #11
 800983a:	d506      	bpl.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800983c:	483b      	ldr	r0, [pc, #236]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800983e:	6fac      	ldr	r4, [r5, #120]	; 0x78
 8009840:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8009842:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8009846:	4322      	orrs	r2, r4
 8009848:	6502      	str	r2, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800984a:	00dc      	lsls	r4, r3, #3
 800984c:	d507      	bpl.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x80e>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800984e:	4837      	ldr	r0, [pc, #220]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8009850:	f8d5 40bc 	ldr.w	r4, [r5, #188]	; 0xbc
 8009854:	6902      	ldr	r2, [r0, #16]
 8009856:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800985a:	4322      	orrs	r2, r4
 800985c:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800985e:	0298      	lsls	r0, r3, #10
 8009860:	d506      	bpl.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x820>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009862:	4832      	ldr	r0, [pc, #200]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8009864:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 8009866:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8009868:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800986c:	4322      	orrs	r2, r4
 800986e:	6502      	str	r2, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009870:	005a      	lsls	r2, r3, #1
 8009872:	d509      	bpl.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x838>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009874:	4a2d      	ldr	r2, [pc, #180]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8009876:	6910      	ldr	r0, [r2, #16]
 8009878:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 800987c:	6110      	str	r0, [r2, #16]
 800987e:	6910      	ldr	r0, [r2, #16]
 8009880:	f8d5 40c0 	ldr.w	r4, [r5, #192]	; 0xc0
 8009884:	4320      	orrs	r0, r4
 8009886:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009888:	2b00      	cmp	r3, #0
 800988a:	da06      	bge.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x84a>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800988c:	4827      	ldr	r0, [pc, #156]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800988e:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8009890:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8009892:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009896:	4322      	orrs	r2, r4
 8009898:	64c2      	str	r2, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800989a:	021b      	lsls	r3, r3, #8
 800989c:	d507      	bpl.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0x85e>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800989e:	4a23      	ldr	r2, [pc, #140]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 80098a0:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
 80098a4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80098a6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80098aa:	4303      	orrs	r3, r0
 80098ac:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80098ae:	07cf      	lsls	r7, r1, #31
 80098b0:	d507      	bpl.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x872>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098b2:	2100      	movs	r1, #0
 80098b4:	f105 0008 	add.w	r0, r5, #8
 80098b8:	f7ff fada 	bl	8008e70 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 80098bc:	2800      	cmp	r0, #0
 80098be:	bf18      	it	ne
 80098c0:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80098c2:	686b      	ldr	r3, [r5, #4]
 80098c4:	079c      	lsls	r4, r3, #30
 80098c6:	d507      	bpl.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0x888>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80098c8:	2101      	movs	r1, #1
 80098ca:	f105 0008 	add.w	r0, r5, #8
 80098ce:	f7ff facf 	bl	8008e70 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 80098d2:	2800      	cmp	r0, #0
 80098d4:	bf18      	it	ne
 80098d6:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80098d8:	686b      	ldr	r3, [r5, #4]
 80098da:	0758      	lsls	r0, r3, #29
 80098dc:	d507      	bpl.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x89e>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80098de:	2102      	movs	r1, #2
 80098e0:	f105 0008 	add.w	r0, r5, #8
 80098e4:	f7ff fac4 	bl	8008e70 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 80098e8:	2800      	cmp	r0, #0
 80098ea:	bf18      	it	ne
 80098ec:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80098ee:	686b      	ldr	r3, [r5, #4]
 80098f0:	0719      	lsls	r1, r3, #28
 80098f2:	d507      	bpl.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80098f4:	2100      	movs	r1, #0
 80098f6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80098fa:	f7ff fb31 	bl	8008f60 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 80098fe:	2800      	cmp	r0, #0
 8009900:	bf18      	it	ne
 8009902:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009904:	686b      	ldr	r3, [r5, #4]
 8009906:	06da      	lsls	r2, r3, #27
 8009908:	d507      	bpl.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800990a:	2101      	movs	r1, #1
 800990c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8009910:	f7ff fb26 	bl	8008f60 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8009914:	2800      	cmp	r0, #0
 8009916:	bf18      	it	ne
 8009918:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800991a:	686b      	ldr	r3, [r5, #4]
 800991c:	069b      	lsls	r3, r3, #26
 800991e:	f100 80bc 	bmi.w	8009a9a <HAL_RCCEx_PeriphCLKConfig+0xa4a>
    return HAL_OK;
 8009922:	1e30      	subs	r0, r6, #0
 8009924:	bf18      	it	ne
 8009926:	2001      	movne	r0, #1
}
 8009928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800992c:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009930:	2101      	movs	r1, #1
 8009932:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8009936:	f7ff fb13 	bl	8008f60 <RCCEx_PLL3_Config>
 800993a:	e69e      	b.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800993c:	2601      	movs	r6, #1
 800993e:	4634      	mov	r4, r6
 8009940:	e6a7      	b.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8009942:	4626      	mov	r6, r4
 8009944:	e6a5      	b.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x642>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009946:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800994a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800994e:	d003      	beq.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x908>
 8009950:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009954:	f47f aeaf 	bne.w	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x666>
    if (ret == HAL_OK)
 8009958:	b9ac      	cbnz	r4, 8009986 <HAL_RCCEx_PeriphCLKConfig+0x936>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800995a:	4a55      	ldr	r2, [pc, #340]	; (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800995c:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 8009960:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009962:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8009966:	430b      	orrs	r3, r1
 8009968:	6553      	str	r3, [r2, #84]	; 0x54
 800996a:	e6a6      	b.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0x66a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800996c:	2100      	movs	r1, #0
 800996e:	f105 0008 	add.w	r0, r5, #8
 8009972:	f7ff fa7d 	bl	8008e70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009976:	4604      	mov	r4, r0
        break;
 8009978:	e7ee      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x908>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800997a:	2102      	movs	r1, #2
 800997c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8009980:	f7ff faee 	bl	8008f60 <RCCEx_PLL3_Config>
 8009984:	e7f7      	b.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x926>
 8009986:	4626      	mov	r6, r4
 8009988:	e697      	b.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0x66a>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800998a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800998e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8009992:	d003      	beq.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x94c>
 8009994:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009998:	f47f aea1 	bne.w	80096de <HAL_RCCEx_PeriphCLKConfig+0x68e>
    if (ret == HAL_OK)
 800999c:	b9ac      	cbnz	r4, 80099ca <HAL_RCCEx_PeriphCLKConfig+0x97a>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800999e:	4a44      	ldr	r2, [pc, #272]	; (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 80099a0:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 80099a4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80099a6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80099aa:	430b      	orrs	r3, r1
 80099ac:	6593      	str	r3, [r2, #88]	; 0x58
 80099ae:	e698      	b.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0x692>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099b0:	2100      	movs	r1, #0
 80099b2:	f105 0008 	add.w	r0, r5, #8
 80099b6:	f7ff fa5b 	bl	8008e70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80099ba:	4604      	mov	r4, r0
        break;
 80099bc:	e7ee      	b.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x94c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80099be:	2102      	movs	r1, #2
 80099c0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80099c4:	f7ff facc 	bl	8008f60 <RCCEx_PLL3_Config>
 80099c8:	e7f7      	b.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80099ca:	4626      	mov	r6, r4
 80099cc:	e689      	b.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0x692>
    switch (PeriphClkInit->Lptim345ClockSelection)
 80099ce:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80099d2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80099d6:	d003      	beq.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0x990>
 80099d8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80099dc:	f47f ae93 	bne.w	8009706 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
    if (ret == HAL_OK)
 80099e0:	b9ac      	cbnz	r4, 8009a0e <HAL_RCCEx_PeriphCLKConfig+0x9be>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80099e2:	4a33      	ldr	r2, [pc, #204]	; (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 80099e4:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 80099e8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80099ea:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80099ee:	430b      	orrs	r3, r1
 80099f0:	6593      	str	r3, [r2, #88]	; 0x58
 80099f2:	e68a      	b.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x6ba>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099f4:	2100      	movs	r1, #0
 80099f6:	f105 0008 	add.w	r0, r5, #8
 80099fa:	f7ff fa39 	bl	8008e70 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80099fe:	4604      	mov	r4, r0
        break;
 8009a00:	e7ee      	b.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0x990>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a02:	2102      	movs	r1, #2
 8009a04:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8009a08:	f7ff faaa 	bl	8008f60 <RCCEx_PLL3_Config>
 8009a0c:	e7f7      	b.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0x9ae>
 8009a0e:	4626      	mov	r6, r4
 8009a10:	e67b      	b.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x6ba>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a12:	2102      	movs	r1, #2
 8009a14:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8009a18:	f7ff faa2 	bl	8008f60 <RCCEx_PLL3_Config>
 8009a1c:	e6b8      	b.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x740>
    switch (PeriphClkInit->AdcClockSelection)
 8009a1e:	2601      	movs	r6, #1
 8009a20:	4634      	mov	r4, r6
 8009a22:	e6c1      	b.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0x758>
 8009a24:	4626      	mov	r6, r4
 8009a26:	e6bf      	b.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0x758>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a28:	2101      	movs	r1, #1
 8009a2a:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8009a2e:	f7ff fa97 	bl	8008f60 <RCCEx_PLL3_Config>
 8009a32:	4604      	mov	r4, r0
        break;
 8009a34:	e6cd      	b.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x782>
    switch (PeriphClkInit->UsbClockSelection)
 8009a36:	2601      	movs	r6, #1
 8009a38:	4634      	mov	r4, r6
 8009a3a:	e6d5      	b.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x798>
 8009a3c:	4626      	mov	r6, r4
 8009a3e:	e6d3      	b.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x798>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a40:	4a1b      	ldr	r2, [pc, #108]	; (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 8009a42:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a48:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8009a4a:	b974      	cbnz	r4, 8009a6a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009a4c:	4a18      	ldr	r2, [pc, #96]	; (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 8009a4e:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8009a50:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a56:	430b      	orrs	r3, r1
 8009a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a5a:	e6d2      	b.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009a5c:	2102      	movs	r1, #2
 8009a5e:	f105 0008 	add.w	r0, r5, #8
 8009a62:	f7ff fa05 	bl	8008e70 <RCCEx_PLL2_Config>
 8009a66:	4604      	mov	r4, r0
        break;
 8009a68:	e7ef      	b.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8009a6a:	4626      	mov	r6, r4
 8009a6c:	e6c9      	b.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
    switch (PeriphClkInit->RngClockSelection)
 8009a6e:	f420 7280 	bic.w	r2, r0, #256	; 0x100
 8009a72:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8009a76:	f47f aede 	bne.w	8009836 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    if (ret == HAL_OK)
 8009a7a:	b964      	cbnz	r4, 8009a96 <HAL_RCCEx_PeriphCLKConfig+0xa46>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009a7c:	4c0c      	ldr	r4, [pc, #48]	; (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 8009a7e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8009a80:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009a84:	4302      	orrs	r2, r0
 8009a86:	6562      	str	r2, [r4, #84]	; 0x54
 8009a88:	e6d6      	b.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a8a:	4f09      	ldr	r7, [pc, #36]	; (8009ab0 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 8009a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a8e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009a92:	62fa      	str	r2, [r7, #44]	; 0x2c
        break;
 8009a94:	e7f1      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8009a96:	4626      	mov	r6, r4
 8009a98:	e6ce      	b.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a9a:	2102      	movs	r1, #2
 8009a9c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8009aa0:	f7ff fa5e 	bl	8008f60 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	f43f af3c 	beq.w	8009922 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
  return HAL_ERROR;
 8009aaa:	2001      	movs	r0, #1
 8009aac:	e73c      	b.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 8009aae:	bf00      	nop
 8009ab0:	58024400 	.word	0x58024400

08009ab4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009ab4:	b538      	push	{r3, r4, r5, lr}
 8009ab6:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009ab8:	4604      	mov	r4, r0
 8009aba:	b1f0      	cbz	r0, 8009afa <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009abc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8009ac0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009ac4:	b91b      	cbnz	r3, 8009ace <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009ac6:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009aca:	f7f7 fa03 	bl	8000ed4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009ace:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009ad0:	1d21      	adds	r1, r4, #4
 8009ad2:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009ad4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009ad8:	f000 fa1f 	bl	8009f1a <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009adc:	6862      	ldr	r2, [r4, #4]
 8009ade:	4629      	mov	r1, r5
 8009ae0:	6820      	ldr	r0, [r4, #0]
 8009ae2:	f000 fa55 	bl	8009f90 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8009ae6:	4a06      	ldr	r2, [pc, #24]	; (8009b00 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 8009ae8:	2000      	movs	r0, #0
  __FMC_ENABLE();
 8009aea:	6813      	ldr	r3, [r2, #0]
 8009aec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009af0:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009af2:	2301      	movs	r3, #1
 8009af4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8009af8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009afa:	2001      	movs	r0, #1
 8009afc:	e7fc      	b.n	8009af8 <HAL_SDRAM_Init+0x44>
 8009afe:	bf00      	nop
 8009b00:	52004000 	.word	0x52004000

08009b04 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 8009b04:	b510      	push	{r4, lr}
 8009b06:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 8009b08:	f7f7 fa72 	bl	8000ff0 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 8009b0c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009b10:	f000 fa74 	bl	8009ffc <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 8009b14:	2000      	movs	r0, #0
 8009b16:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 8009b1a:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d

  return HAL_OK;
}
 8009b1e:	bd10      	pop	{r4, pc}

08009b20 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009b20:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009b22:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8009b26:	4605      	mov	r5, r0
 8009b28:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009b2a:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009b2c:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8009b2e:	d010      	beq.n	8009b52 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009b30:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 8009b34:	2c01      	cmp	r4, #1
 8009b36:	d110      	bne.n	8009b5a <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009b38:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009b3a:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009b3c:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009b40:	f000 fa6b 	bl	800a01a <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009b44:	6833      	ldr	r3, [r6, #0]
 8009b46:	2b02      	cmp	r3, #2
 8009b48:	d104      	bne.n	8009b54 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009b4a:	2305      	movs	r3, #5
 8009b4c:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009b50:	2000      	movs	r0, #0
}
 8009b52:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009b54:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 8009b58:	e7fa      	b.n	8009b50 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 8009b5a:	2001      	movs	r0, #1
 8009b5c:	e7f9      	b.n	8009b52 <HAL_SDRAM_SendCommand+0x32>

08009b5e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009b5e:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009b60:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8009b64:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009b66:	2b02      	cmp	r3, #2
 8009b68:	b2d8      	uxtb	r0, r3
 8009b6a:	d00d      	beq.n	8009b88 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009b6c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	b2dd      	uxtb	r5, r3
 8009b74:	d109      	bne.n	8009b8a <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009b76:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009b78:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009b7a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009b7e:	f000 fa5e 	bl	800a03e <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009b82:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009b84:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8009b88:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009b8a:	2001      	movs	r0, #1
 8009b8c:	e7fc      	b.n	8009b88 <HAL_SDRAM_ProgramRefreshRate+0x2a>

08009b8e <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009b8e:	4770      	bx	lr

08009b90 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b90:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d12f      	bne.n	8009bf8 <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b98:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b9a:	4a18      	ldr	r2, [pc, #96]	; (8009bfc <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8009b9c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ba0:	6803      	ldr	r3, [r0, #0]
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d01a      	beq.n	8009bdc <HAL_TIM_Base_Start+0x4c>
 8009ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009baa:	d017      	beq.n	8009bdc <HAL_TIM_Base_Start+0x4c>
 8009bac:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d013      	beq.n	8009bdc <HAL_TIM_Base_Start+0x4c>
 8009bb4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d00f      	beq.n	8009bdc <HAL_TIM_Base_Start+0x4c>
 8009bbc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d00b      	beq.n	8009bdc <HAL_TIM_Base_Start+0x4c>
 8009bc4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d007      	beq.n	8009bdc <HAL_TIM_Base_Start+0x4c>
 8009bcc:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d003      	beq.n	8009bdc <HAL_TIM_Base_Start+0x4c>
 8009bd4:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d107      	bne.n	8009bec <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009bdc:	6899      	ldr	r1, [r3, #8]
 8009bde:	4a08      	ldr	r2, [pc, #32]	; (8009c00 <HAL_TIM_Base_Start+0x70>)
 8009be0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009be2:	2a06      	cmp	r2, #6
 8009be4:	d006      	beq.n	8009bf4 <HAL_TIM_Base_Start+0x64>
 8009be6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8009bea:	d003      	beq.n	8009bf4 <HAL_TIM_Base_Start+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	f042 0201 	orr.w	r2, r2, #1
 8009bf2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009bf4:	2000      	movs	r0, #0
}
 8009bf6:	4770      	bx	lr
    return HAL_ERROR;
 8009bf8:	2001      	movs	r0, #1
 8009bfa:	4770      	bx	lr
 8009bfc:	40010000 	.word	0x40010000
 8009c00:	00010007 	.word	0x00010007

08009c04 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009c04:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d133      	bne.n	8009c74 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c0c:	2302      	movs	r3, #2
 8009c0e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009c12:	6803      	ldr	r3, [r0, #0]
 8009c14:	68da      	ldr	r2, [r3, #12]
 8009c16:	f042 0201 	orr.w	r2, r2, #1
 8009c1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c1c:	4a16      	ldr	r2, [pc, #88]	; (8009c78 <HAL_TIM_Base_Start_IT+0x74>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d01a      	beq.n	8009c58 <HAL_TIM_Base_Start_IT+0x54>
 8009c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c26:	d017      	beq.n	8009c58 <HAL_TIM_Base_Start_IT+0x54>
 8009c28:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d013      	beq.n	8009c58 <HAL_TIM_Base_Start_IT+0x54>
 8009c30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d00f      	beq.n	8009c58 <HAL_TIM_Base_Start_IT+0x54>
 8009c38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d00b      	beq.n	8009c58 <HAL_TIM_Base_Start_IT+0x54>
 8009c40:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d007      	beq.n	8009c58 <HAL_TIM_Base_Start_IT+0x54>
 8009c48:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d003      	beq.n	8009c58 <HAL_TIM_Base_Start_IT+0x54>
 8009c50:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d107      	bne.n	8009c68 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c58:	6899      	ldr	r1, [r3, #8]
 8009c5a:	4a08      	ldr	r2, [pc, #32]	; (8009c7c <HAL_TIM_Base_Start_IT+0x78>)
 8009c5c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c5e:	2a06      	cmp	r2, #6
 8009c60:	d006      	beq.n	8009c70 <HAL_TIM_Base_Start_IT+0x6c>
 8009c62:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8009c66:	d003      	beq.n	8009c70 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	f042 0201 	orr.w	r2, r2, #1
 8009c6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009c70:	2000      	movs	r0, #0
}
 8009c72:	4770      	bx	lr
    return HAL_ERROR;
 8009c74:	2001      	movs	r0, #1
 8009c76:	4770      	bx	lr
 8009c78:	40010000 	.word	0x40010000
 8009c7c:	00010007 	.word	0x00010007

08009c80 <HAL_TIM_OC_DelayElapsedCallback>:
 8009c80:	4770      	bx	lr

08009c82 <HAL_TIM_IC_CaptureCallback>:
 8009c82:	4770      	bx	lr

08009c84 <HAL_TIM_PWM_PulseFinishedCallback>:
 8009c84:	4770      	bx	lr

08009c86 <HAL_TIM_TriggerCallback>:
 8009c86:	4770      	bx	lr

08009c88 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c88:	6803      	ldr	r3, [r0, #0]
 8009c8a:	691a      	ldr	r2, [r3, #16]
 8009c8c:	0791      	lsls	r1, r2, #30
{
 8009c8e:	b510      	push	{r4, lr}
 8009c90:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c92:	d50f      	bpl.n	8009cb4 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009c94:	68da      	ldr	r2, [r3, #12]
 8009c96:	0792      	lsls	r2, r2, #30
 8009c98:	d50c      	bpl.n	8009cb4 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009c9a:	f06f 0202 	mvn.w	r2, #2
 8009c9e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ca4:	699b      	ldr	r3, [r3, #24]
 8009ca6:	0799      	lsls	r1, r3, #30
 8009ca8:	f000 8085 	beq.w	8009db6 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009cac:	f7ff ffe9 	bl	8009c82 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009cb4:	6823      	ldr	r3, [r4, #0]
 8009cb6:	691a      	ldr	r2, [r3, #16]
 8009cb8:	0752      	lsls	r2, r2, #29
 8009cba:	d510      	bpl.n	8009cde <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009cbc:	68da      	ldr	r2, [r3, #12]
 8009cbe:	0750      	lsls	r0, r2, #29
 8009cc0:	d50d      	bpl.n	8009cde <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009cc2:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cc6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009cca:	2202      	movs	r2, #2
 8009ccc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009cce:	699b      	ldr	r3, [r3, #24]
 8009cd0:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009cd4:	d075      	beq.n	8009dc2 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8009cd6:	f7ff ffd4 	bl	8009c82 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009cde:	6823      	ldr	r3, [r4, #0]
 8009ce0:	691a      	ldr	r2, [r3, #16]
 8009ce2:	0711      	lsls	r1, r2, #28
 8009ce4:	d50f      	bpl.n	8009d06 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009ce6:	68da      	ldr	r2, [r3, #12]
 8009ce8:	0712      	lsls	r2, r2, #28
 8009cea:	d50c      	bpl.n	8009d06 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009cec:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cf0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009cf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009cf4:	2204      	movs	r2, #4
 8009cf6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009cf8:	69db      	ldr	r3, [r3, #28]
 8009cfa:	079b      	lsls	r3, r3, #30
 8009cfc:	d067      	beq.n	8009dce <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8009cfe:	f7ff ffc0 	bl	8009c82 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d02:	2300      	movs	r3, #0
 8009d04:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009d06:	6823      	ldr	r3, [r4, #0]
 8009d08:	691a      	ldr	r2, [r3, #16]
 8009d0a:	06d0      	lsls	r0, r2, #27
 8009d0c:	d510      	bpl.n	8009d30 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009d0e:	68da      	ldr	r2, [r3, #12]
 8009d10:	06d1      	lsls	r1, r2, #27
 8009d12:	d50d      	bpl.n	8009d30 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009d14:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d18:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009d1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d1c:	2208      	movs	r2, #8
 8009d1e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d20:	69db      	ldr	r3, [r3, #28]
 8009d22:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009d26:	d058      	beq.n	8009dda <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8009d28:	f7ff ffab 	bl	8009c82 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009d30:	6823      	ldr	r3, [r4, #0]
 8009d32:	691a      	ldr	r2, [r3, #16]
 8009d34:	07d2      	lsls	r2, r2, #31
 8009d36:	d508      	bpl.n	8009d4a <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009d38:	68da      	ldr	r2, [r3, #12]
 8009d3a:	07d0      	lsls	r0, r2, #31
 8009d3c:	d505      	bpl.n	8009d4a <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009d3e:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d42:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009d44:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d46:	f7f6 ff13 	bl	8000b70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009d4a:	6823      	ldr	r3, [r4, #0]
 8009d4c:	691a      	ldr	r2, [r3, #16]
 8009d4e:	0611      	lsls	r1, r2, #24
 8009d50:	d508      	bpl.n	8009d64 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d52:	68da      	ldr	r2, [r3, #12]
 8009d54:	0612      	lsls	r2, r2, #24
 8009d56:	d505      	bpl.n	8009d64 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009d58:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d5c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009d5e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8009d60:	f000 f8d9 	bl	8009f16 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009d64:	6823      	ldr	r3, [r4, #0]
 8009d66:	691a      	ldr	r2, [r3, #16]
 8009d68:	05d0      	lsls	r0, r2, #23
 8009d6a:	d508      	bpl.n	8009d7e <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d6c:	68da      	ldr	r2, [r3, #12]
 8009d6e:	0611      	lsls	r1, r2, #24
 8009d70:	d505      	bpl.n	8009d7e <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009d72:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009d76:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009d78:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8009d7a:	f000 f8cd 	bl	8009f18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009d7e:	6823      	ldr	r3, [r4, #0]
 8009d80:	691a      	ldr	r2, [r3, #16]
 8009d82:	0652      	lsls	r2, r2, #25
 8009d84:	d508      	bpl.n	8009d98 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009d86:	68da      	ldr	r2, [r3, #12]
 8009d88:	0650      	lsls	r0, r2, #25
 8009d8a:	d505      	bpl.n	8009d98 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009d8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d90:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009d92:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8009d94:	f7ff ff77 	bl	8009c86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009d98:	6823      	ldr	r3, [r4, #0]
 8009d9a:	691a      	ldr	r2, [r3, #16]
 8009d9c:	0691      	lsls	r1, r2, #26
 8009d9e:	d522      	bpl.n	8009de6 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009da0:	68da      	ldr	r2, [r3, #12]
 8009da2:	0692      	lsls	r2, r2, #26
 8009da4:	d51f      	bpl.n	8009de6 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009da6:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009daa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009dac:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009dae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8009db2:	f000 b8af 	b.w	8009f14 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009db6:	f7ff ff63 	bl	8009c80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dba:	4620      	mov	r0, r4
 8009dbc:	f7ff ff62 	bl	8009c84 <HAL_TIM_PWM_PulseFinishedCallback>
 8009dc0:	e776      	b.n	8009cb0 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dc2:	f7ff ff5d 	bl	8009c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	f7ff ff5c 	bl	8009c84 <HAL_TIM_PWM_PulseFinishedCallback>
 8009dcc:	e785      	b.n	8009cda <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dce:	f7ff ff57 	bl	8009c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	f7ff ff56 	bl	8009c84 <HAL_TIM_PWM_PulseFinishedCallback>
 8009dd8:	e793      	b.n	8009d02 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dda:	f7ff ff51 	bl	8009c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dde:	4620      	mov	r0, r4
 8009de0:	f7ff ff50 	bl	8009c84 <HAL_TIM_PWM_PulseFinishedCallback>
 8009de4:	e7a2      	b.n	8009d2c <HAL_TIM_IRQHandler+0xa4>
}
 8009de6:	bd10      	pop	{r4, pc}

08009de8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009de8:	4a30      	ldr	r2, [pc, #192]	; (8009eac <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8009dea:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009dec:	4290      	cmp	r0, r2
 8009dee:	d012      	beq.n	8009e16 <TIM_Base_SetConfig+0x2e>
 8009df0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009df4:	d00f      	beq.n	8009e16 <TIM_Base_SetConfig+0x2e>
 8009df6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8009dfa:	4290      	cmp	r0, r2
 8009dfc:	d00b      	beq.n	8009e16 <TIM_Base_SetConfig+0x2e>
 8009dfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009e02:	4290      	cmp	r0, r2
 8009e04:	d007      	beq.n	8009e16 <TIM_Base_SetConfig+0x2e>
 8009e06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009e0a:	4290      	cmp	r0, r2
 8009e0c:	d003      	beq.n	8009e16 <TIM_Base_SetConfig+0x2e>
 8009e0e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8009e12:	4290      	cmp	r0, r2
 8009e14:	d119      	bne.n	8009e4a <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8009e16:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009e1c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e1e:	4a23      	ldr	r2, [pc, #140]	; (8009eac <TIM_Base_SetConfig+0xc4>)
 8009e20:	4290      	cmp	r0, r2
 8009e22:	d01d      	beq.n	8009e60 <TIM_Base_SetConfig+0x78>
 8009e24:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009e28:	d01a      	beq.n	8009e60 <TIM_Base_SetConfig+0x78>
 8009e2a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8009e2e:	4290      	cmp	r0, r2
 8009e30:	d016      	beq.n	8009e60 <TIM_Base_SetConfig+0x78>
 8009e32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009e36:	4290      	cmp	r0, r2
 8009e38:	d012      	beq.n	8009e60 <TIM_Base_SetConfig+0x78>
 8009e3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009e3e:	4290      	cmp	r0, r2
 8009e40:	d00e      	beq.n	8009e60 <TIM_Base_SetConfig+0x78>
 8009e42:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8009e46:	4290      	cmp	r0, r2
 8009e48:	d00a      	beq.n	8009e60 <TIM_Base_SetConfig+0x78>
 8009e4a:	4a19      	ldr	r2, [pc, #100]	; (8009eb0 <TIM_Base_SetConfig+0xc8>)
 8009e4c:	4290      	cmp	r0, r2
 8009e4e:	d007      	beq.n	8009e60 <TIM_Base_SetConfig+0x78>
 8009e50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009e54:	4290      	cmp	r0, r2
 8009e56:	d003      	beq.n	8009e60 <TIM_Base_SetConfig+0x78>
 8009e58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009e5c:	4290      	cmp	r0, r2
 8009e5e:	d103      	bne.n	8009e68 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e64:	68ca      	ldr	r2, [r1, #12]
 8009e66:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e68:	694a      	ldr	r2, [r1, #20]
 8009e6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e6e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8009e70:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e72:	688b      	ldr	r3, [r1, #8]
 8009e74:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e76:	680b      	ldr	r3, [r1, #0]
 8009e78:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e7a:	4b0c      	ldr	r3, [pc, #48]	; (8009eac <TIM_Base_SetConfig+0xc4>)
 8009e7c:	4298      	cmp	r0, r3
 8009e7e:	d00f      	beq.n	8009ea0 <TIM_Base_SetConfig+0xb8>
 8009e80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e84:	4298      	cmp	r0, r3
 8009e86:	d00b      	beq.n	8009ea0 <TIM_Base_SetConfig+0xb8>
 8009e88:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8009e8c:	4298      	cmp	r0, r3
 8009e8e:	d007      	beq.n	8009ea0 <TIM_Base_SetConfig+0xb8>
 8009e90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e94:	4298      	cmp	r0, r3
 8009e96:	d003      	beq.n	8009ea0 <TIM_Base_SetConfig+0xb8>
 8009e98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e9c:	4298      	cmp	r0, r3
 8009e9e:	d101      	bne.n	8009ea4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ea0:	690b      	ldr	r3, [r1, #16]
 8009ea2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	6143      	str	r3, [r0, #20]
}
 8009ea8:	4770      	bx	lr
 8009eaa:	bf00      	nop
 8009eac:	40010000 	.word	0x40010000
 8009eb0:	40014000 	.word	0x40014000

08009eb4 <HAL_TIM_Base_Init>:
{
 8009eb4:	b510      	push	{r4, lr}
  if (htim == NULL)
 8009eb6:	4604      	mov	r4, r0
 8009eb8:	b350      	cbz	r0, 8009f10 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8009eba:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009ebe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009ec2:	b91b      	cbnz	r3, 8009ecc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8009ec4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8009ec8:	f7ff fe61 	bl	8009b8e <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8009ecc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ece:	6820      	ldr	r0, [r4, #0]
 8009ed0:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8009ed2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ed6:	f7ff ff87 	bl	8009de8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009eda:	2301      	movs	r3, #1
  return HAL_OK;
 8009edc:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ede:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ee2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8009ee6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8009eea:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009eee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8009ef2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ef6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009efa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009efe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009f02:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8009f06:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8009f0a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8009f0e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009f10:	2001      	movs	r0, #1
 8009f12:	e7fc      	b.n	8009f0e <HAL_TIM_Base_Init+0x5a>

08009f14 <HAL_TIMEx_CommutCallback>:
 8009f14:	4770      	bx	lr

08009f16 <HAL_TIMEx_BreakCallback>:
 8009f16:	4770      	bx	lr

08009f18 <HAL_TIMEx_Break2Callback>:
 8009f18:	4770      	bx	lr

08009f1a <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009f1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009f1e:	680a      	ldr	r2, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009f20:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 8009f24:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 8009f28:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 8009f2c:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 8009f30:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 8009f34:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009f36:	b9a2      	cbnz	r2, 8009f62 <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009f38:	ea43 0209 	orr.w	r2, r3, r9
 8009f3c:	6801      	ldr	r1, [r0, #0]
 8009f3e:	432a      	orrs	r2, r5
 8009f40:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8009f44:	ea42 0308 	orr.w	r3, r2, r8
 8009f48:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8009f4c:	ea43 030e 	orr.w	r3, r3, lr
 8009f50:	ea43 030c 	orr.w	r3, r3, ip
 8009f54:	433b      	orrs	r3, r7
 8009f56:	4333      	orrs	r3, r6
 8009f58:	430b      	orrs	r3, r1
 8009f5a:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009f62:	6802      	ldr	r2, [r0, #0]
 8009f64:	ea43 0309 	orr.w	r3, r3, r9
 8009f68:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009f70:	ea45 0308 	orr.w	r3, r5, r8
 8009f74:	6842      	ldr	r2, [r0, #4]
 8009f76:	ea43 030e 	orr.w	r3, r3, lr
 8009f7a:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8009f7e:	ea43 030c 	orr.w	r3, r3, ip
 8009f82:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8009f86:	433b      	orrs	r3, r7
 8009f88:	4333      	orrs	r3, r6
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	6043      	str	r3, [r0, #4]
 8009f8e:	e7e5      	b.n	8009f5c <FMC_SDRAM_Init+0x42>

08009f90 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009f90:	68cb      	ldr	r3, [r1, #12]
 8009f92:	f103 3cff 	add.w	ip, r3, #4294967295
 8009f96:	694b      	ldr	r3, [r1, #20]
{
 8009f98:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009f9a:	3b01      	subs	r3, #1
 8009f9c:	680f      	ldr	r7, [r1, #0]
 8009f9e:	684c      	ldr	r4, [r1, #4]
 8009fa0:	688e      	ldr	r6, [r1, #8]
 8009fa2:	051b      	lsls	r3, r3, #20
 8009fa4:	690d      	ldr	r5, [r1, #16]
 8009fa6:	3c01      	subs	r4, #1
 8009fa8:	6989      	ldr	r1, [r1, #24]
 8009faa:	3e01      	subs	r6, #1
 8009fac:	3d01      	subs	r5, #1
 8009fae:	3f01      	subs	r7, #1
 8009fb0:	3901      	subs	r1, #1
 8009fb2:	0124      	lsls	r4, r4, #4
 8009fb4:	0236      	lsls	r6, r6, #8
 8009fb6:	042d      	lsls	r5, r5, #16
 8009fb8:	0609      	lsls	r1, r1, #24
 8009fba:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8009fbe:	b95a      	cbnz	r2, 8009fd8 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009fc0:	433b      	orrs	r3, r7
 8009fc2:	6882      	ldr	r2, [r0, #8]
 8009fc4:	4323      	orrs	r3, r4
 8009fc6:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8009fca:	4333      	orrs	r3, r6
 8009fcc:	432b      	orrs	r3, r5
 8009fce:	430b      	orrs	r3, r1
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 8009fd4:	2000      	movs	r0, #0
 8009fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009fd8:	6882      	ldr	r2, [r0, #8]
 8009fda:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009fde:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8009fe2:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009fe4:	ea44 0306 	orr.w	r3, r4, r6
 8009fe8:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009fea:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009fec:	68c2      	ldr	r2, [r0, #12]
 8009fee:	432b      	orrs	r3, r5
 8009ff0:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8009ff4:	430b      	orrs	r3, r1
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	60c3      	str	r3, [r0, #12]
 8009ffa:	e7eb      	b.n	8009fd4 <FMC_SDRAM_Timing_Init+0x44>

08009ffc <FMC_SDRAM_DeInit>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 8009ffc:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 800a000:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800a004:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 800a008:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800a00c:	609a      	str	r2, [r3, #8]
  Device->SDCMR      = 0x00000000U;
 800a00e:	2300      	movs	r3, #0
 800a010:	6103      	str	r3, [r0, #16]
  Device->SDRTR      = 0x00000000U;
 800a012:	6143      	str	r3, [r0, #20]
  Device->SDSR       = 0x00000000U;
 800a014:	6183      	str	r3, [r0, #24]

  return HAL_OK;
}
 800a016:	4618      	mov	r0, r3
 800a018:	4770      	bx	lr

0800a01a <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a01a:	6902      	ldr	r2, [r0, #16]
{
 800a01c:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a01e:	e9d1 3400 	ldrd	r3, r4, [r1]
 800a022:	0d92      	lsrs	r2, r2, #22
 800a024:	4323      	orrs	r3, r4
 800a026:	68cc      	ldr	r4, [r1, #12]
 800a028:	0592      	lsls	r2, r2, #22
 800a02a:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800a02e:	4313      	orrs	r3, r2
 800a030:	688a      	ldr	r2, [r1, #8]
 800a032:	3a01      	subs	r2, #1
 800a034:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800a038:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800a03a:	2000      	movs	r0, #0
 800a03c:	bd10      	pop	{r4, pc}

0800a03e <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a03e:	6943      	ldr	r3, [r0, #20]
 800a040:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800a044:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800a048:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800a04c:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 800a04e:	2000      	movs	r0, #0
 800a050:	4770      	bx	lr

0800a052 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a052:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800a054:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a058:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a05a:	f001 fe05 	bl	800bc68 <xTaskGetSchedulerState>
 800a05e:	2801      	cmp	r0, #1
 800a060:	d003      	beq.n	800a06a <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800a062:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800a066:	f000 bbcd 	b.w	800a804 <xPortSysTickHandler>
}
 800a06a:	bd08      	pop	{r3, pc}

0800a06c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a06c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800a070:	b92b      	cbnz	r3, 800a07e <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800a072:	4b06      	ldr	r3, [pc, #24]	; (800a08c <osKernelInitialize+0x20>)
 800a074:	6818      	ldr	r0, [r3, #0]
 800a076:	b928      	cbnz	r0, 800a084 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a078:	2201      	movs	r2, #1
 800a07a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a07c:	4770      	bx	lr
    stat = osErrorISR;
 800a07e:	f06f 0005 	mvn.w	r0, #5
 800a082:	4770      	bx	lr
    } else {
      stat = osError;
 800a084:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800a088:	4770      	bx	lr
 800a08a:	bf00      	nop
 800a08c:	24005954 	.word	0x24005954

0800a090 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a090:	b510      	push	{r4, lr}
 800a092:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800a096:	b95c      	cbnz	r4, 800a0b0 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800a098:	4b08      	ldr	r3, [pc, #32]	; (800a0bc <osKernelStart+0x2c>)
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	2a01      	cmp	r2, #1
 800a09e:	d10a      	bne.n	800a0b6 <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a0a0:	4a07      	ldr	r2, [pc, #28]	; (800a0c0 <osKernelStart+0x30>)
 800a0a2:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a0a4:	2202      	movs	r2, #2
 800a0a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a0a8:	f001 fc82 	bl	800b9b0 <vTaskStartScheduler>
      stat = osOK;
 800a0ac:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800a0ae:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800a0b0:	f06f 0005 	mvn.w	r0, #5
 800a0b4:	e7fb      	b.n	800a0ae <osKernelStart+0x1e>
      stat = osError;
 800a0b6:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800a0ba:	e7f8      	b.n	800a0ae <osKernelStart+0x1e>
 800a0bc:	24005954 	.word	0x24005954
 800a0c0:	e000ed00 	.word	0xe000ed00

0800a0c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a0c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0c6:	4614      	mov	r4, r2
 800a0c8:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a0ca:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a0cc:	460b      	mov	r3, r1
  hTask = NULL;
 800a0ce:	9205      	str	r2, [sp, #20]
 800a0d0:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800a0d4:	b9d2      	cbnz	r2, 800a10c <osThreadNew+0x48>
 800a0d6:	b1c8      	cbz	r0, 800a10c <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800a0d8:	2c00      	cmp	r4, #0
 800a0da:	d02f      	beq.n	800a13c <osThreadNew+0x78>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800a0dc:	69a5      	ldr	r5, [r4, #24]
 800a0de:	2d00      	cmp	r5, #0
 800a0e0:	bf08      	it	eq
 800a0e2:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a0e4:	1e69      	subs	r1, r5, #1
 800a0e6:	46ac      	mov	ip, r5
 800a0e8:	2937      	cmp	r1, #55	; 0x37
 800a0ea:	d82b      	bhi.n	800a144 <osThreadNew+0x80>
 800a0ec:	6861      	ldr	r1, [r4, #4]
 800a0ee:	07c9      	lsls	r1, r1, #31
 800a0f0:	d428      	bmi.n	800a144 <osThreadNew+0x80>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800a0f2:	6966      	ldr	r6, [r4, #20]
 800a0f4:	b16e      	cbz	r6, 800a112 <osThreadNew+0x4e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a0f6:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800a0f8:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a0fa:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800a0fe:	b157      	cbz	r7, 800a116 <osThreadNew+0x52>
 800a100:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 800a104:	d902      	bls.n	800a10c <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a106:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a108:	b104      	cbz	r4, 800a10c <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a10a:	b9ee      	cbnz	r6, 800a148 <osThreadNew+0x84>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a10c:	9805      	ldr	r0, [sp, #20]
}
 800a10e:	b007      	add	sp, #28
 800a110:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800a112:	2280      	movs	r2, #128	; 0x80
 800a114:	e7f0      	b.n	800a0f8 <osThreadNew+0x34>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a116:	f1be 0f00 	cmp.w	lr, #0
 800a11a:	d1f7      	bne.n	800a10c <osThreadNew+0x48>
      if (mem == 0) {
 800a11c:	6924      	ldr	r4, [r4, #16]
 800a11e:	2c00      	cmp	r4, #0
 800a120:	d1f4      	bne.n	800a10c <osThreadNew+0x48>
 800a122:	460c      	mov	r4, r1
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a124:	a905      	add	r1, sp, #20
 800a126:	b292      	uxth	r2, r2
 800a128:	e9cd c100 	strd	ip, r1, [sp]
 800a12c:	4621      	mov	r1, r4
 800a12e:	f001 fade 	bl	800b6ee <xTaskCreate>
 800a132:	2801      	cmp	r0, #1
            hTask = NULL;
 800a134:	bf1c      	itt	ne
 800a136:	2300      	movne	r3, #0
 800a138:	9305      	strne	r3, [sp, #20]
 800a13a:	e7e7      	b.n	800a10c <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;
 800a13c:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800a140:	2280      	movs	r2, #128	; 0x80
 800a142:	e7ef      	b.n	800a124 <osThreadNew+0x60>
        return (NULL);
 800a144:	4610      	mov	r0, r2
 800a146:	e7e2      	b.n	800a10e <osThreadNew+0x4a>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a148:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800a14c:	9500      	str	r5, [sp, #0]
 800a14e:	f001 fa96 	bl	800b67e <xTaskCreateStatic>
 800a152:	9005      	str	r0, [sp, #20]
 800a154:	e7da      	b.n	800a10c <osThreadNew+0x48>

0800a156 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a156:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a158:	4604      	mov	r4, r0
 800a15a:	460e      	mov	r6, r1
 800a15c:	4615      	mov	r5, r2
 800a15e:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a162:	b11a      	cbz	r2, 800a16c <osSemaphoreNew+0x16>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 800a164:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800a166:	4620      	mov	r0, r4
 800a168:	b003      	add	sp, #12
 800a16a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a16c:	2800      	cmp	r0, #0
 800a16e:	d0f9      	beq.n	800a164 <osSemaphoreNew+0xe>
 800a170:	4288      	cmp	r0, r1
 800a172:	d3f7      	bcc.n	800a164 <osSemaphoreNew+0xe>
    if (attr != NULL) {
 800a174:	b1e5      	cbz	r5, 800a1b0 <osSemaphoreNew+0x5a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a176:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800a17a:	b1bb      	cbz	r3, 800a1ac <osSemaphoreNew+0x56>
 800a17c:	2f4f      	cmp	r7, #79	; 0x4f
 800a17e:	d9f1      	bls.n	800a164 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 800a180:	2801      	cmp	r0, #1
 800a182:	d12a      	bne.n	800a1da <osSemaphoreNew+0x84>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a184:	2103      	movs	r1, #3
 800a186:	9100      	str	r1, [sp, #0]
 800a188:	4611      	mov	r1, r2
 800a18a:	f000 fce3 	bl	800ab54 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800a18e:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a190:	2800      	cmp	r0, #0
 800a192:	d0e7      	beq.n	800a164 <osSemaphoreNew+0xe>
 800a194:	b1de      	cbz	r6, 800a1ce <osSemaphoreNew+0x78>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a196:	2300      	movs	r3, #0
 800a198:	461a      	mov	r2, r3
 800a19a:	4619      	mov	r1, r3
 800a19c:	f000 fd8f 	bl	800acbe <xQueueGenericSend>
 800a1a0:	2801      	cmp	r0, #1
 800a1a2:	d014      	beq.n	800a1ce <osSemaphoreNew+0x78>
            vSemaphoreDelete (hSemaphore);
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	f001 f8cb 	bl	800b340 <vQueueDelete>
 800a1aa:	e7db      	b.n	800a164 <osSemaphoreNew+0xe>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a1ac:	2f00      	cmp	r7, #0
 800a1ae:	d1d9      	bne.n	800a164 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 800a1b0:	2c01      	cmp	r4, #1
 800a1b2:	d105      	bne.n	800a1c0 <osSemaphoreNew+0x6a>
            hSemaphore = xSemaphoreCreateBinary();
 800a1b4:	2203      	movs	r2, #3
 800a1b6:	2100      	movs	r1, #0
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	f000 fd19 	bl	800abf0 <xQueueGenericCreate>
 800a1be:	e7e6      	b.n	800a18e <osSemaphoreNew+0x38>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a1c0:	4620      	mov	r0, r4
 800a1c2:	4631      	mov	r1, r6
 800a1c4:	f000 fd5d 	bl	800ac82 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800a1c8:	4604      	mov	r4, r0
 800a1ca:	2800      	cmp	r0, #0
 800a1cc:	d0ca      	beq.n	800a164 <osSemaphoreNew+0xe>
        if (attr != NULL) {
 800a1ce:	b955      	cbnz	r5, 800a1e6 <osSemaphoreNew+0x90>
        vQueueAddToRegistry (hSemaphore, name);
 800a1d0:	4629      	mov	r1, r5
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	f001 f88e 	bl	800b2f4 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800a1d8:	e7c5      	b.n	800a166 <osSemaphoreNew+0x10>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a1da:	461a      	mov	r2, r3
 800a1dc:	f000 fd2f 	bl	800ac3e <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800a1e0:	4604      	mov	r4, r0
 800a1e2:	2800      	cmp	r0, #0
 800a1e4:	d0be      	beq.n	800a164 <osSemaphoreNew+0xe>
          name = attr->name;
 800a1e6:	682d      	ldr	r5, [r5, #0]
 800a1e8:	e7f2      	b.n	800a1d0 <osSemaphoreNew+0x7a>

0800a1ea <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a1ea:	b513      	push	{r0, r1, r4, lr}
 800a1ec:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800a1ee:	b308      	cbz	r0, 800a234 <osSemaphoreAcquire+0x4a>
 800a1f0:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800a1f4:	b1b3      	cbz	r3, 800a224 <osSemaphoreAcquire+0x3a>
    if (timeout != 0U) {
 800a1f6:	b9e9      	cbnz	r1, 800a234 <osSemaphoreAcquire+0x4a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a1f8:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800a1fa:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a1fc:	f001 f82a 	bl	800b254 <xQueueReceiveFromISR>
 800a200:	2801      	cmp	r0, #1
 800a202:	d114      	bne.n	800a22e <osSemaphoreAcquire+0x44>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800a204:	9b01      	ldr	r3, [sp, #4]
 800a206:	b913      	cbnz	r3, 800a20e <osSemaphoreAcquire+0x24>
  stat = osOK;
 800a208:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800a20a:	b002      	add	sp, #8
 800a20c:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800a20e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a216:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a21a:	f3bf 8f4f 	dsb	sy
 800a21e:	f3bf 8f6f 	isb	sy
 800a222:	e7f1      	b.n	800a208 <osSemaphoreAcquire+0x1e>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a224:	f000 ff53 	bl	800b0ce <xQueueSemaphoreTake>
 800a228:	2801      	cmp	r0, #1
 800a22a:	d0ed      	beq.n	800a208 <osSemaphoreAcquire+0x1e>
      if (timeout != 0U) {
 800a22c:	b92c      	cbnz	r4, 800a23a <osSemaphoreAcquire+0x50>
        stat = osErrorResource;
 800a22e:	f06f 0002 	mvn.w	r0, #2
 800a232:	e7ea      	b.n	800a20a <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a234:	f06f 0003 	mvn.w	r0, #3
 800a238:	e7e7      	b.n	800a20a <osSemaphoreAcquire+0x20>
        stat = osErrorTimeout;
 800a23a:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800a23e:	e7e4      	b.n	800a20a <osSemaphoreAcquire+0x20>

0800a240 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a240:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800a242:	b310      	cbz	r0, 800a28a <osSemaphoreRelease+0x4a>
 800a244:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800a248:	b1b3      	cbz	r3, 800a278 <osSemaphoreRelease+0x38>
    yield = pdFALSE;
 800a24a:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a24c:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800a24e:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a250:	f000 fe4a 	bl	800aee8 <xQueueGiveFromISR>
 800a254:	2801      	cmp	r0, #1
 800a256:	d115      	bne.n	800a284 <osSemaphoreRelease+0x44>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 800a258:	9b01      	ldr	r3, [sp, #4]
 800a25a:	b913      	cbnz	r3, 800a262 <osSemaphoreRelease+0x22>
  stat = osOK;
 800a25c:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800a25e:	b002      	add	sp, #8
 800a260:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 800a262:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a26a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a26e:	f3bf 8f4f 	dsb	sy
 800a272:	f3bf 8f6f 	isb	sy
 800a276:	e7f1      	b.n	800a25c <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a278:	461a      	mov	r2, r3
 800a27a:	4619      	mov	r1, r3
 800a27c:	f000 fd1f 	bl	800acbe <xQueueGenericSend>
 800a280:	2801      	cmp	r0, #1
 800a282:	d0eb      	beq.n	800a25c <osSemaphoreRelease+0x1c>
      stat = osErrorResource;
 800a284:	f06f 0002 	mvn.w	r0, #2
 800a288:	e7e9      	b.n	800a25e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a28a:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800a28e:	e7e6      	b.n	800a25e <osSemaphoreRelease+0x1e>

0800a290 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a292:	4605      	mov	r5, r0
 800a294:	460e      	mov	r6, r1
 800a296:	4614      	mov	r4, r2
 800a298:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a29c:	b11f      	cbz	r7, 800a2a6 <osMessageQueueNew+0x16>
  hQueue = NULL;
 800a29e:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800a2a0:	4628      	mov	r0, r5
 800a2a2:	b003      	add	sp, #12
 800a2a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	d0f9      	beq.n	800a29e <osMessageQueueNew+0xe>
 800a2aa:	2900      	cmp	r1, #0
 800a2ac:	d0f7      	beq.n	800a29e <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800a2ae:	b1da      	cbz	r2, 800a2e8 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a2b0:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800a2b4:	b183      	cbz	r3, 800a2d8 <osMessageQueueNew+0x48>
 800a2b6:	2a4f      	cmp	r2, #79	; 0x4f
 800a2b8:	d9f1      	bls.n	800a29e <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a2ba:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a2bc:	2a00      	cmp	r2, #0
 800a2be:	d0ee      	beq.n	800a29e <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a2c0:	434d      	muls	r5, r1
 800a2c2:	6966      	ldr	r6, [r4, #20]
 800a2c4:	42ae      	cmp	r6, r5
 800a2c6:	d3ea      	bcc.n	800a29e <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a2c8:	9700      	str	r7, [sp, #0]
 800a2ca:	f000 fc43 	bl	800ab54 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800a2ce:	4605      	mov	r5, r0
 800a2d0:	2800      	cmp	r0, #0
 800a2d2:	d0e4      	beq.n	800a29e <osMessageQueueNew+0xe>
        name = attr->name;
 800a2d4:	6824      	ldr	r4, [r4, #0]
 800a2d6:	e011      	b.n	800a2fc <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a2d8:	2a00      	cmp	r2, #0
 800a2da:	d1e0      	bne.n	800a29e <osMessageQueueNew+0xe>
 800a2dc:	6923      	ldr	r3, [r4, #16]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d1dd      	bne.n	800a29e <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a2e2:	6963      	ldr	r3, [r4, #20]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d1da      	bne.n	800a29e <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800a2e8:	4628      	mov	r0, r5
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	4631      	mov	r1, r6
 800a2ee:	f000 fc7f 	bl	800abf0 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800a2f2:	4605      	mov	r5, r0
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	d0d2      	beq.n	800a29e <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800a2f8:	2c00      	cmp	r4, #0
 800a2fa:	d1eb      	bne.n	800a2d4 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800a2fc:	4621      	mov	r1, r4
 800a2fe:	4628      	mov	r0, r5
 800a300:	f000 fff8 	bl	800b2f4 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800a304:	e7cc      	b.n	800a2a0 <osMessageQueueNew+0x10>

0800a306 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a306:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a308:	461c      	mov	r4, r3
 800a30a:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800a30e:	b1c6      	cbz	r6, 800a342 <osMessageQueuePut+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a310:	b318      	cbz	r0, 800a35a <osMessageQueuePut+0x54>
 800a312:	b311      	cbz	r1, 800a35a <osMessageQueuePut+0x54>
 800a314:	bb0b      	cbnz	r3, 800a35a <osMessageQueuePut+0x54>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a316:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800a318:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a31a:	f000 fd83 	bl	800ae24 <xQueueGenericSendFromISR>
 800a31e:	2801      	cmp	r0, #1
 800a320:	d118      	bne.n	800a354 <osMessageQueuePut+0x4e>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800a322:	9b01      	ldr	r3, [sp, #4]
 800a324:	b913      	cbnz	r3, 800a32c <osMessageQueuePut+0x26>
  stat = osOK;
 800a326:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800a328:	b002      	add	sp, #8
 800a32a:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800a32c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a334:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a338:	f3bf 8f4f 	dsb	sy
 800a33c:	f3bf 8f6f 	isb	sy
 800a340:	e7f1      	b.n	800a326 <osMessageQueuePut+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a342:	b150      	cbz	r0, 800a35a <osMessageQueuePut+0x54>
 800a344:	b149      	cbz	r1, 800a35a <osMessageQueuePut+0x54>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a346:	4633      	mov	r3, r6
 800a348:	4622      	mov	r2, r4
 800a34a:	f000 fcb8 	bl	800acbe <xQueueGenericSend>
 800a34e:	2801      	cmp	r0, #1
 800a350:	d0e9      	beq.n	800a326 <osMessageQueuePut+0x20>
        if (timeout != 0U) {
 800a352:	b92c      	cbnz	r4, 800a360 <osMessageQueuePut+0x5a>
          stat = osErrorResource;
 800a354:	f06f 0002 	mvn.w	r0, #2
 800a358:	e7e6      	b.n	800a328 <osMessageQueuePut+0x22>
      stat = osErrorParameter;
 800a35a:	f06f 0003 	mvn.w	r0, #3
 800a35e:	e7e3      	b.n	800a328 <osMessageQueuePut+0x22>
          stat = osErrorTimeout;
 800a360:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800a364:	e7e0      	b.n	800a328 <osMessageQueuePut+0x22>

0800a366 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a366:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a368:	461c      	mov	r4, r3
 800a36a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800a36e:	b1c3      	cbz	r3, 800a3a2 <osMessageQueueGet+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a370:	b310      	cbz	r0, 800a3b8 <osMessageQueueGet+0x52>
 800a372:	b309      	cbz	r1, 800a3b8 <osMessageQueueGet+0x52>
 800a374:	bb04      	cbnz	r4, 800a3b8 <osMessageQueueGet+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a376:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800a378:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a37a:	f000 ff6b 	bl	800b254 <xQueueReceiveFromISR>
 800a37e:	2801      	cmp	r0, #1
 800a380:	d117      	bne.n	800a3b2 <osMessageQueueGet+0x4c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800a382:	9b01      	ldr	r3, [sp, #4]
 800a384:	b913      	cbnz	r3, 800a38c <osMessageQueueGet+0x26>
  stat = osOK;
 800a386:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800a388:	b003      	add	sp, #12
 800a38a:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800a38c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a394:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a398:	f3bf 8f4f 	dsb	sy
 800a39c:	f3bf 8f6f 	isb	sy
 800a3a0:	e7f1      	b.n	800a386 <osMessageQueueGet+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a3a2:	b148      	cbz	r0, 800a3b8 <osMessageQueueGet+0x52>
 800a3a4:	b141      	cbz	r1, 800a3b8 <osMessageQueueGet+0x52>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a3a6:	4622      	mov	r2, r4
 800a3a8:	f000 fdf2 	bl	800af90 <xQueueReceive>
 800a3ac:	2801      	cmp	r0, #1
 800a3ae:	d0ea      	beq.n	800a386 <osMessageQueueGet+0x20>
        if (timeout != 0U) {
 800a3b0:	b92c      	cbnz	r4, 800a3be <osMessageQueueGet+0x58>
          stat = osErrorResource;
 800a3b2:	f06f 0002 	mvn.w	r0, #2
 800a3b6:	e7e7      	b.n	800a388 <osMessageQueueGet+0x22>
      stat = osErrorParameter;
 800a3b8:	f06f 0003 	mvn.w	r0, #3
 800a3bc:	e7e4      	b.n	800a388 <osMessageQueueGet+0x22>
          stat = osErrorTimeout;
 800a3be:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800a3c2:	e7e1      	b.n	800a388 <osMessageQueueGet+0x22>

0800a3c4 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a3c4:	4b03      	ldr	r3, [pc, #12]	; (800a3d4 <vApplicationGetIdleTaskMemory+0x10>)
 800a3c6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a3c8:	4b03      	ldr	r3, [pc, #12]	; (800a3d8 <vApplicationGetIdleTaskMemory+0x14>)
 800a3ca:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a3cc:	2380      	movs	r3, #128	; 0x80
 800a3ce:	6013      	str	r3, [r2, #0]
}
 800a3d0:	4770      	bx	lr
 800a3d2:	bf00      	nop
 800a3d4:	240058f4 	.word	0x240058f4
 800a3d8:	240056f4 	.word	0x240056f4

0800a3dc <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a3dc:	4b03      	ldr	r3, [pc, #12]	; (800a3ec <vApplicationGetTimerTaskMemory+0x10>)
 800a3de:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a3e0:	4b03      	ldr	r3, [pc, #12]	; (800a3f0 <vApplicationGetTimerTaskMemory+0x14>)
 800a3e2:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a3e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a3e8:	6013      	str	r3, [r2, #0]
}
 800a3ea:	4770      	bx	lr
 800a3ec:	24005d58 	.word	0x24005d58
 800a3f0:	24005958 	.word	0x24005958

0800a3f4 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a3f4:	4b0f      	ldr	r3, [pc, #60]	; (800a434 <prvInsertBlockIntoFreeList+0x40>)
{
 800a3f6:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4283      	cmp	r3, r0
 800a3fe:	d3fb      	bcc.n	800a3f8 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a400:	6854      	ldr	r4, [r2, #4]
 800a402:	1911      	adds	r1, r2, r4
 800a404:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a406:	bf01      	itttt	eq
 800a408:	6841      	ldreq	r1, [r0, #4]
 800a40a:	4610      	moveq	r0, r2
 800a40c:	1909      	addeq	r1, r1, r4
 800a40e:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a410:	6844      	ldr	r4, [r0, #4]
 800a412:	1901      	adds	r1, r0, r4
 800a414:	428b      	cmp	r3, r1
 800a416:	d107      	bne.n	800a428 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a418:	4907      	ldr	r1, [pc, #28]	; (800a438 <prvInsertBlockIntoFreeList+0x44>)
 800a41a:	6809      	ldr	r1, [r1, #0]
 800a41c:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a41e:	bf1f      	itttt	ne
 800a420:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a422:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a424:	1909      	addne	r1, r1, r4
 800a426:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a428:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a42a:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a42c:	bf18      	it	ne
 800a42e:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a430:	bd10      	pop	{r4, pc}
 800a432:	bf00      	nop
 800a434:	2400ddd0 	.word	0x2400ddd0
 800a438:	24005db8 	.word	0x24005db8

0800a43c <pvPortMalloc>:
{
 800a43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a440:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800a442:	f001 f981 	bl	800b748 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800a446:	4842      	ldr	r0, [pc, #264]	; (800a550 <pvPortMalloc+0x114>)
 800a448:	4d42      	ldr	r5, [pc, #264]	; (800a554 <pvPortMalloc+0x118>)
 800a44a:	6803      	ldr	r3, [r0, #0]
 800a44c:	bb0b      	cbnz	r3, 800a492 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800a44e:	4942      	ldr	r1, [pc, #264]	; (800a558 <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a450:	074e      	lsls	r6, r1, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a452:	4e42      	ldr	r6, [pc, #264]	; (800a55c <pvPortMalloc+0x120>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a454:	bf1b      	ittet	ne
 800a456:	1dcb      	addne	r3, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a458:	f501 4200 	addne.w	r2, r1, #32768	; 0x8000
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a45c:	f44f 4200 	moveq.w	r2, #32768	; 0x8000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a460:	f023 0307 	bicne.w	r3, r3, #7
 800a464:	bf1c      	itt	ne
 800a466:	4619      	movne	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a468:	1ad2      	subne	r2, r2, r3
	xStart.xBlockSize = ( size_t ) 0;
 800a46a:	2300      	movs	r3, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a46c:	440a      	add	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a46e:	6031      	str	r1, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a470:	6073      	str	r3, [r6, #4]
	uxAddress -= xHeapStructSize;
 800a472:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a474:	f022 0207 	bic.w	r2, r2, #7
	pxEnd->pxNextFreeBlock = NULL;
 800a478:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a47c:	1a53      	subs	r3, r2, r1
	pxEnd = ( void * ) uxAddress;
 800a47e:	6002      	str	r2, [r0, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a480:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a484:	4a36      	ldr	r2, [pc, #216]	; (800a560 <pvPortMalloc+0x124>)
 800a486:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a488:	4a36      	ldr	r2, [pc, #216]	; (800a564 <pvPortMalloc+0x128>)
 800a48a:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a48c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a490:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a492:	682f      	ldr	r7, [r5, #0]
 800a494:	4227      	tst	r7, r4
 800a496:	d155      	bne.n	800a544 <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 800a498:	2c00      	cmp	r4, #0
 800a49a:	d046      	beq.n	800a52a <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 800a49c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a4a0:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a4a2:	bf1c      	itt	ne
 800a4a4:	f023 0307 	bicne.w	r3, r3, #7
 800a4a8:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d04a      	beq.n	800a544 <pvPortMalloc+0x108>
 800a4ae:	4c2d      	ldr	r4, [pc, #180]	; (800a564 <pvPortMalloc+0x128>)
 800a4b0:	6826      	ldr	r6, [r4, #0]
 800a4b2:	429e      	cmp	r6, r3
 800a4b4:	d346      	bcc.n	800a544 <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 800a4b6:	4a29      	ldr	r2, [pc, #164]	; (800a55c <pvPortMalloc+0x120>)
 800a4b8:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a4ba:	6869      	ldr	r1, [r5, #4]
 800a4bc:	4299      	cmp	r1, r3
 800a4be:	d204      	bcs.n	800a4ca <pvPortMalloc+0x8e>
 800a4c0:	f8d5 c000 	ldr.w	ip, [r5]
 800a4c4:	f1bc 0f00 	cmp.w	ip, #0
 800a4c8:	d115      	bne.n	800a4f6 <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 800a4ca:	6800      	ldr	r0, [r0, #0]
 800a4cc:	42a8      	cmp	r0, r5
 800a4ce:	d039      	beq.n	800a544 <pvPortMalloc+0x108>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a4d0:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a4d2:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a4d4:	f8d2 8000 	ldr.w	r8, [r2]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a4d8:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a4da:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a4dc:	d912      	bls.n	800a504 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a4de:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4e0:	0742      	lsls	r2, r0, #29
 800a4e2:	d00b      	beq.n	800a4fc <pvPortMalloc+0xc0>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e8:	f383 8811 	msr	BASEPRI, r3
 800a4ec:	f3bf 8f6f 	isb	sy
 800a4f0:	f3bf 8f4f 	dsb	sy
 800a4f4:	e7fe      	b.n	800a4f4 <pvPortMalloc+0xb8>
 800a4f6:	462a      	mov	r2, r5
 800a4f8:	4665      	mov	r5, ip
 800a4fa:	e7de      	b.n	800a4ba <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a4fc:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a4fe:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a500:	f7ff ff78 	bl	800a3f4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a504:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a506:	4916      	ldr	r1, [pc, #88]	; (800a560 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a508:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a50a:	431f      	orrs	r7, r3
					xNumberOfSuccessfulAllocations++;
 800a50c:	4a16      	ldr	r2, [pc, #88]	; (800a568 <pvPortMalloc+0x12c>)
					pxBlock->pxNextFreeBlock = NULL;
 800a50e:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a510:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 800a512:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800a514:	6813      	ldr	r3, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a516:	4286      	cmp	r6, r0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a518:	6026      	str	r6, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a51a:	f108 0408 	add.w	r4, r8, #8
					xNumberOfSuccessfulAllocations++;
 800a51e:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a522:	bf38      	it	cc
 800a524:	600e      	strcc	r6, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a526:	606f      	str	r7, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800a528:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800a52a:	f001 f9b1 	bl	800b890 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a52e:	0763      	lsls	r3, r4, #29
 800a530:	d00a      	beq.n	800a548 <pvPortMalloc+0x10c>
 800a532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a536:	f383 8811 	msr	BASEPRI, r3
 800a53a:	f3bf 8f6f 	isb	sy
 800a53e:	f3bf 8f4f 	dsb	sy
 800a542:	e7fe      	b.n	800a542 <pvPortMalloc+0x106>
void *pvReturn = NULL;
 800a544:	2400      	movs	r4, #0
 800a546:	e7f0      	b.n	800a52a <pvPortMalloc+0xee>
}
 800a548:	4620      	mov	r0, r4
 800a54a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a54e:	bf00      	nop
 800a550:	24005db8 	.word	0x24005db8
 800a554:	2400ddbc 	.word	0x2400ddbc
 800a558:	24005dbc 	.word	0x24005dbc
 800a55c:	2400ddd0 	.word	0x2400ddd0
 800a560:	2400ddc4 	.word	0x2400ddc4
 800a564:	2400ddc0 	.word	0x2400ddc0
 800a568:	2400ddc8 	.word	0x2400ddc8

0800a56c <vPortFree>:
{
 800a56c:	b510      	push	{r4, lr}
	if( pv != NULL )
 800a56e:	4604      	mov	r4, r0
 800a570:	b390      	cbz	r0, 800a5d8 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a572:	4a1a      	ldr	r2, [pc, #104]	; (800a5dc <vPortFree+0x70>)
 800a574:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a578:	6812      	ldr	r2, [r2, #0]
 800a57a:	4213      	tst	r3, r2
 800a57c:	d108      	bne.n	800a590 <vPortFree+0x24>
 800a57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a582:	f383 8811 	msr	BASEPRI, r3
 800a586:	f3bf 8f6f 	isb	sy
 800a58a:	f3bf 8f4f 	dsb	sy
 800a58e:	e7fe      	b.n	800a58e <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a590:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800a594:	b141      	cbz	r1, 800a5a8 <vPortFree+0x3c>
 800a596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a59a:	f383 8811 	msr	BASEPRI, r3
 800a59e:	f3bf 8f6f 	isb	sy
 800a5a2:	f3bf 8f4f 	dsb	sy
 800a5a6:	e7fe      	b.n	800a5a6 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a5a8:	ea23 0302 	bic.w	r3, r3, r2
 800a5ac:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800a5b0:	f001 f8ca 	bl	800b748 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a5b4:	4a0a      	ldr	r2, [pc, #40]	; (800a5e0 <vPortFree+0x74>)
 800a5b6:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a5ba:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a5be:	6811      	ldr	r1, [r2, #0]
 800a5c0:	440b      	add	r3, r1
 800a5c2:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a5c4:	f7ff ff16 	bl	800a3f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a5c8:	4a06      	ldr	r2, [pc, #24]	; (800a5e4 <vPortFree+0x78>)
 800a5ca:	6813      	ldr	r3, [r2, #0]
 800a5cc:	3301      	adds	r3, #1
}
 800a5ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800a5d2:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800a5d4:	f001 b95c 	b.w	800b890 <xTaskResumeAll>
}
 800a5d8:	bd10      	pop	{r4, pc}
 800a5da:	bf00      	nop
 800a5dc:	2400ddbc 	.word	0x2400ddbc
 800a5e0:	2400ddc0 	.word	0x2400ddc0
 800a5e4:	2400ddcc 	.word	0x2400ddcc

0800a5e8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5e8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a5ec:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5f0:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5f2:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5f4:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a5fc:	4770      	bx	lr

0800a5fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a5fe:	2300      	movs	r3, #0
 800a600:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a602:	4770      	bx	lr

0800a604 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800a604:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a606:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800a608:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a60a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a60c:	689a      	ldr	r2, [r3, #8]
 800a60e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a610:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800a612:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800a614:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800a616:	3301      	adds	r3, #1
 800a618:	6003      	str	r3, [r0, #0]
}
 800a61a:	4770      	bx	lr

0800a61c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a61c:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a61e:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a620:	1c63      	adds	r3, r4, #1
 800a622:	d10a      	bne.n	800a63a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a624:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a626:	685a      	ldr	r2, [r3, #4]
 800a628:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a62a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a62c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800a62e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800a630:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800a632:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800a634:	3301      	adds	r3, #1
 800a636:	6003      	str	r3, [r0, #0]
}
 800a638:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a63a:	f100 0208 	add.w	r2, r0, #8
 800a63e:	4613      	mov	r3, r2
 800a640:	6852      	ldr	r2, [r2, #4]
 800a642:	6815      	ldr	r5, [r2, #0]
 800a644:	42a5      	cmp	r5, r4
 800a646:	d9fa      	bls.n	800a63e <vListInsert+0x22>
 800a648:	e7ed      	b.n	800a626 <vListInsert+0xa>

0800a64a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a64a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a64c:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800a650:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a652:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a654:	6859      	ldr	r1, [r3, #4]
 800a656:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a658:	bf08      	it	eq
 800a65a:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a65c:	2200      	movs	r2, #0
 800a65e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	3a01      	subs	r2, #1
 800a664:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a666:	6818      	ldr	r0, [r3, #0]
}
 800a668:	4770      	bx	lr
	...

0800a66c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a66c:	4808      	ldr	r0, [pc, #32]	; (800a690 <prvPortStartFirstTask+0x24>)
 800a66e:	6800      	ldr	r0, [r0, #0]
 800a670:	6800      	ldr	r0, [r0, #0]
 800a672:	f380 8808 	msr	MSP, r0
 800a676:	f04f 0000 	mov.w	r0, #0
 800a67a:	f380 8814 	msr	CONTROL, r0
 800a67e:	b662      	cpsie	i
 800a680:	b661      	cpsie	f
 800a682:	f3bf 8f4f 	dsb	sy
 800a686:	f3bf 8f6f 	isb	sy
 800a68a:	df00      	svc	0
 800a68c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a68e:	0000      	.short	0x0000
 800a690:	e000ed08 	.word	0xe000ed08

0800a694 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a694:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a6a4 <vPortEnableVFP+0x10>
 800a698:	6801      	ldr	r1, [r0, #0]
 800a69a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a69e:	6001      	str	r1, [r0, #0]
 800a6a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a6a2:	0000      	.short	0x0000
 800a6a4:	e000ed88 	.word	0xe000ed88

0800a6a8 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800a6a8:	2300      	movs	r3, #0
{
 800a6aa:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800a6ac:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800a6ae:	4b0d      	ldr	r3, [pc, #52]	; (800a6e4 <prvTaskExitError+0x3c>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	3301      	adds	r3, #1
 800a6b4:	d008      	beq.n	800a6c8 <prvTaskExitError+0x20>
 800a6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ba:	f383 8811 	msr	BASEPRI, r3
 800a6be:	f3bf 8f6f 	isb	sy
 800a6c2:	f3bf 8f4f 	dsb	sy
 800a6c6:	e7fe      	b.n	800a6c6 <prvTaskExitError+0x1e>
 800a6c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6cc:	f383 8811 	msr	BASEPRI, r3
 800a6d0:	f3bf 8f6f 	isb	sy
 800a6d4:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800a6d8:	9b01      	ldr	r3, [sp, #4]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d0fc      	beq.n	800a6d8 <prvTaskExitError+0x30>
}
 800a6de:	b002      	add	sp, #8
 800a6e0:	4770      	bx	lr
 800a6e2:	bf00      	nop
 800a6e4:	24000058 	.word	0x24000058

0800a6e8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a6e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a6ec:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a6f0:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800a6f4:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a6f6:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a6f8:	4b03      	ldr	r3, [pc, #12]	; (800a708 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a6fa:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a6fc:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a6fe:	f06f 0302 	mvn.w	r3, #2
 800a702:	6203      	str	r3, [r0, #32]
}
 800a704:	4770      	bx	lr
 800a706:	bf00      	nop
 800a708:	0800a6a9 	.word	0x0800a6a9
 800a70c:	00000000 	.word	0x00000000

0800a710 <SVC_Handler>:
	__asm volatile (
 800a710:	4b07      	ldr	r3, [pc, #28]	; (800a730 <pxCurrentTCBConst2>)
 800a712:	6819      	ldr	r1, [r3, #0]
 800a714:	6808      	ldr	r0, [r1, #0]
 800a716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a71a:	f380 8809 	msr	PSP, r0
 800a71e:	f3bf 8f6f 	isb	sy
 800a722:	f04f 0000 	mov.w	r0, #0
 800a726:	f380 8811 	msr	BASEPRI, r0
 800a72a:	4770      	bx	lr
 800a72c:	f3af 8000 	nop.w

0800a730 <pxCurrentTCBConst2>:
 800a730:	2400de20 	.word	0x2400de20

0800a734 <vPortEnterCritical>:
 800a734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a738:	f383 8811 	msr	BASEPRI, r3
 800a73c:	f3bf 8f6f 	isb	sy
 800a740:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800a744:	4a0a      	ldr	r2, [pc, #40]	; (800a770 <vPortEnterCritical+0x3c>)
 800a746:	6813      	ldr	r3, [r2, #0]
 800a748:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800a74a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800a74c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800a74e:	d10e      	bne.n	800a76e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a750:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a754:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800a758:	b2db      	uxtb	r3, r3
 800a75a:	b143      	cbz	r3, 800a76e <vPortEnterCritical+0x3a>
 800a75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a760:	f383 8811 	msr	BASEPRI, r3
 800a764:	f3bf 8f6f 	isb	sy
 800a768:	f3bf 8f4f 	dsb	sy
 800a76c:	e7fe      	b.n	800a76c <vPortEnterCritical+0x38>
}
 800a76e:	4770      	bx	lr
 800a770:	24000058 	.word	0x24000058

0800a774 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800a774:	4a08      	ldr	r2, [pc, #32]	; (800a798 <vPortExitCritical+0x24>)
 800a776:	6813      	ldr	r3, [r2, #0]
 800a778:	b943      	cbnz	r3, 800a78c <vPortExitCritical+0x18>
 800a77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a77e:	f383 8811 	msr	BASEPRI, r3
 800a782:	f3bf 8f6f 	isb	sy
 800a786:	f3bf 8f4f 	dsb	sy
 800a78a:	e7fe      	b.n	800a78a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800a78c:	3b01      	subs	r3, #1
 800a78e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a790:	b90b      	cbnz	r3, 800a796 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a792:	f383 8811 	msr	BASEPRI, r3
}
 800a796:	4770      	bx	lr
 800a798:	24000058 	.word	0x24000058
 800a79c:	00000000 	.word	0x00000000

0800a7a0 <PendSV_Handler>:
	__asm volatile
 800a7a0:	f3ef 8009 	mrs	r0, PSP
 800a7a4:	f3bf 8f6f 	isb	sy
 800a7a8:	4b15      	ldr	r3, [pc, #84]	; (800a800 <pxCurrentTCBConst>)
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	f01e 0f10 	tst.w	lr, #16
 800a7b0:	bf08      	it	eq
 800a7b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a7b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ba:	6010      	str	r0, [r2, #0]
 800a7bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a7c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a7c4:	f380 8811 	msr	BASEPRI, r0
 800a7c8:	f3bf 8f4f 	dsb	sy
 800a7cc:	f3bf 8f6f 	isb	sy
 800a7d0:	f001 f93c 	bl	800ba4c <vTaskSwitchContext>
 800a7d4:	f04f 0000 	mov.w	r0, #0
 800a7d8:	f380 8811 	msr	BASEPRI, r0
 800a7dc:	bc09      	pop	{r0, r3}
 800a7de:	6819      	ldr	r1, [r3, #0]
 800a7e0:	6808      	ldr	r0, [r1, #0]
 800a7e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e6:	f01e 0f10 	tst.w	lr, #16
 800a7ea:	bf08      	it	eq
 800a7ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a7f0:	f380 8809 	msr	PSP, r0
 800a7f4:	f3bf 8f6f 	isb	sy
 800a7f8:	4770      	bx	lr
 800a7fa:	bf00      	nop
 800a7fc:	f3af 8000 	nop.w

0800a800 <pxCurrentTCBConst>:
 800a800:	2400de20 	.word	0x2400de20

0800a804 <xPortSysTickHandler>:
{
 800a804:	b508      	push	{r3, lr}
	__asm volatile
 800a806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a80a:	f383 8811 	msr	BASEPRI, r3
 800a80e:	f3bf 8f6f 	isb	sy
 800a812:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800a816:	f000 ffa5 	bl	800b764 <xTaskIncrementTick>
 800a81a:	b128      	cbz	r0, 800a828 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a81c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a824:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800a828:	2300      	movs	r3, #0
 800a82a:	f383 8811 	msr	BASEPRI, r3
}
 800a82e:	bd08      	pop	{r3, pc}

0800a830 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a830:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800a834:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a836:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a83a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a83c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a83e:	4b04      	ldr	r3, [pc, #16]	; (800a850 <vPortSetupTimerInterrupt+0x20>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	fbb3 f3f1 	udiv	r3, r3, r1
 800a846:	3b01      	subs	r3, #1
 800a848:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a84a:	2307      	movs	r3, #7
 800a84c:	6113      	str	r3, [r2, #16]
}
 800a84e:	4770      	bx	lr
 800a850:	24000048 	.word	0x24000048

0800a854 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a854:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 800a858:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a85a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 800a85e:	4a3a      	ldr	r2, [pc, #232]	; (800a948 <xPortStartScheduler+0xf4>)
 800a860:	4291      	cmp	r1, r2
 800a862:	d108      	bne.n	800a876 <xPortStartScheduler+0x22>
	__asm volatile
 800a864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a868:	f383 8811 	msr	BASEPRI, r3
 800a86c:	f3bf 8f6f 	isb	sy
 800a870:	f3bf 8f4f 	dsb	sy
 800a874:	e7fe      	b.n	800a874 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a876:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800a87a:	4b34      	ldr	r3, [pc, #208]	; (800a94c <xPortStartScheduler+0xf8>)
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d108      	bne.n	800a892 <xPortStartScheduler+0x3e>
 800a880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a884:	f383 8811 	msr	BASEPRI, r3
 800a888:	f3bf 8f6f 	isb	sy
 800a88c:	f3bf 8f4f 	dsb	sy
 800a890:	e7fe      	b.n	800a890 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a892:	4b2f      	ldr	r3, [pc, #188]	; (800a950 <xPortStartScheduler+0xfc>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a894:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a896:	781a      	ldrb	r2, [r3, #0]
 800a898:	b2d2      	uxtb	r2, r2
 800a89a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a89c:	22ff      	movs	r2, #255	; 0xff
 800a89e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a8a0:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a8a2:	4a2c      	ldr	r2, [pc, #176]	; (800a954 <xPortStartScheduler+0x100>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a8aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a8ae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a8b2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a8b4:	2307      	movs	r3, #7
 800a8b6:	4a28      	ldr	r2, [pc, #160]	; (800a958 <xPortStartScheduler+0x104>)
 800a8b8:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a8ba:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800a8be:	1e5c      	subs	r4, r3, #1
 800a8c0:	0600      	lsls	r0, r0, #24
 800a8c2:	d40c      	bmi.n	800a8de <xPortStartScheduler+0x8a>
 800a8c4:	b111      	cbz	r1, 800a8cc <xPortStartScheduler+0x78>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a8c6:	2b03      	cmp	r3, #3
 800a8c8:	6013      	str	r3, [r2, #0]
 800a8ca:	d011      	beq.n	800a8f0 <xPortStartScheduler+0x9c>
 800a8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d0:	f383 8811 	msr	BASEPRI, r3
 800a8d4:	f3bf 8f6f 	isb	sy
 800a8d8:	f3bf 8f4f 	dsb	sy
 800a8dc:	e7fe      	b.n	800a8dc <xPortStartScheduler+0x88>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a8de:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a8e2:	2101      	movs	r1, #1
 800a8e4:	005b      	lsls	r3, r3, #1
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	f88d 3003 	strb.w	r3, [sp, #3]
 800a8ec:	4623      	mov	r3, r4
 800a8ee:	e7e4      	b.n	800a8ba <xPortStartScheduler+0x66>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a8f0:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a8f4:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 800a8f8:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a8fa:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a8fc:	9b01      	ldr	r3, [sp, #4]
 800a8fe:	4a14      	ldr	r2, [pc, #80]	; (800a950 <xPortStartScheduler+0xfc>)
 800a900:	b2db      	uxtb	r3, r3
 800a902:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a904:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800a908:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a90c:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a910:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800a914:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a918:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800a91c:	f7ff ff88 	bl	800a830 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800a920:	4b0e      	ldr	r3, [pc, #56]	; (800a95c <xPortStartScheduler+0x108>)
 800a922:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800a924:	f7ff feb6 	bl	800a694 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a928:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800a92c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a930:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 800a934:	f7ff fe9a 	bl	800a66c <prvPortStartFirstTask>
	vTaskSwitchContext();
 800a938:	f001 f888 	bl	800ba4c <vTaskSwitchContext>
}
 800a93c:	4628      	mov	r0, r5
	prvTaskExitError();
 800a93e:	f7ff feb3 	bl	800a6a8 <prvTaskExitError>
}
 800a942:	b003      	add	sp, #12
 800a944:	bd30      	pop	{r4, r5, pc}
 800a946:	bf00      	nop
 800a948:	410fc271 	.word	0x410fc271
 800a94c:	410fc270 	.word	0x410fc270
 800a950:	e000e400 	.word	0xe000e400
 800a954:	2400ddd8 	.word	0x2400ddd8
 800a958:	2400dddc 	.word	0x2400dddc
 800a95c:	24000058 	.word	0x24000058

0800a960 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a960:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a964:	2b0f      	cmp	r3, #15
 800a966:	d90e      	bls.n	800a986 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a968:	4a11      	ldr	r2, [pc, #68]	; (800a9b0 <vPortValidateInterruptPriority+0x50>)
 800a96a:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a96c:	4a11      	ldr	r2, [pc, #68]	; (800a9b4 <vPortValidateInterruptPriority+0x54>)
 800a96e:	7812      	ldrb	r2, [r2, #0]
 800a970:	429a      	cmp	r2, r3
 800a972:	d908      	bls.n	800a986 <vPortValidateInterruptPriority+0x26>
 800a974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a978:	f383 8811 	msr	BASEPRI, r3
 800a97c:	f3bf 8f6f 	isb	sy
 800a980:	f3bf 8f4f 	dsb	sy
 800a984:	e7fe      	b.n	800a984 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a986:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a98a:	4a0b      	ldr	r2, [pc, #44]	; (800a9b8 <vPortValidateInterruptPriority+0x58>)
 800a98c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800a990:	6812      	ldr	r2, [r2, #0]
 800a992:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a996:	4293      	cmp	r3, r2
 800a998:	d908      	bls.n	800a9ac <vPortValidateInterruptPriority+0x4c>
 800a99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99e:	f383 8811 	msr	BASEPRI, r3
 800a9a2:	f3bf 8f6f 	isb	sy
 800a9a6:	f3bf 8f4f 	dsb	sy
 800a9aa:	e7fe      	b.n	800a9aa <vPortValidateInterruptPriority+0x4a>
	}
 800a9ac:	4770      	bx	lr
 800a9ae:	bf00      	nop
 800a9b0:	e000e3f0 	.word	0xe000e3f0
 800a9b4:	2400ddd8 	.word	0x2400ddd8
 800a9b8:	2400dddc 	.word	0x2400dddc

0800a9bc <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a9bc:	b510      	push	{r4, lr}
 800a9be:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a9c0:	f7ff feb8 	bl	800a734 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a9c4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800a9c6:	f7ff fed5 	bl	800a774 <vPortExitCritical>

	return xReturn;
}
 800a9ca:	fab4 f084 	clz	r0, r4
 800a9ce:	0940      	lsrs	r0, r0, #5
 800a9d0:	bd10      	pop	{r4, pc}

0800a9d2 <prvCopyDataToQueue>:
{
 800a9d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9d4:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a9d6:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800a9d8:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9da:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a9dc:	b952      	cbnz	r2, 800a9f4 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a9de:	6807      	ldr	r7, [r0, #0]
 800a9e0:	bb47      	cbnz	r7, 800aa34 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a9e2:	6880      	ldr	r0, [r0, #8]
 800a9e4:	f001 f990 	bl	800bd08 <xTaskPriorityDisinherit>
 800a9e8:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a9ea:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a9ec:	3601      	adds	r6, #1
}
 800a9ee:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a9f0:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800a9f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800a9f4:	b965      	cbnz	r5, 800aa10 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a9f6:	6840      	ldr	r0, [r0, #4]
 800a9f8:	f012 ffce 	bl	801d998 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a9fc:	6863      	ldr	r3, [r4, #4]
 800a9fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800aa00:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aa02:	68a2      	ldr	r2, [r4, #8]
 800aa04:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aa06:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aa08:	d3f0      	bcc.n	800a9ec <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aa0a:	6823      	ldr	r3, [r4, #0]
 800aa0c:	6063      	str	r3, [r4, #4]
 800aa0e:	e7ed      	b.n	800a9ec <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aa10:	68c0      	ldr	r0, [r0, #12]
 800aa12:	f012 ffc1 	bl	801d998 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aa16:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800aa18:	68e3      	ldr	r3, [r4, #12]
 800aa1a:	4251      	negs	r1, r2
 800aa1c:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aa1e:	6822      	ldr	r2, [r4, #0]
 800aa20:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aa22:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aa24:	bf3e      	ittt	cc
 800aa26:	68a3      	ldrcc	r3, [r4, #8]
 800aa28:	185b      	addcc	r3, r3, r1
 800aa2a:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800aa2c:	2d02      	cmp	r5, #2
 800aa2e:	d101      	bne.n	800aa34 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa30:	b116      	cbz	r6, 800aa38 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 800aa32:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800aa34:	2500      	movs	r5, #0
 800aa36:	e7d9      	b.n	800a9ec <prvCopyDataToQueue+0x1a>
 800aa38:	4635      	mov	r5, r6
 800aa3a:	e7d7      	b.n	800a9ec <prvCopyDataToQueue+0x1a>

0800aa3c <prvCopyDataFromQueue>:
{
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aa40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800aa42:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aa44:	b162      	cbz	r2, 800aa60 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aa46:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aa48:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aa4a:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aa4c:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aa4e:	60dc      	str	r4, [r3, #12]
}
 800aa50:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aa54:	bf24      	itt	cs
 800aa56:	6819      	ldrcs	r1, [r3, #0]
 800aa58:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aa5a:	68d9      	ldr	r1, [r3, #12]
 800aa5c:	f012 bf9c 	b.w	801d998 <memcpy>
}
 800aa60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa64:	4770      	bx	lr

0800aa66 <prvUnlockQueue>:
{
 800aa66:	b570      	push	{r4, r5, r6, lr}
 800aa68:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800aa6a:	f7ff fe63 	bl	800a734 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800aa6e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa72:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800aa76:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa78:	2d00      	cmp	r5, #0
 800aa7a:	dc14      	bgt.n	800aaa6 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800aa7c:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa7e:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800aa82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800aa86:	f7ff fe75 	bl	800a774 <vPortExitCritical>
	taskENTER_CRITICAL();
 800aa8a:	f7ff fe53 	bl	800a734 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800aa8e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800aa92:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa94:	2d00      	cmp	r5, #0
 800aa96:	dc12      	bgt.n	800aabe <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800aa98:	23ff      	movs	r3, #255	; 0xff
 800aa9a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800aa9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800aaa2:	f7ff be67 	b.w	800a774 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aaa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d0e7      	beq.n	800aa7c <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aaac:	4630      	mov	r0, r6
 800aaae:	f001 f849 	bl	800bb44 <xTaskRemoveFromEventList>
 800aab2:	b108      	cbz	r0, 800aab8 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800aab4:	f001 f8d2 	bl	800bc5c <vTaskMissedYield>
			--cTxLock;
 800aab8:	3d01      	subs	r5, #1
 800aaba:	b26d      	sxtb	r5, r5
 800aabc:	e7dc      	b.n	800aa78 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aabe:	6923      	ldr	r3, [r4, #16]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d0e9      	beq.n	800aa98 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aac4:	4630      	mov	r0, r6
 800aac6:	f001 f83d 	bl	800bb44 <xTaskRemoveFromEventList>
 800aaca:	b108      	cbz	r0, 800aad0 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800aacc:	f001 f8c6 	bl	800bc5c <vTaskMissedYield>
				--cRxLock;
 800aad0:	3d01      	subs	r5, #1
 800aad2:	b26d      	sxtb	r5, r5
 800aad4:	e7de      	b.n	800aa94 <prvUnlockQueue+0x2e>

0800aad6 <xQueueGenericReset>:
{
 800aad6:	b538      	push	{r3, r4, r5, lr}
 800aad8:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800aada:	4604      	mov	r4, r0
 800aadc:	b940      	cbnz	r0, 800aaf0 <xQueueGenericReset+0x1a>
 800aade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae2:	f383 8811 	msr	BASEPRI, r3
 800aae6:	f3bf 8f6f 	isb	sy
 800aaea:	f3bf 8f4f 	dsb	sy
 800aaee:	e7fe      	b.n	800aaee <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800aaf0:	f7ff fe20 	bl	800a734 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aaf4:	6822      	ldr	r2, [r4, #0]
 800aaf6:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aafa:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aafc:	434b      	muls	r3, r1
 800aafe:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab00:	1a5b      	subs	r3, r3, r1
 800ab02:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab04:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ab06:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab08:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ab0a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ab0c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800ab0e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ab12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800ab16:	b9a5      	cbnz	r5, 800ab42 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab18:	6923      	ldr	r3, [r4, #16]
 800ab1a:	b173      	cbz	r3, 800ab3a <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab1c:	f104 0010 	add.w	r0, r4, #16
 800ab20:	f001 f810 	bl	800bb44 <xTaskRemoveFromEventList>
 800ab24:	b148      	cbz	r0, 800ab3a <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800ab26:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ab2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab2e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ab32:	f3bf 8f4f 	dsb	sy
 800ab36:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800ab3a:	f7ff fe1b 	bl	800a774 <vPortExitCritical>
}
 800ab3e:	2001      	movs	r0, #1
 800ab40:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ab42:	f104 0010 	add.w	r0, r4, #16
 800ab46:	f7ff fd4f 	bl	800a5e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ab4a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ab4e:	f7ff fd4b 	bl	800a5e8 <vListInitialise>
 800ab52:	e7f2      	b.n	800ab3a <xQueueGenericReset+0x64>

0800ab54 <xQueueGenericCreateStatic>:
	{
 800ab54:	b513      	push	{r0, r1, r4, lr}
 800ab56:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ab58:	b940      	cbnz	r0, 800ab6c <xQueueGenericCreateStatic+0x18>
 800ab5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab5e:	f383 8811 	msr	BASEPRI, r3
 800ab62:	f3bf 8f6f 	isb	sy
 800ab66:	f3bf 8f4f 	dsb	sy
 800ab6a:	e7fe      	b.n	800ab6a <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 800ab6c:	b943      	cbnz	r3, 800ab80 <xQueueGenericCreateStatic+0x2c>
 800ab6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab72:	f383 8811 	msr	BASEPRI, r3
 800ab76:	f3bf 8f6f 	isb	sy
 800ab7a:	f3bf 8f4f 	dsb	sy
 800ab7e:	e7fe      	b.n	800ab7e <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ab80:	b14a      	cbz	r2, 800ab96 <xQueueGenericCreateStatic+0x42>
 800ab82:	b991      	cbnz	r1, 800abaa <xQueueGenericCreateStatic+0x56>
 800ab84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab88:	f383 8811 	msr	BASEPRI, r3
 800ab8c:	f3bf 8f6f 	isb	sy
 800ab90:	f3bf 8f4f 	dsb	sy
 800ab94:	e7fe      	b.n	800ab94 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ab96:	b141      	cbz	r1, 800abaa <xQueueGenericCreateStatic+0x56>
 800ab98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab9c:	f383 8811 	msr	BASEPRI, r3
 800aba0:	f3bf 8f6f 	isb	sy
 800aba4:	f3bf 8f4f 	dsb	sy
 800aba8:	e7fe      	b.n	800aba8 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800abaa:	2350      	movs	r3, #80	; 0x50
 800abac:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800abae:	9b01      	ldr	r3, [sp, #4]
 800abb0:	2b50      	cmp	r3, #80	; 0x50
 800abb2:	d008      	beq.n	800abc6 <xQueueGenericCreateStatic+0x72>
 800abb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb8:	f383 8811 	msr	BASEPRI, r3
 800abbc:	f3bf 8f6f 	isb	sy
 800abc0:	f3bf 8f4f 	dsb	sy
 800abc4:	e7fe      	b.n	800abc4 <xQueueGenericCreateStatic+0x70>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800abc6:	2900      	cmp	r1, #0
 800abc8:	bf08      	it	eq
 800abca:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800abcc:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800abce:	2301      	movs	r3, #1
 800abd0:	6022      	str	r2, [r4, #0]
 800abd2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800abd6:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800abda:	4619      	mov	r1, r3
 800abdc:	4620      	mov	r0, r4
 800abde:	f7ff ff7a 	bl	800aad6 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800abe2:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 800abe6:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800abe8:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 800abec:	b002      	add	sp, #8
 800abee:	bd10      	pop	{r4, pc}

0800abf0 <xQueueGenericCreate>:
	{
 800abf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abf2:	460d      	mov	r5, r1
 800abf4:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800abf6:	4606      	mov	r6, r0
 800abf8:	b940      	cbnz	r0, 800ac0c <xQueueGenericCreate+0x1c>
 800abfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abfe:	f383 8811 	msr	BASEPRI, r3
 800ac02:	f3bf 8f6f 	isb	sy
 800ac06:	f3bf 8f4f 	dsb	sy
 800ac0a:	e7fe      	b.n	800ac0a <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac0c:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ac0e:	3050      	adds	r0, #80	; 0x50
 800ac10:	f7ff fc14 	bl	800a43c <pvPortMalloc>
		if( pxNewQueue != NULL )
 800ac14:	4604      	mov	r4, r0
 800ac16:	b170      	cbz	r0, 800ac36 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800ac1e:	b165      	cbz	r5, 800ac3a <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac20:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ac24:	2101      	movs	r1, #1
 800ac26:	4620      	mov	r0, r4
 800ac28:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800ac2a:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ac2e:	f7ff ff52 	bl	800aad6 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800ac32:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 800ac36:	4620      	mov	r0, r4
 800ac38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	e7f2      	b.n	800ac24 <xQueueGenericCreate+0x34>

0800ac3e <xQueueCreateCountingSemaphoreStatic>:
	{
 800ac3e:	b513      	push	{r0, r1, r4, lr}
 800ac40:	4613      	mov	r3, r2
 800ac42:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800ac44:	b940      	cbnz	r0, 800ac58 <xQueueCreateCountingSemaphoreStatic+0x1a>
 800ac46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac4a:	f383 8811 	msr	BASEPRI, r3
 800ac4e:	f3bf 8f6f 	isb	sy
 800ac52:	f3bf 8f4f 	dsb	sy
 800ac56:	e7fe      	b.n	800ac56 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ac58:	4288      	cmp	r0, r1
 800ac5a:	d208      	bcs.n	800ac6e <xQueueCreateCountingSemaphoreStatic+0x30>
 800ac5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac60:	f383 8811 	msr	BASEPRI, r3
 800ac64:	f3bf 8f6f 	isb	sy
 800ac68:	f3bf 8f4f 	dsb	sy
 800ac6c:	e7fe      	b.n	800ac6c <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ac6e:	2202      	movs	r2, #2
 800ac70:	9200      	str	r2, [sp, #0]
 800ac72:	2200      	movs	r2, #0
 800ac74:	4611      	mov	r1, r2
 800ac76:	f7ff ff6d 	bl	800ab54 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800ac7a:	b100      	cbz	r0, 800ac7e <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ac7c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800ac7e:	b002      	add	sp, #8
 800ac80:	bd10      	pop	{r4, pc}

0800ac82 <xQueueCreateCountingSemaphore>:
	{
 800ac82:	b510      	push	{r4, lr}
 800ac84:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800ac86:	b940      	cbnz	r0, 800ac9a <xQueueCreateCountingSemaphore+0x18>
 800ac88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac8c:	f383 8811 	msr	BASEPRI, r3
 800ac90:	f3bf 8f6f 	isb	sy
 800ac94:	f3bf 8f4f 	dsb	sy
 800ac98:	e7fe      	b.n	800ac98 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ac9a:	4288      	cmp	r0, r1
 800ac9c:	d208      	bcs.n	800acb0 <xQueueCreateCountingSemaphore+0x2e>
 800ac9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca2:	f383 8811 	msr	BASEPRI, r3
 800aca6:	f3bf 8f6f 	isb	sy
 800acaa:	f3bf 8f4f 	dsb	sy
 800acae:	e7fe      	b.n	800acae <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800acb0:	2202      	movs	r2, #2
 800acb2:	2100      	movs	r1, #0
 800acb4:	f7ff ff9c 	bl	800abf0 <xQueueGenericCreate>
		if( xHandle != NULL )
 800acb8:	b100      	cbz	r0, 800acbc <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800acba:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800acbc:	bd10      	pop	{r4, pc}

0800acbe <xQueueGenericSend>:
{
 800acbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800acc2:	b085      	sub	sp, #20
 800acc4:	4688      	mov	r8, r1
 800acc6:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800acc8:	4604      	mov	r4, r0
{
 800acca:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800accc:	b940      	cbnz	r0, 800ace0 <xQueueGenericSend+0x22>
 800acce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd2:	f383 8811 	msr	BASEPRI, r3
 800acd6:	f3bf 8f6f 	isb	sy
 800acda:	f3bf 8f4f 	dsb	sy
 800acde:	e7fe      	b.n	800acde <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ace0:	b951      	cbnz	r1, 800acf8 <xQueueGenericSend+0x3a>
 800ace2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ace4:	b143      	cbz	r3, 800acf8 <xQueueGenericSend+0x3a>
 800ace6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acea:	f383 8811 	msr	BASEPRI, r3
 800acee:	f3bf 8f6f 	isb	sy
 800acf2:	f3bf 8f4f 	dsb	sy
 800acf6:	e7fe      	b.n	800acf6 <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800acf8:	2f02      	cmp	r7, #2
 800acfa:	d10b      	bne.n	800ad14 <xQueueGenericSend+0x56>
 800acfc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	d008      	beq.n	800ad14 <xQueueGenericSend+0x56>
 800ad02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad06:	f383 8811 	msr	BASEPRI, r3
 800ad0a:	f3bf 8f6f 	isb	sy
 800ad0e:	f3bf 8f4f 	dsb	sy
 800ad12:	e7fe      	b.n	800ad12 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad14:	f000 ffa8 	bl	800bc68 <xTaskGetSchedulerState>
 800ad18:	4606      	mov	r6, r0
 800ad1a:	b950      	cbnz	r0, 800ad32 <xQueueGenericSend+0x74>
 800ad1c:	9b01      	ldr	r3, [sp, #4]
 800ad1e:	b14b      	cbz	r3, 800ad34 <xQueueGenericSend+0x76>
 800ad20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad24:	f383 8811 	msr	BASEPRI, r3
 800ad28:	f3bf 8f6f 	isb	sy
 800ad2c:	f3bf 8f4f 	dsb	sy
 800ad30:	e7fe      	b.n	800ad30 <xQueueGenericSend+0x72>
 800ad32:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800ad34:	f04f 0900 	mov.w	r9, #0
 800ad38:	e037      	b.n	800adaa <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad3a:	9d01      	ldr	r5, [sp, #4]
 800ad3c:	b91d      	cbnz	r5, 800ad46 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 800ad3e:	f7ff fd19 	bl	800a774 <vPortExitCritical>
			return errQUEUE_FULL;
 800ad42:	2000      	movs	r0, #0
 800ad44:	e052      	b.n	800adec <xQueueGenericSend+0x12e>
				else if( xEntryTimeSet == pdFALSE )
 800ad46:	b916      	cbnz	r6, 800ad4e <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad48:	a802      	add	r0, sp, #8
 800ad4a:	f000 ff3f 	bl	800bbcc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800ad4e:	f7ff fd11 	bl	800a774 <vPortExitCritical>
		vTaskSuspendAll();
 800ad52:	f000 fcf9 	bl	800b748 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad56:	f7ff fced 	bl	800a734 <vPortEnterCritical>
 800ad5a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ad5e:	2bff      	cmp	r3, #255	; 0xff
 800ad60:	d101      	bne.n	800ad66 <xQueueGenericSend+0xa8>
 800ad62:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 800ad66:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ad6a:	2bff      	cmp	r3, #255	; 0xff
 800ad6c:	d101      	bne.n	800ad72 <xQueueGenericSend+0xb4>
 800ad6e:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 800ad72:	f7ff fcff 	bl	800a774 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad76:	a901      	add	r1, sp, #4
 800ad78:	a802      	add	r0, sp, #8
 800ad7a:	f000 ff33 	bl	800bbe4 <xTaskCheckForTimeOut>
 800ad7e:	2800      	cmp	r0, #0
 800ad80:	d14a      	bne.n	800ae18 <xQueueGenericSend+0x15a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad82:	f7ff fcd7 	bl	800a734 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ad86:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ad88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d131      	bne.n	800adf2 <xQueueGenericSend+0x134>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800ad8e:	f7ff fcf1 	bl	800a774 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ad92:	9901      	ldr	r1, [sp, #4]
 800ad94:	f104 0010 	add.w	r0, r4, #16
 800ad98:	f000 fe9c 	bl	800bad4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	f7ff fe62 	bl	800aa66 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ada2:	f000 fd75 	bl	800b890 <xTaskResumeAll>
 800ada6:	b360      	cbz	r0, 800ae02 <xQueueGenericSend+0x144>
 800ada8:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800adaa:	f7ff fcc3 	bl	800a734 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800adae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800adb0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d301      	bcc.n	800adba <xQueueGenericSend+0xfc>
 800adb6:	2f02      	cmp	r7, #2
 800adb8:	d1bf      	bne.n	800ad3a <xQueueGenericSend+0x7c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800adba:	463a      	mov	r2, r7
 800adbc:	4641      	mov	r1, r8
 800adbe:	4620      	mov	r0, r4
 800adc0:	f7ff fe07 	bl	800a9d2 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800adc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800adc6:	b11b      	cbz	r3, 800add0 <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800adc8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800adcc:	f000 feba 	bl	800bb44 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800add0:	b148      	cbz	r0, 800ade6 <xQueueGenericSend+0x128>
						queueYIELD_IF_USING_PREEMPTION();
 800add2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800add6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adda:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800adde:	f3bf 8f4f 	dsb	sy
 800ade2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800ade6:	f7ff fcc5 	bl	800a774 <vPortExitCritical>
				return pdPASS;
 800adea:	2001      	movs	r0, #1
}
 800adec:	b005      	add	sp, #20
 800adee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 800adf2:	f7ff fcbf 	bl	800a774 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800adf6:	4620      	mov	r0, r4
 800adf8:	f7ff fe35 	bl	800aa66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800adfc:	f000 fd48 	bl	800b890 <xTaskResumeAll>
 800ae00:	e7d2      	b.n	800ada8 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 800ae02:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ae06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae0a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ae0e:	f3bf 8f4f 	dsb	sy
 800ae12:	f3bf 8f6f 	isb	sy
 800ae16:	e7c7      	b.n	800ada8 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 800ae18:	4620      	mov	r0, r4
 800ae1a:	f7ff fe24 	bl	800aa66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae1e:	f000 fd37 	bl	800b890 <xTaskResumeAll>
 800ae22:	e78e      	b.n	800ad42 <xQueueGenericSend+0x84>

0800ae24 <xQueueGenericSendFromISR>:
{
 800ae24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae28:	4689      	mov	r9, r1
 800ae2a:	4690      	mov	r8, r2
 800ae2c:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800ae2e:	4604      	mov	r4, r0
 800ae30:	b940      	cbnz	r0, 800ae44 <xQueueGenericSendFromISR+0x20>
 800ae32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae36:	f383 8811 	msr	BASEPRI, r3
 800ae3a:	f3bf 8f6f 	isb	sy
 800ae3e:	f3bf 8f4f 	dsb	sy
 800ae42:	e7fe      	b.n	800ae42 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae44:	b951      	cbnz	r1, 800ae5c <xQueueGenericSendFromISR+0x38>
 800ae46:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ae48:	b143      	cbz	r3, 800ae5c <xQueueGenericSendFromISR+0x38>
 800ae4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae4e:	f383 8811 	msr	BASEPRI, r3
 800ae52:	f3bf 8f6f 	isb	sy
 800ae56:	f3bf 8f4f 	dsb	sy
 800ae5a:	e7fe      	b.n	800ae5a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ae5c:	2f02      	cmp	r7, #2
 800ae5e:	d10b      	bne.n	800ae78 <xQueueGenericSendFromISR+0x54>
 800ae60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	d008      	beq.n	800ae78 <xQueueGenericSendFromISR+0x54>
 800ae66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae6a:	f383 8811 	msr	BASEPRI, r3
 800ae6e:	f3bf 8f6f 	isb	sy
 800ae72:	f3bf 8f4f 	dsb	sy
 800ae76:	e7fe      	b.n	800ae76 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ae78:	f7ff fd72 	bl	800a960 <vPortValidateInterruptPriority>
	__asm volatile
 800ae7c:	f3ef 8611 	mrs	r6, BASEPRI
 800ae80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae84:	f383 8811 	msr	BASEPRI, r3
 800ae88:	f3bf 8f6f 	isb	sy
 800ae8c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae90:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ae92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d301      	bcc.n	800ae9c <xQueueGenericSendFromISR+0x78>
 800ae98:	2f02      	cmp	r7, #2
 800ae9a:	d123      	bne.n	800aee4 <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
 800ae9c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aea0:	463a      	mov	r2, r7
 800aea2:	4649      	mov	r1, r9
 800aea4:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800aea6:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aea8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aeaa:	f7ff fd92 	bl	800a9d2 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800aeae:	1c6b      	adds	r3, r5, #1
 800aeb0:	d113      	bne.n	800aeda <xQueueGenericSendFromISR+0xb6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aeb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aeb4:	b90b      	cbnz	r3, 800aeba <xQueueGenericSendFromISR+0x96>
			xReturn = pdPASS;
 800aeb6:	2001      	movs	r0, #1
 800aeb8:	e00b      	b.n	800aed2 <xQueueGenericSendFromISR+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aeba:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800aebe:	f000 fe41 	bl	800bb44 <xTaskRemoveFromEventList>
 800aec2:	2800      	cmp	r0, #0
 800aec4:	d0f7      	beq.n	800aeb6 <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 800aec6:	f1b8 0f00 	cmp.w	r8, #0
 800aeca:	d0f4      	beq.n	800aeb6 <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aecc:	2001      	movs	r0, #1
 800aece:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800aed2:	f386 8811 	msr	BASEPRI, r6
}
 800aed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aeda:	3501      	adds	r5, #1
 800aedc:	b26d      	sxtb	r5, r5
 800aede:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800aee2:	e7e8      	b.n	800aeb6 <xQueueGenericSendFromISR+0x92>
			xReturn = errQUEUE_FULL;
 800aee4:	2000      	movs	r0, #0
 800aee6:	e7f4      	b.n	800aed2 <xQueueGenericSendFromISR+0xae>

0800aee8 <xQueueGiveFromISR>:
{
 800aee8:	b570      	push	{r4, r5, r6, lr}
 800aeea:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800aeec:	4604      	mov	r4, r0
 800aeee:	b940      	cbnz	r0, 800af02 <xQueueGiveFromISR+0x1a>
	__asm volatile
 800aef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef4:	f383 8811 	msr	BASEPRI, r3
 800aef8:	f3bf 8f6f 	isb	sy
 800aefc:	f3bf 8f4f 	dsb	sy
 800af00:	e7fe      	b.n	800af00 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800af02:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800af04:	b143      	cbz	r3, 800af18 <xQueueGiveFromISR+0x30>
 800af06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af0a:	f383 8811 	msr	BASEPRI, r3
 800af0e:	f3bf 8f6f 	isb	sy
 800af12:	f3bf 8f4f 	dsb	sy
 800af16:	e7fe      	b.n	800af16 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800af18:	6803      	ldr	r3, [r0, #0]
 800af1a:	b953      	cbnz	r3, 800af32 <xQueueGiveFromISR+0x4a>
 800af1c:	6883      	ldr	r3, [r0, #8]
 800af1e:	b143      	cbz	r3, 800af32 <xQueueGiveFromISR+0x4a>
 800af20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af24:	f383 8811 	msr	BASEPRI, r3
 800af28:	f3bf 8f6f 	isb	sy
 800af2c:	f3bf 8f4f 	dsb	sy
 800af30:	e7fe      	b.n	800af30 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800af32:	f7ff fd15 	bl	800a960 <vPortValidateInterruptPriority>
	__asm volatile
 800af36:	f3ef 8611 	mrs	r6, BASEPRI
 800af3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af3e:	f383 8811 	msr	BASEPRI, r3
 800af42:	f3bf 8f6f 	isb	sy
 800af46:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af4a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800af4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800af4e:	4293      	cmp	r3, r2
 800af50:	d91c      	bls.n	800af8c <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800af52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800af56:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800af58:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800af5a:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800af5c:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800af5e:	d110      	bne.n	800af82 <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af62:	b90b      	cbnz	r3, 800af68 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 800af64:	2001      	movs	r0, #1
 800af66:	e009      	b.n	800af7c <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af68:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800af6c:	f000 fdea 	bl	800bb44 <xTaskRemoveFromEventList>
 800af70:	2800      	cmp	r0, #0
 800af72:	d0f7      	beq.n	800af64 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 800af74:	2d00      	cmp	r5, #0
 800af76:	d0f5      	beq.n	800af64 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800af78:	2001      	movs	r0, #1
 800af7a:	6028      	str	r0, [r5, #0]
	__asm volatile
 800af7c:	f386 8811 	msr	BASEPRI, r6
}
 800af80:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800af82:	3301      	adds	r3, #1
 800af84:	b25b      	sxtb	r3, r3
 800af86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800af8a:	e7eb      	b.n	800af64 <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 800af8c:	2000      	movs	r0, #0
 800af8e:	e7f5      	b.n	800af7c <xQueueGiveFromISR+0x94>

0800af90 <xQueueReceive>:
{
 800af90:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800af94:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 800af96:	4604      	mov	r4, r0
{
 800af98:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800af9a:	b940      	cbnz	r0, 800afae <xQueueReceive+0x1e>
	__asm volatile
 800af9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa0:	f383 8811 	msr	BASEPRI, r3
 800afa4:	f3bf 8f6f 	isb	sy
 800afa8:	f3bf 8f4f 	dsb	sy
 800afac:	e7fe      	b.n	800afac <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800afae:	b951      	cbnz	r1, 800afc6 <xQueueReceive+0x36>
 800afb0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800afb2:	b143      	cbz	r3, 800afc6 <xQueueReceive+0x36>
 800afb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb8:	f383 8811 	msr	BASEPRI, r3
 800afbc:	f3bf 8f6f 	isb	sy
 800afc0:	f3bf 8f4f 	dsb	sy
 800afc4:	e7fe      	b.n	800afc4 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800afc6:	f000 fe4f 	bl	800bc68 <xTaskGetSchedulerState>
 800afca:	4606      	mov	r6, r0
 800afcc:	b950      	cbnz	r0, 800afe4 <xQueueReceive+0x54>
 800afce:	9b01      	ldr	r3, [sp, #4]
 800afd0:	b14b      	cbz	r3, 800afe6 <xQueueReceive+0x56>
 800afd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd6:	f383 8811 	msr	BASEPRI, r3
 800afda:	f3bf 8f6f 	isb	sy
 800afde:	f3bf 8f4f 	dsb	sy
 800afe2:	e7fe      	b.n	800afe2 <xQueueReceive+0x52>
 800afe4:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800afe6:	f04f 0800 	mov.w	r8, #0
 800afea:	e03d      	b.n	800b068 <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 800afec:	9d01      	ldr	r5, [sp, #4]
 800afee:	b91d      	cbnz	r5, 800aff8 <xQueueReceive+0x68>
					taskEXIT_CRITICAL();
 800aff0:	f7ff fbc0 	bl	800a774 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800aff4:	2000      	movs	r0, #0
 800aff6:	e056      	b.n	800b0a6 <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 800aff8:	b916      	cbnz	r6, 800b000 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800affa:	a802      	add	r0, sp, #8
 800affc:	f000 fde6 	bl	800bbcc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800b000:	f7ff fbb8 	bl	800a774 <vPortExitCritical>
		vTaskSuspendAll();
 800b004:	f000 fba0 	bl	800b748 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b008:	f7ff fb94 	bl	800a734 <vPortEnterCritical>
 800b00c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b010:	2bff      	cmp	r3, #255	; 0xff
 800b012:	d101      	bne.n	800b018 <xQueueReceive+0x88>
 800b014:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800b018:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b01c:	2bff      	cmp	r3, #255	; 0xff
 800b01e:	d101      	bne.n	800b024 <xQueueReceive+0x94>
 800b020:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800b024:	f7ff fba6 	bl	800a774 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b028:	a901      	add	r1, sp, #4
 800b02a:	a802      	add	r0, sp, #8
 800b02c:	f000 fdda 	bl	800bbe4 <xTaskCheckForTimeOut>
 800b030:	2800      	cmp	r0, #0
 800b032:	d141      	bne.n	800b0b8 <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b034:	4620      	mov	r0, r4
 800b036:	f7ff fcc1 	bl	800a9bc <prvIsQueueEmpty>
 800b03a:	b3b8      	cbz	r0, 800b0ac <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b03c:	9901      	ldr	r1, [sp, #4]
 800b03e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b042:	f000 fd47 	bl	800bad4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b046:	4620      	mov	r0, r4
 800b048:	f7ff fd0d 	bl	800aa66 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b04c:	f000 fc20 	bl	800b890 <xTaskResumeAll>
 800b050:	b948      	cbnz	r0, 800b066 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 800b052:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b05a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b05e:	f3bf 8f4f 	dsb	sy
 800b062:	f3bf 8f6f 	isb	sy
 800b066:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800b068:	f7ff fb64 	bl	800a734 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b06c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b06e:	2d00      	cmp	r5, #0
 800b070:	d0bc      	beq.n	800afec <xQueueReceive+0x5c>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b072:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b074:	4639      	mov	r1, r7
 800b076:	4620      	mov	r0, r4
 800b078:	f7ff fce0 	bl	800aa3c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b07c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b07e:	6923      	ldr	r3, [r4, #16]
 800b080:	b173      	cbz	r3, 800b0a0 <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b082:	f104 0010 	add.w	r0, r4, #16
 800b086:	f000 fd5d 	bl	800bb44 <xTaskRemoveFromEventList>
 800b08a:	b148      	cbz	r0, 800b0a0 <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 800b08c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b094:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b098:	f3bf 8f4f 	dsb	sy
 800b09c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800b0a0:	f7ff fb68 	bl	800a774 <vPortExitCritical>
				return pdPASS;
 800b0a4:	2001      	movs	r0, #1
}
 800b0a6:	b004      	add	sp, #16
 800b0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 800b0ac:	4620      	mov	r0, r4
 800b0ae:	f7ff fcda 	bl	800aa66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b0b2:	f000 fbed 	bl	800b890 <xTaskResumeAll>
 800b0b6:	e7d6      	b.n	800b066 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	f7ff fcd4 	bl	800aa66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b0be:	f000 fbe7 	bl	800b890 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	f7ff fc7a 	bl	800a9bc <prvIsQueueEmpty>
 800b0c8:	2800      	cmp	r0, #0
 800b0ca:	d0cc      	beq.n	800b066 <xQueueReceive+0xd6>
 800b0cc:	e792      	b.n	800aff4 <xQueueReceive+0x64>

0800b0ce <xQueueSemaphoreTake>:
{
 800b0ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0d0:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800b0d2:	4604      	mov	r4, r0
{
 800b0d4:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800b0d6:	b940      	cbnz	r0, 800b0ea <xQueueSemaphoreTake+0x1c>
 800b0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0dc:	f383 8811 	msr	BASEPRI, r3
 800b0e0:	f3bf 8f6f 	isb	sy
 800b0e4:	f3bf 8f4f 	dsb	sy
 800b0e8:	e7fe      	b.n	800b0e8 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800b0ea:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800b0ec:	b145      	cbz	r5, 800b100 <xQueueSemaphoreTake+0x32>
 800b0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f2:	f383 8811 	msr	BASEPRI, r3
 800b0f6:	f3bf 8f6f 	isb	sy
 800b0fa:	f3bf 8f4f 	dsb	sy
 800b0fe:	e7fe      	b.n	800b0fe <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b100:	f000 fdb2 	bl	800bc68 <xTaskGetSchedulerState>
 800b104:	4606      	mov	r6, r0
 800b106:	b950      	cbnz	r0, 800b11e <xQueueSemaphoreTake+0x50>
 800b108:	9b01      	ldr	r3, [sp, #4]
 800b10a:	b15b      	cbz	r3, 800b124 <xQueueSemaphoreTake+0x56>
 800b10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b110:	f383 8811 	msr	BASEPRI, r3
 800b114:	f3bf 8f6f 	isb	sy
 800b118:	f3bf 8f4f 	dsb	sy
 800b11c:	e7fe      	b.n	800b11c <xQueueSemaphoreTake+0x4e>
 800b11e:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800b120:	2700      	movs	r7, #0
 800b122:	e053      	b.n	800b1cc <xQueueSemaphoreTake+0xfe>
 800b124:	4605      	mov	r5, r0
 800b126:	e7fb      	b.n	800b120 <xQueueSemaphoreTake+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 800b128:	9b01      	ldr	r3, [sp, #4]
 800b12a:	b963      	cbnz	r3, 800b146 <xQueueSemaphoreTake+0x78>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b12c:	b145      	cbz	r5, 800b140 <xQueueSemaphoreTake+0x72>
 800b12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b132:	f383 8811 	msr	BASEPRI, r3
 800b136:	f3bf 8f6f 	isb	sy
 800b13a:	f3bf 8f4f 	dsb	sy
 800b13e:	e7fe      	b.n	800b13e <xQueueSemaphoreTake+0x70>
					taskEXIT_CRITICAL();
 800b140:	f7ff fb18 	bl	800a774 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800b144:	e062      	b.n	800b20c <xQueueSemaphoreTake+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 800b146:	b916      	cbnz	r6, 800b14e <xQueueSemaphoreTake+0x80>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b148:	a802      	add	r0, sp, #8
 800b14a:	f000 fd3f 	bl	800bbcc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800b14e:	f7ff fb11 	bl	800a774 <vPortExitCritical>
		vTaskSuspendAll();
 800b152:	f000 faf9 	bl	800b748 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b156:	f7ff faed 	bl	800a734 <vPortEnterCritical>
 800b15a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b15e:	2bff      	cmp	r3, #255	; 0xff
 800b160:	d101      	bne.n	800b166 <xQueueSemaphoreTake+0x98>
 800b162:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800b166:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b16a:	2bff      	cmp	r3, #255	; 0xff
 800b16c:	d101      	bne.n	800b172 <xQueueSemaphoreTake+0xa4>
 800b16e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b172:	f7ff faff 	bl	800a774 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b176:	a901      	add	r1, sp, #4
 800b178:	a802      	add	r0, sp, #8
 800b17a:	f000 fd33 	bl	800bbe4 <xTaskCheckForTimeOut>
 800b17e:	2800      	cmp	r0, #0
 800b180:	d14d      	bne.n	800b21e <xQueueSemaphoreTake+0x150>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b182:	4620      	mov	r0, r4
 800b184:	f7ff fc1a 	bl	800a9bc <prvIsQueueEmpty>
 800b188:	2800      	cmp	r0, #0
 800b18a:	d042      	beq.n	800b212 <xQueueSemaphoreTake+0x144>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b18c:	6823      	ldr	r3, [r4, #0]
 800b18e:	b93b      	cbnz	r3, 800b1a0 <xQueueSemaphoreTake+0xd2>
						taskENTER_CRITICAL();
 800b190:	f7ff fad0 	bl	800a734 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b194:	68a0      	ldr	r0, [r4, #8]
 800b196:	f000 fd77 	bl	800bc88 <xTaskPriorityInherit>
 800b19a:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800b19c:	f7ff faea 	bl	800a774 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b1a0:	9901      	ldr	r1, [sp, #4]
 800b1a2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b1a6:	f000 fc95 	bl	800bad4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b1aa:	4620      	mov	r0, r4
 800b1ac:	f7ff fc5b 	bl	800aa66 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b1b0:	f000 fb6e 	bl	800b890 <xTaskResumeAll>
 800b1b4:	b948      	cbnz	r0, 800b1ca <xQueueSemaphoreTake+0xfc>
					portYIELD_WITHIN_API();
 800b1b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b1ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1be:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b1c2:	f3bf 8f4f 	dsb	sy
 800b1c6:	f3bf 8f6f 	isb	sy
 800b1ca:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800b1cc:	f7ff fab2 	bl	800a734 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b1d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d0a8      	beq.n	800b128 <xQueueSemaphoreTake+0x5a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b1da:	6823      	ldr	r3, [r4, #0]
 800b1dc:	b913      	cbnz	r3, 800b1e4 <xQueueSemaphoreTake+0x116>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b1de:	f000 fe29 	bl	800be34 <pvTaskIncrementMutexHeldCount>
 800b1e2:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1e4:	6923      	ldr	r3, [r4, #16]
 800b1e6:	b173      	cbz	r3, 800b206 <xQueueSemaphoreTake+0x138>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1e8:	f104 0010 	add.w	r0, r4, #16
 800b1ec:	f000 fcaa 	bl	800bb44 <xTaskRemoveFromEventList>
 800b1f0:	b148      	cbz	r0, 800b206 <xQueueSemaphoreTake+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 800b1f2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b1f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1fa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b1fe:	f3bf 8f4f 	dsb	sy
 800b202:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800b206:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800b208:	f7ff fab4 	bl	800a774 <vPortExitCritical>
}
 800b20c:	4628      	mov	r0, r5
 800b20e:	b005      	add	sp, #20
 800b210:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 800b212:	4620      	mov	r0, r4
 800b214:	f7ff fc27 	bl	800aa66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b218:	f000 fb3a 	bl	800b890 <xTaskResumeAll>
 800b21c:	e7d5      	b.n	800b1ca <xQueueSemaphoreTake+0xfc>
			prvUnlockQueue( pxQueue );
 800b21e:	4620      	mov	r0, r4
 800b220:	f7ff fc21 	bl	800aa66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b224:	f000 fb34 	bl	800b890 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b228:	4620      	mov	r0, r4
 800b22a:	f7ff fbc7 	bl	800a9bc <prvIsQueueEmpty>
 800b22e:	2800      	cmp	r0, #0
 800b230:	d0cb      	beq.n	800b1ca <xQueueSemaphoreTake+0xfc>
					if( xInheritanceOccurred != pdFALSE )
 800b232:	2d00      	cmp	r5, #0
 800b234:	d0ea      	beq.n	800b20c <xQueueSemaphoreTake+0x13e>
						taskENTER_CRITICAL();
 800b236:	f7ff fa7d 	bl	800a734 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b23a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b23c:	b119      	cbz	r1, 800b246 <xQueueSemaphoreTake+0x178>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b23e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b240:	6819      	ldr	r1, [r3, #0]
 800b242:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b246:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 800b248:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b24a:	f000 fda1 	bl	800bd90 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800b24e:	f7ff fa91 	bl	800a774 <vPortExitCritical>
 800b252:	e7db      	b.n	800b20c <xQueueSemaphoreTake+0x13e>

0800b254 <xQueueReceiveFromISR>:
{
 800b254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b258:	4689      	mov	r9, r1
 800b25a:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800b25c:	4605      	mov	r5, r0
 800b25e:	b940      	cbnz	r0, 800b272 <xQueueReceiveFromISR+0x1e>
 800b260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b264:	f383 8811 	msr	BASEPRI, r3
 800b268:	f3bf 8f6f 	isb	sy
 800b26c:	f3bf 8f4f 	dsb	sy
 800b270:	e7fe      	b.n	800b270 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b272:	b951      	cbnz	r1, 800b28a <xQueueReceiveFromISR+0x36>
 800b274:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b276:	b143      	cbz	r3, 800b28a <xQueueReceiveFromISR+0x36>
 800b278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b27c:	f383 8811 	msr	BASEPRI, r3
 800b280:	f3bf 8f6f 	isb	sy
 800b284:	f3bf 8f4f 	dsb	sy
 800b288:	e7fe      	b.n	800b288 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b28a:	f7ff fb69 	bl	800a960 <vPortValidateInterruptPriority>
	__asm volatile
 800b28e:	f3ef 8711 	mrs	r7, BASEPRI
 800b292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b296:	f383 8811 	msr	BASEPRI, r3
 800b29a:	f3bf 8f6f 	isb	sy
 800b29e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b2a2:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b2a4:	b31c      	cbz	r4, 800b2ee <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 800b2a6:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b2aa:	4649      	mov	r1, r9
 800b2ac:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b2ae:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800b2b0:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b2b2:	f7ff fbc3 	bl	800aa3c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b2b6:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800b2b8:	1c73      	adds	r3, r6, #1
 800b2ba:	d113      	bne.n	800b2e4 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2bc:	692b      	ldr	r3, [r5, #16]
 800b2be:	b90b      	cbnz	r3, 800b2c4 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 800b2c0:	2001      	movs	r0, #1
 800b2c2:	e00b      	b.n	800b2dc <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2c4:	f105 0010 	add.w	r0, r5, #16
 800b2c8:	f000 fc3c 	bl	800bb44 <xTaskRemoveFromEventList>
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	d0f7      	beq.n	800b2c0 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 800b2d0:	f1b8 0f00 	cmp.w	r8, #0
 800b2d4:	d0f4      	beq.n	800b2c0 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b2d6:	2001      	movs	r0, #1
 800b2d8:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800b2dc:	f387 8811 	msr	BASEPRI, r7
}
 800b2e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b2e4:	3601      	adds	r6, #1
 800b2e6:	b276      	sxtb	r6, r6
 800b2e8:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 800b2ec:	e7e8      	b.n	800b2c0 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	e7f4      	b.n	800b2dc <xQueueReceiveFromISR+0x88>
	...

0800b2f4 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b2f4:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b2f6:	4a07      	ldr	r2, [pc, #28]	; (800b314 <vQueueAddToRegistry+0x20>)
	{
 800b2f8:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b2fa:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800b2fe:	b92c      	cbnz	r4, 800b30c <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b300:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b304:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b308:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b30a:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b30c:	3301      	adds	r3, #1
 800b30e:	2b08      	cmp	r3, #8
 800b310:	d1f3      	bne.n	800b2fa <vQueueAddToRegistry+0x6>
 800b312:	e7fa      	b.n	800b30a <vQueueAddToRegistry+0x16>
 800b314:	2400dde0 	.word	0x2400dde0

0800b318 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b318:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b31a:	4a08      	ldr	r2, [pc, #32]	; (800b33c <vQueueUnregisterQueue+0x24>)
	{
 800b31c:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b31e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800b322:	684c      	ldr	r4, [r1, #4]
 800b324:	4284      	cmp	r4, r0
 800b326:	d104      	bne.n	800b332 <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b328:	2000      	movs	r0, #0
 800b32a:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b32e:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b330:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b332:	3301      	adds	r3, #1
 800b334:	2b08      	cmp	r3, #8
 800b336:	d1f2      	bne.n	800b31e <vQueueUnregisterQueue+0x6>
 800b338:	e7fa      	b.n	800b330 <vQueueUnregisterQueue+0x18>
 800b33a:	bf00      	nop
 800b33c:	2400dde0 	.word	0x2400dde0

0800b340 <vQueueDelete>:
{
 800b340:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800b342:	4604      	mov	r4, r0
 800b344:	b940      	cbnz	r0, 800b358 <vQueueDelete+0x18>
	__asm volatile
 800b346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b34a:	f383 8811 	msr	BASEPRI, r3
 800b34e:	f3bf 8f6f 	isb	sy
 800b352:	f3bf 8f4f 	dsb	sy
 800b356:	e7fe      	b.n	800b356 <vQueueDelete+0x16>
		vQueueUnregisterQueue( pxQueue );
 800b358:	f7ff ffde 	bl	800b318 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b35c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b360:	b923      	cbnz	r3, 800b36c <vQueueDelete+0x2c>
			vPortFree( pxQueue );
 800b362:	4620      	mov	r0, r4
}
 800b364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800b368:	f7ff b900 	b.w	800a56c <vPortFree>
}
 800b36c:	bd10      	pop	{r4, pc}

0800b36e <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b36e:	b570      	push	{r4, r5, r6, lr}
 800b370:	4604      	mov	r4, r0
 800b372:	460d      	mov	r5, r1
 800b374:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b376:	f7ff f9dd 	bl	800a734 <vPortEnterCritical>
 800b37a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b37e:	2bff      	cmp	r3, #255	; 0xff
 800b380:	d102      	bne.n	800b388 <vQueueWaitForMessageRestricted+0x1a>
 800b382:	2300      	movs	r3, #0
 800b384:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800b388:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b38c:	2bff      	cmp	r3, #255	; 0xff
 800b38e:	d102      	bne.n	800b396 <vQueueWaitForMessageRestricted+0x28>
 800b390:	2300      	movs	r3, #0
 800b392:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b396:	f7ff f9ed 	bl	800a774 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b39a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b39c:	b92b      	cbnz	r3, 800b3aa <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b39e:	4632      	mov	r2, r6
 800b3a0:	4629      	mov	r1, r5
 800b3a2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b3a6:	f000 fbaf 	bl	800bb08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b3aa:	4620      	mov	r0, r4
	}
 800b3ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800b3b0:	f7ff bb59 	b.w	800aa66 <prvUnlockQueue>

0800b3b4 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b3b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3b8:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b3ba:	f7ff f9bb 	bl	800a734 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b3be:	4b2f      	ldr	r3, [pc, #188]	; (800b47c <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800b3c0:	4e2f      	ldr	r6, [pc, #188]	; (800b480 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800b3c2:	681a      	ldr	r2, [r3, #0]
 800b3c4:	4f2f      	ldr	r7, [pc, #188]	; (800b484 <prvAddNewTaskToReadyList+0xd0>)
 800b3c6:	3201      	adds	r2, #1
 800b3c8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800b3ca:	6835      	ldr	r5, [r6, #0]
 800b3cc:	2d00      	cmp	r5, #0
 800b3ce:	d14a      	bne.n	800b466 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b3d0:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	d11f      	bne.n	800b418 <prvAddNewTaskToReadyList+0x64>
 800b3d8:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b3da:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b3dc:	4640      	mov	r0, r8
 800b3de:	f7ff f903 	bl	800a5e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b3e2:	f108 0814 	add.w	r8, r8, #20
 800b3e6:	2d38      	cmp	r5, #56	; 0x38
 800b3e8:	d1f7      	bne.n	800b3da <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b3ea:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800b4ac <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800b3ee:	4d26      	ldr	r5, [pc, #152]	; (800b488 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800b3f0:	4640      	mov	r0, r8
 800b3f2:	f7ff f8f9 	bl	800a5e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b3f6:	4628      	mov	r0, r5
 800b3f8:	f7ff f8f6 	bl	800a5e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b3fc:	4823      	ldr	r0, [pc, #140]	; (800b48c <prvAddNewTaskToReadyList+0xd8>)
 800b3fe:	f7ff f8f3 	bl	800a5e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b402:	4823      	ldr	r0, [pc, #140]	; (800b490 <prvAddNewTaskToReadyList+0xdc>)
 800b404:	f7ff f8f0 	bl	800a5e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b408:	4822      	ldr	r0, [pc, #136]	; (800b494 <prvAddNewTaskToReadyList+0xe0>)
 800b40a:	f7ff f8ed 	bl	800a5e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b40e:	4b22      	ldr	r3, [pc, #136]	; (800b498 <prvAddNewTaskToReadyList+0xe4>)
 800b410:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b414:	4b21      	ldr	r3, [pc, #132]	; (800b49c <prvAddNewTaskToReadyList+0xe8>)
 800b416:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800b418:	4a21      	ldr	r2, [pc, #132]	; (800b4a0 <prvAddNewTaskToReadyList+0xec>)
 800b41a:	6813      	ldr	r3, [r2, #0]
 800b41c:	3301      	adds	r3, #1
 800b41e:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800b420:	4a20      	ldr	r2, [pc, #128]	; (800b4a4 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b422:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800b424:	6811      	ldr	r1, [r2, #0]
 800b426:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b428:	428b      	cmp	r3, r1
 800b42a:	d900      	bls.n	800b42e <prvAddNewTaskToReadyList+0x7a>
 800b42c:	6013      	str	r3, [r2, #0]
 800b42e:	2014      	movs	r0, #20
 800b430:	1d21      	adds	r1, r4, #4
 800b432:	fb00 7003 	mla	r0, r0, r3, r7
 800b436:	f7ff f8e5 	bl	800a604 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800b43a:	f7ff f99b 	bl	800a774 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800b43e:	4b1a      	ldr	r3, [pc, #104]	; (800b4a8 <prvAddNewTaskToReadyList+0xf4>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	b173      	cbz	r3, 800b462 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b444:	6833      	ldr	r3, [r6, #0]
 800b446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b448:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d209      	bcs.n	800b462 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800b44e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b456:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b45a:	f3bf 8f4f 	dsb	sy
 800b45e:	f3bf 8f6f 	isb	sy
}
 800b462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800b466:	4b10      	ldr	r3, [pc, #64]	; (800b4a8 <prvAddNewTaskToReadyList+0xf4>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d1d4      	bne.n	800b418 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b46e:	6833      	ldr	r3, [r6, #0]
 800b470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b472:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b474:	429a      	cmp	r2, r3
 800b476:	d8cf      	bhi.n	800b418 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800b478:	6034      	str	r4, [r6, #0]
 800b47a:	e7cd      	b.n	800b418 <prvAddNewTaskToReadyList+0x64>
 800b47c:	2400e28c 	.word	0x2400e28c
 800b480:	2400de20 	.word	0x2400de20
 800b484:	2400de2c 	.word	0x2400de2c
 800b488:	2400e2b4 	.word	0x2400e2b4
 800b48c:	2400e2d4 	.word	0x2400e2d4
 800b490:	2400e300 	.word	0x2400e300
 800b494:	2400e2ec 	.word	0x2400e2ec
 800b498:	2400de24 	.word	0x2400de24
 800b49c:	2400de28 	.word	0x2400de28
 800b4a0:	2400e298 	.word	0x2400e298
 800b4a4:	2400e29c 	.word	0x2400e29c
 800b4a8:	2400e2e8 	.word	0x2400e2e8
 800b4ac:	2400e2a0 	.word	0x2400e2a0

0800b4b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b4b2:	4b15      	ldr	r3, [pc, #84]	; (800b508 <prvAddCurrentTaskToDelayedList+0x58>)
{
 800b4b4:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b4b6:	4e15      	ldr	r6, [pc, #84]	; (800b50c <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800b4b8:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800b4ba:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b4bc:	6830      	ldr	r0, [r6, #0]
 800b4be:	3004      	adds	r0, #4
 800b4c0:	f7ff f8c3 	bl	800a64a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b4c4:	1c63      	adds	r3, r4, #1
 800b4c6:	d107      	bne.n	800b4d8 <prvAddCurrentTaskToDelayedList+0x28>
 800b4c8:	b137      	cbz	r7, 800b4d8 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4ca:	6831      	ldr	r1, [r6, #0]
 800b4cc:	4810      	ldr	r0, [pc, #64]	; (800b510 <prvAddCurrentTaskToDelayedList+0x60>)
 800b4ce:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b4d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4d4:	f7ff b896 	b.w	800a604 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b4d8:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b4da:	6833      	ldr	r3, [r6, #0]
 800b4dc:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b4de:	d307      	bcc.n	800b4f0 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4e0:	4b0c      	ldr	r3, [pc, #48]	; (800b514 <prvAddCurrentTaskToDelayedList+0x64>)
 800b4e2:	6818      	ldr	r0, [r3, #0]
 800b4e4:	6831      	ldr	r1, [r6, #0]
}
 800b4e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4ea:	3104      	adds	r1, #4
 800b4ec:	f7ff b896 	b.w	800a61c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4f0:	4b09      	ldr	r3, [pc, #36]	; (800b518 <prvAddCurrentTaskToDelayedList+0x68>)
 800b4f2:	6818      	ldr	r0, [r3, #0]
 800b4f4:	6831      	ldr	r1, [r6, #0]
 800b4f6:	3104      	adds	r1, #4
 800b4f8:	f7ff f890 	bl	800a61c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b4fc:	4b07      	ldr	r3, [pc, #28]	; (800b51c <prvAddCurrentTaskToDelayedList+0x6c>)
 800b4fe:	681a      	ldr	r2, [r3, #0]
 800b500:	42a2      	cmp	r2, r4
 800b502:	d900      	bls.n	800b506 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800b504:	601c      	str	r4, [r3, #0]
}
 800b506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b508:	2400e314 	.word	0x2400e314
 800b50c:	2400de20 	.word	0x2400de20
 800b510:	2400e2ec 	.word	0x2400e2ec
 800b514:	2400de28 	.word	0x2400de28
 800b518:	2400de24 	.word	0x2400de24
 800b51c:	2400e2c8 	.word	0x2400e2c8

0800b520 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b520:	4a06      	ldr	r2, [pc, #24]	; (800b53c <prvResetNextTaskUnblockTime+0x1c>)
 800b522:	6813      	ldr	r3, [r2, #0]
 800b524:	6819      	ldr	r1, [r3, #0]
 800b526:	4b06      	ldr	r3, [pc, #24]	; (800b540 <prvResetNextTaskUnblockTime+0x20>)
 800b528:	b919      	cbnz	r1, 800b532 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800b52a:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b52e:	601a      	str	r2, [r3, #0]
}
 800b530:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b532:	6812      	ldr	r2, [r2, #0]
 800b534:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b536:	68d2      	ldr	r2, [r2, #12]
 800b538:	6852      	ldr	r2, [r2, #4]
 800b53a:	e7f8      	b.n	800b52e <prvResetNextTaskUnblockTime+0xe>
 800b53c:	2400de24 	.word	0x2400de24
 800b540:	2400e2c8 	.word	0x2400e2c8

0800b544 <prvDeleteTCB>:
	{
 800b544:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b546:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	{
 800b54a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b54c:	b93b      	cbnz	r3, 800b55e <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800b54e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800b550:	f7ff f80c 	bl	800a56c <vPortFree>
				vPortFree( pxTCB );
 800b554:	4620      	mov	r0, r4
	}
 800b556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800b55a:	f7ff b807 	b.w	800a56c <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b55e:	2b01      	cmp	r3, #1
 800b560:	d0f9      	beq.n	800b556 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b562:	2b02      	cmp	r3, #2
 800b564:	d008      	beq.n	800b578 <prvDeleteTCB+0x34>
 800b566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b56a:	f383 8811 	msr	BASEPRI, r3
 800b56e:	f3bf 8f6f 	isb	sy
 800b572:	f3bf 8f4f 	dsb	sy
 800b576:	e7fe      	b.n	800b576 <prvDeleteTCB+0x32>
	}
 800b578:	bd10      	pop	{r4, pc}
	...

0800b57c <prvIdleTask>:
{
 800b57c:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b57e:	4c14      	ldr	r4, [pc, #80]	; (800b5d0 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b580:	4f14      	ldr	r7, [pc, #80]	; (800b5d4 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800b582:	4d15      	ldr	r5, [pc, #84]	; (800b5d8 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b584:	6823      	ldr	r3, [r4, #0]
 800b586:	b983      	cbnz	r3, 800b5aa <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b588:	4b14      	ldr	r3, [pc, #80]	; (800b5dc <prvIdleTask+0x60>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	2b01      	cmp	r3, #1
 800b58e:	d909      	bls.n	800b5a4 <prvIdleTask+0x28>
				taskYIELD();
 800b590:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b598:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b59c:	f3bf 8f4f 	dsb	sy
 800b5a0:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800b5a4:	f7f4 feec 	bl	8000380 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800b5a8:	e7eb      	b.n	800b582 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800b5aa:	f7ff f8c3 	bl	800a734 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5b2:	1d30      	adds	r0, r6, #4
 800b5b4:	f7ff f849 	bl	800a64a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b5b8:	682b      	ldr	r3, [r5, #0]
 800b5ba:	3b01      	subs	r3, #1
 800b5bc:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b5be:	6823      	ldr	r3, [r4, #0]
 800b5c0:	3b01      	subs	r3, #1
 800b5c2:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800b5c4:	f7ff f8d6 	bl	800a774 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800b5c8:	4630      	mov	r0, r6
 800b5ca:	f7ff ffbb 	bl	800b544 <prvDeleteTCB>
 800b5ce:	e7d9      	b.n	800b584 <prvIdleTask+0x8>
 800b5d0:	2400e290 	.word	0x2400e290
 800b5d4:	2400e300 	.word	0x2400e300
 800b5d8:	2400e28c 	.word	0x2400e28c
 800b5dc:	2400de2c 	.word	0x2400de2c

0800b5e0 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800b5e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b5e4:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800b5e8:	4606      	mov	r6, r0
 800b5ea:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b5ec:	21a5      	movs	r1, #165	; 0xa5
 800b5ee:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800b5f0:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b5f2:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800b5f6:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b5fa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800b5fc:	f012 f9da 	bl	801d9b4 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b600:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b602:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b604:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 800b608:	b3b5      	cbz	r5, 800b678 <prvInitialiseNewTask.constprop.0+0x98>
 800b60a:	1e6b      	subs	r3, r5, #1
 800b60c:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800b610:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b612:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800b616:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 800b61a:	b108      	cbz	r0, 800b620 <prvInitialiseNewTask.constprop.0+0x40>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b61c:	42ab      	cmp	r3, r5
 800b61e:	d1f8      	bne.n	800b612 <prvInitialiseNewTask.constprop.0+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b620:	2300      	movs	r3, #0
 800b622:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b626:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800b628:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b62c:	1d20      	adds	r0, r4, #4
 800b62e:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800b630:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 800b634:	bf28      	it	cs
 800b636:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800b638:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800b63a:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b63c:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b640:	f7fe ffdd 	bl	800a5fe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b644:	f104 0018 	add.w	r0, r4, #24
 800b648:	f7fe ffd9 	bl	800a5fe <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800b64c:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b650:	463a      	mov	r2, r7
 800b652:	4631      	mov	r1, r6
 800b654:	4648      	mov	r0, r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b656:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b658:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b65a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 800b65c:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b660:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b664:	f7ff f840 	bl	800a6e8 <pxPortInitialiseStack>
 800b668:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800b66a:	f1b8 0f00 	cmp.w	r8, #0
 800b66e:	d001      	beq.n	800b674 <prvInitialiseNewTask.constprop.0+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b670:	f8c8 4000 	str.w	r4, [r8]
}
 800b674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b678:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 800b67c:	e7d3      	b.n	800b626 <prvInitialiseNewTask.constprop.0+0x46>

0800b67e <xTaskCreateStatic>:
	{
 800b67e:	b570      	push	{r4, r5, r6, lr}
 800b680:	b086      	sub	sp, #24
 800b682:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800b686:	b945      	cbnz	r5, 800b69a <xTaskCreateStatic+0x1c>
 800b688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b68c:	f383 8811 	msr	BASEPRI, r3
 800b690:	f3bf 8f6f 	isb	sy
 800b694:	f3bf 8f4f 	dsb	sy
 800b698:	e7fe      	b.n	800b698 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800b69a:	b944      	cbnz	r4, 800b6ae <xTaskCreateStatic+0x30>
 800b69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a0:	f383 8811 	msr	BASEPRI, r3
 800b6a4:	f3bf 8f6f 	isb	sy
 800b6a8:	f3bf 8f4f 	dsb	sy
 800b6ac:	e7fe      	b.n	800b6ac <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800b6ae:	2660      	movs	r6, #96	; 0x60
 800b6b0:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b6b2:	9e05      	ldr	r6, [sp, #20]
 800b6b4:	2e60      	cmp	r6, #96	; 0x60
 800b6b6:	d008      	beq.n	800b6ca <xTaskCreateStatic+0x4c>
 800b6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6bc:	f383 8811 	msr	BASEPRI, r3
 800b6c0:	f3bf 8f6f 	isb	sy
 800b6c4:	f3bf 8f4f 	dsb	sy
 800b6c8:	e7fe      	b.n	800b6c8 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b6ca:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b6cc:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b6ce:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b6d0:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b6d4:	ad04      	add	r5, sp, #16
 800b6d6:	9402      	str	r4, [sp, #8]
 800b6d8:	9501      	str	r5, [sp, #4]
 800b6da:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b6dc:	9500      	str	r5, [sp, #0]
 800b6de:	f7ff ff7f 	bl	800b5e0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	f7ff fe66 	bl	800b3b4 <prvAddNewTaskToReadyList>
	}
 800b6e8:	9804      	ldr	r0, [sp, #16]
 800b6ea:	b006      	add	sp, #24
 800b6ec:	bd70      	pop	{r4, r5, r6, pc}

0800b6ee <xTaskCreate>:
	{
 800b6ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b6f2:	4607      	mov	r7, r0
 800b6f4:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b6f6:	0090      	lsls	r0, r2, #2
	{
 800b6f8:	4688      	mov	r8, r1
 800b6fa:	4616      	mov	r6, r2
 800b6fc:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b6fe:	f7fe fe9d 	bl	800a43c <pvPortMalloc>
			if( pxStack != NULL )
 800b702:	4605      	mov	r5, r0
 800b704:	b1e8      	cbz	r0, 800b742 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b706:	2060      	movs	r0, #96	; 0x60
 800b708:	f7fe fe98 	bl	800a43c <pvPortMalloc>
				if( pxNewTCB != NULL )
 800b70c:	4604      	mov	r4, r0
 800b70e:	b1a8      	cbz	r0, 800b73c <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b710:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800b712:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b714:	4632      	mov	r2, r6
 800b716:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b718:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b71c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b71e:	9002      	str	r0, [sp, #8]
 800b720:	4638      	mov	r0, r7
 800b722:	9301      	str	r3, [sp, #4]
 800b724:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b726:	9300      	str	r3, [sp, #0]
 800b728:	464b      	mov	r3, r9
 800b72a:	f7ff ff59 	bl	800b5e0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b72e:	4620      	mov	r0, r4
 800b730:	f7ff fe40 	bl	800b3b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b734:	2001      	movs	r0, #1
	}
 800b736:	b005      	add	sp, #20
 800b738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800b73c:	4628      	mov	r0, r5
 800b73e:	f7fe ff15 	bl	800a56c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b742:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800b746:	e7f6      	b.n	800b736 <xTaskCreate+0x48>

0800b748 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800b748:	4a02      	ldr	r2, [pc, #8]	; (800b754 <vTaskSuspendAll+0xc>)
 800b74a:	6813      	ldr	r3, [r2, #0]
 800b74c:	3301      	adds	r3, #1
 800b74e:	6013      	str	r3, [r2, #0]
}
 800b750:	4770      	bx	lr
 800b752:	bf00      	nop
 800b754:	2400e294 	.word	0x2400e294

0800b758 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800b758:	4b01      	ldr	r3, [pc, #4]	; (800b760 <xTaskGetTickCount+0x8>)
 800b75a:	6818      	ldr	r0, [r3, #0]
}
 800b75c:	4770      	bx	lr
 800b75e:	bf00      	nop
 800b760:	2400e314 	.word	0x2400e314

0800b764 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b764:	4b3f      	ldr	r3, [pc, #252]	; (800b864 <xTaskIncrementTick+0x100>)
 800b766:	681b      	ldr	r3, [r3, #0]
{
 800b768:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d172      	bne.n	800b856 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b770:	4b3d      	ldr	r3, [pc, #244]	; (800b868 <xTaskIncrementTick+0x104>)
 800b772:	681d      	ldr	r5, [r3, #0]
 800b774:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800b776:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b778:	b9bd      	cbnz	r5, 800b7aa <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800b77a:	4b3c      	ldr	r3, [pc, #240]	; (800b86c <xTaskIncrementTick+0x108>)
 800b77c:	681a      	ldr	r2, [r3, #0]
 800b77e:	6812      	ldr	r2, [r2, #0]
 800b780:	b142      	cbz	r2, 800b794 <xTaskIncrementTick+0x30>
 800b782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b786:	f383 8811 	msr	BASEPRI, r3
 800b78a:	f3bf 8f6f 	isb	sy
 800b78e:	f3bf 8f4f 	dsb	sy
 800b792:	e7fe      	b.n	800b792 <xTaskIncrementTick+0x2e>
 800b794:	4a36      	ldr	r2, [pc, #216]	; (800b870 <xTaskIncrementTick+0x10c>)
 800b796:	6819      	ldr	r1, [r3, #0]
 800b798:	6810      	ldr	r0, [r2, #0]
 800b79a:	6018      	str	r0, [r3, #0]
 800b79c:	6011      	str	r1, [r2, #0]
 800b79e:	4a35      	ldr	r2, [pc, #212]	; (800b874 <xTaskIncrementTick+0x110>)
 800b7a0:	6813      	ldr	r3, [r2, #0]
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	6013      	str	r3, [r2, #0]
 800b7a6:	f7ff febb 	bl	800b520 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b7aa:	4e33      	ldr	r6, [pc, #204]	; (800b878 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800b7ac:	2400      	movs	r4, #0
 800b7ae:	4f33      	ldr	r7, [pc, #204]	; (800b87c <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b7b0:	6833      	ldr	r3, [r6, #0]
 800b7b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800b888 <xTaskIncrementTick+0x124>
 800b7b6:	429d      	cmp	r5, r3
 800b7b8:	d211      	bcs.n	800b7de <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b7ba:	f8d8 3000 	ldr.w	r3, [r8]
 800b7be:	2214      	movs	r2, #20
 800b7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c2:	4353      	muls	r3, r2
 800b7c4:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 800b7c6:	2b02      	cmp	r3, #2
			if( xYieldPending != pdFALSE )
 800b7c8:	4b2d      	ldr	r3, [pc, #180]	; (800b880 <xTaskIncrementTick+0x11c>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 800b7cc:	bf28      	it	cs
 800b7ce:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	bf18      	it	ne
 800b7d4:	2401      	movne	r4, #1
}
 800b7d6:	4620      	mov	r0, r4
 800b7d8:	b003      	add	sp, #12
 800b7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7de:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800b86c <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800b7e2:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800b88c <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7e6:	f8d9 3000 	ldr.w	r3, [r9]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	b91b      	cbnz	r3, 800b7f6 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7ee:	f04f 33ff 	mov.w	r3, #4294967295
 800b7f2:	6033      	str	r3, [r6, #0]
					break;
 800b7f4:	e7e1      	b.n	800b7ba <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7f6:	f8d9 3000 	ldr.w	r3, [r9]
 800b7fa:	68db      	ldr	r3, [r3, #12]
 800b7fc:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b800:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 800b804:	4295      	cmp	r5, r2
 800b806:	d201      	bcs.n	800b80c <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 800b808:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b80a:	e7d6      	b.n	800b7ba <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b80c:	f10b 0104 	add.w	r1, fp, #4
 800b810:	4608      	mov	r0, r1
 800b812:	9101      	str	r1, [sp, #4]
 800b814:	f7fe ff19 	bl	800a64a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b818:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 800b81c:	9901      	ldr	r1, [sp, #4]
 800b81e:	b122      	cbz	r2, 800b82a <xTaskIncrementTick+0xc6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b820:	f10b 0018 	add.w	r0, fp, #24
 800b824:	f7fe ff11 	bl	800a64a <uxListRemove>
 800b828:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 800b82a:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 800b82e:	f8da 2000 	ldr.w	r2, [sl]
 800b832:	4290      	cmp	r0, r2
 800b834:	d901      	bls.n	800b83a <xTaskIncrementTick+0xd6>
 800b836:	f8ca 0000 	str.w	r0, [sl]
 800b83a:	2314      	movs	r3, #20
 800b83c:	fb03 7000 	mla	r0, r3, r0, r7
 800b840:	f7fe fee0 	bl	800a604 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b844:	f8d8 1000 	ldr.w	r1, [r8]
 800b848:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800b84c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800b84e:	429a      	cmp	r2, r3
 800b850:	bf28      	it	cs
 800b852:	2401      	movcs	r4, #1
 800b854:	e7c7      	b.n	800b7e6 <xTaskIncrementTick+0x82>
		++xPendedTicks;
 800b856:	4a0b      	ldr	r2, [pc, #44]	; (800b884 <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 800b858:	2400      	movs	r4, #0
		++xPendedTicks;
 800b85a:	6813      	ldr	r3, [r2, #0]
 800b85c:	3301      	adds	r3, #1
 800b85e:	6013      	str	r3, [r2, #0]
	return xSwitchRequired;
 800b860:	e7b9      	b.n	800b7d6 <xTaskIncrementTick+0x72>
 800b862:	bf00      	nop
 800b864:	2400e294 	.word	0x2400e294
 800b868:	2400e314 	.word	0x2400e314
 800b86c:	2400de24 	.word	0x2400de24
 800b870:	2400de28 	.word	0x2400de28
 800b874:	2400e2cc 	.word	0x2400e2cc
 800b878:	2400e2c8 	.word	0x2400e2c8
 800b87c:	2400de2c 	.word	0x2400de2c
 800b880:	2400e318 	.word	0x2400e318
 800b884:	2400e2d0 	.word	0x2400e2d0
 800b888:	2400de20 	.word	0x2400de20
 800b88c:	2400e29c 	.word	0x2400e29c

0800b890 <xTaskResumeAll>:
{
 800b890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800b892:	4c31      	ldr	r4, [pc, #196]	; (800b958 <xTaskResumeAll+0xc8>)
 800b894:	6823      	ldr	r3, [r4, #0]
 800b896:	b943      	cbnz	r3, 800b8aa <xTaskResumeAll+0x1a>
 800b898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89c:	f383 8811 	msr	BASEPRI, r3
 800b8a0:	f3bf 8f6f 	isb	sy
 800b8a4:	f3bf 8f4f 	dsb	sy
 800b8a8:	e7fe      	b.n	800b8a8 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800b8aa:	f7fe ff43 	bl	800a734 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800b8ae:	6823      	ldr	r3, [r4, #0]
 800b8b0:	3b01      	subs	r3, #1
 800b8b2:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8b4:	6824      	ldr	r4, [r4, #0]
 800b8b6:	b12c      	cbz	r4, 800b8c4 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 800b8b8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800b8ba:	f7fe ff5b 	bl	800a774 <vPortExitCritical>
}
 800b8be:	4620      	mov	r0, r4
 800b8c0:	b003      	add	sp, #12
 800b8c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b8c4:	4b25      	ldr	r3, [pc, #148]	; (800b95c <xTaskResumeAll+0xcc>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d0f5      	beq.n	800b8b8 <xTaskResumeAll+0x28>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b8cc:	4d24      	ldr	r5, [pc, #144]	; (800b960 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800b8ce:	4e25      	ldr	r6, [pc, #148]	; (800b964 <xTaskResumeAll+0xd4>)
 800b8d0:	4f25      	ldr	r7, [pc, #148]	; (800b968 <xTaskResumeAll+0xd8>)
 800b8d2:	e01e      	b.n	800b912 <xTaskResumeAll+0x82>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8d4:	68eb      	ldr	r3, [r5, #12]
 800b8d6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b8d8:	f104 0018 	add.w	r0, r4, #24
 800b8dc:	f7fe feb5 	bl	800a64a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8e0:	1d21      	adds	r1, r4, #4
 800b8e2:	4608      	mov	r0, r1
 800b8e4:	9101      	str	r1, [sp, #4]
 800b8e6:	f7fe feb0 	bl	800a64a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b8ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b8ec:	6832      	ldr	r2, [r6, #0]
 800b8ee:	9901      	ldr	r1, [sp, #4]
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d900      	bls.n	800b8f6 <xTaskResumeAll+0x66>
 800b8f4:	6033      	str	r3, [r6, #0]
 800b8f6:	2014      	movs	r0, #20
 800b8f8:	fb00 7003 	mla	r0, r0, r3, r7
 800b8fc:	f7fe fe82 	bl	800a604 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b900:	4b1a      	ldr	r3, [pc, #104]	; (800b96c <xTaskResumeAll+0xdc>)
 800b902:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b908:	429a      	cmp	r2, r3
 800b90a:	d302      	bcc.n	800b912 <xTaskResumeAll+0x82>
						xYieldPending = pdTRUE;
 800b90c:	4b18      	ldr	r3, [pc, #96]	; (800b970 <xTaskResumeAll+0xe0>)
 800b90e:	2201      	movs	r2, #1
 800b910:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b912:	682b      	ldr	r3, [r5, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d1dd      	bne.n	800b8d4 <xTaskResumeAll+0x44>
				if( pxTCB != NULL )
 800b918:	b10c      	cbz	r4, 800b91e <xTaskResumeAll+0x8e>
					prvResetNextTaskUnblockTime();
 800b91a:	f7ff fe01 	bl	800b520 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b91e:	4d15      	ldr	r5, [pc, #84]	; (800b974 <xTaskResumeAll+0xe4>)
 800b920:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800b922:	b144      	cbz	r4, 800b936 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 800b924:	4e12      	ldr	r6, [pc, #72]	; (800b970 <xTaskResumeAll+0xe0>)
 800b926:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800b928:	f7ff ff1c 	bl	800b764 <xTaskIncrementTick>
 800b92c:	b100      	cbz	r0, 800b930 <xTaskResumeAll+0xa0>
								xYieldPending = pdTRUE;
 800b92e:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b930:	3c01      	subs	r4, #1
 800b932:	d1f9      	bne.n	800b928 <xTaskResumeAll+0x98>
						xPendedTicks = 0;
 800b934:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800b936:	4b0e      	ldr	r3, [pc, #56]	; (800b970 <xTaskResumeAll+0xe0>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d0bc      	beq.n	800b8b8 <xTaskResumeAll+0x28>
					taskYIELD_IF_USING_PREEMPTION();
 800b93e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b946:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b94a:	f3bf 8f4f 	dsb	sy
 800b94e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800b952:	2401      	movs	r4, #1
 800b954:	e7b1      	b.n	800b8ba <xTaskResumeAll+0x2a>
 800b956:	bf00      	nop
 800b958:	2400e294 	.word	0x2400e294
 800b95c:	2400e28c 	.word	0x2400e28c
 800b960:	2400e2d4 	.word	0x2400e2d4
 800b964:	2400e29c 	.word	0x2400e29c
 800b968:	2400de2c 	.word	0x2400de2c
 800b96c:	2400de20 	.word	0x2400de20
 800b970:	2400e318 	.word	0x2400e318
 800b974:	2400e2d0 	.word	0x2400e2d0

0800b978 <vTaskSetApplicationTaskTag>:
	{
 800b978:	b538      	push	{r3, r4, r5, lr}
 800b97a:	460d      	mov	r5, r1
		if( xTask == NULL )
 800b97c:	4604      	mov	r4, r0
 800b97e:	b908      	cbnz	r0, 800b984 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800b980:	4b04      	ldr	r3, [pc, #16]	; (800b994 <vTaskSetApplicationTaskTag+0x1c>)
 800b982:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800b984:	f7fe fed6 	bl	800a734 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800b988:	6565      	str	r5, [r4, #84]	; 0x54
	}
 800b98a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800b98e:	f7fe bef1 	b.w	800a774 <vPortExitCritical>
 800b992:	bf00      	nop
 800b994:	2400de20 	.word	0x2400de20

0800b998 <xTaskCallApplicationTaskHook>:
	{
 800b998:	4603      	mov	r3, r0
 800b99a:	4608      	mov	r0, r1
		if( xTask == NULL )
 800b99c:	b90b      	cbnz	r3, 800b9a2 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800b99e:	4b03      	ldr	r3, [pc, #12]	; (800b9ac <xTaskCallApplicationTaskHook+0x14>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800b9a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9a4:	b103      	cbz	r3, 800b9a8 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800b9a6:	4718      	bx	r3
	}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	4770      	bx	lr
 800b9ac:	2400de20 	.word	0x2400de20

0800b9b0 <vTaskStartScheduler>:
{
 800b9b0:	b510      	push	{r4, lr}
 800b9b2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b9b4:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b9b6:	aa07      	add	r2, sp, #28
 800b9b8:	a906      	add	r1, sp, #24
 800b9ba:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b9bc:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b9c0:	f7fe fd00 	bl	800a3c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b9c4:	9b05      	ldr	r3, [sp, #20]
 800b9c6:	9a07      	ldr	r2, [sp, #28]
 800b9c8:	9302      	str	r3, [sp, #8]
 800b9ca:	9b06      	ldr	r3, [sp, #24]
 800b9cc:	4919      	ldr	r1, [pc, #100]	; (800ba34 <vTaskStartScheduler+0x84>)
 800b9ce:	481a      	ldr	r0, [pc, #104]	; (800ba38 <vTaskStartScheduler+0x88>)
 800b9d0:	e9cd 4300 	strd	r4, r3, [sp]
 800b9d4:	4623      	mov	r3, r4
 800b9d6:	f7ff fe52 	bl	800b67e <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800b9da:	b340      	cbz	r0, 800ba2e <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 800b9dc:	f000 fa88 	bl	800bef0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800b9e0:	2801      	cmp	r0, #1
 800b9e2:	d119      	bne.n	800ba18 <vTaskStartScheduler+0x68>
 800b9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e8:	f383 8811 	msr	BASEPRI, r3
 800b9ec:	f3bf 8f6f 	isb	sy
 800b9f0:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800b9f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b9f8:	4b10      	ldr	r3, [pc, #64]	; (800ba3c <vTaskStartScheduler+0x8c>)
		traceTASK_SWITCHED_IN();
 800b9fa:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 800b9fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b9fe:	4b10      	ldr	r3, [pc, #64]	; (800ba40 <vTaskStartScheduler+0x90>)
 800ba00:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ba02:	4b10      	ldr	r3, [pc, #64]	; (800ba44 <vTaskStartScheduler+0x94>)
 800ba04:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800ba06:	4b10      	ldr	r3, [pc, #64]	; (800ba48 <vTaskStartScheduler+0x98>)
 800ba08:	6818      	ldr	r0, [r3, #0]
 800ba0a:	f7ff ffc5 	bl	800b998 <xTaskCallApplicationTaskHook>
}
 800ba0e:	b008      	add	sp, #32
 800ba10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800ba14:	f7fe bf1e 	b.w	800a854 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ba18:	3001      	adds	r0, #1
 800ba1a:	d108      	bne.n	800ba2e <vTaskStartScheduler+0x7e>
 800ba1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba20:	f383 8811 	msr	BASEPRI, r3
 800ba24:	f3bf 8f6f 	isb	sy
 800ba28:	f3bf 8f4f 	dsb	sy
 800ba2c:	e7fe      	b.n	800ba2c <vTaskStartScheduler+0x7c>
}
 800ba2e:	b008      	add	sp, #32
 800ba30:	bd10      	pop	{r4, pc}
 800ba32:	bf00      	nop
 800ba34:	080201d8 	.word	0x080201d8
 800ba38:	0800b57d 	.word	0x0800b57d
 800ba3c:	2400e2c8 	.word	0x2400e2c8
 800ba40:	2400e2e8 	.word	0x2400e2e8
 800ba44:	2400e314 	.word	0x2400e314
 800ba48:	2400de20 	.word	0x2400de20

0800ba4c <vTaskSwitchContext>:
{
 800ba4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ba4e:	4b1c      	ldr	r3, [pc, #112]	; (800bac0 <vTaskSwitchContext+0x74>)
 800ba50:	681a      	ldr	r2, [r3, #0]
 800ba52:	4b1c      	ldr	r3, [pc, #112]	; (800bac4 <vTaskSwitchContext+0x78>)
 800ba54:	b112      	cbz	r2, 800ba5c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800ba56:	2201      	movs	r2, #1
 800ba58:	601a      	str	r2, [r3, #0]
}
 800ba5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800ba5c:	4c1a      	ldr	r4, [pc, #104]	; (800bac8 <vTaskSwitchContext+0x7c>)
 800ba5e:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba60:	4e1a      	ldr	r6, [pc, #104]	; (800bacc <vTaskSwitchContext+0x80>)
 800ba62:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800ba64:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800ba66:	6820      	ldr	r0, [r4, #0]
 800ba68:	f7ff ff96 	bl	800b998 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba6c:	6832      	ldr	r2, [r6, #0]
 800ba6e:	4918      	ldr	r1, [pc, #96]	; (800bad0 <vTaskSwitchContext+0x84>)
 800ba70:	fb07 f302 	mul.w	r3, r7, r2
 800ba74:	58cd      	ldr	r5, [r1, r3]
 800ba76:	18c8      	adds	r0, r1, r3
 800ba78:	b1ad      	cbz	r5, 800baa6 <vTaskSwitchContext+0x5a>
 800ba7a:	6845      	ldr	r5, [r0, #4]
 800ba7c:	3308      	adds	r3, #8
 800ba7e:	686d      	ldr	r5, [r5, #4]
 800ba80:	440b      	add	r3, r1
 800ba82:	429d      	cmp	r5, r3
 800ba84:	6045      	str	r5, [r0, #4]
 800ba86:	bf04      	itt	eq
 800ba88:	686b      	ldreq	r3, [r5, #4]
 800ba8a:	6043      	streq	r3, [r0, #4]
 800ba8c:	2314      	movs	r3, #20
 800ba8e:	fb03 1102 	mla	r1, r3, r2, r1
 800ba92:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800ba94:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba96:	68db      	ldr	r3, [r3, #12]
 800ba98:	6023      	str	r3, [r4, #0]
 800ba9a:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800ba9c:	6820      	ldr	r0, [r4, #0]
}
 800ba9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800baa2:	f7ff bf79 	b.w	800b998 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800baa6:	b942      	cbnz	r2, 800baba <vTaskSwitchContext+0x6e>
 800baa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baac:	f383 8811 	msr	BASEPRI, r3
 800bab0:	f3bf 8f6f 	isb	sy
 800bab4:	f3bf 8f4f 	dsb	sy
 800bab8:	e7fe      	b.n	800bab8 <vTaskSwitchContext+0x6c>
 800baba:	3a01      	subs	r2, #1
 800babc:	e7d8      	b.n	800ba70 <vTaskSwitchContext+0x24>
 800babe:	bf00      	nop
 800bac0:	2400e294 	.word	0x2400e294
 800bac4:	2400e318 	.word	0x2400e318
 800bac8:	2400de20 	.word	0x2400de20
 800bacc:	2400e29c 	.word	0x2400e29c
 800bad0:	2400de2c 	.word	0x2400de2c

0800bad4 <vTaskPlaceOnEventList>:
{
 800bad4:	b510      	push	{r4, lr}
 800bad6:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800bad8:	b940      	cbnz	r0, 800baec <vTaskPlaceOnEventList+0x18>
 800bada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bade:	f383 8811 	msr	BASEPRI, r3
 800bae2:	f3bf 8f6f 	isb	sy
 800bae6:	f3bf 8f4f 	dsb	sy
 800baea:	e7fe      	b.n	800baea <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800baec:	4b05      	ldr	r3, [pc, #20]	; (800bb04 <vTaskPlaceOnEventList+0x30>)
 800baee:	6819      	ldr	r1, [r3, #0]
 800baf0:	3118      	adds	r1, #24
 800baf2:	f7fe fd93 	bl	800a61c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800baf6:	4620      	mov	r0, r4
 800baf8:	2101      	movs	r1, #1
}
 800bafa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bafe:	f7ff bcd7 	b.w	800b4b0 <prvAddCurrentTaskToDelayedList>
 800bb02:	bf00      	nop
 800bb04:	2400de20 	.word	0x2400de20

0800bb08 <vTaskPlaceOnEventListRestricted>:
	{
 800bb08:	b538      	push	{r3, r4, r5, lr}
 800bb0a:	460d      	mov	r5, r1
 800bb0c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800bb0e:	b940      	cbnz	r0, 800bb22 <vTaskPlaceOnEventListRestricted+0x1a>
 800bb10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb14:	f383 8811 	msr	BASEPRI, r3
 800bb18:	f3bf 8f6f 	isb	sy
 800bb1c:	f3bf 8f4f 	dsb	sy
 800bb20:	e7fe      	b.n	800bb20 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb22:	4b07      	ldr	r3, [pc, #28]	; (800bb40 <vTaskPlaceOnEventListRestricted+0x38>)
 800bb24:	6819      	ldr	r1, [r3, #0]
 800bb26:	3118      	adds	r1, #24
 800bb28:	f7fe fd6c 	bl	800a604 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800bb2c:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bb2e:	4621      	mov	r1, r4
 800bb30:	bf0c      	ite	eq
 800bb32:	4628      	moveq	r0, r5
 800bb34:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800bb38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bb3c:	f7ff bcb8 	b.w	800b4b0 <prvAddCurrentTaskToDelayedList>
 800bb40:	2400de20 	.word	0x2400de20

0800bb44 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb44:	68c3      	ldr	r3, [r0, #12]
{
 800bb46:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb48:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800bb4a:	b944      	cbnz	r4, 800bb5e <xTaskRemoveFromEventList+0x1a>
 800bb4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb50:	f383 8811 	msr	BASEPRI, r3
 800bb54:	f3bf 8f6f 	isb	sy
 800bb58:	f3bf 8f4f 	dsb	sy
 800bb5c:	e7fe      	b.n	800bb5c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bb5e:	f104 0118 	add.w	r1, r4, #24
 800bb62:	4608      	mov	r0, r1
 800bb64:	9101      	str	r1, [sp, #4]
 800bb66:	f7fe fd70 	bl	800a64a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb6a:	4b12      	ldr	r3, [pc, #72]	; (800bbb4 <xTaskRemoveFromEventList+0x70>)
 800bb6c:	9901      	ldr	r1, [sp, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	b9e3      	cbnz	r3, 800bbac <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bb72:	1d21      	adds	r1, r4, #4
 800bb74:	4608      	mov	r0, r1
 800bb76:	9101      	str	r1, [sp, #4]
 800bb78:	f7fe fd67 	bl	800a64a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bb7c:	4a0e      	ldr	r2, [pc, #56]	; (800bbb8 <xTaskRemoveFromEventList+0x74>)
 800bb7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bb80:	6810      	ldr	r0, [r2, #0]
 800bb82:	9901      	ldr	r1, [sp, #4]
 800bb84:	4283      	cmp	r3, r0
 800bb86:	d900      	bls.n	800bb8a <xTaskRemoveFromEventList+0x46>
 800bb88:	6013      	str	r3, [r2, #0]
 800bb8a:	4a0c      	ldr	r2, [pc, #48]	; (800bbbc <xTaskRemoveFromEventList+0x78>)
 800bb8c:	2014      	movs	r0, #20
 800bb8e:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bb92:	f7fe fd37 	bl	800a604 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bb96:	4b0a      	ldr	r3, [pc, #40]	; (800bbc0 <xTaskRemoveFromEventList+0x7c>)
 800bb98:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d906      	bls.n	800bbb0 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 800bba2:	2001      	movs	r0, #1
 800bba4:	4b07      	ldr	r3, [pc, #28]	; (800bbc4 <xTaskRemoveFromEventList+0x80>)
 800bba6:	6018      	str	r0, [r3, #0]
}
 800bba8:	b002      	add	sp, #8
 800bbaa:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bbac:	4806      	ldr	r0, [pc, #24]	; (800bbc8 <xTaskRemoveFromEventList+0x84>)
 800bbae:	e7f0      	b.n	800bb92 <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 800bbb0:	2000      	movs	r0, #0
	return xReturn;
 800bbb2:	e7f9      	b.n	800bba8 <xTaskRemoveFromEventList+0x64>
 800bbb4:	2400e294 	.word	0x2400e294
 800bbb8:	2400e29c 	.word	0x2400e29c
 800bbbc:	2400de2c 	.word	0x2400de2c
 800bbc0:	2400de20 	.word	0x2400de20
 800bbc4:	2400e318 	.word	0x2400e318
 800bbc8:	2400e2d4 	.word	0x2400e2d4

0800bbcc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bbcc:	4b03      	ldr	r3, [pc, #12]	; (800bbdc <vTaskInternalSetTimeOutState+0x10>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bbd2:	4b03      	ldr	r3, [pc, #12]	; (800bbe0 <vTaskInternalSetTimeOutState+0x14>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	6043      	str	r3, [r0, #4]
}
 800bbd8:	4770      	bx	lr
 800bbda:	bf00      	nop
 800bbdc:	2400e2cc 	.word	0x2400e2cc
 800bbe0:	2400e314 	.word	0x2400e314

0800bbe4 <xTaskCheckForTimeOut>:
{
 800bbe4:	b570      	push	{r4, r5, r6, lr}
 800bbe6:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800bbe8:	4605      	mov	r5, r0
 800bbea:	b940      	cbnz	r0, 800bbfe <xTaskCheckForTimeOut+0x1a>
 800bbec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf0:	f383 8811 	msr	BASEPRI, r3
 800bbf4:	f3bf 8f6f 	isb	sy
 800bbf8:	f3bf 8f4f 	dsb	sy
 800bbfc:	e7fe      	b.n	800bbfc <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800bbfe:	b941      	cbnz	r1, 800bc12 <xTaskCheckForTimeOut+0x2e>
 800bc00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc04:	f383 8811 	msr	BASEPRI, r3
 800bc08:	f3bf 8f6f 	isb	sy
 800bc0c:	f3bf 8f4f 	dsb	sy
 800bc10:	e7fe      	b.n	800bc10 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800bc12:	f7fe fd8f 	bl	800a734 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800bc16:	4b0f      	ldr	r3, [pc, #60]	; (800bc54 <xTaskCheckForTimeOut+0x70>)
 800bc18:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800bc1a:	6823      	ldr	r3, [r4, #0]
 800bc1c:	1c5a      	adds	r2, r3, #1
 800bc1e:	d010      	beq.n	800bc42 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bc20:	480d      	ldr	r0, [pc, #52]	; (800bc58 <xTaskCheckForTimeOut+0x74>)
 800bc22:	682e      	ldr	r6, [r5, #0]
 800bc24:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bc26:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bc28:	4286      	cmp	r6, r0
 800bc2a:	d001      	beq.n	800bc30 <xTaskCheckForTimeOut+0x4c>
 800bc2c:	428a      	cmp	r2, r1
 800bc2e:	d90f      	bls.n	800bc50 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bc30:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bc32:	4283      	cmp	r3, r0
 800bc34:	d90a      	bls.n	800bc4c <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800bc36:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bc38:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800bc3a:	4413      	add	r3, r2
 800bc3c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bc3e:	f7ff ffc5 	bl	800bbcc <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800bc42:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800bc44:	f7fe fd96 	bl	800a774 <vPortExitCritical>
}
 800bc48:	4620      	mov	r0, r4
 800bc4a:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800bc50:	2401      	movs	r4, #1
 800bc52:	e7f7      	b.n	800bc44 <xTaskCheckForTimeOut+0x60>
 800bc54:	2400e314 	.word	0x2400e314
 800bc58:	2400e2cc 	.word	0x2400e2cc

0800bc5c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800bc5c:	4b01      	ldr	r3, [pc, #4]	; (800bc64 <vTaskMissedYield+0x8>)
 800bc5e:	2201      	movs	r2, #1
 800bc60:	601a      	str	r2, [r3, #0]
}
 800bc62:	4770      	bx	lr
 800bc64:	2400e318 	.word	0x2400e318

0800bc68 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800bc68:	4b05      	ldr	r3, [pc, #20]	; (800bc80 <xTaskGetSchedulerState+0x18>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	b133      	cbz	r3, 800bc7c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc6e:	4b05      	ldr	r3, [pc, #20]	; (800bc84 <xTaskGetSchedulerState+0x1c>)
 800bc70:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	bf0c      	ite	eq
 800bc76:	2002      	moveq	r0, #2
 800bc78:	2000      	movne	r0, #0
 800bc7a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bc7c:	2001      	movs	r0, #1
	}
 800bc7e:	4770      	bx	lr
 800bc80:	2400e2e8 	.word	0x2400e2e8
 800bc84:	2400e294 	.word	0x2400e294

0800bc88 <xTaskPriorityInherit>:
	{
 800bc88:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800bc8a:	4604      	mov	r4, r0
 800bc8c:	b340      	cbz	r0, 800bce0 <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bc8e:	4d1b      	ldr	r5, [pc, #108]	; (800bcfc <xTaskPriorityInherit+0x74>)
 800bc90:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800bc92:	682a      	ldr	r2, [r5, #0]
 800bc94:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d228      	bcs.n	800bcec <xTaskPriorityInherit+0x64>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bc9a:	6982      	ldr	r2, [r0, #24]
 800bc9c:	2a00      	cmp	r2, #0
 800bc9e:	db04      	blt.n	800bcaa <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bca0:	682a      	ldr	r2, [r5, #0]
 800bca2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800bca4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800bca8:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bcaa:	2214      	movs	r2, #20
 800bcac:	4e14      	ldr	r6, [pc, #80]	; (800bd00 <xTaskPriorityInherit+0x78>)
 800bcae:	fb02 6303 	mla	r3, r2, r3, r6
 800bcb2:	6962      	ldr	r2, [r4, #20]
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d115      	bne.n	800bce4 <xTaskPriorityInherit+0x5c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bcb8:	1d21      	adds	r1, r4, #4
 800bcba:	4608      	mov	r0, r1
 800bcbc:	9101      	str	r1, [sp, #4]
 800bcbe:	f7fe fcc4 	bl	800a64a <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bcc2:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bcc4:	4a0f      	ldr	r2, [pc, #60]	; (800bd04 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bcc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bcc8:	6810      	ldr	r0, [r2, #0]
 800bcca:	9901      	ldr	r1, [sp, #4]
 800bccc:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bcce:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bcd0:	d900      	bls.n	800bcd4 <xTaskPriorityInherit+0x4c>
 800bcd2:	6013      	str	r3, [r2, #0]
 800bcd4:	2014      	movs	r0, #20
 800bcd6:	fb00 6003 	mla	r0, r0, r3, r6
 800bcda:	f7fe fc93 	bl	800a604 <vListInsertEnd>
				xReturn = pdTRUE;
 800bcde:	2001      	movs	r0, #1
	}
 800bce0:	b002      	add	sp, #8
 800bce2:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bce4:	682b      	ldr	r3, [r5, #0]
 800bce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bce8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bcea:	e7f8      	b.n	800bcde <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bcec:	682b      	ldr	r3, [r5, #0]
 800bcee:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800bcf0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800bcf2:	42a0      	cmp	r0, r4
 800bcf4:	bf2c      	ite	cs
 800bcf6:	2000      	movcs	r0, #0
 800bcf8:	2001      	movcc	r0, #1
 800bcfa:	e7f1      	b.n	800bce0 <xTaskPriorityInherit+0x58>
 800bcfc:	2400de20 	.word	0x2400de20
 800bd00:	2400de2c 	.word	0x2400de2c
 800bd04:	2400e29c 	.word	0x2400e29c

0800bd08 <xTaskPriorityDisinherit>:
	{
 800bd08:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 800bd0a:	b910      	cbnz	r0, 800bd12 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800bd0c:	2000      	movs	r0, #0
	}
 800bd0e:	b002      	add	sp, #8
 800bd10:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800bd12:	4b1c      	ldr	r3, [pc, #112]	; (800bd84 <xTaskPriorityDisinherit+0x7c>)
 800bd14:	681c      	ldr	r4, [r3, #0]
 800bd16:	4284      	cmp	r4, r0
 800bd18:	d008      	beq.n	800bd2c <xTaskPriorityDisinherit+0x24>
 800bd1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd1e:	f383 8811 	msr	BASEPRI, r3
 800bd22:	f3bf 8f6f 	isb	sy
 800bd26:	f3bf 8f4f 	dsb	sy
 800bd2a:	e7fe      	b.n	800bd2a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800bd2c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800bd2e:	b943      	cbnz	r3, 800bd42 <xTaskPriorityDisinherit+0x3a>
 800bd30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd34:	f383 8811 	msr	BASEPRI, r3
 800bd38:	f3bf 8f6f 	isb	sy
 800bd3c:	f3bf 8f4f 	dsb	sy
 800bd40:	e7fe      	b.n	800bd40 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bd42:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800bd44:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bd46:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800bd48:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bd4a:	4291      	cmp	r1, r2
 800bd4c:	d0de      	beq.n	800bd0c <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d1dc      	bne.n	800bd0c <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd52:	1d21      	adds	r1, r4, #4
 800bd54:	4608      	mov	r0, r1
 800bd56:	9101      	str	r1, [sp, #4]
 800bd58:	f7fe fc77 	bl	800a64a <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bd5c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 800bd5e:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd60:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bd64:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd66:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800bd68:	4a07      	ldr	r2, [pc, #28]	; (800bd88 <xTaskPriorityDisinherit+0x80>)
 800bd6a:	6810      	ldr	r0, [r2, #0]
 800bd6c:	4283      	cmp	r3, r0
 800bd6e:	d900      	bls.n	800bd72 <xTaskPriorityDisinherit+0x6a>
 800bd70:	6013      	str	r3, [r2, #0]
 800bd72:	4a06      	ldr	r2, [pc, #24]	; (800bd8c <xTaskPriorityDisinherit+0x84>)
 800bd74:	2014      	movs	r0, #20
 800bd76:	fb00 2003 	mla	r0, r0, r3, r2
 800bd7a:	f7fe fc43 	bl	800a604 <vListInsertEnd>
					xReturn = pdTRUE;
 800bd7e:	2001      	movs	r0, #1
		return xReturn;
 800bd80:	e7c5      	b.n	800bd0e <xTaskPriorityDisinherit+0x6>
 800bd82:	bf00      	nop
 800bd84:	2400de20 	.word	0x2400de20
 800bd88:	2400e29c 	.word	0x2400e29c
 800bd8c:	2400de2c 	.word	0x2400de2c

0800bd90 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800bd90:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800bd92:	4604      	mov	r4, r0
 800bd94:	2800      	cmp	r0, #0
 800bd96:	d044      	beq.n	800be22 <vTaskPriorityDisinheritAfterTimeout+0x92>
			configASSERT( pxTCB->uxMutexesHeld );
 800bd98:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800bd9a:	b942      	cbnz	r2, 800bdae <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800bd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda0:	f383 8811 	msr	BASEPRI, r3
 800bda4:	f3bf 8f6f 	isb	sy
 800bda8:	f3bf 8f4f 	dsb	sy
 800bdac:	e7fe      	b.n	800bdac <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bdae:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800bdb0:	4299      	cmp	r1, r3
 800bdb2:	bf38      	it	cc
 800bdb4:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bdb6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800bdb8:	428b      	cmp	r3, r1
 800bdba:	d032      	beq.n	800be22 <vTaskPriorityDisinheritAfterTimeout+0x92>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bdbc:	2a01      	cmp	r2, #1
 800bdbe:	d130      	bne.n	800be22 <vTaskPriorityDisinheritAfterTimeout+0x92>
					configASSERT( pxTCB != pxCurrentTCB );
 800bdc0:	4a19      	ldr	r2, [pc, #100]	; (800be28 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800bdc2:	6812      	ldr	r2, [r2, #0]
 800bdc4:	4282      	cmp	r2, r0
 800bdc6:	d108      	bne.n	800bdda <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800bdc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdcc:	f383 8811 	msr	BASEPRI, r3
 800bdd0:	f3bf 8f6f 	isb	sy
 800bdd4:	f3bf 8f4f 	dsb	sy
 800bdd8:	e7fe      	b.n	800bdd8 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bdda:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bddc:	4d13      	ldr	r5, [pc, #76]	; (800be2c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bdde:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bde0:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800bde4:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bde6:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdea:	bfa8      	it	ge
 800bdec:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bdf0:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdf2:	bfa8      	it	ge
 800bdf4:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d113      	bne.n	800be22 <vTaskPriorityDisinheritAfterTimeout+0x92>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bdfa:	1d01      	adds	r1, r0, #4
 800bdfc:	4608      	mov	r0, r1
 800bdfe:	9101      	str	r1, [sp, #4]
 800be00:	f7fe fc23 	bl	800a64a <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800be04:	4a0a      	ldr	r2, [pc, #40]	; (800be30 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 800be06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800be08:	6810      	ldr	r0, [r2, #0]
 800be0a:	9901      	ldr	r1, [sp, #4]
 800be0c:	4283      	cmp	r3, r0
 800be0e:	d900      	bls.n	800be12 <vTaskPriorityDisinheritAfterTimeout+0x82>
 800be10:	6013      	str	r3, [r2, #0]
 800be12:	2014      	movs	r0, #20
 800be14:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800be18:	b003      	add	sp, #12
 800be1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 800be1e:	f7fe bbf1 	b.w	800a604 <vListInsertEnd>
	}
 800be22:	b003      	add	sp, #12
 800be24:	bd30      	pop	{r4, r5, pc}
 800be26:	bf00      	nop
 800be28:	2400de20 	.word	0x2400de20
 800be2c:	2400de2c 	.word	0x2400de2c
 800be30:	2400e29c 	.word	0x2400e29c

0800be34 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800be34:	4b04      	ldr	r3, [pc, #16]	; (800be48 <pvTaskIncrementMutexHeldCount+0x14>)
 800be36:	681a      	ldr	r2, [r3, #0]
 800be38:	b11a      	cbz	r2, 800be42 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800be3a:	6819      	ldr	r1, [r3, #0]
 800be3c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800be3e:	3201      	adds	r2, #1
 800be40:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 800be42:	6818      	ldr	r0, [r3, #0]
	}
 800be44:	4770      	bx	lr
 800be46:	bf00      	nop
 800be48:	2400de20 	.word	0x2400de20

0800be4c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800be4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800be4e:	4c11      	ldr	r4, [pc, #68]	; (800be94 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800be50:	f7fe fc70 	bl	800a734 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800be54:	6825      	ldr	r5, [r4, #0]
 800be56:	b9bd      	cbnz	r5, 800be88 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800be58:	4f0f      	ldr	r7, [pc, #60]	; (800be98 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800be5a:	4e10      	ldr	r6, [pc, #64]	; (800be9c <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800be5c:	4638      	mov	r0, r7
 800be5e:	f7fe fbc3 	bl	800a5e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800be62:	4630      	mov	r0, r6
 800be64:	f7fe fbc0 	bl	800a5e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800be68:	4b0d      	ldr	r3, [pc, #52]	; (800bea0 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800be6a:	4a0e      	ldr	r2, [pc, #56]	; (800bea4 <prvCheckForValidListAndQueue+0x58>)
 800be6c:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800be6e:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800be70:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800be72:	4b0d      	ldr	r3, [pc, #52]	; (800bea8 <prvCheckForValidListAndQueue+0x5c>)
 800be74:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800be76:	4b0d      	ldr	r3, [pc, #52]	; (800beac <prvCheckForValidListAndQueue+0x60>)
 800be78:	9500      	str	r5, [sp, #0]
 800be7a:	f7fe fe6b 	bl	800ab54 <xQueueGenericCreateStatic>
 800be7e:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800be80:	b110      	cbz	r0, 800be88 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800be82:	490b      	ldr	r1, [pc, #44]	; (800beb0 <prvCheckForValidListAndQueue+0x64>)
 800be84:	f7ff fa36 	bl	800b2f4 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800be88:	b003      	add	sp, #12
 800be8a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800be8e:	f7fe bc71 	b.w	800a774 <vPortExitCritical>
 800be92:	bf00      	nop
 800be94:	2400e440 	.word	0x2400e440
 800be98:	2400e3c4 	.word	0x2400e3c4
 800be9c:	2400e3d8 	.word	0x2400e3d8
 800bea0:	2400e31c 	.word	0x2400e31c
 800bea4:	2400e324 	.word	0x2400e324
 800bea8:	2400e320 	.word	0x2400e320
 800beac:	2400e3f0 	.word	0x2400e3f0
 800beb0:	080201dd 	.word	0x080201dd

0800beb4 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 800beb4:	4291      	cmp	r1, r2
{
 800beb6:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800beb8:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800beba:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800bebc:	d80a      	bhi.n	800bed4 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bebe:	1ad2      	subs	r2, r2, r3
 800bec0:	6983      	ldr	r3, [r0, #24]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d20d      	bcs.n	800bee2 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bec6:	1d01      	adds	r1, r0, #4
 800bec8:	4b07      	ldr	r3, [pc, #28]	; (800bee8 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800beca:	6818      	ldr	r0, [r3, #0]
 800becc:	f7fe fba6 	bl	800a61c <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800bed0:	2000      	movs	r0, #0
}
 800bed2:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d201      	bcs.n	800bedc <prvInsertTimerInActiveList+0x28>
 800bed8:	4299      	cmp	r1, r3
 800beda:	d202      	bcs.n	800bee2 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bedc:	1d01      	adds	r1, r0, #4
 800bede:	4b03      	ldr	r3, [pc, #12]	; (800beec <prvInsertTimerInActiveList+0x38>)
 800bee0:	e7f3      	b.n	800beca <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800bee2:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800bee4:	e7f5      	b.n	800bed2 <prvInsertTimerInActiveList+0x1e>
 800bee6:	bf00      	nop
 800bee8:	2400e320 	.word	0x2400e320
 800beec:	2400e31c 	.word	0x2400e31c

0800bef0 <xTimerCreateTimerTask>:
{
 800bef0:	b510      	push	{r4, lr}
 800bef2:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800bef4:	f7ff ffaa 	bl	800be4c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800bef8:	4b12      	ldr	r3, [pc, #72]	; (800bf44 <xTimerCreateTimerTask+0x54>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	b1b3      	cbz	r3, 800bf2c <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800befe:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bf00:	aa07      	add	r2, sp, #28
 800bf02:	a906      	add	r1, sp, #24
 800bf04:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bf06:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bf0a:	f7fe fa67 	bl	800a3dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bf0e:	9b05      	ldr	r3, [sp, #20]
 800bf10:	9a07      	ldr	r2, [sp, #28]
 800bf12:	9302      	str	r3, [sp, #8]
 800bf14:	9b06      	ldr	r3, [sp, #24]
 800bf16:	490c      	ldr	r1, [pc, #48]	; (800bf48 <xTimerCreateTimerTask+0x58>)
 800bf18:	9301      	str	r3, [sp, #4]
 800bf1a:	2302      	movs	r3, #2
 800bf1c:	480b      	ldr	r0, [pc, #44]	; (800bf4c <xTimerCreateTimerTask+0x5c>)
 800bf1e:	9300      	str	r3, [sp, #0]
 800bf20:	4623      	mov	r3, r4
 800bf22:	f7ff fbac 	bl	800b67e <xTaskCreateStatic>
 800bf26:	4b0a      	ldr	r3, [pc, #40]	; (800bf50 <xTimerCreateTimerTask+0x60>)
 800bf28:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800bf2a:	b940      	cbnz	r0, 800bf3e <xTimerCreateTimerTask+0x4e>
 800bf2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf30:	f383 8811 	msr	BASEPRI, r3
 800bf34:	f3bf 8f6f 	isb	sy
 800bf38:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800bf3c:	e7fe      	b.n	800bf3c <xTimerCreateTimerTask+0x4c>
}
 800bf3e:	2001      	movs	r0, #1
 800bf40:	b008      	add	sp, #32
 800bf42:	bd10      	pop	{r4, pc}
 800bf44:	2400e440 	.word	0x2400e440
 800bf48:	080201e2 	.word	0x080201e2
 800bf4c:	0800c055 	.word	0x0800c055
 800bf50:	2400e444 	.word	0x2400e444

0800bf54 <xTimerGenericCommand>:
{
 800bf54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800bf56:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800bf58:	4604      	mov	r4, r0
{
 800bf5a:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800bf5c:	b940      	cbnz	r0, 800bf70 <xTimerGenericCommand+0x1c>
 800bf5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf62:	f383 8811 	msr	BASEPRI, r3
 800bf66:	f3bf 8f6f 	isb	sy
 800bf6a:	f3bf 8f4f 	dsb	sy
 800bf6e:	e7fe      	b.n	800bf6e <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800bf70:	4d0c      	ldr	r5, [pc, #48]	; (800bfa4 <xTimerGenericCommand+0x50>)
 800bf72:	6828      	ldr	r0, [r5, #0]
 800bf74:	b178      	cbz	r0, 800bf96 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bf76:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bf78:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bf7a:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bf7e:	dc0c      	bgt.n	800bf9a <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bf80:	f7ff fe72 	bl	800bc68 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bf84:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bf86:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bf88:	4669      	mov	r1, sp
 800bf8a:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bf8c:	bf0c      	ite	eq
 800bf8e:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bf90:	461a      	movne	r2, r3
 800bf92:	f7fe fe94 	bl	800acbe <xQueueGenericSend>
}
 800bf96:	b004      	add	sp, #16
 800bf98:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	4669      	mov	r1, sp
 800bf9e:	f7fe ff41 	bl	800ae24 <xQueueGenericSendFromISR>
 800bfa2:	e7f8      	b.n	800bf96 <xTimerGenericCommand+0x42>
 800bfa4:	2400e440 	.word	0x2400e440

0800bfa8 <prvSampleTimeNow>:
{
 800bfa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800bfac:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800c050 <prvSampleTimeNow+0xa8>
{
 800bfb0:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800bfb2:	f7ff fbd1 	bl	800b758 <xTaskGetTickCount>
 800bfb6:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800bfb8:	f8d8 3000 	ldr.w	r3, [r8]
 800bfbc:	4283      	cmp	r3, r0
 800bfbe:	d940      	bls.n	800c042 <prvSampleTimeNow+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bfc0:	4f21      	ldr	r7, [pc, #132]	; (800c048 <prvSampleTimeNow+0xa0>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bfc2:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	681a      	ldr	r2, [r3, #0]
 800bfca:	b95a      	cbnz	r2, 800bfe4 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800bfcc:	4a1f      	ldr	r2, [pc, #124]	; (800c04c <prvSampleTimeNow+0xa4>)
 800bfce:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bfd0:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800bfd2:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800bfd4:	6039      	str	r1, [r7, #0]
}
 800bfd6:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdFALSE;
 800bfd8:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800bfda:	f8c8 5000 	str.w	r5, [r8]
}
 800bfde:	b004      	add	sp, #16
 800bfe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bfe4:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfe6:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bfe8:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bfec:	1d21      	adds	r1, r4, #4
 800bfee:	4608      	mov	r0, r1
 800bff0:	9103      	str	r1, [sp, #12]
 800bff2:	f7fe fb2a 	bl	800a64a <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bff6:	6a23      	ldr	r3, [r4, #32]
 800bff8:	4620      	mov	r0, r4
 800bffa:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bffc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c000:	9903      	ldr	r1, [sp, #12]
 800c002:	f013 0f04 	tst.w	r3, #4
 800c006:	d0de      	beq.n	800bfc6 <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c008:	69a3      	ldr	r3, [r4, #24]
 800c00a:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800c00c:	459a      	cmp	sl, r3
 800c00e:	d205      	bcs.n	800c01c <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c010:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c012:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c014:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c016:	f7fe fb01 	bl	800a61c <vListInsert>
 800c01a:	e7d4      	b.n	800bfc6 <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c01c:	2300      	movs	r3, #0
 800c01e:	4652      	mov	r2, sl
 800c020:	4620      	mov	r0, r4
 800c022:	f8cd 9000 	str.w	r9, [sp]
 800c026:	4619      	mov	r1, r3
 800c028:	f7ff ff94 	bl	800bf54 <xTimerGenericCommand>
				configASSERT( xResult );
 800c02c:	2800      	cmp	r0, #0
 800c02e:	d1ca      	bne.n	800bfc6 <prvSampleTimeNow+0x1e>
 800c030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c034:	f383 8811 	msr	BASEPRI, r3
 800c038:	f3bf 8f6f 	isb	sy
 800c03c:	f3bf 8f4f 	dsb	sy
 800c040:	e7fe      	b.n	800c040 <prvSampleTimeNow+0x98>
		*pxTimerListsWereSwitched = pdFALSE;
 800c042:	2300      	movs	r3, #0
 800c044:	e7c7      	b.n	800bfd6 <prvSampleTimeNow+0x2e>
 800c046:	bf00      	nop
 800c048:	2400e31c 	.word	0x2400e31c
 800c04c:	2400e320 	.word	0x2400e320
 800c050:	2400e3ec 	.word	0x2400e3ec

0800c054 <prvTimerTask>:
{
 800c054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c058:	4d6e      	ldr	r5, [pc, #440]	; (800c214 <prvTimerTask+0x1c0>)
{
 800c05a:	b089      	sub	sp, #36	; 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c05c:	4e6e      	ldr	r6, [pc, #440]	; (800c218 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c05e:	682b      	ldr	r3, [r5, #0]
 800c060:	f8d3 8000 	ldr.w	r8, [r3]
 800c064:	f1b8 0f00 	cmp.w	r8, #0
 800c068:	d035      	beq.n	800c0d6 <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c06a:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c06c:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c06e:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800c072:	f7ff fb69 	bl	800b748 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c076:	a804      	add	r0, sp, #16
 800c078:	f7ff ff96 	bl	800bfa8 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800c07c:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c07e:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800c080:	2b00      	cmp	r3, #0
 800c082:	d169      	bne.n	800c158 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c084:	2c00      	cmp	r4, #0
 800c086:	d14c      	bne.n	800c122 <prvTimerTask+0xce>
 800c088:	4540      	cmp	r0, r8
 800c08a:	d350      	bcc.n	800c12e <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 800c08c:	f7ff fc00 	bl	800b890 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c090:	682b      	ldr	r3, [r5, #0]
 800c092:	68db      	ldr	r3, [r3, #12]
 800c094:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c096:	1d38      	adds	r0, r7, #4
 800c098:	f7fe fad7 	bl	800a64a <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c09c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c0a0:	0758      	lsls	r0, r3, #29
 800c0a2:	d51a      	bpl.n	800c0da <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c0a4:	69b9      	ldr	r1, [r7, #24]
 800c0a6:	4643      	mov	r3, r8
 800c0a8:	464a      	mov	r2, r9
 800c0aa:	4638      	mov	r0, r7
 800c0ac:	4441      	add	r1, r8
 800c0ae:	f7ff ff01 	bl	800beb4 <prvInsertTimerInActiveList>
 800c0b2:	b1b0      	cbz	r0, 800c0e2 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c0b4:	4623      	mov	r3, r4
 800c0b6:	4642      	mov	r2, r8
 800c0b8:	4621      	mov	r1, r4
 800c0ba:	4638      	mov	r0, r7
 800c0bc:	9400      	str	r4, [sp, #0]
 800c0be:	f7ff ff49 	bl	800bf54 <xTimerGenericCommand>
			configASSERT( xResult );
 800c0c2:	b970      	cbnz	r0, 800c0e2 <prvTimerTask+0x8e>
 800c0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c8:	f383 8811 	msr	BASEPRI, r3
 800c0cc:	f3bf 8f6f 	isb	sy
 800c0d0:	f3bf 8f4f 	dsb	sy
 800c0d4:	e7fe      	b.n	800c0d4 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c0d6:	2401      	movs	r4, #1
 800c0d8:	e7cb      	b.n	800c072 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c0da:	f023 0301 	bic.w	r3, r3, #1
 800c0de:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c0e2:	6a3b      	ldr	r3, [r7, #32]
 800c0e4:	4638      	mov	r0, r7
 800c0e6:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	a904      	add	r1, sp, #16
 800c0ec:	6830      	ldr	r0, [r6, #0]
 800c0ee:	f7fe ff4f 	bl	800af90 <xQueueReceive>
 800c0f2:	2800      	cmp	r0, #0
 800c0f4:	d0b3      	beq.n	800c05e <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c0f6:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c0f8:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	db2f      	blt.n	800c15e <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c0fe:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c100:	6963      	ldr	r3, [r4, #20]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d132      	bne.n	800c16c <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c106:	a803      	add	r0, sp, #12
 800c108:	f7ff ff4e 	bl	800bfa8 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800c10c:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c10e:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800c110:	2b09      	cmp	r3, #9
 800c112:	d8e9      	bhi.n	800c0e8 <prvTimerTask+0x94>
 800c114:	e8df f003 	tbb	[pc, r3]
 800c118:	572e2e2e 	.word	0x572e2e2e
 800c11c:	2e2e765e 	.word	0x2e2e765e
 800c120:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c122:	4b3e      	ldr	r3, [pc, #248]	; (800c21c <prvTimerTask+0x1c8>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	681c      	ldr	r4, [r3, #0]
 800c128:	fab4 f484 	clz	r4, r4
 800c12c:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c12e:	4622      	mov	r2, r4
 800c130:	eba8 0109 	sub.w	r1, r8, r9
 800c134:	6830      	ldr	r0, [r6, #0]
 800c136:	f7ff f91a 	bl	800b36e <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c13a:	f7ff fba9 	bl	800b890 <xTaskResumeAll>
 800c13e:	2800      	cmp	r0, #0
 800c140:	d1d2      	bne.n	800c0e8 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 800c142:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c14a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800c14e:	f3bf 8f4f 	dsb	sy
 800c152:	f3bf 8f6f 	isb	sy
 800c156:	e7c7      	b.n	800c0e8 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 800c158:	f7ff fb9a 	bl	800b890 <xTaskResumeAll>
}
 800c15c:	e7c4      	b.n	800c0e8 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c15e:	9b05      	ldr	r3, [sp, #20]
 800c160:	9907      	ldr	r1, [sp, #28]
 800c162:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c164:	9b04      	ldr	r3, [sp, #16]
 800c166:	2b00      	cmp	r3, #0
 800c168:	dbbe      	blt.n	800c0e8 <prvTimerTask+0x94>
 800c16a:	e7c8      	b.n	800c0fe <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c16c:	1d20      	adds	r0, r4, #4
 800c16e:	f7fe fa6c 	bl	800a64a <uxListRemove>
 800c172:	e7c8      	b.n	800c106 <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c174:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c178:	4620      	mov	r0, r4
 800c17a:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c17c:	f043 0301 	orr.w	r3, r3, #1
 800c180:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c184:	9b05      	ldr	r3, [sp, #20]
 800c186:	4419      	add	r1, r3
 800c188:	f7ff fe94 	bl	800beb4 <prvInsertTimerInActiveList>
 800c18c:	2800      	cmp	r0, #0
 800c18e:	d0ab      	beq.n	800c0e8 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c190:	6a23      	ldr	r3, [r4, #32]
 800c192:	4620      	mov	r0, r4
 800c194:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c196:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c19a:	0759      	lsls	r1, r3, #29
 800c19c:	d5a4      	bpl.n	800c0e8 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c19e:	69a2      	ldr	r2, [r4, #24]
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	9905      	ldr	r1, [sp, #20]
 800c1a4:	4620      	mov	r0, r4
 800c1a6:	9300      	str	r3, [sp, #0]
 800c1a8:	440a      	add	r2, r1
 800c1aa:	4619      	mov	r1, r3
 800c1ac:	f7ff fed2 	bl	800bf54 <xTimerGenericCommand>
							configASSERT( xResult );
 800c1b0:	2800      	cmp	r0, #0
 800c1b2:	d199      	bne.n	800c0e8 <prvTimerTask+0x94>
 800c1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b8:	f383 8811 	msr	BASEPRI, r3
 800c1bc:	f3bf 8f6f 	isb	sy
 800c1c0:	f3bf 8f4f 	dsb	sy
 800c1c4:	e7fe      	b.n	800c1c4 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c1c6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c1ca:	f023 0301 	bic.w	r3, r3, #1
 800c1ce:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800c1d2:	e789      	b.n	800c0e8 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c1d4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c1d8:	f043 0301 	orr.w	r3, r3, #1
 800c1dc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c1e0:	9905      	ldr	r1, [sp, #20]
 800c1e2:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c1e4:	b941      	cbnz	r1, 800c1f8 <prvTimerTask+0x1a4>
 800c1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ea:	f383 8811 	msr	BASEPRI, r3
 800c1ee:	f3bf 8f6f 	isb	sy
 800c1f2:	f3bf 8f4f 	dsb	sy
 800c1f6:	e7fe      	b.n	800c1f6 <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	4401      	add	r1, r0
 800c1fc:	4620      	mov	r0, r4
 800c1fe:	f7ff fe59 	bl	800beb4 <prvInsertTimerInActiveList>
					break;
 800c202:	e771      	b.n	800c0e8 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c204:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c208:	079a      	lsls	r2, r3, #30
 800c20a:	d4de      	bmi.n	800c1ca <prvTimerTask+0x176>
							vPortFree( pxTimer );
 800c20c:	4620      	mov	r0, r4
 800c20e:	f7fe f9ad 	bl	800a56c <vPortFree>
 800c212:	e769      	b.n	800c0e8 <prvTimerTask+0x94>
 800c214:	2400e31c 	.word	0x2400e31c
 800c218:	2400e440 	.word	0x2400e440
 800c21c:	2400e320 	.word	0x2400e320

0800c220 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800c220:	8880      	ldrh	r0, [r0, #4]
 800c222:	4770      	bx	lr

0800c224 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800c224:	b570      	push	{r4, r5, r6, lr}
 800c226:	6803      	ldr	r3, [r0, #0]
 800c228:	460c      	mov	r4, r1
 800c22a:	2100      	movs	r1, #0
 800c22c:	4605      	mov	r5, r0
 800c22e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c230:	4798      	blx	r3
 800c232:	4606      	mov	r6, r0
 800c234:	682b      	ldr	r3, [r5, #0]
 800c236:	4628      	mov	r0, r5
 800c238:	1ba4      	subs	r4, r4, r6
 800c23a:	6a1b      	ldr	r3, [r3, #32]
 800c23c:	b2a4      	uxth	r4, r4
 800c23e:	4798      	blx	r3
 800c240:	fbb4 f0f0 	udiv	r0, r4, r0
 800c244:	bd70      	pop	{r4, r5, r6, pc}

0800c246 <_ZN8touchgfx17AbstractPartition5clearEv>:
 800c246:	2300      	movs	r3, #0
 800c248:	8083      	strh	r3, [r0, #4]
 800c24a:	4770      	bx	lr

0800c24c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800c24c:	b510      	push	{r4, lr}
 800c24e:	6803      	ldr	r3, [r0, #0]
 800c250:	4604      	mov	r4, r0
 800c252:	8881      	ldrh	r1, [r0, #4]
 800c254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c256:	4798      	blx	r3
 800c258:	88a3      	ldrh	r3, [r4, #4]
 800c25a:	3301      	adds	r3, #1
 800c25c:	80a3      	strh	r3, [r4, #4]
 800c25e:	bd10      	pop	{r4, pc}

0800c260 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800c260:	6803      	ldr	r3, [r0, #0]
 800c262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c264:	4718      	bx	r3

0800c266 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800c266:	4770      	bx	lr

0800c268 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800c268:	4a02      	ldr	r2, [pc, #8]	; (800c274 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800c26a:	6002      	str	r2, [r0, #0]
 800c26c:	2200      	movs	r2, #0
 800c26e:	8082      	strh	r2, [r0, #4]
 800c270:	4770      	bx	lr
 800c272:	bf00      	nop
 800c274:	080201f4 	.word	0x080201f4

0800c278 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800c278:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c27a:	2000      	movs	r0, #0
 800c27c:	b12b      	cbz	r3, 800c28a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800c27e:	b920      	cbnz	r0, 800c28a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800c280:	1a5a      	subs	r2, r3, r1
 800c282:	699b      	ldr	r3, [r3, #24]
 800c284:	4250      	negs	r0, r2
 800c286:	4150      	adcs	r0, r2
 800c288:	e7f8      	b.n	800c27c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800c28a:	4770      	bx	lr

0800c28c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800c28c:	2300      	movs	r3, #0
 800c28e:	6148      	str	r0, [r1, #20]
 800c290:	618b      	str	r3, [r1, #24]
 800c292:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c294:	b913      	cbnz	r3, 800c29c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800c296:	6281      	str	r1, [r0, #40]	; 0x28
 800c298:	4770      	bx	lr
 800c29a:	4613      	mov	r3, r2
 800c29c:	699a      	ldr	r2, [r3, #24]
 800c29e:	2a00      	cmp	r2, #0
 800c2a0:	d1fb      	bne.n	800c29a <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800c2a2:	6199      	str	r1, [r3, #24]
 800c2a4:	4770      	bx	lr

0800c2a6 <_ZN8touchgfx9Container9removeAllEv>:
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c2aa:	b123      	cbz	r3, 800c2b6 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800c2ac:	6999      	ldr	r1, [r3, #24]
 800c2ae:	6281      	str	r1, [r0, #40]	; 0x28
 800c2b0:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800c2b4:	e7f8      	b.n	800c2a8 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800c2b6:	4770      	bx	lr

0800c2b8 <_ZN8touchgfx9Container6unlinkEv>:
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	6283      	str	r3, [r0, #40]	; 0x28
 800c2bc:	4770      	bx	lr

0800c2be <_ZNK8touchgfx9Container12getSolidRectEv>:
 800c2be:	2200      	movs	r2, #0
 800c2c0:	8002      	strh	r2, [r0, #0]
 800c2c2:	8042      	strh	r2, [r0, #2]
 800c2c4:	8082      	strh	r2, [r0, #4]
 800c2c6:	80c2      	strh	r2, [r0, #6]
 800c2c8:	4770      	bx	lr

0800c2ca <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800c2ca:	b570      	push	{r4, r5, r6, lr}
 800c2cc:	460d      	mov	r5, r1
 800c2ce:	4616      	mov	r6, r2
 800c2d0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c2d2:	b13c      	cbz	r4, 800c2e4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800c2d4:	6823      	ldr	r3, [r4, #0]
 800c2d6:	4620      	mov	r0, r4
 800c2d8:	4632      	mov	r2, r6
 800c2da:	4629      	mov	r1, r5
 800c2dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2de:	4798      	blx	r3
 800c2e0:	69a4      	ldr	r4, [r4, #24]
 800c2e2:	e7f6      	b.n	800c2d2 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800c2e4:	bd70      	pop	{r4, r5, r6, pc}

0800c2e6 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800c2e6:	b538      	push	{r3, r4, r5, lr}
 800c2e8:	460d      	mov	r5, r1
 800c2ea:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c2ec:	b134      	cbz	r4, 800c2fc <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800c2ee:	682b      	ldr	r3, [r5, #0]
 800c2f0:	4621      	mov	r1, r4
 800c2f2:	4628      	mov	r0, r5
 800c2f4:	689b      	ldr	r3, [r3, #8]
 800c2f6:	4798      	blx	r3
 800c2f8:	69a4      	ldr	r4, [r4, #24]
 800c2fa:	e7f7      	b.n	800c2ec <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800c2fc:	bd38      	pop	{r3, r4, r5, pc}

0800c2fe <_ZN8touchgfx9ContainerD1Ev>:
 800c2fe:	4770      	bx	lr

0800c300 <_ZN8touchgfx9ContainerD0Ev>:
 800c300:	b510      	push	{r4, lr}
 800c302:	4604      	mov	r4, r0
 800c304:	212c      	movs	r1, #44	; 0x2c
 800c306:	f011 fa9a 	bl	801d83e <_ZdlPvj>
 800c30a:	4620      	mov	r0, r4
 800c30c:	bd10      	pop	{r4, pc}

0800c30e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800c30e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c310:	b19b      	cbz	r3, 800c33a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800c312:	428b      	cmp	r3, r1
 800c314:	d109      	bne.n	800c32a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800c316:	699a      	ldr	r2, [r3, #24]
 800c318:	2100      	movs	r1, #0
 800c31a:	6159      	str	r1, [r3, #20]
 800c31c:	6282      	str	r2, [r0, #40]	; 0x28
 800c31e:	b902      	cbnz	r2, 800c322 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800c320:	4770      	bx	lr
 800c322:	6199      	str	r1, [r3, #24]
 800c324:	4770      	bx	lr
 800c326:	4613      	mov	r3, r2
 800c328:	b13a      	cbz	r2, 800c33a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800c32a:	699a      	ldr	r2, [r3, #24]
 800c32c:	428a      	cmp	r2, r1
 800c32e:	d1fa      	bne.n	800c326 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800c330:	698a      	ldr	r2, [r1, #24]
 800c332:	619a      	str	r2, [r3, #24]
 800c334:	2300      	movs	r3, #0
 800c336:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800c33a:	4770      	bx	lr

0800c33c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800c33c:	b410      	push	{r4}
 800c33e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c340:	4604      	mov	r4, r0
 800c342:	b92b      	cbnz	r3, 800c350 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800c344:	6803      	ldr	r3, [r0, #0]
 800c346:	4611      	mov	r1, r2
 800c348:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c34c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c34e:	4718      	bx	r3
 800c350:	b941      	cbnz	r1, 800c364 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800c352:	6193      	str	r3, [r2, #24]
 800c354:	6282      	str	r2, [r0, #40]	; 0x28
 800c356:	6154      	str	r4, [r2, #20]
 800c358:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c35c:	4770      	bx	lr
 800c35e:	4603      	mov	r3, r0
 800c360:	2800      	cmp	r0, #0
 800c362:	d0f9      	beq.n	800c358 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800c364:	4299      	cmp	r1, r3
 800c366:	6998      	ldr	r0, [r3, #24]
 800c368:	d1f9      	bne.n	800c35e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800c36a:	6190      	str	r0, [r2, #24]
 800c36c:	618a      	str	r2, [r1, #24]
 800c36e:	e7f2      	b.n	800c356 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800c370 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800c370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c374:	461f      	mov	r7, r3
 800c376:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800c37a:	460d      	mov	r5, r1
 800c37c:	4616      	mov	r6, r2
 800c37e:	b103      	cbz	r3, 800c382 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800c380:	6038      	str	r0, [r7, #0]
 800c382:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c384:	b314      	cbz	r4, 800c3cc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800c386:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800c38a:	b1eb      	cbz	r3, 800c3c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800c38c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800c390:	428d      	cmp	r5, r1
 800c392:	db19      	blt.n	800c3c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800c394:	b289      	uxth	r1, r1
 800c396:	8923      	ldrh	r3, [r4, #8]
 800c398:	440b      	add	r3, r1
 800c39a:	b21b      	sxth	r3, r3
 800c39c:	429d      	cmp	r5, r3
 800c39e:	da13      	bge.n	800c3c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800c3a0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800c3a4:	4296      	cmp	r6, r2
 800c3a6:	db0f      	blt.n	800c3c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800c3a8:	b292      	uxth	r2, r2
 800c3aa:	8963      	ldrh	r3, [r4, #10]
 800c3ac:	4413      	add	r3, r2
 800c3ae:	b21b      	sxth	r3, r3
 800c3b0:	429e      	cmp	r6, r3
 800c3b2:	da09      	bge.n	800c3c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800c3b4:	6823      	ldr	r3, [r4, #0]
 800c3b6:	1ab2      	subs	r2, r6, r2
 800c3b8:	1a69      	subs	r1, r5, r1
 800c3ba:	4620      	mov	r0, r4
 800c3bc:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 800c3c0:	b212      	sxth	r2, r2
 800c3c2:	463b      	mov	r3, r7
 800c3c4:	b209      	sxth	r1, r1
 800c3c6:	47c0      	blx	r8
 800c3c8:	69a4      	ldr	r4, [r4, #24]
 800c3ca:	e7db      	b.n	800c384 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800c3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c3d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800c3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3d4:	4c6d      	ldr	r4, [pc, #436]	; (800c58c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800c3d6:	b0a1      	sub	sp, #132	; 0x84
 800c3d8:	4606      	mov	r6, r0
 800c3da:	6824      	ldr	r4, [r4, #0]
 800c3dc:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800c3de:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 800c3e2:	2400      	movs	r4, #0
 800c3e4:	9303      	str	r3, [sp, #12]
 800c3e6:	802c      	strh	r4, [r5, #0]
 800c3e8:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800c3ea:	802c      	strh	r4, [r5, #0]
 800c3ec:	601c      	str	r4, [r3, #0]
 800c3ee:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800c3f2:	f7ff ffbd 	bl	800c370 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800c3f6:	f1b9 0f03 	cmp.w	r9, #3
 800c3fa:	f340 80c1 	ble.w	800c580 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800c3fe:	4631      	mov	r1, r6
 800c400:	a80c      	add	r0, sp, #48	; 0x30
 800c402:	f006 fd6d 	bl	8012ee0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800c406:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800c40a:	9306      	str	r3, [sp, #24]
 800c40c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800c410:	9307      	str	r3, [sp, #28]
 800c412:	9b03      	ldr	r3, [sp, #12]
 800c414:	f8d3 a000 	ldr.w	sl, [r3]
 800c418:	f1ba 0f00 	cmp.w	sl, #0
 800c41c:	f000 80b3 	beq.w	800c586 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800c420:	4651      	mov	r1, sl
 800c422:	a810      	add	r0, sp, #64	; 0x40
 800c424:	f006 fd5c 	bl	8012ee0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800c428:	2002      	movs	r0, #2
 800c42a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800c42e:	9b01      	ldr	r3, [sp, #4]
 800c430:	9a06      	ldr	r2, [sp, #24]
 800c432:	fb91 f1f0 	sdiv	r1, r1, r0
 800c436:	189d      	adds	r5, r3, r2
 800c438:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 800c43c:	9a07      	ldr	r2, [sp, #28]
 800c43e:	4419      	add	r1, r3
 800c440:	9b02      	ldr	r3, [sp, #8]
 800c442:	4413      	add	r3, r2
 800c444:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 800c448:	1a6d      	subs	r5, r5, r1
 800c44a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800c44e:	fb92 f2f0 	sdiv	r2, r2, r0
 800c452:	440a      	add	r2, r1
 800c454:	1a9b      	subs	r3, r3, r2
 800c456:	435b      	muls	r3, r3
 800c458:	fb05 3505 	mla	r5, r5, r5, r3
 800c45c:	4f4c      	ldr	r7, [pc, #304]	; (800c590 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800c45e:	ac10      	add	r4, sp, #64	; 0x40
 800c460:	f1b9 0f0c 	cmp.w	r9, #12
 800c464:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c466:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c468:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c46a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c46c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c46e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c470:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800c474:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c478:	f04f 0303 	mov.w	r3, #3
 800c47c:	bfd8      	it	le
 800c47e:	f109 32ff 	addle.w	r2, r9, #4294967295
 800c482:	f04f 0400 	mov.w	r4, #0
 800c486:	f8cd 9000 	str.w	r9, [sp]
 800c48a:	bfcc      	ite	gt
 800c48c:	4698      	movgt	r8, r3
 800c48e:	fb92 f8f3 	sdivle	r8, r2, r3
 800c492:	1c63      	adds	r3, r4, #1
 800c494:	aa10      	add	r2, sp, #64	; 0x40
 800c496:	f004 0401 	and.w	r4, r4, #1
 800c49a:	f04f 0b00 	mov.w	fp, #0
 800c49e:	9308      	str	r3, [sp, #32]
 800c4a0:	9b00      	ldr	r3, [sp, #0]
 800c4a2:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800c4a6:	fb93 f3f8 	sdiv	r3, r3, r8
 800c4aa:	3404      	adds	r4, #4
 800c4ac:	b29b      	uxth	r3, r3
 800c4ae:	9304      	str	r3, [sp, #16]
 800c4b0:	9a04      	ldr	r2, [sp, #16]
 800c4b2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c4b6:	fb13 f302 	smulbb	r3, r3, r2
 800c4ba:	9a01      	ldr	r2, [sp, #4]
 800c4bc:	b29b      	uxth	r3, r3
 800c4be:	1899      	adds	r1, r3, r2
 800c4c0:	9305      	str	r3, [sp, #20]
 800c4c2:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800c4c6:	b209      	sxth	r1, r1
 800c4c8:	4299      	cmp	r1, r3
 800c4ca:	db4d      	blt.n	800c568 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800c4cc:	8932      	ldrh	r2, [r6, #8]
 800c4ce:	4413      	add	r3, r2
 800c4d0:	b21b      	sxth	r3, r3
 800c4d2:	4299      	cmp	r1, r3
 800c4d4:	da48      	bge.n	800c568 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800c4d6:	9b04      	ldr	r3, [sp, #16]
 800c4d8:	6827      	ldr	r7, [r4, #0]
 800c4da:	fb17 f703 	smulbb	r7, r7, r3
 800c4de:	9b02      	ldr	r3, [sp, #8]
 800c4e0:	b2bf      	uxth	r7, r7
 800c4e2:	18fa      	adds	r2, r7, r3
 800c4e4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800c4e8:	b212      	sxth	r2, r2
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	db3c      	blt.n	800c568 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800c4ee:	8970      	ldrh	r0, [r6, #10]
 800c4f0:	4403      	add	r3, r0
 800c4f2:	b21b      	sxth	r3, r3
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	da37      	bge.n	800c568 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	4630      	mov	r0, r6
 800c4fc:	930b      	str	r3, [sp, #44]	; 0x2c
 800c4fe:	ab0b      	add	r3, sp, #44	; 0x2c
 800c500:	f7ff ff36 	bl	800c370 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800c504:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c506:	b37a      	cbz	r2, 800c568 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800c508:	4552      	cmp	r2, sl
 800c50a:	d02d      	beq.n	800c568 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800c50c:	4611      	mov	r1, r2
 800c50e:	a80e      	add	r0, sp, #56	; 0x38
 800c510:	9209      	str	r2, [sp, #36]	; 0x24
 800c512:	f006 fce5 	bl	8012ee0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800c516:	f04f 0e02 	mov.w	lr, #2
 800c51a:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800c51e:	9a06      	ldr	r2, [sp, #24]
 800c520:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 800c524:	9b01      	ldr	r3, [sp, #4]
 800c526:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 800c52a:	4413      	add	r3, r2
 800c52c:	9a07      	ldr	r2, [sp, #28]
 800c52e:	fb91 f1fe 	sdiv	r1, r1, lr
 800c532:	fb9c fcfe 	sdiv	ip, ip, lr
 800c536:	4401      	add	r1, r0
 800c538:	1a58      	subs	r0, r3, r1
 800c53a:	9b02      	ldr	r3, [sp, #8]
 800c53c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 800c540:	4413      	add	r3, r2
 800c542:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c544:	448c      	add	ip, r1
 800c546:	eba3 030c 	sub.w	r3, r3, ip
 800c54a:	435b      	muls	r3, r3
 800c54c:	fb00 3300 	mla	r3, r0, r0, r3
 800c550:	42ab      	cmp	r3, r5
 800c552:	d208      	bcs.n	800c566 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800c554:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c556:	461d      	mov	r5, r3
 800c558:	9803      	ldr	r0, [sp, #12]
 800c55a:	6001      	str	r1, [r0, #0]
 800c55c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800c55e:	9805      	ldr	r0, [sp, #20]
 800c560:	8008      	strh	r0, [r1, #0]
 800c562:	992b      	ldr	r1, [sp, #172]	; 0xac
 800c564:	800f      	strh	r7, [r1, #0]
 800c566:	4692      	mov	sl, r2
 800c568:	f10b 0b01 	add.w	fp, fp, #1
 800c56c:	3408      	adds	r4, #8
 800c56e:	f1bb 0f04 	cmp.w	fp, #4
 800c572:	d19d      	bne.n	800c4b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800c574:	9b00      	ldr	r3, [sp, #0]
 800c576:	9c08      	ldr	r4, [sp, #32]
 800c578:	444b      	add	r3, r9
 800c57a:	4544      	cmp	r4, r8
 800c57c:	9300      	str	r3, [sp, #0]
 800c57e:	d188      	bne.n	800c492 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800c580:	b021      	add	sp, #132	; 0x84
 800c582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c586:	f04f 35ff 	mov.w	r5, #4294967295
 800c58a:	e767      	b.n	800c45c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800c58c:	2400e454 	.word	0x2400e454
 800c590:	0801ea14 	.word	0x0801ea14

0800c594 <_ZN8touchgfx4RectaNERKS0_>:
 800c594:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c598:	f9b1 7000 	ldrsh.w	r7, [r1]
 800c59c:	888c      	ldrh	r4, [r1, #4]
 800c59e:	f9b0 9000 	ldrsh.w	r9, [r0]
 800c5a2:	443c      	add	r4, r7
 800c5a4:	b2a4      	uxth	r4, r4
 800c5a6:	fa0f f884 	sxth.w	r8, r4
 800c5aa:	45c1      	cmp	r9, r8
 800c5ac:	da2f      	bge.n	800c60e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800c5ae:	8882      	ldrh	r2, [r0, #4]
 800c5b0:	444a      	add	r2, r9
 800c5b2:	b292      	uxth	r2, r2
 800c5b4:	fa0f fe82 	sxth.w	lr, r2
 800c5b8:	4577      	cmp	r7, lr
 800c5ba:	da28      	bge.n	800c60e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800c5bc:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800c5c0:	88cb      	ldrh	r3, [r1, #6]
 800c5c2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800c5c6:	442b      	add	r3, r5
 800c5c8:	b21b      	sxth	r3, r3
 800c5ca:	429e      	cmp	r6, r3
 800c5cc:	da1f      	bge.n	800c60e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800c5ce:	88c3      	ldrh	r3, [r0, #6]
 800c5d0:	4433      	add	r3, r6
 800c5d2:	b29b      	uxth	r3, r3
 800c5d4:	fa0f fc83 	sxth.w	ip, r3
 800c5d8:	4565      	cmp	r5, ip
 800c5da:	da18      	bge.n	800c60e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800c5dc:	454f      	cmp	r7, r9
 800c5de:	bfb8      	it	lt
 800c5e0:	464f      	movlt	r7, r9
 800c5e2:	42b5      	cmp	r5, r6
 800c5e4:	bfb8      	it	lt
 800c5e6:	4635      	movlt	r5, r6
 800c5e8:	45f0      	cmp	r8, lr
 800c5ea:	bfd8      	it	le
 800c5ec:	4622      	movle	r2, r4
 800c5ee:	1bd2      	subs	r2, r2, r7
 800c5f0:	8082      	strh	r2, [r0, #4]
 800c5f2:	884a      	ldrh	r2, [r1, #2]
 800c5f4:	88c9      	ldrh	r1, [r1, #6]
 800c5f6:	8007      	strh	r7, [r0, #0]
 800c5f8:	440a      	add	r2, r1
 800c5fa:	8045      	strh	r5, [r0, #2]
 800c5fc:	b292      	uxth	r2, r2
 800c5fe:	b211      	sxth	r1, r2
 800c600:	458c      	cmp	ip, r1
 800c602:	bfa8      	it	ge
 800c604:	4613      	movge	r3, r2
 800c606:	1b5b      	subs	r3, r3, r5
 800c608:	80c3      	strh	r3, [r0, #6]
 800c60a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c60e:	2300      	movs	r3, #0
 800c610:	8003      	strh	r3, [r0, #0]
 800c612:	8043      	strh	r3, [r0, #2]
 800c614:	8083      	strh	r3, [r0, #4]
 800c616:	80c3      	strh	r3, [r0, #6]
 800c618:	e7f7      	b.n	800c60a <_ZN8touchgfx4RectaNERKS0_+0x76>

0800c61a <_ZNK8touchgfx4Rect7isEmptyEv>:
 800c61a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	dd06      	ble.n	800c630 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800c622:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800c626:	2800      	cmp	r0, #0
 800c628:	bfcc      	ite	gt
 800c62a:	2000      	movgt	r0, #0
 800c62c:	2001      	movle	r0, #1
 800c62e:	4770      	bx	lr
 800c630:	2001      	movs	r0, #1
 800c632:	4770      	bx	lr

0800c634 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800c634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c638:	2300      	movs	r3, #0
 800c63a:	4604      	mov	r4, r0
 800c63c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800c63e:	8003      	strh	r3, [r0, #0]
 800c640:	8043      	strh	r3, [r0, #2]
 800c642:	8083      	strh	r3, [r0, #4]
 800c644:	80c3      	strh	r3, [r0, #6]
 800c646:	2d00      	cmp	r5, #0
 800c648:	d040      	beq.n	800c6cc <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800c64a:	1d28      	adds	r0, r5, #4
 800c64c:	f7ff ffe5 	bl	800c61a <_ZNK8touchgfx4Rect7isEmptyEv>
 800c650:	b988      	cbnz	r0, 800c676 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800c652:	4620      	mov	r0, r4
 800c654:	f7ff ffe1 	bl	800c61a <_ZNK8touchgfx4Rect7isEmptyEv>
 800c658:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800c65c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800c660:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800c664:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800c668:	b138      	cbz	r0, 800c67a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800c66a:	8022      	strh	r2, [r4, #0]
 800c66c:	8063      	strh	r3, [r4, #2]
 800c66e:	f8a4 e004 	strh.w	lr, [r4, #4]
 800c672:	f8a4 c006 	strh.w	ip, [r4, #6]
 800c676:	69ad      	ldr	r5, [r5, #24]
 800c678:	e7e5      	b.n	800c646 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800c67a:	f9b4 0000 	ldrsh.w	r0, [r4]
 800c67e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800c682:	4290      	cmp	r0, r2
 800c684:	4607      	mov	r7, r0
 800c686:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800c68a:	460e      	mov	r6, r1
 800c68c:	bfa8      	it	ge
 800c68e:	4617      	movge	r7, r2
 800c690:	4299      	cmp	r1, r3
 800c692:	4472      	add	r2, lr
 800c694:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800c698:	bfa8      	it	ge
 800c69a:	461e      	movge	r6, r3
 800c69c:	4440      	add	r0, r8
 800c69e:	4471      	add	r1, lr
 800c6a0:	4463      	add	r3, ip
 800c6a2:	b200      	sxth	r0, r0
 800c6a4:	8027      	strh	r7, [r4, #0]
 800c6a6:	b212      	sxth	r2, r2
 800c6a8:	8066      	strh	r6, [r4, #2]
 800c6aa:	b209      	sxth	r1, r1
 800c6ac:	b21b      	sxth	r3, r3
 800c6ae:	4290      	cmp	r0, r2
 800c6b0:	bfac      	ite	ge
 800c6b2:	ebc7 0200 	rsbge	r2, r7, r0
 800c6b6:	ebc7 0202 	rsblt	r2, r7, r2
 800c6ba:	4299      	cmp	r1, r3
 800c6bc:	bfac      	ite	ge
 800c6be:	ebc6 0301 	rsbge	r3, r6, r1
 800c6c2:	ebc6 0303 	rsblt	r3, r6, r3
 800c6c6:	80a2      	strh	r2, [r4, #4]
 800c6c8:	80e3      	strh	r3, [r4, #6]
 800c6ca:	e7d4      	b.n	800c676 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800c6cc:	4620      	mov	r0, r4
 800c6ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c6d2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800c6d2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c6d6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800c6da:	b383      	cbz	r3, 800c73e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800c6dc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c6de:	b374      	cbz	r4, 800c73e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800c6e0:	f9b1 5000 	ldrsh.w	r5, [r1]
 800c6e4:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800c6e8:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800c6ec:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800c6f0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800c6f4:	b303      	cbz	r3, 800c738 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800c6f6:	4668      	mov	r0, sp
 800c6f8:	1d21      	adds	r1, r4, #4
 800c6fa:	f8ad 5000 	strh.w	r5, [sp]
 800c6fe:	f8ad 6002 	strh.w	r6, [sp, #2]
 800c702:	f8ad 7004 	strh.w	r7, [sp, #4]
 800c706:	f8ad 8006 	strh.w	r8, [sp, #6]
 800c70a:	f7ff ff43 	bl	800c594 <_ZN8touchgfx4RectaNERKS0_>
 800c70e:	4668      	mov	r0, sp
 800c710:	f7ff ff83 	bl	800c61a <_ZNK8touchgfx4Rect7isEmptyEv>
 800c714:	b980      	cbnz	r0, 800c738 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800c716:	f8bd 3000 	ldrh.w	r3, [sp]
 800c71a:	4669      	mov	r1, sp
 800c71c:	88a2      	ldrh	r2, [r4, #4]
 800c71e:	4620      	mov	r0, r4
 800c720:	1a9b      	subs	r3, r3, r2
 800c722:	88e2      	ldrh	r2, [r4, #6]
 800c724:	f8ad 3000 	strh.w	r3, [sp]
 800c728:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800c72c:	1a9b      	subs	r3, r3, r2
 800c72e:	f8ad 3002 	strh.w	r3, [sp, #2]
 800c732:	6823      	ldr	r3, [r4, #0]
 800c734:	689b      	ldr	r3, [r3, #8]
 800c736:	4798      	blx	r3
 800c738:	69a4      	ldr	r4, [r4, #24]
 800c73a:	2c00      	cmp	r4, #0
 800c73c:	d1d8      	bne.n	800c6f0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800c73e:	b002      	add	sp, #8
 800c740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c744 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800c744:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c746:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800c74a:	460d      	mov	r5, r1
 800c74c:	4616      	mov	r6, r2
 800c74e:	b323      	cbz	r3, 800c79a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800c750:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c752:	b314      	cbz	r4, 800c79a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800c754:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800c758:	b1eb      	cbz	r3, 800c796 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800c75a:	6828      	ldr	r0, [r5, #0]
 800c75c:	466b      	mov	r3, sp
 800c75e:	6869      	ldr	r1, [r5, #4]
 800c760:	c303      	stmia	r3!, {r0, r1}
 800c762:	4668      	mov	r0, sp
 800c764:	1d21      	adds	r1, r4, #4
 800c766:	f7ff ff15 	bl	800c594 <_ZN8touchgfx4RectaNERKS0_>
 800c76a:	4668      	mov	r0, sp
 800c76c:	f7ff ff55 	bl	800c61a <_ZNK8touchgfx4Rect7isEmptyEv>
 800c770:	b988      	cbnz	r0, 800c796 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800c772:	f8bd 3000 	ldrh.w	r3, [sp]
 800c776:	4669      	mov	r1, sp
 800c778:	88a2      	ldrh	r2, [r4, #4]
 800c77a:	4620      	mov	r0, r4
 800c77c:	1a9b      	subs	r3, r3, r2
 800c77e:	88e2      	ldrh	r2, [r4, #6]
 800c780:	f8ad 3000 	strh.w	r3, [sp]
 800c784:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800c788:	1a9b      	subs	r3, r3, r2
 800c78a:	4632      	mov	r2, r6
 800c78c:	f8ad 3002 	strh.w	r3, [sp, #2]
 800c790:	6823      	ldr	r3, [r4, #0]
 800c792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c794:	4798      	blx	r3
 800c796:	69a4      	ldr	r4, [r4, #24]
 800c798:	e7db      	b.n	800c752 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800c79a:	b002      	add	sp, #8
 800c79c:	bd70      	pop	{r4, r5, r6, pc}

0800c79e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800c79e:	6803      	ldr	r3, [r0, #0]
 800c7a0:	b513      	push	{r0, r1, r4, lr}
 800c7a2:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	e9cd 3300 	strd	r3, r3, [sp]
 800c7ac:	466b      	mov	r3, sp
 800c7ae:	47a0      	blx	r4
 800c7b0:	b002      	add	sp, #8
 800c7b2:	bd10      	pop	{r4, pc}

0800c7b4 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800c7ba:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800c7be:	4770      	bx	lr

0800c7c0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800c7c6:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800c7ca:	4770      	bx	lr

0800c7cc <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800c7cc:	6843      	ldr	r3, [r0, #4]
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	725a      	strb	r2, [r3, #9]
 800c7d2:	6840      	ldr	r0, [r0, #4]
 800c7d4:	6803      	ldr	r3, [r0, #0]
 800c7d6:	691b      	ldr	r3, [r3, #16]
 800c7d8:	4718      	bx	r3

0800c7da <_ZN8touchgfx3HAL8flushDMAEv>:
 800c7da:	6840      	ldr	r0, [r0, #4]
 800c7dc:	6803      	ldr	r3, [r0, #0]
 800c7de:	689b      	ldr	r3, [r3, #8]
 800c7e0:	4718      	bx	r3

0800c7e2 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800c7e2:	b530      	push	{r4, r5, lr}
 800c7e4:	b08b      	sub	sp, #44	; 0x2c
 800c7e6:	6804      	ldr	r4, [r0, #0]
 800c7e8:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 800c7ec:	9509      	str	r5, [sp, #36]	; 0x24
 800c7ee:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 800c7f2:	9508      	str	r5, [sp, #32]
 800c7f4:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800c7f8:	9507      	str	r5, [sp, #28]
 800c7fa:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800c7fe:	9506      	str	r5, [sp, #24]
 800c800:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800c804:	9505      	str	r5, [sp, #20]
 800c806:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 800c80a:	9504      	str	r5, [sp, #16]
 800c80c:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800c810:	9503      	str	r5, [sp, #12]
 800c812:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800c816:	9502      	str	r5, [sp, #8]
 800c818:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800c81c:	e9cd 3500 	strd	r3, r5, [sp]
 800c820:	4613      	mov	r3, r2
 800c822:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 800c824:	2200      	movs	r2, #0
 800c826:	47a0      	blx	r4
 800c828:	b00b      	add	sp, #44	; 0x2c
 800c82a:	bd30      	pop	{r4, r5, pc}

0800c82c <_ZN8touchgfx3HAL10beginFrameEv>:
 800c82c:	4b04      	ldr	r3, [pc, #16]	; (800c840 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800c82e:	781b      	ldrb	r3, [r3, #0]
 800c830:	b123      	cbz	r3, 800c83c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800c832:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800c836:	f080 0001 	eor.w	r0, r0, #1
 800c83a:	4770      	bx	lr
 800c83c:	2001      	movs	r0, #1
 800c83e:	4770      	bx	lr
 800c840:	2400e452 	.word	0x2400e452

0800c844 <_ZN8touchgfx3HAL8endFrameEv>:
 800c844:	b510      	push	{r4, lr}
 800c846:	4604      	mov	r4, r0
 800c848:	6840      	ldr	r0, [r0, #4]
 800c84a:	6803      	ldr	r3, [r0, #0]
 800c84c:	689b      	ldr	r3, [r3, #8]
 800c84e:	4798      	blx	r3
 800c850:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800c854:	b113      	cbz	r3, 800c85c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800c856:	2301      	movs	r3, #1
 800c858:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800c85c:	bd10      	pop	{r4, pc}

0800c85e <_ZN8touchgfx3HAL10initializeEv>:
 800c85e:	b510      	push	{r4, lr}
 800c860:	4604      	mov	r4, r0
 800c862:	f7f5 f93d 	bl	8001ae0 <_ZN8touchgfx10OSWrappers10initializeEv>
 800c866:	f7f4 fe4f 	bl	8001508 <_ZN8touchgfx4GPIO4initEv>
 800c86a:	6860      	ldr	r0, [r4, #4]
 800c86c:	6803      	ldr	r3, [r0, #0]
 800c86e:	68db      	ldr	r3, [r3, #12]
 800c870:	4798      	blx	r3
 800c872:	68e0      	ldr	r0, [r4, #12]
 800c874:	6803      	ldr	r3, [r0, #0]
 800c876:	689b      	ldr	r3, [r3, #8]
 800c878:	4798      	blx	r3
 800c87a:	6823      	ldr	r3, [r4, #0]
 800c87c:	4620      	mov	r0, r4
 800c87e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c884:	4718      	bx	r3
	...

0800c888 <_ZN8touchgfx3HAL4tickEv>:
 800c888:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c88a:	6803      	ldr	r3, [r0, #0]
 800c88c:	4604      	mov	r4, r0
 800c88e:	4d5b      	ldr	r5, [pc, #364]	; (800c9fc <_ZN8touchgfx3HAL4tickEv+0x174>)
 800c890:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c894:	4798      	blx	r3
 800c896:	2800      	cmp	r0, #0
 800c898:	f000 8095 	beq.w	800c9c6 <_ZN8touchgfx3HAL4tickEv+0x13e>
 800c89c:	2001      	movs	r0, #1
 800c89e:	2600      	movs	r6, #0
 800c8a0:	f7f4 fd98 	bl	80013d4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800c8a4:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800c8a8:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800c8ac:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800c8b0:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800c8b4:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 800c8b8:	b133      	cbz	r3, 800c8c8 <_ZN8touchgfx3HAL4tickEv+0x40>
 800c8ba:	6823      	ldr	r3, [r4, #0]
 800c8bc:	4620      	mov	r0, r4
 800c8be:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800c8c2:	4798      	blx	r3
 800c8c4:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 800c8c8:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800c8cc:	2601      	movs	r6, #1
 800c8ce:	6862      	ldr	r2, [r4, #4]
 800c8d0:	f083 0301 	eor.w	r3, r3, #1
 800c8d4:	702e      	strb	r6, [r5, #0]
 800c8d6:	7253      	strb	r3, [r2, #9]
 800c8d8:	f005 fa22 	bl	8011d20 <_ZN8touchgfx11Application11getInstanceEv>
 800c8dc:	6803      	ldr	r3, [r0, #0]
 800c8de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8e0:	4798      	blx	r3
 800c8e2:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800c8e6:	b90b      	cbnz	r3, 800c8ec <_ZN8touchgfx3HAL4tickEv+0x64>
 800c8e8:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 800c8ec:	f005 fa18 	bl	8011d20 <_ZN8touchgfx11Application11getInstanceEv>
 800c8f0:	6803      	ldr	r3, [r0, #0]
 800c8f2:	695b      	ldr	r3, [r3, #20]
 800c8f4:	4798      	blx	r3
 800c8f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8f8:	6803      	ldr	r3, [r0, #0]
 800c8fa:	691b      	ldr	r3, [r3, #16]
 800c8fc:	4798      	blx	r3
 800c8fe:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800c902:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800c906:	3b01      	subs	r3, #1
 800c908:	b2db      	uxtb	r3, r3
 800c90a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800c90e:	b10a      	cbz	r2, 800c914 <_ZN8touchgfx3HAL4tickEv+0x8c>
 800c910:	2b00      	cmp	r3, #0
 800c912:	d1eb      	bne.n	800c8ec <_ZN8touchgfx3HAL4tickEv+0x64>
 800c914:	4a3a      	ldr	r2, [pc, #232]	; (800ca00 <_ZN8touchgfx3HAL4tickEv+0x178>)
 800c916:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800c91a:	7813      	ldrb	r3, [r2, #0]
 800c91c:	3301      	adds	r3, #1
 800c91e:	b25b      	sxtb	r3, r3
 800c920:	4299      	cmp	r1, r3
 800c922:	7013      	strb	r3, [r2, #0]
 800c924:	dc10      	bgt.n	800c948 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800c926:	2300      	movs	r3, #0
 800c928:	68e0      	ldr	r0, [r4, #12]
 800c92a:	a902      	add	r1, sp, #8
 800c92c:	7013      	strb	r3, [r2, #0]
 800c92e:	aa03      	add	r2, sp, #12
 800c930:	6803      	ldr	r3, [r0, #0]
 800c932:	68db      	ldr	r3, [r3, #12]
 800c934:	4798      	blx	r3
 800c936:	6823      	ldr	r3, [r4, #0]
 800c938:	2800      	cmp	r0, #0
 800c93a:	d050      	beq.n	800c9de <_ZN8touchgfx3HAL4tickEv+0x156>
 800c93c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c940:	4620      	mov	r0, r4
 800c942:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800c946:	4798      	blx	r3
 800c948:	2300      	movs	r3, #0
 800c94a:	6960      	ldr	r0, [r4, #20]
 800c94c:	f88d 3007 	strb.w	r3, [sp, #7]
 800c950:	b158      	cbz	r0, 800c96a <_ZN8touchgfx3HAL4tickEv+0xe2>
 800c952:	6803      	ldr	r3, [r0, #0]
 800c954:	f10d 0107 	add.w	r1, sp, #7
 800c958:	68db      	ldr	r3, [r3, #12]
 800c95a:	4798      	blx	r3
 800c95c:	b128      	cbz	r0, 800c96a <_ZN8touchgfx3HAL4tickEv+0xe2>
 800c95e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c960:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800c964:	6803      	ldr	r3, [r0, #0]
 800c966:	68db      	ldr	r3, [r3, #12]
 800c968:	4798      	blx	r3
 800c96a:	f104 001c 	add.w	r0, r4, #28
 800c96e:	f010 fb8f 	bl	801d090 <_ZN8touchgfx8Gestures4tickEv>
 800c972:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800c976:	b30b      	cbz	r3, 800c9bc <_ZN8touchgfx3HAL4tickEv+0x134>
 800c978:	6920      	ldr	r0, [r4, #16]
 800c97a:	6803      	ldr	r3, [r0, #0]
 800c97c:	691b      	ldr	r3, [r3, #16]
 800c97e:	4798      	blx	r3
 800c980:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c982:	4606      	mov	r6, r0
 800c984:	b903      	cbnz	r3, 800c988 <_ZN8touchgfx3HAL4tickEv+0x100>
 800c986:	6720      	str	r0, [r4, #112]	; 0x70
 800c988:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c98a:	4a1e      	ldr	r2, [pc, #120]	; (800ca04 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800c98c:	1af3      	subs	r3, r6, r3
 800c98e:	4293      	cmp	r3, r2
 800c990:	d914      	bls.n	800c9bc <_ZN8touchgfx3HAL4tickEv+0x134>
 800c992:	6920      	ldr	r0, [r4, #16]
 800c994:	6803      	ldr	r3, [r0, #0]
 800c996:	699b      	ldr	r3, [r3, #24]
 800c998:	4798      	blx	r3
 800c99a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c99c:	2264      	movs	r2, #100	; 0x64
 800c99e:	1af3      	subs	r3, r6, r3
 800c9a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c9a4:	fbb0 f0f3 	udiv	r0, r0, r3
 800c9a8:	2800      	cmp	r0, #0
 800c9aa:	dc1d      	bgt.n	800c9e8 <_ZN8touchgfx3HAL4tickEv+0x160>
 800c9ac:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800c9b0:	6920      	ldr	r0, [r4, #16]
 800c9b2:	2100      	movs	r1, #0
 800c9b4:	6803      	ldr	r3, [r0, #0]
 800c9b6:	69db      	ldr	r3, [r3, #28]
 800c9b8:	4798      	blx	r3
 800c9ba:	6726      	str	r6, [r4, #112]	; 0x70
 800c9bc:	f005 f9b0 	bl	8011d20 <_ZN8touchgfx11Application11getInstanceEv>
 800c9c0:	6803      	ldr	r3, [r0, #0]
 800c9c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9c4:	4798      	blx	r3
 800c9c6:	6823      	ldr	r3, [r4, #0]
 800c9c8:	4620      	mov	r0, r4
 800c9ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c9ce:	4798      	blx	r3
 800c9d0:	2001      	movs	r0, #1
 800c9d2:	f7f4 fd2f 	bl	8001434 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	702b      	strb	r3, [r5, #0]
 800c9da:	b004      	add	sp, #16
 800c9dc:	bd70      	pop	{r4, r5, r6, pc}
 800c9de:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800c9e2:	4620      	mov	r0, r4
 800c9e4:	4798      	blx	r3
 800c9e6:	e7af      	b.n	800c948 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800c9e8:	2863      	cmp	r0, #99	; 0x63
 800c9ea:	bfcb      	itete	gt
 800c9ec:	2300      	movgt	r3, #0
 800c9ee:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800c9f2:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800c9f6:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800c9fa:	e7d9      	b.n	800c9b0 <_ZN8touchgfx3HAL4tickEv+0x128>
 800c9fc:	2400e458 	.word	0x2400e458
 800ca00:	2400e459 	.word	0x2400e459
 800ca04:	05f5e100 	.word	0x05f5e100

0800ca08 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800ca08:	f7f5 b89a 	b.w	8001b40 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800ca0c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800ca0c:	6581      	str	r1, [r0, #88]	; 0x58
 800ca0e:	301c      	adds	r0, #28
 800ca10:	f010 bb3c 	b.w	801d08c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800ca14 <_ZN8touchgfx3HAL5touchEll>:
 800ca14:	b530      	push	{r4, r5, lr}
 800ca16:	b087      	sub	sp, #28
 800ca18:	4604      	mov	r4, r0
 800ca1a:	a804      	add	r0, sp, #16
 800ca1c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800ca20:	f004 ffc4 	bl	80119ac <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800ca24:	9b04      	ldr	r3, [sp, #16]
 800ca26:	a906      	add	r1, sp, #24
 800ca28:	a803      	add	r0, sp, #12
 800ca2a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ca2e:	9b05      	ldr	r3, [sp, #20]
 800ca30:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800ca34:	f005 f80c 	bl	8011a50 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800ca38:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800ca3c:	f104 001c 	add.w	r0, r4, #28
 800ca40:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800ca44:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800ca48:	b189      	cbz	r1, 800ca6e <_ZN8touchgfx3HAL5touchEll+0x5a>
 800ca4a:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800ca4e:	9300      	str	r3, [sp, #0]
 800ca50:	4613      	mov	r3, r2
 800ca52:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800ca56:	462a      	mov	r2, r5
 800ca58:	f010 fb28 	bl	801d0ac <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800ca5c:	b128      	cbz	r0, 800ca6a <_ZN8touchgfx3HAL5touchEll+0x56>
 800ca5e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800ca62:	65e3      	str	r3, [r4, #92]	; 0x5c
 800ca64:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800ca68:	6623      	str	r3, [r4, #96]	; 0x60
 800ca6a:	b007      	add	sp, #28
 800ca6c:	bd30      	pop	{r4, r5, pc}
 800ca6e:	f010 fb5d 	bl	801d12c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800ca72:	2301      	movs	r3, #1
 800ca74:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800ca78:	e7f1      	b.n	800ca5e <_ZN8touchgfx3HAL5touchEll+0x4a>

0800ca7a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800ca7a:	b510      	push	{r4, lr}
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d046      	beq.n	800cb0e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800ca80:	ea81 0002 	eor.w	r0, r1, r2
 800ca84:	07c4      	lsls	r4, r0, #31
 800ca86:	d508      	bpl.n	800ca9a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800ca88:	440b      	add	r3, r1
 800ca8a:	3a01      	subs	r2, #1
 800ca8c:	428b      	cmp	r3, r1
 800ca8e:	d93e      	bls.n	800cb0e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800ca90:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800ca94:	f801 0b01 	strb.w	r0, [r1], #1
 800ca98:	e7f8      	b.n	800ca8c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800ca9a:	07d0      	lsls	r0, r2, #31
 800ca9c:	bf42      	ittt	mi
 800ca9e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800caa2:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800caa6:	f801 0b01 	strbmi.w	r0, [r1], #1
 800caaa:	2b01      	cmp	r3, #1
 800caac:	d911      	bls.n	800cad2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800caae:	ea81 0402 	eor.w	r4, r1, r2
 800cab2:	4610      	mov	r0, r2
 800cab4:	07a4      	lsls	r4, r4, #30
 800cab6:	d022      	beq.n	800cafe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800cab8:	f023 0401 	bic.w	r4, r3, #1
 800cabc:	440c      	add	r4, r1
 800cabe:	428c      	cmp	r4, r1
 800cac0:	4602      	mov	r2, r0
 800cac2:	d904      	bls.n	800cace <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800cac4:	8812      	ldrh	r2, [r2, #0]
 800cac6:	3002      	adds	r0, #2
 800cac8:	f821 2b02 	strh.w	r2, [r1], #2
 800cacc:	e7f7      	b.n	800cabe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800cace:	f003 0301 	and.w	r3, r3, #1
 800cad2:	f023 0003 	bic.w	r0, r3, #3
 800cad6:	4408      	add	r0, r1
 800cad8:	4288      	cmp	r0, r1
 800cada:	4614      	mov	r4, r2
 800cadc:	d904      	bls.n	800cae8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800cade:	6824      	ldr	r4, [r4, #0]
 800cae0:	3204      	adds	r2, #4
 800cae2:	f841 4b04 	str.w	r4, [r1], #4
 800cae6:	e7f7      	b.n	800cad8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800cae8:	f003 0303 	and.w	r3, r3, #3
 800caec:	3a01      	subs	r2, #1
 800caee:	440b      	add	r3, r1
 800caf0:	428b      	cmp	r3, r1
 800caf2:	d90c      	bls.n	800cb0e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800caf4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800caf8:	f801 0b01 	strb.w	r0, [r1], #1
 800cafc:	e7f8      	b.n	800caf0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800cafe:	0790      	lsls	r0, r2, #30
 800cb00:	d0e7      	beq.n	800cad2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800cb02:	f832 0b02 	ldrh.w	r0, [r2], #2
 800cb06:	3b02      	subs	r3, #2
 800cb08:	f821 0b02 	strh.w	r0, [r1], #2
 800cb0c:	e7e1      	b.n	800cad2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800cb0e:	2001      	movs	r0, #1
 800cb10:	bd10      	pop	{r4, pc}

0800cb12 <_ZN8touchgfx3HAL7noTouchEv>:
 800cb12:	b510      	push	{r4, lr}
 800cb14:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800cb18:	4604      	mov	r4, r0
 800cb1a:	b153      	cbz	r3, 800cb32 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800cb1c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800cb20:	2101      	movs	r1, #1
 800cb22:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800cb26:	301c      	adds	r0, #28
 800cb28:	f010 fb00 	bl	801d12c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800cb32:	bd10      	pop	{r4, pc}

0800cb34 <_ZN8touchgfx3HAL3lcdEv>:
 800cb34:	4b04      	ldr	r3, [pc, #16]	; (800cb48 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800cb3c:	b10a      	cbz	r2, 800cb42 <_ZN8touchgfx3HAL3lcdEv+0xe>
 800cb3e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cb40:	b900      	cbnz	r0, 800cb44 <_ZN8touchgfx3HAL3lcdEv+0x10>
 800cb42:	6898      	ldr	r0, [r3, #8]
 800cb44:	4770      	bx	lr
 800cb46:	bf00      	nop
 800cb48:	2400e454 	.word	0x2400e454

0800cb4c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800cb4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb50:	b085      	sub	sp, #20
 800cb52:	4604      	mov	r4, r0
 800cb54:	2000      	movs	r0, #0
 800cb56:	4699      	mov	r9, r3
 800cb58:	ad04      	add	r5, sp, #16
 800cb5a:	460f      	mov	r7, r1
 800cb5c:	4690      	mov	r8, r2
 800cb5e:	f845 0d04 	str.w	r0, [r5, #-4]!
 800cb62:	69a0      	ldr	r0, [r4, #24]
 800cb64:	6806      	ldr	r6, [r0, #0]
 800cb66:	9501      	str	r5, [sp, #4]
 800cb68:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800cb6c:	9500      	str	r5, [sp, #0]
 800cb6e:	6835      	ldr	r5, [r6, #0]
 800cb70:	47a8      	blx	r5
 800cb72:	4d10      	ldr	r5, [pc, #64]	; (800cbb4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800cb74:	4606      	mov	r6, r0
 800cb76:	f8a5 9000 	strh.w	r9, [r5]
 800cb7a:	f7ff ffdb 	bl	800cb34 <_ZN8touchgfx3HAL3lcdEv>
 800cb7e:	6803      	ldr	r3, [r0, #0]
 800cb80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb82:	4798      	blx	r3
 800cb84:	b128      	cbz	r0, 800cb92 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800cb86:	2801      	cmp	r0, #1
 800cb88:	d00b      	beq.n	800cba2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800cb8a:	4630      	mov	r0, r6
 800cb8c:	b005      	add	sp, #20
 800cb8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb92:	882b      	ldrh	r3, [r5, #0]
 800cb94:	fb08 7203 	mla	r2, r8, r3, r7
 800cb98:	9b03      	ldr	r3, [sp, #12]
 800cb9a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800cb9e:	63e3      	str	r3, [r4, #60]	; 0x3c
 800cba0:	e7f3      	b.n	800cb8a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800cba2:	882a      	ldrh	r2, [r5, #0]
 800cba4:	9b03      	ldr	r3, [sp, #12]
 800cba6:	fb08 7202 	mla	r2, r8, r2, r7
 800cbaa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800cbae:	1a9a      	subs	r2, r3, r2
 800cbb0:	63e2      	str	r2, [r4, #60]	; 0x3c
 800cbb2:	e7ea      	b.n	800cb8a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800cbb4:	2400e44e 	.word	0x2400e44e

0800cbb8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800cbb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbba:	b08b      	sub	sp, #44	; 0x2c
 800cbbc:	4617      	mov	r7, r2
 800cbbe:	4604      	mov	r4, r0
 800cbc0:	460e      	mov	r6, r1
 800cbc2:	461d      	mov	r5, r3
 800cbc4:	f7ff ffb6 	bl	800cb34 <_ZN8touchgfx3HAL3lcdEv>
 800cbc8:	6803      	ldr	r3, [r0, #0]
 800cbca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbcc:	4798      	blx	r3
 800cbce:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800cbd2:	9007      	str	r0, [sp, #28]
 800cbd4:	4631      	mov	r1, r6
 800cbd6:	6822      	ldr	r2, [r4, #0]
 800cbd8:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800cbdc:	4b0c      	ldr	r3, [pc, #48]	; (800cc10 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800cbde:	4620      	mov	r0, r4
 800cbe0:	881b      	ldrh	r3, [r3, #0]
 800cbe2:	9306      	str	r3, [sp, #24]
 800cbe4:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800cbe8:	9305      	str	r3, [sp, #20]
 800cbea:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800cbee:	9304      	str	r3, [sp, #16]
 800cbf0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800cbf4:	9303      	str	r3, [sp, #12]
 800cbf6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800cbfa:	9302      	str	r3, [sp, #8]
 800cbfc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800cc00:	e9cd 5300 	strd	r5, r3, [sp]
 800cc04:	463b      	mov	r3, r7
 800cc06:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 800cc08:	2200      	movs	r2, #0
 800cc0a:	47a8      	blx	r5
 800cc0c:	b00b      	add	sp, #44	; 0x2c
 800cc0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc10:	2400e44e 	.word	0x2400e44e

0800cc14 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800cc14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc18:	4698      	mov	r8, r3
 800cc1a:	6803      	ldr	r3, [r0, #0]
 800cc1c:	b08b      	sub	sp, #44	; 0x2c
 800cc1e:	4617      	mov	r7, r2
 800cc20:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800cc22:	460e      	mov	r6, r1
 800cc24:	4b13      	ldr	r3, [pc, #76]	; (800cc74 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800cc26:	4604      	mov	r4, r0
 800cc28:	f8b3 9000 	ldrh.w	r9, [r3]
 800cc2c:	f7ff ff82 	bl	800cb34 <_ZN8touchgfx3HAL3lcdEv>
 800cc30:	6803      	ldr	r3, [r0, #0]
 800cc32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc34:	4798      	blx	r3
 800cc36:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	4631      	mov	r1, r6
 800cc3e:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800cc42:	2302      	movs	r3, #2
 800cc44:	4620      	mov	r0, r4
 800cc46:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	9305      	str	r3, [sp, #20]
 800cc4e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800cc52:	9304      	str	r3, [sp, #16]
 800cc54:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800cc58:	9303      	str	r3, [sp, #12]
 800cc5a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800cc5e:	9302      	str	r3, [sp, #8]
 800cc60:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800cc64:	e9cd 8300 	strd	r8, r3, [sp]
 800cc68:	463b      	mov	r3, r7
 800cc6a:	47a8      	blx	r5
 800cc6c:	b00b      	add	sp, #44	; 0x2c
 800cc6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc72:	bf00      	nop
 800cc74:	2400e44e 	.word	0x2400e44e

0800cc78 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800cc78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc7c:	4698      	mov	r8, r3
 800cc7e:	6803      	ldr	r3, [r0, #0]
 800cc80:	b087      	sub	sp, #28
 800cc82:	460e      	mov	r6, r1
 800cc84:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 800cc86:	4617      	mov	r7, r2
 800cc88:	4b0f      	ldr	r3, [pc, #60]	; (800ccc8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800cc8a:	4604      	mov	r4, r0
 800cc8c:	f8b3 9000 	ldrh.w	r9, [r3]
 800cc90:	f7ff ff50 	bl	800cb34 <_ZN8touchgfx3HAL3lcdEv>
 800cc94:	6803      	ldr	r3, [r0, #0]
 800cc96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc98:	4798      	blx	r3
 800cc9a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800cc9e:	463a      	mov	r2, r7
 800cca0:	4631      	mov	r1, r6
 800cca2:	f8cd 900c 	str.w	r9, [sp, #12]
 800cca6:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800ccaa:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800ccae:	4620      	mov	r0, r4
 800ccb0:	9302      	str	r3, [sp, #8]
 800ccb2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800ccb6:	9301      	str	r3, [sp, #4]
 800ccb8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800ccbc:	9300      	str	r3, [sp, #0]
 800ccbe:	4643      	mov	r3, r8
 800ccc0:	47a8      	blx	r5
 800ccc2:	b007      	add	sp, #28
 800ccc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccc8:	2400e44e 	.word	0x2400e44e

0800cccc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800cccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccd0:	4604      	mov	r4, r0
 800ccd2:	b08f      	sub	sp, #60	; 0x3c
 800ccd4:	4610      	mov	r0, r2
 800ccd6:	460d      	mov	r5, r1
 800ccd8:	4691      	mov	r9, r2
 800ccda:	461e      	mov	r6, r3
 800ccdc:	f008 f86e 	bl	8014dbc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800cce0:	2800      	cmp	r0, #0
 800cce2:	f000 809d 	beq.w	800ce20 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800cce6:	6823      	ldr	r3, [r4, #0]
 800cce8:	4620      	mov	r0, r4
 800ccea:	f8df b198 	ldr.w	fp, [pc, #408]	; 800ce84 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800ccee:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800ccf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccf4:	4798      	blx	r3
 800ccf6:	6823      	ldr	r3, [r4, #0]
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	f8df a18c 	ldr.w	sl, [pc, #396]	; 800ce88 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800ccfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd00:	4798      	blx	r3
 800cd02:	f8bb 3000 	ldrh.w	r3, [fp]
 800cd06:	4f5c      	ldr	r7, [pc, #368]	; (800ce78 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800cd08:	9301      	str	r3, [sp, #4]
 800cd0a:	f8ba 3000 	ldrh.w	r3, [sl]
 800cd0e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800cd12:	4640      	mov	r0, r8
 800cd14:	9302      	str	r3, [sp, #8]
 800cd16:	883b      	ldrh	r3, [r7, #0]
 800cd18:	9303      	str	r3, [sp, #12]
 800cd1a:	4b58      	ldr	r3, [pc, #352]	; (800ce7c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800cd1c:	881a      	ldrh	r2, [r3, #0]
 800cd1e:	9305      	str	r3, [sp, #20]
 800cd20:	9204      	str	r2, [sp, #16]
 800cd22:	f008 f98f 	bl	8015044 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800cd26:	8038      	strh	r0, [r7, #0]
 800cd28:	4640      	mov	r0, r8
 800cd2a:	f008 f9bf 	bl	80150ac <_ZNK8touchgfx6Bitmap9getHeightEv>
 800cd2e:	9b05      	ldr	r3, [sp, #20]
 800cd30:	b280      	uxth	r0, r0
 800cd32:	8018      	strh	r0, [r3, #0]
 800cd34:	4b52      	ldr	r3, [pc, #328]	; (800ce80 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800cd36:	781b      	ldrb	r3, [r3, #0]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d174      	bne.n	800ce26 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800cd3c:	883b      	ldrh	r3, [r7, #0]
 800cd3e:	f8aa 0000 	strh.w	r0, [sl]
 800cd42:	f8ab 3000 	strh.w	r3, [fp]
 800cd46:	4648      	mov	r0, r9
 800cd48:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 800cd4c:	f008 f836 	bl	8014dbc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800cd50:	2200      	movs	r2, #0
 800cd52:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800cd56:	4611      	mov	r1, r2
 800cd58:	4628      	mov	r0, r5
 800cd5a:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800cd5e:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800cd62:	f7f5 fd28 	bl	80027b6 <_ZN8touchgfx8Drawable5setXYEss>
 800cd66:	2301      	movs	r3, #1
 800cd68:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 800cd6c:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800cd70:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	dd5c      	ble.n	800ce32 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800cd78:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	dd58      	ble.n	800ce32 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800cd80:	462a      	mov	r2, r5
 800cd82:	ab0a      	add	r3, sp, #40	; 0x28
 800cd84:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800cd88:	6851      	ldr	r1, [r2, #4]
 800cd8a:	c303      	stmia	r3!, {r0, r1}
 800cd8c:	4631      	mov	r1, r6
 800cd8e:	a80a      	add	r0, sp, #40	; 0x28
 800cd90:	f7ff fc00 	bl	800c594 <_ZN8touchgfx4RectaNERKS0_>
 800cd94:	4b38      	ldr	r3, [pc, #224]	; (800ce78 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800cd96:	2100      	movs	r1, #0
 800cd98:	f9b3 2000 	ldrsh.w	r2, [r3]
 800cd9c:	4b37      	ldr	r3, [pc, #220]	; (800ce7c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800cd9e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800cda2:	aa0a      	add	r2, sp, #40	; 0x28
 800cda4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cda8:	910c      	str	r1, [sp, #48]	; 0x30
 800cdaa:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800cdae:	ab08      	add	r3, sp, #32
 800cdb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cdb4:	e883 0003 	stmia.w	r3, {r0, r1}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	a90c      	add	r1, sp, #48	; 0x30
 800cdbc:	f7ff fbea 	bl	800c594 <_ZN8touchgfx4RectaNERKS0_>
 800cdc0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d13c      	bne.n	800ce40 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800cdc6:	2000      	movs	r0, #0
 800cdc8:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 800cdcc:	2600      	movs	r6, #0
 800cdce:	696b      	ldr	r3, [r5, #20]
 800cdd0:	a908      	add	r1, sp, #32
 800cdd2:	682a      	ldr	r2, [r5, #0]
 800cdd4:	4628      	mov	r0, r5
 800cdd6:	9305      	str	r3, [sp, #20]
 800cdd8:	616e      	str	r6, [r5, #20]
 800cdda:	6892      	ldr	r2, [r2, #8]
 800cddc:	4790      	blx	r2
 800cdde:	9b05      	ldr	r3, [sp, #20]
 800cde0:	4652      	mov	r2, sl
 800cde2:	4649      	mov	r1, r9
 800cde4:	616b      	str	r3, [r5, #20]
 800cde6:	4628      	mov	r0, r5
 800cde8:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 800cdec:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 800cdf0:	f7f5 fce1 	bl	80027b6 <_ZN8touchgfx8Drawable5setXYEss>
 800cdf4:	9a01      	ldr	r2, [sp, #4]
 800cdf6:	4b23      	ldr	r3, [pc, #140]	; (800ce84 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800cdf8:	4620      	mov	r0, r4
 800cdfa:	801a      	strh	r2, [r3, #0]
 800cdfc:	9a02      	ldr	r2, [sp, #8]
 800cdfe:	4b22      	ldr	r3, [pc, #136]	; (800ce88 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800ce00:	801a      	strh	r2, [r3, #0]
 800ce02:	9a03      	ldr	r2, [sp, #12]
 800ce04:	4b1c      	ldr	r3, [pc, #112]	; (800ce78 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800ce06:	801a      	strh	r2, [r3, #0]
 800ce08:	4b1c      	ldr	r3, [pc, #112]	; (800ce7c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800ce0a:	9a04      	ldr	r2, [sp, #16]
 800ce0c:	801a      	strh	r2, [r3, #0]
 800ce0e:	6823      	ldr	r3, [r4, #0]
 800ce10:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 800ce14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce16:	4798      	blx	r3
 800ce18:	6823      	ldr	r3, [r4, #0]
 800ce1a:	4620      	mov	r0, r4
 800ce1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce1e:	4798      	blx	r3
 800ce20:	b00f      	add	sp, #60	; 0x3c
 800ce22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce26:	883b      	ldrh	r3, [r7, #0]
 800ce28:	f8ab 0000 	strh.w	r0, [fp]
 800ce2c:	f8aa 3000 	strh.w	r3, [sl]
 800ce30:	e789      	b.n	800cd46 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800ce32:	462a      	mov	r2, r5
 800ce34:	ab0a      	add	r3, sp, #40	; 0x28
 800ce36:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800ce3a:	6851      	ldr	r1, [r2, #4]
 800ce3c:	c303      	stmia	r3!, {r0, r1}
 800ce3e:	e7a9      	b.n	800cd94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800ce40:	a807      	add	r0, sp, #28
 800ce42:	f008 fa37 	bl	80152b4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800ce46:	4606      	mov	r6, r0
 800ce48:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800ce4a:	6803      	ldr	r3, [r0, #0]
 800ce4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce4e:	4798      	blx	r3
 800ce50:	4286      	cmp	r6, r0
 800ce52:	d1b8      	bne.n	800cdc6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800ce54:	f7ff fe6e 	bl	800cb34 <_ZN8touchgfx3HAL3lcdEv>
 800ce58:	6803      	ldr	r3, [r0, #0]
 800ce5a:	4606      	mov	r6, r0
 800ce5c:	a807      	add	r0, sp, #28
 800ce5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce60:	9305      	str	r3, [sp, #20]
 800ce62:	f008 fa27 	bl	80152b4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800ce66:	9b05      	ldr	r3, [sp, #20]
 800ce68:	4601      	mov	r1, r0
 800ce6a:	4630      	mov	r0, r6
 800ce6c:	4798      	blx	r3
 800ce6e:	f080 0001 	eor.w	r0, r0, #1
 800ce72:	b2c0      	uxtb	r0, r0
 800ce74:	e7a8      	b.n	800cdc8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800ce76:	bf00      	nop
 800ce78:	2400e448 	.word	0x2400e448
 800ce7c:	2400e44a 	.word	0x2400e44a
 800ce80:	2400e44c 	.word	0x2400e44c
 800ce84:	2400e44e 	.word	0x2400e44e
 800ce88:	2400e450 	.word	0x2400e450

0800ce8c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800ce8c:	4b07      	ldr	r3, [pc, #28]	; (800ceac <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800ce8e:	b510      	push	{r4, lr}
 800ce90:	781b      	ldrb	r3, [r3, #0]
 800ce92:	4604      	mov	r4, r0
 800ce94:	b13b      	cbz	r3, 800cea6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800ce96:	6803      	ldr	r3, [r0, #0]
 800ce98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce9a:	4798      	blx	r3
 800ce9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ce9e:	4283      	cmp	r3, r0
 800cea0:	d101      	bne.n	800cea6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800cea2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800cea4:	bd10      	pop	{r4, pc}
 800cea6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800cea8:	e7fc      	b.n	800cea4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800ceaa:	bf00      	nop
 800ceac:	2400e452 	.word	0x2400e452

0800ceb0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800ceb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ceb4:	461d      	mov	r5, r3
 800ceb6:	b08a      	sub	sp, #40	; 0x28
 800ceb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cebc:	4690      	mov	r8, r2
 800cebe:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 800cec2:	2400      	movs	r4, #0
 800cec4:	4607      	mov	r7, r0
 800cec6:	fb06 8505 	mla	r5, r6, r5, r8
 800ceca:	9404      	str	r4, [sp, #16]
 800cecc:	f88d 4020 	strb.w	r4, [sp, #32]
 800ced0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800ced4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800ced8:	f8ad 3018 	strh.w	r3, [sp, #24]
 800cedc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800cee0:	f8ad 301a 	strh.w	r3, [sp, #26]
 800cee4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800cee8:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ceec:	f7ff ffce 	bl	800ce8c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800cef0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f8ad 601e 	strh.w	r6, [sp, #30]
 800cefa:	a901      	add	r1, sp, #4
 800cefc:	9505      	str	r5, [sp, #20]
 800cefe:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800cf02:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 800cf06:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800cf0a:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800cf0e:	6803      	ldr	r3, [r0, #0]
 800cf10:	685b      	ldr	r3, [r3, #4]
 800cf12:	4798      	blx	r3
 800cf14:	b00a      	add	sp, #40	; 0x28
 800cf16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cf1a <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800cf1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf1e:	b08b      	sub	sp, #44	; 0x2c
 800cf20:	2400      	movs	r4, #0
 800cf22:	4691      	mov	r9, r2
 800cf24:	461d      	mov	r5, r3
 800cf26:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 800cf2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cf2e:	4688      	mov	r8, r1
 800cf30:	4607      	mov	r7, r0
 800cf32:	9404      	str	r4, [sp, #16]
 800cf34:	fb06 9505 	mla	r5, r6, r5, r9
 800cf38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cf3c:	f7ff ffa6 	bl	800ce8c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800cf40:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800cf44:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f8ad 3018 	strh.w	r3, [sp, #24]
 800cf4e:	a901      	add	r1, sp, #4
 800cf50:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800cf54:	9505      	str	r5, [sp, #20]
 800cf56:	f8ad 301a 	strh.w	r3, [sp, #26]
 800cf5a:	f8ad 401c 	strh.w	r4, [sp, #28]
 800cf5e:	f8ad 601e 	strh.w	r6, [sp, #30]
 800cf62:	f8cd 8010 	str.w	r8, [sp, #16]
 800cf66:	f8ad 4020 	strh.w	r4, [sp, #32]
 800cf6a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800cf6e:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800cf72:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800cf76:	6803      	ldr	r3, [r0, #0]
 800cf78:	685b      	ldr	r3, [r3, #4]
 800cf7a:	4798      	blx	r3
 800cf7c:	b00b      	add	sp, #44	; 0x2c
 800cf7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800cf84 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800cf84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf88:	b08a      	sub	sp, #40	; 0x28
 800cf8a:	4698      	mov	r8, r3
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	4606      	mov	r6, r0
 800cf90:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 800cf94:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 800cf98:	2d0b      	cmp	r5, #11
 800cf9a:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 800cf9e:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 800cfa2:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 800cfa6:	9304      	str	r3, [sp, #16]
 800cfa8:	d137      	bne.n	800d01a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 800cfaa:	2380      	movs	r3, #128	; 0x80
 800cfac:	f88d 0020 	strb.w	r0, [sp, #32]
 800cfb0:	4630      	mov	r0, r6
 800cfb2:	9203      	str	r2, [sp, #12]
 800cfb4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800cfb8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800cfbc:	f8ad 3018 	strh.w	r3, [sp, #24]
 800cfc0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800cfc4:	f8ad 301a 	strh.w	r3, [sp, #26]
 800cfc8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800cfcc:	f8ad 301c 	strh.w	r3, [sp, #28]
 800cfd0:	f7ff ff5c 	bl	800ce8c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800cfd4:	2c0b      	cmp	r4, #11
 800cfd6:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800cfda:	f8ad 701e 	strh.w	r7, [sp, #30]
 800cfde:	bf94      	ite	ls
 800cfe0:	4b19      	ldrls	r3, [pc, #100]	; (800d048 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800cfe2:	2100      	movhi	r1, #0
 800cfe4:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 800cfe8:	bf98      	it	ls
 800cfea:	5d19      	ldrbls	r1, [r3, r4]
 800cfec:	fb02 8307 	mla	r3, r2, r7, r8
 800cff0:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800cff4:	10c9      	asrs	r1, r1, #3
 800cff6:	fb01 0003 	mla	r0, r1, r3, r0
 800cffa:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800cffe:	a901      	add	r1, sp, #4
 800d000:	9005      	str	r0, [sp, #20]
 800d002:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800d006:	2300      	movs	r3, #0
 800d008:	6870      	ldr	r0, [r6, #4]
 800d00a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800d00e:	6803      	ldr	r3, [r0, #0]
 800d010:	685b      	ldr	r3, [r3, #4]
 800d012:	4798      	blx	r3
 800d014:	b00a      	add	sp, #40	; 0x28
 800d016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d01a:	2d02      	cmp	r5, #2
 800d01c:	d109      	bne.n	800d032 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 800d01e:	28ff      	cmp	r0, #255	; 0xff
 800d020:	d105      	bne.n	800d02e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 800d022:	f1bc 0f00 	cmp.w	ip, #0
 800d026:	bf14      	ite	ne
 800d028:	2340      	movne	r3, #64	; 0x40
 800d02a:	2320      	moveq	r3, #32
 800d02c:	e7be      	b.n	800cfac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800d02e:	2340      	movs	r3, #64	; 0x40
 800d030:	e7bc      	b.n	800cfac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800d032:	28ff      	cmp	r0, #255	; 0xff
 800d034:	d105      	bne.n	800d042 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 800d036:	f1bc 0f00 	cmp.w	ip, #0
 800d03a:	bf14      	ite	ne
 800d03c:	2304      	movne	r3, #4
 800d03e:	2301      	moveq	r3, #1
 800d040:	e7b4      	b.n	800cfac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800d042:	2304      	movs	r3, #4
 800d044:	e7b2      	b.n	800cfac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800d046:	bf00      	nop
 800d048:	080202b0 	.word	0x080202b0

0800d04c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800d04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d050:	b08b      	sub	sp, #44	; 0x2c
 800d052:	461d      	mov	r5, r3
 800d054:	2400      	movs	r4, #0
 800d056:	4688      	mov	r8, r1
 800d058:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 800d05c:	4693      	mov	fp, r2
 800d05e:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 800d062:	4607      	mov	r7, r0
 800d064:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800d068:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 800d06c:	9404      	str	r4, [sp, #16]
 800d06e:	bf14      	ite	ne
 800d070:	2308      	movne	r3, #8
 800d072:	2302      	moveq	r3, #2
 800d074:	fb05 b50a 	mla	r5, r5, sl, fp
 800d078:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d07c:	f7ff ff06 	bl	800ce8c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d080:	2e0b      	cmp	r6, #11
 800d082:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800d086:	a901      	add	r1, sp, #4
 800d088:	bf98      	it	ls
 800d08a:	4b13      	ldrls	r3, [pc, #76]	; (800d0d8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800d08c:	f8ad a01e 	strh.w	sl, [sp, #30]
 800d090:	bf98      	it	ls
 800d092:	5d9c      	ldrbls	r4, [r3, r6]
 800d094:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800d098:	10e4      	asrs	r4, r4, #3
 800d09a:	f8cd 8010 	str.w	r8, [sp, #16]
 800d09e:	f8ad 3018 	strh.w	r3, [sp, #24]
 800d0a2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800d0a6:	fb04 0405 	mla	r4, r4, r5, r0
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	f8ad 301a 	strh.w	r3, [sp, #26]
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	9405      	str	r4, [sp, #20]
 800d0b4:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d0b8:	f88d 9020 	strb.w	r9, [sp, #32]
 800d0bc:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 800d0c0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800d0c4:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 800d0c8:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 800d0cc:	6803      	ldr	r3, [r0, #0]
 800d0ce:	685b      	ldr	r3, [r3, #4]
 800d0d0:	4798      	blx	r3
 800d0d2:	b00b      	add	sp, #44	; 0x2c
 800d0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0d8:	080202b0 	.word	0x080202b0

0800d0dc <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800d0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0e0:	461e      	mov	r6, r3
 800d0e2:	4b0a      	ldr	r3, [pc, #40]	; (800d10c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800d0e4:	460f      	mov	r7, r1
 800d0e6:	4690      	mov	r8, r2
 800d0e8:	881d      	ldrh	r5, [r3, #0]
 800d0ea:	f7ff fd23 	bl	800cb34 <_ZN8touchgfx3HAL3lcdEv>
 800d0ee:	6803      	ldr	r3, [r0, #0]
 800d0f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0f2:	4798      	blx	r3
 800d0f4:	280b      	cmp	r0, #11
 800d0f6:	bf96      	itet	ls
 800d0f8:	4b05      	ldrls	r3, [pc, #20]	; (800d110 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800d0fa:	2400      	movhi	r4, #0
 800d0fc:	5c1c      	ldrbls	r4, [r3, r0]
 800d0fe:	fb08 7005 	mla	r0, r8, r5, r7
 800d102:	10e4      	asrs	r4, r4, #3
 800d104:	fb04 6000 	mla	r0, r4, r0, r6
 800d108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d10c:	2400e44e 	.word	0x2400e44e
 800d110:	080202b0 	.word	0x080202b0

0800d114 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800d114:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d116:	b08b      	sub	sp, #44	; 0x2c
 800d118:	461f      	mov	r7, r3
 800d11a:	4604      	mov	r4, r0
 800d11c:	4616      	mov	r6, r2
 800d11e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800d122:	2500      	movs	r5, #0
 800d124:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800d128:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800d12c:	9504      	str	r5, [sp, #16]
 800d12e:	f8ad 3018 	strh.w	r3, [sp, #24]
 800d132:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800d136:	f8ad 301a 	strh.w	r3, [sp, #26]
 800d13a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800d13e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d142:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800d146:	f88d 3020 	strb.w	r3, [sp, #32]
 800d14a:	f7ff fe9f 	bl	800ce8c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d14e:	463a      	mov	r2, r7
 800d150:	4631      	mov	r1, r6
 800d152:	4603      	mov	r3, r0
 800d154:	4620      	mov	r0, r4
 800d156:	f7ff ffc1 	bl	800d0dc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800d15a:	4b0e      	ldr	r3, [pc, #56]	; (800d194 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800d15c:	9005      	str	r0, [sp, #20]
 800d15e:	881b      	ldrh	r3, [r3, #0]
 800d160:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d164:	f7ff fce6 	bl	800cb34 <_ZN8touchgfx3HAL3lcdEv>
 800d168:	6803      	ldr	r3, [r0, #0]
 800d16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d16c:	4798      	blx	r3
 800d16e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d170:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 800d174:	a901      	add	r1, sp, #4
 800d176:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 800d17a:	9304      	str	r3, [sp, #16]
 800d17c:	6860      	ldr	r0, [r4, #4]
 800d17e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800d182:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 800d186:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800d18a:	6803      	ldr	r3, [r0, #0]
 800d18c:	685b      	ldr	r3, [r3, #4]
 800d18e:	4798      	blx	r3
 800d190:	b00b      	add	sp, #44	; 0x2c
 800d192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d194:	2400e44e 	.word	0x2400e44e

0800d198 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800d198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d19a:	b08d      	sub	sp, #52	; 0x34
 800d19c:	2501      	movs	r5, #1
 800d19e:	4604      	mov	r4, r0
 800d1a0:	466b      	mov	r3, sp
 800d1a2:	9503      	str	r5, [sp, #12]
 800d1a4:	e883 0006 	stmia.w	r3, {r1, r2}
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	f8bd 6000 	ldrh.w	r6, [sp]
 800d1ae:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800d1b2:	9306      	str	r3, [sp, #24]
 800d1b4:	6803      	ldr	r3, [r0, #0]
 800d1b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1b8:	4798      	blx	r3
 800d1ba:	463a      	mov	r2, r7
 800d1bc:	4631      	mov	r1, r6
 800d1be:	4603      	mov	r3, r0
 800d1c0:	4620      	mov	r0, r4
 800d1c2:	f7ff ff8b 	bl	800d0dc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800d1c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d1c8:	9004      	str	r0, [sp, #16]
 800d1ca:	9307      	str	r3, [sp, #28]
 800d1cc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800d1d0:	f8ad 3020 	strh.w	r3, [sp, #32]
 800d1d4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800d1d8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800d1dc:	4b0e      	ldr	r3, [pc, #56]	; (800d218 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800d1de:	881b      	ldrh	r3, [r3, #0]
 800d1e0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800d1e4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800d1e8:	f7ff fca4 	bl	800cb34 <_ZN8touchgfx3HAL3lcdEv>
 800d1ec:	6803      	ldr	r3, [r0, #0]
 800d1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1f0:	4798      	blx	r3
 800d1f2:	23ff      	movs	r3, #255	; 0xff
 800d1f4:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800d1f8:	a903      	add	r1, sp, #12
 800d1fa:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800d1fe:	6860      	ldr	r0, [r4, #4]
 800d200:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800d204:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800d208:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800d20c:	6803      	ldr	r3, [r0, #0]
 800d20e:	685b      	ldr	r3, [r3, #4]
 800d210:	4798      	blx	r3
 800d212:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800d214:	b00d      	add	sp, #52	; 0x34
 800d216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d218:	2400e44e 	.word	0x2400e44e

0800d21c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800d21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d220:	b08c      	sub	sp, #48	; 0x30
 800d222:	461e      	mov	r6, r3
 800d224:	2300      	movs	r3, #0
 800d226:	4604      	mov	r4, r0
 800d228:	466d      	mov	r5, sp
 800d22a:	9306      	str	r3, [sp, #24]
 800d22c:	6803      	ldr	r3, [r0, #0]
 800d22e:	e885 0006 	stmia.w	r5, {r1, r2}
 800d232:	2501      	movs	r5, #1
 800d234:	f8bd 7000 	ldrh.w	r7, [sp]
 800d238:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800d23c:	9503      	str	r5, [sp, #12]
 800d23e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d240:	4798      	blx	r3
 800d242:	4642      	mov	r2, r8
 800d244:	4639      	mov	r1, r7
 800d246:	4603      	mov	r3, r0
 800d248:	4620      	mov	r0, r4
 800d24a:	f7ff ff47 	bl	800d0dc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800d24e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800d252:	9004      	str	r0, [sp, #16]
 800d254:	f8ad 3020 	strh.w	r3, [sp, #32]
 800d258:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800d25c:	9607      	str	r6, [sp, #28]
 800d25e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800d262:	4b10      	ldr	r3, [pc, #64]	; (800d2a4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800d264:	881b      	ldrh	r3, [r3, #0]
 800d266:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800d26a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d26c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800d270:	f7ff fc60 	bl	800cb34 <_ZN8touchgfx3HAL3lcdEv>
 800d274:	6803      	ldr	r3, [r0, #0]
 800d276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d278:	4798      	blx	r3
 800d27a:	23ff      	movs	r3, #255	; 0xff
 800d27c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800d280:	a903      	add	r1, sp, #12
 800d282:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800d286:	6860      	ldr	r0, [r4, #4]
 800d288:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800d28c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800d290:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800d294:	6803      	ldr	r3, [r0, #0]
 800d296:	685b      	ldr	r3, [r3, #4]
 800d298:	4798      	blx	r3
 800d29a:	4630      	mov	r0, r6
 800d29c:	b00c      	add	sp, #48	; 0x30
 800d29e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2a2:	bf00      	nop
 800d2a4:	2400e44e 	.word	0x2400e44e

0800d2a8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800d2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2aa:	b085      	sub	sp, #20
 800d2ac:	4605      	mov	r5, r0
 800d2ae:	ac02      	add	r4, sp, #8
 800d2b0:	e884 0006 	stmia.w	r4, {r1, r2}
 800d2b4:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800d2b8:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800d2bc:	f7ff fde6 	bl	800ce8c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d2c0:	4631      	mov	r1, r6
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	463a      	mov	r2, r7
 800d2c6:	4628      	mov	r0, r5
 800d2c8:	f7ff ff08 	bl	800d0dc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800d2cc:	4a05      	ldr	r2, [pc, #20]	; (800d2e4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800d2ce:	682b      	ldr	r3, [r5, #0]
 800d2d0:	8812      	ldrh	r2, [r2, #0]
 800d2d2:	9200      	str	r2, [sp, #0]
 800d2d4:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	4628      	mov	r0, r5
 800d2da:	e894 0006 	ldmia.w	r4, {r1, r2}
 800d2de:	47b0      	blx	r6
 800d2e0:	b005      	add	sp, #20
 800d2e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2e4:	2400e44e 	.word	0x2400e44e

0800d2e8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800d2e8:	b570      	push	{r4, r5, r6, lr}
 800d2ea:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800d2ee:	4604      	mov	r4, r0
 800d2f0:	b19b      	cbz	r3, 800d31a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800d2f2:	2002      	movs	r0, #2
 800d2f4:	f7f4 f8ce 	bl	8001494 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	4620      	mov	r0, r4
 800d2fc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800d300:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 800d304:	6823      	ldr	r3, [r4, #0]
 800d306:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 800d30a:	f7ff fdbf 	bl	800ce8c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d30e:	4601      	mov	r1, r0
 800d310:	4620      	mov	r0, r4
 800d312:	462b      	mov	r3, r5
 800d314:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d318:	4718      	bx	r3
 800d31a:	bd70      	pop	{r4, r5, r6, pc}

0800d31c <_ZN8touchgfx3HAL12setMCUActiveEb>:
 800d31c:	b570      	push	{r4, r5, r6, lr}
 800d31e:	4605      	mov	r5, r0
 800d320:	460c      	mov	r4, r1
 800d322:	2003      	movs	r0, #3
 800d324:	b149      	cbz	r1, 800d33a <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 800d326:	f7f4 f855 	bl	80013d4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800d32a:	6928      	ldr	r0, [r5, #16]
 800d32c:	b168      	cbz	r0, 800d34a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800d32e:	6803      	ldr	r3, [r0, #0]
 800d330:	2101      	movs	r1, #1
 800d332:	695b      	ldr	r3, [r3, #20]
 800d334:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d338:	4718      	bx	r3
 800d33a:	f7f4 f87b 	bl	8001434 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800d33e:	6928      	ldr	r0, [r5, #16]
 800d340:	b118      	cbz	r0, 800d34a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800d342:	6803      	ldr	r3, [r0, #0]
 800d344:	4621      	mov	r1, r4
 800d346:	695b      	ldr	r3, [r3, #20]
 800d348:	e7f4      	b.n	800d334 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 800d34a:	bd70      	pop	{r4, r5, r6, pc}

0800d34c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800d34c:	b538      	push	{r3, r4, r5, lr}
 800d34e:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 800d352:	4604      	mov	r4, r0
 800d354:	460d      	mov	r5, r1
 800d356:	428b      	cmp	r3, r1
 800d358:	d006      	beq.n	800d368 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800d35a:	6803      	ldr	r3, [r0, #0]
 800d35c:	b929      	cbnz	r1, 800d36a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800d35e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d362:	4798      	blx	r3
 800d364:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 800d368:	bd38      	pop	{r3, r4, r5, pc}
 800d36a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d36e:	e7f8      	b.n	800d362 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800d370 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800d370:	4b0d      	ldr	r3, [pc, #52]	; (800d3a8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800d372:	b510      	push	{r4, lr}
 800d374:	781b      	ldrb	r3, [r3, #0]
 800d376:	4604      	mov	r4, r0
 800d378:	b95b      	cbnz	r3, 800d392 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800d37a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800d37e:	2b02      	cmp	r3, #2
 800d380:	d007      	beq.n	800d392 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800d382:	6840      	ldr	r0, [r0, #4]
 800d384:	f000 f92a 	bl	800d5dc <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800d388:	b118      	cbz	r0, 800d392 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800d38a:	6862      	ldr	r2, [r4, #4]
 800d38c:	7a53      	ldrb	r3, [r2, #9]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d0fc      	beq.n	800d38c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800d392:	f7f4 fbcd 	bl	8001b30 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800d396:	4620      	mov	r0, r4
 800d398:	2100      	movs	r1, #0
 800d39a:	f7ff ffd7 	bl	800d34c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800d39e:	4620      	mov	r0, r4
 800d3a0:	f7ff fd74 	bl	800ce8c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d3a4:	bd10      	pop	{r4, pc}
 800d3a6:	bf00      	nop
 800d3a8:	2400e452 	.word	0x2400e452

0800d3ac <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 800d3ac:	b570      	push	{r4, r5, r6, lr}
 800d3ae:	4604      	mov	r4, r0
 800d3b0:	6803      	ldr	r3, [r0, #0]
 800d3b2:	b919      	cbnz	r1, 800d3bc <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 800d3b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d3ba:	4718      	bx	r3
 800d3bc:	2200      	movs	r2, #0
 800d3be:	f890 6078 	ldrb.w	r6, [r0, #120]	; 0x78
 800d3c2:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 800d3c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3c8:	4798      	blx	r3
 800d3ca:	4605      	mov	r5, r0
 800d3cc:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
 800d3d0:	4620      	mov	r0, r4
 800d3d2:	2101      	movs	r1, #1
 800d3d4:	f7ff ffba 	bl	800d34c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800d3d8:	4628      	mov	r0, r5
 800d3da:	bd70      	pop	{r4, r5, r6, pc}

0800d3dc <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800d3dc:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800d3e0:	1a13      	subs	r3, r2, r0
 800d3e2:	4258      	negs	r0, r3
 800d3e4:	4158      	adcs	r0, r3
 800d3e6:	4770      	bx	lr

0800d3e8 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800d3e8:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800d3ec:	1a9b      	subs	r3, r3, r2
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	bfdc      	itt	le
 800d3f2:	6882      	ldrle	r2, [r0, #8]
 800d3f4:	189b      	addle	r3, r3, r2
 800d3f6:	2b01      	cmp	r3, #1
 800d3f8:	bfcc      	ite	gt
 800d3fa:	2000      	movgt	r0, #0
 800d3fc:	2001      	movle	r0, #1
 800d3fe:	4770      	bx	lr

0800d400 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800d400:	6902      	ldr	r2, [r0, #16]
 800d402:	6843      	ldr	r3, [r0, #4]
 800d404:	2024      	movs	r0, #36	; 0x24
 800d406:	fb00 3002 	mla	r0, r0, r2, r3
 800d40a:	4770      	bx	lr

0800d40c <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800d40c:	6803      	ldr	r3, [r0, #0]
 800d40e:	691b      	ldr	r3, [r3, #16]
 800d410:	4718      	bx	r3

0800d412 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800d412:	2301      	movs	r3, #1
 800d414:	b570      	push	{r4, r5, r6, lr}
 800d416:	7203      	strb	r3, [r0, #8]
 800d418:	4604      	mov	r4, r0
 800d41a:	6840      	ldr	r0, [r0, #4]
 800d41c:	6803      	ldr	r3, [r0, #0]
 800d41e:	699b      	ldr	r3, [r3, #24]
 800d420:	4798      	blx	r3
 800d422:	6803      	ldr	r3, [r0, #0]
 800d424:	4605      	mov	r5, r0
 800d426:	2b40      	cmp	r3, #64	; 0x40
 800d428:	d00c      	beq.n	800d444 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800d42a:	d810      	bhi.n	800d44e <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800d42c:	2b04      	cmp	r3, #4
 800d42e:	d01d      	beq.n	800d46c <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800d430:	d804      	bhi.n	800d43c <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800d432:	2b01      	cmp	r3, #1
 800d434:	d006      	beq.n	800d444 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800d436:	2b02      	cmp	r3, #2
 800d438:	d02c      	beq.n	800d494 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800d43a:	bd70      	pop	{r4, r5, r6, pc}
 800d43c:	2b08      	cmp	r3, #8
 800d43e:	d01d      	beq.n	800d47c <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800d440:	2b20      	cmp	r3, #32
 800d442:	d1fa      	bne.n	800d43a <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800d444:	6823      	ldr	r3, [r4, #0]
 800d446:	4620      	mov	r0, r4
 800d448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d44a:	4798      	blx	r3
 800d44c:	e013      	b.n	800d476 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800d44e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d452:	d0f7      	beq.n	800d444 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800d454:	d804      	bhi.n	800d460 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800d456:	2b80      	cmp	r3, #128	; 0x80
 800d458:	d0f4      	beq.n	800d444 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800d45a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d45e:	e7f0      	b.n	800d442 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800d460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d464:	d0ee      	beq.n	800d444 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800d466:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d46a:	e7e5      	b.n	800d438 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800d46c:	6823      	ldr	r3, [r4, #0]
 800d46e:	7f01      	ldrb	r1, [r0, #28]
 800d470:	4620      	mov	r0, r4
 800d472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d474:	4798      	blx	r3
 800d476:	6823      	ldr	r3, [r4, #0]
 800d478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d47a:	e006      	b.n	800d48a <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800d47c:	6823      	ldr	r3, [r4, #0]
 800d47e:	7f01      	ldrb	r1, [r0, #28]
 800d480:	4620      	mov	r0, r4
 800d482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d484:	4798      	blx	r3
 800d486:	6823      	ldr	r3, [r4, #0]
 800d488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d48a:	4629      	mov	r1, r5
 800d48c:	4620      	mov	r0, r4
 800d48e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d492:	4718      	bx	r3
 800d494:	6823      	ldr	r3, [r4, #0]
 800d496:	4620      	mov	r0, r4
 800d498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d49a:	4798      	blx	r3
 800d49c:	e7f3      	b.n	800d486 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800d49e <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800d49e:	4770      	bx	lr

0800d4a0 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800d4a0:	4770      	bx	lr

0800d4a2 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800d4a2:	4770      	bx	lr

0800d4a4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800d4a4:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800d4a8:	b510      	push	{r4, lr}
 800d4aa:	1ad2      	subs	r2, r2, r3
 800d4ac:	2a00      	cmp	r2, #0
 800d4ae:	bfdc      	itt	le
 800d4b0:	6884      	ldrle	r4, [r0, #8]
 800d4b2:	1912      	addle	r2, r2, r4
 800d4b4:	2a01      	cmp	r2, #1
 800d4b6:	dd16      	ble.n	800d4e6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800d4b8:	6842      	ldr	r2, [r0, #4]
 800d4ba:	2424      	movs	r4, #36	; 0x24
 800d4bc:	fb04 2303 	mla	r3, r4, r3, r2
 800d4c0:	f101 0220 	add.w	r2, r1, #32
 800d4c4:	f851 4b04 	ldr.w	r4, [r1], #4
 800d4c8:	4291      	cmp	r1, r2
 800d4ca:	f843 4b04 	str.w	r4, [r3], #4
 800d4ce:	d1f9      	bne.n	800d4c4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800d4d0:	780a      	ldrb	r2, [r1, #0]
 800d4d2:	701a      	strb	r2, [r3, #0]
 800d4d4:	68c3      	ldr	r3, [r0, #12]
 800d4d6:	6882      	ldr	r2, [r0, #8]
 800d4d8:	f3bf 8f5b 	dmb	ish
 800d4dc:	3301      	adds	r3, #1
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	bfd8      	it	le
 800d4e2:	1a9b      	suble	r3, r3, r2
 800d4e4:	60c3      	str	r3, [r0, #12]
 800d4e6:	bd10      	pop	{r4, pc}

0800d4e8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800d4e8:	6903      	ldr	r3, [r0, #16]
 800d4ea:	6882      	ldr	r2, [r0, #8]
 800d4ec:	f3bf 8f5b 	dmb	ish
 800d4f0:	3301      	adds	r3, #1
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	bfd8      	it	le
 800d4f6:	1a9b      	suble	r3, r3, r2
 800d4f8:	6103      	str	r3, [r0, #16]
 800d4fa:	4770      	bx	lr

0800d4fc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800d4fc:	b570      	push	{r4, r5, r6, lr}
 800d4fe:	4604      	mov	r4, r0
 800d500:	460e      	mov	r6, r1
 800d502:	6860      	ldr	r0, [r4, #4]
 800d504:	6803      	ldr	r3, [r0, #0]
 800d506:	685b      	ldr	r3, [r3, #4]
 800d508:	4798      	blx	r3
 800d50a:	2800      	cmp	r0, #0
 800d50c:	d1f9      	bne.n	800d502 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800d50e:	4d0d      	ldr	r5, [pc, #52]	; (800d544 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800d510:	6828      	ldr	r0, [r5, #0]
 800d512:	6803      	ldr	r3, [r0, #0]
 800d514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d516:	4798      	blx	r3
 800d518:	f7f4 fb18 	bl	8001b4c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800d51c:	6828      	ldr	r0, [r5, #0]
 800d51e:	2101      	movs	r1, #1
 800d520:	f7ff ff14 	bl	800d34c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800d524:	6860      	ldr	r0, [r4, #4]
 800d526:	4631      	mov	r1, r6
 800d528:	6803      	ldr	r3, [r0, #0]
 800d52a:	689b      	ldr	r3, [r3, #8]
 800d52c:	4798      	blx	r3
 800d52e:	6823      	ldr	r3, [r4, #0]
 800d530:	4620      	mov	r0, r4
 800d532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d534:	4798      	blx	r3
 800d536:	6828      	ldr	r0, [r5, #0]
 800d538:	6803      	ldr	r3, [r0, #0]
 800d53a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d53e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d540:	4718      	bx	r3
 800d542:	bf00      	nop
 800d544:	2400e454 	.word	0x2400e454

0800d548 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800d548:	b508      	push	{r3, lr}
 800d54a:	f7f4 faf1 	bl	8001b30 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800d54e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d552:	f7f4 baf5 	b.w	8001b40 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800d556 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800d556:	b510      	push	{r4, lr}
 800d558:	4604      	mov	r4, r0
 800d55a:	2114      	movs	r1, #20
 800d55c:	f010 f96f 	bl	801d83e <_ZdlPvj>
 800d560:	4620      	mov	r0, r4
 800d562:	bd10      	pop	{r4, pc}

0800d564 <_ZN8touchgfx13DMA_Interface5startEv>:
 800d564:	b510      	push	{r4, lr}
 800d566:	4604      	mov	r4, r0
 800d568:	6840      	ldr	r0, [r0, #4]
 800d56a:	6803      	ldr	r3, [r0, #0]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	4798      	blx	r3
 800d570:	b948      	cbnz	r0, 800d586 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800d572:	7a63      	ldrb	r3, [r4, #9]
 800d574:	b13b      	cbz	r3, 800d586 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800d576:	7a23      	ldrb	r3, [r4, #8]
 800d578:	b92b      	cbnz	r3, 800d586 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800d57a:	6823      	ldr	r3, [r4, #0]
 800d57c:	4620      	mov	r0, r4
 800d57e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d584:	4718      	bx	r3
 800d586:	bd10      	pop	{r4, pc}

0800d588 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800d588:	b570      	push	{r4, r5, r6, lr}
 800d58a:	4604      	mov	r4, r0
 800d58c:	6840      	ldr	r0, [r0, #4]
 800d58e:	6803      	ldr	r3, [r0, #0]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	4798      	blx	r3
 800d594:	4605      	mov	r5, r0
 800d596:	b930      	cbnz	r0, 800d5a6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800d598:	7a23      	ldrb	r3, [r4, #8]
 800d59a:	b123      	cbz	r3, 800d5a6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800d59c:	6860      	ldr	r0, [r4, #4]
 800d59e:	6803      	ldr	r3, [r0, #0]
 800d5a0:	695b      	ldr	r3, [r3, #20]
 800d5a2:	4798      	blx	r3
 800d5a4:	7225      	strb	r5, [r4, #8]
 800d5a6:	6860      	ldr	r0, [r4, #4]
 800d5a8:	6803      	ldr	r3, [r0, #0]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	4798      	blx	r3
 800d5ae:	b928      	cbnz	r0, 800d5bc <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800d5b0:	6823      	ldr	r3, [r4, #0]
 800d5b2:	4620      	mov	r0, r4
 800d5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d5ba:	4718      	bx	r3
 800d5bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d5c0:	f7f4 bacc 	b.w	8001b5c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800d5c4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800d5c4:	b510      	push	{r4, lr}
 800d5c6:	6082      	str	r2, [r0, #8]
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	4c03      	ldr	r4, [pc, #12]	; (800d5d8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800d5cc:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800d5d0:	e9c0 4100 	strd	r4, r1, [r0]
 800d5d4:	bd10      	pop	{r4, pc}
 800d5d6:	bf00      	nop
 800d5d8:	080202c4 	.word	0x080202c4

0800d5dc <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800d5dc:	6840      	ldr	r0, [r0, #4]
 800d5de:	6803      	ldr	r3, [r0, #0]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	4718      	bx	r3

0800d5e4 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 800d5e4:	0c0b      	lsrs	r3, r1, #16
 800d5e6:	60c1      	str	r1, [r0, #12]
 800d5e8:	7481      	strb	r1, [r0, #18]
 800d5ea:	7403      	strb	r3, [r0, #16]
 800d5ec:	0a0b      	lsrs	r3, r1, #8
 800d5ee:	7443      	strb	r3, [r0, #17]
 800d5f0:	4770      	bx	lr

0800d5f2 <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 800d5f2:	f1a0 0008 	sub.w	r0, r0, #8
 800d5f6:	e7f5      	b.n	800d5e4 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>

0800d5f8 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 800d5f8:	b508      	push	{r3, lr}
 800d5fa:	4b05      	ldr	r3, [pc, #20]	; (800d610 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 800d5fc:	6818      	ldr	r0, [r3, #0]
 800d5fe:	6803      	ldr	r3, [r0, #0]
 800d600:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d604:	4798      	blx	r3
 800d606:	1e43      	subs	r3, r0, #1
 800d608:	4258      	negs	r0, r3
 800d60a:	4158      	adcs	r0, r3
 800d60c:	bd08      	pop	{r3, pc}
 800d60e:	bf00      	nop
 800d610:	2400e454 	.word	0x2400e454

0800d614 <_ZN8touchgfx13PainterRGB888D1Ev>:
 800d614:	4770      	bx	lr

0800d616 <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 800d616:	3808      	subs	r0, #8
 800d618:	4770      	bx	lr

0800d61a <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 800d61a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d61e:	b410      	push	{r4}
 800d620:	188c      	adds	r4, r1, r2
 800d622:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800d626:	68c2      	ldr	r2, [r0, #12]
 800d628:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800d62c:	4620      	mov	r0, r4
 800d62e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d632:	f7f4 bc49 	b.w	8001ec8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

0800d636 <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 800d636:	f7f4 bc3d 	b.w	8001eb4 <_ZN8touchgfx5paint8tearDownEv>

0800d63a <_ZN8touchgfx13PainterRGB888D0Ev>:
 800d63a:	b510      	push	{r4, lr}
 800d63c:	4604      	mov	r4, r0
 800d63e:	2114      	movs	r1, #20
 800d640:	f010 f8fd 	bl	801d83e <_ZdlPvj>
 800d644:	4620      	mov	r0, r4
 800d646:	bd10      	pop	{r4, pc}

0800d648 <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 800d648:	f1a0 0008 	sub.w	r0, r0, #8
 800d64c:	e7f5      	b.n	800d63a <_ZN8touchgfx13PainterRGB888D0Ev>
	...

0800d650 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 800d650:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d652:	6803      	ldr	r3, [r0, #0]
 800d654:	460d      	mov	r5, r1
 800d656:	4604      	mov	r4, r0
 800d658:	4601      	mov	r1, r0
 800d65a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d65c:	a802      	add	r0, sp, #8
 800d65e:	4798      	blx	r3
 800d660:	6828      	ldr	r0, [r5, #0]
 800d662:	6869      	ldr	r1, [r5, #4]
 800d664:	466b      	mov	r3, sp
 800d666:	c303      	stmia	r3!, {r0, r1}
 800d668:	4668      	mov	r0, sp
 800d66a:	4619      	mov	r1, r3
 800d66c:	f7fe ff92 	bl	800c594 <_ZN8touchgfx4RectaNERKS0_>
 800d670:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800d672:	b1a8      	cbz	r0, 800d6a0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 800d674:	6803      	ldr	r3, [r0, #0]
 800d676:	1d21      	adds	r1, r4, #4
 800d678:	68db      	ldr	r3, [r3, #12]
 800d67a:	4798      	blx	r3
 800d67c:	b180      	cbz	r0, 800d6a0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 800d67e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800d682:	2b00      	cmp	r3, #0
 800d684:	dd0c      	ble.n	800d6a0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 800d686:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 800d68a:	2d00      	cmp	r5, #0
 800d68c:	dd08      	ble.n	800d6a0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 800d68e:	4a2d      	ldr	r2, [pc, #180]	; (800d744 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf4>)
 800d690:	7812      	ldrb	r2, [r2, #0]
 800d692:	b13a      	cbz	r2, 800d6a4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
 800d694:	2a01      	cmp	r2, #1
 800d696:	d02d      	beq.n	800d6f4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa4>
 800d698:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800d69a:	6803      	ldr	r3, [r0, #0]
 800d69c:	691b      	ldr	r3, [r3, #16]
 800d69e:	4798      	blx	r3
 800d6a0:	b004      	add	sp, #16
 800d6a2:	bd70      	pop	{r4, r5, r6, pc}
 800d6a4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800d6a8:	441d      	add	r5, r3
 800d6aa:	b2ad      	uxth	r5, r5
 800d6ac:	b22e      	sxth	r6, r5
 800d6ae:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 800d6b2:	42b3      	cmp	r3, r6
 800d6b4:	daf0      	bge.n	800d698 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 800d6b6:	6823      	ldr	r3, [r4, #0]
 800d6b8:	4669      	mov	r1, sp
 800d6ba:	4620      	mov	r0, r4
 800d6bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6be:	4798      	blx	r3
 800d6c0:	b940      	cbnz	r0, 800d6d4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 800d6c2:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800d6c6:	2b01      	cmp	r3, #1
 800d6c8:	d004      	beq.n	800d6d4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 800d6ca:	3301      	adds	r3, #1
 800d6cc:	105b      	asrs	r3, r3, #1
 800d6ce:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d6d2:	e7f0      	b.n	800d6b6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x66>
 800d6d4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d6d8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800d6dc:	4413      	add	r3, r2
 800d6de:	b29b      	uxth	r3, r3
 800d6e0:	441a      	add	r2, r3
 800d6e2:	f8ad 3002 	strh.w	r3, [sp, #2]
 800d6e6:	b212      	sxth	r2, r2
 800d6e8:	4296      	cmp	r6, r2
 800d6ea:	dae0      	bge.n	800d6ae <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 800d6ec:	1aeb      	subs	r3, r5, r3
 800d6ee:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d6f2:	e7dc      	b.n	800d6ae <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 800d6f4:	f8bd 5000 	ldrh.w	r5, [sp]
 800d6f8:	441d      	add	r5, r3
 800d6fa:	b2ad      	uxth	r5, r5
 800d6fc:	b22e      	sxth	r6, r5
 800d6fe:	f9bd 3000 	ldrsh.w	r3, [sp]
 800d702:	42b3      	cmp	r3, r6
 800d704:	dac8      	bge.n	800d698 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 800d706:	6823      	ldr	r3, [r4, #0]
 800d708:	4669      	mov	r1, sp
 800d70a:	4620      	mov	r0, r4
 800d70c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d70e:	4798      	blx	r3
 800d710:	b940      	cbnz	r0, 800d724 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 800d712:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800d716:	2b01      	cmp	r3, #1
 800d718:	d004      	beq.n	800d724 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 800d71a:	3301      	adds	r3, #1
 800d71c:	105b      	asrs	r3, r3, #1
 800d71e:	f8ad 3004 	strh.w	r3, [sp, #4]
 800d722:	e7f0      	b.n	800d706 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb6>
 800d724:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800d728:	f8bd 3000 	ldrh.w	r3, [sp]
 800d72c:	4413      	add	r3, r2
 800d72e:	b29b      	uxth	r3, r3
 800d730:	441a      	add	r2, r3
 800d732:	f8ad 3000 	strh.w	r3, [sp]
 800d736:	b212      	sxth	r2, r2
 800d738:	4296      	cmp	r6, r2
 800d73a:	dae0      	bge.n	800d6fe <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 800d73c:	1aeb      	subs	r3, r5, r3
 800d73e:	f8ad 3004 	strh.w	r3, [sp, #4]
 800d742:	e7dc      	b.n	800d6fe <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 800d744:	2400e44c 	.word	0x2400e44c

0800d748 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 800d748:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d74a:	6803      	ldr	r3, [r0, #0]
 800d74c:	4604      	mov	r4, r0
 800d74e:	4601      	mov	r1, r0
 800d750:	4668      	mov	r0, sp
 800d752:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d754:	4798      	blx	r3
 800d756:	2100      	movs	r1, #0
 800d758:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 800d75c:	4668      	mov	r0, sp
 800d75e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800d762:	9102      	str	r1, [sp, #8]
 800d764:	a902      	add	r1, sp, #8
 800d766:	f8ad 200c 	strh.w	r2, [sp, #12]
 800d76a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d76e:	f7fe ff11 	bl	800c594 <_ZN8touchgfx4RectaNERKS0_>
 800d772:	6823      	ldr	r3, [r4, #0]
 800d774:	4669      	mov	r1, sp
 800d776:	4620      	mov	r0, r4
 800d778:	691b      	ldr	r3, [r3, #16]
 800d77a:	4798      	blx	r3
 800d77c:	b004      	add	sp, #16
 800d77e:	bd10      	pop	{r4, pc}

0800d780 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 800d780:	2101      	movs	r1, #1
 800d782:	2200      	movs	r2, #0
 800d784:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 800d788:	490a      	ldr	r1, [pc, #40]	; (800d7b4 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 800d78a:	8082      	strh	r2, [r0, #4]
 800d78c:	6001      	str	r1, [r0, #0]
 800d78e:	21ff      	movs	r1, #255	; 0xff
 800d790:	80c2      	strh	r2, [r0, #6]
 800d792:	8102      	strh	r2, [r0, #8]
 800d794:	8142      	strh	r2, [r0, #10]
 800d796:	8182      	strh	r2, [r0, #12]
 800d798:	81c2      	strh	r2, [r0, #14]
 800d79a:	8202      	strh	r2, [r0, #16]
 800d79c:	8242      	strh	r2, [r0, #18]
 800d79e:	61c2      	str	r2, [r0, #28]
 800d7a0:	8402      	strh	r2, [r0, #32]
 800d7a2:	8442      	strh	r2, [r0, #34]	; 0x22
 800d7a4:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 800d7a8:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 800d7ac:	6282      	str	r2, [r0, #40]	; 0x28
 800d7ae:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800d7b2:	4770      	bx	lr
 800d7b4:	08020320 	.word	0x08020320

0800d7b8 <_ZN8touchgfx17AbstractDataGraph9setScaleXEib>:
 800d7b8:	6301      	str	r1, [r0, #48]	; 0x30
 800d7ba:	4770      	bx	lr

0800d7bc <_ZN8touchgfx17AbstractDataGraph9setScaleYEib>:
 800d7bc:	6341      	str	r1, [r0, #52]	; 0x34
 800d7be:	4770      	bx	lr

0800d7c0 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE>:
 800d7c0:	b530      	push	{r4, r5, lr}
 800d7c2:	460d      	mov	r5, r1
 800d7c4:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 800d7c6:	8949      	ldrh	r1, [r1, #10]
 800d7c8:	b085      	sub	sp, #20
 800d7ca:	4604      	mov	r4, r0
 800d7cc:	1ac9      	subs	r1, r1, r3
 800d7ce:	6803      	ldr	r3, [r0, #0]
 800d7d0:	f10d 0206 	add.w	r2, sp, #6
 800d7d4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800d7d8:	b209      	sxth	r1, r1
 800d7da:	4798      	blx	r3
 800d7dc:	b1a0      	cbz	r0, 800d808 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 800d7de:	792b      	ldrb	r3, [r5, #4]
 800d7e0:	b993      	cbnz	r3, 800d808 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 800d7e2:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 800d7e6:	b178      	cbz	r0, 800d808 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 800d7e8:	6803      	ldr	r3, [r0, #0]
 800d7ea:	68db      	ldr	r3, [r3, #12]
 800d7ec:	4798      	blx	r3
 800d7ee:	b158      	cbz	r0, 800d808 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 800d7f0:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800d7f4:	aa02      	add	r2, sp, #8
 800d7f6:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 800d7fa:	4621      	mov	r1, r4
 800d7fc:	f8ad 3008 	strh.w	r3, [sp, #8]
 800d800:	9503      	str	r5, [sp, #12]
 800d802:	6803      	ldr	r3, [r0, #0]
 800d804:	689b      	ldr	r3, [r3, #8]
 800d806:	4798      	blx	r3
 800d808:	b005      	add	sp, #20
 800d80a:	bd30      	pop	{r4, r5, pc}

0800d80c <_ZN8touchgfx15StaticDataGraph24setGraphRangeXAutoScaledEbi>:
 800d80c:	b430      	push	{r4, r5}
 800d80e:	f9b0 511e 	ldrsh.w	r5, [r0, #286]	; 0x11e
 800d812:	b1cd      	cbz	r5, 800d848 <_ZN8touchgfx15StaticDataGraph24setGraphRangeXAutoScaledEbi+0x3c>
 800d814:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800d818:	f8d0 413c 	ldr.w	r4, [r0, #316]	; 0x13c
 800d81c:	3d01      	subs	r5, #1
 800d81e:	6823      	ldr	r3, [r4, #0]
 800d820:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 800d824:	b139      	cbz	r1, 800d836 <_ZN8touchgfx15StaticDataGraph24setGraphRangeXAutoScaledEbi+0x2a>
 800d826:	4293      	cmp	r3, r2
 800d828:	f1c2 0100 	rsb	r1, r2, #0
 800d82c:	bfa8      	it	ge
 800d82e:	4613      	movge	r3, r2
 800d830:	428c      	cmp	r4, r1
 800d832:	bfb8      	it	lt
 800d834:	460c      	movlt	r4, r1
 800d836:	1a99      	subs	r1, r3, r2
 800d838:	4422      	add	r2, r4
 800d83a:	4291      	cmp	r1, r2
 800d83c:	d004      	beq.n	800d848 <_ZN8touchgfx15StaticDataGraph24setGraphRangeXAutoScaledEbi+0x3c>
 800d83e:	6803      	ldr	r3, [r0, #0]
 800d840:	bc30      	pop	{r4, r5}
 800d842:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d846:	4718      	bx	r3
 800d848:	bc30      	pop	{r4, r5}
 800d84a:	4770      	bx	lr

0800d84c <_ZN8touchgfx15StaticDataGraph11deleteValueEi>:
 800d84c:	b410      	push	{r4}
 800d84e:	2300      	movs	r3, #0
 800d850:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
 800d854:	429a      	cmp	r2, r3
 800d856:	dd0e      	ble.n	800d876 <_ZN8touchgfx15StaticDataGraph11deleteValueEi+0x2a>
 800d858:	f8d0 413c 	ldr.w	r4, [r0, #316]	; 0x13c
 800d85c:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 800d860:	428c      	cmp	r4, r1
 800d862:	d106      	bne.n	800d872 <_ZN8touchgfx15StaticDataGraph11deleteValueEi+0x26>
 800d864:	6802      	ldr	r2, [r0, #0]
 800d866:	4619      	mov	r1, r3
 800d868:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d86c:	f8d2 2130 	ldr.w	r2, [r2, #304]	; 0x130
 800d870:	4710      	bx	r2
 800d872:	3301      	adds	r3, #1
 800d874:	e7ee      	b.n	800d854 <_ZN8touchgfx15StaticDataGraph11deleteValueEi+0x8>
 800d876:	f04f 30ff 	mov.w	r0, #4294967295
 800d87a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d87e:	4770      	bx	lr

0800d880 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii>:
 800d880:	428a      	cmp	r2, r1
 800d882:	bfbc      	itt	lt
 800d884:	460b      	movlt	r3, r1
 800d886:	4611      	movlt	r1, r2
 800d888:	b510      	push	{r4, lr}
 800d88a:	bfb8      	it	lt
 800d88c:	461a      	movlt	r2, r3
 800d88e:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 800d892:	4604      	mov	r4, r0
 800d894:	428b      	cmp	r3, r1
 800d896:	d103      	bne.n	800d8a0 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x20>
 800d898:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 800d89c:	4293      	cmp	r3, r2
 800d89e:	d011      	beq.n	800d8c4 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x44>
 800d8a0:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
 800d8a4:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 800d8a8:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
 800d8ac:	f005 fa7d 	bl	8012daa <_ZNK8touchgfx8Drawable10invalidateEv>
 800d8b0:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800d8b4:	f005 fa79 	bl	8012daa <_ZNK8touchgfx8Drawable10invalidateEv>
 800d8b8:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800d8bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8c0:	f005 ba73 	b.w	8012daa <_ZNK8touchgfx8Drawable10invalidateEv>
 800d8c4:	bd10      	pop	{r4, pc}

0800d8c6 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>:
 800d8c6:	428a      	cmp	r2, r1
 800d8c8:	bfbc      	itt	lt
 800d8ca:	460b      	movlt	r3, r1
 800d8cc:	4611      	movlt	r1, r2
 800d8ce:	b510      	push	{r4, lr}
 800d8d0:	bfb8      	it	lt
 800d8d2:	461a      	movlt	r2, r3
 800d8d4:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 800d8d8:	4604      	mov	r4, r0
 800d8da:	428b      	cmp	r3, r1
 800d8dc:	d103      	bne.n	800d8e6 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x20>
 800d8de:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
 800d8e2:	4293      	cmp	r3, r2
 800d8e4:	d011      	beq.n	800d90a <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x44>
 800d8e6:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
 800d8ea:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800d8ee:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
 800d8f2:	f005 fa5a 	bl	8012daa <_ZNK8touchgfx8Drawable10invalidateEv>
 800d8f6:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800d8fa:	f005 fa56 	bl	8012daa <_ZNK8touchgfx8Drawable10invalidateEv>
 800d8fe:	f104 0090 	add.w	r0, r4, #144	; 0x90
 800d902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d906:	f005 ba50 	b.w	8012daa <_ZNK8touchgfx8Drawable10invalidateEv>
 800d90a:	bd10      	pop	{r4, pc}

0800d90c <_ZN8touchgfx17AbstractDataGraph5clearEv>:
 800d90c:	2300      	movs	r3, #0
 800d90e:	3038      	adds	r0, #56	; 0x38
 800d910:	f8a0 30e6 	strh.w	r3, [r0, #230]	; 0xe6
 800d914:	f005 ba49 	b.w	8012daa <_ZNK8touchgfx8Drawable10invalidateEv>

0800d918 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi>:
 800d918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d91c:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 800d920:	4604      	mov	r4, r0
 800d922:	4688      	mov	r8, r1
 800d924:	4616      	mov	r6, r2
 800d926:	2b00      	cmp	r3, #0
 800d928:	d04c      	beq.n	800d9c4 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0xac>
 800d92a:	6803      	ldr	r3, [r0, #0]
 800d92c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800d930:	4798      	blx	r3
 800d932:	6823      	ldr	r3, [r4, #0]
 800d934:	4605      	mov	r5, r0
 800d936:	4620      	mov	r0, r4
 800d938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d93c:	4798      	blx	r3
 800d93e:	4285      	cmp	r5, r0
 800d940:	f8d4 e13c 	ldr.w	lr, [r4, #316]	; 0x13c
 800d944:	bfc2      	ittt	gt
 800d946:	b22b      	sxthgt	r3, r5
 800d948:	4605      	movgt	r5, r0
 800d94a:	4618      	movgt	r0, r3
 800d94c:	2300      	movs	r3, #0
 800d94e:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 800d952:	0099      	lsls	r1, r3, #2
 800d954:	42aa      	cmp	r2, r5
 800d956:	da05      	bge.n	800d964 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x4c>
 800d958:	f9b4 711e 	ldrsh.w	r7, [r4, #286]	; 0x11e
 800d95c:	42bb      	cmp	r3, r7
 800d95e:	da01      	bge.n	800d964 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x4c>
 800d960:	3301      	adds	r3, #1
 800d962:	e7f4      	b.n	800d94e <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x36>
 800d964:	4282      	cmp	r2, r0
 800d966:	dc2d      	bgt.n	800d9c4 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0xac>
 800d968:	f8d4 c140 	ldr.w	ip, [r4, #320]	; 0x140
 800d96c:	3301      	adds	r3, #1
 800d96e:	f85c 5001 	ldr.w	r5, [ip, r1]
 800d972:	462a      	mov	r2, r5
 800d974:	f85e 1023 	ldr.w	r1, [lr, r3, lsl #2]
 800d978:	4288      	cmp	r0, r1
 800d97a:	dd0d      	ble.n	800d998 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x80>
 800d97c:	f9b4 111e 	ldrsh.w	r1, [r4, #286]	; 0x11e
 800d980:	428b      	cmp	r3, r1
 800d982:	da09      	bge.n	800d998 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x80>
 800d984:	f85c 7023 	ldr.w	r7, [ip, r3, lsl #2]
 800d988:	3301      	adds	r3, #1
 800d98a:	42bd      	cmp	r5, r7
 800d98c:	bfa8      	it	ge
 800d98e:	463d      	movge	r5, r7
 800d990:	42ba      	cmp	r2, r7
 800d992:	bfb8      	it	lt
 800d994:	463a      	movlt	r2, r7
 800d996:	e7ed      	b.n	800d974 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x5c>
 800d998:	f1b8 0f00 	cmp.w	r8, #0
 800d99c:	d007      	beq.n	800d9ae <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x96>
 800d99e:	42b5      	cmp	r5, r6
 800d9a0:	f1c6 0300 	rsb	r3, r6, #0
 800d9a4:	bfa8      	it	ge
 800d9a6:	4635      	movge	r5, r6
 800d9a8:	429a      	cmp	r2, r3
 800d9aa:	bfb8      	it	lt
 800d9ac:	461a      	movlt	r2, r3
 800d9ae:	1ba9      	subs	r1, r5, r6
 800d9b0:	4432      	add	r2, r6
 800d9b2:	4291      	cmp	r1, r2
 800d9b4:	d006      	beq.n	800d9c4 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0xac>
 800d9b6:	6823      	ldr	r3, [r4, #0]
 800d9b8:	4620      	mov	r0, r4
 800d9ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d9be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9c2:	4718      	bx	r3
 800d9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d9c8 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE>:
 800d9c8:	b530      	push	{r4, r5, lr}
 800d9ca:	790b      	ldrb	r3, [r1, #4]
 800d9cc:	b085      	sub	sp, #20
 800d9ce:	4604      	mov	r4, r0
 800d9d0:	460d      	mov	r5, r1
 800d9d2:	2b02      	cmp	r3, #2
 800d9d4:	d020      	beq.n	800da18 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 800d9d6:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 800d9d8:	f10d 0206 	add.w	r2, sp, #6
 800d9dc:	88c9      	ldrh	r1, [r1, #6]
 800d9de:	1ac9      	subs	r1, r1, r3
 800d9e0:	6803      	ldr	r3, [r0, #0]
 800d9e2:	b209      	sxth	r1, r1
 800d9e4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800d9e8:	4798      	blx	r3
 800d9ea:	b1a8      	cbz	r0, 800da18 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 800d9ec:	792b      	ldrb	r3, [r5, #4]
 800d9ee:	2b01      	cmp	r3, #1
 800d9f0:	d812      	bhi.n	800da18 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 800d9f2:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 800d9f6:	b178      	cbz	r0, 800da18 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 800d9f8:	6803      	ldr	r3, [r0, #0]
 800d9fa:	68db      	ldr	r3, [r3, #12]
 800d9fc:	4798      	blx	r3
 800d9fe:	b158      	cbz	r0, 800da18 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 800da00:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800da04:	aa02      	add	r2, sp, #8
 800da06:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 800da0a:	4621      	mov	r1, r4
 800da0c:	f8ad 3008 	strh.w	r3, [sp, #8]
 800da10:	9503      	str	r5, [sp, #12]
 800da12:	6803      	ldr	r3, [r0, #0]
 800da14:	689b      	ldr	r3, [r3, #8]
 800da16:	4798      	blx	r3
 800da18:	b005      	add	sp, #20
 800da1a:	bd30      	pop	{r4, r5, pc}

0800da1c <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_>:
 800da1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da20:	4604      	mov	r4, r0
 800da22:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 800da26:	4690      	mov	r8, r2
 800da28:	461e      	mov	r6, r3
 800da2a:	9f06      	ldr	r7, [sp, #24]
 800da2c:	b928      	cbnz	r0, 800da3a <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1e>
 800da2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800da32:	803b      	strh	r3, [r7, #0]
 800da34:	8033      	strh	r3, [r6, #0]
 800da36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da3a:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 800da3e:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	; 0x116
 800da42:	1883      	adds	r3, r0, r2
 800da44:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 800da48:	1ad2      	subs	r2, r2, r3
 800da4a:	b212      	sxth	r2, r2
 800da4c:	2a01      	cmp	r2, #1
 800da4e:	dc07      	bgt.n	800da60 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x44>
 800da50:	2300      	movs	r3, #0
 800da52:	8033      	strh	r3, [r6, #0]
 800da54:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 800da58:	3b01      	subs	r3, #1
 800da5a:	803b      	strh	r3, [r7, #0]
 800da5c:	2001      	movs	r0, #1
 800da5e:	e7ea      	b.n	800da36 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 800da60:	f8d4 5130 	ldr.w	r5, [r4, #304]	; 0x130
 800da64:	1a08      	subs	r0, r1, r0
 800da66:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 800da6a:	3a01      	subs	r2, #1
 800da6c:	0140      	lsls	r0, r0, #5
 800da6e:	1ae9      	subs	r1, r5, r3
 800da70:	f005 fb62 	bl	8013138 <_ZN8touchgfx6muldivElll>
 800da74:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 800da78:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 800da7c:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 800da80:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	; 0x116
 800da84:	1883      	adds	r3, r0, r2
 800da86:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 800da8a:	eba8 0000 	sub.w	r0, r8, r0
 800da8e:	1ad2      	subs	r2, r2, r3
 800da90:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800da94:	0140      	lsls	r0, r0, #5
 800da96:	b212      	sxth	r2, r2
 800da98:	1a59      	subs	r1, r3, r1
 800da9a:	3a01      	subs	r2, #1
 800da9c:	f005 fb4c 	bl	8013138 <_ZN8touchgfx6muldivElll>
 800daa0:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 800daa4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800daa8:	4285      	cmp	r5, r0
 800daaa:	bfde      	ittt	le
 800daac:	4603      	movle	r3, r0
 800daae:	4628      	movle	r0, r5
 800dab0:	461d      	movle	r5, r3
 800dab2:	2320      	movs	r3, #32
 800dab4:	2d00      	cmp	r5, #0
 800dab6:	bfa8      	it	ge
 800dab8:	351f      	addge	r5, #31
 800daba:	fb90 f0f3 	sdiv	r0, r0, r3
 800dabe:	bfb4      	ite	lt
 800dac0:	fb95 f5f3 	sdivlt	r5, r5, r3
 800dac4:	116d      	asrge	r5, r5, #5
 800dac6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800daca:	8033      	strh	r3, [r6, #0]
 800dacc:	f9b4 211e 	ldrsh.w	r2, [r4, #286]	; 0x11e
 800dad0:	f9b6 3000 	ldrsh.w	r3, [r6]
 800dad4:	1e51      	subs	r1, r2, #1
 800dad6:	428b      	cmp	r3, r1
 800dad8:	da06      	bge.n	800dae8 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xcc>
 800dada:	3301      	adds	r3, #1
 800dadc:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 800dae0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800dae4:	4288      	cmp	r0, r1
 800dae6:	daf0      	bge.n	800daca <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xae>
 800dae8:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 800daec:	803a      	strh	r2, [r7, #0]
 800daee:	f9b7 3000 	ldrsh.w	r3, [r7]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	dd23      	ble.n	800db3e <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x122>
 800daf6:	181a      	adds	r2, r3, r0
 800daf8:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 800dafc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800db00:	42aa      	cmp	r2, r5
 800db02:	db10      	blt.n	800db26 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x10a>
 800db04:	3b01      	subs	r3, #1
 800db06:	803b      	strh	r3, [r7, #0]
 800db08:	e7f1      	b.n	800daee <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xd2>
 800db0a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800db0e:	8032      	strh	r2, [r6, #0]
 800db10:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 800db14:	f9b7 2000 	ldrsh.w	r2, [r7]
 800db18:	4293      	cmp	r3, r2
 800db1a:	bfdc      	itt	le
 800db1c:	f103 33ff 	addle.w	r3, r3, #4294967295
 800db20:	b21a      	sxthle	r2, r3
 800db22:	803a      	strh	r2, [r7, #0]
 800db24:	e79a      	b.n	800da5c <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x40>
 800db26:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 800db2a:	f9b6 2000 	ldrsh.w	r2, [r6]
 800db2e:	3b01      	subs	r3, #1
 800db30:	429a      	cmp	r2, r3
 800db32:	dbea      	blt.n	800db0a <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xee>
 800db34:	b21b      	sxth	r3, r3
 800db36:	2000      	movs	r0, #0
 800db38:	803b      	strh	r3, [r7, #0]
 800db3a:	8033      	strh	r3, [r6, #0]
 800db3c:	e77b      	b.n	800da36 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 800db3e:	2000      	movs	r0, #0
 800db40:	8038      	strh	r0, [r7, #0]
 800db42:	8030      	strh	r0, [r6, #0]
 800db44:	e777      	b.n	800da36 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
	...

0800db48 <_ZN8touchgfx9ContainerC1Ev>:
 800db48:	2101      	movs	r1, #1
 800db4a:	2200      	movs	r2, #0
 800db4c:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 800db50:	4909      	ldr	r1, [pc, #36]	; (800db78 <_ZN8touchgfx9ContainerC1Ev+0x30>)
 800db52:	8082      	strh	r2, [r0, #4]
 800db54:	80c2      	strh	r2, [r0, #6]
 800db56:	8102      	strh	r2, [r0, #8]
 800db58:	8142      	strh	r2, [r0, #10]
 800db5a:	8182      	strh	r2, [r0, #12]
 800db5c:	81c2      	strh	r2, [r0, #14]
 800db5e:	8202      	strh	r2, [r0, #16]
 800db60:	8242      	strh	r2, [r0, #18]
 800db62:	61c2      	str	r2, [r0, #28]
 800db64:	8402      	strh	r2, [r0, #32]
 800db66:	8442      	strh	r2, [r0, #34]	; 0x22
 800db68:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 800db6c:	6001      	str	r1, [r0, #0]
 800db6e:	6282      	str	r2, [r0, #40]	; 0x28
 800db70:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800db74:	4770      	bx	lr
 800db76:	bf00      	nop
 800db78:	08020228 	.word	0x08020228

0800db7c <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs>:
 800db7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db80:	4605      	mov	r5, r0
 800db82:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 800db86:	4688      	mov	r8, r1
 800db88:	4691      	mov	r9, r2
 800db8a:	469a      	mov	sl, r3
 800db8c:	b360      	cbz	r0, 800dbe8 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6c>
 800db8e:	2700      	movs	r7, #0
 800db90:	f04f 3bff 	mov.w	fp, #4294967295
 800db94:	b23e      	sxth	r6, r7
 800db96:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	; 0x11e
 800db9a:	42b3      	cmp	r3, r6
 800db9c:	dd23      	ble.n	800dbe6 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6a>
 800db9e:	682b      	ldr	r3, [r5, #0]
 800dba0:	4631      	mov	r1, r6
 800dba2:	4628      	mov	r0, r5
 800dba4:	3701      	adds	r7, #1
 800dba6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800dbaa:	4798      	blx	r3
 800dbac:	9001      	str	r0, [sp, #4]
 800dbae:	a801      	add	r0, sp, #4
 800dbb0:	f7f6 f8ab 	bl	8003d0a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800dbb4:	682b      	ldr	r3, [r5, #0]
 800dbb6:	eba0 0008 	sub.w	r0, r0, r8
 800dbba:	4631      	mov	r1, r6
 800dbbc:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800dbc0:	b204      	sxth	r4, r0
 800dbc2:	4628      	mov	r0, r5
 800dbc4:	4798      	blx	r3
 800dbc6:	9001      	str	r0, [sp, #4]
 800dbc8:	a801      	add	r0, sp, #4
 800dbca:	f7f6 f89e 	bl	8003d0a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800dbce:	eba0 0009 	sub.w	r0, r0, r9
 800dbd2:	fb10 f000 	smulbb	r0, r0, r0
 800dbd6:	fb04 0404 	mla	r4, r4, r4, r0
 800dbda:	455c      	cmp	r4, fp
 800dbdc:	bf3c      	itt	cc
 800dbde:	f8aa 6000 	strhcc.w	r6, [sl]
 800dbe2:	46a3      	movcc	fp, r4
 800dbe4:	e7d6      	b.n	800db94 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x18>
 800dbe6:	2001      	movs	r0, #1
 800dbe8:	b003      	add	sp, #12
 800dbea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dbee <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs>:
 800dbee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dbf2:	4604      	mov	r4, r0
 800dbf4:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 800dbf8:	4688      	mov	r8, r1
 800dbfa:	4691      	mov	r9, r2
 800dbfc:	b1f8      	cbz	r0, 800dc3e <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x50>
 800dbfe:	2500      	movs	r5, #0
 800dc00:	f04f 37ff 	mov.w	r7, #4294967295
 800dc04:	b22e      	sxth	r6, r5
 800dc06:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 800dc0a:	42b3      	cmp	r3, r6
 800dc0c:	dd16      	ble.n	800dc3c <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x4e>
 800dc0e:	6823      	ldr	r3, [r4, #0]
 800dc10:	4631      	mov	r1, r6
 800dc12:	4620      	mov	r0, r4
 800dc14:	3501      	adds	r5, #1
 800dc16:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800dc1a:	4798      	blx	r3
 800dc1c:	9001      	str	r0, [sp, #4]
 800dc1e:	a801      	add	r0, sp, #4
 800dc20:	f7f6 f873 	bl	8003d0a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800dc24:	b200      	sxth	r0, r0
 800dc26:	eba0 0008 	sub.w	r0, r0, r8
 800dc2a:	2800      	cmp	r0, #0
 800dc2c:	bfb8      	it	lt
 800dc2e:	4240      	neglt	r0, r0
 800dc30:	42b8      	cmp	r0, r7
 800dc32:	bf3c      	itt	cc
 800dc34:	f8a9 6000 	strhcc.w	r6, [r9]
 800dc38:	4607      	movcc	r7, r0
 800dc3a:	e7e3      	b.n	800dc04 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x16>
 800dc3c:	2001      	movs	r0, #1
 800dc3e:	b003      	add	sp, #12
 800dc40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800dc44 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>:
 800dc44:	f8a0 3118 	strh.w	r3, [r0, #280]	; 0x118
 800dc48:	f9bd 3000 	ldrsh.w	r3, [sp]
 800dc4c:	f8a0 1114 	strh.w	r1, [r0, #276]	; 0x114
 800dc50:	f8a0 2116 	strh.w	r2, [r0, #278]	; 0x116
 800dc54:	f8a0 311a 	strh.w	r3, [r0, #282]	; 0x11a
 800dc58:	4770      	bx	lr

0800dc5a <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>:
 800dc5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc5c:	4604      	mov	r4, r0
 800dc5e:	3038      	adds	r0, #56	; 0x38
 800dc60:	460d      	mov	r5, r1
 800dc62:	f7fe fb13 	bl	800c28c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800dc66:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 800dc6a:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800dc6e:	4628      	mov	r0, r5
 800dc70:	9200      	str	r2, [sp, #0]
 800dc72:	2200      	movs	r2, #0
 800dc74:	4611      	mov	r1, r2
 800dc76:	f7f5 fbe1 	bl	800343c <_ZN8touchgfx8Drawable11setPositionEssss>
 800dc7a:	b003      	add	sp, #12
 800dc7c:	bd30      	pop	{r4, r5, pc}

0800dc7e <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>:
 800dc7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc80:	4604      	mov	r4, r0
 800dc82:	3064      	adds	r0, #100	; 0x64
 800dc84:	460d      	mov	r5, r1
 800dc86:	f7fe fb01 	bl	800c28c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800dc8a:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	; 0x6e
 800dc8e:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
 800dc92:	4628      	mov	r0, r5
 800dc94:	9200      	str	r2, [sp, #0]
 800dc96:	2200      	movs	r2, #0
 800dc98:	4611      	mov	r1, r2
 800dc9a:	f7f5 fbcf 	bl	800343c <_ZN8touchgfx8Drawable11setPositionEssss>
 800dc9e:	b003      	add	sp, #12
 800dca0:	bd30      	pop	{r4, r5, pc}

0800dca2 <_ZN8touchgfx17AbstractDataGraph16addBottomElementERNS_23AbstractGraphDecorationE>:
 800dca2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dca4:	4604      	mov	r4, r0
 800dca6:	30e8      	adds	r0, #232	; 0xe8
 800dca8:	460d      	mov	r5, r1
 800dcaa:	f7fe faef 	bl	800c28c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800dcae:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	; 0xf2
 800dcb2:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	; 0xf0
 800dcb6:	4628      	mov	r0, r5
 800dcb8:	9200      	str	r2, [sp, #0]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	4611      	mov	r1, r2
 800dcbe:	f7f5 fbbd 	bl	800343c <_ZN8touchgfx8Drawable11setPositionEssss>
 800dcc2:	b003      	add	sp, #12
 800dcc4:	bd30      	pop	{r4, r5, pc}

0800dcc6 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>:
 800dcc6:	b538      	push	{r3, r4, r5, lr}
 800dcc8:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 800dccc:	460d      	mov	r5, r1
 800dcce:	428b      	cmp	r3, r1
 800dcd0:	dd08      	ble.n	800dce4 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 800dcd2:	6e04      	ldr	r4, [r0, #96]	; 0x60
 800dcd4:	b134      	cbz	r4, 800dce4 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 800dcd6:	6823      	ldr	r3, [r4, #0]
 800dcd8:	4620      	mov	r0, r4
 800dcda:	4629      	mov	r1, r5
 800dcdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcde:	4798      	blx	r3
 800dce0:	69a4      	ldr	r4, [r4, #24]
 800dce2:	e7f7      	b.n	800dcd4 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0xe>
 800dce4:	bd38      	pop	{r3, r4, r5, pc}

0800dce6 <_ZN8touchgfx15StaticDataGraph11deleteIndexEi>:
 800dce6:	b570      	push	{r4, r5, r6, lr}
 800dce8:	b20e      	sxth	r6, r1
 800dcea:	4605      	mov	r5, r0
 800dcec:	460c      	mov	r4, r1
 800dcee:	4631      	mov	r1, r6
 800dcf0:	f7ff ffe9 	bl	800dcc6 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 800dcf4:	f8b5 311e 	ldrh.w	r3, [r5, #286]	; 0x11e
 800dcf8:	3b01      	subs	r3, #1
 800dcfa:	f8a5 311e 	strh.w	r3, [r5, #286]	; 0x11e
 800dcfe:	00a3      	lsls	r3, r4, #2
 800dd00:	f9b5 111e 	ldrsh.w	r1, [r5, #286]	; 0x11e
 800dd04:	1d1a      	adds	r2, r3, #4
 800dd06:	42a1      	cmp	r1, r4
 800dd08:	dd0a      	ble.n	800dd20 <_ZN8touchgfx15StaticDataGraph11deleteIndexEi+0x3a>
 800dd0a:	f8d5 113c 	ldr.w	r1, [r5, #316]	; 0x13c
 800dd0e:	3401      	adds	r4, #1
 800dd10:	5888      	ldr	r0, [r1, r2]
 800dd12:	50c8      	str	r0, [r1, r3]
 800dd14:	f8d5 1140 	ldr.w	r1, [r5, #320]	; 0x140
 800dd18:	5888      	ldr	r0, [r1, r2]
 800dd1a:	50c8      	str	r0, [r1, r3]
 800dd1c:	4613      	mov	r3, r2
 800dd1e:	e7ef      	b.n	800dd00 <_ZN8touchgfx15StaticDataGraph11deleteIndexEi+0x1a>
 800dd20:	4630      	mov	r0, r6
 800dd22:	bd70      	pop	{r4, r5, r6, pc}

0800dd24 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>:
 800dd24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dd26:	4604      	mov	r4, r0
 800dd28:	6e05      	ldr	r5, [r0, #96]	; 0x60
 800dd2a:	b15d      	cbz	r5, 800dd44 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x20>
 800dd2c:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 800dd30:	4628      	mov	r0, r5
 800dd32:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800dd36:	9200      	str	r2, [sp, #0]
 800dd38:	2200      	movs	r2, #0
 800dd3a:	4611      	mov	r1, r2
 800dd3c:	f7f5 fb7e 	bl	800343c <_ZN8touchgfx8Drawable11setPositionEssss>
 800dd40:	69ad      	ldr	r5, [r5, #24]
 800dd42:	e7f2      	b.n	800dd2a <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x6>
 800dd44:	f8d4 50e4 	ldr.w	r5, [r4, #228]	; 0xe4
 800dd48:	b15d      	cbz	r5, 800dd62 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x3e>
 800dd4a:	f9b4 20c6 	ldrsh.w	r2, [r4, #198]	; 0xc6
 800dd4e:	4628      	mov	r0, r5
 800dd50:	f9b4 30c4 	ldrsh.w	r3, [r4, #196]	; 0xc4
 800dd54:	9200      	str	r2, [sp, #0]
 800dd56:	2200      	movs	r2, #0
 800dd58:	4611      	mov	r1, r2
 800dd5a:	f7f5 fb6f 	bl	800343c <_ZN8touchgfx8Drawable11setPositionEssss>
 800dd5e:	69ad      	ldr	r5, [r5, #24]
 800dd60:	e7f2      	b.n	800dd48 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x24>
 800dd62:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
 800dd66:	b15d      	cbz	r5, 800dd80 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x5c>
 800dd68:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	; 0x6e
 800dd6c:	4628      	mov	r0, r5
 800dd6e:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
 800dd72:	9200      	str	r2, [sp, #0]
 800dd74:	2200      	movs	r2, #0
 800dd76:	4611      	mov	r1, r2
 800dd78:	f7f5 fb60 	bl	800343c <_ZN8touchgfx8Drawable11setPositionEssss>
 800dd7c:	69ad      	ldr	r5, [r5, #24]
 800dd7e:	e7f2      	b.n	800dd66 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x42>
 800dd80:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 800dd84:	b15d      	cbz	r5, 800dd9e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7a>
 800dd86:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
 800dd8a:	4628      	mov	r0, r5
 800dd8c:	f9b4 3098 	ldrsh.w	r3, [r4, #152]	; 0x98
 800dd90:	9200      	str	r2, [sp, #0]
 800dd92:	2200      	movs	r2, #0
 800dd94:	4611      	mov	r1, r2
 800dd96:	f7f5 fb51 	bl	800343c <_ZN8touchgfx8Drawable11setPositionEssss>
 800dd9a:	69ad      	ldr	r5, [r5, #24]
 800dd9c:	e7f2      	b.n	800dd84 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x60>
 800dd9e:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
 800dda2:	b15d      	cbz	r5, 800ddbc <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x98>
 800dda4:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	; 0xf2
 800dda8:	4628      	mov	r0, r5
 800ddaa:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	; 0xf0
 800ddae:	9200      	str	r2, [sp, #0]
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	4611      	mov	r1, r2
 800ddb4:	f7f5 fb42 	bl	800343c <_ZN8touchgfx8Drawable11setPositionEssss>
 800ddb8:	69ad      	ldr	r5, [r5, #24]
 800ddba:	e7f2      	b.n	800dda2 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7e>
 800ddbc:	6823      	ldr	r3, [r4, #0]
 800ddbe:	4620      	mov	r0, r4
 800ddc0:	695b      	ldr	r3, [r3, #20]
 800ddc2:	b003      	add	sp, #12
 800ddc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ddc8:	4718      	bx	r3

0800ddca <_ZN8touchgfx17AbstractDataGraph8setWidthEs>:
 800ddca:	b430      	push	{r4, r5}
 800ddcc:	b28a      	uxth	r2, r1
 800ddce:	f8b0 4098 	ldrh.w	r4, [r0, #152]	; 0x98
 800ddd2:	f8a0 10c4 	strh.w	r1, [r0, #196]	; 0xc4
 800ddd6:	1b15      	subs	r5, r2, r4
 800ddd8:	f8a0 10f0 	strh.w	r1, [r0, #240]	; 0xf0
 800dddc:	8101      	strh	r1, [r0, #8]
 800ddde:	f8a0 5094 	strh.w	r5, [r0, #148]	; 0x94
 800dde2:	f8b0 506c 	ldrh.w	r5, [r0, #108]	; 0x6c
 800dde6:	442c      	add	r4, r5
 800dde8:	1b12      	subs	r2, r2, r4
 800ddea:	bc30      	pop	{r4, r5}
 800ddec:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 800ddf0:	f7ff bf98 	b.w	800dd24 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

0800ddf4 <_ZN8touchgfx17AbstractDataGraph9setHeightEs>:
 800ddf4:	b430      	push	{r4, r5}
 800ddf6:	b28a      	uxth	r2, r1
 800ddf8:	f8b0 40f2 	ldrh.w	r4, [r0, #242]	; 0xf2
 800ddfc:	f8a0 106e 	strh.w	r1, [r0, #110]	; 0x6e
 800de00:	1b15      	subs	r5, r2, r4
 800de02:	f8a0 109a 	strh.w	r1, [r0, #154]	; 0x9a
 800de06:	8141      	strh	r1, [r0, #10]
 800de08:	f8a0 50ee 	strh.w	r5, [r0, #238]	; 0xee
 800de0c:	f8b0 50c6 	ldrh.w	r5, [r0, #198]	; 0xc6
 800de10:	442c      	add	r4, r5
 800de12:	1b12      	subs	r2, r2, r4
 800de14:	bc30      	pop	{r4, r5}
 800de16:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
 800de1a:	f7ff bf83 	b.w	800dd24 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

0800de1e <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>:
 800de1e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800de22:	fa1f fa83 	uxth.w	sl, r3
 800de26:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 800de2a:	4615      	mov	r5, r2
 800de2c:	4699      	mov	r9, r3
 800de2e:	fa1f f887 	uxth.w	r8, r7
 800de32:	8903      	ldrh	r3, [r0, #8]
 800de34:	4452      	add	r2, sl
 800de36:	4604      	mov	r4, r0
 800de38:	8940      	ldrh	r0, [r0, #10]
 800de3a:	460e      	mov	r6, r1
 800de3c:	1a9b      	subs	r3, r3, r2
 800de3e:	eb08 0201 	add.w	r2, r8, r1
 800de42:	1a80      	subs	r0, r0, r2
 800de44:	b21b      	sxth	r3, r3
 800de46:	460a      	mov	r2, r1
 800de48:	4629      	mov	r1, r5
 800de4a:	b200      	sxth	r0, r0
 800de4c:	9000      	str	r0, [sp, #0]
 800de4e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800de52:	f7f5 faf3 	bl	800343c <_ZN8touchgfx8Drawable11setPositionEssss>
 800de56:	2200      	movs	r2, #0
 800de58:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800de5c:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 800de60:	4611      	mov	r1, r2
 800de62:	9600      	str	r6, [sp, #0]
 800de64:	f7f5 faea 	bl	800343c <_ZN8touchgfx8Drawable11setPositionEssss>
 800de68:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800de6c:	2200      	movs	r2, #0
 800de6e:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800de72:	9300      	str	r3, [sp, #0]
 800de74:	462b      	mov	r3, r5
 800de76:	4611      	mov	r1, r2
 800de78:	f7f5 fae0 	bl	800343c <_ZN8touchgfx8Drawable11setPositionEssss>
 800de7c:	8921      	ldrh	r1, [r4, #8]
 800de7e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800de82:	f104 0090 	add.w	r0, r4, #144	; 0x90
 800de86:	eba1 010a 	sub.w	r1, r1, sl
 800de8a:	2200      	movs	r2, #0
 800de8c:	9300      	str	r3, [sp, #0]
 800de8e:	464b      	mov	r3, r9
 800de90:	b209      	sxth	r1, r1
 800de92:	f7f5 fad3 	bl	800343c <_ZN8touchgfx8Drawable11setPositionEssss>
 800de96:	8962      	ldrh	r2, [r4, #10]
 800de98:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800de9c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800dea0:	eba2 0208 	sub.w	r2, r2, r8
 800dea4:	9700      	str	r7, [sp, #0]
 800dea6:	2100      	movs	r1, #0
 800dea8:	b212      	sxth	r2, r2
 800deaa:	f7f5 fac7 	bl	800343c <_ZN8touchgfx8Drawable11setPositionEssss>
 800deae:	4620      	mov	r0, r4
 800deb0:	b002      	add	sp, #8
 800deb2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800deb6:	f7ff bf35 	b.w	800dd24 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>
	...

0800debc <_ZN8touchgfx17AbstractDataGraphC1Es>:
 800debc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dec0:	b085      	sub	sp, #20
 800dec2:	4604      	mov	r4, r0
 800dec4:	2601      	movs	r6, #1
 800dec6:	2500      	movs	r5, #0
 800dec8:	9103      	str	r1, [sp, #12]
 800deca:	f7ff fe3d 	bl	800db48 <_ZN8touchgfx9ContainerC1Ev>
 800dece:	4b2c      	ldr	r3, [pc, #176]	; (800df80 <_ZN8touchgfx17AbstractDataGraphC1Es+0xc4>)
 800ded0:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 800ded4:	f104 0964 	add.w	r9, r4, #100	; 0x64
 800ded8:	f104 0890 	add.w	r8, r4, #144	; 0x90
 800dedc:	6023      	str	r3, [r4, #0]
 800dede:	23ff      	movs	r3, #255	; 0xff
 800dee0:	4658      	mov	r0, fp
 800dee2:	f104 0abc 	add.w	sl, r4, #188	; 0xbc
 800dee6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800deea:	f104 07e8 	add.w	r7, r4, #232	; 0xe8
 800deee:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 800def2:	f7ff fe29 	bl	800db48 <_ZN8touchgfx9ContainerC1Ev>
 800def6:	4648      	mov	r0, r9
 800def8:	f7ff fe26 	bl	800db48 <_ZN8touchgfx9ContainerC1Ev>
 800defc:	4640      	mov	r0, r8
 800defe:	f7ff fe23 	bl	800db48 <_ZN8touchgfx9ContainerC1Ev>
 800df02:	4650      	mov	r0, sl
 800df04:	f7ff fe20 	bl	800db48 <_ZN8touchgfx9ContainerC1Ev>
 800df08:	4638      	mov	r0, r7
 800df0a:	f7ff fe1d 	bl	800db48 <_ZN8touchgfx9ContainerC1Ev>
 800df0e:	9903      	ldr	r1, [sp, #12]
 800df10:	4620      	mov	r0, r4
 800df12:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 800df16:	f8a4 111c 	strh.w	r1, [r4, #284]	; 0x11c
 800df1a:	4659      	mov	r1, fp
 800df1c:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
 800df20:	f8a4 511e 	strh.w	r5, [r4, #286]	; 0x11e
 800df24:	f8a4 5120 	strh.w	r5, [r4, #288]	; 0x120
 800df28:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
 800df2c:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
 800df30:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 800df34:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 800df38:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 800df3c:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
 800df40:	f7fe f9a4 	bl	800c28c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800df44:	4651      	mov	r1, sl
 800df46:	4620      	mov	r0, r4
 800df48:	f7fe f9a0 	bl	800c28c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800df4c:	4649      	mov	r1, r9
 800df4e:	4620      	mov	r0, r4
 800df50:	f7fe f99c 	bl	800c28c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800df54:	4641      	mov	r1, r8
 800df56:	4620      	mov	r0, r4
 800df58:	f7fe f998 	bl	800c28c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800df5c:	4639      	mov	r1, r7
 800df5e:	4620      	mov	r0, r4
 800df60:	f7fe f994 	bl	800c28c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800df64:	4620      	mov	r0, r4
 800df66:	9500      	str	r5, [sp, #0]
 800df68:	462b      	mov	r3, r5
 800df6a:	462a      	mov	r2, r5
 800df6c:	4629      	mov	r1, r5
 800df6e:	f7ff ff56 	bl	800de1e <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
 800df72:	4620      	mov	r0, r4
 800df74:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
 800df78:	b005      	add	sp, #20
 800df7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df7e:	bf00      	nop
 800df80:	080204d4 	.word	0x080204d4

0800df84 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>:
 800df84:	4291      	cmp	r1, r2
 800df86:	4613      	mov	r3, r2
 800df88:	d003      	beq.n	800df92 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii+0xe>
 800df8a:	460a      	mov	r2, r1
 800df8c:	4619      	mov	r1, r3
 800df8e:	f005 b8d3 	b.w	8013138 <_ZN8touchgfx6muldivElll>
 800df92:	4770      	bx	lr

0800df94 <_ZN8touchgfx15StaticDataGraph9setScaleXEib>:
 800df94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df98:	4604      	mov	r4, r0
 800df9a:	460f      	mov	r7, r1
 800df9c:	b1b2      	cbz	r2, 800dfcc <_ZN8touchgfx15StaticDataGraph9setScaleXEib+0x38>
 800df9e:	6803      	ldr	r3, [r0, #0]
 800dfa0:	2600      	movs	r6, #0
 800dfa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dfa6:	4798      	blx	r3
 800dfa8:	4681      	mov	r9, r0
 800dfaa:	b235      	sxth	r5, r6
 800dfac:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 800dfb0:	3601      	adds	r6, #1
 800dfb2:	42ab      	cmp	r3, r5
 800dfb4:	dd0a      	ble.n	800dfcc <_ZN8touchgfx15StaticDataGraph9setScaleXEib+0x38>
 800dfb6:	f8d4 813c 	ldr.w	r8, [r4, #316]	; 0x13c
 800dfba:	463a      	mov	r2, r7
 800dfbc:	4649      	mov	r1, r9
 800dfbe:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 800dfc2:	f7ff ffdf 	bl	800df84 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 800dfc6:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 800dfca:	e7ee      	b.n	800dfaa <_ZN8touchgfx15StaticDataGraph9setScaleXEib+0x16>
 800dfcc:	6327      	str	r7, [r4, #48]	; 0x30
 800dfce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800dfd2 <_ZN8touchgfx15StaticDataGraph9setScaleYEib>:
 800dfd2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfd6:	4604      	mov	r4, r0
 800dfd8:	460f      	mov	r7, r1
 800dfda:	b1b2      	cbz	r2, 800e00a <_ZN8touchgfx15StaticDataGraph9setScaleYEib+0x38>
 800dfdc:	6803      	ldr	r3, [r0, #0]
 800dfde:	2600      	movs	r6, #0
 800dfe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dfe4:	4798      	blx	r3
 800dfe6:	4681      	mov	r9, r0
 800dfe8:	b235      	sxth	r5, r6
 800dfea:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 800dfee:	3601      	adds	r6, #1
 800dff0:	42ab      	cmp	r3, r5
 800dff2:	dd0a      	ble.n	800e00a <_ZN8touchgfx15StaticDataGraph9setScaleYEib+0x38>
 800dff4:	f8d4 8140 	ldr.w	r8, [r4, #320]	; 0x140
 800dff8:	463a      	mov	r2, r7
 800dffa:	4649      	mov	r1, r9
 800dffc:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 800e000:	f7ff ffc0 	bl	800df84 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 800e004:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 800e008:	e7ee      	b.n	800dfe8 <_ZN8touchgfx15StaticDataGraph9setScaleYEib+0x16>
 800e00a:	6367      	str	r7, [r4, #52]	; 0x34
 800e00c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800e010 <_ZN8touchgfx9GraphData8addValueEii>:
 800e010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e014:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 800e018:	4605      	mov	r5, r0
 800e01a:	4617      	mov	r7, r2
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d03e      	beq.n	800e09e <_ZN8touchgfx9GraphData8addValueEii+0x8e>
 800e020:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
 800e024:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 800e028:	3801      	subs	r0, #1
 800e02a:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800e02e:	4288      	cmp	r0, r1
 800e030:	db35      	blt.n	800e09e <_ZN8touchgfx9GraphData8addValueEii+0x8e>
 800e032:	2000      	movs	r0, #0
 800e034:	b204      	sxth	r4, r0
 800e036:	42a3      	cmp	r3, r4
 800e038:	dd16      	ble.n	800e068 <_ZN8touchgfx9GraphData8addValueEii+0x58>
 800e03a:	ea4f 0880 	mov.w	r8, r0, lsl #2
 800e03e:	3001      	adds	r0, #1
 800e040:	f852 6008 	ldr.w	r6, [r2, r8]
 800e044:	428e      	cmp	r6, r1
 800e046:	dbf5      	blt.n	800e034 <_ZN8touchgfx9GraphData8addValueEii+0x24>
 800e048:	d10f      	bne.n	800e06a <_ZN8touchgfx9GraphData8addValueEii+0x5a>
 800e04a:	4621      	mov	r1, r4
 800e04c:	4628      	mov	r0, r5
 800e04e:	f7ff fe3a 	bl	800dcc6 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 800e052:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
 800e056:	f843 7008 	str.w	r7, [r3, r8]
 800e05a:	4621      	mov	r1, r4
 800e05c:	4628      	mov	r0, r5
 800e05e:	f7ff fe32 	bl	800dcc6 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 800e062:	4620      	mov	r0, r4
 800e064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e068:	d01a      	beq.n	800e0a0 <_ZN8touchgfx9GraphData8addValueEii+0x90>
 800e06a:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800e06e:	428a      	cmp	r2, r1
 800e070:	dc16      	bgt.n	800e0a0 <_ZN8touchgfx9GraphData8addValueEii+0x90>
 800e072:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 800e076:	3801      	subs	r0, #1
 800e078:	0080      	lsls	r0, r0, #2
 800e07a:	42a3      	cmp	r3, r4
 800e07c:	f8d5 613c 	ldr.w	r6, [r5, #316]	; 0x13c
 800e080:	dd15      	ble.n	800e0ae <_ZN8touchgfx9GraphData8addValueEii+0x9e>
 800e082:	5832      	ldr	r2, [r6, r0]
 800e084:	f100 0c04 	add.w	ip, r0, #4
 800e088:	3b01      	subs	r3, #1
 800e08a:	f846 200c 	str.w	r2, [r6, ip]
 800e08e:	f8d5 6140 	ldr.w	r6, [r5, #320]	; 0x140
 800e092:	b21b      	sxth	r3, r3
 800e094:	5832      	ldr	r2, [r6, r0]
 800e096:	3804      	subs	r0, #4
 800e098:	f846 200c 	str.w	r2, [r6, ip]
 800e09c:	e7ed      	b.n	800e07a <_ZN8touchgfx9GraphData8addValueEii+0x6a>
 800e09e:	461c      	mov	r4, r3
 800e0a0:	f9b5 211c 	ldrsh.w	r2, [r5, #284]	; 0x11c
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	d1e4      	bne.n	800e072 <_ZN8touchgfx9GraphData8addValueEii+0x62>
 800e0a8:	f04f 34ff 	mov.w	r4, #4294967295
 800e0ac:	e7d9      	b.n	800e062 <_ZN8touchgfx9GraphData8addValueEii+0x52>
 800e0ae:	f8b5 311e 	ldrh.w	r3, [r5, #286]	; 0x11e
 800e0b2:	3301      	adds	r3, #1
 800e0b4:	f8a5 311e 	strh.w	r3, [r5, #286]	; 0x11e
 800e0b8:	f846 1024 	str.w	r1, [r6, r4, lsl #2]
 800e0bc:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
 800e0c0:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800e0c4:	e7c9      	b.n	800e05a <_ZN8touchgfx9GraphData8addValueEii+0x4a>

0800e0c6 <_ZN8touchgfx16GraphElementLineD1Ev>:
 800e0c6:	4770      	bx	lr

0800e0c8 <_ZN8touchgfx16GraphElementLineD0Ev>:
 800e0c8:	b510      	push	{r4, lr}
 800e0ca:	4604      	mov	r4, r0
 800e0cc:	2130      	movs	r1, #48	; 0x30
 800e0ce:	f00f fbb6 	bl	801d83e <_ZdlPvj>
 800e0d2:	4620      	mov	r0, r4
 800e0d4:	bd10      	pop	{r4, pc}

0800e0d6 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800e0d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0d8:	4604      	mov	r4, r0
 800e0da:	4608      	mov	r0, r1
 800e0dc:	460d      	mov	r5, r1
 800e0de:	f7fe fa9c 	bl	800c61a <_ZNK8touchgfx4Rect7isEmptyEv>
 800e0e2:	b978      	cbnz	r0, 800e104 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800e0e4:	4620      	mov	r0, r4
 800e0e6:	f7fe fa98 	bl	800c61a <_ZNK8touchgfx4Rect7isEmptyEv>
 800e0ea:	f9b5 6000 	ldrsh.w	r6, [r5]
 800e0ee:	b150      	cbz	r0, 800e106 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800e0f0:	8026      	strh	r6, [r4, #0]
 800e0f2:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800e0f6:	8063      	strh	r3, [r4, #2]
 800e0f8:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800e0fc:	80a3      	strh	r3, [r4, #4]
 800e0fe:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800e102:	80e3      	strh	r3, [r4, #6]
 800e104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e106:	f9b4 1000 	ldrsh.w	r1, [r4]
 800e10a:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800e10e:	42b1      	cmp	r1, r6
 800e110:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800e114:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800e118:	460f      	mov	r7, r1
 800e11a:	88ed      	ldrh	r5, [r5, #6]
 800e11c:	bfa8      	it	ge
 800e11e:	4637      	movge	r7, r6
 800e120:	4293      	cmp	r3, r2
 800e122:	4618      	mov	r0, r3
 800e124:	4466      	add	r6, ip
 800e126:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800e12a:	bfa8      	it	ge
 800e12c:	4610      	movge	r0, r2
 800e12e:	442a      	add	r2, r5
 800e130:	88e5      	ldrh	r5, [r4, #6]
 800e132:	4461      	add	r1, ip
 800e134:	b236      	sxth	r6, r6
 800e136:	8027      	strh	r7, [r4, #0]
 800e138:	442b      	add	r3, r5
 800e13a:	b209      	sxth	r1, r1
 800e13c:	b212      	sxth	r2, r2
 800e13e:	8060      	strh	r0, [r4, #2]
 800e140:	b21b      	sxth	r3, r3
 800e142:	428e      	cmp	r6, r1
 800e144:	bfac      	ite	ge
 800e146:	ebc7 0106 	rsbge	r1, r7, r6
 800e14a:	ebc7 0101 	rsblt	r1, r7, r1
 800e14e:	429a      	cmp	r2, r3
 800e150:	bfac      	ite	ge
 800e152:	ebc0 0202 	rsbge	r2, r0, r2
 800e156:	ebc0 0203 	rsblt	r2, r0, r3
 800e15a:	80a1      	strh	r1, [r4, #4]
 800e15c:	80e2      	strh	r2, [r4, #6]
 800e15e:	e7d1      	b.n	800e104 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

0800e160 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 800e160:	6800      	ldr	r0, [r0, #0]
 800e162:	2800      	cmp	r0, #0
 800e164:	bfb9      	ittee	lt
 800e166:	2320      	movlt	r3, #32
 800e168:	fb90 f0f3 	sdivlt	r0, r0, r3
 800e16c:	301f      	addge	r0, #31
 800e16e:	1140      	asrge	r0, r0, #5
 800e170:	4770      	bx	lr

0800e172 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE>:
 800e172:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e176:	6803      	ldr	r3, [r0, #0]
 800e178:	b093      	sub	sp, #76	; 0x4c
 800e17a:	6945      	ldr	r5, [r0, #20]
 800e17c:	4604      	mov	r4, r0
 800e17e:	460f      	mov	r7, r1
 800e180:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e182:	2d00      	cmp	r5, #0
 800e184:	f000 81ad 	beq.w	800e4e2 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x370>
 800e188:	696d      	ldr	r5, [r5, #20]
 800e18a:	4798      	blx	r3
 800e18c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800e190:	2b00      	cmp	r3, #0
 800e192:	d077      	beq.n	800e284 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800e194:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800e198:	fb13 f000 	smulbb	r0, r3, r0
 800e19c:	b283      	uxth	r3, r0
 800e19e:	1c58      	adds	r0, r3, #1
 800e1a0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 800e1a4:	1200      	asrs	r0, r0, #8
 800e1a6:	d06d      	beq.n	800e284 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800e1a8:	b2c3      	uxtb	r3, r0
 800e1aa:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 800e1ae:	462a      	mov	r2, r5
 800e1b0:	4621      	mov	r1, r4
 800e1b2:	9308      	str	r3, [sp, #32]
 800e1b4:	4640      	mov	r0, r8
 800e1b6:	6823      	ldr	r3, [r4, #0]
 800e1b8:	ae0e      	add	r6, sp, #56	; 0x38
 800e1ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1be:	4798      	blx	r3
 800e1c0:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e1c4:	e886 0003 	stmia.w	r6, {r0, r1}
 800e1c8:	4639      	mov	r1, r7
 800e1ca:	4630      	mov	r0, r6
 800e1cc:	f7fe f9e2 	bl	800c594 <_ZN8touchgfx4RectaNERKS0_>
 800e1d0:	6823      	ldr	r3, [r4, #0]
 800e1d2:	4629      	mov	r1, r5
 800e1d4:	4620      	mov	r0, r4
 800e1d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1da:	4798      	blx	r3
 800e1dc:	6823      	ldr	r3, [r4, #0]
 800e1de:	4607      	mov	r7, r0
 800e1e0:	4629      	mov	r1, r5
 800e1e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1e6:	4620      	mov	r0, r4
 800e1e8:	4798      	blx	r3
 800e1ea:	4681      	mov	r9, r0
 800e1ec:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
 800e1f0:	4629      	mov	r1, r5
 800e1f2:	0103      	lsls	r3, r0, #4
 800e1f4:	4620      	mov	r0, r4
 800e1f6:	9309      	str	r3, [sp, #36]	; 0x24
 800e1f8:	6823      	ldr	r3, [r4, #0]
 800e1fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e1fe:	4798      	blx	r3
 800e200:	4629      	mov	r1, r5
 800e202:	b203      	sxth	r3, r0
 800e204:	4620      	mov	r0, r4
 800e206:	9306      	str	r3, [sp, #24]
 800e208:	6823      	ldr	r3, [r4, #0]
 800e20a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e20e:	4798      	blx	r3
 800e210:	2f00      	cmp	r7, #0
 800e212:	b203      	sxth	r3, r0
 800e214:	9307      	str	r3, [sp, #28]
 800e216:	d138      	bne.n	800e28a <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x118>
 800e218:	f1b9 0f00 	cmp.w	r9, #0
 800e21c:	d132      	bne.n	800e284 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800e21e:	6823      	ldr	r3, [r4, #0]
 800e220:	464a      	mov	r2, r9
 800e222:	4629      	mov	r1, r5
 800e224:	4620      	mov	r0, r4
 800e226:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e22a:	4798      	blx	r3
 800e22c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e22e:	1ac0      	subs	r0, r0, r3
 800e230:	9010      	str	r0, [sp, #64]	; 0x40
 800e232:	4640      	mov	r0, r8
 800e234:	f7f5 fd69 	bl	8003d0a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800e238:	6823      	ldr	r3, [r4, #0]
 800e23a:	4607      	mov	r7, r0
 800e23c:	4629      	mov	r1, r5
 800e23e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e242:	4620      	mov	r0, r4
 800e244:	4798      	blx	r3
 800e246:	1a38      	subs	r0, r7, r0
 800e248:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800e24c:	fa0f f880 	sxth.w	r8, r0
 800e250:	eb13 0f08 	cmn.w	r3, r8
 800e254:	d416      	bmi.n	800e284 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800e256:	6823      	ldr	r3, [r4, #0]
 800e258:	4629      	mov	r1, r5
 800e25a:	4620      	mov	r0, r4
 800e25c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e260:	4798      	blx	r3
 800e262:	4580      	cmp	r8, r0
 800e264:	da0e      	bge.n	800e284 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800e266:	9a08      	ldr	r2, [sp, #32]
 800e268:	b23f      	sxth	r7, r7
 800e26a:	6823      	ldr	r3, [r4, #0]
 800e26c:	4631      	mov	r1, r6
 800e26e:	9202      	str	r2, [sp, #8]
 800e270:	4620      	mov	r0, r4
 800e272:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800e276:	9700      	str	r7, [sp, #0]
 800e278:	9201      	str	r2, [sp, #4]
 800e27a:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 800e27e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e282:	47a8      	blx	r5
 800e284:	b013      	add	sp, #76	; 0x4c
 800e286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e28a:	ddfb      	ble.n	800e284 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800e28c:	6823      	ldr	r3, [r4, #0]
 800e28e:	4629      	mov	r1, r5
 800e290:	4620      	mov	r0, r4
 800e292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e296:	4798      	blx	r3
 800e298:	6823      	ldr	r3, [r4, #0]
 800e29a:	4683      	mov	fp, r0
 800e29c:	4629      	mov	r1, r5
 800e29e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e2a2:	4620      	mov	r0, r4
 800e2a4:	4798      	blx	r3
 800e2a6:	eba0 030b 	sub.w	r3, r0, fp
 800e2aa:	4680      	mov	r8, r0
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	bfb8      	it	lt
 800e2b0:	425b      	neglt	r3, r3
 800e2b2:	fb93 f3f7 	sdiv	r3, r3, r7
 800e2b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800e2ba:	dce3      	bgt.n	800e284 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800e2bc:	6823      	ldr	r3, [r4, #0]
 800e2be:	465a      	mov	r2, fp
 800e2c0:	4629      	mov	r1, r5
 800e2c2:	4620      	mov	r0, r4
 800e2c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e2c8:	4798      	blx	r3
 800e2ca:	6823      	ldr	r3, [r4, #0]
 800e2cc:	4606      	mov	r6, r0
 800e2ce:	4642      	mov	r2, r8
 800e2d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e2d4:	4629      	mov	r1, r5
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	4798      	blx	r3
 800e2da:	42b0      	cmp	r0, r6
 800e2dc:	bfa2      	ittt	ge
 800e2de:	4643      	movge	r3, r8
 800e2e0:	46d8      	movge	r8, fp
 800e2e2:	469b      	movge	fp, r3
 800e2e4:	fb98 f6f7 	sdiv	r6, r8, r7
 800e2e8:	fb9b f2f7 	sdiv	r2, fp, r7
 800e2ec:	45d8      	cmp	r8, fp
 800e2ee:	bfac      	ite	ge
 800e2f0:	f04f 33ff 	movge.w	r3, #4294967295
 800e2f4:	2301      	movlt	r3, #1
 800e2f6:	1af6      	subs	r6, r6, r3
 800e2f8:	441a      	add	r2, r3
 800e2fa:	4296      	cmp	r6, r2
 800e2fc:	bfac      	ite	ge
 800e2fe:	f04f 3aff 	movge.w	sl, #4294967295
 800e302:	f04f 0a01 	movlt.w	sl, #1
 800e306:	f1b9 0f00 	cmp.w	r9, #0
 800e30a:	d13e      	bne.n	800e38a <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x218>
 800e30c:	fb07 fb0a 	mul.w	fp, r7, sl
 800e310:	eb0a 0802 	add.w	r8, sl, r2
 800e314:	4377      	muls	r7, r6
 800e316:	45b0      	cmp	r8, r6
 800e318:	d0b4      	beq.n	800e284 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800e31a:	6823      	ldr	r3, [r4, #0]
 800e31c:	463a      	mov	r2, r7
 800e31e:	4629      	mov	r1, r5
 800e320:	4620      	mov	r0, r4
 800e322:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e326:	4798      	blx	r3
 800e328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e32a:	1ac0      	subs	r0, r0, r3
 800e32c:	9010      	str	r0, [sp, #64]	; 0x40
 800e32e:	a810      	add	r0, sp, #64	; 0x40
 800e330:	f7f5 fceb 	bl	8003d0a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800e334:	6823      	ldr	r3, [r4, #0]
 800e336:	4681      	mov	r9, r0
 800e338:	4629      	mov	r1, r5
 800e33a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e33e:	4620      	mov	r0, r4
 800e340:	4798      	blx	r3
 800e342:	eba9 0000 	sub.w	r0, r9, r0
 800e346:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800e34a:	b203      	sxth	r3, r0
 800e34c:	42da      	cmn	r2, r3
 800e34e:	9304      	str	r3, [sp, #16]
 800e350:	d418      	bmi.n	800e384 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 800e352:	6822      	ldr	r2, [r4, #0]
 800e354:	4629      	mov	r1, r5
 800e356:	4620      	mov	r0, r4
 800e358:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 800e35c:	4790      	blx	r2
 800e35e:	9b04      	ldr	r3, [sp, #16]
 800e360:	4283      	cmp	r3, r0
 800e362:	da0f      	bge.n	800e384 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 800e364:	9b08      	ldr	r3, [sp, #32]
 800e366:	a90e      	add	r1, sp, #56	; 0x38
 800e368:	6822      	ldr	r2, [r4, #0]
 800e36a:	4620      	mov	r0, r4
 800e36c:	9302      	str	r3, [sp, #8]
 800e36e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800e372:	9301      	str	r3, [sp, #4]
 800e374:	fa0f f389 	sxth.w	r3, r9
 800e378:	9300      	str	r3, [sp, #0]
 800e37a:	f8d2 9088 	ldr.w	r9, [r2, #136]	; 0x88
 800e37e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e382:	47c8      	blx	r9
 800e384:	4456      	add	r6, sl
 800e386:	445f      	add	r7, fp
 800e388:	e7c5      	b.n	800e316 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x1a4>
 800e38a:	fb98 f8f9 	sdiv	r8, r8, r9
 800e38e:	eba8 0203 	sub.w	r2, r8, r3
 800e392:	4629      	mov	r1, r5
 800e394:	4620      	mov	r0, r4
 800e396:	9204      	str	r2, [sp, #16]
 800e398:	fb9b f8f9 	sdiv	r8, fp, r9
 800e39c:	4498      	add	r8, r3
 800e39e:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
 800e3a2:	4542      	cmp	r2, r8
 800e3a4:	bfac      	ite	ge
 800e3a6:	f04f 33ff 	movge.w	r3, #4294967295
 800e3aa:	2301      	movlt	r3, #1
 800e3ac:	fb02 f209 	mul.w	r2, r2, r9
 800e3b0:	930a      	str	r3, [sp, #40]	; 0x28
 800e3b2:	6823      	ldr	r3, [r4, #0]
 800e3b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e3b8:	4798      	blx	r3
 800e3ba:	f84b 0d08 	str.w	r0, [fp, #-8]!
 800e3be:	4658      	mov	r0, fp
 800e3c0:	f7f5 fca3 	bl	8003d0a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800e3c4:	fb06 f207 	mul.w	r2, r6, r7
 800e3c8:	b203      	sxth	r3, r0
 800e3ca:	4629      	mov	r1, r5
 800e3cc:	4620      	mov	r0, r4
 800e3ce:	9305      	str	r3, [sp, #20]
 800e3d0:	6823      	ldr	r3, [r4, #0]
 800e3d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e3d6:	4798      	blx	r3
 800e3d8:	9010      	str	r0, [sp, #64]	; 0x40
 800e3da:	4658      	mov	r0, fp
 800e3dc:	f7f5 fc95 	bl	8003d0a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800e3e0:	fb07 f20a 	mul.w	r2, r7, sl
 800e3e4:	b203      	sxth	r3, r0
 800e3e6:	920b      	str	r2, [sp, #44]	; 0x2c
 800e3e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e3ea:	4442      	add	r2, r8
 800e3ec:	920c      	str	r2, [sp, #48]	; 0x30
 800e3ee:	9a05      	ldr	r2, [sp, #20]
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	dc16      	bgt.n	800e422 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x2b0>
 800e3f4:	eb06 080a 	add.w	r8, r6, sl
 800e3f8:	fb07 f808 	mul.w	r8, r7, r8
 800e3fc:	9a05      	ldr	r2, [sp, #20]
 800e3fe:	429a      	cmp	r2, r3
 800e400:	db54      	blt.n	800e4ac <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x33a>
 800e402:	6823      	ldr	r3, [r4, #0]
 800e404:	4642      	mov	r2, r8
 800e406:	4629      	mov	r1, r5
 800e408:	4620      	mov	r0, r4
 800e40a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e40e:	4456      	add	r6, sl
 800e410:	4798      	blx	r3
 800e412:	9010      	str	r0, [sp, #64]	; 0x40
 800e414:	4658      	mov	r0, fp
 800e416:	f7f5 fc78 	bl	8003d0a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800e41a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e41c:	b203      	sxth	r3, r0
 800e41e:	4490      	add	r8, r2
 800e420:	e7ec      	b.n	800e3fc <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x28a>
 800e422:	6823      	ldr	r3, [r4, #0]
 800e424:	fb07 f206 	mul.w	r2, r7, r6
 800e428:	4629      	mov	r1, r5
 800e42a:	4620      	mov	r0, r4
 800e42c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e430:	4798      	blx	r3
 800e432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e434:	1ac0      	subs	r0, r0, r3
 800e436:	9010      	str	r0, [sp, #64]	; 0x40
 800e438:	4658      	mov	r0, fp
 800e43a:	f7f5 fc66 	bl	8003d0a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800e43e:	6823      	ldr	r3, [r4, #0]
 800e440:	4680      	mov	r8, r0
 800e442:	4629      	mov	r1, r5
 800e444:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e448:	4620      	mov	r0, r4
 800e44a:	4798      	blx	r3
 800e44c:	eba8 0000 	sub.w	r0, r8, r0
 800e450:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800e454:	b203      	sxth	r3, r0
 800e456:	42da      	cmn	r2, r3
 800e458:	930d      	str	r3, [sp, #52]	; 0x34
 800e45a:	d418      	bmi.n	800e48e <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 800e45c:	6822      	ldr	r2, [r4, #0]
 800e45e:	4629      	mov	r1, r5
 800e460:	4620      	mov	r0, r4
 800e462:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 800e466:	4790      	blx	r2
 800e468:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e46a:	4283      	cmp	r3, r0
 800e46c:	da0f      	bge.n	800e48e <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 800e46e:	9b08      	ldr	r3, [sp, #32]
 800e470:	a90e      	add	r1, sp, #56	; 0x38
 800e472:	6822      	ldr	r2, [r4, #0]
 800e474:	4620      	mov	r0, r4
 800e476:	9302      	str	r3, [sp, #8]
 800e478:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800e47c:	9301      	str	r3, [sp, #4]
 800e47e:	fa0f f388 	sxth.w	r3, r8
 800e482:	9300      	str	r3, [sp, #0]
 800e484:	f8d2 8088 	ldr.w	r8, [r2, #136]	; 0x88
 800e488:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e48c:	47c0      	blx	r8
 800e48e:	6823      	ldr	r3, [r4, #0]
 800e490:	4456      	add	r6, sl
 800e492:	4629      	mov	r1, r5
 800e494:	4620      	mov	r0, r4
 800e496:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e49a:	fb06 f207 	mul.w	r2, r6, r7
 800e49e:	4798      	blx	r3
 800e4a0:	9010      	str	r0, [sp, #64]	; 0x40
 800e4a2:	4658      	mov	r0, fp
 800e4a4:	f7f5 fc31 	bl	8003d0a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800e4a8:	b203      	sxth	r3, r0
 800e4aa:	e7a0      	b.n	800e3ee <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 800e4ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e4ae:	930d      	str	r3, [sp, #52]	; 0x34
 800e4b0:	9b04      	ldr	r3, [sp, #16]
 800e4b2:	4413      	add	r3, r2
 800e4b4:	9304      	str	r3, [sp, #16]
 800e4b6:	9a04      	ldr	r2, [sp, #16]
 800e4b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e4ba:	4293      	cmp	r3, r2
 800e4bc:	f43f aee2 	beq.w	800e284 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800e4c0:	9b04      	ldr	r3, [sp, #16]
 800e4c2:	4629      	mov	r1, r5
 800e4c4:	6822      	ldr	r2, [r4, #0]
 800e4c6:	4620      	mov	r0, r4
 800e4c8:	f8d2 80ac 	ldr.w	r8, [r2, #172]	; 0xac
 800e4cc:	fb03 f209 	mul.w	r2, r3, r9
 800e4d0:	47c0      	blx	r8
 800e4d2:	9010      	str	r0, [sp, #64]	; 0x40
 800e4d4:	4658      	mov	r0, fp
 800e4d6:	f7f5 fc18 	bl	8003d0a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800e4da:	b203      	sxth	r3, r0
 800e4dc:	9305      	str	r3, [sp, #20]
 800e4de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e4e0:	e785      	b.n	800e3ee <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 800e4e2:	4798      	blx	r3
 800e4e4:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800e4e8:	deff      	udf	#255	; 0xff

0800e4ea <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 800e4ea:	b510      	push	{r4, lr}
 800e4ec:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 800e4f0:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 800e4f4:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 800e4f8:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 800e4fc:	139b      	asrs	r3, r3, #14
 800e4fe:	13a4      	asrs	r4, r4, #14
 800e500:	429c      	cmp	r4, r3
 800e502:	bfb8      	it	lt
 800e504:	461c      	movlt	r4, r3
 800e506:	2c01      	cmp	r4, #1
 800e508:	dd07      	ble.n	800e51a <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 800e50a:	fb91 f1f4 	sdiv	r1, r1, r4
 800e50e:	fb90 f0f4 	sdiv	r0, r0, r4
 800e512:	f7ff ffea 	bl	800e4ea <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 800e516:	4360      	muls	r0, r4
 800e518:	bd10      	pop	{r4, pc}
 800e51a:	4340      	muls	r0, r0
 800e51c:	fb01 0101 	mla	r1, r1, r1, r0
 800e520:	2000      	movs	r0, #0
 800e522:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800e526:	bfb4      	ite	lt
 800e528:	f44f 4380 	movlt.w	r3, #16384	; 0x4000
 800e52c:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 800e530:	18c2      	adds	r2, r0, r3
 800e532:	428a      	cmp	r2, r1
 800e534:	bf9c      	itt	ls
 800e536:	1898      	addls	r0, r3, r2
 800e538:	1a89      	subls	r1, r1, r2
 800e53a:	089b      	lsrs	r3, r3, #2
 800e53c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800e540:	d1f6      	bne.n	800e530 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x46>
 800e542:	e7e9      	b.n	800e518 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

0800e544 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>:
 800e544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e546:	9906      	ldr	r1, [sp, #24]
 800e548:	4606      	mov	r6, r0
 800e54a:	461c      	mov	r4, r3
 800e54c:	2020      	movs	r0, #32
 800e54e:	4291      	cmp	r1, r2
 800e550:	bfbc      	itt	lt
 800e552:	9206      	strlt	r2, [sp, #24]
 800e554:	460a      	movlt	r2, r1
 800e556:	9907      	ldr	r1, [sp, #28]
 800e558:	428b      	cmp	r3, r1
 800e55a:	bfc4      	itt	gt
 800e55c:	460c      	movgt	r4, r1
 800e55e:	9307      	strgt	r3, [sp, #28]
 800e560:	fb92 f5f0 	sdiv	r5, r2, r0
 800e564:	fb94 f4f0 	sdiv	r4, r4, r0
 800e568:	a806      	add	r0, sp, #24
 800e56a:	f7ff fdf9 	bl	800e160 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 800e56e:	4607      	mov	r7, r0
 800e570:	a807      	add	r0, sp, #28
 800e572:	f7ff fdf5 	bl	800e160 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 800e576:	1b7a      	subs	r2, r7, r5
 800e578:	1b00      	subs	r0, r0, r4
 800e57a:	8035      	strh	r5, [r6, #0]
 800e57c:	8074      	strh	r4, [r6, #2]
 800e57e:	80f0      	strh	r0, [r6, #6]
 800e580:	4630      	mov	r0, r6
 800e582:	80b2      	strh	r2, [r6, #4]
 800e584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e586 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>:
 800e586:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e588:	9c08      	ldr	r4, [sp, #32]
 800e58a:	2602      	movs	r6, #2
 800e58c:	4605      	mov	r5, r0
 800e58e:	3401      	adds	r4, #1
 800e590:	fb94 f4f6 	sdiv	r4, r4, r6
 800e594:	18a6      	adds	r6, r4, r2
 800e596:	191f      	adds	r7, r3, r4
 800e598:	1b12      	subs	r2, r2, r4
 800e59a:	1b1b      	subs	r3, r3, r4
 800e59c:	e9cd 6700 	strd	r6, r7, [sp]
 800e5a0:	f7ff ffd0 	bl	800e544 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>
 800e5a4:	4628      	mov	r0, r5
 800e5a6:	b003      	add	sp, #12
 800e5a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e5aa <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs>:
 800e5aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e5ae:	6943      	ldr	r3, [r0, #20]
 800e5b0:	b087      	sub	sp, #28
 800e5b2:	4606      	mov	r6, r0
 800e5b4:	460d      	mov	r5, r1
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d072      	beq.n	800e6a0 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xf6>
 800e5ba:	695c      	ldr	r4, [r3, #20]
 800e5bc:	f890 702c 	ldrb.w	r7, [r0, #44]	; 0x2c
 800e5c0:	6823      	ldr	r3, [r4, #0]
 800e5c2:	4620      	mov	r0, r4
 800e5c4:	017f      	lsls	r7, r7, #5
 800e5c6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800e5ca:	4798      	blx	r3
 800e5cc:	6823      	ldr	r3, [r4, #0]
 800e5ce:	4680      	mov	r8, r0
 800e5d0:	4629      	mov	r1, r5
 800e5d2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800e5d6:	4620      	mov	r0, r4
 800e5d8:	4798      	blx	r3
 800e5da:	9700      	str	r7, [sp, #0]
 800e5dc:	4603      	mov	r3, r0
 800e5de:	4642      	mov	r2, r8
 800e5e0:	4631      	mov	r1, r6
 800e5e2:	a802      	add	r0, sp, #8
 800e5e4:	f7ff ffcf 	bl	800e586 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 800e5e8:	2d00      	cmp	r5, #0
 800e5ea:	dd1b      	ble.n	800e624 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x7a>
 800e5ec:	f105 38ff 	add.w	r8, r5, #4294967295
 800e5f0:	6823      	ldr	r3, [r4, #0]
 800e5f2:	4620      	mov	r0, r4
 800e5f4:	fa0f f888 	sxth.w	r8, r8
 800e5f8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800e5fc:	4641      	mov	r1, r8
 800e5fe:	4798      	blx	r3
 800e600:	6823      	ldr	r3, [r4, #0]
 800e602:	4681      	mov	r9, r0
 800e604:	4641      	mov	r1, r8
 800e606:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800e60a:	4620      	mov	r0, r4
 800e60c:	4798      	blx	r3
 800e60e:	4631      	mov	r1, r6
 800e610:	4603      	mov	r3, r0
 800e612:	9700      	str	r7, [sp, #0]
 800e614:	a804      	add	r0, sp, #16
 800e616:	464a      	mov	r2, r9
 800e618:	f7ff ffb5 	bl	800e586 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 800e61c:	a904      	add	r1, sp, #16
 800e61e:	a802      	add	r0, sp, #8
 800e620:	f7ff fd59 	bl	800e0d6 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800e624:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 800e628:	3b01      	subs	r3, #1
 800e62a:	429d      	cmp	r5, r3
 800e62c:	da19      	bge.n	800e662 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xb8>
 800e62e:	3501      	adds	r5, #1
 800e630:	6823      	ldr	r3, [r4, #0]
 800e632:	4620      	mov	r0, r4
 800e634:	b22d      	sxth	r5, r5
 800e636:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800e63a:	4629      	mov	r1, r5
 800e63c:	4798      	blx	r3
 800e63e:	6823      	ldr	r3, [r4, #0]
 800e640:	4680      	mov	r8, r0
 800e642:	4629      	mov	r1, r5
 800e644:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800e648:	4620      	mov	r0, r4
 800e64a:	4798      	blx	r3
 800e64c:	4631      	mov	r1, r6
 800e64e:	4603      	mov	r3, r0
 800e650:	9700      	str	r7, [sp, #0]
 800e652:	a804      	add	r0, sp, #16
 800e654:	4642      	mov	r2, r8
 800e656:	f7ff ff96 	bl	800e586 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 800e65a:	a904      	add	r1, sp, #16
 800e65c:	a802      	add	r0, sp, #8
 800e65e:	f7ff fd3a 	bl	800e0d6 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800e662:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	; 0x114
 800e666:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
 800e66a:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
 800e66e:	18ca      	adds	r2, r1, r3
 800e670:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800e674:	f8ad 1012 	strh.w	r1, [sp, #18]
 800e678:	a904      	add	r1, sp, #16
 800e67a:	1a9b      	subs	r3, r3, r2
 800e67c:	2200      	movs	r2, #0
 800e67e:	f8ad 0014 	strh.w	r0, [sp, #20]
 800e682:	a802      	add	r0, sp, #8
 800e684:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e688:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e68c:	f7fd ff82 	bl	800c594 <_ZN8touchgfx4RectaNERKS0_>
 800e690:	6833      	ldr	r3, [r6, #0]
 800e692:	a902      	add	r1, sp, #8
 800e694:	4630      	mov	r0, r6
 800e696:	691b      	ldr	r3, [r3, #16]
 800e698:	4798      	blx	r3
 800e69a:	b007      	add	sp, #28
 800e69c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	deff      	udf	#255	; 0xff

0800e6a4 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>:
 800e6a4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	da05      	bge.n	800e6b8 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x14>
 800e6ac:	b29b      	uxth	r3, r3
 800e6ae:	880a      	ldrh	r2, [r1, #0]
 800e6b0:	441a      	add	r2, r3
 800e6b2:	425b      	negs	r3, r3
 800e6b4:	800a      	strh	r2, [r1, #0]
 800e6b6:	808b      	strh	r3, [r1, #4]
 800e6b8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	da05      	bge.n	800e6cc <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x28>
 800e6c0:	b29b      	uxth	r3, r3
 800e6c2:	884a      	ldrh	r2, [r1, #2]
 800e6c4:	441a      	add	r2, r3
 800e6c6:	425b      	negs	r3, r3
 800e6c8:	804a      	strh	r2, [r1, #2]
 800e6ca:	80cb      	strh	r3, [r1, #6]
 800e6cc:	4770      	bx	lr

0800e6ce <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh>:
 800e6ce:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e6d0:	4604      	mov	r4, r0
 800e6d2:	460d      	mov	r5, r1
 800e6d4:	6801      	ldr	r1, [r0, #0]
 800e6d6:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 800e6da:	9001      	str	r0, [sp, #4]
 800e6dc:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 800e6e0:	9000      	str	r0, [sp, #0]
 800e6e2:	a802      	add	r0, sp, #8
 800e6e4:	f8d1 6090 	ldr.w	r6, [r1, #144]	; 0x90
 800e6e8:	4621      	mov	r1, r4
 800e6ea:	47b0      	blx	r6
 800e6ec:	a902      	add	r1, sp, #8
 800e6ee:	4620      	mov	r0, r4
 800e6f0:	f7ff ffd8 	bl	800e6a4 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>
 800e6f4:	a802      	add	r0, sp, #8
 800e6f6:	4629      	mov	r1, r5
 800e6f8:	f7fd ff4c 	bl	800c594 <_ZN8touchgfx4RectaNERKS0_>
 800e6fc:	a802      	add	r0, sp, #8
 800e6fe:	f7fd ff8c 	bl	800c61a <_ZNK8touchgfx4Rect7isEmptyEv>
 800e702:	b968      	cbnz	r0, 800e720 <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh+0x52>
 800e704:	6823      	ldr	r3, [r4, #0]
 800e706:	a902      	add	r1, sp, #8
 800e708:	4620      	mov	r0, r4
 800e70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e70c:	4798      	blx	r3
 800e70e:	f7fe fa11 	bl	800cb34 <_ZN8touchgfx3HAL3lcdEv>
 800e712:	6803      	ldr	r3, [r0, #0]
 800e714:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e716:	a902      	add	r1, sp, #8
 800e718:	6a1d      	ldr	r5, [r3, #32]
 800e71a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800e71e:	47a8      	blx	r5
 800e720:	b004      	add	sp, #16
 800e722:	bd70      	pop	{r4, r5, r6, pc}

0800e724 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>:
 800e724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e728:	b08b      	sub	sp, #44	; 0x2c
 800e72a:	461e      	mov	r6, r3
 800e72c:	460f      	mov	r7, r1
 800e72e:	4615      	mov	r5, r2
 800e730:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
 800e734:	429e      	cmp	r6, r3
 800e736:	9304      	str	r3, [sp, #16]
 800e738:	d074      	beq.n	800e824 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x100>
 800e73a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800e73e:	4631      	mov	r1, r6
 800e740:	4610      	mov	r0, r2
 800e742:	4634      	mov	r4, r6
 800e744:	015b      	lsls	r3, r3, #5
 800e746:	9303      	str	r3, [sp, #12]
 800e748:	6813      	ldr	r3, [r2, #0]
 800e74a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800e74e:	4798      	blx	r3
 800e750:	ab0a      	add	r3, sp, #40	; 0x28
 800e752:	f843 0d10 	str.w	r0, [r3, #-16]!
 800e756:	4618      	mov	r0, r3
 800e758:	f7f5 fad7 	bl	8003d0a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800e75c:	682b      	ldr	r3, [r5, #0]
 800e75e:	4631      	mov	r1, r6
 800e760:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800e764:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800e768:	4628      	mov	r0, r5
 800e76a:	4798      	blx	r3
 800e76c:	ab0a      	add	r3, sp, #40	; 0x28
 800e76e:	f843 0d0c 	str.w	r0, [r3, #-12]!
 800e772:	4618      	mov	r0, r3
 800e774:	f7f5 fac9 	bl	8003d0a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800e778:	4641      	mov	r1, r8
 800e77a:	ea4f 1940 	mov.w	r9, r0, lsl #5
 800e77e:	4638      	mov	r0, r7
 800e780:	464a      	mov	r2, r9
 800e782:	f00e ff9b 	bl	801d6bc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 800e786:	2301      	movs	r3, #1
 800e788:	9300      	str	r3, [sp, #0]
 800e78a:	4628      	mov	r0, r5
 800e78c:	9b00      	ldr	r3, [sp, #0]
 800e78e:	441c      	add	r4, r3
 800e790:	682b      	ldr	r3, [r5, #0]
 800e792:	b224      	sxth	r4, r4
 800e794:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800e798:	4621      	mov	r1, r4
 800e79a:	4798      	blx	r3
 800e79c:	9008      	str	r0, [sp, #32]
 800e79e:	a808      	add	r0, sp, #32
 800e7a0:	f7f5 fab3 	bl	8003d0a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800e7a4:	4621      	mov	r1, r4
 800e7a6:	0143      	lsls	r3, r0, #5
 800e7a8:	4628      	mov	r0, r5
 800e7aa:	9301      	str	r3, [sp, #4]
 800e7ac:	682b      	ldr	r3, [r5, #0]
 800e7ae:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800e7b2:	4798      	blx	r3
 800e7b4:	9009      	str	r0, [sp, #36]	; 0x24
 800e7b6:	a809      	add	r0, sp, #36	; 0x24
 800e7b8:	f7f5 faa7 	bl	8003d0a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800e7bc:	0143      	lsls	r3, r0, #5
 800e7be:	9302      	str	r3, [sp, #8]
 800e7c0:	9b01      	ldr	r3, [sp, #4]
 800e7c2:	eba3 0b08 	sub.w	fp, r3, r8
 800e7c6:	9b02      	ldr	r3, [sp, #8]
 800e7c8:	eba3 0a09 	sub.w	sl, r3, r9
 800e7cc:	4658      	mov	r0, fp
 800e7ce:	4651      	mov	r1, sl
 800e7d0:	f7ff fe8b 	bl	800e4ea <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 800e7d4:	b320      	cbz	r0, 800e820 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xfc>
 800e7d6:	4602      	mov	r2, r0
 800e7d8:	4651      	mov	r1, sl
 800e7da:	9005      	str	r0, [sp, #20]
 800e7dc:	9803      	ldr	r0, [sp, #12]
 800e7de:	f004 fcab 	bl	8013138 <_ZN8touchgfx6muldivElll>
 800e7e2:	2302      	movs	r3, #2
 800e7e4:	4659      	mov	r1, fp
 800e7e6:	fb90 faf3 	sdiv	sl, r0, r3
 800e7ea:	9b05      	ldr	r3, [sp, #20]
 800e7ec:	9803      	ldr	r0, [sp, #12]
 800e7ee:	461a      	mov	r2, r3
 800e7f0:	f004 fca2 	bl	8013138 <_ZN8touchgfx6muldivElll>
 800e7f4:	2302      	movs	r3, #2
 800e7f6:	eba8 010a 	sub.w	r1, r8, sl
 800e7fa:	fb90 fbf3 	sdiv	fp, r0, r3
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	eb0b 0209 	add.w	r2, fp, r9
 800e804:	4638      	mov	r0, r7
 800e806:	689b      	ldr	r3, [r3, #8]
 800e808:	4798      	blx	r3
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	9a02      	ldr	r2, [sp, #8]
 800e80e:	4638      	mov	r0, r7
 800e810:	9901      	ldr	r1, [sp, #4]
 800e812:	689b      	ldr	r3, [r3, #8]
 800e814:	445a      	add	r2, fp
 800e816:	eba1 010a 	sub.w	r1, r1, sl
 800e81a:	4798      	blx	r3
 800e81c:	e9dd 8901 	ldrd	r8, r9, [sp, #4]
 800e820:	42a6      	cmp	r6, r4
 800e822:	db02      	blt.n	800e82a <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x106>
 800e824:	b00b      	add	sp, #44	; 0x2c
 800e826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e82a:	9b00      	ldr	r3, [sp, #0]
 800e82c:	9a04      	ldr	r2, [sp, #16]
 800e82e:	42a2      	cmp	r2, r4
 800e830:	bf08      	it	eq
 800e832:	f04f 33ff 	moveq.w	r3, #4294967295
 800e836:	e7a7      	b.n	800e788 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x64>

0800e838 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE>:
 800e838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e83c:	6943      	ldr	r3, [r0, #20]
 800e83e:	b0a2      	sub	sp, #136	; 0x88
 800e840:	4606      	mov	r6, r0
 800e842:	460f      	mov	r7, r1
 800e844:	2b00      	cmp	r3, #0
 800e846:	d06c      	beq.n	800e922 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xea>
 800e848:	695c      	ldr	r4, [r3, #20]
 800e84a:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 800e84e:	2b01      	cmp	r3, #1
 800e850:	dc04      	bgt.n	800e85c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x24>
 800e852:	2401      	movs	r4, #1
 800e854:	4620      	mov	r0, r4
 800e856:	b022      	add	sp, #136	; 0x88
 800e858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e85c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800e860:	ad22      	add	r5, sp, #136	; 0x88
 800e862:	011b      	lsls	r3, r3, #4
 800e864:	f845 3d70 	str.w	r3, [r5, #-112]!
 800e868:	4628      	mov	r0, r5
 800e86a:	f7ff fc79 	bl	800e160 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 800e86e:	8839      	ldrh	r1, [r7, #0]
 800e870:	88ba      	ldrh	r2, [r7, #4]
 800e872:	b280      	uxth	r0, r0
 800e874:	6823      	ldr	r3, [r4, #0]
 800e876:	440a      	add	r2, r1
 800e878:	1a09      	subs	r1, r1, r0
 800e87a:	4402      	add	r2, r0
 800e87c:	f10d 000e 	add.w	r0, sp, #14
 800e880:	b209      	sxth	r1, r1
 800e882:	9000      	str	r0, [sp, #0]
 800e884:	b212      	sxth	r2, r2
 800e886:	f8d3 8124 	ldr.w	r8, [r3, #292]	; 0x124
 800e88a:	4620      	mov	r0, r4
 800e88c:	ab03      	add	r3, sp, #12
 800e88e:	47c0      	blx	r8
 800e890:	2800      	cmp	r0, #0
 800e892:	d0de      	beq.n	800e852 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1a>
 800e894:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	; 0x114
 800e898:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
 800e89c:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
 800e8a0:	18ca      	adds	r2, r1, r3
 800e8a2:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800e8a6:	f8ad 1012 	strh.w	r1, [sp, #18]
 800e8aa:	4639      	mov	r1, r7
 800e8ac:	1a9b      	subs	r3, r3, r2
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	f8ad 0014 	strh.w	r0, [sp, #20]
 800e8b4:	a804      	add	r0, sp, #16
 800e8b6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e8ba:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e8be:	f7fd fe69 	bl	800c594 <_ZN8touchgfx4RectaNERKS0_>
 800e8c2:	aa04      	add	r2, sp, #16
 800e8c4:	4631      	mov	r1, r6
 800e8c6:	4628      	mov	r0, r5
 800e8c8:	f00e fd7e 	bl	801d3c8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 800e8cc:	f9b4 7120 	ldrsh.w	r7, [r4, #288]	; 0x120
 800e8d0:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800e8d4:	2f00      	cmp	r7, #0
 800e8d6:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 800e8da:	dd03      	ble.n	800e8e4 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
 800e8dc:	42bb      	cmp	r3, r7
 800e8de:	da01      	bge.n	800e8e4 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
 800e8e0:	42ba      	cmp	r2, r7
 800e8e2:	da11      	bge.n	800e908 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xd0>
 800e8e4:	9200      	str	r2, [sp, #0]
 800e8e6:	4622      	mov	r2, r4
 800e8e8:	4629      	mov	r1, r5
 800e8ea:	4630      	mov	r0, r6
 800e8ec:	f7ff ff1a 	bl	800e724 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 800e8f0:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800e8f4:	4628      	mov	r0, r5
 800e8f6:	f00e fe23 	bl	801d540 <_ZN8touchgfx6Canvas6renderEh>
 800e8fa:	4b0b      	ldr	r3, [pc, #44]	; (800e928 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xf0>)
 800e8fc:	4604      	mov	r4, r0
 800e8fe:	a80e      	add	r0, sp, #56	; 0x38
 800e900:	9306      	str	r3, [sp, #24]
 800e902:	f000 ff07 	bl	800f714 <_ZN8touchgfx7OutlineD1Ev>
 800e906:	e7a5      	b.n	800e854 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1c>
 800e908:	1e7a      	subs	r2, r7, #1
 800e90a:	4629      	mov	r1, r5
 800e90c:	4630      	mov	r0, r6
 800e90e:	b212      	sxth	r2, r2
 800e910:	9200      	str	r2, [sp, #0]
 800e912:	4622      	mov	r2, r4
 800e914:	f7ff ff06 	bl	800e724 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 800e918:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800e91c:	9300      	str	r3, [sp, #0]
 800e91e:	463b      	mov	r3, r7
 800e920:	e7e1      	b.n	800e8e6 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xae>
 800e922:	f8b3 311e 	ldrh.w	r3, [r3, #286]	; 0x11e
 800e926:	deff      	udf	#255	; 0xff
 800e928:	08020cb0 	.word	0x08020cb0

0800e92c <_ZN8touchgfx15GraphLabelsBase22invalidateGraphPointAtEs>:
 800e92c:	4770      	bx	lr

0800e92e <_ZNK8touchgfx15GraphLabelsBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
 800e92e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800e930:	b118      	cbz	r0, 800e93a <_ZNK8touchgfx15GraphLabelsBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0xc>
 800e932:	6803      	ldr	r3, [r0, #0]
 800e934:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e938:	4718      	bx	r3
 800e93a:	4770      	bx	lr

0800e93c <_ZNK8touchgfx12GraphLabelsX22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:
 800e93c:	680b      	ldr	r3, [r1, #0]
 800e93e:	4608      	mov	r0, r1
 800e940:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800e944:	4718      	bx	r3

0800e946 <_ZNK8touchgfx12GraphLabelsX22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
 800e946:	680b      	ldr	r3, [r1, #0]
 800e948:	4608      	mov	r0, r1
 800e94a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e94e:	4718      	bx	r3

0800e950 <_ZNK8touchgfx12GraphLabelsY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:
 800e950:	680b      	ldr	r3, [r1, #0]
 800e952:	4608      	mov	r0, r1
 800e954:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800e958:	4718      	bx	r3

0800e95a <_ZNK8touchgfx12GraphLabelsY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
 800e95a:	680b      	ldr	r3, [r1, #0]
 800e95c:	4608      	mov	r0, r1
 800e95e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800e962:	4718      	bx	r3

0800e964 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE>:
 800e964:	4a38      	ldr	r2, [pc, #224]	; (800ea48 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xe4>)
 800e966:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e96a:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 800e96c:	b087      	sub	sp, #28
 800e96e:	8812      	ldrh	r2, [r2, #0]
 800e970:	4604      	mov	r4, r0
 800e972:	4689      	mov	r9, r1
 800e974:	429a      	cmp	r2, r3
 800e976:	d937      	bls.n	800e9e8 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 800e978:	4a34      	ldr	r2, [pc, #208]	; (800ea4c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xe8>)
 800e97a:	6812      	ldr	r2, [r2, #0]
 800e97c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800e980:	4b33      	ldr	r3, [pc, #204]	; (800ea50 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xec>)
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 800e988:	f1b8 0f00 	cmp.w	r8, #0
 800e98c:	d02c      	beq.n	800e9e8 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 800e98e:	6803      	ldr	r3, [r0, #0]
 800e990:	6945      	ldr	r5, [r0, #20]
 800e992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e994:	2d00      	cmp	r5, #0
 800e996:	d052      	beq.n	800ea3e <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xda>
 800e998:	696f      	ldr	r7, [r5, #20]
 800e99a:	4798      	blx	r3
 800e99c:	f897 502c 	ldrb.w	r5, [r7, #44]	; 0x2c
 800e9a0:	fb15 f000 	smulbb	r0, r5, r0
 800e9a4:	b280      	uxth	r0, r0
 800e9a6:	1c45      	adds	r5, r0, #1
 800e9a8:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 800e9ac:	122d      	asrs	r5, r5, #8
 800e9ae:	d01b      	beq.n	800e9e8 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 800e9b0:	6823      	ldr	r3, [r4, #0]
 800e9b2:	4639      	mov	r1, r7
 800e9b4:	4620      	mov	r0, r4
 800e9b6:	b2ed      	uxtb	r5, r5
 800e9b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9bc:	4798      	blx	r3
 800e9be:	6823      	ldr	r3, [r4, #0]
 800e9c0:	4606      	mov	r6, r0
 800e9c2:	4639      	mov	r1, r7
 800e9c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9c8:	4620      	mov	r0, r4
 800e9ca:	4798      	blx	r3
 800e9cc:	4683      	mov	fp, r0
 800e9ce:	b970      	cbnz	r0, 800e9ee <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x8a>
 800e9d0:	b96e      	cbnz	r6, 800e9ee <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x8a>
 800e9d2:	6823      	ldr	r3, [r4, #0]
 800e9d4:	4642      	mov	r2, r8
 800e9d6:	9600      	str	r6, [sp, #0]
 800e9d8:	4649      	mov	r1, r9
 800e9da:	4620      	mov	r0, r4
 800e9dc:	e9cd 6501 	strd	r6, r5, [sp, #4]
 800e9e0:	f8d3 508c 	ldr.w	r5, [r3, #140]	; 0x8c
 800e9e4:	463b      	mov	r3, r7
 800e9e6:	47a8      	blx	r5
 800e9e8:	b007      	add	sp, #28
 800e9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9ee:	2e00      	cmp	r6, #0
 800e9f0:	ddfa      	ble.n	800e9e8 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 800e9f2:	6823      	ldr	r3, [r4, #0]
 800e9f4:	4639      	mov	r1, r7
 800e9f6:	4620      	mov	r0, r4
 800e9f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e9fc:	4798      	blx	r3
 800e9fe:	6823      	ldr	r3, [r4, #0]
 800ea00:	4682      	mov	sl, r0
 800ea02:	4639      	mov	r1, r7
 800ea04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ea08:	4620      	mov	r0, r4
 800ea0a:	4798      	blx	r3
 800ea0c:	4582      	cmp	sl, r0
 800ea0e:	bfde      	ittt	le
 800ea10:	4603      	movle	r3, r0
 800ea12:	4650      	movle	r0, sl
 800ea14:	469a      	movle	sl, r3
 800ea16:	ebaa 0300 	sub.w	r3, sl, r0
 800ea1a:	fb93 f3f6 	sdiv	r3, r3, r6
 800ea1e:	2b64      	cmp	r3, #100	; 0x64
 800ea20:	dce2      	bgt.n	800e9e8 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 800ea22:	6823      	ldr	r3, [r4, #0]
 800ea24:	4642      	mov	r2, r8
 800ea26:	9000      	str	r0, [sp, #0]
 800ea28:	4649      	mov	r1, r9
 800ea2a:	4620      	mov	r0, r4
 800ea2c:	e9cd b503 	strd	fp, r5, [sp, #12]
 800ea30:	e9cd a601 	strd	sl, r6, [sp, #4]
 800ea34:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 800ea38:	463b      	mov	r3, r7
 800ea3a:	47a8      	blx	r5
 800ea3c:	e7d4      	b.n	800e9e8 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 800ea3e:	4798      	blx	r3
 800ea40:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800ea44:	deff      	udf	#255	; 0xff
 800ea46:	bf00      	nop
 800ea48:	2400e4b0 	.word	0x2400e4b0
 800ea4c:	2400e4ac 	.word	0x2400e4ac
 800ea50:	2400e4b4 	.word	0x2400e4b4

0800ea54 <_ZN8touchgfx12GraphLabelsYD1Ev>:
 800ea54:	4770      	bx	lr

0800ea56 <_ZN8touchgfx12GraphLabelsXD1Ev>:
 800ea56:	4770      	bx	lr

0800ea58 <_ZNK8touchgfx12GraphLabelsX31getCorrectlyScaledLabelIntervalEPKNS_17AbstractDataGraphE>:
 800ea58:	b538      	push	{r3, r4, r5, lr}
 800ea5a:	680a      	ldr	r2, [r1, #0]
 800ea5c:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	; 0x30
 800ea60:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800ea64:	4608      	mov	r0, r1
 800ea66:	4790      	blx	r2
 800ea68:	4629      	mov	r1, r5
 800ea6a:	4602      	mov	r2, r0
 800ea6c:	4620      	mov	r0, r4
 800ea6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea72:	f7ff ba87 	b.w	800df84 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

0800ea76 <_ZNK8touchgfx12GraphLabelsY31getCorrectlyScaledLabelIntervalEPKNS_17AbstractDataGraphE>:
 800ea76:	b538      	push	{r3, r4, r5, lr}
 800ea78:	680a      	ldr	r2, [r1, #0]
 800ea7a:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	; 0x30
 800ea7e:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 800ea82:	4608      	mov	r0, r1
 800ea84:	4790      	blx	r2
 800ea86:	4629      	mov	r1, r5
 800ea88:	4602      	mov	r2, r0
 800ea8a:	4620      	mov	r0, r4
 800ea8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea90:	f7ff ba78 	b.w	800df84 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

0800ea94 <_ZN8touchgfx12GraphLabelsYD0Ev>:
 800ea94:	b510      	push	{r4, lr}
 800ea96:	4604      	mov	r4, r0
 800ea98:	214c      	movs	r1, #76	; 0x4c
 800ea9a:	f00e fed0 	bl	801d83e <_ZdlPvj>
 800ea9e:	4620      	mov	r0, r4
 800eaa0:	bd10      	pop	{r4, pc}

0800eaa2 <_ZN8touchgfx12GraphLabelsXD0Ev>:
 800eaa2:	b510      	push	{r4, lr}
 800eaa4:	4604      	mov	r4, r0
 800eaa6:	214c      	movs	r1, #76	; 0x4c
 800eaa8:	f00e fec9 	bl	801d83e <_ZdlPvj>
 800eaac:	4620      	mov	r0, r4
 800eaae:	bd10      	pop	{r4, pc}

0800eab0 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>:
 800eab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eab4:	b08d      	sub	sp, #52	; 0x34
 800eab6:	4606      	mov	r6, r0
 800eab8:	9309      	str	r3, [sp, #36]	; 0x24
 800eaba:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800eabe:	e9dd 9a18 	ldrd	r9, sl, [sp, #96]	; 0x60
 800eac2:	e9cd 1207 	strd	r1, r2, [sp, #28]
 800eac6:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	; 0x58
 800eaca:	930a      	str	r3, [sp, #40]	; 0x28
 800eacc:	f1b9 0f00 	cmp.w	r9, #0
 800ead0:	d117      	bne.n	800eb02 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x52>
 800ead2:	2f00      	cmp	r7, #0
 800ead4:	dc7c      	bgt.n	800ebd0 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x120>
 800ead6:	f1b8 0f00 	cmp.w	r8, #0
 800eada:	da01      	bge.n	800eae0 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x30>
 800eadc:	2f00      	cmp	r7, #0
 800eade:	d17a      	bne.n	800ebd6 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 800eae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eae2:	4630      	mov	r0, r6
 800eae4:	6832      	ldr	r2, [r6, #0]
 800eae6:	9318      	str	r3, [sp, #96]	; 0x60
 800eae8:	2300      	movs	r3, #0
 800eaea:	9907      	ldr	r1, [sp, #28]
 800eaec:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
 800eaf0:	f8d2 408c 	ldr.w	r4, [r2, #140]	; 0x8c
 800eaf4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800eaf8:	46a4      	mov	ip, r4
 800eafa:	b00d      	add	sp, #52	; 0x34
 800eafc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb00:	4760      	bx	ip
 800eb02:	fb97 f4f9 	sdiv	r4, r7, r9
 800eb06:	1e63      	subs	r3, r4, #1
 800eb08:	9305      	str	r3, [sp, #20]
 800eb0a:	f1ba 0f00 	cmp.w	sl, #0
 800eb0e:	d122      	bne.n	800eb56 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xa6>
 800eb10:	fb03 f509 	mul.w	r5, r3, r9
 800eb14:	fb98 faf9 	sdiv	sl, r8, r9
 800eb18:	f10a 0a02 	add.w	sl, sl, #2
 800eb1c:	9b05      	ldr	r3, [sp, #20]
 800eb1e:	459a      	cmp	sl, r3
 800eb20:	d059      	beq.n	800ebd6 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 800eb22:	42af      	cmp	r7, r5
 800eb24:	dc5a      	bgt.n	800ebdc <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x12c>
 800eb26:	45a8      	cmp	r8, r5
 800eb28:	da01      	bge.n	800eb2e <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x7e>
 800eb2a:	42af      	cmp	r7, r5
 800eb2c:	db0e      	blt.n	800eb4c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x9c>
 800eb2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb30:	4630      	mov	r0, r6
 800eb32:	9905      	ldr	r1, [sp, #20]
 800eb34:	9302      	str	r3, [sp, #8]
 800eb36:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800eb38:	6832      	ldr	r2, [r6, #0]
 800eb3a:	434b      	muls	r3, r1
 800eb3c:	9907      	ldr	r1, [sp, #28]
 800eb3e:	e9cd 5300 	strd	r5, r3, [sp]
 800eb42:	f8d2 b08c 	ldr.w	fp, [r2, #140]	; 0x8c
 800eb46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800eb4a:	47d8      	blx	fp
 800eb4c:	9b05      	ldr	r3, [sp, #20]
 800eb4e:	444d      	add	r5, r9
 800eb50:	3301      	adds	r3, #1
 800eb52:	9305      	str	r3, [sp, #20]
 800eb54:	e7e2      	b.n	800eb1c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x6c>
 800eb56:	fb97 f3fa 	sdiv	r3, r7, sl
 800eb5a:	3b01      	subs	r3, #1
 800eb5c:	9306      	str	r3, [sp, #24]
 800eb5e:	9a06      	ldr	r2, [sp, #24]
 800eb60:	fb98 f3fa 	sdiv	r3, r8, sl
 800eb64:	fb02 fb0a 	mul.w	fp, r2, sl
 800eb68:	9a05      	ldr	r2, [sp, #20]
 800eb6a:	3302      	adds	r3, #2
 800eb6c:	fb02 f509 	mul.w	r5, r2, r9
 800eb70:	930b      	str	r3, [sp, #44]	; 0x2c
 800eb72:	45ab      	cmp	fp, r5
 800eb74:	dd1d      	ble.n	800ebb2 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x102>
 800eb76:	42af      	cmp	r7, r5
 800eb78:	dc08      	bgt.n	800eb8c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xdc>
 800eb7a:	45a8      	cmp	r8, r5
 800eb7c:	da08      	bge.n	800eb90 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xe0>
 800eb7e:	42af      	cmp	r7, r5
 800eb80:	da06      	bge.n	800eb90 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xe0>
 800eb82:	9b05      	ldr	r3, [sp, #20]
 800eb84:	444d      	add	r5, r9
 800eb86:	3301      	adds	r3, #1
 800eb88:	9305      	str	r3, [sp, #20]
 800eb8a:	e7f2      	b.n	800eb72 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xc2>
 800eb8c:	45a8      	cmp	r8, r5
 800eb8e:	dcf8      	bgt.n	800eb82 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xd2>
 800eb90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb92:	4630      	mov	r0, r6
 800eb94:	9905      	ldr	r1, [sp, #20]
 800eb96:	9302      	str	r3, [sp, #8]
 800eb98:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800eb9a:	6832      	ldr	r2, [r6, #0]
 800eb9c:	434b      	muls	r3, r1
 800eb9e:	9907      	ldr	r1, [sp, #28]
 800eba0:	e9cd 5300 	strd	r5, r3, [sp]
 800eba4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800eba8:	461c      	mov	r4, r3
 800ebaa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ebae:	47a0      	blx	r4
 800ebb0:	e7e7      	b.n	800eb82 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xd2>
 800ebb2:	45ab      	cmp	fp, r5
 800ebb4:	db04      	blt.n	800ebc0 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x110>
 800ebb6:	9b05      	ldr	r3, [sp, #20]
 800ebb8:	444d      	add	r5, r9
 800ebba:	3301      	adds	r3, #1
 800ebbc:	9305      	str	r3, [sp, #20]
 800ebbe:	e7f8      	b.n	800ebb2 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x102>
 800ebc0:	9b06      	ldr	r3, [sp, #24]
 800ebc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ebc4:	3301      	adds	r3, #1
 800ebc6:	4293      	cmp	r3, r2
 800ebc8:	9306      	str	r3, [sp, #24]
 800ebca:	d004      	beq.n	800ebd6 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 800ebcc:	44d3      	add	fp, sl
 800ebce:	e7d0      	b.n	800eb72 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xc2>
 800ebd0:	f1b8 0f00 	cmp.w	r8, #0
 800ebd4:	dd84      	ble.n	800eae0 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x30>
 800ebd6:	b00d      	add	sp, #52	; 0x34
 800ebd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebdc:	45a8      	cmp	r8, r5
 800ebde:	dcb5      	bgt.n	800eb4c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x9c>
 800ebe0:	e7a5      	b.n	800eb2e <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x7e>

0800ebe2 <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>:
 800ebe2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebe6:	f9b3 4120 	ldrsh.w	r4, [r3, #288]	; 0x120
 800ebea:	b089      	sub	sp, #36	; 0x24
 800ebec:	468a      	mov	sl, r1
 800ebee:	4693      	mov	fp, r2
 800ebf0:	2c00      	cmp	r4, #0
 800ebf2:	9007      	str	r0, [sp, #28]
 800ebf4:	461d      	mov	r5, r3
 800ebf6:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 800ebfa:	e9dd c612 	ldrd	ip, r6, [sp, #72]	; 0x48
 800ebfe:	e9dd 7814 	ldrd	r7, r8, [sp, #80]	; 0x50
 800ec02:	dd03      	ble.n	800ec0c <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x2a>
 800ec04:	4564      	cmp	r4, ip
 800ec06:	dd01      	ble.n	800ec0c <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x2a>
 800ec08:	42b4      	cmp	r4, r6
 800ec0a:	dd0e      	ble.n	800ec2a <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x48>
 800ec0c:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 800ec10:	e9cd 8915 	strd	r8, r9, [sp, #84]	; 0x54
 800ec14:	e9cd 6713 	strd	r6, r7, [sp, #76]	; 0x4c
 800ec18:	462b      	mov	r3, r5
 800ec1a:	465a      	mov	r2, fp
 800ec1c:	4651      	mov	r1, sl
 800ec1e:	9807      	ldr	r0, [sp, #28]
 800ec20:	b009      	add	sp, #36	; 0x24
 800ec22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec26:	f7ff bf43 	b.w	800eab0 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>
 800ec2a:	f104 3eff 	add.w	lr, r4, #4294967295
 800ec2e:	9702      	str	r7, [sp, #8]
 800ec30:	e9cd 8903 	strd	r8, r9, [sp, #12]
 800ec34:	e9cd ce00 	strd	ip, lr, [sp]
 800ec38:	f7ff ff3a 	bl	800eab0 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>
 800ec3c:	9412      	str	r4, [sp, #72]	; 0x48
 800ec3e:	e9cd 8915 	strd	r8, r9, [sp, #84]	; 0x54
 800ec42:	e9cd 6713 	strd	r6, r7, [sp, #76]	; 0x4c
 800ec46:	e7e7      	b.n	800ec18 <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x36>

0800ec48 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>:
 800ec48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec4c:	f1b3 0900 	subs.w	r9, r3, #0
 800ec50:	460d      	mov	r5, r1
 800ec52:	4690      	mov	r8, r2
 800ec54:	9f08      	ldr	r7, [sp, #32]
 800ec56:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 800ec5a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ec5c:	da18      	bge.n	800ec90 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x48>
 800ec5e:	2a01      	cmp	r2, #1
 800ec60:	dd16      	ble.n	800ec90 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x48>
 800ec62:	232d      	movs	r3, #45	; 0x2d
 800ec64:	f1c9 0900 	rsb	r9, r9, #0
 800ec68:	2001      	movs	r0, #1
 800ec6a:	800b      	strh	r3, [r1, #0]
 800ec6c:	2f00      	cmp	r7, #0
 800ec6e:	d111      	bne.n	800ec94 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x4c>
 800ec70:	2302      	movs	r3, #2
 800ec72:	eba8 0100 	sub.w	r1, r8, r0
 800ec76:	4a26      	ldr	r2, [pc, #152]	; (800ed10 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc8>)
 800ec78:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 800ec7c:	b289      	uxth	r1, r1
 800ec7e:	fb96 f3f3 	sdiv	r3, r6, r3
 800ec82:	444b      	add	r3, r9
 800ec84:	fb93 f3f6 	sdiv	r3, r3, r6
 800ec88:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec8c:	f006 b870 	b.w	8014d70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800ec90:	2000      	movs	r0, #0
 800ec92:	e7eb      	b.n	800ec6c <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x24>
 800ec94:	dd39      	ble.n	800ed0a <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc2>
 800ec96:	eba8 0100 	sub.w	r1, r8, r0
 800ec9a:	4a1d      	ldr	r2, [pc, #116]	; (800ed10 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc8>)
 800ec9c:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 800eca0:	f108 38ff 	add.w	r8, r8, #4294967295
 800eca4:	b289      	uxth	r1, r1
 800eca6:	fb99 f4f6 	sdiv	r4, r9, r6
 800ecaa:	4623      	mov	r3, r4
 800ecac:	f006 f860 	bl	8014d70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800ecb0:	4628      	mov	r0, r5
 800ecb2:	f005 fceb 	bl	801468c <_ZN8touchgfx7Unicode6strlenEPKt>
 800ecb6:	4580      	cmp	r8, r0
 800ecb8:	dd27      	ble.n	800ed0a <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc2>
 800ecba:	f04f 0e02 	mov.w	lr, #2
 800ecbe:	f825 a010 	strh.w	sl, [r5, r0, lsl #1]
 800ecc2:	fb06 9314 	mls	r3, r6, r4, r9
 800ecc6:	3001      	adds	r0, #1
 800ecc8:	2200      	movs	r2, #0
 800ecca:	f04f 090a 	mov.w	r9, #10
 800ecce:	f107 3aff 	add.w	sl, r7, #4294967295
 800ecd2:	fb96 fefe 	sdiv	lr, r6, lr
 800ecd6:	4580      	cmp	r8, r0
 800ecd8:	4684      	mov	ip, r0
 800ecda:	dd13      	ble.n	800ed04 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xbc>
 800ecdc:	fb09 f303 	mul.w	r3, r9, r3
 800ece0:	4592      	cmp	sl, r2
 800ece2:	f102 0201 	add.w	r2, r2, #1
 800ece6:	f100 0c01 	add.w	ip, r0, #1
 800ecea:	bf08      	it	eq
 800ecec:	4473      	addeq	r3, lr
 800ecee:	4297      	cmp	r7, r2
 800ecf0:	fb93 f4f6 	sdiv	r4, r3, r6
 800ecf4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800ecf8:	fb06 3314 	mls	r3, r6, r4, r3
 800ecfc:	f825 1010 	strh.w	r1, [r5, r0, lsl #1]
 800ed00:	4660      	mov	r0, ip
 800ed02:	d1e8      	bne.n	800ecd6 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x8e>
 800ed04:	2300      	movs	r3, #0
 800ed06:	f825 301c 	strh.w	r3, [r5, ip, lsl #1]
 800ed0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed0e:	bf00      	nop
 800ed10:	0801ffcc 	.word	0x0801ffcc

0800ed14 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs>:
 800ed14:	4a69      	ldr	r2, [pc, #420]	; (800eebc <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x1a8>)
 800ed16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed1a:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 800ed1c:	b093      	sub	sp, #76	; 0x4c
 800ed1e:	8812      	ldrh	r2, [r2, #0]
 800ed20:	4604      	mov	r4, r0
 800ed22:	460e      	mov	r6, r1
 800ed24:	429a      	cmp	r2, r3
 800ed26:	d93a      	bls.n	800ed9e <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 800ed28:	4a65      	ldr	r2, [pc, #404]	; (800eec0 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x1ac>)
 800ed2a:	6812      	ldr	r2, [r2, #0]
 800ed2c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800ed30:	4b64      	ldr	r3, [pc, #400]	; (800eec4 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x1b0>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 800ed38:	f1b8 0f00 	cmp.w	r8, #0
 800ed3c:	d02f      	beq.n	800ed9e <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 800ed3e:	6803      	ldr	r3, [r0, #0]
 800ed40:	6945      	ldr	r5, [r0, #20]
 800ed42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ed44:	2d00      	cmp	r5, #0
 800ed46:	f000 80b5 	beq.w	800eeb4 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x1a0>
 800ed4a:	696f      	ldr	r7, [r5, #20]
 800ed4c:	4798      	blx	r3
 800ed4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ed52:	fb13 f000 	smulbb	r0, r3, r0
 800ed56:	b280      	uxth	r0, r0
 800ed58:	1c43      	adds	r3, r0, #1
 800ed5a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 800ed5e:	0a03      	lsrs	r3, r0, #8
 800ed60:	d01d      	beq.n	800ed9e <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 800ed62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ed64:	4620      	mov	r0, r4
 800ed66:	6823      	ldr	r3, [r4, #0]
 800ed68:	434e      	muls	r6, r1
 800ed6a:	4639      	mov	r1, r7
 800ed6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed70:	4798      	blx	r3
 800ed72:	6823      	ldr	r3, [r4, #0]
 800ed74:	4605      	mov	r5, r0
 800ed76:	4639      	mov	r1, r7
 800ed78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed7c:	4620      	mov	r0, r4
 800ed7e:	4798      	blx	r3
 800ed80:	2d00      	cmp	r5, #0
 800ed82:	dd0f      	ble.n	800eda4 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x90>
 800ed84:	fb96 f3f5 	sdiv	r3, r6, r5
 800ed88:	436b      	muls	r3, r5
 800ed8a:	1b9a      	subs	r2, r3, r6
 800ed8c:	4253      	negs	r3, r2
 800ed8e:	4153      	adcs	r3, r2
 800ed90:	2800      	cmp	r0, #0
 800ed92:	dd09      	ble.n	800eda8 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x94>
 800ed94:	fb96 f2f0 	sdiv	r2, r6, r0
 800ed98:	4350      	muls	r0, r2
 800ed9a:	42b0      	cmp	r0, r6
 800ed9c:	d10d      	bne.n	800edba <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xa6>
 800ed9e:	b013      	add	sp, #76	; 0x4c
 800eda0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eda4:	2300      	movs	r3, #0
 800eda6:	e7f3      	b.n	800ed90 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x7c>
 800eda8:	d107      	bne.n	800edba <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xa6>
 800edaa:	2d00      	cmp	r5, #0
 800edac:	d17f      	bne.n	800eeae <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x19a>
 800edae:	2e00      	cmp	r6, #0
 800edb0:	d063      	beq.n	800ee7a <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x166>
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d0f3      	beq.n	800ed9e <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 800edb6:	462a      	mov	r2, r5
 800edb8:	e007      	b.n	800edca <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xb6>
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d0ef      	beq.n	800ed9e <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 800edbe:	2d00      	cmp	r5, #0
 800edc0:	d0f9      	beq.n	800edb6 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xa2>
 800edc2:	fb96 f2f5 	sdiv	r2, r6, r5
 800edc6:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800edc8:	436a      	muls	r2, r5
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	4631      	mov	r1, r6
 800edce:	4638      	mov	r0, r7
 800edd0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800edd4:	4798      	blx	r3
 800edd6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800edd8:	2214      	movs	r2, #20
 800edda:	a908      	add	r1, sp, #32
 800eddc:	9302      	str	r3, [sp, #8]
 800edde:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 800ede2:	9301      	str	r3, [sp, #4]
 800ede4:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800ede8:	9300      	str	r3, [sp, #0]
 800edea:	4603      	mov	r3, r0
 800edec:	4620      	mov	r0, r4
 800edee:	f7ff ff2b 	bl	800ec48 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>
 800edf2:	4b35      	ldr	r3, [pc, #212]	; (800eec8 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x1b4>)
 800edf4:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 800edf6:	6818      	ldr	r0, [r3, #0]
 800edf8:	f7f3 ff0a 	bl	8002c10 <_ZNK8touchgfx5Texts7getTextEt>
 800edfc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800ee00:	4681      	mov	r9, r0
 800ee02:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800ee06:	f8d8 3000 	ldr.w	r3, [r8]
 800ee0a:	d138      	bne.n	800ee7e <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x16a>
 800ee0c:	4601      	mov	r1, r0
 800ee0e:	699b      	ldr	r3, [r3, #24]
 800ee10:	aa08      	add	r2, sp, #32
 800ee12:	4640      	mov	r0, r8
 800ee14:	4798      	blx	r3
 800ee16:	b205      	sxth	r5, r0
 800ee18:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800ee1c:	2002      	movs	r0, #2
 800ee1e:	4631      	mov	r1, r6
 800ee20:	f8b7 906c 	ldrh.w	r9, [r7, #108]	; 0x6c
 800ee24:	2b01      	cmp	r3, #1
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	bf88      	it	hi
 800ee2a:	f105 0801 	addhi.w	r8, r5, #1
 800ee2e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ee32:	bf8c      	ite	hi
 800ee34:	fb98 f8f0 	sdivhi	r8, r8, r0
 800ee38:	fb95 f8f0 	sdivls	r8, r5, r0
 800ee3c:	4638      	mov	r0, r7
 800ee3e:	bf88      	it	hi
 800ee40:	fa0f f888 	sxthhi.w	r8, r8
 800ee44:	4798      	blx	r3
 800ee46:	ab12      	add	r3, sp, #72	; 0x48
 800ee48:	f843 0d34 	str.w	r0, [r3, #-52]!
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	f7f4 ff5c 	bl	8003d0a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800ee52:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800ee56:	4448      	add	r0, r9
 800ee58:	2200      	movs	r2, #0
 800ee5a:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ee5e:	a906      	add	r1, sp, #24
 800ee60:	eba0 0808 	sub.w	r8, r0, r8
 800ee64:	6823      	ldr	r3, [r4, #0]
 800ee66:	f8ad 201a 	strh.w	r2, [sp, #26]
 800ee6a:	4620      	mov	r0, r4
 800ee6c:	f8ad 8018 	strh.w	r8, [sp, #24]
 800ee70:	f8ad 501c 	strh.w	r5, [sp, #28]
 800ee74:	691b      	ldr	r3, [r3, #16]
 800ee76:	4798      	blx	r3
 800ee78:	e791      	b.n	800ed9e <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 800ee7a:	4632      	mov	r2, r6
 800ee7c:	e7a5      	b.n	800edca <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xb6>
 800ee7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee80:	4640      	mov	r0, r8
 800ee82:	4798      	blx	r3
 800ee84:	f8d8 3000 	ldr.w	r3, [r8]
 800ee88:	4605      	mov	r5, r0
 800ee8a:	aa08      	add	r2, sp, #32
 800ee8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ee8e:	4649      	mov	r1, r9
 800ee90:	4640      	mov	r0, r8
 800ee92:	4798      	blx	r3
 800ee94:	fb15 f500 	smulbb	r5, r5, r0
 800ee98:	f8d8 3000 	ldr.w	r3, [r8]
 800ee9c:	aa08      	add	r2, sp, #32
 800ee9e:	b2ad      	uxth	r5, r5
 800eea0:	4649      	mov	r1, r9
 800eea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eea4:	4640      	mov	r0, r8
 800eea6:	4798      	blx	r3
 800eea8:	4405      	add	r5, r0
 800eeaa:	b22d      	sxth	r5, r5
 800eeac:	e7b4      	b.n	800ee18 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x104>
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d187      	bne.n	800edc2 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xae>
 800eeb2:	e774      	b.n	800ed9e <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 800eeb4:	4798      	blx	r3
 800eeb6:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800eeba:	deff      	udf	#255	; 0xff
 800eebc:	2400e4b0 	.word	0x2400e4b0
 800eec0:	2400e4ac 	.word	0x2400e4ac
 800eec4:	2400e4b4 	.word	0x2400e4b4
 800eec8:	2400e4b8 	.word	0x2400e4b8

0800eecc <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih>:
 800eecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eed0:	b09b      	sub	sp, #108	; 0x6c
 800eed2:	461e      	mov	r6, r3
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	4604      	mov	r4, r0
 800eed8:	af1a      	add	r7, sp, #104	; 0x68
 800eeda:	9104      	str	r1, [sp, #16]
 800eedc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800eee0:	4630      	mov	r0, r6
 800eee2:	9924      	ldr	r1, [sp, #144]	; 0x90
 800eee4:	4690      	mov	r8, r2
 800eee6:	4798      	blx	r3
 800eee8:	f847 0d28 	str.w	r0, [r7, #-40]!
 800eeec:	4638      	mov	r0, r7
 800eeee:	f7f4 ff0c 	bl	8003d0a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800eef2:	f8b6 3116 	ldrh.w	r3, [r6, #278]	; 0x116
 800eef6:	1ac0      	subs	r0, r0, r3
 800eef8:	b200      	sxth	r0, r0
 800eefa:	2800      	cmp	r0, #0
 800eefc:	f2c0 80b8 	blt.w	800f070 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a4>
 800ef00:	f8b6 2118 	ldrh.w	r2, [r6, #280]	; 0x118
 800ef04:	441a      	add	r2, r3
 800ef06:	f8b6 3040 	ldrh.w	r3, [r6, #64]	; 0x40
 800ef0a:	1a9b      	subs	r3, r3, r2
 800ef0c:	b21b      	sxth	r3, r3
 800ef0e:	4298      	cmp	r0, r3
 800ef10:	f280 80ae 	bge.w	800f070 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a4>
 800ef14:	6833      	ldr	r3, [r6, #0]
 800ef16:	4630      	mov	r0, r6
 800ef18:	e9dd 1224 	ldrd	r1, r2, [sp, #144]	; 0x90
 800ef1c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800ef20:	4798      	blx	r3
 800ef22:	6833      	ldr	r3, [r6, #0]
 800ef24:	f8b4 9042 	ldrh.w	r9, [r4, #66]	; 0x42
 800ef28:	4605      	mov	r5, r0
 800ef2a:	f8b4 b044 	ldrh.w	fp, [r4, #68]	; 0x44
 800ef2e:	4630      	mov	r0, r6
 800ef30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef34:	4798      	blx	r3
 800ef36:	f8cd 9000 	str.w	r9, [sp]
 800ef3a:	462b      	mov	r3, r5
 800ef3c:	2214      	movs	r2, #20
 800ef3e:	4639      	mov	r1, r7
 800ef40:	e9cd b001 	strd	fp, r0, [sp, #4]
 800ef44:	4620      	mov	r0, r4
 800ef46:	f7ff fe7f 	bl	800ec48 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>
 800ef4a:	4b57      	ldr	r3, [pc, #348]	; (800f0a8 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1dc>)
 800ef4c:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 800ef4e:	6818      	ldr	r0, [r3, #0]
 800ef50:	f7f3 fe5e 	bl	8002c10 <_ZNK8touchgfx5Texts7getTextEt>
 800ef54:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800ef58:	4681      	mov	r9, r0
 800ef5a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800ef5e:	f8d8 3000 	ldr.w	r3, [r8]
 800ef62:	f040 8088 	bne.w	800f076 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1aa>
 800ef66:	4601      	mov	r1, r0
 800ef68:	699b      	ldr	r3, [r3, #24]
 800ef6a:	463a      	mov	r2, r7
 800ef6c:	4640      	mov	r0, r8
 800ef6e:	4798      	blx	r3
 800ef70:	b205      	sxth	r5, r0
 800ef72:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800ef76:	2002      	movs	r0, #2
 800ef78:	6832      	ldr	r2, [r6, #0]
 800ef7a:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 800ef7e:	2b01      	cmp	r3, #1
 800ef80:	f8b6 306c 	ldrh.w	r3, [r6, #108]	; 0x6c
 800ef84:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
 800ef88:	bf88      	it	hi
 800ef8a:	f105 0b01 	addhi.w	fp, r5, #1
 800ef8e:	9305      	str	r3, [sp, #20]
 800ef90:	9924      	ldr	r1, [sp, #144]	; 0x90
 800ef92:	bf8c      	ite	hi
 800ef94:	fb9b fbf0 	sdivhi	fp, fp, r0
 800ef98:	fb95 fbf0 	sdivls	fp, r5, r0
 800ef9c:	4630      	mov	r0, r6
 800ef9e:	bf88      	it	hi
 800efa0:	fa0f fb8b 	sxthhi.w	fp, fp
 800efa4:	4790      	blx	r2
 800efa6:	f84a 0d3c 	str.w	r0, [sl, #-60]!
 800efaa:	4650      	mov	r0, sl
 800efac:	2600      	movs	r6, #0
 800efae:	f7f4 feac 	bl	8003d0a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800efb2:	9b05      	ldr	r3, [sp, #20]
 800efb4:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 800efb8:	4418      	add	r0, r3
 800efba:	f8ad 5020 	strh.w	r5, [sp, #32]
 800efbe:	ad07      	add	r5, sp, #28
 800efc0:	f8ad 601e 	strh.w	r6, [sp, #30]
 800efc4:	eba0 0b0b 	sub.w	fp, r0, fp
 800efc8:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 800efcc:	f8ad b01c 	strh.w	fp, [sp, #28]
 800efd0:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800efd4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800efd8:	e88b 0003 	stmia.w	fp, {r0, r1}
 800efdc:	9904      	ldr	r1, [sp, #16]
 800efde:	4658      	mov	r0, fp
 800efe0:	f7fd fad8 	bl	800c594 <_ZN8touchgfx4RectaNERKS0_>
 800efe4:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 800efe8:	42b3      	cmp	r3, r6
 800efea:	dd41      	ble.n	800f070 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a4>
 800efec:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 800eff0:	42b3      	cmp	r3, r6
 800eff2:	dd3d      	ble.n	800f070 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a4>
 800eff4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800eff8:	4620      	mov	r0, r4
 800effa:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800effe:	1a5b      	subs	r3, r3, r1
 800f000:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 800f004:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800f008:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800f00c:	1a5b      	subs	r3, r3, r1
 800f00e:	4629      	mov	r1, r5
 800f010:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800f014:	6823      	ldr	r3, [r4, #0]
 800f016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f018:	4798      	blx	r3
 800f01a:	4b24      	ldr	r3, [pc, #144]	; (800f0ac <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1e0>)
 800f01c:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800f024:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800f028:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f02a:	785b      	ldrb	r3, [r3, #1]
 800f02c:	910d      	str	r1, [sp, #52]	; 0x34
 800f02e:	f3c3 0c01 	ubfx	ip, r3, #0, #2
 800f032:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800f036:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800f03a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 800f03e:	f89d 3098 	ldrb.w	r3, [sp, #152]	; 0x98
 800f042:	f88d c030 	strb.w	ip, [sp, #48]	; 0x30
 800f046:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800f04a:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
 800f04e:	f8ad 6038 	strh.w	r6, [sp, #56]	; 0x38
 800f052:	f88d 603b 	strb.w	r6, [sp, #59]	; 0x3b
 800f056:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800f05a:	f7fd fd6b 	bl	800cb34 <_ZN8touchgfx3HAL3lcdEv>
 800f05e:	465b      	mov	r3, fp
 800f060:	e9cd 7602 	strd	r7, r6, [sp, #8]
 800f064:	e9cd a900 	strd	sl, r9, [sp]
 800f068:	e895 0006 	ldmia.w	r5, {r1, r2}
 800f06c:	f7f3 fd82 	bl	8002b74 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800f070:	b01b      	add	sp, #108	; 0x6c
 800f072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f078:	4640      	mov	r0, r8
 800f07a:	4798      	blx	r3
 800f07c:	f8d8 3000 	ldr.w	r3, [r8]
 800f080:	4605      	mov	r5, r0
 800f082:	463a      	mov	r2, r7
 800f084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f086:	4649      	mov	r1, r9
 800f088:	4640      	mov	r0, r8
 800f08a:	4798      	blx	r3
 800f08c:	fb15 f500 	smulbb	r5, r5, r0
 800f090:	f8d8 3000 	ldr.w	r3, [r8]
 800f094:	463a      	mov	r2, r7
 800f096:	b2ad      	uxth	r5, r5
 800f098:	4649      	mov	r1, r9
 800f09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f09c:	4640      	mov	r0, r8
 800f09e:	4798      	blx	r3
 800f0a0:	4405      	add	r5, r0
 800f0a2:	b22d      	sxth	r5, r5
 800f0a4:	e765      	b.n	800ef72 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xa6>
 800f0a6:	bf00      	nop
 800f0a8:	2400e4b8 	.word	0x2400e4b8
 800f0ac:	2400e4ac 	.word	0x2400e4ac

0800f0b0 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih>:
 800f0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0b4:	b09b      	sub	sp, #108	; 0x6c
 800f0b6:	4698      	mov	r8, r3
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	4604      	mov	r4, r0
 800f0bc:	ae1a      	add	r6, sp, #104	; 0x68
 800f0be:	9104      	str	r1, [sp, #16]
 800f0c0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800f0c4:	4640      	mov	r0, r8
 800f0c6:	9924      	ldr	r1, [sp, #144]	; 0x90
 800f0c8:	4617      	mov	r7, r2
 800f0ca:	4798      	blx	r3
 800f0cc:	f846 0d28 	str.w	r0, [r6, #-40]!
 800f0d0:	4630      	mov	r0, r6
 800f0d2:	f7f4 fe1a 	bl	8003d0a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800f0d6:	f8b8 3114 	ldrh.w	r3, [r8, #276]	; 0x114
 800f0da:	1ac0      	subs	r0, r0, r3
 800f0dc:	b200      	sxth	r0, r0
 800f0de:	2800      	cmp	r0, #0
 800f0e0:	f2c0 80ba 	blt.w	800f258 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 800f0e4:	f8b8 211a 	ldrh.w	r2, [r8, #282]	; 0x11a
 800f0e8:	441a      	add	r2, r3
 800f0ea:	f8b8 3042 	ldrh.w	r3, [r8, #66]	; 0x42
 800f0ee:	1a9b      	subs	r3, r3, r2
 800f0f0:	b21b      	sxth	r3, r3
 800f0f2:	4298      	cmp	r0, r3
 800f0f4:	f280 80b0 	bge.w	800f258 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 800f0f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f0fa:	2214      	movs	r2, #20
 800f0fc:	4631      	mov	r1, r6
 800f0fe:	4620      	mov	r0, r4
 800f100:	9302      	str	r3, [sp, #8]
 800f102:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 800f106:	9301      	str	r3, [sp, #4]
 800f108:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800f10c:	9300      	str	r3, [sp, #0]
 800f10e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800f110:	f7ff fd9a 	bl	800ec48 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>
 800f114:	4b55      	ldr	r3, [pc, #340]	; (800f26c <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1bc>)
 800f116:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 800f118:	6818      	ldr	r0, [r3, #0]
 800f11a:	f7f3 fd79 	bl	8002c10 <_ZNK8touchgfx5Texts7getTextEt>
 800f11e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800f122:	4681      	mov	r9, r0
 800f124:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	f040 8098 	bne.w	800f25e <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1ae>
 800f12e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f130:	4638      	mov	r0, r7
 800f132:	4798      	blx	r3
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	4605      	mov	r5, r0
 800f138:	4632      	mov	r2, r6
 800f13a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f13c:	4649      	mov	r1, r9
 800f13e:	4638      	mov	r0, r7
 800f140:	4798      	blx	r3
 800f142:	fb15 f500 	smulbb	r5, r5, r0
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	4632      	mov	r2, r6
 800f14a:	b2ad      	uxth	r5, r5
 800f14c:	4649      	mov	r1, r9
 800f14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f150:	4638      	mov	r0, r7
 800f152:	4798      	blx	r3
 800f154:	4405      	add	r5, r0
 800f156:	b22d      	sxth	r5, r5
 800f158:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800f15c:	2002      	movs	r0, #2
 800f15e:	f8d8 2000 	ldr.w	r2, [r8]
 800f162:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 800f166:	2b01      	cmp	r3, #1
 800f168:	f8b8 30c6 	ldrh.w	r3, [r8, #198]	; 0xc6
 800f16c:	f8d2 2118 	ldr.w	r2, [r2, #280]	; 0x118
 800f170:	bf88      	it	hi
 800f172:	f105 0b01 	addhi.w	fp, r5, #1
 800f176:	9305      	str	r3, [sp, #20]
 800f178:	9924      	ldr	r1, [sp, #144]	; 0x90
 800f17a:	bf8c      	ite	hi
 800f17c:	fb9b fbf0 	sdivhi	fp, fp, r0
 800f180:	fb95 fbf0 	sdivls	fp, r5, r0
 800f184:	4640      	mov	r0, r8
 800f186:	bf88      	it	hi
 800f188:	fa0f fb8b 	sxthhi.w	fp, fp
 800f18c:	4790      	blx	r2
 800f18e:	f84a 0d3c 	str.w	r0, [sl, #-60]!
 800f192:	4650      	mov	r0, sl
 800f194:	f04f 0800 	mov.w	r8, #0
 800f198:	f7f4 fdb7 	bl	8003d0a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800f19c:	9b05      	ldr	r3, [sp, #20]
 800f19e:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800f1a2:	4418      	add	r0, r3
 800f1a4:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
 800f1a8:	ad07      	add	r5, sp, #28
 800f1aa:	f8ad 801c 	strh.w	r8, [sp, #28]
 800f1ae:	eba0 0b0b 	sub.w	fp, r0, fp
 800f1b2:	f8ad 1020 	strh.w	r1, [sp, #32]
 800f1b6:	f8ad b01e 	strh.w	fp, [sp, #30]
 800f1ba:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800f1be:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f1c2:	e88b 0003 	stmia.w	fp, {r0, r1}
 800f1c6:	9904      	ldr	r1, [sp, #16]
 800f1c8:	4658      	mov	r0, fp
 800f1ca:	f7fd f9e3 	bl	800c594 <_ZN8touchgfx4RectaNERKS0_>
 800f1ce:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 800f1d2:	4543      	cmp	r3, r8
 800f1d4:	dd40      	ble.n	800f258 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 800f1d6:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 800f1da:	4543      	cmp	r3, r8
 800f1dc:	dd3c      	ble.n	800f258 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 800f1de:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800f1e2:	4620      	mov	r0, r4
 800f1e4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800f1e8:	1a5b      	subs	r3, r3, r1
 800f1ea:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 800f1ee:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800f1f2:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800f1f6:	1a5b      	subs	r3, r3, r1
 800f1f8:	4629      	mov	r1, r5
 800f1fa:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800f1fe:	6823      	ldr	r3, [r4, #0]
 800f200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f202:	4798      	blx	r3
 800f204:	4b1a      	ldr	r3, [pc, #104]	; (800f270 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1c0>)
 800f206:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800f20e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800f212:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f214:	785b      	ldrb	r3, [r3, #1]
 800f216:	910d      	str	r1, [sp, #52]	; 0x34
 800f218:	f3c3 0c01 	ubfx	ip, r3, #0, #2
 800f21c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800f220:	970b      	str	r7, [sp, #44]	; 0x2c
 800f222:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 800f226:	f89d 3098 	ldrb.w	r3, [sp, #152]	; 0x98
 800f22a:	f88d c030 	strb.w	ip, [sp, #48]	; 0x30
 800f22e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800f232:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
 800f236:	f8ad 8038 	strh.w	r8, [sp, #56]	; 0x38
 800f23a:	f88d 803b 	strb.w	r8, [sp, #59]	; 0x3b
 800f23e:	f88d 803c 	strb.w	r8, [sp, #60]	; 0x3c
 800f242:	f7fd fc77 	bl	800cb34 <_ZN8touchgfx3HAL3lcdEv>
 800f246:	465b      	mov	r3, fp
 800f248:	e9cd 6802 	strd	r6, r8, [sp, #8]
 800f24c:	e9cd a900 	strd	sl, r9, [sp]
 800f250:	e895 0006 	ldmia.w	r5, {r1, r2}
 800f254:	f7f3 fc8e 	bl	8002b74 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800f258:	b01b      	add	sp, #108	; 0x6c
 800f25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f25e:	4601      	mov	r1, r0
 800f260:	699b      	ldr	r3, [r3, #24]
 800f262:	4632      	mov	r2, r6
 800f264:	4638      	mov	r0, r7
 800f266:	4798      	blx	r3
 800f268:	b205      	sxth	r5, r0
 800f26a:	e775      	b.n	800f158 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xa8>
 800f26c:	2400e4b8 	.word	0x2400e4b8
 800f270:	2400e4ac 	.word	0x2400e4ac

0800f274 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 800f274:	4b07      	ldr	r3, [pc, #28]	; (800f294 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 800f276:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800f278:	881b      	ldrh	r3, [r3, #0]
 800f27a:	4293      	cmp	r3, r2
 800f27c:	bf81      	itttt	hi
 800f27e:	4b06      	ldrhi	r3, [pc, #24]	; (800f298 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 800f280:	681b      	ldrhi	r3, [r3, #0]
 800f282:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 800f286:	7858      	ldrbhi	r0, [r3, #1]
 800f288:	bf8c      	ite	hi
 800f28a:	f000 0003 	andhi.w	r0, r0, #3
 800f28e:	2000      	movls	r0, #0
 800f290:	4770      	bx	lr
 800f292:	bf00      	nop
 800f294:	2400e4b0 	.word	0x2400e4b0
 800f298:	2400e4ac 	.word	0x2400e4ac

0800f29c <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 800f29c:	4b11      	ldr	r3, [pc, #68]	; (800f2e4 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 800f29e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2a2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800f2a4:	4604      	mov	r4, r0
 800f2a6:	881b      	ldrh	r3, [r3, #0]
 800f2a8:	428b      	cmp	r3, r1
 800f2aa:	d918      	bls.n	800f2de <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 800f2ac:	6803      	ldr	r3, [r0, #0]
 800f2ae:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 800f2b0:	4b0d      	ldr	r3, [pc, #52]	; (800f2e8 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 800f2b2:	6818      	ldr	r0, [r3, #0]
 800f2b4:	f7f3 fcac 	bl	8002c10 <_ZNK8touchgfx5Texts7getTextEt>
 800f2b8:	6823      	ldr	r3, [r4, #0]
 800f2ba:	4606      	mov	r6, r0
 800f2bc:	4620      	mov	r0, r4
 800f2be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f2c0:	4798      	blx	r3
 800f2c2:	6823      	ldr	r3, [r4, #0]
 800f2c4:	4607      	mov	r7, r0
 800f2c6:	4620      	mov	r0, r4
 800f2c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f2cc:	4798      	blx	r3
 800f2ce:	463a      	mov	r2, r7
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	4631      	mov	r1, r6
 800f2d4:	4620      	mov	r0, r4
 800f2d6:	46ac      	mov	ip, r5
 800f2d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2dc:	4760      	bx	ip
 800f2de:	2000      	movs	r0, #0
 800f2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2e4:	2400e4b0 	.word	0x2400e4b0
 800f2e8:	2400e4b8 	.word	0x2400e4b8

0800f2ec <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 800f2ec:	4b18      	ldr	r3, [pc, #96]	; (800f350 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 800f2ee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f2f2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800f2f4:	4604      	mov	r4, r0
 800f2f6:	881b      	ldrh	r3, [r3, #0]
 800f2f8:	428b      	cmp	r3, r1
 800f2fa:	d926      	bls.n	800f34a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 800f2fc:	4b15      	ldr	r3, [pc, #84]	; (800f354 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 800f304:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 800f308:	4b13      	ldr	r3, [pc, #76]	; (800f358 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 800f30a:	7855      	ldrb	r5, [r2, #1]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	f3c5 0581 	ubfx	r5, r5, #2, #2
 800f312:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800f316:	6833      	ldr	r3, [r6, #0]
 800f318:	69df      	ldr	r7, [r3, #28]
 800f31a:	4b10      	ldr	r3, [pc, #64]	; (800f35c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 800f31c:	6818      	ldr	r0, [r3, #0]
 800f31e:	f7f3 fc77 	bl	8002c10 <_ZNK8touchgfx5Texts7getTextEt>
 800f322:	6823      	ldr	r3, [r4, #0]
 800f324:	4680      	mov	r8, r0
 800f326:	4620      	mov	r0, r4
 800f328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f32a:	4798      	blx	r3
 800f32c:	6823      	ldr	r3, [r4, #0]
 800f32e:	4681      	mov	r9, r0
 800f330:	4620      	mov	r0, r4
 800f332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f336:	4798      	blx	r3
 800f338:	464b      	mov	r3, r9
 800f33a:	9000      	str	r0, [sp, #0]
 800f33c:	4642      	mov	r2, r8
 800f33e:	4629      	mov	r1, r5
 800f340:	4630      	mov	r0, r6
 800f342:	47b8      	blx	r7
 800f344:	b003      	add	sp, #12
 800f346:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f34a:	2000      	movs	r0, #0
 800f34c:	e7fa      	b.n	800f344 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 800f34e:	bf00      	nop
 800f350:	2400e4b0 	.word	0x2400e4b0
 800f354:	2400e4ac 	.word	0x2400e4ac
 800f358:	2400e4b4 	.word	0x2400e4b4
 800f35c:	2400e4b8 	.word	0x2400e4b8

0800f360 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 800f360:	b40e      	push	{r1, r2, r3}
 800f362:	4b30      	ldr	r3, [pc, #192]	; (800f424 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 800f364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f368:	881a      	ldrh	r2, [r3, #0]
 800f36a:	b09d      	sub	sp, #116	; 0x74
 800f36c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 800f36e:	4604      	mov	r4, r0
 800f370:	429a      	cmp	r2, r3
 800f372:	d954      	bls.n	800f41e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 800f374:	aa26      	add	r2, sp, #152	; 0x98
 800f376:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800f428 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 800f37a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800f42c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 800f37e:	9202      	str	r2, [sp, #8]
 800f380:	f8d9 2000 	ldr.w	r2, [r9]
 800f384:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800f388:	f8d8 3000 	ldr.w	r3, [r8]
 800f38c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800f390:	682b      	ldr	r3, [r5, #0]
 800f392:	4628      	mov	r0, r5
 800f394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f396:	4798      	blx	r3
 800f398:	4606      	mov	r6, r0
 800f39a:	b207      	sxth	r7, r0
 800f39c:	a803      	add	r0, sp, #12
 800f39e:	f004 fa27 	bl	80137f0 <_ZN8touchgfx12TextProviderC1Ev>
 800f3a2:	682b      	ldr	r3, [r5, #0]
 800f3a4:	4628      	mov	r0, r5
 800f3a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f3a8:	4798      	blx	r3
 800f3aa:	682b      	ldr	r3, [r5, #0]
 800f3ac:	4682      	mov	sl, r0
 800f3ae:	4628      	mov	r0, r5
 800f3b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3b2:	4798      	blx	r3
 800f3b4:	4653      	mov	r3, sl
 800f3b6:	9000      	str	r0, [sp, #0]
 800f3b8:	a803      	add	r0, sp, #12
 800f3ba:	9a02      	ldr	r2, [sp, #8]
 800f3bc:	9925      	ldr	r1, [sp, #148]	; 0x94
 800f3be:	f004 fa6a 	bl	8013896 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800f3c2:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800f3c4:	f8d9 3000 	ldr.w	r3, [r9]
 800f3c8:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 800f3cc:	8925      	ldrh	r5, [r4, #8]
 800f3ce:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 800f3d2:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 800f3d6:	eba5 050c 	sub.w	r5, r5, ip
 800f3da:	784a      	ldrb	r2, [r1, #1]
 800f3dc:	f8d8 3000 	ldr.w	r3, [r8]
 800f3e0:	b22d      	sxth	r5, r5
 800f3e2:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 800f3e6:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800f3ea:	9500      	str	r5, [sp, #0]
 800f3ec:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f3f0:	a803      	add	r0, sp, #12
 800f3f2:	f002 f869 	bl	80114c8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 800f3f6:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 800f3fa:	b203      	sxth	r3, r0
 800f3fc:	18b9      	adds	r1, r7, r2
 800f3fe:	2900      	cmp	r1, #0
 800f400:	dd0b      	ble.n	800f41a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 800f402:	3b01      	subs	r3, #1
 800f404:	fb13 f302 	smulbb	r3, r3, r2
 800f408:	fb16 3300 	smlabb	r3, r6, r0, r3
 800f40c:	b21f      	sxth	r7, r3
 800f40e:	4638      	mov	r0, r7
 800f410:	b01d      	add	sp, #116	; 0x74
 800f412:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f416:	b003      	add	sp, #12
 800f418:	4770      	bx	lr
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	dcf7      	bgt.n	800f40e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 800f41e:	2700      	movs	r7, #0
 800f420:	e7f5      	b.n	800f40e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 800f422:	bf00      	nop
 800f424:	2400e4b0 	.word	0x2400e4b0
 800f428:	2400e4ac 	.word	0x2400e4ac
 800f42c:	2400e4b4 	.word	0x2400e4b4

0800f430 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 800f430:	b570      	push	{r4, r5, r6, lr}
 800f432:	6803      	ldr	r3, [r0, #0]
 800f434:	4604      	mov	r4, r0
 800f436:	4615      	mov	r5, r2
 800f438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f43a:	4798      	blx	r3
 800f43c:	6823      	ldr	r3, [r4, #0]
 800f43e:	4629      	mov	r1, r5
 800f440:	4620      	mov	r0, r4
 800f442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f444:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f448:	4718      	bx	r3
	...

0800f44c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 800f44c:	b538      	push	{r3, r4, r5, lr}
 800f44e:	4b0e      	ldr	r3, [pc, #56]	; (800f488 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 800f450:	4604      	mov	r4, r0
 800f452:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800f454:	881b      	ldrh	r3, [r3, #0]
 800f456:	429a      	cmp	r2, r3
 800f458:	d214      	bcs.n	800f484 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 800f45a:	6803      	ldr	r3, [r0, #0]
 800f45c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f45e:	4798      	blx	r3
 800f460:	6823      	ldr	r3, [r4, #0]
 800f462:	4605      	mov	r5, r0
 800f464:	4620      	mov	r0, r4
 800f466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f468:	4798      	blx	r3
 800f46a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800f46e:	b22d      	sxth	r5, r5
 800f470:	4601      	mov	r1, r0
 800f472:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800f476:	bf06      	itte	eq
 800f478:	4602      	moveq	r2, r0
 800f47a:	4629      	moveq	r1, r5
 800f47c:	462a      	movne	r2, r5
 800f47e:	4620      	mov	r0, r4
 800f480:	f7ff ffd6 	bl	800f430 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800f484:	bd38      	pop	{r3, r4, r5, pc}
 800f486:	bf00      	nop
 800f488:	2400e4b0 	.word	0x2400e4b0

0800f48c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 800f48c:	b530      	push	{r4, r5, lr}
 800f48e:	888b      	ldrh	r3, [r1, #4]
 800f490:	b085      	sub	sp, #20
 800f492:	4604      	mov	r4, r0
 800f494:	8583      	strh	r3, [r0, #44]	; 0x2c
 800f496:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800f49a:	b923      	cbnz	r3, 800f4a6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 800f49c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800f4a0:	b90b      	cbnz	r3, 800f4a6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 800f4a2:	f7ff ffd3 	bl	800f44c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 800f4a6:	6823      	ldr	r3, [r4, #0]
 800f4a8:	466d      	mov	r5, sp
 800f4aa:	4621      	mov	r1, r4
 800f4ac:	343c      	adds	r4, #60	; 0x3c
 800f4ae:	4628      	mov	r0, r5
 800f4b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f4b4:	4798      	blx	r3
 800f4b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f4ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f4be:	b005      	add	sp, #20
 800f4c0:	bd30      	pop	{r4, r5, pc}

0800f4c2 <_ZNK8touchgfx3Box12getSolidRectEv>:
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	8083      	strh	r3, [r0, #4]
 800f4c6:	80c3      	strh	r3, [r0, #6]
 800f4c8:	8003      	strh	r3, [r0, #0]
 800f4ca:	8043      	strh	r3, [r0, #2]
 800f4cc:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 800f4d0:	2bff      	cmp	r3, #255	; 0xff
 800f4d2:	bf01      	itttt	eq
 800f4d4:	890b      	ldrheq	r3, [r1, #8]
 800f4d6:	8083      	strheq	r3, [r0, #4]
 800f4d8:	894b      	ldrheq	r3, [r1, #10]
 800f4da:	80c3      	strheq	r3, [r0, #6]
 800f4dc:	4770      	bx	lr
	...

0800f4e0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800f4e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f4e2:	4604      	mov	r4, r0
 800f4e4:	466b      	mov	r3, sp
 800f4e6:	6808      	ldr	r0, [r1, #0]
 800f4e8:	6849      	ldr	r1, [r1, #4]
 800f4ea:	c303      	stmia	r3!, {r0, r1}
 800f4ec:	6823      	ldr	r3, [r4, #0]
 800f4ee:	4669      	mov	r1, sp
 800f4f0:	4620      	mov	r0, r4
 800f4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4f4:	4798      	blx	r3
 800f4f6:	4b08      	ldr	r3, [pc, #32]	; (800f518 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800f4fe:	b10a      	cbz	r2, 800f504 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800f500:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800f502:	b900      	cbnz	r0, 800f506 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800f504:	6898      	ldr	r0, [r3, #8]
 800f506:	6803      	ldr	r3, [r0, #0]
 800f508:	4669      	mov	r1, sp
 800f50a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800f50c:	6a1d      	ldr	r5, [r3, #32]
 800f50e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800f512:	47a8      	blx	r5
 800f514:	b003      	add	sp, #12
 800f516:	bd30      	pop	{r4, r5, pc}
 800f518:	2400e454 	.word	0x2400e454

0800f51c <_ZN8touchgfx3BoxD1Ev>:
 800f51c:	4770      	bx	lr

0800f51e <_ZN8touchgfx3BoxD0Ev>:
 800f51e:	b510      	push	{r4, lr}
 800f520:	4604      	mov	r4, r0
 800f522:	212c      	movs	r1, #44	; 0x2c
 800f524:	f00e f98b 	bl	801d83e <_ZdlPvj>
 800f528:	4620      	mov	r0, r4
 800f52a:	bd10      	pop	{r4, pc}

0800f52c <_ZNK8touchgfx3Box17invalidateContentEv>:
 800f52c:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 800f530:	b12a      	cbz	r2, 800f53e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800f532:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800f536:	b112      	cbz	r2, 800f53e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800f538:	6803      	ldr	r3, [r0, #0]
 800f53a:	695b      	ldr	r3, [r3, #20]
 800f53c:	4718      	bx	r3
 800f53e:	4770      	bx	lr

0800f540 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 800f540:	4b30      	ldr	r3, [pc, #192]	; (800f604 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 800f542:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f546:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800f548:	b08d      	sub	sp, #52	; 0x34
 800f54a:	881b      	ldrh	r3, [r3, #0]
 800f54c:	4604      	mov	r4, r0
 800f54e:	460f      	mov	r7, r1
 800f550:	4293      	cmp	r3, r2
 800f552:	d954      	bls.n	800f5fe <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 800f554:	4b2c      	ldr	r3, [pc, #176]	; (800f608 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 800f556:	6819      	ldr	r1, [r3, #0]
 800f558:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 800f55c:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 800f560:	4a2a      	ldr	r2, [pc, #168]	; (800f60c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 800f562:	6812      	ldr	r2, [r2, #0]
 800f564:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800f568:	2900      	cmp	r1, #0
 800f56a:	d048      	beq.n	800f5fe <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 800f56c:	785a      	ldrb	r2, [r3, #1]
 800f56e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800f572:	f3c2 0801 	ubfx	r8, r2, #0, #2
 800f576:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800f57a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800f57e:	4b24      	ldr	r3, [pc, #144]	; (800f610 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 800f580:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 800f584:	681a      	ldr	r2, [r3, #0]
 800f586:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
 800f58a:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 800f58e:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 800f592:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800f594:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 800f598:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 800f59c:	9107      	str	r1, [sp, #28]
 800f59e:	f88d 8020 	strb.w	r8, [sp, #32]
 800f5a2:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 800f5a6:	9609      	str	r6, [sp, #36]	; 0x24
 800f5a8:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 800f5ac:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800f5b0:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
 800f5b4:	b10b      	cbz	r3, 800f5ba <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 800f5b6:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 800f5b8:	b905      	cbnz	r5, 800f5bc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 800f5ba:	6895      	ldr	r5, [r2, #8]
 800f5bc:	ae05      	add	r6, sp, #20
 800f5be:	4621      	mov	r1, r4
 800f5c0:	4630      	mov	r0, r6
 800f5c2:	f003 fc8d 	bl	8012ee0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f5c6:	4b13      	ldr	r3, [pc, #76]	; (800f614 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 800f5c8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800f5ca:	6818      	ldr	r0, [r3, #0]
 800f5cc:	f7f3 fb20 	bl	8002c10 <_ZNK8touchgfx5Texts7getTextEt>
 800f5d0:	6823      	ldr	r3, [r4, #0]
 800f5d2:	4680      	mov	r8, r0
 800f5d4:	4620      	mov	r0, r4
 800f5d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f5d8:	4798      	blx	r3
 800f5da:	6823      	ldr	r3, [r4, #0]
 800f5dc:	4681      	mov	r9, r0
 800f5de:	4620      	mov	r0, r4
 800f5e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f5e4:	4798      	blx	r3
 800f5e6:	ab07      	add	r3, sp, #28
 800f5e8:	f8cd 8004 	str.w	r8, [sp, #4]
 800f5ec:	9300      	str	r3, [sp, #0]
 800f5ee:	463b      	mov	r3, r7
 800f5f0:	e9cd 9002 	strd	r9, r0, [sp, #8]
 800f5f4:	4628      	mov	r0, r5
 800f5f6:	e896 0006 	ldmia.w	r6, {r1, r2}
 800f5fa:	f7f3 fabb 	bl	8002b74 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800f5fe:	b00d      	add	sp, #52	; 0x34
 800f600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f604:	2400e4b0 	.word	0x2400e4b0
 800f608:	2400e4ac 	.word	0x2400e4ac
 800f60c:	2400e4b4 	.word	0x2400e4b4
 800f610:	2400e454 	.word	0x2400e454
 800f614:	2400e4b8 	.word	0x2400e4b8

0800f618 <_ZN8touchgfx5ImageD1Ev>:
 800f618:	4770      	bx	lr

0800f61a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 800f61a:	b570      	push	{r4, r5, r6, lr}
 800f61c:	880b      	ldrh	r3, [r1, #0]
 800f61e:	460d      	mov	r5, r1
 800f620:	4604      	mov	r4, r0
 800f622:	84c3      	strh	r3, [r0, #38]	; 0x26
 800f624:	4608      	mov	r0, r1
 800f626:	f005 fd0d 	bl	8015044 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800f62a:	4606      	mov	r6, r0
 800f62c:	4628      	mov	r0, r5
 800f62e:	f005 fd3d 	bl	80150ac <_ZNK8touchgfx6Bitmap9getHeightEv>
 800f632:	6823      	ldr	r3, [r4, #0]
 800f634:	4605      	mov	r5, r0
 800f636:	4631      	mov	r1, r6
 800f638:	4620      	mov	r0, r4
 800f63a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f63c:	4798      	blx	r3
 800f63e:	6823      	ldr	r3, [r4, #0]
 800f640:	4629      	mov	r1, r5
 800f642:	4620      	mov	r0, r4
 800f644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f646:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f64a:	4718      	bx	r3

0800f64c <_ZN8touchgfx5ImageD0Ev>:
 800f64c:	b510      	push	{r4, lr}
 800f64e:	4604      	mov	r4, r0
 800f650:	212c      	movs	r1, #44	; 0x2c
 800f652:	f00e f8f4 	bl	801d83e <_ZdlPvj>
 800f656:	4620      	mov	r0, r4
 800f658:	bd10      	pop	{r4, pc}

0800f65a <_ZNK8touchgfx5Image12getSolidRectEv>:
 800f65a:	b510      	push	{r4, lr}
 800f65c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800f660:	4604      	mov	r4, r0
 800f662:	2bff      	cmp	r3, #255	; 0xff
 800f664:	d006      	beq.n	800f674 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 800f666:	2300      	movs	r3, #0
 800f668:	8003      	strh	r3, [r0, #0]
 800f66a:	8043      	strh	r3, [r0, #2]
 800f66c:	8083      	strh	r3, [r0, #4]
 800f66e:	80c3      	strh	r3, [r0, #6]
 800f670:	4620      	mov	r0, r4
 800f672:	bd10      	pop	{r4, pc}
 800f674:	3126      	adds	r1, #38	; 0x26
 800f676:	f005 fd4d 	bl	8015114 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800f67a:	e7f9      	b.n	800f670 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0800f67c <_ZNK8touchgfx5Image17invalidateContentEv>:
 800f67c:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 800f680:	b12a      	cbz	r2, 800f68e <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800f682:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800f686:	b112      	cbz	r2, 800f68e <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800f688:	6803      	ldr	r3, [r0, #0]
 800f68a:	695b      	ldr	r3, [r3, #20]
 800f68c:	4718      	bx	r3
 800f68e:	4770      	bx	lr

0800f690 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 800f690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f694:	4604      	mov	r4, r0
 800f696:	b088      	sub	sp, #32
 800f698:	2500      	movs	r5, #0
 800f69a:	460f      	mov	r7, r1
 800f69c:	f854 3b26 	ldr.w	r3, [r4], #38
 800f6a0:	a904      	add	r1, sp, #16
 800f6a2:	4606      	mov	r6, r0
 800f6a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6a6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f6aa:	4798      	blx	r3
 800f6ac:	4620      	mov	r0, r4
 800f6ae:	f005 fcc9 	bl	8015044 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800f6b2:	4680      	mov	r8, r0
 800f6b4:	4620      	mov	r0, r4
 800f6b6:	f005 fcf9 	bl	80150ac <_ZNK8touchgfx6Bitmap9getHeightEv>
 800f6ba:	9506      	str	r5, [sp, #24]
 800f6bc:	ad06      	add	r5, sp, #24
 800f6be:	f8ad 001e 	strh.w	r0, [sp, #30]
 800f6c2:	4639      	mov	r1, r7
 800f6c4:	f8ad 801c 	strh.w	r8, [sp, #28]
 800f6c8:	4628      	mov	r0, r5
 800f6ca:	f7fc ff63 	bl	800c594 <_ZN8touchgfx4RectaNERKS0_>
 800f6ce:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	dd19      	ble.n	800f70a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800f6d6:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	dd15      	ble.n	800f70a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800f6de:	4b0c      	ldr	r3, [pc, #48]	; (800f710 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800f6e6:	b10a      	cbz	r2, 800f6ec <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 800f6e8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800f6ea:	b900      	cbnz	r0, 800f6ee <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 800f6ec:	6898      	ldr	r0, [r3, #8]
 800f6ee:	2701      	movs	r7, #1
 800f6f0:	6801      	ldr	r1, [r0, #0]
 800f6f2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800f6f6:	9702      	str	r7, [sp, #8]
 800f6f8:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 800f6fc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800f700:	e9cd 5600 	strd	r5, r6, [sp]
 800f704:	688d      	ldr	r5, [r1, #8]
 800f706:	4621      	mov	r1, r4
 800f708:	47a8      	blx	r5
 800f70a:	b008      	add	sp, #32
 800f70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f710:	2400e454 	.word	0x2400e454

0800f714 <_ZN8touchgfx7OutlineD1Ev>:
 800f714:	4770      	bx	lr

0800f716 <_ZN8touchgfx7OutlineD0Ev>:
 800f716:	b510      	push	{r4, lr}
 800f718:	4604      	mov	r4, r0
 800f71a:	2130      	movs	r1, #48	; 0x30
 800f71c:	f00e f88f 	bl	801d83e <_ZdlPvj>
 800f720:	4620      	mov	r0, r4
 800f722:	bd10      	pop	{r4, pc}

0800f724 <_ZN8touchgfx7Outline5resetEv>:
 800f724:	b510      	push	{r4, lr}
 800f726:	4604      	mov	r4, r0
 800f728:	f000 fe86 	bl	8010438 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 800f72c:	60e0      	str	r0, [r4, #12]
 800f72e:	f000 fe89 	bl	8010444 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 800f732:	68e3      	ldr	r3, [r4, #12]
 800f734:	08c0      	lsrs	r0, r0, #3
 800f736:	2200      	movs	r2, #0
 800f738:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800f73c:	6123      	str	r3, [r4, #16]
 800f73e:	3801      	subs	r0, #1
 800f740:	60a2      	str	r2, [r4, #8]
 800f742:	6060      	str	r0, [r4, #4]
 800f744:	8019      	strh	r1, [r3, #0]
 800f746:	8059      	strh	r1, [r3, #2]
 800f748:	809a      	strh	r2, [r3, #4]
 800f74a:	80da      	strh	r2, [r3, #6]
 800f74c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f74e:	f023 0301 	bic.w	r3, r3, #1
 800f752:	f043 0302 	orr.w	r3, r3, #2
 800f756:	6263      	str	r3, [r4, #36]	; 0x24
 800f758:	bd10      	pop	{r4, pc}
	...

0800f75c <_ZN8touchgfx7OutlineC1Ev>:
 800f75c:	4b0a      	ldr	r3, [pc, #40]	; (800f788 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 800f75e:	b510      	push	{r4, lr}
 800f760:	6003      	str	r3, [r0, #0]
 800f762:	2300      	movs	r3, #0
 800f764:	4604      	mov	r4, r0
 800f766:	6243      	str	r3, [r0, #36]	; 0x24
 800f768:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800f76c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f770:	e9c0 3305 	strd	r3, r3, [r0, #20]
 800f774:	e9c0 3307 	strd	r3, r3, [r0, #28]
 800f778:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f77c:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 800f780:	f7ff ffd0 	bl	800f724 <_ZN8touchgfx7Outline5resetEv>
 800f784:	4620      	mov	r0, r4
 800f786:	bd10      	pop	{r4, pc}
 800f788:	08020934 	.word	0x08020934

0800f78c <_ZN8touchgfx7Outline10renderLineEiiii>:
 800f78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f790:	b093      	sub	sp, #76	; 0x4c
 800f792:	1156      	asrs	r6, r2, #5
 800f794:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800f796:	9305      	str	r3, [sp, #20]
 800f798:	1153      	asrs	r3, r2, #5
 800f79a:	f004 051f 	and.w	r5, r4, #31
 800f79e:	9303      	str	r3, [sp, #12]
 800f7a0:	1163      	asrs	r3, r4, #5
 800f7a2:	9504      	str	r5, [sp, #16]
 800f7a4:	1165      	asrs	r5, r4, #5
 800f7a6:	9306      	str	r3, [sp, #24]
 800f7a8:	f002 031f 	and.w	r3, r2, #31
 800f7ac:	42ae      	cmp	r6, r5
 800f7ae:	f040 80f4 	bne.w	800f99a <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 800f7b2:	9c04      	ldr	r4, [sp, #16]
 800f7b4:	9a05      	ldr	r2, [sp, #20]
 800f7b6:	42a3      	cmp	r3, r4
 800f7b8:	ea4f 1e62 	mov.w	lr, r2, asr #5
 800f7bc:	6902      	ldr	r2, [r0, #16]
 800f7be:	d125      	bne.n	800f80c <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 800f7c0:	f9b2 3000 	ldrsh.w	r3, [r2]
 800f7c4:	459e      	cmp	lr, r3
 800f7c6:	d103      	bne.n	800f7d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 800f7c8:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800f7cc:	429e      	cmp	r6, r3
 800f7ce:	d035      	beq.n	800f83c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 800f7d0:	88d1      	ldrh	r1, [r2, #6]
 800f7d2:	8893      	ldrh	r3, [r2, #4]
 800f7d4:	430b      	orrs	r3, r1
 800f7d6:	d010      	beq.n	800f7fa <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 800f7d8:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	db0c      	blt.n	800f7fa <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 800f7e0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800f7e2:	428b      	cmp	r3, r1
 800f7e4:	da09      	bge.n	800f7fa <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 800f7e6:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 800f7ea:	428b      	cmp	r3, r1
 800f7ec:	f103 0301 	add.w	r3, r3, #1
 800f7f0:	bf38      	it	cc
 800f7f2:	3208      	addcc	r2, #8
 800f7f4:	6083      	str	r3, [r0, #8]
 800f7f6:	bf38      	it	cc
 800f7f8:	6102      	strcc	r2, [r0, #16]
 800f7fa:	6903      	ldr	r3, [r0, #16]
 800f7fc:	9a03      	ldr	r2, [sp, #12]
 800f7fe:	f8a3 e000 	strh.w	lr, [r3]
 800f802:	805a      	strh	r2, [r3, #2]
 800f804:	2200      	movs	r2, #0
 800f806:	809a      	strh	r2, [r3, #4]
 800f808:	80da      	strh	r2, [r3, #6]
 800f80a:	e017      	b.n	800f83c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 800f80c:	9c05      	ldr	r4, [sp, #20]
 800f80e:	114e      	asrs	r6, r1, #5
 800f810:	f001 0c1f 	and.w	ip, r1, #31
 800f814:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 800f818:	f004 041f 	and.w	r4, r4, #31
 800f81c:	4576      	cmp	r6, lr
 800f81e:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 800f822:	9402      	str	r4, [sp, #8]
 800f824:	9c04      	ldr	r4, [sp, #16]
 800f826:	eba4 0403 	sub.w	r4, r4, r3
 800f82a:	d10a      	bne.n	800f842 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 800f82c:	9b02      	ldr	r3, [sp, #8]
 800f82e:	44a0      	add	r8, r4
 800f830:	449c      	add	ip, r3
 800f832:	f8a2 8004 	strh.w	r8, [r2, #4]
 800f836:	fb04 a40c 	mla	r4, r4, ip, sl
 800f83a:	80d4      	strh	r4, [r2, #6]
 800f83c:	b013      	add	sp, #76	; 0x4c
 800f83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f842:	9d05      	ldr	r5, [sp, #20]
 800f844:	1a69      	subs	r1, r5, r1
 800f846:	bf51      	iteee	pl
 800f848:	f1cc 0520 	rsbpl	r5, ip, #32
 800f84c:	fb04 f40c 	mulmi.w	r4, r4, ip
 800f850:	4249      	negmi	r1, r1
 800f852:	2500      	movmi	r5, #0
 800f854:	bf5d      	ittte	pl
 800f856:	436c      	mulpl	r4, r5
 800f858:	2520      	movpl	r5, #32
 800f85a:	f04f 0901 	movpl.w	r9, #1
 800f85e:	f04f 39ff 	movmi.w	r9, #4294967295
 800f862:	9501      	str	r5, [sp, #4]
 800f864:	9f01      	ldr	r7, [sp, #4]
 800f866:	444e      	add	r6, r9
 800f868:	fb94 f5f1 	sdiv	r5, r4, r1
 800f86c:	fb01 4415 	mls	r4, r1, r5, r4
 800f870:	44bc      	add	ip, r7
 800f872:	2c00      	cmp	r4, #0
 800f874:	bfbc      	itt	lt
 800f876:	f105 35ff 	addlt.w	r5, r5, #4294967295
 800f87a:	1864      	addlt	r4, r4, r1
 800f87c:	44a8      	add	r8, r5
 800f87e:	fb05 ac0c 	mla	ip, r5, ip, sl
 800f882:	f8a2 8004 	strh.w	r8, [r2, #4]
 800f886:	f8a2 c006 	strh.w	ip, [r2, #6]
 800f88a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 800f88e:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 800f892:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 800f896:	ea58 0202 	orrs.w	r2, r8, r2
 800f89a:	d011      	beq.n	800f8c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 800f89c:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 800f8a0:	f1b8 0f00 	cmp.w	r8, #0
 800f8a4:	db0c      	blt.n	800f8c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 800f8a6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800f8a8:	4590      	cmp	r8, r2
 800f8aa:	da09      	bge.n	800f8c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 800f8ac:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 800f8b0:	4590      	cmp	r8, r2
 800f8b2:	bf3c      	itt	cc
 800f8b4:	f10c 0208 	addcc.w	r2, ip, #8
 800f8b8:	6102      	strcc	r2, [r0, #16]
 800f8ba:	f108 0201 	add.w	r2, r8, #1
 800f8be:	6082      	str	r2, [r0, #8]
 800f8c0:	f8d0 c010 	ldr.w	ip, [r0, #16]
 800f8c4:	2700      	movs	r7, #0
 800f8c6:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800f8ca:	45b6      	cmp	lr, r6
 800f8cc:	f8ac 6000 	strh.w	r6, [ip]
 800f8d0:	442b      	add	r3, r5
 800f8d2:	f8ac 2002 	strh.w	r2, [ip, #2]
 800f8d6:	f8ac 7004 	strh.w	r7, [ip, #4]
 800f8da:	f8ac 7006 	strh.w	r7, [ip, #6]
 800f8de:	d04b      	beq.n	800f978 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 800f8e0:	9f04      	ldr	r7, [sp, #16]
 800f8e2:	1a64      	subs	r4, r4, r1
 800f8e4:	f04f 0a00 	mov.w	sl, #0
 800f8e8:	1aff      	subs	r7, r7, r3
 800f8ea:	443d      	add	r5, r7
 800f8ec:	016d      	lsls	r5, r5, #5
 800f8ee:	fb95 f8f1 	sdiv	r8, r5, r1
 800f8f2:	fb01 5518 	mls	r5, r1, r8, r5
 800f8f6:	2d00      	cmp	r5, #0
 800f8f8:	bfbc      	itt	lt
 800f8fa:	f108 38ff 	addlt.w	r8, r8, #4294967295
 800f8fe:	186d      	addlt	r5, r5, r1
 800f900:	f108 0701 	add.w	r7, r8, #1
 800f904:	9703      	str	r7, [sp, #12]
 800f906:	f8d0 c010 	ldr.w	ip, [r0, #16]
 800f90a:	1964      	adds	r4, r4, r5
 800f90c:	444e      	add	r6, r9
 800f90e:	bf54      	ite	pl
 800f910:	9f03      	ldrpl	r7, [sp, #12]
 800f912:	4647      	movmi	r7, r8
 800f914:	f8bc b004 	ldrh.w	fp, [ip, #4]
 800f918:	bf58      	it	pl
 800f91a:	1a64      	subpl	r4, r4, r1
 800f91c:	443b      	add	r3, r7
 800f91e:	44bb      	add	fp, r7
 800f920:	f8ac b004 	strh.w	fp, [ip, #4]
 800f924:	f8bc b006 	ldrh.w	fp, [ip, #6]
 800f928:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 800f92c:	f8ac b006 	strh.w	fp, [ip, #6]
 800f930:	f8d0 c010 	ldr.w	ip, [r0, #16]
 800f934:	f8bc b006 	ldrh.w	fp, [ip, #6]
 800f938:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 800f93c:	ea5b 0707 	orrs.w	r7, fp, r7
 800f940:	d011      	beq.n	800f966 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 800f942:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 800f946:	f1bb 0f00 	cmp.w	fp, #0
 800f94a:	db0c      	blt.n	800f966 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 800f94c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 800f94e:	45bb      	cmp	fp, r7
 800f950:	da09      	bge.n	800f966 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 800f952:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 800f956:	45bb      	cmp	fp, r7
 800f958:	bf3c      	itt	cc
 800f95a:	f10c 0708 	addcc.w	r7, ip, #8
 800f95e:	6107      	strcc	r7, [r0, #16]
 800f960:	f10b 0701 	add.w	r7, fp, #1
 800f964:	6087      	str	r7, [r0, #8]
 800f966:	6907      	ldr	r7, [r0, #16]
 800f968:	45b6      	cmp	lr, r6
 800f96a:	803e      	strh	r6, [r7, #0]
 800f96c:	807a      	strh	r2, [r7, #2]
 800f96e:	f8a7 a004 	strh.w	sl, [r7, #4]
 800f972:	f8a7 a006 	strh.w	sl, [r7, #6]
 800f976:	d1c6      	bne.n	800f906 <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 800f978:	9a04      	ldr	r2, [sp, #16]
 800f97a:	1ad3      	subs	r3, r2, r3
 800f97c:	6902      	ldr	r2, [r0, #16]
 800f97e:	8891      	ldrh	r1, [r2, #4]
 800f980:	88d6      	ldrh	r6, [r2, #6]
 800f982:	4419      	add	r1, r3
 800f984:	8091      	strh	r1, [r2, #4]
 800f986:	9902      	ldr	r1, [sp, #8]
 800f988:	f101 0c20 	add.w	ip, r1, #32
 800f98c:	9901      	ldr	r1, [sp, #4]
 800f98e:	ebac 0c01 	sub.w	ip, ip, r1
 800f992:	fb03 630c 	mla	r3, r3, ip, r6
 800f996:	80d3      	strh	r3, [r2, #6]
 800f998:	e750      	b.n	800f83c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 800f99a:	9d05      	ldr	r5, [sp, #20]
 800f99c:	1aa2      	subs	r2, r4, r2
 800f99e:	eba5 0501 	sub.w	r5, r5, r1
 800f9a2:	9202      	str	r2, [sp, #8]
 800f9a4:	9508      	str	r5, [sp, #32]
 800f9a6:	f140 8128 	bpl.w	800fbfa <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 800f9aa:	9a03      	ldr	r2, [sp, #12]
 800f9ac:	2a00      	cmp	r2, #0
 800f9ae:	f6ff af45 	blt.w	800f83c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 800f9b2:	9a02      	ldr	r2, [sp, #8]
 800f9b4:	f04f 34ff 	mov.w	r4, #4294967295
 800f9b8:	4252      	negs	r2, r2
 800f9ba:	940b      	str	r4, [sp, #44]	; 0x2c
 800f9bc:	2400      	movs	r4, #0
 800f9be:	9202      	str	r2, [sp, #8]
 800f9c0:	9a06      	ldr	r2, [sp, #24]
 800f9c2:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 800f9c6:	9206      	str	r2, [sp, #24]
 800f9c8:	462a      	mov	r2, r5
 800f9ca:	435a      	muls	r2, r3
 800f9cc:	9401      	str	r4, [sp, #4]
 800f9ce:	9c02      	ldr	r4, [sp, #8]
 800f9d0:	9d02      	ldr	r5, [sp, #8]
 800f9d2:	fb92 f4f4 	sdiv	r4, r2, r4
 800f9d6:	fb05 2214 	mls	r2, r5, r4, r2
 800f9da:	2a00      	cmp	r2, #0
 800f9dc:	9207      	str	r2, [sp, #28]
 800f9de:	bfbc      	itt	lt
 800f9e0:	1952      	addlt	r2, r2, r5
 800f9e2:	f104 34ff 	addlt.w	r4, r4, #4294967295
 800f9e6:	6905      	ldr	r5, [r0, #16]
 800f9e8:	bfb8      	it	lt
 800f9ea:	9207      	strlt	r2, [sp, #28]
 800f9ec:	eb04 0901 	add.w	r9, r4, r1
 800f9f0:	9a01      	ldr	r2, [sp, #4]
 800f9f2:	ea4f 1669 	mov.w	r6, r9, asr #5
 800f9f6:	429a      	cmp	r2, r3
 800f9f8:	f040 8111 	bne.w	800fc1e <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 800f9fc:	f9b5 3000 	ldrsh.w	r3, [r5]
 800fa00:	429e      	cmp	r6, r3
 800fa02:	d104      	bne.n	800fa0e <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 800fa04:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800fa08:	9a03      	ldr	r2, [sp, #12]
 800fa0a:	429a      	cmp	r2, r3
 800fa0c:	d01b      	beq.n	800fa46 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 800fa0e:	88ea      	ldrh	r2, [r5, #6]
 800fa10:	88ab      	ldrh	r3, [r5, #4]
 800fa12:	4313      	orrs	r3, r2
 800fa14:	d010      	beq.n	800fa38 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 800fa16:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800fa1a:	2a00      	cmp	r2, #0
 800fa1c:	db0c      	blt.n	800fa38 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 800fa1e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800fa20:	429a      	cmp	r2, r3
 800fa22:	da09      	bge.n	800fa38 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 800fa24:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800fa28:	429a      	cmp	r2, r3
 800fa2a:	f102 0201 	add.w	r2, r2, #1
 800fa2e:	bf38      	it	cc
 800fa30:	3508      	addcc	r5, #8
 800fa32:	6082      	str	r2, [r0, #8]
 800fa34:	bf38      	it	cc
 800fa36:	6105      	strcc	r5, [r0, #16]
 800fa38:	6903      	ldr	r3, [r0, #16]
 800fa3a:	9a03      	ldr	r2, [sp, #12]
 800fa3c:	801e      	strh	r6, [r3, #0]
 800fa3e:	805a      	strh	r2, [r3, #2]
 800fa40:	2200      	movs	r2, #0
 800fa42:	809a      	strh	r2, [r3, #4]
 800fa44:	80da      	strh	r2, [r3, #6]
 800fa46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa48:	9a03      	ldr	r2, [sp, #12]
 800fa4a:	6901      	ldr	r1, [r0, #16]
 800fa4c:	441a      	add	r2, r3
 800fa4e:	f9b1 3000 	ldrsh.w	r3, [r1]
 800fa52:	42b3      	cmp	r3, r6
 800fa54:	d103      	bne.n	800fa5e <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 800fa56:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800fa5a:	429a      	cmp	r2, r3
 800fa5c:	d01a      	beq.n	800fa94 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 800fa5e:	88cc      	ldrh	r4, [r1, #6]
 800fa60:	888b      	ldrh	r3, [r1, #4]
 800fa62:	4323      	orrs	r3, r4
 800fa64:	d010      	beq.n	800fa88 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 800fa66:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 800fa6a:	2c00      	cmp	r4, #0
 800fa6c:	db0c      	blt.n	800fa88 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 800fa6e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800fa70:	429c      	cmp	r4, r3
 800fa72:	da09      	bge.n	800fa88 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 800fa74:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 800fa78:	429c      	cmp	r4, r3
 800fa7a:	f104 0401 	add.w	r4, r4, #1
 800fa7e:	bf38      	it	cc
 800fa80:	3108      	addcc	r1, #8
 800fa82:	6084      	str	r4, [r0, #8]
 800fa84:	bf38      	it	cc
 800fa86:	6101      	strcc	r1, [r0, #16]
 800fa88:	6903      	ldr	r3, [r0, #16]
 800fa8a:	2100      	movs	r1, #0
 800fa8c:	801e      	strh	r6, [r3, #0]
 800fa8e:	805a      	strh	r2, [r3, #2]
 800fa90:	8099      	strh	r1, [r3, #4]
 800fa92:	80d9      	strh	r1, [r3, #6]
 800fa94:	9b06      	ldr	r3, [sp, #24]
 800fa96:	4293      	cmp	r3, r2
 800fa98:	f000 8082 	beq.w	800fba0 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 800fa9c:	9b08      	ldr	r3, [sp, #32]
 800fa9e:	9902      	ldr	r1, [sp, #8]
 800faa0:	015b      	lsls	r3, r3, #5
 800faa2:	9c02      	ldr	r4, [sp, #8]
 800faa4:	fb93 f1f1 	sdiv	r1, r3, r1
 800faa8:	fb04 3311 	mls	r3, r4, r1, r3
 800faac:	9103      	str	r1, [sp, #12]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	9308      	str	r3, [sp, #32]
 800fab2:	da04      	bge.n	800fabe <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 800fab4:	1e4b      	subs	r3, r1, #1
 800fab6:	9303      	str	r3, [sp, #12]
 800fab8:	9b08      	ldr	r3, [sp, #32]
 800faba:	4423      	add	r3, r4
 800fabc:	9308      	str	r3, [sp, #32]
 800fabe:	9b07      	ldr	r3, [sp, #28]
 800fac0:	464f      	mov	r7, r9
 800fac2:	9902      	ldr	r1, [sp, #8]
 800fac4:	2600      	movs	r6, #0
 800fac6:	1a5b      	subs	r3, r3, r1
 800fac8:	9307      	str	r3, [sp, #28]
 800faca:	9b01      	ldr	r3, [sp, #4]
 800facc:	f1c3 0320 	rsb	r3, r3, #32
 800fad0:	930e      	str	r3, [sp, #56]	; 0x38
 800fad2:	990e      	ldr	r1, [sp, #56]	; 0x38
 800fad4:	9b01      	ldr	r3, [sp, #4]
 800fad6:	1a5b      	subs	r3, r3, r1
 800fad8:	930a      	str	r3, [sp, #40]	; 0x28
 800fada:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 800fade:	185b      	adds	r3, r3, r1
 800fae0:	bf58      	it	pl
 800fae2:	9902      	ldrpl	r1, [sp, #8]
 800fae4:	9307      	str	r3, [sp, #28]
 800fae6:	bf57      	itett	pl
 800fae8:	1a5b      	subpl	r3, r3, r1
 800faea:	9903      	ldrmi	r1, [sp, #12]
 800faec:	9307      	strpl	r3, [sp, #28]
 800faee:	9b03      	ldrpl	r3, [sp, #12]
 800faf0:	bf58      	it	pl
 800faf2:	1c59      	addpl	r1, r3, #1
 800faf4:	2a00      	cmp	r2, #0
 800faf6:	4489      	add	r9, r1
 800faf8:	ea4f 1a69 	mov.w	sl, r9, asr #5
 800fafc:	db2e      	blt.n	800fb5c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 800fafe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800fb00:	4293      	cmp	r3, r2
 800fb02:	dd2b      	ble.n	800fb5c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 800fb04:	9c01      	ldr	r4, [sp, #4]
 800fb06:	6905      	ldr	r5, [r0, #16]
 800fb08:	46a0      	mov	r8, r4
 800fb0a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800fb0c:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 800fb10:	45a0      	cmp	r8, r4
 800fb12:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 800fb16:	f040 814c 	bne.w	800fdb2 <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 800fb1a:	f9b5 1000 	ldrsh.w	r1, [r5]
 800fb1e:	4551      	cmp	r1, sl
 800fb20:	d103      	bne.n	800fb2a <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 800fb22:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 800fb26:	4291      	cmp	r1, r2
 800fb28:	d018      	beq.n	800fb5c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 800fb2a:	ea5c 010e 	orrs.w	r1, ip, lr
 800fb2e:	d00f      	beq.n	800fb50 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 800fb30:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 800fb34:	2900      	cmp	r1, #0
 800fb36:	db0b      	blt.n	800fb50 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 800fb38:	428b      	cmp	r3, r1
 800fb3a:	dd09      	ble.n	800fb50 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 800fb3c:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 800fb40:	4299      	cmp	r1, r3
 800fb42:	f101 0101 	add.w	r1, r1, #1
 800fb46:	bf38      	it	cc
 800fb48:	3508      	addcc	r5, #8
 800fb4a:	6081      	str	r1, [r0, #8]
 800fb4c:	bf38      	it	cc
 800fb4e:	6105      	strcc	r5, [r0, #16]
 800fb50:	6903      	ldr	r3, [r0, #16]
 800fb52:	f8a3 a000 	strh.w	sl, [r3]
 800fb56:	805a      	strh	r2, [r3, #2]
 800fb58:	809e      	strh	r6, [r3, #4]
 800fb5a:	80de      	strh	r6, [r3, #6]
 800fb5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb5e:	6901      	ldr	r1, [r0, #16]
 800fb60:	441a      	add	r2, r3
 800fb62:	88cc      	ldrh	r4, [r1, #6]
 800fb64:	888b      	ldrh	r3, [r1, #4]
 800fb66:	4323      	orrs	r3, r4
 800fb68:	d010      	beq.n	800fb8c <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 800fb6a:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 800fb6e:	2c00      	cmp	r4, #0
 800fb70:	db0c      	blt.n	800fb8c <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 800fb72:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800fb74:	429c      	cmp	r4, r3
 800fb76:	da09      	bge.n	800fb8c <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 800fb78:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 800fb7c:	429c      	cmp	r4, r3
 800fb7e:	f104 0401 	add.w	r4, r4, #1
 800fb82:	bf38      	it	cc
 800fb84:	3108      	addcc	r1, #8
 800fb86:	6084      	str	r4, [r0, #8]
 800fb88:	bf38      	it	cc
 800fb8a:	6101      	strcc	r1, [r0, #16]
 800fb8c:	6903      	ldr	r3, [r0, #16]
 800fb8e:	464f      	mov	r7, r9
 800fb90:	f8a3 a000 	strh.w	sl, [r3]
 800fb94:	805a      	strh	r2, [r3, #2]
 800fb96:	809e      	strh	r6, [r3, #4]
 800fb98:	80de      	strh	r6, [r3, #6]
 800fb9a:	9b06      	ldr	r3, [sp, #24]
 800fb9c:	4293      	cmp	r3, r2
 800fb9e:	d19c      	bne.n	800fada <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 800fba0:	9b01      	ldr	r3, [sp, #4]
 800fba2:	6907      	ldr	r7, [r0, #16]
 800fba4:	f1c3 0620 	rsb	r6, r3, #32
 800fba8:	9b05      	ldr	r3, [sp, #20]
 800fbaa:	ea4f 1e63 	mov.w	lr, r3, asr #5
 800fbae:	9b04      	ldr	r3, [sp, #16]
 800fbb0:	429e      	cmp	r6, r3
 800fbb2:	f040 81c7 	bne.w	800ff44 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 800fbb6:	f9b7 3000 	ldrsh.w	r3, [r7]
 800fbba:	459e      	cmp	lr, r3
 800fbbc:	d104      	bne.n	800fbc8 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 800fbbe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fbc2:	429a      	cmp	r2, r3
 800fbc4:	f43f ae3a 	beq.w	800f83c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 800fbc8:	88f9      	ldrh	r1, [r7, #6]
 800fbca:	88bb      	ldrh	r3, [r7, #4]
 800fbcc:	430b      	orrs	r3, r1
 800fbce:	d010      	beq.n	800fbf2 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 800fbd0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	db0c      	blt.n	800fbf2 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 800fbd8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800fbda:	428b      	cmp	r3, r1
 800fbdc:	da09      	bge.n	800fbf2 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 800fbde:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 800fbe2:	428b      	cmp	r3, r1
 800fbe4:	f103 0301 	add.w	r3, r3, #1
 800fbe8:	bf38      	it	cc
 800fbea:	3708      	addcc	r7, #8
 800fbec:	6083      	str	r3, [r0, #8]
 800fbee:	bf38      	it	cc
 800fbf0:	6107      	strcc	r7, [r0, #16]
 800fbf2:	6903      	ldr	r3, [r0, #16]
 800fbf4:	f8a3 e000 	strh.w	lr, [r3]
 800fbf8:	e603      	b.n	800f802 <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 800fbfa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800fbfc:	9c03      	ldr	r4, [sp, #12]
 800fbfe:	42a2      	cmp	r2, r4
 800fc00:	f6ff ae1c 	blt.w	800f83c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 800fc04:	9c06      	ldr	r4, [sp, #24]
 800fc06:	42a2      	cmp	r2, r4
 800fc08:	9c08      	ldr	r4, [sp, #32]
 800fc0a:	bfbc      	itt	lt
 800fc0c:	3201      	addlt	r2, #1
 800fc0e:	9206      	strlt	r2, [sp, #24]
 800fc10:	f1c3 0220 	rsb	r2, r3, #32
 800fc14:	4362      	muls	r2, r4
 800fc16:	2401      	movs	r4, #1
 800fc18:	940b      	str	r4, [sp, #44]	; 0x2c
 800fc1a:	2420      	movs	r4, #32
 800fc1c:	e6d6      	b.n	800f9cc <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 800fc1e:	ea4f 1861 	mov.w	r8, r1, asr #5
 800fc22:	f009 021f 	and.w	r2, r9, #31
 800fc26:	f001 011f 	and.w	r1, r1, #31
 800fc2a:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 800fc2e:	920c      	str	r2, [sp, #48]	; 0x30
 800fc30:	45b0      	cmp	r8, r6
 800fc32:	9a01      	ldr	r2, [sp, #4]
 800fc34:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 800fc38:	eba2 0203 	sub.w	r2, r2, r3
 800fc3c:	d108      	bne.n	800fc50 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 800fc3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fc40:	4496      	add	lr, r2
 800fc42:	4419      	add	r1, r3
 800fc44:	f8a5 e004 	strh.w	lr, [r5, #4]
 800fc48:	fb02 a101 	mla	r1, r2, r1, sl
 800fc4c:	80e9      	strh	r1, [r5, #6]
 800fc4e:	e6fa      	b.n	800fa46 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 800fc50:	2c00      	cmp	r4, #0
 800fc52:	f2c0 80a7 	blt.w	800fda4 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 800fc56:	2701      	movs	r7, #1
 800fc58:	f1c1 0c20 	rsb	ip, r1, #32
 800fc5c:	970a      	str	r7, [sp, #40]	; 0x28
 800fc5e:	2720      	movs	r7, #32
 800fc60:	fb02 f20c 	mul.w	r2, r2, ip
 800fc64:	9709      	str	r7, [sp, #36]	; 0x24
 800fc66:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800fc68:	fb92 fcf4 	sdiv	ip, r2, r4
 800fc6c:	fb04 221c 	mls	r2, r4, ip, r2
 800fc70:	4439      	add	r1, r7
 800fc72:	2a00      	cmp	r2, #0
 800fc74:	bfbc      	itt	lt
 800fc76:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 800fc7a:	1912      	addlt	r2, r2, r4
 800fc7c:	fb0c a101 	mla	r1, ip, r1, sl
 800fc80:	44e6      	add	lr, ip
 800fc82:	80e9      	strh	r1, [r5, #6]
 800fc84:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fc86:	f8a5 e004 	strh.w	lr, [r5, #4]
 800fc8a:	eb08 0501 	add.w	r5, r8, r1
 800fc8e:	6901      	ldr	r1, [r0, #16]
 800fc90:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 800fc94:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 800fc98:	ea58 070e 	orrs.w	r7, r8, lr
 800fc9c:	d010      	beq.n	800fcc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 800fc9e:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 800fca2:	f1be 0f00 	cmp.w	lr, #0
 800fca6:	db0b      	blt.n	800fcc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 800fca8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 800fcaa:	45be      	cmp	lr, r7
 800fcac:	da08      	bge.n	800fcc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 800fcae:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 800fcb2:	45be      	cmp	lr, r7
 800fcb4:	bf3c      	itt	cc
 800fcb6:	3108      	addcc	r1, #8
 800fcb8:	6101      	strcc	r1, [r0, #16]
 800fcba:	f10e 0101 	add.w	r1, lr, #1
 800fcbe:	6081      	str	r1, [r0, #8]
 800fcc0:	6901      	ldr	r1, [r0, #16]
 800fcc2:	f04f 0e00 	mov.w	lr, #0
 800fcc6:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 800fcca:	42ae      	cmp	r6, r5
 800fccc:	800d      	strh	r5, [r1, #0]
 800fcce:	4463      	add	r3, ip
 800fcd0:	f8a1 8002 	strh.w	r8, [r1, #2]
 800fcd4:	f8a1 e004 	strh.w	lr, [r1, #4]
 800fcd8:	f8a1 e006 	strh.w	lr, [r1, #6]
 800fcdc:	d053      	beq.n	800fd86 <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 800fcde:	9901      	ldr	r1, [sp, #4]
 800fce0:	1b12      	subs	r2, r2, r4
 800fce2:	1ac9      	subs	r1, r1, r3
 800fce4:	4461      	add	r1, ip
 800fce6:	0149      	lsls	r1, r1, #5
 800fce8:	fb91 fef4 	sdiv	lr, r1, r4
 800fcec:	fb04 111e 	mls	r1, r4, lr, r1
 800fcf0:	2900      	cmp	r1, #0
 800fcf2:	bfbc      	itt	lt
 800fcf4:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 800fcf8:	1909      	addlt	r1, r1, r4
 800fcfa:	f10e 0701 	add.w	r7, lr, #1
 800fcfe:	970d      	str	r7, [sp, #52]	; 0x34
 800fd00:	f8d0 a010 	ldr.w	sl, [r0, #16]
 800fd04:	1852      	adds	r2, r2, r1
 800fd06:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800fd08:	bf54      	ite	pl
 800fd0a:	f8dd c034 	ldrpl.w	ip, [sp, #52]	; 0x34
 800fd0e:	46f4      	movmi	ip, lr
 800fd10:	f8ba b004 	ldrh.w	fp, [sl, #4]
 800fd14:	bf58      	it	pl
 800fd16:	1b12      	subpl	r2, r2, r4
 800fd18:	4463      	add	r3, ip
 800fd1a:	443d      	add	r5, r7
 800fd1c:	44e3      	add	fp, ip
 800fd1e:	f8aa b004 	strh.w	fp, [sl, #4]
 800fd22:	f8ba b006 	ldrh.w	fp, [sl, #6]
 800fd26:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 800fd2a:	f8aa b006 	strh.w	fp, [sl, #6]
 800fd2e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 800fd32:	f8bc b006 	ldrh.w	fp, [ip, #6]
 800fd36:	f8bc a004 	ldrh.w	sl, [ip, #4]
 800fd3a:	ea5b 070a 	orrs.w	r7, fp, sl
 800fd3e:	d014      	beq.n	800fd6a <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 800fd40:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 800fd44:	f1ba 0f00 	cmp.w	sl, #0
 800fd48:	db0f      	blt.n	800fd6a <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 800fd4a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 800fd4c:	45ba      	cmp	sl, r7
 800fd4e:	da0c      	bge.n	800fd6a <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 800fd50:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 800fd54:	45ba      	cmp	sl, r7
 800fd56:	f10a 0a01 	add.w	sl, sl, #1
 800fd5a:	bf38      	it	cc
 800fd5c:	f10c 0c08 	addcc.w	ip, ip, #8
 800fd60:	f8c0 a008 	str.w	sl, [r0, #8]
 800fd64:	bf38      	it	cc
 800fd66:	f8c0 c010 	strcc.w	ip, [r0, #16]
 800fd6a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 800fd6e:	f04f 0700 	mov.w	r7, #0
 800fd72:	42ae      	cmp	r6, r5
 800fd74:	f8ac 5000 	strh.w	r5, [ip]
 800fd78:	f8ac 8002 	strh.w	r8, [ip, #2]
 800fd7c:	f8ac 7004 	strh.w	r7, [ip, #4]
 800fd80:	f8ac 7006 	strh.w	r7, [ip, #6]
 800fd84:	d1bc      	bne.n	800fd00 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 800fd86:	6904      	ldr	r4, [r0, #16]
 800fd88:	9a01      	ldr	r2, [sp, #4]
 800fd8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fd8c:	1ad3      	subs	r3, r2, r3
 800fd8e:	88a2      	ldrh	r2, [r4, #4]
 800fd90:	3120      	adds	r1, #32
 800fd92:	441a      	add	r2, r3
 800fd94:	80a2      	strh	r2, [r4, #4]
 800fd96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd98:	1a89      	subs	r1, r1, r2
 800fd9a:	88e2      	ldrh	r2, [r4, #6]
 800fd9c:	fb03 2301 	mla	r3, r3, r1, r2
 800fda0:	80e3      	strh	r3, [r4, #6]
 800fda2:	e650      	b.n	800fa46 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 800fda4:	f04f 37ff 	mov.w	r7, #4294967295
 800fda8:	434a      	muls	r2, r1
 800fdaa:	4264      	negs	r4, r4
 800fdac:	970a      	str	r7, [sp, #40]	; 0x28
 800fdae:	2700      	movs	r7, #0
 800fdb0:	e758      	b.n	800fc64 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 800fdb2:	ea4f 1867 	mov.w	r8, r7, asr #5
 800fdb6:	f009 031f 	and.w	r3, r9, #31
 800fdba:	f007 071f 	and.w	r7, r7, #31
 800fdbe:	fa1f fc8c 	uxth.w	ip, ip
 800fdc2:	45d0      	cmp	r8, sl
 800fdc4:	930f      	str	r3, [sp, #60]	; 0x3c
 800fdc6:	fa1f fe8e 	uxth.w	lr, lr
 800fdca:	d10a      	bne.n	800fde2 <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 800fdcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fdce:	449c      	add	ip, r3
 800fdd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fdd2:	441f      	add	r7, r3
 800fdd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fdd6:	f8a5 c004 	strh.w	ip, [r5, #4]
 800fdda:	fb03 e707 	mla	r7, r3, r7, lr
 800fdde:	80ef      	strh	r7, [r5, #6]
 800fde0:	e6bc      	b.n	800fb5c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 800fde2:	2900      	cmp	r1, #0
 800fde4:	f2c0 80a6 	blt.w	800ff34 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 800fde8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800fdea:	f1c7 0320 	rsb	r3, r7, #32
 800fdee:	4363      	muls	r3, r4
 800fdf0:	2401      	movs	r4, #1
 800fdf2:	940d      	str	r4, [sp, #52]	; 0x34
 800fdf4:	2420      	movs	r4, #32
 800fdf6:	940c      	str	r4, [sp, #48]	; 0x30
 800fdf8:	fb93 f4f1 	sdiv	r4, r3, r1
 800fdfc:	fb01 3b14 	mls	fp, r1, r4, r3
 800fe00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fe02:	f1bb 0f00 	cmp.w	fp, #0
 800fe06:	441f      	add	r7, r3
 800fe08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fe0a:	bfbc      	itt	lt
 800fe0c:	f104 34ff 	addlt.w	r4, r4, #4294967295
 800fe10:	448b      	addlt	fp, r1
 800fe12:	fb04 e707 	mla	r7, r4, r7, lr
 800fe16:	44a4      	add	ip, r4
 800fe18:	80ef      	strh	r7, [r5, #6]
 800fe1a:	f8a5 c004 	strh.w	ip, [r5, #4]
 800fe1e:	eb08 0503 	add.w	r5, r8, r3
 800fe22:	f8d0 c010 	ldr.w	ip, [r0, #16]
 800fe26:	f8bc e006 	ldrh.w	lr, [ip, #6]
 800fe2a:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 800fe2e:	ea5e 0307 	orrs.w	r3, lr, r7
 800fe32:	d011      	beq.n	800fe58 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 800fe34:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 800fe38:	f1be 0f00 	cmp.w	lr, #0
 800fe3c:	db0c      	blt.n	800fe58 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 800fe3e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 800fe40:	45be      	cmp	lr, r7
 800fe42:	da09      	bge.n	800fe58 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 800fe44:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 800fe48:	45be      	cmp	lr, r7
 800fe4a:	bf3c      	itt	cc
 800fe4c:	f10c 0708 	addcc.w	r7, ip, #8
 800fe50:	6107      	strcc	r7, [r0, #16]
 800fe52:	f10e 0701 	add.w	r7, lr, #1
 800fe56:	6087      	str	r7, [r0, #8]
 800fe58:	6907      	ldr	r7, [r0, #16]
 800fe5a:	b213      	sxth	r3, r2
 800fe5c:	4555      	cmp	r5, sl
 800fe5e:	9310      	str	r3, [sp, #64]	; 0x40
 800fe60:	807b      	strh	r3, [r7, #2]
 800fe62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fe64:	803d      	strh	r5, [r7, #0]
 800fe66:	80be      	strh	r6, [r7, #4]
 800fe68:	eb04 0c03 	add.w	ip, r4, r3
 800fe6c:	80fe      	strh	r6, [r7, #6]
 800fe6e:	d050      	beq.n	800ff12 <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 800fe70:	9b01      	ldr	r3, [sp, #4]
 800fe72:	eba3 070c 	sub.w	r7, r3, ip
 800fe76:	ebab 0301 	sub.w	r3, fp, r1
 800fe7a:	443c      	add	r4, r7
 800fe7c:	9309      	str	r3, [sp, #36]	; 0x24
 800fe7e:	0164      	lsls	r4, r4, #5
 800fe80:	fb94 f8f1 	sdiv	r8, r4, r1
 800fe84:	fb01 4418 	mls	r4, r1, r8, r4
 800fe88:	2c00      	cmp	r4, #0
 800fe8a:	bfbc      	itt	lt
 800fe8c:	f108 38ff 	addlt.w	r8, r8, #4294967295
 800fe90:	1864      	addlt	r4, r4, r1
 800fe92:	f108 0701 	add.w	r7, r8, #1
 800fe96:	9711      	str	r7, [sp, #68]	; 0x44
 800fe98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe9a:	f8d0 e010 	ldr.w	lr, [r0, #16]
 800fe9e:	191b      	adds	r3, r3, r4
 800fea0:	f8be b004 	ldrh.w	fp, [lr, #4]
 800fea4:	bf54      	ite	pl
 800fea6:	9f11      	ldrpl	r7, [sp, #68]	; 0x44
 800fea8:	4647      	movmi	r7, r8
 800feaa:	9309      	str	r3, [sp, #36]	; 0x24
 800feac:	bf58      	it	pl
 800feae:	1a5b      	subpl	r3, r3, r1
 800feb0:	44bb      	add	fp, r7
 800feb2:	44bc      	add	ip, r7
 800feb4:	bf58      	it	pl
 800feb6:	9309      	strpl	r3, [sp, #36]	; 0x24
 800feb8:	f8ae b004 	strh.w	fp, [lr, #4]
 800febc:	f8be b006 	ldrh.w	fp, [lr, #6]
 800fec0:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 800fec4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800fec6:	f8ae b006 	strh.w	fp, [lr, #6]
 800feca:	443d      	add	r5, r7
 800fecc:	f8d0 e010 	ldr.w	lr, [r0, #16]
 800fed0:	f8be b006 	ldrh.w	fp, [lr, #6]
 800fed4:	f8be 7004 	ldrh.w	r7, [lr, #4]
 800fed8:	ea5b 0307 	orrs.w	r3, fp, r7
 800fedc:	d011      	beq.n	800ff02 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 800fede:	f9be b002 	ldrsh.w	fp, [lr, #2]
 800fee2:	f1bb 0f00 	cmp.w	fp, #0
 800fee6:	db0c      	blt.n	800ff02 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 800fee8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 800feea:	45bb      	cmp	fp, r7
 800feec:	da09      	bge.n	800ff02 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 800feee:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 800fef2:	45bb      	cmp	fp, r7
 800fef4:	bf3c      	itt	cc
 800fef6:	f10e 0708 	addcc.w	r7, lr, #8
 800fefa:	6107      	strcc	r7, [r0, #16]
 800fefc:	f10b 0701 	add.w	r7, fp, #1
 800ff00:	6087      	str	r7, [r0, #8]
 800ff02:	6907      	ldr	r7, [r0, #16]
 800ff04:	4555      	cmp	r5, sl
 800ff06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ff08:	803d      	strh	r5, [r7, #0]
 800ff0a:	807b      	strh	r3, [r7, #2]
 800ff0c:	80be      	strh	r6, [r7, #4]
 800ff0e:	80fe      	strh	r6, [r7, #6]
 800ff10:	d1c2      	bne.n	800fe98 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 800ff12:	9b01      	ldr	r3, [sp, #4]
 800ff14:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800ff16:	eba3 0c0c 	sub.w	ip, r3, ip
 800ff1a:	6903      	ldr	r3, [r0, #16]
 800ff1c:	3720      	adds	r7, #32
 800ff1e:	8899      	ldrh	r1, [r3, #4]
 800ff20:	4461      	add	r1, ip
 800ff22:	8099      	strh	r1, [r3, #4]
 800ff24:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ff26:	1a7f      	subs	r7, r7, r1
 800ff28:	88d9      	ldrh	r1, [r3, #6]
 800ff2a:	fb0c 1c07 	mla	ip, ip, r7, r1
 800ff2e:	f8a3 c006 	strh.w	ip, [r3, #6]
 800ff32:	e613      	b.n	800fb5c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 800ff34:	f04f 34ff 	mov.w	r4, #4294967295
 800ff38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff3a:	4249      	negs	r1, r1
 800ff3c:	940d      	str	r4, [sp, #52]	; 0x34
 800ff3e:	2400      	movs	r4, #0
 800ff40:	437b      	muls	r3, r7
 800ff42:	e758      	b.n	800fdf6 <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 800ff44:	9905      	ldr	r1, [sp, #20]
 800ff46:	ea4f 1b69 	mov.w	fp, r9, asr #5
 800ff4a:	f009 0c1f 	and.w	ip, r9, #31
 800ff4e:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 800ff52:	f001 011f 	and.w	r1, r1, #31
 800ff56:	45f3      	cmp	fp, lr
 800ff58:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 800ff5c:	9102      	str	r1, [sp, #8]
 800ff5e:	9904      	ldr	r1, [sp, #16]
 800ff60:	eba1 0406 	sub.w	r4, r1, r6
 800ff64:	d108      	bne.n	800ff78 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 800ff66:	9b02      	ldr	r3, [sp, #8]
 800ff68:	44a0      	add	r8, r4
 800ff6a:	449c      	add	ip, r3
 800ff6c:	f8a7 8004 	strh.w	r8, [r7, #4]
 800ff70:	fb04 a40c 	mla	r4, r4, ip, sl
 800ff74:	80fc      	strh	r4, [r7, #6]
 800ff76:	e461      	b.n	800f83c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 800ff78:	9905      	ldr	r1, [sp, #20]
 800ff7a:	ebb1 0109 	subs.w	r1, r1, r9
 800ff7e:	bf51      	iteee	pl
 800ff80:	f1cc 0520 	rsbpl	r5, ip, #32
 800ff84:	fb04 f40c 	mulmi.w	r4, r4, ip
 800ff88:	4249      	negmi	r1, r1
 800ff8a:	2500      	movmi	r5, #0
 800ff8c:	bf5d      	ittte	pl
 800ff8e:	436c      	mulpl	r4, r5
 800ff90:	2520      	movpl	r5, #32
 800ff92:	f04f 0901 	movpl.w	r9, #1
 800ff96:	f04f 39ff 	movmi.w	r9, #4294967295
 800ff9a:	9501      	str	r5, [sp, #4]
 800ff9c:	9b01      	ldr	r3, [sp, #4]
 800ff9e:	fb94 f5f1 	sdiv	r5, r4, r1
 800ffa2:	fb01 4415 	mls	r4, r1, r5, r4
 800ffa6:	449c      	add	ip, r3
 800ffa8:	eb0b 0309 	add.w	r3, fp, r9
 800ffac:	2c00      	cmp	r4, #0
 800ffae:	bfbc      	itt	lt
 800ffb0:	f105 35ff 	addlt.w	r5, r5, #4294967295
 800ffb4:	1864      	addlt	r4, r4, r1
 800ffb6:	44a8      	add	r8, r5
 800ffb8:	fb05 ac0c 	mla	ip, r5, ip, sl
 800ffbc:	f8a7 8004 	strh.w	r8, [r7, #4]
 800ffc0:	f8a7 c006 	strh.w	ip, [r7, #6]
 800ffc4:	f8d0 c010 	ldr.w	ip, [r0, #16]
 800ffc8:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 800ffcc:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 800ffd0:	ea58 0707 	orrs.w	r7, r8, r7
 800ffd4:	d011      	beq.n	800fffa <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 800ffd6:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 800ffda:	f1b8 0f00 	cmp.w	r8, #0
 800ffde:	db0c      	blt.n	800fffa <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 800ffe0:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 800ffe2:	45b8      	cmp	r8, r7
 800ffe4:	da09      	bge.n	800fffa <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 800ffe6:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 800ffea:	45b8      	cmp	r8, r7
 800ffec:	bf3c      	itt	cc
 800ffee:	f10c 0708 	addcc.w	r7, ip, #8
 800fff2:	6107      	strcc	r7, [r0, #16]
 800fff4:	f108 0701 	add.w	r7, r8, #1
 800fff8:	6087      	str	r7, [r0, #8]
 800fffa:	6907      	ldr	r7, [r0, #16]
 800fffc:	f04f 0c00 	mov.w	ip, #0
 8010000:	b212      	sxth	r2, r2
 8010002:	459e      	cmp	lr, r3
 8010004:	803b      	strh	r3, [r7, #0]
 8010006:	442e      	add	r6, r5
 8010008:	807a      	strh	r2, [r7, #2]
 801000a:	f8a7 c004 	strh.w	ip, [r7, #4]
 801000e:	f8a7 c006 	strh.w	ip, [r7, #6]
 8010012:	d04b      	beq.n	80100ac <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 8010014:	9f04      	ldr	r7, [sp, #16]
 8010016:	1a64      	subs	r4, r4, r1
 8010018:	f04f 0a00 	mov.w	sl, #0
 801001c:	1bbf      	subs	r7, r7, r6
 801001e:	443d      	add	r5, r7
 8010020:	016d      	lsls	r5, r5, #5
 8010022:	fb95 f8f1 	sdiv	r8, r5, r1
 8010026:	fb01 5518 	mls	r5, r1, r8, r5
 801002a:	4565      	cmp	r5, ip
 801002c:	bfbc      	itt	lt
 801002e:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8010032:	186d      	addlt	r5, r5, r1
 8010034:	f108 0701 	add.w	r7, r8, #1
 8010038:	9703      	str	r7, [sp, #12]
 801003a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801003e:	1964      	adds	r4, r4, r5
 8010040:	444b      	add	r3, r9
 8010042:	bf54      	ite	pl
 8010044:	9f03      	ldrpl	r7, [sp, #12]
 8010046:	4647      	movmi	r7, r8
 8010048:	f8bc b004 	ldrh.w	fp, [ip, #4]
 801004c:	bf58      	it	pl
 801004e:	1a64      	subpl	r4, r4, r1
 8010050:	443e      	add	r6, r7
 8010052:	44bb      	add	fp, r7
 8010054:	f8ac b004 	strh.w	fp, [ip, #4]
 8010058:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801005c:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8010060:	f8ac b006 	strh.w	fp, [ip, #6]
 8010064:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010068:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801006c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8010070:	ea5b 0707 	orrs.w	r7, fp, r7
 8010074:	d011      	beq.n	801009a <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8010076:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801007a:	f1bb 0f00 	cmp.w	fp, #0
 801007e:	db0c      	blt.n	801009a <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8010080:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8010082:	45bb      	cmp	fp, r7
 8010084:	da09      	bge.n	801009a <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8010086:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801008a:	45bb      	cmp	fp, r7
 801008c:	bf3c      	itt	cc
 801008e:	f10c 0708 	addcc.w	r7, ip, #8
 8010092:	6107      	strcc	r7, [r0, #16]
 8010094:	f10b 0701 	add.w	r7, fp, #1
 8010098:	6087      	str	r7, [r0, #8]
 801009a:	6907      	ldr	r7, [r0, #16]
 801009c:	459e      	cmp	lr, r3
 801009e:	803b      	strh	r3, [r7, #0]
 80100a0:	807a      	strh	r2, [r7, #2]
 80100a2:	f8a7 a004 	strh.w	sl, [r7, #4]
 80100a6:	f8a7 a006 	strh.w	sl, [r7, #6]
 80100aa:	d1c6      	bne.n	801003a <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 80100ac:	9b04      	ldr	r3, [sp, #16]
 80100ae:	1b9e      	subs	r6, r3, r6
 80100b0:	6903      	ldr	r3, [r0, #16]
 80100b2:	889a      	ldrh	r2, [r3, #4]
 80100b4:	4432      	add	r2, r6
 80100b6:	809a      	strh	r2, [r3, #4]
 80100b8:	9a02      	ldr	r2, [sp, #8]
 80100ba:	f102 0c20 	add.w	ip, r2, #32
 80100be:	9a01      	ldr	r2, [sp, #4]
 80100c0:	ebac 0c02 	sub.w	ip, ip, r2
 80100c4:	88da      	ldrh	r2, [r3, #6]
 80100c6:	fb06 260c 	mla	r6, r6, ip, r2
 80100ca:	80de      	strh	r6, [r3, #6]
 80100cc:	f7ff bbb6 	b.w	800f83c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

080100d0 <_ZN8touchgfx7Outline6lineToEii>:
 80100d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80100d2:	079b      	lsls	r3, r3, #30
 80100d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80100d6:	460e      	mov	r6, r1
 80100d8:	4615      	mov	r5, r2
 80100da:	d511      	bpl.n	8010100 <_ZN8touchgfx7Outline6lineToEii+0x30>
 80100dc:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 80100e0:	ea86 0701 	eor.w	r7, r6, r1
 80100e4:	ea85 0302 	eor.w	r3, r5, r2
 80100e8:	433b      	orrs	r3, r7
 80100ea:	d009      	beq.n	8010100 <_ZN8touchgfx7Outline6lineToEii+0x30>
 80100ec:	4633      	mov	r3, r6
 80100ee:	9500      	str	r5, [sp, #0]
 80100f0:	f7ff fb4c 	bl	800f78c <_ZN8touchgfx7Outline10renderLineEiiii>
 80100f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80100f6:	f043 0301 	orr.w	r3, r3, #1
 80100fa:	e9c0 6505 	strd	r6, r5, [r0, #20]
 80100fe:	6243      	str	r3, [r0, #36]	; 0x24
 8010100:	b003      	add	sp, #12
 8010102:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010104 <_ZN8touchgfx7Outline6moveToEii>:
 8010104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010106:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010108:	4615      	mov	r5, r2
 801010a:	4604      	mov	r4, r0
 801010c:	460e      	mov	r6, r1
 801010e:	079a      	lsls	r2, r3, #30
 8010110:	d401      	bmi.n	8010116 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8010112:	f7ff fb07 	bl	800f724 <_ZN8touchgfx7Outline5resetEv>
 8010116:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010118:	07db      	lsls	r3, r3, #31
 801011a:	d504      	bpl.n	8010126 <_ZN8touchgfx7Outline6moveToEii+0x22>
 801011c:	4620      	mov	r0, r4
 801011e:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8010122:	f7ff ffd5 	bl	80100d0 <_ZN8touchgfx7Outline6lineToEii>
 8010126:	6923      	ldr	r3, [r4, #16]
 8010128:	1170      	asrs	r0, r6, #5
 801012a:	1169      	asrs	r1, r5, #5
 801012c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010130:	4290      	cmp	r0, r2
 8010132:	d103      	bne.n	801013c <_ZN8touchgfx7Outline6moveToEii+0x38>
 8010134:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8010138:	4291      	cmp	r1, r2
 801013a:	d01a      	beq.n	8010172 <_ZN8touchgfx7Outline6moveToEii+0x6e>
 801013c:	88df      	ldrh	r7, [r3, #6]
 801013e:	889a      	ldrh	r2, [r3, #4]
 8010140:	433a      	orrs	r2, r7
 8010142:	d010      	beq.n	8010166 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8010144:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8010148:	2a00      	cmp	r2, #0
 801014a:	db0c      	blt.n	8010166 <_ZN8touchgfx7Outline6moveToEii+0x62>
 801014c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801014e:	42ba      	cmp	r2, r7
 8010150:	da09      	bge.n	8010166 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8010152:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8010156:	42ba      	cmp	r2, r7
 8010158:	f102 0201 	add.w	r2, r2, #1
 801015c:	bf38      	it	cc
 801015e:	3308      	addcc	r3, #8
 8010160:	60a2      	str	r2, [r4, #8]
 8010162:	bf38      	it	cc
 8010164:	6123      	strcc	r3, [r4, #16]
 8010166:	6923      	ldr	r3, [r4, #16]
 8010168:	2200      	movs	r2, #0
 801016a:	8018      	strh	r0, [r3, #0]
 801016c:	8059      	strh	r1, [r3, #2]
 801016e:	809a      	strh	r2, [r3, #4]
 8010170:	80da      	strh	r2, [r3, #6]
 8010172:	6166      	str	r6, [r4, #20]
 8010174:	6225      	str	r5, [r4, #32]
 8010176:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801017a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801017c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 801017c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010180:	b0d0      	sub	sp, #320	; 0x140
 8010182:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8010186:	466c      	mov	r4, sp
 8010188:	4627      	mov	r7, r4
 801018a:	1a0d      	subs	r5, r1, r0
 801018c:	f100 0308 	add.w	r3, r0, #8
 8010190:	2d48      	cmp	r5, #72	; 0x48
 8010192:	f340 80d5 	ble.w	8010340 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8010196:	112d      	asrs	r5, r5, #4
 8010198:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801019c:	f9b0 9000 	ldrsh.w	r9, [r0]
 80101a0:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 80101a4:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 80101a8:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80101ac:	6816      	ldr	r6, [r2, #0]
 80101ae:	6006      	str	r6, [r0, #0]
 80101b0:	6856      	ldr	r6, [r2, #4]
 80101b2:	6046      	str	r6, [r0, #4]
 80101b4:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 80101b8:	f8a2 8002 	strh.w	r8, [r2, #2]
 80101bc:	f8a2 e004 	strh.w	lr, [r2, #4]
 80101c0:	f8a2 c006 	strh.w	ip, [r2, #6]
 80101c4:	f1a1 0208 	sub.w	r2, r1, #8
 80101c8:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 80101cc:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 80101d0:	4565      	cmp	r5, ip
 80101d2:	db06      	blt.n	80101e2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 80101d4:	d119      	bne.n	801020a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80101d6:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 80101da:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80101de:	42ae      	cmp	r6, r5
 80101e0:	dd13      	ble.n	801020a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80101e2:	460e      	mov	r6, r1
 80101e4:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 80101e8:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 80101ec:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 80101f0:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 80101f4:	601d      	str	r5, [r3, #0]
 80101f6:	6875      	ldr	r5, [r6, #4]
 80101f8:	605d      	str	r5, [r3, #4]
 80101fa:	f821 9c08 	strh.w	r9, [r1, #-8]
 80101fe:	f821 cc06 	strh.w	ip, [r1, #-6]
 8010202:	f821 8c04 	strh.w	r8, [r1, #-4]
 8010206:	f821 ec02 	strh.w	lr, [r1, #-2]
 801020a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801020e:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8010212:	42ae      	cmp	r6, r5
 8010214:	db06      	blt.n	8010224 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8010216:	d116      	bne.n	8010246 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8010218:	f9b0 c000 	ldrsh.w	ip, [r0]
 801021c:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8010220:	45ac      	cmp	ip, r5
 8010222:	da10      	bge.n	8010246 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8010224:	681d      	ldr	r5, [r3, #0]
 8010226:	f9b0 8000 	ldrsh.w	r8, [r0]
 801022a:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801022e:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8010232:	6005      	str	r5, [r0, #0]
 8010234:	685d      	ldr	r5, [r3, #4]
 8010236:	f8a0 8008 	strh.w	r8, [r0, #8]
 801023a:	6045      	str	r5, [r0, #4]
 801023c:	8146      	strh	r6, [r0, #10]
 801023e:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8010242:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8010246:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 801024a:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801024e:	4565      	cmp	r5, ip
 8010250:	db06      	blt.n	8010260 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8010252:	d119      	bne.n	8010288 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8010254:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8010258:	f9b0 5000 	ldrsh.w	r5, [r0]
 801025c:	42ae      	cmp	r6, r5
 801025e:	da13      	bge.n	8010288 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8010260:	460e      	mov	r6, r1
 8010262:	f9b0 9000 	ldrsh.w	r9, [r0]
 8010266:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 801026a:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801026e:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8010272:	6005      	str	r5, [r0, #0]
 8010274:	6875      	ldr	r5, [r6, #4]
 8010276:	6045      	str	r5, [r0, #4]
 8010278:	f821 9c08 	strh.w	r9, [r1, #-8]
 801027c:	f821 cc06 	strh.w	ip, [r1, #-6]
 8010280:	f821 8c04 	strh.w	r8, [r1, #-4]
 8010284:	f821 ec02 	strh.w	lr, [r1, #-2]
 8010288:	3308      	adds	r3, #8
 801028a:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801028e:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8010292:	45e6      	cmp	lr, ip
 8010294:	dbf8      	blt.n	8010288 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8010296:	d105      	bne.n	80102a4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8010298:	f9b3 6000 	ldrsh.w	r6, [r3]
 801029c:	f9b0 5000 	ldrsh.w	r5, [r0]
 80102a0:	42ae      	cmp	r6, r5
 80102a2:	dbf1      	blt.n	8010288 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80102a4:	4615      	mov	r5, r2
 80102a6:	3a08      	subs	r2, #8
 80102a8:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 80102ac:	45b4      	cmp	ip, r6
 80102ae:	dbf9      	blt.n	80102a4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80102b0:	d105      	bne.n	80102be <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 80102b2:	f9b0 8000 	ldrsh.w	r8, [r0]
 80102b6:	f9b2 6000 	ldrsh.w	r6, [r2]
 80102ba:	45b0      	cmp	r8, r6
 80102bc:	dbf2      	blt.n	80102a4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80102be:	4293      	cmp	r3, r2
 80102c0:	f1a5 0608 	sub.w	r6, r5, #8
 80102c4:	d816      	bhi.n	80102f4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 80102c6:	f8d6 c000 	ldr.w	ip, [r6]
 80102ca:	f9b3 a000 	ldrsh.w	sl, [r3]
 80102ce:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 80102d2:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 80102d6:	f8c3 c000 	str.w	ip, [r3]
 80102da:	f8d6 c004 	ldr.w	ip, [r6, #4]
 80102de:	f8c3 c004 	str.w	ip, [r3, #4]
 80102e2:	f825 ac08 	strh.w	sl, [r5, #-8]
 80102e6:	f825 ec06 	strh.w	lr, [r5, #-6]
 80102ea:	f825 9c04 	strh.w	r9, [r5, #-4]
 80102ee:	f825 8c02 	strh.w	r8, [r5, #-2]
 80102f2:	e7c9      	b.n	8010288 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80102f4:	f8d6 e000 	ldr.w	lr, [r6]
 80102f8:	f9b0 a000 	ldrsh.w	sl, [r0]
 80102fc:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8010300:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8010304:	f8c0 e000 	str.w	lr, [r0]
 8010308:	f8d6 e004 	ldr.w	lr, [r6, #4]
 801030c:	1a16      	subs	r6, r2, r0
 801030e:	f8c0 e004 	str.w	lr, [r0, #4]
 8010312:	f825 ac08 	strh.w	sl, [r5, #-8]
 8010316:	f825 cc06 	strh.w	ip, [r5, #-6]
 801031a:	f825 9c04 	strh.w	r9, [r5, #-4]
 801031e:	f825 8c02 	strh.w	r8, [r5, #-2]
 8010322:	1acd      	subs	r5, r1, r3
 8010324:	10ed      	asrs	r5, r5, #3
 8010326:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 801032a:	bfb5      	itete	lt
 801032c:	e9c4 0200 	strdlt	r0, r2, [r4]
 8010330:	e9c4 3100 	strdge	r3, r1, [r4]
 8010334:	460a      	movlt	r2, r1
 8010336:	4603      	movge	r3, r0
 8010338:	3408      	adds	r4, #8
 801033a:	4618      	mov	r0, r3
 801033c:	4611      	mov	r1, r2
 801033e:	e724      	b.n	801018a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8010340:	4299      	cmp	r1, r3
 8010342:	d927      	bls.n	8010394 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 8010344:	f1a3 0210 	sub.w	r2, r3, #16
 8010348:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 801034c:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8010350:	45ac      	cmp	ip, r5
 8010352:	db06      	blt.n	8010362 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8010354:	d11c      	bne.n	8010390 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8010356:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 801035a:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 801035e:	42ae      	cmp	r6, r5
 8010360:	da16      	bge.n	8010390 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8010362:	4615      	mov	r5, r2
 8010364:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8010368:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 801036c:	3a08      	subs	r2, #8
 801036e:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8010372:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 8010376:	6196      	str	r6, [r2, #24]
 8010378:	42a8      	cmp	r0, r5
 801037a:	686e      	ldr	r6, [r5, #4]
 801037c:	f8a2 9010 	strh.w	r9, [r2, #16]
 8010380:	61d6      	str	r6, [r2, #28]
 8010382:	f8a2 c012 	strh.w	ip, [r2, #18]
 8010386:	f8a2 8014 	strh.w	r8, [r2, #20]
 801038a:	f8a2 e016 	strh.w	lr, [r2, #22]
 801038e:	d1db      	bne.n	8010348 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8010390:	3308      	adds	r3, #8
 8010392:	e7d5      	b.n	8010340 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8010394:	42bc      	cmp	r4, r7
 8010396:	d903      	bls.n	80103a0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 8010398:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 801039c:	3c08      	subs	r4, #8
 801039e:	e6f4      	b.n	801018a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 80103a0:	b050      	add	sp, #320	; 0x140
 80103a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080103a6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 80103a6:	b510      	push	{r4, lr}
 80103a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80103aa:	4604      	mov	r4, r0
 80103ac:	07da      	lsls	r2, r3, #31
 80103ae:	d507      	bpl.n	80103c0 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 80103b0:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 80103b4:	f7ff fe8c 	bl	80100d0 <_ZN8touchgfx7Outline6lineToEii>
 80103b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80103ba:	f023 0301 	bic.w	r3, r3, #1
 80103be:	6243      	str	r3, [r0, #36]	; 0x24
 80103c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80103c2:	079b      	lsls	r3, r3, #30
 80103c4:	d521      	bpl.n	801040a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 80103c6:	6923      	ldr	r3, [r4, #16]
 80103c8:	88d9      	ldrh	r1, [r3, #6]
 80103ca:	889a      	ldrh	r2, [r3, #4]
 80103cc:	430a      	orrs	r2, r1
 80103ce:	d010      	beq.n	80103f2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80103d0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80103d4:	2a00      	cmp	r2, #0
 80103d6:	db0c      	blt.n	80103f2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80103d8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80103da:	428a      	cmp	r2, r1
 80103dc:	da09      	bge.n	80103f2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80103de:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80103e2:	4291      	cmp	r1, r2
 80103e4:	f102 0201 	add.w	r2, r2, #1
 80103e8:	bf88      	it	hi
 80103ea:	3308      	addhi	r3, #8
 80103ec:	60a2      	str	r2, [r4, #8]
 80103ee:	bf88      	it	hi
 80103f0:	6123      	strhi	r3, [r4, #16]
 80103f2:	68a1      	ldr	r1, [r4, #8]
 80103f4:	b129      	cbz	r1, 8010402 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 80103f6:	6863      	ldr	r3, [r4, #4]
 80103f8:	4299      	cmp	r1, r3
 80103fa:	d802      	bhi.n	8010402 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 80103fc:	68e0      	ldr	r0, [r4, #12]
 80103fe:	f7ff febd 	bl	801017c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8010402:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010404:	f023 0302 	bic.w	r3, r3, #2
 8010408:	6263      	str	r3, [r4, #36]	; 0x24
 801040a:	68e0      	ldr	r0, [r4, #12]
 801040c:	bd10      	pop	{r4, pc}
	...

08010410 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8010410:	4b02      	ldr	r3, [pc, #8]	; (801041c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8010412:	6018      	str	r0, [r3, #0]
 8010414:	4b02      	ldr	r3, [pc, #8]	; (8010420 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8010416:	6019      	str	r1, [r3, #0]
 8010418:	4770      	bx	lr
 801041a:	bf00      	nop
 801041c:	2400e45c 	.word	0x2400e45c
 8010420:	2400e460 	.word	0x2400e460

08010424 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>:
 8010424:	2300      	movs	r3, #0
 8010426:	4a02      	ldr	r2, [pc, #8]	; (8010430 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0xc>)
 8010428:	6013      	str	r3, [r2, #0]
 801042a:	4a02      	ldr	r2, [pc, #8]	; (8010434 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0x10>)
 801042c:	6013      	str	r3, [r2, #0]
 801042e:	4770      	bx	lr
 8010430:	2400e45c 	.word	0x2400e45c
 8010434:	2400e460 	.word	0x2400e460

08010438 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8010438:	4b01      	ldr	r3, [pc, #4]	; (8010440 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801043a:	6818      	ldr	r0, [r3, #0]
 801043c:	4770      	bx	lr
 801043e:	bf00      	nop
 8010440:	2400e45c 	.word	0x2400e45c

08010444 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8010444:	4b01      	ldr	r3, [pc, #4]	; (801044c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8010446:	6818      	ldr	r0, [r3, #0]
 8010448:	4770      	bx	lr
 801044a:	bf00      	nop
 801044c:	2400e460 	.word	0x2400e460

08010450 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8010450:	b510      	push	{r4, lr}
 8010452:	6803      	ldr	r3, [r0, #0]
 8010454:	460c      	mov	r4, r1
 8010456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010458:	4798      	blx	r3
 801045a:	1b03      	subs	r3, r0, r4
 801045c:	4258      	negs	r0, r3
 801045e:	4158      	adcs	r0, r3
 8010460:	bd10      	pop	{r4, pc}
	...

08010464 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8010464:	4b01      	ldr	r3, [pc, #4]	; (801046c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8010466:	6019      	str	r1, [r3, #0]
 8010468:	4770      	bx	lr
 801046a:	bf00      	nop
 801046c:	2400e464 	.word	0x2400e464

08010470 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8010470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010474:	4696      	mov	lr, r2
 8010476:	b097      	sub	sp, #92	; 0x5c
 8010478:	4605      	mov	r5, r0
 801047a:	4614      	mov	r4, r2
 801047c:	460e      	mov	r6, r1
 801047e:	461f      	mov	r7, r3
 8010480:	f10d 0c1c 	add.w	ip, sp, #28
 8010484:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8010488:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 801048c:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8010490:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010494:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010498:	f8de 3000 	ldr.w	r3, [lr]
 801049c:	f104 0e14 	add.w	lr, r4, #20
 80104a0:	f8cc 3000 	str.w	r3, [ip]
 80104a4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80104a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80104ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80104b0:	f8de 3000 	ldr.w	r3, [lr]
 80104b4:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80104b8:	f8cc 3000 	str.w	r3, [ip]
 80104bc:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80104c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80104c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80104c8:	f8de 3000 	ldr.w	r3, [lr]
 80104cc:	4631      	mov	r1, r6
 80104ce:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80104d0:	4628      	mov	r0, r5
 80104d2:	f8cc 3000 	str.w	r3, [ip]
 80104d6:	682b      	ldr	r3, [r5, #0]
 80104d8:	9201      	str	r2, [sp, #4]
 80104da:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80104dc:	f8cd 8008 	str.w	r8, [sp, #8]
 80104e0:	9200      	str	r2, [sp, #0]
 80104e2:	aa07      	add	r2, sp, #28
 80104e4:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80104e8:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 80104ec:	463b      	mov	r3, r7
 80104ee:	47d8      	blx	fp
 80104f0:	46a6      	mov	lr, r4
 80104f2:	f10d 0c1c 	add.w	ip, sp, #28
 80104f6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80104fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80104fe:	f8de 3000 	ldr.w	r3, [lr]
 8010502:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8010506:	343c      	adds	r4, #60	; 0x3c
 8010508:	f8cc 3000 	str.w	r3, [ip]
 801050c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8010510:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010514:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010518:	f8de 3000 	ldr.w	r3, [lr]
 801051c:	f8cc 3000 	str.w	r3, [ip]
 8010520:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8010524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010526:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801052a:	6823      	ldr	r3, [r4, #0]
 801052c:	4631      	mov	r1, r6
 801052e:	4628      	mov	r0, r5
 8010530:	f8cc 3000 	str.w	r3, [ip]
 8010534:	682b      	ldr	r3, [r5, #0]
 8010536:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801053a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801053c:	f8cd 8008 	str.w	r8, [sp, #8]
 8010540:	9201      	str	r2, [sp, #4]
 8010542:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010544:	9200      	str	r2, [sp, #0]
 8010546:	aa07      	add	r2, sp, #28
 8010548:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 801054a:	463b      	mov	r3, r7
 801054c:	47a0      	blx	r4
 801054e:	b017      	add	sp, #92	; 0x5c
 8010550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010554 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8010554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010558:	b08d      	sub	sp, #52	; 0x34
 801055a:	4688      	mov	r8, r1
 801055c:	f8d3 c000 	ldr.w	ip, [r3]
 8010560:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010562:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8010566:	680f      	ldr	r7, [r1, #0]
 8010568:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 801056c:	eba7 070c 	sub.w	r7, r7, ip
 8010570:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8010574:	edd3 6a07 	vldr	s13, [r3, #28]
 8010578:	42bc      	cmp	r4, r7
 801057a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801057c:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8010580:	bfa8      	it	ge
 8010582:	463c      	movge	r4, r7
 8010584:	f9b1 9000 	ldrsh.w	r9, [r1]
 8010588:	f9ba 1000 	ldrsh.w	r1, [sl]
 801058c:	ee07 4a90 	vmov	s15, r4
 8010590:	eb09 0e0c 	add.w	lr, r9, ip
 8010594:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8010598:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801059c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80105a0:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 80105a4:	4571      	cmp	r1, lr
 80105a6:	ee25 4a04 	vmul.f32	s8, s10, s8
 80105aa:	ee65 4a24 	vmul.f32	s9, s10, s9
 80105ae:	ee25 5a27 	vmul.f32	s10, s10, s15
 80105b2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80105b6:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80105ba:	ee32 1a05 	vadd.f32	s2, s4, s10
 80105be:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80105c2:	ee36 0a84 	vadd.f32	s0, s13, s8
 80105c6:	ee61 1a87 	vmul.f32	s3, s3, s14
 80105ca:	ee22 2a07 	vmul.f32	s4, s4, s14
 80105ce:	f340 808c 	ble.w	80106ea <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80105d2:	eba1 060e 	sub.w	r6, r1, lr
 80105d6:	fb96 f5f4 	sdiv	r5, r6, r4
 80105da:	ee07 5a10 	vmov	s14, r5
 80105de:	2d00      	cmp	r5, #0
 80105e0:	fb04 6615 	mls	r6, r4, r5, r6
 80105e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80105e8:	eea7 0a04 	vfma.f32	s0, s14, s8
 80105ec:	eee7 0a24 	vfma.f32	s1, s14, s9
 80105f0:	eea7 1a05 	vfma.f32	s2, s14, s10
 80105f4:	dd12      	ble.n	801061c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80105f6:	ee70 6a44 	vsub.f32	s13, s0, s8
 80105fa:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80105fe:	ee31 2a45 	vsub.f32	s4, s2, s10
 8010602:	eef5 6a40 	vcmp.f32	s13, #0.0
 8010606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801060a:	bf14      	ite	ne
 801060c:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8010610:	eeb0 7a67 	vmoveq.f32	s14, s15
 8010614:	ee61 1a87 	vmul.f32	s3, s3, s14
 8010618:	ee22 2a07 	vmul.f32	s4, s4, s14
 801061c:	fb05 f204 	mul.w	r2, r5, r4
 8010620:	1abf      	subs	r7, r7, r2
 8010622:	4494      	add	ip, r2
 8010624:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8010628:	4411      	add	r1, r2
 801062a:	eb09 020c 	add.w	r2, r9, ip
 801062e:	b209      	sxth	r1, r1
 8010630:	443a      	add	r2, r7
 8010632:	428a      	cmp	r2, r1
 8010634:	bfc4      	itt	gt
 8010636:	eba1 0209 	subgt.w	r2, r1, r9
 801063a:	eba2 070c 	subgt.w	r7, r2, ip
 801063e:	2f00      	cmp	r7, #0
 8010640:	dd50      	ble.n	80106e4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8010642:	fb97 f1f4 	sdiv	r1, r7, r4
 8010646:	fb04 7211 	mls	r2, r4, r1, r7
 801064a:	b90a      	cbnz	r2, 8010650 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801064c:	3901      	subs	r1, #1
 801064e:	4622      	mov	r2, r4
 8010650:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8010654:	6840      	ldr	r0, [r0, #4]
 8010656:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801065a:	44b6      	add	lr, r6
 801065c:	f8d0 a000 	ldr.w	sl, [r0]
 8010660:	2900      	cmp	r1, #0
 8010662:	bfcc      	ite	gt
 8010664:	46a1      	movgt	r9, r4
 8010666:	4691      	movle	r9, r2
 8010668:	900b      	str	r0, [sp, #44]	; 0x2c
 801066a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801066c:	fb04 e505 	mla	r5, r4, r5, lr
 8010670:	eef0 6a42 	vmov.f32	s13, s4
 8010674:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8010678:	9008      	str	r0, [sp, #32]
 801067a:	eeb0 7a61 	vmov.f32	s14, s3
 801067e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8010680:	695b      	ldr	r3, [r3, #20]
 8010682:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8010686:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801068a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801068e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8010690:	445b      	add	r3, fp
 8010692:	9307      	str	r3, [sp, #28]
 8010694:	ee16 3a90 	vmov	r3, s13
 8010698:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801069c:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80106a0:	ee21 3a23 	vmul.f32	s6, s2, s7
 80106a4:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80106a8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80106ac:	ee17 7a90 	vmov	r7, s15
 80106b0:	ee73 7a42 	vsub.f32	s15, s6, s4
 80106b4:	fb97 f7f4 	sdiv	r7, r7, r4
 80106b8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80106bc:	ee17 ca90 	vmov	ip, s15
 80106c0:	fb9c fcf4 	sdiv	ip, ip, r4
 80106c4:	fb0c 3306 	mla	r3, ip, r6, r3
 80106c8:	9302      	str	r3, [sp, #8]
 80106ca:	ee17 3a10 	vmov	r3, s14
 80106ce:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80106d2:	fb07 3706 	mla	r7, r7, r6, r3
 80106d6:	eba9 0306 	sub.w	r3, r9, r6
 80106da:	e9cd 4700 	strd	r4, r7, [sp]
 80106de:	f8da 4008 	ldr.w	r4, [sl, #8]
 80106e2:	47a0      	blx	r4
 80106e4:	b00d      	add	sp, #52	; 0x34
 80106e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106ea:	2500      	movs	r5, #0
 80106ec:	462e      	mov	r6, r5
 80106ee:	e799      	b.n	8010624 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

080106f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80106f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106f4:	b0db      	sub	sp, #364	; 0x16c
 80106f6:	461d      	mov	r5, r3
 80106f8:	4614      	mov	r4, r2
 80106fa:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 80106fe:	910f      	str	r1, [sp, #60]	; 0x3c
 8010700:	4629      	mov	r1, r5
 8010702:	930a      	str	r3, [sp, #40]	; 0x28
 8010704:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8010708:	9009      	str	r0, [sp, #36]	; 0x24
 801070a:	930b      	str	r3, [sp, #44]	; 0x2c
 801070c:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8010710:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8010714:	9310      	str	r3, [sp, #64]	; 0x40
 8010716:	6803      	ldr	r3, [r0, #0]
 8010718:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 801071a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801071e:	47b8      	blx	r7
 8010720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010722:	6058      	str	r0, [r3, #4]
 8010724:	2800      	cmp	r0, #0
 8010726:	f000 83a1 	beq.w	8010e6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801072a:	682b      	ldr	r3, [r5, #0]
 801072c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8010730:	ed94 7a02 	vldr	s14, [r4, #8]
 8010734:	9314      	str	r3, [sp, #80]	; 0x50
 8010736:	686b      	ldr	r3, [r5, #4]
 8010738:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801073c:	9315      	str	r3, [sp, #84]	; 0x54
 801073e:	4bc1      	ldr	r3, [pc, #772]	; (8010a44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8010740:	7819      	ldrb	r1, [r3, #0]
 8010742:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8010746:	2900      	cmp	r1, #0
 8010748:	bf16      	itet	ne
 801074a:	4619      	movne	r1, r3
 801074c:	4611      	moveq	r1, r2
 801074e:	4613      	movne	r3, r2
 8010750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010754:	9116      	str	r1, [sp, #88]	; 0x58
 8010756:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801075a:	f240 8387 	bls.w	8010e6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801075e:	ed94 7a07 	vldr	s14, [r4, #28]
 8010762:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801076a:	f240 837f 	bls.w	8010e6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801076e:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8010772:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801077a:	f240 8377 	bls.w	8010e6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801077e:	6822      	ldr	r2, [r4, #0]
 8010780:	4bb1      	ldr	r3, [pc, #708]	; (8010a48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8010782:	429a      	cmp	r2, r3
 8010784:	f2c0 8372 	blt.w	8010e6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010788:	49b0      	ldr	r1, [pc, #704]	; (8010a4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801078a:	6963      	ldr	r3, [r4, #20]
 801078c:	428a      	cmp	r2, r1
 801078e:	f300 836d 	bgt.w	8010e6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010792:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8010796:	48ae      	ldr	r0, [pc, #696]	; (8010a50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8010798:	33ff      	adds	r3, #255	; 0xff
 801079a:	4283      	cmp	r3, r0
 801079c:	f200 8366 	bhi.w	8010e6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80107a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80107a2:	4dac      	ldr	r5, [pc, #688]	; (8010a54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 80107a4:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 80107a8:	33ff      	adds	r3, #255	; 0xff
 80107aa:	42ab      	cmp	r3, r5
 80107ac:	f200 835e 	bhi.w	8010e6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80107b0:	6862      	ldr	r2, [r4, #4]
 80107b2:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 80107b6:	33ff      	adds	r3, #255	; 0xff
 80107b8:	4283      	cmp	r3, r0
 80107ba:	f200 8357 	bhi.w	8010e6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80107be:	69a1      	ldr	r1, [r4, #24]
 80107c0:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 80107c4:	33ff      	adds	r3, #255	; 0xff
 80107c6:	4283      	cmp	r3, r0
 80107c8:	f200 8350 	bhi.w	8010e6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80107cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80107ce:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 80107d2:	30ff      	adds	r0, #255	; 0xff
 80107d4:	42a8      	cmp	r0, r5
 80107d6:	f200 8349 	bhi.w	8010e6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80107da:	428a      	cmp	r2, r1
 80107dc:	f280 8110 	bge.w	8010a00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 80107e0:	429a      	cmp	r2, r3
 80107e2:	f300 8119 	bgt.w	8010a18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 80107e6:	4299      	cmp	r1, r3
 80107e8:	f280 811d 	bge.w	8010a26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80107ec:	2502      	movs	r5, #2
 80107ee:	2701      	movs	r7, #1
 80107f0:	46a9      	mov	r9, r5
 80107f2:	46b8      	mov	r8, r7
 80107f4:	f04f 0a00 	mov.w	sl, #0
 80107f8:	4621      	mov	r1, r4
 80107fa:	a849      	add	r0, sp, #292	; 0x124
 80107fc:	f003 fd2a 	bl	8014254 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8010800:	4622      	mov	r2, r4
 8010802:	4653      	mov	r3, sl
 8010804:	a949      	add	r1, sp, #292	; 0x124
 8010806:	f8cd 9000 	str.w	r9, [sp]
 801080a:	a819      	add	r0, sp, #100	; 0x64
 801080c:	f003 fe52 	bl	80144b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8010810:	4622      	mov	r2, r4
 8010812:	4653      	mov	r3, sl
 8010814:	a949      	add	r1, sp, #292	; 0x124
 8010816:	f8cd 8000 	str.w	r8, [sp]
 801081a:	a829      	add	r0, sp, #164	; 0xa4
 801081c:	f003 fe4a 	bl	80144b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8010820:	4643      	mov	r3, r8
 8010822:	4622      	mov	r2, r4
 8010824:	a949      	add	r1, sp, #292	; 0x124
 8010826:	f8cd 9000 	str.w	r9, [sp]
 801082a:	a839      	add	r0, sp, #228	; 0xe4
 801082c:	f003 fe42 	bl	80144b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8010830:	42af      	cmp	r7, r5
 8010832:	af12      	add	r7, sp, #72	; 0x48
 8010834:	bfb7      	itett	lt
 8010836:	2300      	movlt	r3, #0
 8010838:	2301      	movge	r3, #1
 801083a:	ad29      	addlt	r5, sp, #164	; 0xa4
 801083c:	ac19      	addlt	r4, sp, #100	; 0x64
 801083e:	bfb1      	iteee	lt
 8010840:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010842:	ad19      	addge	r5, sp, #100	; 0x64
 8010844:	930e      	strge	r3, [sp, #56]	; 0x38
 8010846:	ac29      	addge	r4, sp, #164	; 0xa4
 8010848:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801084a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801084e:	e887 0003 	stmia.w	r7, {r0, r1}
 8010852:	b928      	cbnz	r0, 8010860 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8010854:	4b80      	ldr	r3, [pc, #512]	; (8010a58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8010856:	6818      	ldr	r0, [r3, #0]
 8010858:	6803      	ldr	r3, [r0, #0]
 801085a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801085c:	4798      	blx	r3
 801085e:	6038      	str	r0, [r7, #0]
 8010860:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8010862:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8010866:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801086a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801086c:	930c      	str	r3, [sp, #48]	; 0x30
 801086e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010870:	6963      	ldr	r3, [r4, #20]
 8010872:	440b      	add	r3, r1
 8010874:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8010878:	4408      	add	r0, r1
 801087a:	b200      	sxth	r0, r0
 801087c:	4283      	cmp	r3, r0
 801087e:	900d      	str	r0, [sp, #52]	; 0x34
 8010880:	f280 80dd 	bge.w	8010a3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8010884:	428b      	cmp	r3, r1
 8010886:	da08      	bge.n	801089a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8010888:	2a00      	cmp	r2, #0
 801088a:	dd06      	ble.n	801089a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801088c:	1acb      	subs	r3, r1, r3
 801088e:	429a      	cmp	r2, r3
 8010890:	f2c0 80e4 	blt.w	8010a5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8010894:	2b00      	cmp	r3, #0
 8010896:	f300 80e2 	bgt.w	8010a5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801089a:	6967      	ldr	r7, [r4, #20]
 801089c:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80108a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80108a2:	443b      	add	r3, r7
 80108a4:	461f      	mov	r7, r3
 80108a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80108a8:	1bdf      	subs	r7, r3, r7
 80108aa:	4297      	cmp	r7, r2
 80108ac:	bfa8      	it	ge
 80108ae:	4617      	movge	r7, r2
 80108b0:	2f00      	cmp	r7, #0
 80108b2:	f340 8166 	ble.w	8010b82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80108b6:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80108b8:	6829      	ldr	r1, [r5, #0]
 80108ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80108be:	f9bb 3000 	ldrsh.w	r3, [fp]
 80108c2:	4411      	add	r1, r2
 80108c4:	6820      	ldr	r0, [r4, #0]
 80108c6:	4299      	cmp	r1, r3
 80108c8:	dd1a      	ble.n	8010900 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80108ca:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80108ce:	4402      	add	r2, r0
 80108d0:	440b      	add	r3, r1
 80108d2:	b21b      	sxth	r3, r3
 80108d4:	429a      	cmp	r2, r3
 80108d6:	dc13      	bgt.n	8010900 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80108d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80108da:	a912      	add	r1, sp, #72	; 0x48
 80108dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	9206      	str	r2, [sp, #24]
 80108e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80108e6:	9500      	str	r5, [sp, #0]
 80108e8:	9205      	str	r2, [sp, #20]
 80108ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80108ec:	e9cd b203 	strd	fp, r2, [sp, #12]
 80108f0:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80108f2:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80108f6:	aa49      	add	r2, sp, #292	; 0x124
 80108f8:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80108fc:	4623      	mov	r3, r4
 80108fe:	47c8      	blx	r9
 8010900:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8010904:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8010908:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801090c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010910:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8010914:	68a1      	ldr	r1, [r4, #8]
 8010916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801091a:	ed94 6a08 	vldr	s12, [r4, #32]
 801091e:	edd4 6a07 	vldr	s13, [r4, #28]
 8010922:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8010926:	ee76 6a86 	vadd.f32	s13, s13, s12
 801092a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801092e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010932:	edc4 6a07 	vstr	s13, [r4, #28]
 8010936:	441a      	add	r2, r3
 8010938:	6963      	ldr	r3, [r4, #20]
 801093a:	3301      	adds	r3, #1
 801093c:	6022      	str	r2, [r4, #0]
 801093e:	6163      	str	r3, [r4, #20]
 8010940:	69a3      	ldr	r3, [r4, #24]
 8010942:	3b01      	subs	r3, #1
 8010944:	61a3      	str	r3, [r4, #24]
 8010946:	6923      	ldr	r3, [r4, #16]
 8010948:	440b      	add	r3, r1
 801094a:	68e1      	ldr	r1, [r4, #12]
 801094c:	428b      	cmp	r3, r1
 801094e:	6123      	str	r3, [r4, #16]
 8010950:	db15      	blt.n	801097e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8010952:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8010956:	3201      	adds	r2, #1
 8010958:	1a5b      	subs	r3, r3, r1
 801095a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801095e:	6022      	str	r2, [r4, #0]
 8010960:	6123      	str	r3, [r4, #16]
 8010962:	edc4 6a07 	vstr	s13, [r4, #28]
 8010966:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801096a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801096e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8010972:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8010976:	ee77 7a27 	vadd.f32	s15, s14, s15
 801097a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801097e:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8010982:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8010986:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801098a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801098e:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8010992:	68a9      	ldr	r1, [r5, #8]
 8010994:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010998:	ed95 6a08 	vldr	s12, [r5, #32]
 801099c:	edd5 6a07 	vldr	s13, [r5, #28]
 80109a0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80109a4:	ee76 6a86 	vadd.f32	s13, s13, s12
 80109a8:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80109ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80109b0:	edc5 6a07 	vstr	s13, [r5, #28]
 80109b4:	441a      	add	r2, r3
 80109b6:	696b      	ldr	r3, [r5, #20]
 80109b8:	3301      	adds	r3, #1
 80109ba:	602a      	str	r2, [r5, #0]
 80109bc:	616b      	str	r3, [r5, #20]
 80109be:	69ab      	ldr	r3, [r5, #24]
 80109c0:	3b01      	subs	r3, #1
 80109c2:	61ab      	str	r3, [r5, #24]
 80109c4:	692b      	ldr	r3, [r5, #16]
 80109c6:	440b      	add	r3, r1
 80109c8:	68e9      	ldr	r1, [r5, #12]
 80109ca:	428b      	cmp	r3, r1
 80109cc:	612b      	str	r3, [r5, #16]
 80109ce:	db15      	blt.n	80109fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 80109d0:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80109d4:	3201      	adds	r2, #1
 80109d6:	1a5b      	subs	r3, r3, r1
 80109d8:	ee76 6a26 	vadd.f32	s13, s12, s13
 80109dc:	602a      	str	r2, [r5, #0]
 80109de:	612b      	str	r3, [r5, #16]
 80109e0:	edc5 6a07 	vstr	s13, [r5, #28]
 80109e4:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80109e8:	ee36 7a87 	vadd.f32	s14, s13, s14
 80109ec:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80109f0:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80109f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80109f8:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80109fc:	3f01      	subs	r7, #1
 80109fe:	e757      	b.n	80108b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8010a00:	4299      	cmp	r1, r3
 8010a02:	dc13      	bgt.n	8010a2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8010a04:	429a      	cmp	r2, r3
 8010a06:	da14      	bge.n	8010a32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8010a08:	2502      	movs	r5, #2
 8010a0a:	2703      	movs	r7, #3
 8010a0c:	f04f 0800 	mov.w	r8, #0
 8010a10:	46a9      	mov	r9, r5
 8010a12:	f04f 0a01 	mov.w	sl, #1
 8010a16:	e6ef      	b.n	80107f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8010a18:	2501      	movs	r5, #1
 8010a1a:	2700      	movs	r7, #0
 8010a1c:	46a9      	mov	r9, r5
 8010a1e:	46b8      	mov	r8, r7
 8010a20:	f04f 0a02 	mov.w	sl, #2
 8010a24:	e6e8      	b.n	80107f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8010a26:	2501      	movs	r5, #1
 8010a28:	2702      	movs	r7, #2
 8010a2a:	e6e1      	b.n	80107f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8010a2c:	2500      	movs	r5, #0
 8010a2e:	2701      	movs	r7, #1
 8010a30:	e7f4      	b.n	8010a1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8010a32:	2702      	movs	r7, #2
 8010a34:	2503      	movs	r5, #3
 8010a36:	f04f 0900 	mov.w	r9, #0
 8010a3a:	46b8      	mov	r8, r7
 8010a3c:	e7e9      	b.n	8010a12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8010a3e:	4613      	mov	r3, r2
 8010a40:	e728      	b.n	8010894 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8010a42:	bf00      	nop
 8010a44:	2400e44c 	.word	0x2400e44c
 8010a48:	fffd8f01 	.word	0xfffd8f01
 8010a4c:	00027100 	.word	0x00027100
 8010a50:	0004e1ff 	.word	0x0004e1ff
 8010a54:	0004e1fe 	.word	0x0004e1fe
 8010a58:	2400e454 	.word	0x2400e454
 8010a5c:	4613      	mov	r3, r2
 8010a5e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8010a60:	469e      	mov	lr, r3
 8010a62:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8010a64:	469c      	mov	ip, r3
 8010a66:	9111      	str	r1, [sp, #68]	; 0x44
 8010a68:	f04f 0900 	mov.w	r9, #0
 8010a6c:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8010a70:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8010a74:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8010a78:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8010a7c:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8010a80:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8010a84:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8010a88:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8010a8c:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8010a90:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8010a94:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8010a98:	f1bc 0f00 	cmp.w	ip, #0
 8010a9c:	d147      	bne.n	8010b2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8010a9e:	eb03 0c07 	add.w	ip, r3, r7
 8010aa2:	1ad7      	subs	r7, r2, r3
 8010aa4:	f1b9 0f00 	cmp.w	r9, #0
 8010aa8:	d009      	beq.n	8010abe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8010aaa:	9029      	str	r0, [sp, #164]	; 0xa4
 8010aac:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8010ab0:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8010ab4:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8010ab8:	912d      	str	r1, [sp, #180]	; 0xb4
 8010aba:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8010abe:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8010ac0:	f04f 0800 	mov.w	r8, #0
 8010ac4:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8010ac8:	9111      	str	r1, [sp, #68]	; 0x44
 8010aca:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8010ace:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8010ad2:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8010ad6:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8010ada:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8010ade:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8010ae2:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8010ae6:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8010aea:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8010aee:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8010af2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8010af6:	f1be 0f00 	cmp.w	lr, #0
 8010afa:	d031      	beq.n	8010b60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8010afc:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8010afe:	4450      	add	r0, sl
 8010b00:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8010b04:	4431      	add	r1, r6
 8010b06:	ee37 7a04 	vadd.f32	s14, s14, s8
 8010b0a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8010b0e:	4549      	cmp	r1, r9
 8010b10:	db08      	blt.n	8010b24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8010b12:	ee77 7a85 	vadd.f32	s15, s15, s10
 8010b16:	3001      	adds	r0, #1
 8010b18:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8010b1c:	eba1 0109 	sub.w	r1, r1, r9
 8010b20:	ee37 7a06 	vadd.f32	s14, s14, s12
 8010b24:	f10e 3eff 	add.w	lr, lr, #4294967295
 8010b28:	f04f 0801 	mov.w	r8, #1
 8010b2c:	e7e3      	b.n	8010af6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8010b2e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8010b30:	4450      	add	r0, sl
 8010b32:	ee37 7a24 	vadd.f32	s14, s14, s9
 8010b36:	4431      	add	r1, r6
 8010b38:	ee77 7a84 	vadd.f32	s15, s15, s8
 8010b3c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8010b40:	4541      	cmp	r1, r8
 8010b42:	db08      	blt.n	8010b56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8010b44:	ee76 6a85 	vadd.f32	s13, s13, s10
 8010b48:	3001      	adds	r0, #1
 8010b4a:	ee37 7a25 	vadd.f32	s14, s14, s11
 8010b4e:	eba1 0108 	sub.w	r1, r1, r8
 8010b52:	ee77 7a86 	vadd.f32	s15, s15, s12
 8010b56:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010b5a:	f04f 0901 	mov.w	r9, #1
 8010b5e:	e79b      	b.n	8010a98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8010b60:	449c      	add	ip, r3
 8010b62:	1aff      	subs	r7, r7, r3
 8010b64:	f1b8 0f00 	cmp.w	r8, #0
 8010b68:	d009      	beq.n	8010b7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8010b6a:	9019      	str	r0, [sp, #100]	; 0x64
 8010b6c:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8010b70:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8010b74:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8010b78:	911d      	str	r1, [sp, #116]	; 0x74
 8010b7a:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8010b7e:	1ad2      	subs	r2, r2, r3
 8010b80:	e68b      	b.n	801089a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8010b82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010b84:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	f000 80d1 	beq.w	8010d2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8010b8c:	ad19      	add	r5, sp, #100	; 0x64
 8010b8e:	ac39      	add	r4, sp, #228	; 0xe4
 8010b90:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8010b92:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8010b96:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010b9a:	930c      	str	r3, [sp, #48]	; 0x30
 8010b9c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010b9e:	6963      	ldr	r3, [r4, #20]
 8010ba0:	440b      	add	r3, r1
 8010ba2:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8010ba6:	4408      	add	r0, r1
 8010ba8:	b200      	sxth	r0, r0
 8010baa:	4283      	cmp	r3, r0
 8010bac:	900d      	str	r0, [sp, #52]	; 0x34
 8010bae:	f280 80c1 	bge.w	8010d34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8010bb2:	428b      	cmp	r3, r1
 8010bb4:	da08      	bge.n	8010bc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8010bb6:	2a00      	cmp	r2, #0
 8010bb8:	dd06      	ble.n	8010bc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8010bba:	1acb      	subs	r3, r1, r3
 8010bbc:	429a      	cmp	r2, r3
 8010bbe:	f2c0 80bb 	blt.w	8010d38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	f300 80b9 	bgt.w	8010d3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8010bc8:	6967      	ldr	r7, [r4, #20]
 8010bca:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8010bce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010bd0:	443b      	add	r3, r7
 8010bd2:	461f      	mov	r7, r3
 8010bd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010bd6:	1bdf      	subs	r7, r3, r7
 8010bd8:	4297      	cmp	r7, r2
 8010bda:	bfa8      	it	ge
 8010bdc:	4617      	movge	r7, r2
 8010bde:	2f00      	cmp	r7, #0
 8010be0:	f340 813c 	ble.w	8010e5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8010be4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8010be6:	6829      	ldr	r1, [r5, #0]
 8010be8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010bec:	f9bb 3000 	ldrsh.w	r3, [fp]
 8010bf0:	4411      	add	r1, r2
 8010bf2:	6820      	ldr	r0, [r4, #0]
 8010bf4:	4299      	cmp	r1, r3
 8010bf6:	dd1a      	ble.n	8010c2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8010bf8:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8010bfc:	4402      	add	r2, r0
 8010bfe:	440b      	add	r3, r1
 8010c00:	b21b      	sxth	r3, r3
 8010c02:	429a      	cmp	r2, r3
 8010c04:	dc13      	bgt.n	8010c2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8010c06:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010c08:	a912      	add	r1, sp, #72	; 0x48
 8010c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	9206      	str	r2, [sp, #24]
 8010c12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010c14:	9500      	str	r5, [sp, #0]
 8010c16:	9205      	str	r2, [sp, #20]
 8010c18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010c1a:	e9cd b203 	strd	fp, r2, [sp, #12]
 8010c1e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8010c20:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8010c24:	aa49      	add	r2, sp, #292	; 0x124
 8010c26:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8010c2a:	4623      	mov	r3, r4
 8010c2c:	47c8      	blx	r9
 8010c2e:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8010c32:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8010c36:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8010c3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010c3e:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8010c42:	68a1      	ldr	r1, [r4, #8]
 8010c44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c48:	ed94 6a08 	vldr	s12, [r4, #32]
 8010c4c:	edd4 6a07 	vldr	s13, [r4, #28]
 8010c50:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8010c54:	ee76 6a86 	vadd.f32	s13, s13, s12
 8010c58:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8010c5c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010c60:	edc4 6a07 	vstr	s13, [r4, #28]
 8010c64:	441a      	add	r2, r3
 8010c66:	6963      	ldr	r3, [r4, #20]
 8010c68:	3301      	adds	r3, #1
 8010c6a:	6022      	str	r2, [r4, #0]
 8010c6c:	6163      	str	r3, [r4, #20]
 8010c6e:	69a3      	ldr	r3, [r4, #24]
 8010c70:	3b01      	subs	r3, #1
 8010c72:	61a3      	str	r3, [r4, #24]
 8010c74:	6923      	ldr	r3, [r4, #16]
 8010c76:	440b      	add	r3, r1
 8010c78:	68e1      	ldr	r1, [r4, #12]
 8010c7a:	428b      	cmp	r3, r1
 8010c7c:	6123      	str	r3, [r4, #16]
 8010c7e:	db15      	blt.n	8010cac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8010c80:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8010c84:	3201      	adds	r2, #1
 8010c86:	1a5b      	subs	r3, r3, r1
 8010c88:	ee76 6a26 	vadd.f32	s13, s12, s13
 8010c8c:	6022      	str	r2, [r4, #0]
 8010c8e:	6123      	str	r3, [r4, #16]
 8010c90:	edc4 6a07 	vstr	s13, [r4, #28]
 8010c94:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8010c98:	ee36 7a87 	vadd.f32	s14, s13, s14
 8010c9c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8010ca0:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8010ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010ca8:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8010cac:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8010cb0:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8010cb4:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8010cb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010cbc:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8010cc0:	68a9      	ldr	r1, [r5, #8]
 8010cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010cc6:	ed95 6a08 	vldr	s12, [r5, #32]
 8010cca:	edd5 6a07 	vldr	s13, [r5, #28]
 8010cce:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8010cd2:	ee76 6a86 	vadd.f32	s13, s13, s12
 8010cd6:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8010cda:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010cde:	edc5 6a07 	vstr	s13, [r5, #28]
 8010ce2:	441a      	add	r2, r3
 8010ce4:	696b      	ldr	r3, [r5, #20]
 8010ce6:	3301      	adds	r3, #1
 8010ce8:	602a      	str	r2, [r5, #0]
 8010cea:	616b      	str	r3, [r5, #20]
 8010cec:	69ab      	ldr	r3, [r5, #24]
 8010cee:	3b01      	subs	r3, #1
 8010cf0:	61ab      	str	r3, [r5, #24]
 8010cf2:	692b      	ldr	r3, [r5, #16]
 8010cf4:	440b      	add	r3, r1
 8010cf6:	68e9      	ldr	r1, [r5, #12]
 8010cf8:	428b      	cmp	r3, r1
 8010cfa:	612b      	str	r3, [r5, #16]
 8010cfc:	db15      	blt.n	8010d2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8010cfe:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8010d02:	3201      	adds	r2, #1
 8010d04:	1a5b      	subs	r3, r3, r1
 8010d06:	ee76 6a26 	vadd.f32	s13, s12, s13
 8010d0a:	602a      	str	r2, [r5, #0]
 8010d0c:	612b      	str	r3, [r5, #16]
 8010d0e:	edc5 6a07 	vstr	s13, [r5, #28]
 8010d12:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8010d16:	ee36 7a87 	vadd.f32	s14, s13, s14
 8010d1a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8010d1e:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8010d22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010d26:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8010d2a:	3f01      	subs	r7, #1
 8010d2c:	e757      	b.n	8010bde <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8010d2e:	ad39      	add	r5, sp, #228	; 0xe4
 8010d30:	ac19      	add	r4, sp, #100	; 0x64
 8010d32:	e72d      	b.n	8010b90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8010d34:	4613      	mov	r3, r2
 8010d36:	e744      	b.n	8010bc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8010d38:	4613      	mov	r3, r2
 8010d3a:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8010d3c:	469e      	mov	lr, r3
 8010d3e:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8010d42:	461f      	mov	r7, r3
 8010d44:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8010d48:	f04f 0900 	mov.w	r9, #0
 8010d4c:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8010d50:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8010d54:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8010d58:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8010d5c:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8010d60:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8010d62:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8010d66:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8010d6a:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8010d6e:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8010d72:	960e      	str	r6, [sp, #56]	; 0x38
 8010d74:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8010d78:	2f00      	cmp	r7, #0
 8010d7a:	d146      	bne.n	8010e0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8010d7c:	449c      	add	ip, r3
 8010d7e:	1ad7      	subs	r7, r2, r3
 8010d80:	f1b9 0f00 	cmp.w	r9, #0
 8010d84:	d009      	beq.n	8010d9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8010d86:	9039      	str	r0, [sp, #228]	; 0xe4
 8010d88:	913d      	str	r1, [sp, #244]	; 0xf4
 8010d8a:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8010d8e:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8010d92:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8010d96:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8010d9a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8010d9c:	f04f 0800 	mov.w	r8, #0
 8010da0:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8010da4:	910e      	str	r1, [sp, #56]	; 0x38
 8010da6:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8010daa:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8010dae:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8010db2:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8010db6:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8010dba:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8010dbe:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8010dc2:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8010dc6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8010dca:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8010dce:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8010dd2:	f1be 0f00 	cmp.w	lr, #0
 8010dd6:	d030      	beq.n	8010e3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8010dd8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8010dda:	4450      	add	r0, sl
 8010ddc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8010de0:	4431      	add	r1, r6
 8010de2:	ee37 7a04 	vadd.f32	s14, s14, s8
 8010de6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8010dea:	4549      	cmp	r1, r9
 8010dec:	db08      	blt.n	8010e00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8010dee:	ee77 7a85 	vadd.f32	s15, s15, s10
 8010df2:	3001      	adds	r0, #1
 8010df4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8010df8:	eba1 0109 	sub.w	r1, r1, r9
 8010dfc:	ee37 7a06 	vadd.f32	s14, s14, s12
 8010e00:	f10e 3eff 	add.w	lr, lr, #4294967295
 8010e04:	f04f 0801 	mov.w	r8, #1
 8010e08:	e7e3      	b.n	8010dd2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8010e0a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8010e0c:	4450      	add	r0, sl
 8010e0e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8010e12:	4431      	add	r1, r6
 8010e14:	ee77 7a84 	vadd.f32	s15, s15, s8
 8010e18:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8010e1c:	4541      	cmp	r1, r8
 8010e1e:	db08      	blt.n	8010e32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8010e20:	ee76 6a85 	vadd.f32	s13, s13, s10
 8010e24:	3001      	adds	r0, #1
 8010e26:	ee37 7a25 	vadd.f32	s14, s14, s11
 8010e2a:	eba1 0108 	sub.w	r1, r1, r8
 8010e2e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8010e32:	3f01      	subs	r7, #1
 8010e34:	f04f 0901 	mov.w	r9, #1
 8010e38:	e79e      	b.n	8010d78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8010e3a:	449c      	add	ip, r3
 8010e3c:	1aff      	subs	r7, r7, r3
 8010e3e:	f1b8 0f00 	cmp.w	r8, #0
 8010e42:	d009      	beq.n	8010e58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8010e44:	9019      	str	r0, [sp, #100]	; 0x64
 8010e46:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8010e4a:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8010e4e:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8010e52:	911d      	str	r1, [sp, #116]	; 0x74
 8010e54:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8010e58:	1ad2      	subs	r2, r2, r3
 8010e5a:	e6b5      	b.n	8010bc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8010e5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	b923      	cbnz	r3, 8010e6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010e62:	4b04      	ldr	r3, [pc, #16]	; (8010e74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8010e64:	6818      	ldr	r0, [r3, #0]
 8010e66:	6803      	ldr	r3, [r0, #0]
 8010e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e6a:	4798      	blx	r3
 8010e6c:	b05b      	add	sp, #364	; 0x16c
 8010e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e72:	bf00      	nop
 8010e74:	2400e454 	.word	0x2400e454

08010e78 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8010e78:	b570      	push	{r4, r5, r6, lr}
 8010e7a:	4604      	mov	r4, r0
 8010e7c:	2500      	movs	r5, #0
 8010e7e:	9805      	ldr	r0, [sp, #20]
 8010e80:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8010e84:	6061      	str	r1, [r4, #4]
 8010e86:	8263      	strh	r3, [r4, #18]
 8010e88:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8010e8c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8010e90:	8025      	strh	r5, [r4, #0]
 8010e92:	7221      	strb	r1, [r4, #8]
 8010e94:	7266      	strb	r6, [r4, #9]
 8010e96:	60e0      	str	r0, [r4, #12]
 8010e98:	8222      	strh	r2, [r4, #16]
 8010e9a:	82a3      	strh	r3, [r4, #20]
 8010e9c:	82e5      	strh	r5, [r4, #22]
 8010e9e:	8325      	strh	r5, [r4, #24]
 8010ea0:	8365      	strh	r5, [r4, #26]
 8010ea2:	83a5      	strh	r5, [r4, #28]
 8010ea4:	83e5      	strh	r5, [r4, #30]
 8010ea6:	8425      	strh	r5, [r4, #32]
 8010ea8:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8010eac:	b32e      	cbz	r6, 8010efa <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8010eae:	6803      	ldr	r3, [r0, #0]
 8010eb0:	695b      	ldr	r3, [r3, #20]
 8010eb2:	4798      	blx	r3
 8010eb4:	4606      	mov	r6, r0
 8010eb6:	b300      	cbz	r0, 8010efa <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8010eb8:	68e0      	ldr	r0, [r4, #12]
 8010eba:	4631      	mov	r1, r6
 8010ebc:	6803      	ldr	r3, [r0, #0]
 8010ebe:	68db      	ldr	r3, [r3, #12]
 8010ec0:	4798      	blx	r3
 8010ec2:	4605      	mov	r5, r0
 8010ec4:	b1c8      	cbz	r0, 8010efa <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8010ec6:	7b43      	ldrb	r3, [r0, #13]
 8010ec8:	7a82      	ldrb	r2, [r0, #10]
 8010eca:	005b      	lsls	r3, r3, #1
 8010ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ed0:	4313      	orrs	r3, r2
 8010ed2:	8423      	strh	r3, [r4, #32]
 8010ed4:	7a63      	ldrb	r3, [r4, #9]
 8010ed6:	2b06      	cmp	r3, #6
 8010ed8:	d10f      	bne.n	8010efa <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8010eda:	68e0      	ldr	r0, [r4, #12]
 8010edc:	462a      	mov	r2, r5
 8010ede:	4631      	mov	r1, r6
 8010ee0:	6803      	ldr	r3, [r0, #0]
 8010ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ee4:	4798      	blx	r3
 8010ee6:	7b6b      	ldrb	r3, [r5, #13]
 8010ee8:	005b      	lsls	r3, r3, #1
 8010eea:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8010eee:	7aab      	ldrb	r3, [r5, #10]
 8010ef0:	4313      	orrs	r3, r2
 8010ef2:	4418      	add	r0, r3
 8010ef4:	8c23      	ldrh	r3, [r4, #32]
 8010ef6:	4418      	add	r0, r3
 8010ef8:	8420      	strh	r0, [r4, #32]
 8010efa:	4620      	mov	r0, r4
 8010efc:	bd70      	pop	{r4, r5, r6, pc}

08010efe <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8010efe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f02:	2400      	movs	r4, #0
 8010f04:	b085      	sub	sp, #20
 8010f06:	4681      	mov	r9, r0
 8010f08:	4688      	mov	r8, r1
 8010f0a:	4692      	mov	sl, r2
 8010f0c:	469b      	mov	fp, r3
 8010f0e:	4627      	mov	r7, r4
 8010f10:	4625      	mov	r5, r4
 8010f12:	4626      	mov	r6, r4
 8010f14:	4554      	cmp	r4, sl
 8010f16:	da2a      	bge.n	8010f6e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8010f18:	2300      	movs	r3, #0
 8010f1a:	9303      	str	r3, [sp, #12]
 8010f1c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8010f20:	429d      	cmp	r5, r3
 8010f22:	d004      	beq.n	8010f2e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8010f24:	f242 030b 	movw	r3, #8203	; 0x200b
 8010f28:	429d      	cmp	r5, r3
 8010f2a:	bf18      	it	ne
 8010f2c:	462f      	movne	r7, r5
 8010f2e:	ab03      	add	r3, sp, #12
 8010f30:	4642      	mov	r2, r8
 8010f32:	4659      	mov	r1, fp
 8010f34:	4648      	mov	r0, r9
 8010f36:	f002 ffa3 	bl	8013e80 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8010f3a:	4605      	mov	r5, r0
 8010f3c:	b1b8      	cbz	r0, 8010f6e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8010f3e:	280a      	cmp	r0, #10
 8010f40:	d015      	beq.n	8010f6e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8010f42:	9a03      	ldr	r2, [sp, #12]
 8010f44:	b18a      	cbz	r2, 8010f6a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8010f46:	7b50      	ldrb	r0, [r2, #13]
 8010f48:	4639      	mov	r1, r7
 8010f4a:	7a93      	ldrb	r3, [r2, #10]
 8010f4c:	0040      	lsls	r0, r0, #1
 8010f4e:	8895      	ldrh	r5, [r2, #4]
 8010f50:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8010f54:	4303      	orrs	r3, r0
 8010f56:	4640      	mov	r0, r8
 8010f58:	9301      	str	r3, [sp, #4]
 8010f5a:	f8d8 3000 	ldr.w	r3, [r8]
 8010f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f60:	4798      	blx	r3
 8010f62:	9b01      	ldr	r3, [sp, #4]
 8010f64:	4418      	add	r0, r3
 8010f66:	4406      	add	r6, r0
 8010f68:	b2b6      	uxth	r6, r6
 8010f6a:	3401      	adds	r4, #1
 8010f6c:	e7d2      	b.n	8010f14 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8010f6e:	4630      	mov	r0, r6
 8010f70:	b005      	add	sp, #20
 8010f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010f76 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8010f76:	2a02      	cmp	r2, #2
 8010f78:	b530      	push	{r4, r5, lr}
 8010f7a:	d011      	beq.n	8010fa0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8010f7c:	2a03      	cmp	r2, #3
 8010f7e:	d01c      	beq.n	8010fba <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8010f80:	2a01      	cmp	r2, #1
 8010f82:	d10c      	bne.n	8010f9e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8010f84:	888b      	ldrh	r3, [r1, #4]
 8010f86:	8801      	ldrh	r1, [r0, #0]
 8010f88:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8010f8c:	1a5b      	subs	r3, r3, r1
 8010f8e:	8844      	ldrh	r4, [r0, #2]
 8010f90:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8010f94:	1a9b      	subs	r3, r3, r2
 8010f96:	8004      	strh	r4, [r0, #0]
 8010f98:	8081      	strh	r1, [r0, #4]
 8010f9a:	8043      	strh	r3, [r0, #2]
 8010f9c:	80c2      	strh	r2, [r0, #6]
 8010f9e:	bd30      	pop	{r4, r5, pc}
 8010fa0:	88cb      	ldrh	r3, [r1, #6]
 8010fa2:	8842      	ldrh	r2, [r0, #2]
 8010fa4:	1a9b      	subs	r3, r3, r2
 8010fa6:	88c2      	ldrh	r2, [r0, #6]
 8010fa8:	1a9b      	subs	r3, r3, r2
 8010faa:	888a      	ldrh	r2, [r1, #4]
 8010fac:	8801      	ldrh	r1, [r0, #0]
 8010fae:	8043      	strh	r3, [r0, #2]
 8010fb0:	1a52      	subs	r2, r2, r1
 8010fb2:	8881      	ldrh	r1, [r0, #4]
 8010fb4:	1a52      	subs	r2, r2, r1
 8010fb6:	8002      	strh	r2, [r0, #0]
 8010fb8:	e7f1      	b.n	8010f9e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8010fba:	88cb      	ldrh	r3, [r1, #6]
 8010fbc:	8841      	ldrh	r1, [r0, #2]
 8010fbe:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8010fc2:	1a5b      	subs	r3, r3, r1
 8010fc4:	f9b0 5000 	ldrsh.w	r5, [r0]
 8010fc8:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8010fcc:	1a9b      	subs	r3, r3, r2
 8010fce:	8045      	strh	r5, [r0, #2]
 8010fd0:	8082      	strh	r2, [r0, #4]
 8010fd2:	8003      	strh	r3, [r0, #0]
 8010fd4:	80c4      	strh	r4, [r0, #6]
 8010fd6:	e7e2      	b.n	8010f9e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08010fd8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8010fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fdc:	b09f      	sub	sp, #124	; 0x7c
 8010fde:	9116      	str	r1, [sp, #88]	; 0x58
 8010fe0:	9317      	str	r3, [sp, #92]	; 0x5c
 8010fe2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8010fe4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8010fe6:	8809      	ldrh	r1, [r1, #0]
 8010fe8:	889b      	ldrh	r3, [r3, #4]
 8010fea:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8010fee:	440b      	add	r3, r1
 8010ff0:	9212      	str	r2, [sp, #72]	; 0x48
 8010ff2:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8010ff6:	b21b      	sxth	r3, r3
 8010ff8:	9011      	str	r0, [sp, #68]	; 0x44
 8010ffa:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8010ffe:	9310      	str	r3, [sp, #64]	; 0x40
 8011000:	f8d8 3000 	ldr.w	r3, [r8]
 8011004:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
 8011008:	7b19      	ldrb	r1, [r3, #12]
 801100a:	7adb      	ldrb	r3, [r3, #11]
 801100c:	9114      	str	r1, [sp, #80]	; 0x50
 801100e:	9315      	str	r3, [sp, #84]	; 0x54
 8011010:	2a00      	cmp	r2, #0
 8011012:	d06a      	beq.n	80110ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8011014:	f898 3010 	ldrb.w	r3, [r8, #16]
 8011018:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801101a:	2b06      	cmp	r3, #6
 801101c:	bf14      	ite	ne
 801101e:	2301      	movne	r3, #1
 8011020:	2302      	moveq	r3, #2
 8011022:	4413      	add	r3, r2
 8011024:	f04f 0900 	mov.w	r9, #0
 8011028:	930f      	str	r3, [sp, #60]	; 0x3c
 801102a:	464c      	mov	r4, r9
 801102c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8011030:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8011034:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8011038:	4293      	cmp	r3, r2
 801103a:	f280 808f 	bge.w	801115c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801103e:	2300      	movs	r3, #0
 8011040:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 8011044:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8011048:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801104c:	429c      	cmp	r4, r3
 801104e:	d006      	beq.n	801105e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8011050:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011052:	f242 020b 	movw	r2, #8203	; 0x200b
 8011056:	4294      	cmp	r4, r2
 8011058:	bf18      	it	ne
 801105a:	4623      	movne	r3, r4
 801105c:	930d      	str	r3, [sp, #52]	; 0x34
 801105e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011060:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8011062:	f8d8 2000 	ldr.w	r2, [r8]
 8011066:	428b      	cmp	r3, r1
 8011068:	db41      	blt.n	80110ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 801106a:	6813      	ldr	r3, [r2, #0]
 801106c:	4610      	mov	r0, r2
 801106e:	695b      	ldr	r3, [r3, #20]
 8011070:	4798      	blx	r3
 8011072:	4604      	mov	r4, r0
 8011074:	f8d8 0000 	ldr.w	r0, [r8]
 8011078:	aa1d      	add	r2, sp, #116	; 0x74
 801107a:	4621      	mov	r1, r4
 801107c:	6803      	ldr	r3, [r0, #0]
 801107e:	689d      	ldr	r5, [r3, #8]
 8011080:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8011084:	47a8      	blx	r5
 8011086:	901c      	str	r0, [sp, #112]	; 0x70
 8011088:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801108c:	429c      	cmp	r4, r3
 801108e:	f000 80ec 	beq.w	801126a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8011092:	f242 030b 	movw	r3, #8203	; 0x200b
 8011096:	429c      	cmp	r4, r3
 8011098:	f000 80e7 	beq.w	801126a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801109c:	2c00      	cmp	r4, #0
 801109e:	f000 80f9 	beq.w	8011294 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 80110a2:	2c0a      	cmp	r4, #10
 80110a4:	d060      	beq.n	8011168 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 80110a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80110a8:	b36a      	cbz	r2, 8011106 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 80110aa:	8894      	ldrh	r4, [r2, #4]
 80110ac:	f1bb 0f00 	cmp.w	fp, #0
 80110b0:	d03b      	beq.n	801112a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 80110b2:	f892 900d 	ldrb.w	r9, [r2, #13]
 80110b6:	f1bb 0f01 	cmp.w	fp, #1
 80110ba:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80110be:	f409 7380 	and.w	r3, r9, #256	; 0x100
 80110c2:	f892 900a 	ldrb.w	r9, [r2, #10]
 80110c6:	ea49 0903 	orr.w	r9, r9, r3
 80110ca:	d134      	bne.n	8011136 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 80110cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80110ce:	eba6 0609 	sub.w	r6, r6, r9
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d14f      	bne.n	8011176 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 80110d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80110d8:	eb09 0306 	add.w	r3, r9, r6
 80110dc:	4413      	add	r3, r2
 80110de:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80110e0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80110e4:	4293      	cmp	r3, r2
 80110e6:	da51      	bge.n	801118c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 80110e8:	e038      	b.n	801115c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 80110ea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80110ec:	e79a      	b.n	8011024 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 80110ee:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80110f2:	4659      	mov	r1, fp
 80110f4:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80110f6:	9301      	str	r3, [sp, #4]
 80110f8:	ab1d      	add	r3, sp, #116	; 0x74
 80110fa:	9300      	str	r3, [sp, #0]
 80110fc:	ab1c      	add	r3, sp, #112	; 0x70
 80110fe:	f002 ff08 	bl	8013f12 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8011102:	4604      	mov	r4, r0
 8011104:	e7c0      	b.n	8011088 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8011106:	f8d8 0000 	ldr.w	r0, [r8]
 801110a:	6803      	ldr	r3, [r0, #0]
 801110c:	691b      	ldr	r3, [r3, #16]
 801110e:	4798      	blx	r3
 8011110:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8011114:	4298      	cmp	r0, r3
 8011116:	f000 80a8 	beq.w	801126a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801111a:	f242 030b 	movw	r3, #8203	; 0x200b
 801111e:	4298      	cmp	r0, r3
 8011120:	f000 80a3 	beq.w	801126a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8011124:	f1bb 0f00 	cmp.w	fp, #0
 8011128:	d100      	bne.n	801112c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801112a:	444e      	add	r6, r9
 801112c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801112e:	2a00      	cmp	r2, #0
 8011130:	d1bf      	bne.n	80110b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8011132:	4691      	mov	r9, r2
 8011134:	e099      	b.n	801126a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8011136:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011138:	2b00      	cmp	r3, #0
 801113a:	f000 80ad 	beq.w	8011298 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
 801113e:	f1bb 0f00 	cmp.w	fp, #0
 8011142:	d118      	bne.n	8011176 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8011144:	f8d8 0000 	ldr.w	r0, [r8]
 8011148:	990d      	ldr	r1, [sp, #52]	; 0x34
 801114a:	6803      	ldr	r3, [r0, #0]
 801114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801114e:	4798      	blx	r3
 8011150:	4406      	add	r6, r0
 8011152:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011154:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011156:	1af3      	subs	r3, r6, r3
 8011158:	4293      	cmp	r3, r2
 801115a:	dd17      	ble.n	801118c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 801115c:	2c00      	cmp	r4, #0
 801115e:	f000 8099 	beq.w	8011294 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8011162:	2c0a      	cmp	r4, #10
 8011164:	f040 8087 	bne.w	8011276 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 8011168:	240a      	movs	r4, #10
 801116a:	fab4 f084 	clz	r0, r4
 801116e:	0940      	lsrs	r0, r0, #5
 8011170:	b01f      	add	sp, #124	; 0x7c
 8011172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011176:	f8d8 0000 	ldr.w	r0, [r8]
 801117a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801117c:	6803      	ldr	r3, [r0, #0]
 801117e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011180:	4798      	blx	r3
 8011182:	f1bb 0f01 	cmp.w	fp, #1
 8011186:	eba6 0600 	sub.w	r6, r6, r0
 801118a:	d0a4      	beq.n	80110d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 801118c:	981c      	ldr	r0, [sp, #112]	; 0x70
 801118e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8011190:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8011194:	f9b3 7000 	ldrsh.w	r7, [r3]
 8011198:	7b43      	ldrb	r3, [r0, #13]
 801119a:	4431      	add	r1, r6
 801119c:	015b      	lsls	r3, r3, #5
 801119e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80111a2:	7983      	ldrb	r3, [r0, #6]
 80111a4:	4313      	orrs	r3, r2
 80111a6:	440b      	add	r3, r1
 80111a8:	42bb      	cmp	r3, r7
 80111aa:	db5e      	blt.n	801126a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80111ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80111ae:	4299      	cmp	r1, r3
 80111b0:	da5b      	bge.n	801126a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80111b2:	f8d8 0000 	ldr.w	r0, [r8]
 80111b6:	42b7      	cmp	r7, r6
 80111b8:	6803      	ldr	r3, [r0, #0]
 80111ba:	bfcc      	ite	gt
 80111bc:	1bbf      	subgt	r7, r7, r6
 80111be:	2700      	movle	r7, #0
 80111c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111c2:	bfc8      	it	gt
 80111c4:	b2bf      	uxthgt	r7, r7
 80111c6:	4798      	blx	r3
 80111c8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80111ca:	7b5a      	ldrb	r2, [r3, #13]
 80111cc:	00d1      	lsls	r1, r2, #3
 80111ce:	f401 7580 	and.w	r5, r1, #256	; 0x100
 80111d2:	7a19      	ldrb	r1, [r3, #8]
 80111d4:	4329      	orrs	r1, r5
 80111d6:	0655      	lsls	r5, r2, #25
 80111d8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80111da:	bf48      	it	mi
 80111dc:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 80111e0:	4405      	add	r5, r0
 80111e2:	bf48      	it	mi
 80111e4:	b209      	sxthmi	r1, r1
 80111e6:	1a6d      	subs	r5, r5, r1
 80111e8:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80111ea:	b2ad      	uxth	r5, r5
 80111ec:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80111f0:	fa0f fa85 	sxth.w	sl, r5
 80111f4:	4551      	cmp	r1, sl
 80111f6:	dd3c      	ble.n	8011272 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 80111f8:	0112      	lsls	r2, r2, #4
 80111fa:	79d8      	ldrb	r0, [r3, #7]
 80111fc:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8011200:	4302      	orrs	r2, r0
 8011202:	4492      	add	sl, r2
 8011204:	4551      	cmp	r1, sl
 8011206:	dc30      	bgt.n	801126a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8011208:	1b4d      	subs	r5, r1, r5
 801120a:	468a      	mov	sl, r1
 801120c:	b22d      	sxth	r5, r5
 801120e:	9319      	str	r3, [sp, #100]	; 0x64
 8011210:	b2ad      	uxth	r5, r5
 8011212:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011214:	f8d8 0000 	ldr.w	r0, [r8]
 8011218:	681a      	ldr	r2, [r3, #0]
 801121a:	6801      	ldr	r1, [r0, #0]
 801121c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 801121e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011220:	9313      	str	r3, [sp, #76]	; 0x4c
 8011222:	9218      	str	r2, [sp, #96]	; 0x60
 8011224:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011226:	4788      	blx	r1
 8011228:	f898 1006 	ldrb.w	r1, [r8, #6]
 801122c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801122e:	910b      	str	r1, [sp, #44]	; 0x2c
 8011230:	f898 100e 	ldrb.w	r1, [r8, #14]
 8011234:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011236:	910a      	str	r1, [sp, #40]	; 0x28
 8011238:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801123c:	9109      	str	r1, [sp, #36]	; 0x24
 801123e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8011242:	9305      	str	r3, [sp, #20]
 8011244:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8011246:	9206      	str	r2, [sp, #24]
 8011248:	9304      	str	r3, [sp, #16]
 801124a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801124c:	f8cd a004 	str.w	sl, [sp, #4]
 8011250:	e9cd 7502 	strd	r7, r5, [sp, #8]
 8011254:	4437      	add	r7, r6
 8011256:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8011258:	b23f      	sxth	r7, r7
 801125a:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801125e:	9700      	str	r7, [sp, #0]
 8011260:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011262:	681a      	ldr	r2, [r3, #0]
 8011264:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011266:	685b      	ldr	r3, [r3, #4]
 8011268:	47a8      	blx	r5
 801126a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801126c:	3301      	adds	r3, #1
 801126e:	930e      	str	r3, [sp, #56]	; 0x38
 8011270:	e6e0      	b.n	8011034 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 8011272:	2500      	movs	r5, #0
 8011274:	e7cb      	b.n	801120e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 8011276:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8011278:	3501      	adds	r5, #1
 801127a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801127c:	429d      	cmp	r5, r3
 801127e:	f6bf af74 	bge.w	801116a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8011282:	4659      	mov	r1, fp
 8011284:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8011286:	f7f1 fc31 	bl	8002aec <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801128a:	4604      	mov	r4, r0
 801128c:	b110      	cbz	r0, 8011294 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801128e:	280a      	cmp	r0, #10
 8011290:	d1f2      	bne.n	8011278 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
 8011292:	e769      	b.n	8011168 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8011294:	2400      	movs	r4, #0
 8011296:	e768      	b.n	801116a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8011298:	f1bb 0f00 	cmp.w	fp, #0
 801129c:	f43f af59 	beq.w	8011152 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 80112a0:	e774      	b.n	801118c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

080112a2 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 80112a2:	b530      	push	{r4, r5, lr}
 80112a4:	8ac4      	ldrh	r4, [r0, #22]
 80112a6:	8b45      	ldrh	r5, [r0, #26]
 80112a8:	8343      	strh	r3, [r0, #26]
 80112aa:	442c      	add	r4, r5
 80112ac:	1ae4      	subs	r4, r4, r3
 80112ae:	8b83      	ldrh	r3, [r0, #28]
 80112b0:	82c4      	strh	r4, [r0, #22]
 80112b2:	8b04      	ldrh	r4, [r0, #24]
 80112b4:	4422      	add	r2, r4
 80112b6:	440c      	add	r4, r1
 80112b8:	1a59      	subs	r1, r3, r1
 80112ba:	83c2      	strh	r2, [r0, #30]
 80112bc:	8304      	strh	r4, [r0, #24]
 80112be:	8381      	strh	r1, [r0, #28]
 80112c0:	bd30      	pop	{r4, r5, pc}

080112c2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 80112c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112c6:	4604      	mov	r4, r0
 80112c8:	8a47      	ldrh	r7, [r0, #18]
 80112ca:	68c0      	ldr	r0, [r0, #12]
 80112cc:	b085      	sub	sp, #20
 80112ce:	6803      	ldr	r3, [r0, #0]
 80112d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112d2:	4798      	blx	r3
 80112d4:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 80112d8:	7a63      	ldrb	r3, [r4, #9]
 80112da:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 80112de:	3b01      	subs	r3, #1
 80112e0:	42b7      	cmp	r7, r6
 80112e2:	bfac      	ite	ge
 80112e4:	f04f 0900 	movge.w	r9, #0
 80112e8:	f04f 0901 	movlt.w	r9, #1
 80112ec:	2b05      	cmp	r3, #5
 80112ee:	d804      	bhi.n	80112fa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 80112f0:	e8df f003 	tbb	[pc, r3]
 80112f4:	470f0854 	.word	0x470f0854
 80112f8:	4c4c      	.short	0x4c4c
 80112fa:	2500      	movs	r5, #0
 80112fc:	46a9      	mov	r9, r5
 80112fe:	462e      	mov	r6, r5
 8011300:	462f      	mov	r7, r5
 8011302:	e00e      	b.n	8011322 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8011304:	42b7      	cmp	r7, r6
 8011306:	f04f 0500 	mov.w	r5, #0
 801130a:	bfb4      	ite	lt
 801130c:	2600      	movlt	r6, #0
 801130e:	2601      	movge	r6, #1
 8011310:	e7f6      	b.n	8011300 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8011312:	42b7      	cmp	r7, r6
 8011314:	464d      	mov	r5, r9
 8011316:	f04f 0900 	mov.w	r9, #0
 801131a:	bfb4      	ite	lt
 801131c:	2600      	movlt	r6, #0
 801131e:	2601      	movge	r6, #1
 8011320:	464f      	mov	r7, r9
 8011322:	f04f 0800 	mov.w	r8, #0
 8011326:	f8a4 8016 	strh.w	r8, [r4, #22]
 801132a:	f8a4 8018 	strh.w	r8, [r4, #24]
 801132e:	f8cd 8004 	str.w	r8, [sp, #4]
 8011332:	2300      	movs	r3, #0
 8011334:	9303      	str	r3, [sp, #12]
 8011336:	8823      	ldrh	r3, [r4, #0]
 8011338:	2b20      	cmp	r3, #32
 801133a:	d033      	beq.n	80113a4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 801133c:	f242 010b 	movw	r1, #8203	; 0x200b
 8011340:	1a5a      	subs	r2, r3, r1
 8011342:	f1d2 0a00 	rsbs	sl, r2, #0
 8011346:	eb4a 0a02 	adc.w	sl, sl, r2
 801134a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801134e:	4293      	cmp	r3, r2
 8011350:	d008      	beq.n	8011364 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8011352:	428b      	cmp	r3, r1
 8011354:	9a01      	ldr	r2, [sp, #4]
 8011356:	bf0e      	itee	eq
 8011358:	f04f 0a01 	moveq.w	sl, #1
 801135c:	461a      	movne	r2, r3
 801135e:	f04f 0a00 	movne.w	sl, #0
 8011362:	9201      	str	r2, [sp, #4]
 8011364:	ab03      	add	r3, sp, #12
 8011366:	68e2      	ldr	r2, [r4, #12]
 8011368:	7a21      	ldrb	r1, [r4, #8]
 801136a:	6860      	ldr	r0, [r4, #4]
 801136c:	f002 fd88 	bl	8013e80 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8011370:	8020      	strh	r0, [r4, #0]
 8011372:	b9d8      	cbnz	r0, 80113ac <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 8011374:	8ba2      	ldrh	r2, [r4, #28]
 8011376:	2300      	movs	r3, #0
 8011378:	4611      	mov	r1, r2
 801137a:	4620      	mov	r0, r4
 801137c:	f7ff ff91 	bl	80112a2 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8011380:	e06e      	b.n	8011460 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8011382:	2500      	movs	r5, #0
 8011384:	2701      	movs	r7, #1
 8011386:	46a9      	mov	r9, r5
 8011388:	462e      	mov	r6, r5
 801138a:	e7ca      	b.n	8011322 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801138c:	42b7      	cmp	r7, r6
 801138e:	f04f 0500 	mov.w	r5, #0
 8011392:	bfb4      	ite	lt
 8011394:	2700      	movlt	r7, #0
 8011396:	2701      	movge	r7, #1
 8011398:	462e      	mov	r6, r5
 801139a:	e7c2      	b.n	8011322 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801139c:	2500      	movs	r5, #0
 801139e:	2601      	movs	r6, #1
 80113a0:	46a9      	mov	r9, r5
 80113a2:	e7ad      	b.n	8011300 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 80113a4:	9301      	str	r3, [sp, #4]
 80113a6:	f04f 0a01 	mov.w	sl, #1
 80113aa:	e7db      	b.n	8011364 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 80113ac:	8b63      	ldrh	r3, [r4, #26]
 80113ae:	280a      	cmp	r0, #10
 80113b0:	f103 0301 	add.w	r3, r3, #1
 80113b4:	8363      	strh	r3, [r4, #26]
 80113b6:	d0dd      	beq.n	8011374 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 80113b8:	9a03      	ldr	r2, [sp, #12]
 80113ba:	bb62      	cbnz	r2, 8011416 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 80113bc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80113c0:	4298      	cmp	r0, r3
 80113c2:	d003      	beq.n	80113cc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 80113c4:	f242 030b 	movw	r3, #8203	; 0x200b
 80113c8:	4298      	cmp	r0, r3
 80113ca:	d1b2      	bne.n	8011332 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80113cc:	8823      	ldrh	r3, [r4, #0]
 80113ce:	8ba1      	ldrh	r1, [r4, #28]
 80113d0:	2b20      	cmp	r3, #32
 80113d2:	d003      	beq.n	80113dc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 80113d4:	f242 000b 	movw	r0, #8203	; 0x200b
 80113d8:	4283      	cmp	r3, r0
 80113da:	d131      	bne.n	8011440 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 80113dc:	f1ba 0f00 	cmp.w	sl, #0
 80113e0:	bf0a      	itet	eq
 80113e2:	4688      	moveq	r8, r1
 80113e4:	4650      	movne	r0, sl
 80113e6:	2001      	moveq	r0, #1
 80113e8:	440a      	add	r2, r1
 80113ea:	8b23      	ldrh	r3, [r4, #24]
 80113ec:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80113f0:	b292      	uxth	r2, r2
 80113f2:	83a2      	strh	r2, [r4, #28]
 80113f4:	4413      	add	r3, r2
 80113f6:	f1b9 0f00 	cmp.w	r9, #0
 80113fa:	d102      	bne.n	8011402 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 80113fc:	2d00      	cmp	r5, #0
 80113fe:	d042      	beq.n	8011486 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 8011400:	b300      	cbz	r0, 8011444 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 8011402:	8c21      	ldrh	r1, [r4, #32]
 8011404:	4419      	add	r1, r3
 8011406:	458c      	cmp	ip, r1
 8011408:	da37      	bge.n	801147a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801140a:	8ae1      	ldrh	r1, [r4, #22]
 801140c:	2900      	cmp	r1, #0
 801140e:	d034      	beq.n	801147a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8011410:	4563      	cmp	r3, ip
 8011412:	dd8e      	ble.n	8011332 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8011414:	e01d      	b.n	8011452 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 8011416:	8893      	ldrh	r3, [r2, #4]
 8011418:	9901      	ldr	r1, [sp, #4]
 801141a:	8023      	strh	r3, [r4, #0]
 801141c:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8011420:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8011424:	f40b 7080 	and.w	r0, fp, #256	; 0x100
 8011428:	f892 b00a 	ldrb.w	fp, [r2, #10]
 801142c:	ea4b 0b00 	orr.w	fp, fp, r0
 8011430:	68e0      	ldr	r0, [r4, #12]
 8011432:	6803      	ldr	r3, [r0, #0]
 8011434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011436:	4798      	blx	r3
 8011438:	eb0b 0200 	add.w	r2, fp, r0
 801143c:	b292      	uxth	r2, r2
 801143e:	e7c5      	b.n	80113cc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8011440:	2000      	movs	r0, #0
 8011442:	e7d1      	b.n	80113e8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 8011444:	4563      	cmp	r3, ip
 8011446:	f77f af74 	ble.w	8011332 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801144a:	8ae3      	ldrh	r3, [r4, #22]
 801144c:	2b00      	cmp	r3, #0
 801144e:	f43f af70 	beq.w	8011332 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8011452:	2301      	movs	r3, #1
 8011454:	8c22      	ldrh	r2, [r4, #32]
 8011456:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 801145a:	8be3      	ldrh	r3, [r4, #30]
 801145c:	4413      	add	r3, r2
 801145e:	83e3      	strh	r3, [r4, #30]
 8011460:	68e0      	ldr	r0, [r4, #12]
 8011462:	6803      	ldr	r3, [r0, #0]
 8011464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011466:	4798      	blx	r3
 8011468:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801146c:	4418      	add	r0, r3
 801146e:	8a63      	ldrh	r3, [r4, #18]
 8011470:	1a18      	subs	r0, r3, r0
 8011472:	8260      	strh	r0, [r4, #18]
 8011474:	b005      	add	sp, #20
 8011476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801147a:	2300      	movs	r3, #0
 801147c:	4611      	mov	r1, r2
 801147e:	4620      	mov	r0, r4
 8011480:	f7ff ff0f 	bl	80112a2 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8011484:	e755      	b.n	8011332 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8011486:	4563      	cmp	r3, ip
 8011488:	dd14      	ble.n	80114b4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 801148a:	b117      	cbz	r7, 8011492 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 801148c:	2301      	movs	r3, #1
 801148e:	460a      	mov	r2, r1
 8011490:	e772      	b.n	8011378 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 8011492:	2e00      	cmp	r6, #0
 8011494:	f43f af4d 	beq.w	8011332 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8011498:	2800      	cmp	r0, #0
 801149a:	f47f af4a 	bne.w	8011332 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801149e:	f1ba 0f00 	cmp.w	sl, #0
 80114a2:	d002      	beq.n	80114aa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 80114a4:	2301      	movs	r3, #1
 80114a6:	4642      	mov	r2, r8
 80114a8:	e767      	b.n	801137a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 80114aa:	8ae3      	ldrh	r3, [r4, #22]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	f43f af40 	beq.w	8011332 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80114b2:	e7d5      	b.n	8011460 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 80114b4:	2800      	cmp	r0, #0
 80114b6:	f47f af3c 	bne.w	8011332 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80114ba:	f1ba 0f00 	cmp.w	sl, #0
 80114be:	f43f af38 	beq.w	8011332 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80114c2:	2301      	movs	r3, #1
 80114c4:	4642      	mov	r2, r8
 80114c6:	e7da      	b.n	801147e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

080114c8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 80114c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114ca:	4605      	mov	r5, r0
 80114cc:	b08f      	sub	sp, #60	; 0x3c
 80114ce:	4617      	mov	r7, r2
 80114d0:	461c      	mov	r4, r3
 80114d2:	460e      	mov	r6, r1
 80114d4:	b1d1      	cbz	r1, 801150c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	4620      	mov	r0, r4
 80114da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114dc:	4798      	blx	r3
 80114de:	4240      	negs	r0, r0
 80114e0:	9603      	str	r6, [sp, #12]
 80114e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80114e6:	b200      	sxth	r0, r0
 80114e8:	9700      	str	r7, [sp, #0]
 80114ea:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 80114ee:	4629      	mov	r1, r5
 80114f0:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80114f4:	2401      	movs	r4, #1
 80114f6:	a805      	add	r0, sp, #20
 80114f8:	f7ff fcbe 	bl	8010e78 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 80114fc:	a805      	add	r0, sp, #20
 80114fe:	f7ff fee0 	bl	80112c2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8011502:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8011506:	b163      	cbz	r3, 8011522 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 8011508:	3401      	adds	r4, #1
 801150a:	e7f7      	b.n	80114fc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801150c:	2401      	movs	r4, #1
 801150e:	f002 fd83 	bl	8014018 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8011512:	280a      	cmp	r0, #10
 8011514:	4628      	mov	r0, r5
 8011516:	bf08      	it	eq
 8011518:	3401      	addeq	r4, #1
 801151a:	f002 fd7d 	bl	8014018 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801151e:	2800      	cmp	r0, #0
 8011520:	d1f7      	bne.n	8011512 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8011522:	b2a0      	uxth	r0, r4
 8011524:	b00f      	add	sp, #60	; 0x3c
 8011526:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011528 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8011528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801152c:	b0e3      	sub	sp, #396	; 0x18c
 801152e:	461c      	mov	r4, r3
 8011530:	4683      	mov	fp, r0
 8011532:	4688      	mov	r8, r1
 8011534:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 8011536:	2b00      	cmp	r3, #0
 8011538:	f000 810f 	beq.w	801175a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801153c:	6823      	ldr	r3, [r4, #0]
 801153e:	2b00      	cmp	r3, #0
 8011540:	f000 810b 	beq.w	801175a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8011544:	7ba3      	ldrb	r3, [r4, #14]
 8011546:	2b00      	cmp	r3, #0
 8011548:	f000 8107 	beq.w	801175a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801154c:	ad0a      	add	r5, sp, #40	; 0x28
 801154e:	6810      	ldr	r0, [r2, #0]
 8011550:	6851      	ldr	r1, [r2, #4]
 8011552:	462b      	mov	r3, r5
 8011554:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8011558:	c303      	stmia	r3!, {r0, r1}
 801155a:	2100      	movs	r1, #0
 801155c:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8011560:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8011564:	4628      	mov	r0, r5
 8011566:	910c      	str	r1, [sp, #48]	; 0x30
 8011568:	a90c      	add	r1, sp, #48	; 0x30
 801156a:	79a2      	ldrb	r2, [r4, #6]
 801156c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8011570:	f7ff fd01 	bl	8010f76 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8011574:	a90c      	add	r1, sp, #48	; 0x30
 8011576:	79a2      	ldrb	r2, [r4, #6]
 8011578:	4608      	mov	r0, r1
 801157a:	f7ff fcfc 	bl	8010f76 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801157e:	a817      	add	r0, sp, #92	; 0x5c
 8011580:	f002 f936 	bl	80137f0 <_ZN8touchgfx12TextProviderC1Ev>
 8011584:	6820      	ldr	r0, [r4, #0]
 8011586:	6803      	ldr	r3, [r0, #0]
 8011588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801158a:	4798      	blx	r3
 801158c:	4606      	mov	r6, r0
 801158e:	6820      	ldr	r0, [r4, #0]
 8011590:	6803      	ldr	r3, [r0, #0]
 8011592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011594:	4798      	blx	r3
 8011596:	4633      	mov	r3, r6
 8011598:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 801159a:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 801159c:	9000      	str	r0, [sp, #0]
 801159e:	a817      	add	r0, sp, #92	; 0x5c
 80115a0:	f002 f979 	bl	8013896 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80115a4:	6820      	ldr	r0, [r4, #0]
 80115a6:	f894 a004 	ldrb.w	sl, [r4, #4]
 80115aa:	6803      	ldr	r3, [r0, #0]
 80115ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115ae:	4798      	blx	r3
 80115b0:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80115b4:	6823      	ldr	r3, [r4, #0]
 80115b6:	4607      	mov	r7, r0
 80115b8:	4406      	add	r6, r0
 80115ba:	a830      	add	r0, sp, #192	; 0xc0
 80115bc:	f893 9009 	ldrb.w	r9, [r3, #9]
 80115c0:	f002 f916 	bl	80137f0 <_ZN8touchgfx12TextProviderC1Ev>
 80115c4:	7c23      	ldrb	r3, [r4, #16]
 80115c6:	b17b      	cbz	r3, 80115e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 80115c8:	6820      	ldr	r0, [r4, #0]
 80115ca:	6803      	ldr	r3, [r0, #0]
 80115cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80115ce:	4798      	blx	r3
 80115d0:	9009      	str	r0, [sp, #36]	; 0x24
 80115d2:	6820      	ldr	r0, [r4, #0]
 80115d4:	6802      	ldr	r2, [r0, #0]
 80115d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80115d8:	4790      	blx	r2
 80115da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115dc:	9000      	str	r0, [sp, #0]
 80115de:	a830      	add	r0, sp, #192	; 0xc0
 80115e0:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 80115e2:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 80115e4:	f002 f957 	bl	8013896 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80115e8:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80115ec:	a80e      	add	r0, sp, #56	; 0x38
 80115ee:	7be2      	ldrb	r2, [r4, #15]
 80115f0:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 80115f4:	1a8a      	subs	r2, r1, r2
 80115f6:	7c21      	ldrb	r1, [r4, #16]
 80115f8:	9103      	str	r1, [sp, #12]
 80115fa:	b292      	uxth	r2, r2
 80115fc:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8011600:	9102      	str	r1, [sp, #8]
 8011602:	6821      	ldr	r1, [r4, #0]
 8011604:	9101      	str	r1, [sp, #4]
 8011606:	7961      	ldrb	r1, [r4, #5]
 8011608:	9100      	str	r1, [sp, #0]
 801160a:	a930      	add	r1, sp, #192	; 0xc0
 801160c:	f7ff fc34 	bl	8010e78 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8011610:	2e00      	cmp	r6, #0
 8011612:	dc5b      	bgt.n	80116cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8011614:	af17      	add	r7, sp, #92	; 0x5c
 8011616:	f04f 0900 	mov.w	r9, #0
 801161a:	7c23      	ldrb	r3, [r4, #16]
 801161c:	2b00      	cmp	r3, #0
 801161e:	f000 80ae 	beq.w	801177e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8011622:	a80e      	add	r0, sp, #56	; 0x38
 8011624:	f7ff fe4d 	bl	80112c2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8011628:	f1ba 0f00 	cmp.w	sl, #0
 801162c:	f000 80a2 	beq.w	8011774 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 8011630:	7c23      	ldrb	r3, [r4, #16]
 8011632:	2264      	movs	r2, #100	; 0x64
 8011634:	4639      	mov	r1, r7
 8011636:	a849      	add	r0, sp, #292	; 0x124
 8011638:	9309      	str	r3, [sp, #36]	; 0x24
 801163a:	f00c f9ad 	bl	801d998 <memcpy>
 801163e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011640:	2b00      	cmp	r3, #0
 8011642:	f000 80a4 	beq.w	801178e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 8011646:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801164a:	7922      	ldrb	r2, [r4, #4]
 801164c:	2a01      	cmp	r2, #1
 801164e:	f040 8087 	bne.w	8011760 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8011652:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 8011656:	1ac0      	subs	r0, r0, r3
 8011658:	2302      	movs	r3, #2
 801165a:	fb90 f0f3 	sdiv	r0, r0, r3
 801165e:	b200      	sxth	r0, r0
 8011660:	7c23      	ldrb	r3, [r4, #16]
 8011662:	2b00      	cmp	r3, #0
 8011664:	f000 8088 	beq.w	8011778 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
 8011668:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 801166c:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
 8011670:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8011674:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8011678:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801167c:	2100      	movs	r1, #0
 801167e:	4410      	add	r0, r2
 8011680:	4642      	mov	r2, r8
 8011682:	b200      	sxth	r0, r0
 8011684:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8011688:	9000      	str	r0, [sp, #0]
 801168a:	4658      	mov	r0, fp
 801168c:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8011690:	f7ff fca2 	bl	8010fd8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8011694:	2800      	cmp	r0, #0
 8011696:	d160      	bne.n	801175a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8011698:	b2b2      	uxth	r2, r6
 801169a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801169e:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 80116a2:	4413      	add	r3, r2
 80116a4:	1a8a      	subs	r2, r1, r2
 80116a6:	b21b      	sxth	r3, r3
 80116a8:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 80116ac:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 80116b0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80116b4:	2a00      	cmp	r2, #0
 80116b6:	d150      	bne.n	801175a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 80116b8:	6822      	ldr	r2, [r4, #0]
 80116ba:	8869      	ldrh	r1, [r5, #2]
 80116bc:	7a12      	ldrb	r2, [r2, #8]
 80116be:	1a9b      	subs	r3, r3, r2
 80116c0:	88ea      	ldrh	r2, [r5, #6]
 80116c2:	440a      	add	r2, r1
 80116c4:	b212      	sxth	r2, r2
 80116c6:	4293      	cmp	r3, r2
 80116c8:	dda7      	ble.n	801161a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 80116ca:	e046      	b.n	801175a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 80116cc:	7c23      	ldrb	r3, [r4, #16]
 80116ce:	444f      	add	r7, r9
 80116d0:	b1c3      	cbz	r3, 8011704 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 80116d2:	f64f 79ff 	movw	r9, #65535	; 0xffff
 80116d6:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80116da:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80116de:	443b      	add	r3, r7
 80116e0:	4293      	cmp	r3, r2
 80116e2:	da97      	bge.n	8011614 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 80116e4:	a80e      	add	r0, sp, #56	; 0x38
 80116e6:	f7ff fdec 	bl	80112c2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80116ea:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 80116ee:	3b01      	subs	r3, #1
 80116f0:	b29b      	uxth	r3, r3
 80116f2:	454b      	cmp	r3, r9
 80116f4:	9309      	str	r3, [sp, #36]	; 0x24
 80116f6:	d021      	beq.n	801173c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 80116f8:	7961      	ldrb	r1, [r4, #5]
 80116fa:	a817      	add	r0, sp, #92	; 0x5c
 80116fc:	f7f1 f9f6 	bl	8002aec <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8011700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011702:	e7f4      	b.n	80116ee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8011704:	fa1f f986 	uxth.w	r9, r6
 8011708:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801170c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8011710:	443b      	add	r3, r7
 8011712:	4293      	cmp	r3, r2
 8011714:	f6bf af7e 	bge.w	8011614 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8011718:	a817      	add	r0, sp, #92	; 0x5c
 801171a:	f002 fc7d 	bl	8014018 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801171e:	b1e0      	cbz	r0, 801175a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8011720:	280a      	cmp	r0, #10
 8011722:	d1f1      	bne.n	8011708 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8011724:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8011728:	444b      	add	r3, r9
 801172a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801172e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8011732:	eba3 0309 	sub.w	r3, r3, r9
 8011736:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801173a:	e7e5      	b.n	8011708 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801173c:	b2b3      	uxth	r3, r6
 801173e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8011742:	441a      	add	r2, r3
 8011744:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8011748:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 801174c:	1ad3      	subs	r3, r2, r3
 801174e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8011752:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8011756:	2b00      	cmp	r3, #0
 8011758:	d1bd      	bne.n	80116d6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 801175a:	b063      	add	sp, #396	; 0x18c
 801175c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011760:	2a02      	cmp	r2, #2
 8011762:	d105      	bne.n	8011770 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 8011764:	7be2      	ldrb	r2, [r4, #15]
 8011766:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801176a:	1a80      	subs	r0, r0, r2
 801176c:	1ac0      	subs	r0, r0, r3
 801176e:	e776      	b.n	801165e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8011770:	2000      	movs	r0, #0
 8011772:	e775      	b.n	8011660 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8011774:	7be0      	ldrb	r0, [r4, #15]
 8011776:	e773      	b.n	8011660 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8011778:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801177c:	e776      	b.n	801166c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 801177e:	f1ba 0f00 	cmp.w	sl, #0
 8011782:	d0f7      	beq.n	8011774 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 8011784:	2264      	movs	r2, #100	; 0x64
 8011786:	4639      	mov	r1, r7
 8011788:	a849      	add	r0, sp, #292	; 0x124
 801178a:	f00c f905 	bl	801d998 <memcpy>
 801178e:	2300      	movs	r3, #0
 8011790:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011794:	6821      	ldr	r1, [r4, #0]
 8011796:	a849      	add	r0, sp, #292	; 0x124
 8011798:	f7ff fbb1 	bl	8010efe <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801179c:	b203      	sxth	r3, r0
 801179e:	e754      	b.n	801164a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

080117a0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80117a0:	2b03      	cmp	r3, #3
 80117a2:	d818      	bhi.n	80117d6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 80117a4:	e8df f003 	tbb	[pc, r3]
 80117a8:	130d0602 	.word	0x130d0602
 80117ac:	f9b0 2000 	ldrsh.w	r2, [r0]
 80117b0:	1850      	adds	r0, r2, r1
 80117b2:	4770      	bx	lr
 80117b4:	8803      	ldrh	r3, [r0, #0]
 80117b6:	8880      	ldrh	r0, [r0, #4]
 80117b8:	4418      	add	r0, r3
 80117ba:	b200      	sxth	r0, r0
 80117bc:	1a80      	subs	r0, r0, r2
 80117be:	3801      	subs	r0, #1
 80117c0:	4770      	bx	lr
 80117c2:	8803      	ldrh	r3, [r0, #0]
 80117c4:	8880      	ldrh	r0, [r0, #4]
 80117c6:	4418      	add	r0, r3
 80117c8:	b200      	sxth	r0, r0
 80117ca:	1a40      	subs	r0, r0, r1
 80117cc:	e7f7      	b.n	80117be <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80117ce:	f9b0 0000 	ldrsh.w	r0, [r0]
 80117d2:	4410      	add	r0, r2
 80117d4:	4770      	bx	lr
 80117d6:	2000      	movs	r0, #0
 80117d8:	4770      	bx	lr

080117da <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80117da:	2b03      	cmp	r3, #3
 80117dc:	d817      	bhi.n	801180e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 80117de:	e8df f003 	tbb	[pc, r3]
 80117e2:	0602      	.short	0x0602
 80117e4:	1009      	.short	0x1009
 80117e6:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80117ea:	1850      	adds	r0, r2, r1
 80117ec:	4770      	bx	lr
 80117ee:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80117f2:	e7fa      	b.n	80117ea <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 80117f4:	8843      	ldrh	r3, [r0, #2]
 80117f6:	88c0      	ldrh	r0, [r0, #6]
 80117f8:	4418      	add	r0, r3
 80117fa:	b200      	sxth	r0, r0
 80117fc:	1a80      	subs	r0, r0, r2
 80117fe:	3801      	subs	r0, #1
 8011800:	4770      	bx	lr
 8011802:	8843      	ldrh	r3, [r0, #2]
 8011804:	88c0      	ldrh	r0, [r0, #6]
 8011806:	4418      	add	r0, r3
 8011808:	b200      	sxth	r0, r0
 801180a:	1a40      	subs	r0, r0, r1
 801180c:	e7f7      	b.n	80117fe <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801180e:	2000      	movs	r0, #0
 8011810:	4770      	bx	lr
	...

08011814 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8011814:	4b01      	ldr	r3, [pc, #4]	; (801181c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8011816:	2200      	movs	r2, #0
 8011818:	601a      	str	r2, [r3, #0]
 801181a:	4770      	bx	lr
 801181c:	2400e464 	.word	0x2400e464

08011820 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8011820:	4603      	mov	r3, r0
 8011822:	b1c8      	cbz	r0, 8011858 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8011824:	0c02      	lsrs	r2, r0, #16
 8011826:	0412      	lsls	r2, r2, #16
 8011828:	b9a2      	cbnz	r2, 8011854 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801182a:	0403      	lsls	r3, r0, #16
 801182c:	2010      	movs	r0, #16
 801182e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011832:	bf04      	itt	eq
 8011834:	021b      	lsleq	r3, r3, #8
 8011836:	3008      	addeq	r0, #8
 8011838:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801183c:	bf04      	itt	eq
 801183e:	011b      	lsleq	r3, r3, #4
 8011840:	3004      	addeq	r0, #4
 8011842:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011846:	bf04      	itt	eq
 8011848:	009b      	lsleq	r3, r3, #2
 801184a:	3002      	addeq	r0, #2
 801184c:	2b00      	cmp	r3, #0
 801184e:	db04      	blt.n	801185a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8011850:	3001      	adds	r0, #1
 8011852:	4770      	bx	lr
 8011854:	2000      	movs	r0, #0
 8011856:	e7ea      	b.n	801182e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8011858:	2020      	movs	r0, #32
 801185a:	4770      	bx	lr

0801185c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801185c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011860:	b087      	sub	sp, #28
 8011862:	4681      	mov	r9, r0
 8011864:	4698      	mov	r8, r3
 8011866:	4610      	mov	r0, r2
 8011868:	460d      	mov	r5, r1
 801186a:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801186e:	b981      	cbnz	r1, 8011892 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8011870:	b14b      	cbz	r3, 8011886 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8011872:	460b      	mov	r3, r1
 8011874:	464a      	mov	r2, r9
 8011876:	4641      	mov	r1, r8
 8011878:	e9cd 4700 	strd	r4, r7, [sp]
 801187c:	f7ff ffee 	bl	801185c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8011880:	b007      	add	sp, #28
 8011882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011886:	f04f 33ff 	mov.w	r3, #4294967295
 801188a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801188e:	603b      	str	r3, [r7, #0]
 8011890:	e7f6      	b.n	8011880 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8011892:	fa32 fa01 	lsrs.w	sl, r2, r1
 8011896:	d107      	bne.n	80118a8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8011898:	fb09 f602 	mul.w	r6, r9, r2
 801189c:	fbb6 f0f4 	udiv	r0, r6, r4
 80118a0:	fb04 6610 	mls	r6, r4, r0, r6
 80118a4:	603e      	str	r6, [r7, #0]
 80118a6:	e7eb      	b.n	8011880 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 80118a8:	2601      	movs	r6, #1
 80118aa:	fa09 fb01 	lsl.w	fp, r9, r1
 80118ae:	408e      	lsls	r6, r1
 80118b0:	fbbb f3f4 	udiv	r3, fp, r4
 80118b4:	3e01      	subs	r6, #1
 80118b6:	9302      	str	r3, [sp, #8]
 80118b8:	fb0a f303 	mul.w	r3, sl, r3
 80118bc:	4016      	ands	r6, r2
 80118be:	9303      	str	r3, [sp, #12]
 80118c0:	4630      	mov	r0, r6
 80118c2:	f7ff ffad 	bl	8011820 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80118c6:	464a      	mov	r2, r9
 80118c8:	460b      	mov	r3, r1
 80118ca:	4601      	mov	r1, r0
 80118cc:	4630      	mov	r0, r6
 80118ce:	e9cd 4700 	strd	r4, r7, [sp]
 80118d2:	f7ff ffc3 	bl	801185c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80118d6:	9b02      	ldr	r3, [sp, #8]
 80118d8:	4606      	mov	r6, r0
 80118da:	eb05 0108 	add.w	r1, r5, r8
 80118de:	fb04 bb13 	mls	fp, r4, r3, fp
 80118e2:	4658      	mov	r0, fp
 80118e4:	f7ff ff9c 	bl	8011820 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80118e8:	ab05      	add	r3, sp, #20
 80118ea:	465a      	mov	r2, fp
 80118ec:	e9cd 4300 	strd	r4, r3, [sp]
 80118f0:	4603      	mov	r3, r0
 80118f2:	4650      	mov	r0, sl
 80118f4:	f7ff ffb2 	bl	801185c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80118f8:	6839      	ldr	r1, [r7, #0]
 80118fa:	9a05      	ldr	r2, [sp, #20]
 80118fc:	9b03      	ldr	r3, [sp, #12]
 80118fe:	4411      	add	r1, r2
 8011900:	fbb1 f2f4 	udiv	r2, r1, r4
 8011904:	18d3      	adds	r3, r2, r3
 8011906:	fb04 1412 	mls	r4, r4, r2, r1
 801190a:	441e      	add	r6, r3
 801190c:	603c      	str	r4, [r7, #0]
 801190e:	4430      	add	r0, r6
 8011910:	e7b6      	b.n	8011880 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08011912 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8011912:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011916:	b085      	sub	sp, #20
 8011918:	f1b0 0900 	subs.w	r9, r0, #0
 801191c:	461d      	mov	r5, r3
 801191e:	4617      	mov	r7, r2
 8011920:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8011922:	bfbb      	ittet	lt
 8011924:	f1c9 0900 	rsblt	r9, r9, #0
 8011928:	f04f 36ff 	movlt.w	r6, #4294967295
 801192c:	2601      	movge	r6, #1
 801192e:	6823      	ldrlt	r3, [r4, #0]
 8011930:	bfbc      	itt	lt
 8011932:	425b      	neglt	r3, r3
 8011934:	6023      	strlt	r3, [r4, #0]
 8011936:	2a00      	cmp	r2, #0
 8011938:	da04      	bge.n	8011944 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801193a:	6823      	ldr	r3, [r4, #0]
 801193c:	4257      	negs	r7, r2
 801193e:	4276      	negs	r6, r6
 8011940:	425b      	negs	r3, r3
 8011942:	6023      	str	r3, [r4, #0]
 8011944:	2d00      	cmp	r5, #0
 8011946:	4638      	mov	r0, r7
 8011948:	bfba      	itte	lt
 801194a:	426d      	neglt	r5, r5
 801194c:	f04f 38ff 	movlt.w	r8, #4294967295
 8011950:	f04f 0801 	movge.w	r8, #1
 8011954:	f7ff ff64 	bl	8011820 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8011958:	ab03      	add	r3, sp, #12
 801195a:	463a      	mov	r2, r7
 801195c:	e9cd 5300 	strd	r5, r3, [sp]
 8011960:	4603      	mov	r3, r0
 8011962:	4648      	mov	r0, r9
 8011964:	f7ff ff7a 	bl	801185c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8011968:	6823      	ldr	r3, [r4, #0]
 801196a:	9a03      	ldr	r2, [sp, #12]
 801196c:	4546      	cmp	r6, r8
 801196e:	441a      	add	r2, r3
 8011970:	fb92 f3f5 	sdiv	r3, r2, r5
 8011974:	4418      	add	r0, r3
 8011976:	fb05 2313 	mls	r3, r5, r3, r2
 801197a:	bf18      	it	ne
 801197c:	4240      	negne	r0, r0
 801197e:	1c72      	adds	r2, r6, #1
 8011980:	6023      	str	r3, [r4, #0]
 8011982:	d105      	bne.n	8011990 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8011984:	2b00      	cmp	r3, #0
 8011986:	f1c3 0200 	rsb	r2, r3, #0
 801198a:	db0b      	blt.n	80119a4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801198c:	6022      	str	r2, [r4, #0]
 801198e:	e006      	b.n	801199e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8011990:	2e01      	cmp	r6, #1
 8011992:	d104      	bne.n	801199e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8011994:	2b00      	cmp	r3, #0
 8011996:	da02      	bge.n	801199e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8011998:	442b      	add	r3, r5
 801199a:	3801      	subs	r0, #1
 801199c:	6023      	str	r3, [r4, #0]
 801199e:	b005      	add	sp, #20
 80119a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80119a4:	3801      	subs	r0, #1
 80119a6:	1b52      	subs	r2, r2, r5
 80119a8:	e7f0      	b.n	801198c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

080119ac <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80119ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80119b0:	4c1c      	ldr	r4, [pc, #112]	; (8011a24 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80119b2:	4605      	mov	r5, r0
 80119b4:	6807      	ldr	r7, [r0, #0]
 80119b6:	69a3      	ldr	r3, [r4, #24]
 80119b8:	b92b      	cbnz	r3, 80119c6 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 80119ba:	6840      	ldr	r0, [r0, #4]
 80119bc:	e9c5 7000 	strd	r7, r0, [r5]
 80119c0:	b004      	add	sp, #16
 80119c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119c6:	f04f 0802 	mov.w	r8, #2
 80119ca:	68a2      	ldr	r2, [r4, #8]
 80119cc:	ae04      	add	r6, sp, #16
 80119ce:	6820      	ldr	r0, [r4, #0]
 80119d0:	fb93 f1f8 	sdiv	r1, r3, r8
 80119d4:	440a      	add	r2, r1
 80119d6:	69e1      	ldr	r1, [r4, #28]
 80119d8:	f846 2d04 	str.w	r2, [r6, #-4]!
 80119dc:	463a      	mov	r2, r7
 80119de:	9600      	str	r6, [sp, #0]
 80119e0:	f7ff ff97 	bl	8011912 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80119e4:	69a3      	ldr	r3, [r4, #24]
 80119e6:	4607      	mov	r7, r0
 80119e8:	686a      	ldr	r2, [r5, #4]
 80119ea:	6a21      	ldr	r1, [r4, #32]
 80119ec:	9600      	str	r6, [sp, #0]
 80119ee:	6860      	ldr	r0, [r4, #4]
 80119f0:	f7ff ff8f 	bl	8011912 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80119f4:	69a3      	ldr	r3, [r4, #24]
 80119f6:	6962      	ldr	r2, [r4, #20]
 80119f8:	4407      	add	r7, r0
 80119fa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80119fc:	9600      	str	r6, [sp, #0]
 80119fe:	68e0      	ldr	r0, [r4, #12]
 8011a00:	fb93 f8f8 	sdiv	r8, r3, r8
 8011a04:	4442      	add	r2, r8
 8011a06:	9203      	str	r2, [sp, #12]
 8011a08:	682a      	ldr	r2, [r5, #0]
 8011a0a:	f7ff ff82 	bl	8011912 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8011a0e:	4680      	mov	r8, r0
 8011a10:	9600      	str	r6, [sp, #0]
 8011a12:	69a3      	ldr	r3, [r4, #24]
 8011a14:	686a      	ldr	r2, [r5, #4]
 8011a16:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8011a18:	6920      	ldr	r0, [r4, #16]
 8011a1a:	f7ff ff7a 	bl	8011912 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8011a1e:	4440      	add	r0, r8
 8011a20:	e7cc      	b.n	80119bc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8011a22:	bf00      	nop
 8011a24:	2400e468 	.word	0x2400e468

08011a28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8011a28:	4b07      	ldr	r3, [pc, #28]	; (8011a48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8011a2a:	781b      	ldrb	r3, [r3, #0]
 8011a2c:	2b01      	cmp	r3, #1
 8011a2e:	d109      	bne.n	8011a44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8011a30:	f9b1 3000 	ldrsh.w	r3, [r1]
 8011a34:	f9b0 2000 	ldrsh.w	r2, [r0]
 8011a38:	8003      	strh	r3, [r0, #0]
 8011a3a:	4b04      	ldr	r3, [pc, #16]	; (8011a4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8011a3c:	881b      	ldrh	r3, [r3, #0]
 8011a3e:	3b01      	subs	r3, #1
 8011a40:	1a9b      	subs	r3, r3, r2
 8011a42:	800b      	strh	r3, [r1, #0]
 8011a44:	4770      	bx	lr
 8011a46:	bf00      	nop
 8011a48:	2400e44c 	.word	0x2400e44c
 8011a4c:	2400e448 	.word	0x2400e448

08011a50 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8011a50:	4b07      	ldr	r3, [pc, #28]	; (8011a70 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8011a52:	b510      	push	{r4, lr}
 8011a54:	781b      	ldrb	r3, [r3, #0]
 8011a56:	2b01      	cmp	r3, #1
 8011a58:	d108      	bne.n	8011a6c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8011a5a:	4b06      	ldr	r3, [pc, #24]	; (8011a74 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8011a5c:	880c      	ldrh	r4, [r1, #0]
 8011a5e:	881b      	ldrh	r3, [r3, #0]
 8011a60:	f9b0 2000 	ldrsh.w	r2, [r0]
 8011a64:	3b01      	subs	r3, #1
 8011a66:	1b1b      	subs	r3, r3, r4
 8011a68:	8003      	strh	r3, [r0, #0]
 8011a6a:	800a      	strh	r2, [r1, #0]
 8011a6c:	bd10      	pop	{r4, pc}
 8011a6e:	bf00      	nop
 8011a70:	2400e44c 	.word	0x2400e44c
 8011a74:	2400e448 	.word	0x2400e448

08011a78 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8011a78:	4b0a      	ldr	r3, [pc, #40]	; (8011aa4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8011a7a:	b510      	push	{r4, lr}
 8011a7c:	781b      	ldrb	r3, [r3, #0]
 8011a7e:	2b01      	cmp	r3, #1
 8011a80:	d10e      	bne.n	8011aa0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8011a82:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8011a86:	8843      	ldrh	r3, [r0, #2]
 8011a88:	f9b0 4000 	ldrsh.w	r4, [r0]
 8011a8c:	18ca      	adds	r2, r1, r3
 8011a8e:	4b06      	ldr	r3, [pc, #24]	; (8011aa8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8011a90:	8044      	strh	r4, [r0, #2]
 8011a92:	881b      	ldrh	r3, [r3, #0]
 8011a94:	1a9b      	subs	r3, r3, r2
 8011a96:	8003      	strh	r3, [r0, #0]
 8011a98:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8011a9c:	8081      	strh	r1, [r0, #4]
 8011a9e:	80c3      	strh	r3, [r0, #6]
 8011aa0:	bd10      	pop	{r4, pc}
 8011aa2:	bf00      	nop
 8011aa4:	2400e44c 	.word	0x2400e44c
 8011aa8:	2400e448 	.word	0x2400e448

08011aac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8011aac:	4b08      	ldr	r3, [pc, #32]	; (8011ad0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8011aae:	781b      	ldrb	r3, [r3, #0]
 8011ab0:	2b01      	cmp	r3, #1
 8011ab2:	d10c      	bne.n	8011ace <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8011ab4:	8803      	ldrh	r3, [r0, #0]
 8011ab6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8011aba:	8842      	ldrh	r2, [r0, #2]
 8011abc:	8002      	strh	r2, [r0, #0]
 8011abe:	185a      	adds	r2, r3, r1
 8011ac0:	4b04      	ldr	r3, [pc, #16]	; (8011ad4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8011ac2:	881b      	ldrh	r3, [r3, #0]
 8011ac4:	1a9b      	subs	r3, r3, r2
 8011ac6:	8043      	strh	r3, [r0, #2]
 8011ac8:	88c3      	ldrh	r3, [r0, #6]
 8011aca:	80c1      	strh	r1, [r0, #6]
 8011acc:	8083      	strh	r3, [r0, #4]
 8011ace:	4770      	bx	lr
 8011ad0:	2400e44c 	.word	0x2400e44c
 8011ad4:	2400e448 	.word	0x2400e448

08011ad8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8011ad8:	4b07      	ldr	r3, [pc, #28]	; (8011af8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8011ada:	b510      	push	{r4, lr}
 8011adc:	781b      	ldrb	r3, [r3, #0]
 8011ade:	2b01      	cmp	r3, #1
 8011ae0:	d108      	bne.n	8011af4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8011ae2:	f9b1 3000 	ldrsh.w	r3, [r1]
 8011ae6:	f9b0 4000 	ldrsh.w	r4, [r0]
 8011aea:	8003      	strh	r3, [r0, #0]
 8011aec:	8893      	ldrh	r3, [r2, #4]
 8011aee:	3b01      	subs	r3, #1
 8011af0:	1b1b      	subs	r3, r3, r4
 8011af2:	800b      	strh	r3, [r1, #0]
 8011af4:	bd10      	pop	{r4, pc}
 8011af6:	bf00      	nop
 8011af8:	2400e44c 	.word	0x2400e44c

08011afc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8011afc:	4b0a      	ldr	r3, [pc, #40]	; (8011b28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8011afe:	460a      	mov	r2, r1
 8011b00:	b510      	push	{r4, lr}
 8011b02:	781b      	ldrb	r3, [r3, #0]
 8011b04:	2b01      	cmp	r3, #1
 8011b06:	d10d      	bne.n	8011b24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8011b08:	8881      	ldrh	r1, [r0, #4]
 8011b0a:	8803      	ldrh	r3, [r0, #0]
 8011b0c:	440b      	add	r3, r1
 8011b0e:	4601      	mov	r1, r0
 8011b10:	3b01      	subs	r3, #1
 8011b12:	f821 3b02 	strh.w	r3, [r1], #2
 8011b16:	f7ff ffdf 	bl	8011ad8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8011b1a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8011b1e:	88c2      	ldrh	r2, [r0, #6]
 8011b20:	80c3      	strh	r3, [r0, #6]
 8011b22:	8082      	strh	r2, [r0, #4]
 8011b24:	bd10      	pop	{r4, pc}
 8011b26:	bf00      	nop
 8011b28:	2400e44c 	.word	0x2400e44c

08011b2c <_ZN8touchgfx11Application13requestRedrawEv>:
 8011b2c:	4b06      	ldr	r3, [pc, #24]	; (8011b48 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8011b2e:	2100      	movs	r1, #0
 8011b30:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011b34:	4b05      	ldr	r3, [pc, #20]	; (8011b4c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8011b36:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 8011b3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011b3e:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 8011b42:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 8011b46:	4770      	bx	lr
 8011b48:	2400e448 	.word	0x2400e448
 8011b4c:	2400e44a 	.word	0x2400e44a

08011b50 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8011b50:	4b03      	ldr	r3, [pc, #12]	; (8011b60 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8011b52:	6818      	ldr	r0, [r3, #0]
 8011b54:	b110      	cbz	r0, 8011b5c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8011b56:	6803      	ldr	r3, [r0, #0]
 8011b58:	699b      	ldr	r3, [r3, #24]
 8011b5a:	4718      	bx	r3
 8011b5c:	4770      	bx	lr
 8011b5e:	bf00      	nop
 8011b60:	2400e498 	.word	0x2400e498

08011b64 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8011b64:	4770      	bx	lr
	...

08011b68 <_ZN8touchgfx11Application4drawEv>:
 8011b68:	4b09      	ldr	r3, [pc, #36]	; (8011b90 <_ZN8touchgfx11Application4drawEv+0x28>)
 8011b6a:	b507      	push	{r0, r1, r2, lr}
 8011b6c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011b70:	2100      	movs	r1, #0
 8011b72:	4b08      	ldr	r3, [pc, #32]	; (8011b94 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8011b74:	9100      	str	r1, [sp, #0]
 8011b76:	4669      	mov	r1, sp
 8011b78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011b7c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8011b80:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011b84:	6803      	ldr	r3, [r0, #0]
 8011b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b88:	4798      	blx	r3
 8011b8a:	b003      	add	sp, #12
 8011b8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b90:	2400e448 	.word	0x2400e448
 8011b94:	2400e44a 	.word	0x2400e44a

08011b98 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8011b98:	4b03      	ldr	r3, [pc, #12]	; (8011ba8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8011b9a:	6818      	ldr	r0, [r3, #0]
 8011b9c:	b110      	cbz	r0, 8011ba4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8011b9e:	6803      	ldr	r3, [r0, #0]
 8011ba0:	69db      	ldr	r3, [r3, #28]
 8011ba2:	4718      	bx	r3
 8011ba4:	4770      	bx	lr
 8011ba6:	bf00      	nop
 8011ba8:	2400e498 	.word	0x2400e498

08011bac <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8011bac:	4b03      	ldr	r3, [pc, #12]	; (8011bbc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8011bae:	6818      	ldr	r0, [r3, #0]
 8011bb0:	b110      	cbz	r0, 8011bb8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8011bb2:	6803      	ldr	r3, [r0, #0]
 8011bb4:	6a1b      	ldr	r3, [r3, #32]
 8011bb6:	4718      	bx	r3
 8011bb8:	4770      	bx	lr
 8011bba:	bf00      	nop
 8011bbc:	2400e498 	.word	0x2400e498

08011bc0 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8011bc0:	2300      	movs	r3, #0
 8011bc2:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 8011bc6:	4770      	bx	lr

08011bc8 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8011bc8:	4b03      	ldr	r3, [pc, #12]	; (8011bd8 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8011bca:	6818      	ldr	r0, [r3, #0]
 8011bcc:	b110      	cbz	r0, 8011bd4 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8011bce:	6803      	ldr	r3, [r0, #0]
 8011bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bd2:	4718      	bx	r3
 8011bd4:	4770      	bx	lr
 8011bd6:	bf00      	nop
 8011bd8:	2400e498 	.word	0x2400e498

08011bdc <_ZN8touchgfx11ApplicationD1Ev>:
 8011bdc:	4770      	bx	lr

08011bde <_ZN8touchgfx11ApplicationD0Ev>:
 8011bde:	b510      	push	{r4, lr}
 8011be0:	4604      	mov	r4, r0
 8011be2:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8011be6:	f00b fe2a 	bl	801d83e <_ZdlPvj>
 8011bea:	4620      	mov	r0, r4
 8011bec:	bd10      	pop	{r4, pc}

08011bee <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8011bee:	b510      	push	{r4, lr}
 8011bf0:	f9b1 4000 	ldrsh.w	r4, [r1]
 8011bf4:	888a      	ldrh	r2, [r1, #4]
 8011bf6:	f9b0 3000 	ldrsh.w	r3, [r0]
 8011bfa:	4422      	add	r2, r4
 8011bfc:	b212      	sxth	r2, r2
 8011bfe:	4293      	cmp	r3, r2
 8011c00:	da15      	bge.n	8011c2e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8011c02:	8882      	ldrh	r2, [r0, #4]
 8011c04:	4413      	add	r3, r2
 8011c06:	b21b      	sxth	r3, r3
 8011c08:	429c      	cmp	r4, r3
 8011c0a:	da10      	bge.n	8011c2e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8011c0c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8011c10:	88c9      	ldrh	r1, [r1, #6]
 8011c12:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8011c16:	4419      	add	r1, r3
 8011c18:	b209      	sxth	r1, r1
 8011c1a:	428a      	cmp	r2, r1
 8011c1c:	da07      	bge.n	8011c2e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8011c1e:	88c0      	ldrh	r0, [r0, #6]
 8011c20:	4410      	add	r0, r2
 8011c22:	b200      	sxth	r0, r0
 8011c24:	4283      	cmp	r3, r0
 8011c26:	bfac      	ite	ge
 8011c28:	2000      	movge	r0, #0
 8011c2a:	2001      	movlt	r0, #1
 8011c2c:	bd10      	pop	{r4, pc}
 8011c2e:	2000      	movs	r0, #0
 8011c30:	e7fc      	b.n	8011c2c <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08011c32 <_ZN8touchgfx4Rect10restrictToEss>:
 8011c32:	f9b0 3000 	ldrsh.w	r3, [r0]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	b510      	push	{r4, lr}
 8011c3a:	da04      	bge.n	8011c46 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8011c3c:	8884      	ldrh	r4, [r0, #4]
 8011c3e:	4423      	add	r3, r4
 8011c40:	8083      	strh	r3, [r0, #4]
 8011c42:	2300      	movs	r3, #0
 8011c44:	8003      	strh	r3, [r0, #0]
 8011c46:	f9b0 4000 	ldrsh.w	r4, [r0]
 8011c4a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8011c4e:	1b09      	subs	r1, r1, r4
 8011c50:	428b      	cmp	r3, r1
 8011c52:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8011c56:	bfc8      	it	gt
 8011c58:	8081      	strhgt	r1, [r0, #4]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	da04      	bge.n	8011c68 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8011c5e:	88c1      	ldrh	r1, [r0, #6]
 8011c60:	440b      	add	r3, r1
 8011c62:	80c3      	strh	r3, [r0, #6]
 8011c64:	2300      	movs	r3, #0
 8011c66:	8043      	strh	r3, [r0, #2]
 8011c68:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8011c6c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8011c70:	1a52      	subs	r2, r2, r1
 8011c72:	4293      	cmp	r3, r2
 8011c74:	bfc8      	it	gt
 8011c76:	80c2      	strhgt	r2, [r0, #6]
 8011c78:	bd10      	pop	{r4, pc}
	...

08011c7c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8011c7c:	4b10      	ldr	r3, [pc, #64]	; (8011cc0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8011c7e:	b510      	push	{r4, lr}
 8011c80:	460c      	mov	r4, r1
 8011c82:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011c86:	4b0f      	ldr	r3, [pc, #60]	; (8011cc4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8011c88:	4620      	mov	r0, r4
 8011c8a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8011c8e:	f7ff ffd0 	bl	8011c32 <_ZN8touchgfx4Rect10restrictToEss>
 8011c92:	4b0d      	ldr	r3, [pc, #52]	; (8011cc8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8011c94:	6818      	ldr	r0, [r3, #0]
 8011c96:	b190      	cbz	r0, 8011cbe <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8011c98:	6803      	ldr	r3, [r0, #0]
 8011c9a:	4621      	mov	r1, r4
 8011c9c:	689b      	ldr	r3, [r3, #8]
 8011c9e:	4798      	blx	r3
 8011ca0:	4b0a      	ldr	r3, [pc, #40]	; (8011ccc <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8011ca2:	6818      	ldr	r0, [r3, #0]
 8011ca4:	b118      	cbz	r0, 8011cae <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8011ca6:	6803      	ldr	r3, [r0, #0]
 8011ca8:	4621      	mov	r1, r4
 8011caa:	689b      	ldr	r3, [r3, #8]
 8011cac:	4798      	blx	r3
 8011cae:	4b08      	ldr	r3, [pc, #32]	; (8011cd0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8011cb0:	4621      	mov	r1, r4
 8011cb2:	6818      	ldr	r0, [r3, #0]
 8011cb4:	6803      	ldr	r3, [r0, #0]
 8011cb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011cba:	69db      	ldr	r3, [r3, #28]
 8011cbc:	4718      	bx	r3
 8011cbe:	bd10      	pop	{r4, pc}
 8011cc0:	2400e44a 	.word	0x2400e44a
 8011cc4:	2400e448 	.word	0x2400e448
 8011cc8:	2400e498 	.word	0x2400e498
 8011ccc:	2400e494 	.word	0x2400e494
 8011cd0:	2400e454 	.word	0x2400e454

08011cd4 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8011cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cd6:	4606      	mov	r6, r0
 8011cd8:	4608      	mov	r0, r1
 8011cda:	460f      	mov	r7, r1
 8011cdc:	f7fa fc9d 	bl	800c61a <_ZNK8touchgfx4Rect7isEmptyEv>
 8011ce0:	b9e8      	cbnz	r0, 8011d1e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8011ce2:	f9b7 5000 	ldrsh.w	r5, [r7]
 8011ce6:	f9b6 4000 	ldrsh.w	r4, [r6]
 8011cea:	42a5      	cmp	r5, r4
 8011cec:	db17      	blt.n	8011d1e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8011cee:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011cf2:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8011cf6:	429a      	cmp	r2, r3
 8011cf8:	db11      	blt.n	8011d1e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8011cfa:	88b9      	ldrh	r1, [r7, #4]
 8011cfc:	440d      	add	r5, r1
 8011cfe:	88b1      	ldrh	r1, [r6, #4]
 8011d00:	440c      	add	r4, r1
 8011d02:	b22d      	sxth	r5, r5
 8011d04:	b224      	sxth	r4, r4
 8011d06:	42a5      	cmp	r5, r4
 8011d08:	dc09      	bgt.n	8011d1e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8011d0a:	88f8      	ldrh	r0, [r7, #6]
 8011d0c:	4410      	add	r0, r2
 8011d0e:	88f2      	ldrh	r2, [r6, #6]
 8011d10:	4413      	add	r3, r2
 8011d12:	b200      	sxth	r0, r0
 8011d14:	b21b      	sxth	r3, r3
 8011d16:	4298      	cmp	r0, r3
 8011d18:	bfcc      	ite	gt
 8011d1a:	2000      	movgt	r0, #0
 8011d1c:	2001      	movle	r0, #1
 8011d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011d20 <_ZN8touchgfx11Application11getInstanceEv>:
 8011d20:	4b01      	ldr	r3, [pc, #4]	; (8011d28 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8011d22:	6818      	ldr	r0, [r3, #0]
 8011d24:	4770      	bx	lr
 8011d26:	bf00      	nop
 8011d28:	2400e4a8 	.word	0x2400e4a8

08011d2c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	b510      	push	{r4, lr}
 8011d30:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 8011d34:	4604      	mov	r4, r0
 8011d36:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8011d3a:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8011d3e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8011d42:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 8011d46:	429a      	cmp	r2, r3
 8011d48:	d90e      	bls.n	8011d68 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8011d4a:	18e2      	adds	r2, r4, r3
 8011d4c:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 8011d50:	b122      	cbz	r2, 8011d5c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8011d52:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8011d56:	6803      	ldr	r3, [r0, #0]
 8011d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011d5a:	4798      	blx	r3
 8011d5c:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8011d60:	3301      	adds	r3, #1
 8011d62:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8011d66:	e7ea      	b.n	8011d3e <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8011d68:	bd10      	pop	{r4, pc}

08011d6a <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	f100 0284 	add.w	r2, r0, #132	; 0x84
 8011d70:	30a4      	adds	r0, #164	; 0xa4
 8011d72:	f820 3c24 	strh.w	r3, [r0, #-36]
 8011d76:	f802 3b01 	strb.w	r3, [r2], #1
 8011d7a:	4282      	cmp	r2, r0
 8011d7c:	d1fb      	bne.n	8011d76 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8011d7e:	4770      	bx	lr

08011d80 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8011d80:	b570      	push	{r4, r5, r6, lr}
 8011d82:	4c0b      	ldr	r4, [pc, #44]	; (8011db0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8011d84:	4605      	mov	r5, r0
 8011d86:	460e      	mov	r6, r1
 8011d88:	6820      	ldr	r0, [r4, #0]
 8011d8a:	b110      	cbz	r0, 8011d92 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8011d8c:	6803      	ldr	r3, [r0, #0]
 8011d8e:	695b      	ldr	r3, [r3, #20]
 8011d90:	4798      	blx	r3
 8011d92:	1d28      	adds	r0, r5, #4
 8011d94:	f7ff ffe9 	bl	8011d6a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8011d98:	6026      	str	r6, [r4, #0]
 8011d9a:	6833      	ldr	r3, [r6, #0]
 8011d9c:	4630      	mov	r0, r6
 8011d9e:	68db      	ldr	r3, [r3, #12]
 8011da0:	4798      	blx	r3
 8011da2:	682b      	ldr	r3, [r5, #0]
 8011da4:	4628      	mov	r0, r5
 8011da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011da8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011dac:	4718      	bx	r3
 8011dae:	bf00      	nop
 8011db0:	2400e498 	.word	0x2400e498

08011db4 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8011db4:	2300      	movs	r3, #0
 8011db6:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 8011dba:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 8011dbe:	461a      	mov	r2, r3
 8011dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011dc2:	461c      	mov	r4, r3
 8011dc4:	461d      	mov	r5, r3
 8011dc6:	459c      	cmp	ip, r3
 8011dc8:	dd1a      	ble.n	8011e00 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8011dca:	18c6      	adds	r6, r0, r3
 8011dcc:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 8011dd0:	b16e      	cbz	r6, 8011dee <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8011dd2:	429a      	cmp	r2, r3
 8011dd4:	d008      	beq.n	8011de8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8011dd6:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8011dda:	fa1f fe82 	uxth.w	lr, r2
 8011dde:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8011de2:	1887      	adds	r7, r0, r2
 8011de4:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 8011de8:	3201      	adds	r2, #1
 8011dea:	3301      	adds	r3, #1
 8011dec:	e7eb      	b.n	8011dc6 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8011dee:	4299      	cmp	r1, r3
 8011df0:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 8011df4:	bfa8      	it	ge
 8011df6:	3501      	addge	r5, #1
 8011df8:	429e      	cmp	r6, r3
 8011dfa:	bfc8      	it	gt
 8011dfc:	3401      	addgt	r4, #1
 8011dfe:	e7f4      	b.n	8011dea <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8011e00:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 8011e04:	1b49      	subs	r1, r1, r5
 8011e06:	1b1b      	subs	r3, r3, r4
 8011e08:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 8011e0c:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8011e10:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8011e14:	4293      	cmp	r3, r2
 8011e16:	dd03      	ble.n	8011e20 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8011e18:	3b01      	subs	r3, #1
 8011e1a:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8011e1e:	e7f7      	b.n	8011e10 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8011e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08011e24 <_ZN8touchgfx11Application15handleTickEventEv>:
 8011e24:	b570      	push	{r4, r5, r6, lr}
 8011e26:	4d16      	ldr	r5, [pc, #88]	; (8011e80 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8011e28:	4604      	mov	r4, r0
 8011e2a:	6828      	ldr	r0, [r5, #0]
 8011e2c:	b140      	cbz	r0, 8011e40 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8011e2e:	7a03      	ldrb	r3, [r0, #8]
 8011e30:	b933      	cbnz	r3, 8011e40 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8011e32:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8011e36:	6803      	ldr	r3, [r0, #0]
 8011e38:	689b      	ldr	r3, [r3, #8]
 8011e3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011e3e:	4718      	bx	r3
 8011e40:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 8011e44:	4e0f      	ldr	r6, [pc, #60]	; (8011e84 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8011e46:	b973      	cbnz	r3, 8011e66 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8011e48:	b168      	cbz	r0, 8011e66 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8011e4a:	7a03      	ldrb	r3, [r0, #8]
 8011e4c:	b15b      	cbz	r3, 8011e66 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8011e4e:	6830      	ldr	r0, [r6, #0]
 8011e50:	b110      	cbz	r0, 8011e58 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8011e52:	6803      	ldr	r3, [r0, #0]
 8011e54:	691b      	ldr	r3, [r3, #16]
 8011e56:	4798      	blx	r3
 8011e58:	6828      	ldr	r0, [r5, #0]
 8011e5a:	6803      	ldr	r3, [r0, #0]
 8011e5c:	68db      	ldr	r3, [r3, #12]
 8011e5e:	4798      	blx	r3
 8011e60:	2301      	movs	r3, #1
 8011e62:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8011e66:	3404      	adds	r4, #4
 8011e68:	4620      	mov	r0, r4
 8011e6a:	f7ff ff5f 	bl	8011d2c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8011e6e:	4620      	mov	r0, r4
 8011e70:	f7ff ffa0 	bl	8011db4 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8011e74:	6830      	ldr	r0, [r6, #0]
 8011e76:	b110      	cbz	r0, 8011e7e <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8011e78:	6803      	ldr	r3, [r0, #0]
 8011e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e7c:	e7dd      	b.n	8011e3a <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8011e7e:	bd70      	pop	{r4, r5, r6, pc}
 8011e80:	2400e49c 	.word	0x2400e49c
 8011e84:	2400e498 	.word	0x2400e498

08011e88 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8011e88:	4603      	mov	r3, r0
 8011e8a:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8011e8e:	2200      	movs	r2, #0
 8011e90:	801a      	strh	r2, [r3, #0]
 8011e92:	3308      	adds	r3, #8
 8011e94:	f823 2c06 	strh.w	r2, [r3, #-6]
 8011e98:	f823 2c04 	strh.w	r2, [r3, #-4]
 8011e9c:	f823 2c02 	strh.w	r2, [r3, #-2]
 8011ea0:	428b      	cmp	r3, r1
 8011ea2:	d1f5      	bne.n	8011e90 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8011ea4:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8011ea8:	4770      	bx	lr
	...

08011eac <_ZN8touchgfx11ApplicationC1Ev>:
 8011eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011eae:	4b1d      	ldr	r3, [pc, #116]	; (8011f24 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8011eb0:	4606      	mov	r6, r0
 8011eb2:	4604      	mov	r4, r0
 8011eb4:	2500      	movs	r5, #0
 8011eb6:	f846 3b04 	str.w	r3, [r6], #4
 8011eba:	22a8      	movs	r2, #168	; 0xa8
 8011ebc:	2100      	movs	r1, #0
 8011ebe:	4630      	mov	r0, r6
 8011ec0:	f00b fd78 	bl	801d9b4 <memset>
 8011ec4:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 8011ec8:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8011ecc:	4f16      	ldr	r7, [pc, #88]	; (8011f28 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8011ece:	f7ff ffdb 	bl	8011e88 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8011ed2:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8011ed6:	f7ff ffd7 	bl	8011e88 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8011eda:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8011ede:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8011ee2:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 8011ee6:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 8011eea:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 8011eee:	490f      	ldr	r1, [pc, #60]	; (8011f2c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8011ef0:	480f      	ldr	r0, [pc, #60]	; (8011f30 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8011ef2:	f00b f879 	bl	801cfe8 <CRC_Lock>
 8011ef6:	4b0f      	ldr	r3, [pc, #60]	; (8011f34 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8011ef8:	b158      	cbz	r0, 8011f12 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8011efa:	801d      	strh	r5, [r3, #0]
 8011efc:	2300      	movs	r3, #0
 8011efe:	4a0e      	ldr	r2, [pc, #56]	; (8011f38 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8011f00:	4630      	mov	r0, r6
 8011f02:	6013      	str	r3, [r2, #0]
 8011f04:	4a0d      	ldr	r2, [pc, #52]	; (8011f3c <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8011f06:	603b      	str	r3, [r7, #0]
 8011f08:	6013      	str	r3, [r2, #0]
 8011f0a:	f7ff ff2e 	bl	8011d6a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8011f0e:	4620      	mov	r0, r4
 8011f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011f16:	2002      	movs	r0, #2
 8011f18:	801a      	strh	r2, [r3, #0]
 8011f1a:	6038      	str	r0, [r7, #0]
 8011f1c:	f001 faee 	bl	80134fc <_ZN8touchgfx6Screen4drawEv>
 8011f20:	e7ec      	b.n	8011efc <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8011f22:	bf00      	nop
 8011f24:	08020944 	.word	0x08020944
 8011f28:	2400e498 	.word	0x2400e498
 8011f2c:	b5e8b5cd 	.word	0xb5e8b5cd
 8011f30:	f407a5c2 	.word	0xf407a5c2
 8011f34:	2400005c 	.word	0x2400005c
 8011f38:	2400e4a8 	.word	0x2400e4a8
 8011f3c:	2400e49c 	.word	0x2400e49c

08011f40 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8011f40:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8011f44:	3b01      	subs	r3, #1
 8011f46:	b29b      	uxth	r3, r3
 8011f48:	428b      	cmp	r3, r1
 8011f4a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8011f4e:	b510      	push	{r4, lr}
 8011f50:	d908      	bls.n	8011f64 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8011f52:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8011f56:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8011f5a:	681a      	ldr	r2, [r3, #0]
 8011f5c:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8011f60:	685a      	ldr	r2, [r3, #4]
 8011f62:	6062      	str	r2, [r4, #4]
 8011f64:	bd10      	pop	{r4, pc}
	...

08011f68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8011f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f6c:	b08f      	sub	sp, #60	; 0x3c
 8011f6e:	4b8f      	ldr	r3, [pc, #572]	; (80121ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8011f70:	4683      	mov	fp, r0
 8011f72:	ac0a      	add	r4, sp, #40	; 0x28
 8011f74:	e884 0006 	stmia.w	r4, {r1, r2}
 8011f78:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011f7c:	4620      	mov	r0, r4
 8011f7e:	4b8c      	ldr	r3, [pc, #560]	; (80121b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8011f80:	f9b3 1000 	ldrsh.w	r1, [r3]
 8011f84:	f7ff fe55 	bl	8011c32 <_ZN8touchgfx4Rect10restrictToEss>
 8011f88:	4620      	mov	r0, r4
 8011f8a:	f7fa fb46 	bl	800c61a <_ZNK8touchgfx4Rect7isEmptyEv>
 8011f8e:	2800      	cmp	r0, #0
 8011f90:	d16a      	bne.n	8012068 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8011f92:	9403      	str	r4, [sp, #12]
 8011f94:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 8011f98:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8011f9c:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8011fa0:	9301      	str	r3, [sp, #4]
 8011fa2:	35a4      	adds	r5, #164	; 0xa4
 8011fa4:	b15c      	cbz	r4, 8011fbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8011fa6:	4629      	mov	r1, r5
 8011fa8:	9803      	ldr	r0, [sp, #12]
 8011faa:	f7ff fe93 	bl	8011cd4 <_ZNK8touchgfx4Rect8includesERKS0_>
 8011fae:	3c01      	subs	r4, #1
 8011fb0:	b118      	cbz	r0, 8011fba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8011fb2:	b2a1      	uxth	r1, r4
 8011fb4:	9801      	ldr	r0, [sp, #4]
 8011fb6:	f7ff ffc3 	bl	8011f40 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8011fba:	3d08      	subs	r5, #8
 8011fbc:	e7f2      	b.n	8011fa4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8011fbe:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
 8011fc2:	f108 33ff 	add.w	r3, r8, #4294967295
 8011fc6:	f8cd 8010 	str.w	r8, [sp, #16]
 8011fca:	9302      	str	r3, [sp, #8]
 8011fcc:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8011fd0:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8011fd4:	9306      	str	r3, [sp, #24]
 8011fd6:	445c      	add	r4, fp
 8011fd8:	2500      	movs	r5, #0
 8011fda:	4626      	mov	r6, r4
 8011fdc:	f8cd 8014 	str.w	r8, [sp, #20]
 8011fe0:	462f      	mov	r7, r5
 8011fe2:	9b05      	ldr	r3, [sp, #20]
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d073      	beq.n	80120d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8011fe8:	9903      	ldr	r1, [sp, #12]
 8011fea:	4630      	mov	r0, r6
 8011fec:	f7ff fdff 	bl	8011bee <_ZNK8touchgfx4Rect9intersectERKS0_>
 8011ff0:	b350      	cbz	r0, 8012048 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8011ff2:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8011ff6:	f9b6 c000 	ldrsh.w	ip, [r6]
 8011ffa:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 8011ffe:	45e6      	cmp	lr, ip
 8012000:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8012004:	db33      	blt.n	801206e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8012006:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801200a:	88b3      	ldrh	r3, [r6, #4]
 801200c:	4472      	add	r2, lr
 801200e:	4463      	add	r3, ip
 8012010:	b212      	sxth	r2, r2
 8012012:	b21b      	sxth	r3, r3
 8012014:	429a      	cmp	r2, r3
 8012016:	dc2a      	bgt.n	801206e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8012018:	fa1f f289 	uxth.w	r2, r9
 801201c:	88f3      	ldrh	r3, [r6, #6]
 801201e:	45ca      	cmp	sl, r9
 8012020:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8012024:	4413      	add	r3, r2
 8012026:	fa1f fc8a 	uxth.w	ip, sl
 801202a:	b29b      	uxth	r3, r3
 801202c:	fa0f fe83 	sxth.w	lr, r3
 8012030:	db0f      	blt.n	8012052 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8012032:	eba3 030c 	sub.w	r3, r3, ip
 8012036:	1ac9      	subs	r1, r1, r3
 8012038:	b209      	sxth	r1, r1
 801203a:	2900      	cmp	r1, #0
 801203c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8012040:	dd12      	ble.n	8012068 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8012042:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 8012046:	4605      	mov	r5, r0
 8012048:	9b05      	ldr	r3, [sp, #20]
 801204a:	3e08      	subs	r6, #8
 801204c:	3b01      	subs	r3, #1
 801204e:	9305      	str	r3, [sp, #20]
 8012050:	e7c7      	b.n	8011fe2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8012052:	4461      	add	r1, ip
 8012054:	b209      	sxth	r1, r1
 8012056:	4571      	cmp	r1, lr
 8012058:	dc38      	bgt.n	80120cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801205a:	eba2 020c 	sub.w	r2, r2, ip
 801205e:	b212      	sxth	r2, r2
 8012060:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8012064:	2a00      	cmp	r2, #0
 8012066:	dcee      	bgt.n	8012046 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8012068:	b00f      	add	sp, #60	; 0x3c
 801206a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801206e:	45ca      	cmp	sl, r9
 8012070:	db2c      	blt.n	80120cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8012072:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8012076:	449a      	add	sl, r3
 8012078:	88f3      	ldrh	r3, [r6, #6]
 801207a:	4499      	add	r9, r3
 801207c:	fa0f fa8a 	sxth.w	sl, sl
 8012080:	fa0f f989 	sxth.w	r9, r9
 8012084:	45ca      	cmp	sl, r9
 8012086:	dc21      	bgt.n	80120cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8012088:	fa1f f28c 	uxth.w	r2, ip
 801208c:	88b3      	ldrh	r3, [r6, #4]
 801208e:	45e6      	cmp	lr, ip
 8012090:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8012094:	4413      	add	r3, r2
 8012096:	fa1f f98e 	uxth.w	r9, lr
 801209a:	b29b      	uxth	r3, r3
 801209c:	fa0f fa83 	sxth.w	sl, r3
 80120a0:	db0a      	blt.n	80120b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 80120a2:	eba3 0309 	sub.w	r3, r3, r9
 80120a6:	1ac9      	subs	r1, r1, r3
 80120a8:	b209      	sxth	r1, r1
 80120aa:	2900      	cmp	r1, #0
 80120ac:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 80120b0:	ddda      	ble.n	8012068 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80120b2:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 80120b6:	e7c6      	b.n	8012046 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80120b8:	4449      	add	r1, r9
 80120ba:	b209      	sxth	r1, r1
 80120bc:	4551      	cmp	r1, sl
 80120be:	dc05      	bgt.n	80120cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80120c0:	eba2 0209 	sub.w	r2, r2, r9
 80120c4:	b212      	sxth	r2, r2
 80120c6:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80120ca:	e7cb      	b.n	8012064 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 80120cc:	4607      	mov	r7, r0
 80120ce:	e7bb      	b.n	8012048 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80120d0:	2d00      	cmp	r5, #0
 80120d2:	d181      	bne.n	8011fd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 80120d4:	2f00      	cmp	r7, #0
 80120d6:	f000 81dd 	beq.w	8012494 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80120da:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 80120de:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 80120e2:	b2b3      	uxth	r3, r6
 80120e4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80120e8:	b2b9      	uxth	r1, r7
 80120ea:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 80120ee:	441a      	add	r2, r3
 80120f0:	448a      	add	sl, r1
 80120f2:	9105      	str	r1, [sp, #20]
 80120f4:	b292      	uxth	r2, r2
 80120f6:	fa1f fa8a 	uxth.w	sl, sl
 80120fa:	fa0f f882 	sxth.w	r8, r2
 80120fe:	fa0f f98a 	sxth.w	r9, sl
 8012102:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8012106:	9b04      	ldr	r3, [sp, #16]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d053      	beq.n	80121b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801210c:	9903      	ldr	r1, [sp, #12]
 801210e:	4620      	mov	r0, r4
 8012110:	f7ff fd6d 	bl	8011bee <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012114:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012118:	b1c0      	cbz	r0, 801214c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801211a:	f9b4 e000 	ldrsh.w	lr, [r4]
 801211e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8012122:	4576      	cmp	r6, lr
 8012124:	dc23      	bgt.n	801216e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8012126:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801212a:	44f4      	add	ip, lr
 801212c:	fa0f fc8c 	sxth.w	ip, ip
 8012130:	45e0      	cmp	r8, ip
 8012132:	db1c      	blt.n	801216e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8012134:	428f      	cmp	r7, r1
 8012136:	fa1f fc81 	uxth.w	ip, r1
 801213a:	88e1      	ldrh	r1, [r4, #6]
 801213c:	dc0d      	bgt.n	801215a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801213e:	ebaa 0c0c 	sub.w	ip, sl, ip
 8012142:	f8a4 9002 	strh.w	r9, [r4, #2]
 8012146:	eba1 010c 	sub.w	r1, r1, ip
 801214a:	80e1      	strh	r1, [r4, #6]
 801214c:	4628      	mov	r0, r5
 801214e:	9904      	ldr	r1, [sp, #16]
 8012150:	3c08      	subs	r4, #8
 8012152:	4605      	mov	r5, r0
 8012154:	3901      	subs	r1, #1
 8012156:	9104      	str	r1, [sp, #16]
 8012158:	e7d3      	b.n	8012102 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 801215a:	4461      	add	r1, ip
 801215c:	b209      	sxth	r1, r1
 801215e:	4549      	cmp	r1, r9
 8012160:	dcf5      	bgt.n	801214e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8012162:	9905      	ldr	r1, [sp, #20]
 8012164:	eba1 0c0c 	sub.w	ip, r1, ip
 8012168:	f8a4 c006 	strh.w	ip, [r4, #6]
 801216c:	e7ee      	b.n	801214c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801216e:	428f      	cmp	r7, r1
 8012170:	dced      	bgt.n	801214e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8012172:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8012176:	4461      	add	r1, ip
 8012178:	b209      	sxth	r1, r1
 801217a:	4589      	cmp	r9, r1
 801217c:	dbe7      	blt.n	801214e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801217e:	4576      	cmp	r6, lr
 8012180:	fa1f fc8e 	uxth.w	ip, lr
 8012184:	88a1      	ldrh	r1, [r4, #4]
 8012186:	dc07      	bgt.n	8012198 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8012188:	eba2 0c0c 	sub.w	ip, r2, ip
 801218c:	f8a4 8000 	strh.w	r8, [r4]
 8012190:	eba1 010c 	sub.w	r1, r1, ip
 8012194:	80a1      	strh	r1, [r4, #4]
 8012196:	e7d9      	b.n	801214c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8012198:	4461      	add	r1, ip
 801219a:	b209      	sxth	r1, r1
 801219c:	4588      	cmp	r8, r1
 801219e:	dbd6      	blt.n	801214e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80121a0:	eba3 0c0c 	sub.w	ip, r3, ip
 80121a4:	f8a4 c004 	strh.w	ip, [r4, #4]
 80121a8:	e7d0      	b.n	801214c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80121aa:	bf00      	nop
 80121ac:	2400e44a 	.word	0x2400e44a
 80121b0:	2400e448 	.word	0x2400e448
 80121b4:	2d00      	cmp	r5, #0
 80121b6:	f000 816d 	beq.w	8012494 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80121ba:	9b06      	ldr	r3, [sp, #24]
 80121bc:	445b      	add	r3, fp
 80121be:	461c      	mov	r4, r3
 80121c0:	9b02      	ldr	r3, [sp, #8]
 80121c2:	3301      	adds	r3, #1
 80121c4:	f000 8166 	beq.w	8012494 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80121c8:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 80121cc:	9803      	ldr	r0, [sp, #12]
 80121ce:	4629      	mov	r1, r5
 80121d0:	f7ff fd80 	bl	8011cd4 <_ZNK8touchgfx4Rect8includesERKS0_>
 80121d4:	b120      	cbz	r0, 80121e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 80121d6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80121da:	9801      	ldr	r0, [sp, #4]
 80121dc:	f7ff feb0 	bl	8011f40 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80121e0:	9903      	ldr	r1, [sp, #12]
 80121e2:	4628      	mov	r0, r5
 80121e4:	f7ff fd03 	bl	8011bee <_ZNK8touchgfx4Rect9intersectERKS0_>
 80121e8:	2800      	cmp	r0, #0
 80121ea:	f000 809c 	beq.w	8012326 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 80121ee:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 80121f2:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 80121f6:	fa1f f189 	uxth.w	r1, r9
 80121fa:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 80121fe:	9309      	str	r3, [sp, #36]	; 0x24
 8012200:	eb01 0c03 	add.w	ip, r1, r3
 8012204:	b283      	uxth	r3, r0
 8012206:	4548      	cmp	r0, r9
 8012208:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801220c:	fa1f fa8c 	uxth.w	sl, ip
 8012210:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8012214:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 8012218:	eb03 050c 	add.w	r5, r3, ip
 801221c:	b2ad      	uxth	r5, r5
 801221e:	9505      	str	r5, [sp, #20]
 8012220:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8012224:	9504      	str	r5, [sp, #16]
 8012226:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 801222a:	f340 8099 	ble.w	8012360 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801222e:	1a5b      	subs	r3, r3, r1
 8012230:	4596      	cmp	lr, r2
 8012232:	fa0f f08a 	sxth.w	r0, sl
 8012236:	b29b      	uxth	r3, r3
 8012238:	b21e      	sxth	r6, r3
 801223a:	dd2e      	ble.n	801229a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 801223c:	9f02      	ldr	r7, [sp, #8]
 801223e:	fa1f fe8e 	uxth.w	lr, lr
 8012242:	b292      	uxth	r2, r2
 8012244:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8012248:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801224c:	9f04      	ldr	r7, [sp, #16]
 801224e:	ebae 0102 	sub.w	r1, lr, r2
 8012252:	44a6      	add	lr, r4
 8012254:	1a3f      	subs	r7, r7, r0
 8012256:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 801225a:	b289      	uxth	r1, r1
 801225c:	4402      	add	r2, r0
 801225e:	fa0f fe8e 	sxth.w	lr, lr
 8012262:	b20d      	sxth	r5, r1
 8012264:	b212      	sxth	r2, r2
 8012266:	436f      	muls	r7, r5
 8012268:	ebae 0202 	sub.w	r2, lr, r2
 801226c:	4372      	muls	r2, r6
 801226e:	4297      	cmp	r7, r2
 8012270:	db09      	blt.n	8012286 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8012272:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 8012276:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 801227a:	449c      	add	ip, r3
 801227c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8012280:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8012284:	e686      	b.n	8011f94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012286:	4421      	add	r1, r4
 8012288:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 801228c:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 8012290:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8012294:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8012298:	e67c      	b.n	8011f94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801229a:	9f04      	ldr	r7, [sp, #16]
 801229c:	42b8      	cmp	r0, r7
 801229e:	da27      	bge.n	80122f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 80122a0:	9902      	ldr	r1, [sp, #8]
 80122a2:	1a3f      	subs	r7, r7, r0
 80122a4:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 80122a8:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 80122ac:	eb05 010e 	add.w	r1, r5, lr
 80122b0:	fa1f f881 	uxth.w	r8, r1
 80122b4:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 80122b8:	4411      	add	r1, r2
 80122ba:	fa0f f988 	sxth.w	r9, r8
 80122be:	eba2 020e 	sub.w	r2, r2, lr
 80122c2:	eba1 0108 	sub.w	r1, r1, r8
 80122c6:	4372      	muls	r2, r6
 80122c8:	b289      	uxth	r1, r1
 80122ca:	fa0f f881 	sxth.w	r8, r1
 80122ce:	fb08 f707 	mul.w	r7, r8, r7
 80122d2:	42ba      	cmp	r2, r7
 80122d4:	dc06      	bgt.n	80122e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 80122d6:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 80122da:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 80122de:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 80122e2:	e7ca      	b.n	801227a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 80122e4:	4429      	add	r1, r5
 80122e6:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 80122ea:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80122ee:	e651      	b.n	8011f94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80122f0:	9805      	ldr	r0, [sp, #20]
 80122f2:	2d06      	cmp	r5, #6
 80122f4:	ebaa 0000 	sub.w	r0, sl, r0
 80122f8:	b280      	uxth	r0, r0
 80122fa:	fa0f fe80 	sxth.w	lr, r0
 80122fe:	d817      	bhi.n	8012330 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8012300:	9b04      	ldr	r3, [sp, #16]
 8012302:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 8012306:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801230a:	1c6b      	adds	r3, r5, #1
 801230c:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 8012310:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8012314:	9b01      	ldr	r3, [sp, #4]
 8012316:	9801      	ldr	r0, [sp, #4]
 8012318:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801231c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8012320:	805a      	strh	r2, [r3, #2]
 8012322:	809e      	strh	r6, [r3, #4]
 8012324:	80d9      	strh	r1, [r3, #6]
 8012326:	9b02      	ldr	r3, [sp, #8]
 8012328:	3c08      	subs	r4, #8
 801232a:	3b01      	subs	r3, #1
 801232c:	9302      	str	r3, [sp, #8]
 801232e:	e747      	b.n	80121c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8012330:	9a02      	ldr	r2, [sp, #8]
 8012332:	45b6      	cmp	lr, r6
 8012334:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8012338:	db0d      	blt.n	8012356 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801233a:	449c      	add	ip, r3
 801233c:	445a      	add	r2, fp
 801233e:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8012342:	fa1f fc8c 	uxth.w	ip, ip
 8012346:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 801234a:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801234e:	448c      	add	ip, r1
 8012350:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 8012354:	e61e      	b.n	8011f94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012356:	445a      	add	r2, fp
 8012358:	4484      	add	ip, r0
 801235a:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 801235e:	e78f      	b.n	8012280 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8012360:	fa1f f18e 	uxth.w	r1, lr
 8012364:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8012368:	b293      	uxth	r3, r2
 801236a:	4596      	cmp	lr, r2
 801236c:	eb01 0806 	add.w	r8, r1, r6
 8012370:	9306      	str	r3, [sp, #24]
 8012372:	fa1f f888 	uxth.w	r8, r8
 8012376:	9f06      	ldr	r7, [sp, #24]
 8012378:	fa0f f388 	sxth.w	r3, r8
 801237c:	9307      	str	r3, [sp, #28]
 801237e:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 8012382:	443b      	add	r3, r7
 8012384:	b29b      	uxth	r3, r3
 8012386:	9308      	str	r3, [sp, #32]
 8012388:	da24      	bge.n	80123d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801238a:	9905      	ldr	r1, [sp, #20]
 801238c:	eba3 0308 	sub.w	r3, r3, r8
 8012390:	eba2 020e 	sub.w	r2, r2, lr
 8012394:	eba9 0000 	sub.w	r0, r9, r0
 8012398:	ebaa 0401 	sub.w	r4, sl, r1
 801239c:	b29b      	uxth	r3, r3
 801239e:	b2a4      	uxth	r4, r4
 80123a0:	b219      	sxth	r1, r3
 80123a2:	b225      	sxth	r5, r4
 80123a4:	4348      	muls	r0, r1
 80123a6:	436a      	muls	r2, r5
 80123a8:	4282      	cmp	r2, r0
 80123aa:	9a02      	ldr	r2, [sp, #8]
 80123ac:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80123b0:	445a      	add	r2, fp
 80123b2:	dc06      	bgt.n	80123c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 80123b4:	9b07      	ldr	r3, [sp, #28]
 80123b6:	44a4      	add	ip, r4
 80123b8:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 80123bc:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 80123c0:	e75e      	b.n	8012280 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80123c2:	9904      	ldr	r1, [sp, #16]
 80123c4:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 80123c8:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 80123cc:	4433      	add	r3, r6
 80123ce:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80123d2:	e5df      	b.n	8011f94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80123d4:	9f06      	ldr	r7, [sp, #24]
 80123d6:	9b04      	ldr	r3, [sp, #16]
 80123d8:	1bc9      	subs	r1, r1, r7
 80123da:	fa0f f78a 	sxth.w	r7, sl
 80123de:	b289      	uxth	r1, r1
 80123e0:	429f      	cmp	r7, r3
 80123e2:	fa0f fe81 	sxth.w	lr, r1
 80123e6:	dd23      	ble.n	8012430 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 80123e8:	9a05      	ldr	r2, [sp, #20]
 80123ea:	eba9 0000 	sub.w	r0, r9, r0
 80123ee:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80123f2:	ebaa 0202 	sub.w	r2, sl, r2
 80123f6:	9d07      	ldr	r5, [sp, #28]
 80123f8:	fb0e f000 	mul.w	r0, lr, r0
 80123fc:	b292      	uxth	r2, r2
 80123fe:	eba5 0a03 	sub.w	sl, r5, r3
 8012402:	9b02      	ldr	r3, [sp, #8]
 8012404:	b214      	sxth	r4, r2
 8012406:	00db      	lsls	r3, r3, #3
 8012408:	fb04 fa0a 	mul.w	sl, r4, sl
 801240c:	445b      	add	r3, fp
 801240e:	4550      	cmp	r0, sl
 8012410:	db03      	blt.n	801241a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 8012412:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 8012416:	4494      	add	ip, r2
 8012418:	e732      	b.n	8012280 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801241a:	9a04      	ldr	r2, [sp, #16]
 801241c:	4431      	add	r1, r6
 801241e:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 8012422:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8012426:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 801242a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801242e:	e75c      	b.n	80122ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8012430:	9b08      	ldr	r3, [sp, #32]
 8012432:	2d06      	cmp	r5, #6
 8012434:	eba3 0308 	sub.w	r3, r3, r8
 8012438:	b29b      	uxth	r3, r3
 801243a:	b218      	sxth	r0, r3
 801243c:	d813      	bhi.n	8012466 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 801243e:	9b07      	ldr	r3, [sp, #28]
 8012440:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 8012444:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 8012448:	1c6b      	adds	r3, r5, #1
 801244a:	9901      	ldr	r1, [sp, #4]
 801244c:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8012450:	9b01      	ldr	r3, [sp, #4]
 8012452:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8012456:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801245a:	805a      	strh	r2, [r3, #2]
 801245c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801245e:	f8a3 e006 	strh.w	lr, [r3, #6]
 8012462:	809a      	strh	r2, [r3, #4]
 8012464:	e75f      	b.n	8012326 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8012466:	9c02      	ldr	r4, [sp, #8]
 8012468:	4570      	cmp	r0, lr
 801246a:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801246e:	db0d      	blt.n	801248c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 8012470:	4431      	add	r1, r6
 8012472:	9b06      	ldr	r3, [sp, #24]
 8012474:	445c      	add	r4, fp
 8012476:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801247a:	b289      	uxth	r1, r1
 801247c:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 8012480:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8012484:	4419      	add	r1, r3
 8012486:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 801248a:	e583      	b.n	8011f94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801248c:	445c      	add	r4, fp
 801248e:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 8012492:	e79b      	b.n	80123cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8012494:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 8012498:	2e07      	cmp	r6, #7
 801249a:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801249e:	d812      	bhi.n	80124c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
 80124a0:	1c75      	adds	r5, r6, #1
 80124a2:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 80124a6:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 80124aa:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 80124ae:	9d01      	ldr	r5, [sp, #4]
 80124b0:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80124b4:	442c      	add	r4, r5
 80124b6:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80124ba:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 80124be:	8061      	strh	r1, [r4, #2]
 80124c0:	80a2      	strh	r2, [r4, #4]
 80124c2:	80e3      	strh	r3, [r4, #6]
 80124c4:	e5d0      	b.n	8012068 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80124c6:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 80124ca:	3e01      	subs	r6, #1
 80124cc:	445c      	add	r4, fp
 80124ce:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80124d2:	f04f 37ff 	mov.w	r7, #4294967295
 80124d6:	2500      	movs	r5, #0
 80124d8:	9305      	str	r3, [sp, #20]
 80124da:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 80124de:	1e72      	subs	r2, r6, #1
 80124e0:	9302      	str	r3, [sp, #8]
 80124e2:	4691      	mov	r9, r2
 80124e4:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 80124e8:	9304      	str	r3, [sp, #16]
 80124ea:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 80124ee:	f1b9 3fff 	cmp.w	r9, #4294967295
 80124f2:	6818      	ldr	r0, [r3, #0]
 80124f4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80124f8:	9207      	str	r2, [sp, #28]
 80124fa:	bf16      	itet	ne
 80124fc:	9905      	ldrne	r1, [sp, #20]
 80124fe:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8012502:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8012506:	9306      	str	r3, [sp, #24]
 8012508:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801250c:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8012510:	fb18 f801 	smulbb	r8, r8, r1
 8012514:	6859      	ldr	r1, [r3, #4]
 8012516:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801251a:	4671      	mov	r1, lr
 801251c:	a80c      	add	r0, sp, #48	; 0x30
 801251e:	f7fb fdda 	bl	800e0d6 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012522:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8012526:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801252a:	f04f 0c08 	mov.w	ip, #8
 801252e:	9b04      	ldr	r3, [sp, #16]
 8012530:	9a02      	ldr	r2, [sp, #8]
 8012532:	fb10 f001 	smulbb	r0, r0, r1
 8012536:	fb02 8803 	mla	r8, r2, r3, r8
 801253a:	eba0 0108 	sub.w	r1, r0, r8
 801253e:	fb90 f0fc 	sdiv	r0, r0, ip
 8012542:	4288      	cmp	r0, r1
 8012544:	dc20      	bgt.n	8012588 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 8012546:	4551      	cmp	r1, sl
 8012548:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801254c:	da03      	bge.n	8012556 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
 801254e:	b1d9      	cbz	r1, 8012588 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 8012550:	468a      	mov	sl, r1
 8012552:	464f      	mov	r7, r9
 8012554:	4635      	mov	r5, r6
 8012556:	f109 39ff 	add.w	r9, r9, #4294967295
 801255a:	f119 0f02 	cmn.w	r9, #2
 801255e:	d1c6      	bne.n	80124ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 8012560:	4616      	mov	r6, r2
 8012562:	3201      	adds	r2, #1
 8012564:	f1a4 0408 	sub.w	r4, r4, #8
 8012568:	d1b7      	bne.n	80124da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
 801256a:	9b01      	ldr	r3, [sp, #4]
 801256c:	b2ac      	uxth	r4, r5
 801256e:	00ed      	lsls	r5, r5, #3
 8012570:	1958      	adds	r0, r3, r5
 8012572:	1c7b      	adds	r3, r7, #1
 8012574:	d10b      	bne.n	801258e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
 8012576:	4601      	mov	r1, r0
 8012578:	9803      	ldr	r0, [sp, #12]
 801257a:	f7fb fdac 	bl	800e0d6 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801257e:	4621      	mov	r1, r4
 8012580:	9801      	ldr	r0, [sp, #4]
 8012582:	f7ff fcdd 	bl	8011f40 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8012586:	e505      	b.n	8011f94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012588:	464f      	mov	r7, r9
 801258a:	4635      	mov	r5, r6
 801258c:	e7ed      	b.n	801256a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
 801258e:	9b01      	ldr	r3, [sp, #4]
 8012590:	00ff      	lsls	r7, r7, #3
 8012592:	445d      	add	r5, fp
 8012594:	19d9      	adds	r1, r3, r7
 8012596:	445f      	add	r7, fp
 8012598:	f7fb fd9d 	bl	800e0d6 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801259c:	9b03      	ldr	r3, [sp, #12]
 801259e:	cb03      	ldmia	r3!, {r0, r1}
 80125a0:	9b03      	ldr	r3, [sp, #12]
 80125a2:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 80125a6:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80125aa:	f855 0fac 	ldr.w	r0, [r5, #172]!
 80125ae:	6869      	ldr	r1, [r5, #4]
 80125b0:	c303      	stmia	r3!, {r0, r1}
 80125b2:	e7e4      	b.n	801257e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

080125b4 <_ZN8touchgfx11Application10invalidateEv>:
 80125b4:	4b09      	ldr	r3, [pc, #36]	; (80125dc <_ZN8touchgfx11Application10invalidateEv+0x28>)
 80125b6:	b082      	sub	sp, #8
 80125b8:	2100      	movs	r1, #0
 80125ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80125be:	4b08      	ldr	r3, [pc, #32]	; (80125e0 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 80125c0:	9100      	str	r1, [sp, #0]
 80125c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80125c6:	f8ad 2004 	strh.w	r2, [sp, #4]
 80125ca:	f8ad 3006 	strh.w	r3, [sp, #6]
 80125ce:	ab02      	add	r3, sp, #8
 80125d0:	e913 0006 	ldmdb	r3, {r1, r2}
 80125d4:	b002      	add	sp, #8
 80125d6:	f7ff bcc7 	b.w	8011f68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80125da:	bf00      	nop
 80125dc:	2400e448 	.word	0x2400e448
 80125e0:	2400e44a 	.word	0x2400e44a

080125e4 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 80125e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125e8:	f500 7698 	add.w	r6, r0, #304	; 0x130
 80125ec:	b09b      	sub	sp, #108	; 0x6c
 80125ee:	4604      	mov	r4, r0
 80125f0:	4630      	mov	r0, r6
 80125f2:	f7fa f812 	bl	800c61a <_ZNK8touchgfx4Rect7isEmptyEv>
 80125f6:	4605      	mov	r5, r0
 80125f8:	b940      	cbnz	r0, 801260c <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 80125fa:	4620      	mov	r0, r4
 80125fc:	e896 0006 	ldmia.w	r6, {r1, r2}
 8012600:	f7ff fcb2 	bl	8011f68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8012604:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8012608:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 801260c:	4bc8      	ldr	r3, [pc, #800]	; (8012930 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d03e      	beq.n	8012692 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8012614:	4dc7      	ldr	r5, [pc, #796]	; (8012934 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8012616:	4628      	mov	r0, r5
 8012618:	f7f9 ffff 	bl	800c61a <_ZNK8touchgfx4Rect7isEmptyEv>
 801261c:	4606      	mov	r6, r0
 801261e:	2800      	cmp	r0, #0
 8012620:	d137      	bne.n	8012692 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8012622:	4628      	mov	r0, r5
 8012624:	f7ff fa28 	bl	8011a78 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8012628:	6829      	ldr	r1, [r5, #0]
 801262a:	686a      	ldr	r2, [r5, #4]
 801262c:	4620      	mov	r0, r4
 801262e:	f7ff fc9b 	bl	8011f68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8012632:	802e      	strh	r6, [r5, #0]
 8012634:	806e      	strh	r6, [r5, #2]
 8012636:	80ae      	strh	r6, [r5, #4]
 8012638:	80ee      	strh	r6, [r5, #6]
 801263a:	ae09      	add	r6, sp, #36	; 0x24
 801263c:	4630      	mov	r0, r6
 801263e:	f7ff fc23 	bl	8011e88 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8012642:	4abd      	ldr	r2, [pc, #756]	; (8012938 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8012644:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8012648:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801264c:	8815      	ldrh	r5, [r2, #0]
 801264e:	9202      	str	r2, [sp, #8]
 8012650:	462b      	mov	r3, r5
 8012652:	429f      	cmp	r7, r3
 8012654:	d924      	bls.n	80126a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 8012656:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801265a:	2907      	cmp	r1, #7
 801265c:	d816      	bhi.n	801268c <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 801265e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8012662:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8012666:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 801266a:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801266e:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8012672:	1c4a      	adds	r2, r1, #1
 8012674:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8012678:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 801267c:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 8012680:	f8a2 9002 	strh.w	r9, [r2, #2]
 8012684:	f8a2 e004 	strh.w	lr, [r2, #4]
 8012688:	f8a2 c006 	strh.w	ip, [r2, #6]
 801268c:	3301      	adds	r3, #1
 801268e:	b29b      	uxth	r3, r3
 8012690:	e7df      	b.n	8012652 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 8012692:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8012696:	2b00      	cmp	r3, #0
 8012698:	d1cf      	bne.n	801263a <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 801269a:	b01b      	add	sp, #108	; 0x6c
 801269c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126a0:	462f      	mov	r7, r5
 80126a2:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 80126a6:	42bb      	cmp	r3, r7
 80126a8:	d90b      	bls.n	80126c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 80126aa:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 80126ae:	3701      	adds	r7, #1
 80126b0:	4620      	mov	r0, r4
 80126b2:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 80126b6:	b2bf      	uxth	r7, r7
 80126b8:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 80126bc:	f7ff fc54 	bl	8011f68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80126c0:	e7ef      	b.n	80126a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 80126c2:	4a9e      	ldr	r2, [pc, #632]	; (801293c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 80126c4:	6813      	ldr	r3, [r2, #0]
 80126c6:	4690      	mov	r8, r2
 80126c8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80126cc:	2b01      	cmp	r3, #1
 80126ce:	f040 80e4 	bne.w	801289a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 80126d2:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 80126d6:	4629      	mov	r1, r5
 80126d8:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 80126dc:	2500      	movs	r5, #0
 80126de:	33ae      	adds	r3, #174	; 0xae
 80126e0:	428f      	cmp	r7, r1
 80126e2:	f103 0308 	add.w	r3, r3, #8
 80126e6:	dd0a      	ble.n	80126fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 80126e8:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80126ec:	3101      	adds	r1, #1
 80126ee:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 80126f2:	4402      	add	r2, r0
 80126f4:	b212      	sxth	r2, r2
 80126f6:	4295      	cmp	r5, r2
 80126f8:	bfb8      	it	lt
 80126fa:	4615      	movlt	r5, r2
 80126fc:	e7f0      	b.n	80126e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 80126fe:	4b90      	ldr	r3, [pc, #576]	; (8012940 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8012700:	f8df b238 	ldr.w	fp, [pc, #568]	; 801293c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 8012704:	881b      	ldrh	r3, [r3, #0]
 8012706:	46d8      	mov	r8, fp
 8012708:	2b0f      	cmp	r3, #15
 801270a:	bf8c      	ite	hi
 801270c:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 8012710:	f04f 0a01 	movls.w	sl, #1
 8012714:	2300      	movs	r3, #0
 8012716:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801271a:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 801271e:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8012722:	4438      	add	r0, r7
 8012724:	b207      	sxth	r7, r0
 8012726:	f8db 0000 	ldr.w	r0, [fp]
 801272a:	42bd      	cmp	r5, r7
 801272c:	6803      	ldr	r3, [r0, #0]
 801272e:	f340 8084 	ble.w	801283a <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8012732:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012736:	4798      	blx	r3
 8012738:	eb07 030a 	add.w	r3, r7, sl
 801273c:	4298      	cmp	r0, r3
 801273e:	da07      	bge.n	8012750 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8012740:	4285      	cmp	r5, r0
 8012742:	dd05      	ble.n	8012750 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8012744:	4287      	cmp	r7, r0
 8012746:	dd6d      	ble.n	8012824 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8012748:	2f00      	cmp	r7, #0
 801274a:	dd6b      	ble.n	8012824 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801274c:	4628      	mov	r0, r5
 801274e:	e004      	b.n	801275a <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 8012750:	4287      	cmp	r7, r0
 8012752:	dcfb      	bgt.n	801274c <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 8012754:	42a8      	cmp	r0, r5
 8012756:	bfa8      	it	ge
 8012758:	4628      	movge	r0, r5
 801275a:	4b7a      	ldr	r3, [pc, #488]	; (8012944 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 801275c:	1bc0      	subs	r0, r0, r7
 801275e:	2200      	movs	r2, #0
 8012760:	f8ad 7016 	strh.w	r7, [sp, #22]
 8012764:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012768:	f8ad 2014 	strh.w	r2, [sp, #20]
 801276c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012770:	9b02      	ldr	r3, [sp, #8]
 8012772:	f8ad 001a 	strh.w	r0, [sp, #26]
 8012776:	881f      	ldrh	r7, [r3, #0]
 8012778:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801277c:	42bb      	cmp	r3, r7
 801277e:	d9cc      	bls.n	801271a <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8012780:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8012784:	ab07      	add	r3, sp, #28
 8012786:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801278a:	6851      	ldr	r1, [r2, #4]
 801278c:	c303      	stmia	r3!, {r0, r1}
 801278e:	a905      	add	r1, sp, #20
 8012790:	a807      	add	r0, sp, #28
 8012792:	f7ff fa2c 	bl	8011bee <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012796:	2800      	cmp	r0, #0
 8012798:	d04c      	beq.n	8012834 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801279a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801279e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80127a2:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 80127a6:	4686      	mov	lr, r0
 80127a8:	4290      	cmp	r0, r2
 80127aa:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 80127ae:	4448      	add	r0, r9
 80127b0:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 80127b4:	bfb8      	it	lt
 80127b6:	4696      	movlt	lr, r2
 80127b8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80127bc:	444a      	add	r2, r9
 80127be:	b280      	uxth	r0, r0
 80127c0:	4299      	cmp	r1, r3
 80127c2:	468c      	mov	ip, r1
 80127c4:	b292      	uxth	r2, r2
 80127c6:	9303      	str	r3, [sp, #12]
 80127c8:	bfb8      	it	lt
 80127ca:	469c      	movlt	ip, r3
 80127cc:	b203      	sxth	r3, r0
 80127ce:	fa0f f982 	sxth.w	r9, r2
 80127d2:	f8ad e01c 	strh.w	lr, [sp, #28]
 80127d6:	f8ad c01e 	strh.w	ip, [sp, #30]
 80127da:	454b      	cmp	r3, r9
 80127dc:	bfb8      	it	lt
 80127de:	4602      	movlt	r2, r0
 80127e0:	9b03      	ldr	r3, [sp, #12]
 80127e2:	eba2 020e 	sub.w	r2, r2, lr
 80127e6:	f8ad 2020 	strh.w	r2, [sp, #32]
 80127ea:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80127ee:	4411      	add	r1, r2
 80127f0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80127f4:	4413      	add	r3, r2
 80127f6:	b289      	uxth	r1, r1
 80127f8:	b29b      	uxth	r3, r3
 80127fa:	b208      	sxth	r0, r1
 80127fc:	b21a      	sxth	r2, r3
 80127fe:	4290      	cmp	r0, r2
 8012800:	bfb8      	it	lt
 8012802:	460b      	movlt	r3, r1
 8012804:	eba3 030c 	sub.w	r3, r3, ip
 8012808:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801280c:	a807      	add	r0, sp, #28
 801280e:	f7f9 ff04 	bl	800c61a <_ZNK8touchgfx4Rect7isEmptyEv>
 8012812:	b920      	cbnz	r0, 801281e <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8012814:	6823      	ldr	r3, [r4, #0]
 8012816:	a907      	add	r1, sp, #28
 8012818:	4620      	mov	r0, r4
 801281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801281c:	4798      	blx	r3
 801281e:	3701      	adds	r7, #1
 8012820:	b2bf      	uxth	r7, r7
 8012822:	e7a9      	b.n	8012778 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8012824:	f8d8 0000 	ldr.w	r0, [r8]
 8012828:	2101      	movs	r1, #1
 801282a:	6803      	ldr	r3, [r0, #0]
 801282c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012830:	4798      	blx	r3
 8012832:	e772      	b.n	801271a <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8012834:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8012838:	e7e8      	b.n	801280c <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801283c:	4798      	blx	r3
 801283e:	4b42      	ldr	r3, [pc, #264]	; (8012948 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 8012840:	781b      	ldrb	r3, [r3, #0]
 8012842:	2b00      	cmp	r3, #0
 8012844:	f43f af29 	beq.w	801269a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8012848:	2300      	movs	r3, #0
 801284a:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801284e:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8012852:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 8012856:	9b02      	ldr	r3, [sp, #8]
 8012858:	881b      	ldrh	r3, [r3, #0]
 801285a:	429d      	cmp	r5, r3
 801285c:	f67f af1d 	bls.w	801269a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8012860:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 8012864:	2907      	cmp	r1, #7
 8012866:	d815      	bhi.n	8012894 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 8012868:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 801286c:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 8012870:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8012874:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8012878:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 801287c:	1c4a      	adds	r2, r1, #1
 801287e:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 8012882:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8012886:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 801288a:	f8a2 e002 	strh.w	lr, [r2, #2]
 801288e:	f8a2 c004 	strh.w	ip, [r2, #4]
 8012892:	80d7      	strh	r7, [r2, #6]
 8012894:	3301      	adds	r3, #1
 8012896:	b29b      	uxth	r3, r3
 8012898:	e7df      	b.n	801285a <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 801289a:	2b02      	cmp	r3, #2
 801289c:	f040 8135 	bne.w	8012b0a <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 80128a0:	4b2a      	ldr	r3, [pc, #168]	; (801294c <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 80128a2:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 80128a6:	781b      	ldrb	r3, [r3, #0]
 80128a8:	2b01      	cmp	r3, #1
 80128aa:	f000 809c 	beq.w	80129e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 80128ae:	9b02      	ldr	r3, [sp, #8]
 80128b0:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
 80128b4:	f8b3 b000 	ldrh.w	fp, [r3]
 80128b8:	f10b 0b01 	add.w	fp, fp, #1
 80128bc:	fa1f fb8b 	uxth.w	fp, fp
 80128c0:	2a00      	cmp	r2, #0
 80128c2:	d0bc      	beq.n	801283e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80128c4:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
 80128c8:	4659      	mov	r1, fp
 80128ca:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 80128ce:	f04f 0800 	mov.w	r8, #0
 80128d2:	441d      	add	r5, r3
 80128d4:	b22d      	sxth	r5, r5
 80128d6:	b28b      	uxth	r3, r1
 80128d8:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 80128dc:	429a      	cmp	r2, r3
 80128de:	f240 80c0 	bls.w	8012a62 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 80128e2:	4427      	add	r7, r4
 80128e4:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 80128e8:	4608      	mov	r0, r1
 80128ea:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 80128ee:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
 80128f2:	4563      	cmp	r3, ip
 80128f4:	f340 80a2 	ble.w	8012a3c <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 80128f8:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
 80128fc:	4465      	add	r5, ip
 80128fe:	b22d      	sxth	r5, r5
 8012900:	429d      	cmp	r5, r3
 8012902:	bfa8      	it	ge
 8012904:	461d      	movge	r5, r3
 8012906:	3101      	adds	r1, #1
 8012908:	4680      	mov	r8, r0
 801290a:	e7e4      	b.n	80128d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 801290c:	d10b      	bne.n	8012926 <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 801290e:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
 8012912:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
 8012916:	458c      	cmp	ip, r1
 8012918:	bfb4      	ite	lt
 801291a:	469c      	movlt	ip, r3
 801291c:	46bc      	movge	ip, r7
 801291e:	4572      	cmp	r2, lr
 8012920:	bfb8      	it	lt
 8012922:	4672      	movlt	r2, lr
 8012924:	e087      	b.n	8012a36 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8012926:	428a      	cmp	r2, r1
 8012928:	46bc      	mov	ip, r7
 801292a:	bfb8      	it	lt
 801292c:	460a      	movlt	r2, r1
 801292e:	e082      	b.n	8012a36 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8012930:	2400e494 	.word	0x2400e494
 8012934:	2400e4a0 	.word	0x2400e4a0
 8012938:	2400005c 	.word	0x2400005c
 801293c:	2400e454 	.word	0x2400e454
 8012940:	2400e44a 	.word	0x2400e44a
 8012944:	2400e448 	.word	0x2400e448
 8012948:	2400e452 	.word	0x2400e452
 801294c:	2400e44c 	.word	0x2400e44c
 8012950:	1961      	adds	r1, r4, r5
 8012952:	ab07      	add	r3, sp, #28
 8012954:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8012958:	6849      	ldr	r1, [r1, #4]
 801295a:	c303      	stmia	r3!, {r0, r1}
 801295c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8012960:	a807      	add	r0, sp, #28
 8012962:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8012966:	2b13      	cmp	r3, #19
 8012968:	440b      	add	r3, r1
 801296a:	bfd8      	it	le
 801296c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8012970:	1a9b      	subs	r3, r3, r2
 8012972:	f8ad 201c 	strh.w	r2, [sp, #28]
 8012976:	f8ad 3020 	strh.w	r3, [sp, #32]
 801297a:	f7ff f897 	bl	8011aac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801297e:	a807      	add	r0, sp, #28
 8012980:	f7f9 fe4b 	bl	800c61a <_ZNK8touchgfx4Rect7isEmptyEv>
 8012984:	bb78      	cbnz	r0, 80129e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8012986:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801298a:	4425      	add	r5, r4
 801298c:	f8d8 0000 	ldr.w	r0, [r8]
 8012990:	f1bc 0f14 	cmp.w	ip, #20
 8012994:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8012998:	f8d0 e000 	ldr.w	lr, [r0]
 801299c:	bfa8      	it	ge
 801299e:	f04f 0c14 	movge.w	ip, #20
 80129a2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80129a6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80129aa:	fa1f fc8c 	uxth.w	ip, ip
 80129ae:	f8cd c000 	str.w	ip, [sp]
 80129b2:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 80129b6:	47d0      	blx	sl
 80129b8:	4682      	mov	sl, r0
 80129ba:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80129be:	a807      	add	r0, sp, #28
 80129c0:	f7ff f85a 	bl	8011a78 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80129c4:	6823      	ldr	r3, [r4, #0]
 80129c6:	4620      	mov	r0, r4
 80129c8:	a907      	add	r1, sp, #28
 80129ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129cc:	4798      	blx	r3
 80129ce:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
 80129d2:	eba0 000a 	sub.w	r0, r0, sl
 80129d6:	b200      	sxth	r0, r0
 80129d8:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 80129dc:	b918      	cbnz	r0, 80129e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 80129de:	b2b9      	uxth	r1, r7
 80129e0:	4648      	mov	r0, r9
 80129e2:	f7ff faad 	bl	8011f40 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80129e6:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 80129ea:	f1bb 0f00 	cmp.w	fp, #0
 80129ee:	f43f af26 	beq.w	801283e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80129f2:	9b02      	ldr	r3, [sp, #8]
 80129f4:	2700      	movs	r7, #0
 80129f6:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 80129fa:	881b      	ldrh	r3, [r3, #0]
 80129fc:	3301      	adds	r3, #1
 80129fe:	b29b      	uxth	r3, r3
 8012a00:	b299      	uxth	r1, r3
 8012a02:	00fd      	lsls	r5, r7, #3
 8012a04:	458b      	cmp	fp, r1
 8012a06:	d9a3      	bls.n	8012950 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 8012a08:	4425      	add	r5, r4
 8012a0a:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8012a0e:	469c      	mov	ip, r3
 8012a10:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
 8012a14:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8012a18:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
 8012a1c:	4408      	add	r0, r1
 8012a1e:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
 8012a22:	4471      	add	r1, lr
 8012a24:	b200      	sxth	r0, r0
 8012a26:	b209      	sxth	r1, r1
 8012a28:	4288      	cmp	r0, r1
 8012a2a:	f6bf af6f 	bge.w	801290c <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 8012a2e:	4586      	cmp	lr, r0
 8012a30:	4672      	mov	r2, lr
 8012a32:	bfb8      	it	lt
 8012a34:	4602      	movlt	r2, r0
 8012a36:	3301      	adds	r3, #1
 8012a38:	4667      	mov	r7, ip
 8012a3a:	e7e1      	b.n	8012a00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 8012a3c:	d10c      	bne.n	8012a58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 8012a3e:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 8012a42:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 8012a46:	4287      	cmp	r7, r0
 8012a48:	bfb4      	ite	lt
 8012a4a:	4608      	movlt	r0, r1
 8012a4c:	4640      	movge	r0, r8
 8012a4e:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
 8012a52:	443b      	add	r3, r7
 8012a54:	b21b      	sxth	r3, r3
 8012a56:	e753      	b.n	8012900 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8012a58:	4565      	cmp	r5, ip
 8012a5a:	4640      	mov	r0, r8
 8012a5c:	bfa8      	it	ge
 8012a5e:	4665      	movge	r5, ip
 8012a60:	e751      	b.n	8012906 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 8012a62:	eb09 0007 	add.w	r0, r9, r7
 8012a66:	4427      	add	r7, r4
 8012a68:	9203      	str	r2, [sp, #12]
 8012a6a:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
 8012a6e:	f1ba 0f13 	cmp.w	sl, #19
 8012a72:	bfde      	ittt	le
 8012a74:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
 8012a78:	4455      	addle	r5, sl
 8012a7a:	b22d      	sxthle	r5, r5
 8012a7c:	f7f9 fdcd 	bl	800c61a <_ZNK8touchgfx4Rect7isEmptyEv>
 8012a80:	9a03      	ldr	r2, [sp, #12]
 8012a82:	2800      	cmp	r0, #0
 8012a84:	f47f af1c 	bne.w	80128c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 8012a88:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8012a8c:	fa1f fa8a 	uxth.w	sl, sl
 8012a90:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8012a94:	1aad      	subs	r5, r5, r2
 8012a96:	4829      	ldr	r0, [pc, #164]	; (8012b3c <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 8012a98:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 8012a9c:	2d14      	cmp	r5, #20
 8012a9e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8012aa2:	6800      	ldr	r0, [r0, #0]
 8012aa4:	bfa8      	it	ge
 8012aa6:	2514      	movge	r5, #20
 8012aa8:	f8ad 101c 	strh.w	r1, [sp, #28]
 8012aac:	f8ad 201e 	strh.w	r2, [sp, #30]
 8012ab0:	b289      	uxth	r1, r1
 8012ab2:	f8ad 3020 	strh.w	r3, [sp, #32]
 8012ab6:	b2ad      	uxth	r5, r5
 8012ab8:	f8d0 c000 	ldr.w	ip, [r0]
 8012abc:	b292      	uxth	r2, r2
 8012abe:	4555      	cmp	r5, sl
 8012ac0:	bf94      	ite	ls
 8012ac2:	9500      	strls	r5, [sp, #0]
 8012ac4:	f8cd a000 	strhi.w	sl, [sp]
 8012ac8:	b29b      	uxth	r3, r3
 8012aca:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 8012ace:	47a8      	blx	r5
 8012ad0:	6823      	ldr	r3, [r4, #0]
 8012ad2:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8012ad6:	a907      	add	r1, sp, #28
 8012ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ada:	4620      	mov	r0, r4
 8012adc:	4798      	blx	r3
 8012ade:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8012ae2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8012ae6:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8012aea:	1a5b      	subs	r3, r3, r1
 8012aec:	440a      	add	r2, r1
 8012aee:	b21b      	sxth	r3, r3
 8012af0:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 8012af4:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	f47f aed8 	bne.w	80128ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8012afe:	fa1f f188 	uxth.w	r1, r8
 8012b02:	4648      	mov	r0, r9
 8012b04:	f7ff fa1c 	bl	8011f40 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8012b08:	e6d1      	b.n	80128ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8012b0a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8012b0e:	42ab      	cmp	r3, r5
 8012b10:	f67f ae95 	bls.w	801283e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8012b14:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8012b18:	ab07      	add	r3, sp, #28
 8012b1a:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8012b1e:	6851      	ldr	r1, [r2, #4]
 8012b20:	c303      	stmia	r3!, {r0, r1}
 8012b22:	a807      	add	r0, sp, #28
 8012b24:	f7f9 fd79 	bl	800c61a <_ZNK8touchgfx4Rect7isEmptyEv>
 8012b28:	b920      	cbnz	r0, 8012b34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 8012b2a:	6823      	ldr	r3, [r4, #0]
 8012b2c:	a907      	add	r1, sp, #28
 8012b2e:	4620      	mov	r0, r4
 8012b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b32:	4798      	blx	r3
 8012b34:	3501      	adds	r5, #1
 8012b36:	b2ad      	uxth	r5, r5
 8012b38:	e7e7      	b.n	8012b0a <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 8012b3a:	bf00      	nop
 8012b3c:	2400e454 	.word	0x2400e454

08012b40 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8012b40:	4b03      	ldr	r3, [pc, #12]	; (8012b50 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8012b42:	2200      	movs	r2, #0
 8012b44:	801a      	strh	r2, [r3, #0]
 8012b46:	805a      	strh	r2, [r3, #2]
 8012b48:	809a      	strh	r2, [r3, #4]
 8012b4a:	80da      	strh	r2, [r3, #6]
 8012b4c:	4770      	bx	lr
 8012b4e:	bf00      	nop
 8012b50:	2400e4a0 	.word	0x2400e4a0

08012b54 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8012b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b58:	b09d      	sub	sp, #116	; 0x74
 8012b5a:	4606      	mov	r6, r0
 8012b5c:	4614      	mov	r4, r2
 8012b5e:	468a      	mov	sl, r1
 8012b60:	a803      	add	r0, sp, #12
 8012b62:	461d      	mov	r5, r3
 8012b64:	f000 fe44 	bl	80137f0 <_ZN8touchgfx12TextProviderC1Ev>
 8012b68:	6833      	ldr	r3, [r6, #0]
 8012b6a:	4630      	mov	r0, r6
 8012b6c:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8012b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012b72:	4798      	blx	r3
 8012b74:	6833      	ldr	r3, [r6, #0]
 8012b76:	4607      	mov	r7, r0
 8012b78:	4630      	mov	r0, r6
 8012b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b7c:	4798      	blx	r3
 8012b7e:	462a      	mov	r2, r5
 8012b80:	2500      	movs	r5, #0
 8012b82:	4621      	mov	r1, r4
 8012b84:	9000      	str	r0, [sp, #0]
 8012b86:	463b      	mov	r3, r7
 8012b88:	462c      	mov	r4, r5
 8012b8a:	46a9      	mov	r9, r5
 8012b8c:	46a8      	mov	r8, r5
 8012b8e:	a803      	add	r0, sp, #12
 8012b90:	f000 fe81 	bl	8013896 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8012b94:	2300      	movs	r3, #0
 8012b96:	9302      	str	r3, [sp, #8]
 8012b98:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8012b9c:	429c      	cmp	r4, r3
 8012b9e:	d002      	beq.n	8012ba6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8012ba0:	455c      	cmp	r4, fp
 8012ba2:	bf18      	it	ne
 8012ba4:	4625      	movne	r5, r4
 8012ba6:	ab02      	add	r3, sp, #8
 8012ba8:	4632      	mov	r2, r6
 8012baa:	4651      	mov	r1, sl
 8012bac:	a803      	add	r0, sp, #12
 8012bae:	f001 f967 	bl	8013e80 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8012bb2:	4604      	mov	r4, r0
 8012bb4:	b108      	cbz	r0, 8012bba <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8012bb6:	280a      	cmp	r0, #10
 8012bb8:	d10a      	bne.n	8012bd0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8012bba:	45c1      	cmp	r9, r8
 8012bbc:	bf38      	it	cc
 8012bbe:	46c1      	movcc	r9, r8
 8012bc0:	f04f 0800 	mov.w	r8, #0
 8012bc4:	2c00      	cmp	r4, #0
 8012bc6:	d1e5      	bne.n	8012b94 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8012bc8:	4648      	mov	r0, r9
 8012bca:	b01d      	add	sp, #116	; 0x74
 8012bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bd0:	9a02      	ldr	r2, [sp, #8]
 8012bd2:	2a00      	cmp	r2, #0
 8012bd4:	d0de      	beq.n	8012b94 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8012bd6:	7b57      	ldrb	r7, [r2, #13]
 8012bd8:	4629      	mov	r1, r5
 8012bda:	6833      	ldr	r3, [r6, #0]
 8012bdc:	007f      	lsls	r7, r7, #1
 8012bde:	8894      	ldrh	r4, [r2, #4]
 8012be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012be2:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8012be6:	7a97      	ldrb	r7, [r2, #10]
 8012be8:	4307      	orrs	r7, r0
 8012bea:	4630      	mov	r0, r6
 8012bec:	4798      	blx	r3
 8012bee:	4438      	add	r0, r7
 8012bf0:	4480      	add	r8, r0
 8012bf2:	fa1f f888 	uxth.w	r8, r8
 8012bf6:	e7e5      	b.n	8012bc4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08012bf8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8012bf8:	b508      	push	{r3, lr}
 8012bfa:	6803      	ldr	r3, [r0, #0]
 8012bfc:	68db      	ldr	r3, [r3, #12]
 8012bfe:	4798      	blx	r3
 8012c00:	b128      	cbz	r0, 8012c0e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8012c02:	7b43      	ldrb	r3, [r0, #13]
 8012c04:	7a80      	ldrb	r0, [r0, #10]
 8012c06:	005b      	lsls	r3, r3, #1
 8012c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012c0c:	4318      	orrs	r0, r3
 8012c0e:	bd08      	pop	{r3, pc}

08012c10 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8012c10:	b40e      	push	{r1, r2, r3}
 8012c12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c14:	b09e      	sub	sp, #120	; 0x78
 8012c16:	4605      	mov	r5, r0
 8012c18:	ab23      	add	r3, sp, #140	; 0x8c
 8012c1a:	a805      	add	r0, sp, #20
 8012c1c:	f853 4b04 	ldr.w	r4, [r3], #4
 8012c20:	9303      	str	r3, [sp, #12]
 8012c22:	f000 fde5 	bl	80137f0 <_ZN8touchgfx12TextProviderC1Ev>
 8012c26:	682b      	ldr	r3, [r5, #0]
 8012c28:	4628      	mov	r0, r5
 8012c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012c2c:	4798      	blx	r3
 8012c2e:	682b      	ldr	r3, [r5, #0]
 8012c30:	4606      	mov	r6, r0
 8012c32:	4628      	mov	r0, r5
 8012c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012c36:	4798      	blx	r3
 8012c38:	4633      	mov	r3, r6
 8012c3a:	4621      	mov	r1, r4
 8012c3c:	ae1e      	add	r6, sp, #120	; 0x78
 8012c3e:	2400      	movs	r4, #0
 8012c40:	9000      	str	r0, [sp, #0]
 8012c42:	9a03      	ldr	r2, [sp, #12]
 8012c44:	a805      	add	r0, sp, #20
 8012c46:	f000 fe26 	bl	8013896 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8012c4a:	f846 4d68 	str.w	r4, [r6, #-104]!
 8012c4e:	462a      	mov	r2, r5
 8012c50:	4633      	mov	r3, r6
 8012c52:	4621      	mov	r1, r4
 8012c54:	a805      	add	r0, sp, #20
 8012c56:	f001 f913 	bl	8013e80 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8012c5a:	b300      	cbz	r0, 8012c9e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8012c5c:	280a      	cmp	r0, #10
 8012c5e:	d01a      	beq.n	8012c96 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8012c60:	9f04      	ldr	r7, [sp, #16]
 8012c62:	b1c7      	cbz	r7, 8012c96 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8012c64:	7b78      	ldrb	r0, [r7, #13]
 8012c66:	7a3b      	ldrb	r3, [r7, #8]
 8012c68:	00c1      	lsls	r1, r0, #3
 8012c6a:	88ea      	ldrh	r2, [r5, #6]
 8012c6c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8012c70:	4319      	orrs	r1, r3
 8012c72:	0643      	lsls	r3, r0, #25
 8012c74:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8012c78:	bf48      	it	mi
 8012c7a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8012c7e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8012c82:	bf48      	it	mi
 8012c84:	b219      	sxthmi	r1, r3
 8012c86:	79fb      	ldrb	r3, [r7, #7]
 8012c88:	4303      	orrs	r3, r0
 8012c8a:	4413      	add	r3, r2
 8012c8c:	1a5b      	subs	r3, r3, r1
 8012c8e:	b21b      	sxth	r3, r3
 8012c90:	429c      	cmp	r4, r3
 8012c92:	bfb8      	it	lt
 8012c94:	461c      	movlt	r4, r3
 8012c96:	4633      	mov	r3, r6
 8012c98:	462a      	mov	r2, r5
 8012c9a:	2100      	movs	r1, #0
 8012c9c:	e7da      	b.n	8012c54 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8012c9e:	b2a0      	uxth	r0, r4
 8012ca0:	b01e      	add	sp, #120	; 0x78
 8012ca2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012ca6:	b003      	add	sp, #12
 8012ca8:	4770      	bx	lr

08012caa <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8012caa:	7a43      	ldrb	r3, [r0, #9]
 8012cac:	8880      	ldrh	r0, [r0, #4]
 8012cae:	4418      	add	r0, r3
 8012cb0:	b280      	uxth	r0, r0
 8012cb2:	4770      	bx	lr

08012cb4 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8012cb4:	6803      	ldr	r3, [r0, #0]
 8012cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cb8:	4718      	bx	r3

08012cba <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8012cba:	b40e      	push	{r1, r2, r3}
 8012cbc:	b570      	push	{r4, r5, r6, lr}
 8012cbe:	b09d      	sub	sp, #116	; 0x74
 8012cc0:	4604      	mov	r4, r0
 8012cc2:	ab21      	add	r3, sp, #132	; 0x84
 8012cc4:	a803      	add	r0, sp, #12
 8012cc6:	f853 5b04 	ldr.w	r5, [r3], #4
 8012cca:	9302      	str	r3, [sp, #8]
 8012ccc:	f000 fd90 	bl	80137f0 <_ZN8touchgfx12TextProviderC1Ev>
 8012cd0:	6823      	ldr	r3, [r4, #0]
 8012cd2:	4620      	mov	r0, r4
 8012cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012cd6:	4798      	blx	r3
 8012cd8:	6823      	ldr	r3, [r4, #0]
 8012cda:	4606      	mov	r6, r0
 8012cdc:	4620      	mov	r0, r4
 8012cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012ce0:	2401      	movs	r4, #1
 8012ce2:	4798      	blx	r3
 8012ce4:	4633      	mov	r3, r6
 8012ce6:	9000      	str	r0, [sp, #0]
 8012ce8:	4629      	mov	r1, r5
 8012cea:	9a02      	ldr	r2, [sp, #8]
 8012cec:	a803      	add	r0, sp, #12
 8012cee:	f000 fdd2 	bl	8013896 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8012cf2:	a803      	add	r0, sp, #12
 8012cf4:	f001 f990 	bl	8014018 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8012cf8:	b2a3      	uxth	r3, r4
 8012cfa:	b138      	cbz	r0, 8012d0c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8012cfc:	280a      	cmp	r0, #10
 8012cfe:	a803      	add	r0, sp, #12
 8012d00:	bf04      	itt	eq
 8012d02:	3301      	addeq	r3, #1
 8012d04:	b21c      	sxtheq	r4, r3
 8012d06:	f001 f987 	bl	8014018 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8012d0a:	e7f5      	b.n	8012cf8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	b01d      	add	sp, #116	; 0x74
 8012d10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d14:	b003      	add	sp, #12
 8012d16:	4770      	bx	lr

08012d18 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8012d18:	b40e      	push	{r1, r2, r3}
 8012d1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d1c:	b09e      	sub	sp, #120	; 0x78
 8012d1e:	4604      	mov	r4, r0
 8012d20:	ab23      	add	r3, sp, #140	; 0x8c
 8012d22:	a805      	add	r0, sp, #20
 8012d24:	f853 5b04 	ldr.w	r5, [r3], #4
 8012d28:	9303      	str	r3, [sp, #12]
 8012d2a:	f000 fd61 	bl	80137f0 <_ZN8touchgfx12TextProviderC1Ev>
 8012d2e:	6823      	ldr	r3, [r4, #0]
 8012d30:	4620      	mov	r0, r4
 8012d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012d34:	4798      	blx	r3
 8012d36:	6823      	ldr	r3, [r4, #0]
 8012d38:	4606      	mov	r6, r0
 8012d3a:	4620      	mov	r0, r4
 8012d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012d3e:	4798      	blx	r3
 8012d40:	4633      	mov	r3, r6
 8012d42:	4629      	mov	r1, r5
 8012d44:	9000      	str	r0, [sp, #0]
 8012d46:	9a03      	ldr	r2, [sp, #12]
 8012d48:	a805      	add	r0, sp, #20
 8012d4a:	f000 fda4 	bl	8013896 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8012d4e:	ad1e      	add	r5, sp, #120	; 0x78
 8012d50:	2100      	movs	r1, #0
 8012d52:	f647 76ff 	movw	r6, #32767	; 0x7fff
 8012d56:	4622      	mov	r2, r4
 8012d58:	a805      	add	r0, sp, #20
 8012d5a:	f845 1d68 	str.w	r1, [r5, #-104]!
 8012d5e:	462b      	mov	r3, r5
 8012d60:	f001 f88e 	bl	8013e80 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8012d64:	b1d8      	cbz	r0, 8012d9e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8012d66:	280a      	cmp	r0, #10
 8012d68:	d012      	beq.n	8012d90 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8012d6a:	9804      	ldr	r0, [sp, #16]
 8012d6c:	b180      	cbz	r0, 8012d90 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8012d6e:	7b47      	ldrb	r7, [r0, #13]
 8012d70:	88e2      	ldrh	r2, [r4, #6]
 8012d72:	00fb      	lsls	r3, r7, #3
 8012d74:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8012d78:	7a03      	ldrb	r3, [r0, #8]
 8012d7a:	430b      	orrs	r3, r1
 8012d7c:	0679      	lsls	r1, r7, #25
 8012d7e:	bf44      	itt	mi
 8012d80:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8012d84:	b21b      	sxthmi	r3, r3
 8012d86:	1ad3      	subs	r3, r2, r3
 8012d88:	b21b      	sxth	r3, r3
 8012d8a:	429e      	cmp	r6, r3
 8012d8c:	bfa8      	it	ge
 8012d8e:	461e      	movge	r6, r3
 8012d90:	462b      	mov	r3, r5
 8012d92:	4622      	mov	r2, r4
 8012d94:	2100      	movs	r1, #0
 8012d96:	a805      	add	r0, sp, #20
 8012d98:	f001 f872 	bl	8013e80 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8012d9c:	e7e2      	b.n	8012d64 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8012d9e:	4630      	mov	r0, r6
 8012da0:	b01e      	add	sp, #120	; 0x78
 8012da2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012da6:	b003      	add	sp, #12
 8012da8:	4770      	bx	lr

08012daa <_ZNK8touchgfx8Drawable10invalidateEv>:
 8012daa:	b513      	push	{r0, r1, r4, lr}
 8012dac:	6803      	ldr	r3, [r0, #0]
 8012dae:	2400      	movs	r4, #0
 8012db0:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8012db4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8012db8:	f8ad 1004 	strh.w	r1, [sp, #4]
 8012dbc:	4669      	mov	r1, sp
 8012dbe:	691b      	ldr	r3, [r3, #16]
 8012dc0:	9400      	str	r4, [sp, #0]
 8012dc2:	f8ad 2006 	strh.w	r2, [sp, #6]
 8012dc6:	4798      	blx	r3
 8012dc8:	b002      	add	sp, #8
 8012dca:	bd10      	pop	{r4, pc}

08012dcc <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8012dcc:	b538      	push	{r3, r4, r5, lr}
 8012dce:	680b      	ldr	r3, [r1, #0]
 8012dd0:	460c      	mov	r4, r1
 8012dd2:	4605      	mov	r5, r0
 8012dd4:	68db      	ldr	r3, [r3, #12]
 8012dd6:	4798      	blx	r3
 8012dd8:	6823      	ldr	r3, [r4, #0]
 8012dda:	4620      	mov	r0, r4
 8012ddc:	4629      	mov	r1, r5
 8012dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012de0:	4798      	blx	r3
 8012de2:	4628      	mov	r0, r5
 8012de4:	bd38      	pop	{r3, r4, r5, pc}

08012de6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8012de6:	b410      	push	{r4}
 8012de8:	880a      	ldrh	r2, [r1, #0]
 8012dea:	8884      	ldrh	r4, [r0, #4]
 8012dec:	4422      	add	r2, r4
 8012dee:	800a      	strh	r2, [r1, #0]
 8012df0:	884a      	ldrh	r2, [r1, #2]
 8012df2:	88c4      	ldrh	r4, [r0, #6]
 8012df4:	4422      	add	r2, r4
 8012df6:	804a      	strh	r2, [r1, #2]
 8012df8:	6940      	ldr	r0, [r0, #20]
 8012dfa:	b120      	cbz	r0, 8012e06 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8012dfc:	6803      	ldr	r3, [r0, #0]
 8012dfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e04:	4718      	bx	r3
 8012e06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e0a:	4770      	bx	lr

08012e0c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8012e0c:	b570      	push	{r4, r5, r6, lr}
 8012e0e:	8882      	ldrh	r2, [r0, #4]
 8012e10:	460c      	mov	r4, r1
 8012e12:	880b      	ldrh	r3, [r1, #0]
 8012e14:	4605      	mov	r5, r0
 8012e16:	4413      	add	r3, r2
 8012e18:	800b      	strh	r3, [r1, #0]
 8012e1a:	884b      	ldrh	r3, [r1, #2]
 8012e1c:	88c2      	ldrh	r2, [r0, #6]
 8012e1e:	4413      	add	r3, r2
 8012e20:	804b      	strh	r3, [r1, #2]
 8012e22:	1d01      	adds	r1, r0, #4
 8012e24:	4620      	mov	r0, r4
 8012e26:	f7f9 fbb5 	bl	800c594 <_ZN8touchgfx4RectaNERKS0_>
 8012e2a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	dd0b      	ble.n	8012e4a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8012e32:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	dd07      	ble.n	8012e4a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8012e3a:	6968      	ldr	r0, [r5, #20]
 8012e3c:	b128      	cbz	r0, 8012e4a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8012e3e:	6803      	ldr	r3, [r0, #0]
 8012e40:	4621      	mov	r1, r4
 8012e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e48:	4718      	bx	r3
 8012e4a:	bd70      	pop	{r4, r5, r6, pc}

08012e4c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8012e4c:	b570      	push	{r4, r5, r6, lr}
 8012e4e:	8882      	ldrh	r2, [r0, #4]
 8012e50:	460c      	mov	r4, r1
 8012e52:	880b      	ldrh	r3, [r1, #0]
 8012e54:	4605      	mov	r5, r0
 8012e56:	4413      	add	r3, r2
 8012e58:	800b      	strh	r3, [r1, #0]
 8012e5a:	884b      	ldrh	r3, [r1, #2]
 8012e5c:	88c2      	ldrh	r2, [r0, #6]
 8012e5e:	4413      	add	r3, r2
 8012e60:	804b      	strh	r3, [r1, #2]
 8012e62:	1d01      	adds	r1, r0, #4
 8012e64:	4620      	mov	r0, r4
 8012e66:	f7f9 fb95 	bl	800c594 <_ZN8touchgfx4RectaNERKS0_>
 8012e6a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	dd18      	ble.n	8012ea4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8012e72:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	dd14      	ble.n	8012ea4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8012e7a:	6968      	ldr	r0, [r5, #20]
 8012e7c:	b128      	cbz	r0, 8012e8a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8012e7e:	6803      	ldr	r3, [r0, #0]
 8012e80:	4621      	mov	r1, r4
 8012e82:	691b      	ldr	r3, [r3, #16]
 8012e84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e88:	4718      	bx	r3
 8012e8a:	4b07      	ldr	r3, [pc, #28]	; (8012ea8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	3304      	adds	r3, #4
 8012e90:	429d      	cmp	r5, r3
 8012e92:	d107      	bne.n	8012ea4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8012e94:	f7fe ff44 	bl	8011d20 <_ZN8touchgfx11Application11getInstanceEv>
 8012e98:	6821      	ldr	r1, [r4, #0]
 8012e9a:	6862      	ldr	r2, [r4, #4]
 8012e9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012ea0:	f7ff b862 	b.w	8011f68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8012ea4:	bd70      	pop	{r4, r5, r6, pc}
 8012ea6:	bf00      	nop
 8012ea8:	2400e498 	.word	0x2400e498

08012eac <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8012eac:	b570      	push	{r4, r5, r6, lr}
 8012eae:	4604      	mov	r4, r0
 8012eb0:	4616      	mov	r6, r2
 8012eb2:	460d      	mov	r5, r1
 8012eb4:	b901      	cbnz	r1, 8012eb8 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8012eb6:	b192      	cbz	r2, 8012ede <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8012eb8:	6823      	ldr	r3, [r4, #0]
 8012eba:	4620      	mov	r0, r4
 8012ebc:	699b      	ldr	r3, [r3, #24]
 8012ebe:	4798      	blx	r3
 8012ec0:	88e2      	ldrh	r2, [r4, #6]
 8012ec2:	88a1      	ldrh	r1, [r4, #4]
 8012ec4:	4620      	mov	r0, r4
 8012ec6:	4432      	add	r2, r6
 8012ec8:	4429      	add	r1, r5
 8012eca:	b212      	sxth	r2, r2
 8012ecc:	b209      	sxth	r1, r1
 8012ece:	f7ef fc72 	bl	80027b6 <_ZN8touchgfx8Drawable5setXYEss>
 8012ed2:	6823      	ldr	r3, [r4, #0]
 8012ed4:	4620      	mov	r0, r4
 8012ed6:	699b      	ldr	r3, [r3, #24]
 8012ed8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012edc:	4718      	bx	r3
 8012ede:	bd70      	pop	{r4, r5, r6, pc}

08012ee0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8012ee0:	b510      	push	{r4, lr}
 8012ee2:	2300      	movs	r3, #0
 8012ee4:	4604      	mov	r4, r0
 8012ee6:	4608      	mov	r0, r1
 8012ee8:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8012eec:	8023      	strh	r3, [r4, #0]
 8012eee:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8012ef2:	8063      	strh	r3, [r4, #2]
 8012ef4:	6803      	ldr	r3, [r0, #0]
 8012ef6:	80a1      	strh	r1, [r4, #4]
 8012ef8:	4621      	mov	r1, r4
 8012efa:	80e2      	strh	r2, [r4, #6]
 8012efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012efe:	4798      	blx	r3
 8012f00:	4620      	mov	r0, r4
 8012f02:	bd10      	pop	{r4, pc}

08012f04 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8012f04:	b530      	push	{r4, r5, lr}
 8012f06:	8083      	strh	r3, [r0, #4]
 8012f08:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8012f0c:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8012f10:	80c3      	strh	r3, [r0, #6]
 8012f12:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8012f16:	6141      	str	r1, [r0, #20]
 8012f18:	7203      	strb	r3, [r0, #8]
 8012f1a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8012f1e:	8302      	strh	r2, [r0, #24]
 8012f20:	7243      	strb	r3, [r0, #9]
 8012f22:	7a83      	ldrb	r3, [r0, #10]
 8012f24:	f365 0306 	bfi	r3, r5, #0, #7
 8012f28:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8012f2c:	f365 13c7 	bfi	r3, r5, #7, #1
 8012f30:	7283      	strb	r3, [r0, #10]
 8012f32:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8012f36:	72c3      	strb	r3, [r0, #11]
 8012f38:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8012f3c:	7303      	strb	r3, [r0, #12]
 8012f3e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8012f42:	81c3      	strh	r3, [r0, #14]
 8012f44:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8012f48:	8203      	strh	r3, [r0, #16]
 8012f4a:	4b01      	ldr	r3, [pc, #4]	; (8012f50 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8012f4c:	6003      	str	r3, [r0, #0]
 8012f4e:	bd30      	pop	{r4, r5, pc}
 8012f50:	080209f8 	.word	0x080209f8

08012f54 <_ZNK8touchgfx9ConstFont4findEt>:
 8012f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f56:	6944      	ldr	r4, [r0, #20]
 8012f58:	b3bc      	cbz	r4, 8012fca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8012f5a:	88a3      	ldrh	r3, [r4, #4]
 8012f5c:	8b02      	ldrh	r2, [r0, #24]
 8012f5e:	1acb      	subs	r3, r1, r3
 8012f60:	f102 32ff 	add.w	r2, r2, #4294967295
 8012f64:	d431      	bmi.n	8012fca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8012f66:	4293      	cmp	r3, r2
 8012f68:	dd0c      	ble.n	8012f84 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8012f6a:	230e      	movs	r3, #14
 8012f6c:	fb03 4302 	mla	r3, r3, r2, r4
 8012f70:	889b      	ldrh	r3, [r3, #4]
 8012f72:	1a5b      	subs	r3, r3, r1
 8012f74:	1ad3      	subs	r3, r2, r3
 8012f76:	429a      	cmp	r2, r3
 8012f78:	db27      	blt.n	8012fca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	bfbc      	itt	lt
 8012f7e:	2302      	movlt	r3, #2
 8012f80:	fb92 f3f3 	sdivlt	r3, r2, r3
 8012f84:	2500      	movs	r5, #0
 8012f86:	260e      	movs	r6, #14
 8012f88:	4295      	cmp	r5, r2
 8012f8a:	dc1e      	bgt.n	8012fca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8012f8c:	fb06 4003 	mla	r0, r6, r3, r4
 8012f90:	8887      	ldrh	r7, [r0, #4]
 8012f92:	42b9      	cmp	r1, r7
 8012f94:	d01a      	beq.n	8012fcc <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8012f96:	d20d      	bcs.n	8012fb4 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8012f98:	1e5a      	subs	r2, r3, #1
 8012f9a:	4295      	cmp	r5, r2
 8012f9c:	dc15      	bgt.n	8012fca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8012f9e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8012fa2:	1a5b      	subs	r3, r3, r1
 8012fa4:	1ad3      	subs	r3, r2, r3
 8012fa6:	429a      	cmp	r2, r3
 8012fa8:	db0f      	blt.n	8012fca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8012faa:	429d      	cmp	r5, r3
 8012fac:	ddec      	ble.n	8012f88 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8012fae:	1953      	adds	r3, r2, r5
 8012fb0:	105b      	asrs	r3, r3, #1
 8012fb2:	e7e9      	b.n	8012f88 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8012fb4:	1c5d      	adds	r5, r3, #1
 8012fb6:	42aa      	cmp	r2, r5
 8012fb8:	db07      	blt.n	8012fca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8012fba:	8a43      	ldrh	r3, [r0, #18]
 8012fbc:	1acb      	subs	r3, r1, r3
 8012fbe:	442b      	add	r3, r5
 8012fc0:	429d      	cmp	r5, r3
 8012fc2:	dc02      	bgt.n	8012fca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8012fc4:	429a      	cmp	r2, r3
 8012fc6:	dadf      	bge.n	8012f88 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8012fc8:	e7f1      	b.n	8012fae <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8012fca:	2000      	movs	r0, #0
 8012fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012fce <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8012fce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fd0:	4604      	mov	r4, r0
 8012fd2:	4617      	mov	r7, r2
 8012fd4:	461e      	mov	r6, r3
 8012fd6:	b911      	cbnz	r1, 8012fde <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8012fd8:	2500      	movs	r5, #0
 8012fda:	4628      	mov	r0, r5
 8012fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fde:	290a      	cmp	r1, #10
 8012fe0:	d0fa      	beq.n	8012fd8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8012fe2:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8012fe6:	4291      	cmp	r1, r2
 8012fe8:	d0f6      	beq.n	8012fd8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8012fea:	f242 020b 	movw	r2, #8203	; 0x200b
 8012fee:	4291      	cmp	r1, r2
 8012ff0:	d0f2      	beq.n	8012fd8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8012ff2:	f7ff ffaf 	bl	8012f54 <_ZNK8touchgfx9ConstFont4findEt>
 8012ff6:	4605      	mov	r5, r0
 8012ff8:	b950      	cbnz	r0, 8013010 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8012ffa:	6823      	ldr	r3, [r4, #0]
 8012ffc:	4620      	mov	r0, r4
 8012ffe:	691b      	ldr	r3, [r3, #16]
 8013000:	4798      	blx	r3
 8013002:	4601      	mov	r1, r0
 8013004:	4620      	mov	r0, r4
 8013006:	f7ff ffa5 	bl	8012f54 <_ZNK8touchgfx9ConstFont4findEt>
 801300a:	4605      	mov	r5, r0
 801300c:	2800      	cmp	r0, #0
 801300e:	d0e3      	beq.n	8012fd8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013010:	6823      	ldr	r3, [r4, #0]
 8013012:	4629      	mov	r1, r5
 8013014:	4620      	mov	r0, r4
 8013016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013018:	4798      	blx	r3
 801301a:	6038      	str	r0, [r7, #0]
 801301c:	6823      	ldr	r3, [r4, #0]
 801301e:	4620      	mov	r0, r4
 8013020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013022:	4798      	blx	r3
 8013024:	7030      	strb	r0, [r6, #0]
 8013026:	e7d8      	b.n	8012fda <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08013028 <_ZN8touchgfx4clzuEm>:
 8013028:	4603      	mov	r3, r0
 801302a:	b1c8      	cbz	r0, 8013060 <_ZN8touchgfx4clzuEm+0x38>
 801302c:	0c02      	lsrs	r2, r0, #16
 801302e:	0412      	lsls	r2, r2, #16
 8013030:	b9a2      	cbnz	r2, 801305c <_ZN8touchgfx4clzuEm+0x34>
 8013032:	0403      	lsls	r3, r0, #16
 8013034:	2010      	movs	r0, #16
 8013036:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801303a:	bf04      	itt	eq
 801303c:	021b      	lsleq	r3, r3, #8
 801303e:	3008      	addeq	r0, #8
 8013040:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013044:	bf04      	itt	eq
 8013046:	011b      	lsleq	r3, r3, #4
 8013048:	3004      	addeq	r0, #4
 801304a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801304e:	bf04      	itt	eq
 8013050:	009b      	lsleq	r3, r3, #2
 8013052:	3002      	addeq	r0, #2
 8013054:	2b00      	cmp	r3, #0
 8013056:	db04      	blt.n	8013062 <_ZN8touchgfx4clzuEm+0x3a>
 8013058:	3001      	adds	r0, #1
 801305a:	4770      	bx	lr
 801305c:	2000      	movs	r0, #0
 801305e:	e7ea      	b.n	8013036 <_ZN8touchgfx4clzuEm+0xe>
 8013060:	2020      	movs	r0, #32
 8013062:	4770      	bx	lr

08013064 <_ZN8touchgfx7muldivuEmmmRm>:
 8013064:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013068:	4680      	mov	r8, r0
 801306a:	460f      	mov	r7, r1
 801306c:	4615      	mov	r5, r2
 801306e:	461e      	mov	r6, r3
 8013070:	f7ff ffda 	bl	8013028 <_ZN8touchgfx4clzuEm>
 8013074:	b998      	cbnz	r0, 801309e <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 8013076:	4608      	mov	r0, r1
 8013078:	f7ff ffd6 	bl	8013028 <_ZN8touchgfx4clzuEm>
 801307c:	2800      	cmp	r0, #0
 801307e:	dd08      	ble.n	8013092 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 8013080:	4633      	mov	r3, r6
 8013082:	462a      	mov	r2, r5
 8013084:	4641      	mov	r1, r8
 8013086:	4638      	mov	r0, r7
 8013088:	f7ff ffec 	bl	8013064 <_ZN8touchgfx7muldivuEmmmRm>
 801308c:	b003      	add	sp, #12
 801308e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013092:	f04f 33ff 	mov.w	r3, #4294967295
 8013096:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801309a:	6033      	str	r3, [r6, #0]
 801309c:	e7f6      	b.n	801308c <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801309e:	fa31 f900 	lsrs.w	r9, r1, r0
 80130a2:	fb01 f308 	mul.w	r3, r1, r8
 80130a6:	d105      	bne.n	80130b4 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 80130a8:	fbb3 f0f5 	udiv	r0, r3, r5
 80130ac:	fb05 3510 	mls	r5, r5, r0, r3
 80130b0:	6035      	str	r5, [r6, #0]
 80130b2:	e7eb      	b.n	801308c <_ZN8touchgfx7muldivuEmmmRm+0x28>
 80130b4:	2301      	movs	r3, #1
 80130b6:	fa08 fb00 	lsl.w	fp, r8, r0
 80130ba:	462a      	mov	r2, r5
 80130bc:	4641      	mov	r1, r8
 80130be:	fa03 f000 	lsl.w	r0, r3, r0
 80130c2:	4633      	mov	r3, r6
 80130c4:	fbbb faf5 	udiv	sl, fp, r5
 80130c8:	3801      	subs	r0, #1
 80130ca:	fb09 f40a 	mul.w	r4, r9, sl
 80130ce:	4038      	ands	r0, r7
 80130d0:	f7ff ffc8 	bl	8013064 <_ZN8touchgfx7muldivuEmmmRm>
 80130d4:	462a      	mov	r2, r5
 80130d6:	4607      	mov	r7, r0
 80130d8:	ab01      	add	r3, sp, #4
 80130da:	fb05 b11a 	mls	r1, r5, sl, fp
 80130de:	4648      	mov	r0, r9
 80130e0:	f7ff ffc0 	bl	8013064 <_ZN8touchgfx7muldivuEmmmRm>
 80130e4:	9b01      	ldr	r3, [sp, #4]
 80130e6:	6832      	ldr	r2, [r6, #0]
 80130e8:	441a      	add	r2, r3
 80130ea:	fbb2 f3f5 	udiv	r3, r2, r5
 80130ee:	441c      	add	r4, r3
 80130f0:	fb05 2513 	mls	r5, r5, r3, r2
 80130f4:	443c      	add	r4, r7
 80130f6:	4420      	add	r0, r4
 80130f8:	e7da      	b.n	80130b0 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

080130fa <_ZN8touchgfx6muldivElllRl>:
 80130fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80130fc:	2800      	cmp	r0, #0
 80130fe:	461e      	mov	r6, r3
 8013100:	bfba      	itte	lt
 8013102:	4240      	neglt	r0, r0
 8013104:	f04f 34ff 	movlt.w	r4, #4294967295
 8013108:	2401      	movge	r4, #1
 801310a:	2900      	cmp	r1, #0
 801310c:	bfbc      	itt	lt
 801310e:	4249      	neglt	r1, r1
 8013110:	4264      	neglt	r4, r4
 8013112:	2a00      	cmp	r2, #0
 8013114:	bfb6      	itet	lt
 8013116:	4265      	neglt	r5, r4
 8013118:	4625      	movge	r5, r4
 801311a:	4252      	neglt	r2, r2
 801311c:	4288      	cmp	r0, r1
 801311e:	bfc2      	ittt	gt
 8013120:	4603      	movgt	r3, r0
 8013122:	4608      	movgt	r0, r1
 8013124:	4619      	movgt	r1, r3
 8013126:	ab01      	add	r3, sp, #4
 8013128:	f7ff ff9c 	bl	8013064 <_ZN8touchgfx7muldivuEmmmRm>
 801312c:	9b01      	ldr	r3, [sp, #4]
 801312e:	4368      	muls	r0, r5
 8013130:	435c      	muls	r4, r3
 8013132:	6034      	str	r4, [r6, #0]
 8013134:	b002      	add	sp, #8
 8013136:	bd70      	pop	{r4, r5, r6, pc}

08013138 <_ZN8touchgfx6muldivElll>:
 8013138:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801313a:	4606      	mov	r6, r0
 801313c:	ab01      	add	r3, sp, #4
 801313e:	460d      	mov	r5, r1
 8013140:	4614      	mov	r4, r2
 8013142:	f7ff ffda 	bl	80130fa <_ZN8touchgfx6muldivElllRl>
 8013146:	2e00      	cmp	r6, #0
 8013148:	db20      	blt.n	801318c <_ZN8touchgfx6muldivElll+0x54>
 801314a:	bf14      	ite	ne
 801314c:	2301      	movne	r3, #1
 801314e:	2300      	moveq	r3, #0
 8013150:	2d00      	cmp	r5, #0
 8013152:	db1e      	blt.n	8013192 <_ZN8touchgfx6muldivElll+0x5a>
 8013154:	bf14      	ite	ne
 8013156:	2201      	movne	r2, #1
 8013158:	2200      	moveq	r2, #0
 801315a:	2c00      	cmp	r4, #0
 801315c:	fb03 f202 	mul.w	r2, r3, r2
 8013160:	db1a      	blt.n	8013198 <_ZN8touchgfx6muldivElll+0x60>
 8013162:	bf14      	ite	ne
 8013164:	2301      	movne	r3, #1
 8013166:	2300      	moveq	r3, #0
 8013168:	4353      	muls	r3, r2
 801316a:	2b01      	cmp	r3, #1
 801316c:	d117      	bne.n	801319e <_ZN8touchgfx6muldivElll+0x66>
 801316e:	2c00      	cmp	r4, #0
 8013170:	9b01      	ldr	r3, [sp, #4]
 8013172:	bfb8      	it	lt
 8013174:	4264      	neglt	r4, r4
 8013176:	2b00      	cmp	r3, #0
 8013178:	f104 0401 	add.w	r4, r4, #1
 801317c:	bfb8      	it	lt
 801317e:	425b      	neglt	r3, r3
 8013180:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 8013184:	db00      	blt.n	8013188 <_ZN8touchgfx6muldivElll+0x50>
 8013186:	3001      	adds	r0, #1
 8013188:	b002      	add	sp, #8
 801318a:	bd70      	pop	{r4, r5, r6, pc}
 801318c:	f04f 33ff 	mov.w	r3, #4294967295
 8013190:	e7de      	b.n	8013150 <_ZN8touchgfx6muldivElll+0x18>
 8013192:	f04f 32ff 	mov.w	r2, #4294967295
 8013196:	e7e0      	b.n	801315a <_ZN8touchgfx6muldivElll+0x22>
 8013198:	f04f 33ff 	mov.w	r3, #4294967295
 801319c:	e7e4      	b.n	8013168 <_ZN8touchgfx6muldivElll+0x30>
 801319e:	3301      	adds	r3, #1
 80131a0:	d1f2      	bne.n	8013188 <_ZN8touchgfx6muldivElll+0x50>
 80131a2:	9b01      	ldr	r3, [sp, #4]
 80131a4:	2c00      	cmp	r4, #0
 80131a6:	bfb8      	it	lt
 80131a8:	4264      	neglt	r4, r4
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	bfb8      	it	lt
 80131ae:	425b      	neglt	r3, r3
 80131b0:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 80131b4:	bfc8      	it	gt
 80131b6:	f100 30ff 	addgt.w	r0, r0, #4294967295
 80131ba:	e7e5      	b.n	8013188 <_ZN8touchgfx6muldivElll+0x50>

080131bc <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 80131bc:	2000      	movs	r0, #0
 80131be:	4770      	bx	lr

080131c0 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 80131c0:	2001      	movs	r0, #1
 80131c2:	4770      	bx	lr

080131c4 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 80131c4:	2002      	movs	r0, #2
 80131c6:	4770      	bx	lr

080131c8 <_ZN8touchgfx6ScreenD1Ev>:
 80131c8:	4770      	bx	lr

080131ca <_ZN8touchgfx12GestureEventD1Ev>:
 80131ca:	4770      	bx	lr

080131cc <_ZN8touchgfx9DragEventD1Ev>:
 80131cc:	4770      	bx	lr

080131ce <_ZN8touchgfx10ClickEventD1Ev>:
 80131ce:	4770      	bx	lr

080131d0 <_ZN8touchgfx10ClickEventD0Ev>:
 80131d0:	b510      	push	{r4, lr}
 80131d2:	4604      	mov	r4, r0
 80131d4:	210c      	movs	r1, #12
 80131d6:	f00a fb32 	bl	801d83e <_ZdlPvj>
 80131da:	4620      	mov	r0, r4
 80131dc:	bd10      	pop	{r4, pc}

080131de <_ZN8touchgfx9DragEventD0Ev>:
 80131de:	b510      	push	{r4, lr}
 80131e0:	4604      	mov	r4, r0
 80131e2:	2110      	movs	r1, #16
 80131e4:	f00a fb2b 	bl	801d83e <_ZdlPvj>
 80131e8:	4620      	mov	r0, r4
 80131ea:	bd10      	pop	{r4, pc}

080131ec <_ZN8touchgfx12GestureEventD0Ev>:
 80131ec:	b510      	push	{r4, lr}
 80131ee:	4604      	mov	r4, r0
 80131f0:	210c      	movs	r1, #12
 80131f2:	f00a fb24 	bl	801d83e <_ZdlPvj>
 80131f6:	4620      	mov	r0, r4
 80131f8:	bd10      	pop	{r4, pc}

080131fa <_ZN8touchgfx6ScreenD0Ev>:
 80131fa:	b510      	push	{r4, lr}
 80131fc:	4604      	mov	r4, r0
 80131fe:	213c      	movs	r1, #60	; 0x3c
 8013200:	f00a fb1d 	bl	801d83e <_ZdlPvj>
 8013204:	4620      	mov	r0, r4
 8013206:	bd10      	pop	{r4, pc}

08013208 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8013208:	b530      	push	{r4, r5, lr}
 801320a:	460d      	mov	r5, r1
 801320c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801320e:	b087      	sub	sp, #28
 8013210:	4604      	mov	r4, r0
 8013212:	b301      	cbz	r1, 8013256 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8013214:	a801      	add	r0, sp, #4
 8013216:	f7ff fe63 	bl	8012ee0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801321a:	892a      	ldrh	r2, [r5, #8]
 801321c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013220:	7928      	ldrb	r0, [r5, #4]
 8013222:	1ad2      	subs	r2, r2, r3
 8013224:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8013226:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801322a:	441a      	add	r2, r3
 801322c:	896b      	ldrh	r3, [r5, #10]
 801322e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8013232:	f88d 0010 	strb.w	r0, [sp, #16]
 8013236:	1b5b      	subs	r3, r3, r5
 8013238:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801323a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801323c:	442b      	add	r3, r5
 801323e:	4d07      	ldr	r5, [pc, #28]	; (801325c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8013240:	f8ad 1012 	strh.w	r1, [sp, #18]
 8013244:	a903      	add	r1, sp, #12
 8013246:	9503      	str	r5, [sp, #12]
 8013248:	f8ad 2014 	strh.w	r2, [sp, #20]
 801324c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013250:	6803      	ldr	r3, [r0, #0]
 8013252:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013254:	4798      	blx	r3
 8013256:	b007      	add	sp, #28
 8013258:	bd30      	pop	{r4, r5, pc}
 801325a:	bf00      	nop
 801325c:	08020a80 	.word	0x08020a80

08013260 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8013260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013264:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8013266:	b08a      	sub	sp, #40	; 0x28
 8013268:	4604      	mov	r4, r0
 801326a:	460d      	mov	r5, r1
 801326c:	b113      	cbz	r3, 8013274 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801326e:	790b      	ldrb	r3, [r1, #4]
 8013270:	2b00      	cmp	r3, #0
 8013272:	d044      	beq.n	80132fe <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8013274:	f104 0804 	add.w	r8, r4, #4
 8013278:	a803      	add	r0, sp, #12
 801327a:	4641      	mov	r1, r8
 801327c:	f7ff fe30 	bl	8012ee0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013280:	792b      	ldrb	r3, [r5, #4]
 8013282:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8013286:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801328a:	b983      	cbnz	r3, 80132ae <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801328c:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8013290:	892a      	ldrh	r2, [r5, #8]
 8013292:	88e9      	ldrh	r1, [r5, #6]
 8013294:	4640      	mov	r0, r8
 8013296:	1b92      	subs	r2, r2, r6
 8013298:	9301      	str	r3, [sp, #4]
 801329a:	1bc9      	subs	r1, r1, r7
 801329c:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80132a0:	b212      	sxth	r2, r2
 80132a2:	9300      	str	r3, [sp, #0]
 80132a4:	b209      	sxth	r1, r1
 80132a6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80132aa:	f7f9 f891 	bl	800c3d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 80132ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80132b0:	b329      	cbz	r1, 80132fe <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80132b2:	a805      	add	r0, sp, #20
 80132b4:	f7ff fe14 	bl	8012ee0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80132b8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80132bc:	792b      	ldrb	r3, [r5, #4]
 80132be:	a907      	add	r1, sp, #28
 80132c0:	1abf      	subs	r7, r7, r2
 80132c2:	88ea      	ldrh	r2, [r5, #6]
 80132c4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80132c6:	4417      	add	r7, r2
 80132c8:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 80132ca:	f88d 3020 	strb.w	r3, [sp, #32]
 80132ce:	4417      	add	r7, r2
 80132d0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80132d4:	1ab6      	subs	r6, r6, r2
 80132d6:	892a      	ldrh	r2, [r5, #8]
 80132d8:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 80132dc:	4416      	add	r6, r2
 80132de:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80132e0:	4416      	add	r6, r2
 80132e2:	4a08      	ldr	r2, [pc, #32]	; (8013304 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 80132e4:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 80132e8:	2600      	movs	r6, #0
 80132ea:	9207      	str	r2, [sp, #28]
 80132ec:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 80132f0:	6803      	ldr	r3, [r0, #0]
 80132f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80132f4:	4798      	blx	r3
 80132f6:	792b      	ldrb	r3, [r5, #4]
 80132f8:	b10b      	cbz	r3, 80132fe <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80132fa:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 80132fe:	b00a      	add	sp, #40	; 0x28
 8013300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013304:	08020a58 	.word	0x08020a58

08013308 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8013308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801330c:	460c      	mov	r4, r1
 801330e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8013310:	b088      	sub	sp, #32
 8013312:	4605      	mov	r5, r0
 8013314:	2900      	cmp	r1, #0
 8013316:	d06d      	beq.n	80133f4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8013318:	4668      	mov	r0, sp
 801331a:	f7ff fde1 	bl	8012ee0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801331e:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8013320:	88e3      	ldrh	r3, [r4, #6]
 8013322:	f9bd 8000 	ldrsh.w	r8, [sp]
 8013326:	440b      	add	r3, r1
 8013328:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801332c:	b21b      	sxth	r3, r3
 801332e:	4543      	cmp	r3, r8
 8013330:	db31      	blt.n	8013396 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013332:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8013336:	44c4      	add	ip, r8
 8013338:	fa0f fc8c 	sxth.w	ip, ip
 801333c:	4563      	cmp	r3, ip
 801333e:	da2a      	bge.n	8013396 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013340:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8013342:	8926      	ldrh	r6, [r4, #8]
 8013344:	4416      	add	r6, r2
 8013346:	b236      	sxth	r6, r6
 8013348:	42be      	cmp	r6, r7
 801334a:	db24      	blt.n	8013396 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801334c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8013350:	4438      	add	r0, r7
 8013352:	b200      	sxth	r0, r0
 8013354:	4286      	cmp	r6, r0
 8013356:	da1e      	bge.n	8013396 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013358:	8963      	ldrh	r3, [r4, #10]
 801335a:	4419      	add	r1, r3
 801335c:	b209      	sxth	r1, r1
 801335e:	4541      	cmp	r1, r8
 8013360:	db08      	blt.n	8013374 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8013362:	4561      	cmp	r1, ip
 8013364:	da06      	bge.n	8013374 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8013366:	89a3      	ldrh	r3, [r4, #12]
 8013368:	441a      	add	r2, r3
 801336a:	b212      	sxth	r2, r2
 801336c:	42ba      	cmp	r2, r7
 801336e:	db01      	blt.n	8013374 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8013370:	4282      	cmp	r2, r0
 8013372:	db10      	blt.n	8013396 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013374:	4b21      	ldr	r3, [pc, #132]	; (80133fc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8013376:	a904      	add	r1, sp, #16
 8013378:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801337a:	9304      	str	r3, [sp, #16]
 801337c:	2302      	movs	r3, #2
 801337e:	f88d 3014 	strb.w	r3, [sp, #20]
 8013382:	2300      	movs	r3, #0
 8013384:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013388:	f8ad 3018 	strh.w	r3, [sp, #24]
 801338c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013390:	6803      	ldr	r3, [r0, #0]
 8013392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013394:	4798      	blx	r3
 8013396:	1d29      	adds	r1, r5, #4
 8013398:	a802      	add	r0, sp, #8
 801339a:	f7ff fda1 	bl	8012ee0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801339e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80133a2:	88e0      	ldrh	r0, [r4, #6]
 80133a4:	eba3 0808 	sub.w	r8, r3, r8
 80133a8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80133ac:	7921      	ldrb	r1, [r4, #4]
 80133ae:	fa1f f888 	uxth.w	r8, r8
 80133b2:	1bdf      	subs	r7, r3, r7
 80133b4:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 80133b8:	b2bb      	uxth	r3, r7
 80133ba:	4440      	add	r0, r8
 80133bc:	8922      	ldrh	r2, [r4, #8]
 80133be:	8967      	ldrh	r7, [r4, #10]
 80133c0:	4460      	add	r0, ip
 80133c2:	89a4      	ldrh	r4, [r4, #12]
 80133c4:	441a      	add	r2, r3
 80133c6:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 80133c8:	44b8      	add	r8, r7
 80133ca:	4423      	add	r3, r4
 80133cc:	f8ad 0016 	strh.w	r0, [sp, #22]
 80133d0:	4432      	add	r2, r6
 80133d2:	44e0      	add	r8, ip
 80133d4:	4433      	add	r3, r6
 80133d6:	4c0a      	ldr	r4, [pc, #40]	; (8013400 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 80133d8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80133da:	f88d 1014 	strb.w	r1, [sp, #20]
 80133de:	a904      	add	r1, sp, #16
 80133e0:	9404      	str	r4, [sp, #16]
 80133e2:	f8ad 2018 	strh.w	r2, [sp, #24]
 80133e6:	f8ad 801a 	strh.w	r8, [sp, #26]
 80133ea:	f8ad 301c 	strh.w	r3, [sp, #28]
 80133ee:	6803      	ldr	r3, [r0, #0]
 80133f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80133f2:	4798      	blx	r3
 80133f4:	b008      	add	sp, #32
 80133f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133fa:	bf00      	nop
 80133fc:	08020a58 	.word	0x08020a58
 8013400:	08020a6c 	.word	0x08020a6c

08013404 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8013404:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013406:	4604      	mov	r4, r0
 8013408:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801340c:	3201      	adds	r2, #1
 801340e:	d112      	bne.n	8013436 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8013410:	2500      	movs	r5, #0
 8013412:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8013416:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801341a:	6803      	ldr	r3, [r0, #0]
 801341c:	9500      	str	r5, [sp, #0]
 801341e:	466d      	mov	r5, sp
 8013420:	f8ad 1004 	strh.w	r1, [sp, #4]
 8013424:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013428:	4629      	mov	r1, r5
 801342a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801342c:	4798      	blx	r3
 801342e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013432:	e884 0003 	stmia.w	r4, {r0, r1}
 8013436:	4620      	mov	r0, r4
 8013438:	b003      	add	sp, #12
 801343a:	bd30      	pop	{r4, r5, pc}

0801343c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801343c:	b513      	push	{r0, r1, r4, lr}
 801343e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8013442:	4604      	mov	r4, r0
 8013444:	3301      	adds	r3, #1
 8013446:	d109      	bne.n	801345c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8013448:	4601      	mov	r1, r0
 801344a:	4668      	mov	r0, sp
 801344c:	f7ff fd48 	bl	8012ee0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013450:	f8bd 3000 	ldrh.w	r3, [sp]
 8013454:	8423      	strh	r3, [r4, #32]
 8013456:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801345a:	8463      	strh	r3, [r4, #34]	; 0x22
 801345c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8013460:	b002      	add	sp, #8
 8013462:	bd10      	pop	{r4, pc}

08013464 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8013464:	b513      	push	{r0, r1, r4, lr}
 8013466:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801346a:	4604      	mov	r4, r0
 801346c:	3301      	adds	r3, #1
 801346e:	d109      	bne.n	8013484 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8013470:	4601      	mov	r1, r0
 8013472:	4668      	mov	r0, sp
 8013474:	f7ff fd34 	bl	8012ee0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013478:	f8bd 3000 	ldrh.w	r3, [sp]
 801347c:	8423      	strh	r3, [r4, #32]
 801347e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013482:	8463      	strh	r3, [r4, #34]	; 0x22
 8013484:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8013488:	b002      	add	sp, #8
 801348a:	bd10      	pop	{r4, pc}

0801348c <_ZN8touchgfx6ScreenC1Ev>:
 801348c:	b570      	push	{r4, r5, r6, lr}
 801348e:	4b17      	ldr	r3, [pc, #92]	; (80134ec <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8013490:	4605      	mov	r5, r0
 8013492:	4a17      	ldr	r2, [pc, #92]	; (80134f0 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8013494:	2101      	movs	r1, #1
 8013496:	f845 3b04 	str.w	r3, [r5], #4
 801349a:	2300      	movs	r3, #0
 801349c:	6042      	str	r2, [r0, #4]
 801349e:	4604      	mov	r4, r0
 80134a0:	8103      	strh	r3, [r0, #8]
 80134a2:	8143      	strh	r3, [r0, #10]
 80134a4:	8183      	strh	r3, [r0, #12]
 80134a6:	81c3      	strh	r3, [r0, #14]
 80134a8:	8203      	strh	r3, [r0, #16]
 80134aa:	8243      	strh	r3, [r0, #18]
 80134ac:	8283      	strh	r3, [r0, #20]
 80134ae:	82c3      	strh	r3, [r0, #22]
 80134b0:	6203      	str	r3, [r0, #32]
 80134b2:	8483      	strh	r3, [r0, #36]	; 0x24
 80134b4:	84c3      	strh	r3, [r0, #38]	; 0x26
 80134b6:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 80134ba:	6343      	str	r3, [r0, #52]	; 0x34
 80134bc:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 80134c0:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80134c4:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80134c8:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 80134cc:	4b09      	ldr	r3, [pc, #36]	; (80134f4 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80134ce:	4628      	mov	r0, r5
 80134d0:	f9b3 6000 	ldrsh.w	r6, [r3]
 80134d4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80134d6:	4a08      	ldr	r2, [pc, #32]	; (80134f8 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80134d8:	f9b2 1000 	ldrsh.w	r1, [r2]
 80134dc:	4798      	blx	r3
 80134de:	6863      	ldr	r3, [r4, #4]
 80134e0:	4628      	mov	r0, r5
 80134e2:	4631      	mov	r1, r6
 80134e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80134e6:	4798      	blx	r3
 80134e8:	4620      	mov	r0, r4
 80134ea:	bd70      	pop	{r4, r5, r6, pc}
 80134ec:	08020a94 	.word	0x08020a94
 80134f0:	08020228 	.word	0x08020228
 80134f4:	2400e44a 	.word	0x2400e44a
 80134f8:	2400e448 	.word	0x2400e448

080134fc <_ZN8touchgfx6Screen4drawEv>:
 80134fc:	4b09      	ldr	r3, [pc, #36]	; (8013524 <_ZN8touchgfx6Screen4drawEv+0x28>)
 80134fe:	b507      	push	{r0, r1, r2, lr}
 8013500:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013504:	2100      	movs	r1, #0
 8013506:	4b08      	ldr	r3, [pc, #32]	; (8013528 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8013508:	9100      	str	r1, [sp, #0]
 801350a:	4669      	mov	r1, sp
 801350c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013510:	f8ad 2004 	strh.w	r2, [sp, #4]
 8013514:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013518:	6803      	ldr	r3, [r0, #0]
 801351a:	689b      	ldr	r3, [r3, #8]
 801351c:	4798      	blx	r3
 801351e:	b003      	add	sp, #12
 8013520:	f85d fb04 	ldr.w	pc, [sp], #4
 8013524:	2400e448 	.word	0x2400e448
 8013528:	2400e44a 	.word	0x2400e44a

0801352c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801352c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013530:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8013534:	b089      	sub	sp, #36	; 0x24
 8013536:	4680      	mov	r8, r0
 8013538:	460c      	mov	r4, r1
 801353a:	2b00      	cmp	r3, #0
 801353c:	4615      	mov	r5, r2
 801353e:	dd0e      	ble.n	801355e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8013540:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8013544:	2b00      	cmp	r3, #0
 8013546:	dd0a      	ble.n	801355e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8013548:	4628      	mov	r0, r5
 801354a:	f7ff ff5b 	bl	8013404 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801354e:	4621      	mov	r1, r4
 8013550:	f7fe fb4d 	bl	8011bee <_ZNK8touchgfx4Rect9intersectERKS0_>
 8013554:	69eb      	ldr	r3, [r5, #28]
 8013556:	b928      	cbnz	r0, 8013564 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8013558:	461d      	mov	r5, r3
 801355a:	2b00      	cmp	r3, #0
 801355c:	d1f4      	bne.n	8013548 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801355e:	b009      	add	sp, #36	; 0x24
 8013560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013564:	ae04      	add	r6, sp, #16
 8013566:	2b00      	cmp	r3, #0
 8013568:	f000 80b5 	beq.w	80136d6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801356c:	682b      	ldr	r3, [r5, #0]
 801356e:	4629      	mov	r1, r5
 8013570:	a802      	add	r0, sp, #8
 8013572:	68db      	ldr	r3, [r3, #12]
 8013574:	4798      	blx	r3
 8013576:	4628      	mov	r0, r5
 8013578:	f7ff ff60 	bl	801343c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801357c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8013580:	4407      	add	r7, r0
 8013582:	4628      	mov	r0, r5
 8013584:	f7ff ff6e 	bl	8013464 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8013588:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801358c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8013590:	b23f      	sxth	r7, r7
 8013592:	4418      	add	r0, r3
 8013594:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8013598:	4621      	mov	r1, r4
 801359a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801359e:	f8ad 0012 	strh.w	r0, [sp, #18]
 80135a2:	4630      	mov	r0, r6
 80135a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80135a8:	f8ad 7010 	strh.w	r7, [sp, #16]
 80135ac:	f7f8 fff2 	bl	800c594 <_ZN8touchgfx4RectaNERKS0_>
 80135b0:	4628      	mov	r0, r5
 80135b2:	f7ff ff27 	bl	8013404 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80135b6:	ab06      	add	r3, sp, #24
 80135b8:	4602      	mov	r2, r0
 80135ba:	e896 0003 	ldmia.w	r6, {r0, r1}
 80135be:	e883 0003 	stmia.w	r3, {r0, r1}
 80135c2:	4611      	mov	r1, r2
 80135c4:	4618      	mov	r0, r3
 80135c6:	f7f8 ffe5 	bl	800c594 <_ZN8touchgfx4RectaNERKS0_>
 80135ca:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80135ce:	f9b4 1000 	ldrsh.w	r1, [r4]
 80135d2:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80135d6:	4299      	cmp	r1, r3
 80135d8:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80135dc:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80135e0:	d10b      	bne.n	80135fa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80135e2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80135e6:	4552      	cmp	r2, sl
 80135e8:	d107      	bne.n	80135fa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80135ea:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80135ee:	455a      	cmp	r2, fp
 80135f0:	d103      	bne.n	80135fa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80135f2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80135f6:	454a      	cmp	r2, r9
 80135f8:	d06d      	beq.n	80136d6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80135fa:	f1bb 0f00 	cmp.w	fp, #0
 80135fe:	dd65      	ble.n	80136cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8013600:	f1b9 0f00 	cmp.w	r9, #0
 8013604:	dd62      	ble.n	80136cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8013606:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801360a:	fa1f f08a 	uxth.w	r0, sl
 801360e:	4552      	cmp	r2, sl
 8013610:	9000      	str	r0, [sp, #0]
 8013612:	da12      	bge.n	801363a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8013614:	9301      	str	r3, [sp, #4]
 8013616:	9b00      	ldr	r3, [sp, #0]
 8013618:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801361c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8013620:	1a9a      	subs	r2, r3, r2
 8013622:	f8ad 1010 	strh.w	r1, [sp, #16]
 8013626:	4631      	mov	r1, r6
 8013628:	f8ad 0014 	strh.w	r0, [sp, #20]
 801362c:	4640      	mov	r0, r8
 801362e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8013632:	69ea      	ldr	r2, [r5, #28]
 8013634:	f7ff ff7a 	bl	801352c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8013638:	9b01      	ldr	r3, [sp, #4]
 801363a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801363e:	b29f      	uxth	r7, r3
 8013640:	429a      	cmp	r2, r3
 8013642:	da0d      	bge.n	8013660 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8013644:	f8ad 2010 	strh.w	r2, [sp, #16]
 8013648:	1aba      	subs	r2, r7, r2
 801364a:	f8ad a012 	strh.w	sl, [sp, #18]
 801364e:	4631      	mov	r1, r6
 8013650:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013654:	4640      	mov	r0, r8
 8013656:	f8ad 9016 	strh.w	r9, [sp, #22]
 801365a:	69ea      	ldr	r2, [r5, #28]
 801365c:	f7ff ff66 	bl	801352c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8013660:	8822      	ldrh	r2, [r4, #0]
 8013662:	445f      	add	r7, fp
 8013664:	88a3      	ldrh	r3, [r4, #4]
 8013666:	b2bf      	uxth	r7, r7
 8013668:	4413      	add	r3, r2
 801366a:	b23a      	sxth	r2, r7
 801366c:	b29b      	uxth	r3, r3
 801366e:	b219      	sxth	r1, r3
 8013670:	4291      	cmp	r1, r2
 8013672:	dd0d      	ble.n	8013690 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8013674:	1bdb      	subs	r3, r3, r7
 8013676:	f8ad 2010 	strh.w	r2, [sp, #16]
 801367a:	f8ad a012 	strh.w	sl, [sp, #18]
 801367e:	4631      	mov	r1, r6
 8013680:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013684:	4640      	mov	r0, r8
 8013686:	f8ad 9016 	strh.w	r9, [sp, #22]
 801368a:	69ea      	ldr	r2, [r5, #28]
 801368c:	f7ff ff4e 	bl	801352c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8013690:	88e2      	ldrh	r2, [r4, #6]
 8013692:	8863      	ldrh	r3, [r4, #2]
 8013694:	4413      	add	r3, r2
 8013696:	9a00      	ldr	r2, [sp, #0]
 8013698:	444a      	add	r2, r9
 801369a:	b29b      	uxth	r3, r3
 801369c:	fa1f f982 	uxth.w	r9, r2
 80136a0:	b219      	sxth	r1, r3
 80136a2:	fa0f f289 	sxth.w	r2, r9
 80136a6:	428a      	cmp	r2, r1
 80136a8:	da15      	bge.n	80136d6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80136aa:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80136ae:	eba3 0309 	sub.w	r3, r3, r9
 80136b2:	f9b4 0000 	ldrsh.w	r0, [r4]
 80136b6:	f8ad 1014 	strh.w	r1, [sp, #20]
 80136ba:	4631      	mov	r1, r6
 80136bc:	f8ad 0010 	strh.w	r0, [sp, #16]
 80136c0:	f8ad 2012 	strh.w	r2, [sp, #18]
 80136c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80136c8:	69ea      	ldr	r2, [r5, #28]
 80136ca:	e001      	b.n	80136d0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 80136cc:	69ea      	ldr	r2, [r5, #28]
 80136ce:	4621      	mov	r1, r4
 80136d0:	4640      	mov	r0, r8
 80136d2:	f7ff ff2b 	bl	801352c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80136d6:	4628      	mov	r0, r5
 80136d8:	f7ff fe94 	bl	8013404 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80136dc:	6861      	ldr	r1, [r4, #4]
 80136de:	4602      	mov	r2, r0
 80136e0:	4633      	mov	r3, r6
 80136e2:	6820      	ldr	r0, [r4, #0]
 80136e4:	c303      	stmia	r3!, {r0, r1}
 80136e6:	4611      	mov	r1, r2
 80136e8:	4630      	mov	r0, r6
 80136ea:	f7f8 ff53 	bl	800c594 <_ZN8touchgfx4RectaNERKS0_>
 80136ee:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	f77f af33 	ble.w	801355e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80136f8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	f77f af2e 	ble.w	801355e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8013702:	4628      	mov	r0, r5
 8013704:	f7ff fe9a 	bl	801343c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8013708:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801370c:	1a18      	subs	r0, r3, r0
 801370e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8013712:	4628      	mov	r0, r5
 8013714:	f7ff fea6 	bl	8013464 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8013718:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801371c:	4631      	mov	r1, r6
 801371e:	1a18      	subs	r0, r3, r0
 8013720:	f8ad 0012 	strh.w	r0, [sp, #18]
 8013724:	4628      	mov	r0, r5
 8013726:	682b      	ldr	r3, [r5, #0]
 8013728:	689b      	ldr	r3, [r3, #8]
 801372a:	4798      	blx	r3
 801372c:	e717      	b.n	801355e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801372e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801372e:	b570      	push	{r4, r5, r6, lr}
 8013730:	1d06      	adds	r6, r0, #4
 8013732:	b086      	sub	sp, #24
 8013734:	460c      	mov	r4, r1
 8013736:	2300      	movs	r3, #0
 8013738:	4631      	mov	r1, r6
 801373a:	4605      	mov	r5, r0
 801373c:	a802      	add	r0, sp, #8
 801373e:	9301      	str	r3, [sp, #4]
 8013740:	f7ff fbce 	bl	8012ee0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013744:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8013748:	8822      	ldrh	r2, [r4, #0]
 801374a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801374e:	1ad2      	subs	r2, r2, r3
 8013750:	8863      	ldrh	r3, [r4, #2]
 8013752:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8013756:	1a5b      	subs	r3, r3, r1
 8013758:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801375c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8013760:	aa01      	add	r2, sp, #4
 8013762:	f8ad 0014 	strh.w	r0, [sp, #20]
 8013766:	4630      	mov	r0, r6
 8013768:	f8ad 1016 	strh.w	r1, [sp, #22]
 801376c:	a904      	add	r1, sp, #16
 801376e:	f8ad 3012 	strh.w	r3, [sp, #18]
 8013772:	f7f8 ffe7 	bl	800c744 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8013776:	9a01      	ldr	r2, [sp, #4]
 8013778:	b11a      	cbz	r2, 8013782 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801377a:	4621      	mov	r1, r4
 801377c:	4628      	mov	r0, r5
 801377e:	f7ff fed5 	bl	801352c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8013782:	b006      	add	sp, #24
 8013784:	bd70      	pop	{r4, r5, r6, pc}

08013786 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8013786:	4602      	mov	r2, r0
 8013788:	b530      	push	{r4, r5, lr}
 801378a:	4604      	mov	r4, r0
 801378c:	b085      	sub	sp, #20
 801378e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8013792:	460d      	mov	r5, r1
 8013794:	466b      	mov	r3, sp
 8013796:	6851      	ldr	r1, [r2, #4]
 8013798:	c303      	stmia	r3!, {r0, r1}
 801379a:	4629      	mov	r1, r5
 801379c:	4668      	mov	r0, sp
 801379e:	f7f8 fef9 	bl	800c594 <_ZN8touchgfx4RectaNERKS0_>
 80137a2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80137a6:	b12b      	cbz	r3, 80137b4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 80137a8:	4669      	mov	r1, sp
 80137aa:	4620      	mov	r0, r4
 80137ac:	f7ff ffbf 	bl	801372e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 80137b0:	b005      	add	sp, #20
 80137b2:	bd30      	pop	{r4, r5, pc}
 80137b4:	3404      	adds	r4, #4
 80137b6:	a802      	add	r0, sp, #8
 80137b8:	4621      	mov	r1, r4
 80137ba:	f7ff fb91 	bl	8012ee0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80137be:	f8bd 3000 	ldrh.w	r3, [sp]
 80137c2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80137c6:	4669      	mov	r1, sp
 80137c8:	4620      	mov	r0, r4
 80137ca:	1a9b      	subs	r3, r3, r2
 80137cc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80137d0:	f8ad 3000 	strh.w	r3, [sp]
 80137d4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80137d8:	1a9b      	subs	r3, r3, r2
 80137da:	f8ad 3002 	strh.w	r3, [sp, #2]
 80137de:	f7f8 ff78 	bl	800c6d2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 80137e2:	e7e5      	b.n	80137b0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

080137e4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 80137e4:	460b      	mov	r3, r1
 80137e6:	680a      	ldr	r2, [r1, #0]
 80137e8:	1d01      	adds	r1, r0, #4
 80137ea:	6992      	ldr	r2, [r2, #24]
 80137ec:	4618      	mov	r0, r3
 80137ee:	4710      	bx	r2

080137f0 <_ZN8touchgfx12TextProviderC1Ev>:
 80137f0:	b538      	push	{r3, r4, r5, lr}
 80137f2:	2500      	movs	r5, #0
 80137f4:	2302      	movs	r3, #2
 80137f6:	4604      	mov	r4, r0
 80137f8:	220e      	movs	r2, #14
 80137fa:	7403      	strb	r3, [r0, #16]
 80137fc:	4629      	mov	r1, r5
 80137fe:	6145      	str	r5, [r0, #20]
 8013800:	7605      	strb	r5, [r0, #24]
 8013802:	83c5      	strh	r5, [r0, #30]
 8013804:	8405      	strh	r5, [r0, #32]
 8013806:	86c5      	strh	r5, [r0, #54]	; 0x36
 8013808:	8705      	strh	r5, [r0, #56]	; 0x38
 801380a:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801380c:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8013810:	e9c0 5500 	strd	r5, r5, [r0]
 8013814:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8013818:	304c      	adds	r0, #76	; 0x4c
 801381a:	f00a f8cb 	bl	801d9b4 <memset>
 801381e:	2301      	movs	r3, #1
 8013820:	4620      	mov	r0, r4
 8013822:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8013826:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801382a:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801382e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8013832:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8013836:	f7ef f99b 	bl	8002b70 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801383a:	4620      	mov	r0, r4
 801383c:	bd38      	pop	{r3, r4, r5, pc}

0801383e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801383e:	b530      	push	{r4, r5, lr}
 8013840:	2500      	movs	r5, #0
 8013842:	2401      	movs	r4, #1
 8013844:	6843      	ldr	r3, [r0, #4]
 8013846:	b913      	cbnz	r3, 801384e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8013848:	6803      	ldr	r3, [r0, #0]
 801384a:	b313      	cbz	r3, 8013892 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801384c:	6043      	str	r3, [r0, #4]
 801384e:	7e03      	ldrb	r3, [r0, #24]
 8013850:	b143      	cbz	r3, 8013864 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8013852:	6943      	ldr	r3, [r0, #20]
 8013854:	b12b      	cbz	r3, 8013862 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8013856:	881a      	ldrh	r2, [r3, #0]
 8013858:	b11a      	cbz	r2, 8013862 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801385a:	1c9a      	adds	r2, r3, #2
 801385c:	6142      	str	r2, [r0, #20]
 801385e:	8818      	ldrh	r0, [r3, #0]
 8013860:	bd30      	pop	{r4, r5, pc}
 8013862:	7605      	strb	r5, [r0, #24]
 8013864:	6843      	ldr	r3, [r0, #4]
 8013866:	8819      	ldrh	r1, [r3, #0]
 8013868:	b199      	cbz	r1, 8013892 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801386a:	1c9a      	adds	r2, r3, #2
 801386c:	2902      	cmp	r1, #2
 801386e:	6042      	str	r2, [r0, #4]
 8013870:	d1f5      	bne.n	801385e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8013872:	7c03      	ldrb	r3, [r0, #16]
 8013874:	2b01      	cmp	r3, #1
 8013876:	d8e5      	bhi.n	8013844 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8013878:	1c5a      	adds	r2, r3, #1
 801387a:	3302      	adds	r3, #2
 801387c:	7402      	strb	r2, [r0, #16]
 801387e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8013882:	6143      	str	r3, [r0, #20]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d0dd      	beq.n	8013844 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8013888:	881b      	ldrh	r3, [r3, #0]
 801388a:	2b00      	cmp	r3, #0
 801388c:	d0da      	beq.n	8013844 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801388e:	7604      	strb	r4, [r0, #24]
 8013890:	e7d8      	b.n	8013844 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8013892:	2000      	movs	r0, #0
 8013894:	e7e4      	b.n	8013860 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08013896 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8013896:	6001      	str	r1, [r0, #0]
 8013898:	2100      	movs	r1, #0
 801389a:	b430      	push	{r4, r5}
 801389c:	6041      	str	r1, [r0, #4]
 801389e:	6815      	ldr	r5, [r2, #0]
 80138a0:	6085      	str	r5, [r0, #8]
 80138a2:	6852      	ldr	r2, [r2, #4]
 80138a4:	6443      	str	r3, [r0, #68]	; 0x44
 80138a6:	9b02      	ldr	r3, [sp, #8]
 80138a8:	60c2      	str	r2, [r0, #12]
 80138aa:	7401      	strb	r1, [r0, #16]
 80138ac:	6141      	str	r1, [r0, #20]
 80138ae:	7601      	strb	r1, [r0, #24]
 80138b0:	8701      	strh	r1, [r0, #56]	; 0x38
 80138b2:	8401      	strh	r1, [r0, #32]
 80138b4:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80138b8:	6483      	str	r3, [r0, #72]	; 0x48
 80138ba:	bc30      	pop	{r4, r5}
 80138bc:	f7ef b958 	b.w	8002b70 <_ZN8touchgfx12TextProvider18initializeInternalEv>

080138c0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80138c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138c2:	4605      	mov	r5, r0
 80138c4:	4608      	mov	r0, r1
 80138c6:	b1f1      	cbz	r1, 8013906 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 80138c8:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 80138cc:	460b      	mov	r3, r1
 80138ce:	f101 0708 	add.w	r7, r1, #8
 80138d2:	4622      	mov	r2, r4
 80138d4:	6818      	ldr	r0, [r3, #0]
 80138d6:	3308      	adds	r3, #8
 80138d8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80138dc:	4626      	mov	r6, r4
 80138de:	42bb      	cmp	r3, r7
 80138e0:	c603      	stmia	r6!, {r0, r1}
 80138e2:	4634      	mov	r4, r6
 80138e4:	d1f6      	bne.n	80138d4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80138e6:	6818      	ldr	r0, [r3, #0]
 80138e8:	6030      	str	r0, [r6, #0]
 80138ea:	4610      	mov	r0, r2
 80138ec:	889b      	ldrh	r3, [r3, #4]
 80138ee:	80b3      	strh	r3, [r6, #4]
 80138f0:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 80138f4:	015b      	lsls	r3, r3, #5
 80138f6:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80138fa:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 80138fe:	430b      	orrs	r3, r1
 8013900:	425b      	negs	r3, r3
 8013902:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8013906:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013908 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8013908:	b538      	push	{r3, r4, r5, lr}
 801390a:	460c      	mov	r4, r1
 801390c:	6811      	ldr	r1, [r2, #0]
 801390e:	4610      	mov	r0, r2
 8013910:	68cd      	ldr	r5, [r1, #12]
 8013912:	4619      	mov	r1, r3
 8013914:	47a8      	blx	r5
 8013916:	2800      	cmp	r0, #0
 8013918:	bf08      	it	eq
 801391a:	4620      	moveq	r0, r4
 801391c:	bd38      	pop	{r3, r4, r5, pc}
	...

08013920 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8013920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013922:	4604      	mov	r4, r0
 8013924:	4615      	mov	r5, r2
 8013926:	4608      	mov	r0, r1
 8013928:	b93a      	cbnz	r2, 801393a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801392a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801392e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8013932:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8013936:	4628      	mov	r0, r5
 8013938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801393a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801393e:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 8013942:	8893      	ldrh	r3, [r2, #4]
 8013944:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8013948:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801394c:	79ee      	ldrb	r6, [r5, #7]
 801394e:	4316      	orrs	r6, r2
 8013950:	19da      	adds	r2, r3, r7
 8013952:	b291      	uxth	r1, r2
 8013954:	b2b7      	uxth	r7, r6
 8013956:	291d      	cmp	r1, #29
 8013958:	d87b      	bhi.n	8013a52 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801395a:	2201      	movs	r2, #1
 801395c:	10f6      	asrs	r6, r6, #3
 801395e:	408a      	lsls	r2, r1
 8013960:	4974      	ldr	r1, [pc, #464]	; (8013b34 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 8013962:	420a      	tst	r2, r1
 8013964:	d12e      	bne.n	80139c4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8013966:	f412 7f60 	tst.w	r2, #896	; 0x380
 801396a:	d072      	beq.n	8013a52 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801396c:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8013970:	462b      	mov	r3, r5
 8013972:	f105 0e08 	add.w	lr, r5, #8
 8013976:	4615      	mov	r5, r2
 8013978:	6818      	ldr	r0, [r3, #0]
 801397a:	3308      	adds	r3, #8
 801397c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8013980:	4694      	mov	ip, r2
 8013982:	4573      	cmp	r3, lr
 8013984:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8013988:	4662      	mov	r2, ip
 801398a:	d1f5      	bne.n	8013978 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801398c:	6818      	ldr	r0, [r3, #0]
 801398e:	f8cc 0000 	str.w	r0, [ip]
 8013992:	889b      	ldrh	r3, [r3, #4]
 8013994:	f8ac 3004 	strh.w	r3, [ip, #4]
 8013998:	b2b3      	uxth	r3, r6
 801399a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801399e:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 80139a2:	1aca      	subs	r2, r1, r3
 80139a4:	1bcf      	subs	r7, r1, r7
 80139a6:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 80139aa:	b292      	uxth	r2, r2
 80139ac:	1afb      	subs	r3, r7, r3
 80139ae:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 80139b2:	10d2      	asrs	r2, r2, #3
 80139b4:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80139b8:	4302      	orrs	r2, r0
 80139ba:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 80139be:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80139c2:	e7b8      	b.n	8013936 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80139c4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80139c6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80139ca:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 80139cc:	f640 6333 	movw	r3, #3635	; 0xe33
 80139d0:	4299      	cmp	r1, r3
 80139d2:	d110      	bne.n	80139f6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 80139d4:	6803      	ldr	r3, [r0, #0]
 80139d6:	68db      	ldr	r3, [r3, #12]
 80139d8:	4798      	blx	r3
 80139da:	7b41      	ldrb	r1, [r0, #13]
 80139dc:	00cb      	lsls	r3, r1, #3
 80139de:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80139e2:	7a03      	ldrb	r3, [r0, #8]
 80139e4:	0648      	lsls	r0, r1, #25
 80139e6:	ea43 0302 	orr.w	r3, r3, r2
 80139ea:	bf44      	itt	mi
 80139ec:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80139f0:	b21b      	sxthmi	r3, r3
 80139f2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80139f6:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80139fa:	462a      	mov	r2, r5
 80139fc:	f105 0c08 	add.w	ip, r5, #8
 8013a00:	443b      	add	r3, r7
 8013a02:	4433      	add	r3, r6
 8013a04:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8013a08:	b29b      	uxth	r3, r3
 8013a0a:	4635      	mov	r5, r6
 8013a0c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8013a10:	6810      	ldr	r0, [r2, #0]
 8013a12:	3208      	adds	r2, #8
 8013a14:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8013a18:	4637      	mov	r7, r6
 8013a1a:	4562      	cmp	r2, ip
 8013a1c:	c703      	stmia	r7!, {r0, r1}
 8013a1e:	463e      	mov	r6, r7
 8013a20:	d1f6      	bne.n	8013a10 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 8013a22:	6810      	ldr	r0, [r2, #0]
 8013a24:	6038      	str	r0, [r7, #0]
 8013a26:	8892      	ldrh	r2, [r2, #4]
 8013a28:	80ba      	strh	r2, [r7, #4]
 8013a2a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8013a2e:	10db      	asrs	r3, r3, #3
 8013a30:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8013a34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013a38:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8013a3c:	4313      	orrs	r3, r2
 8013a3e:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8013a42:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8013a46:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8013a4a:	1a9b      	subs	r3, r3, r2
 8013a4c:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8013a50:	e771      	b.n	8013936 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8013a52:	f023 0204 	bic.w	r2, r3, #4
 8013a56:	f640 611b 	movw	r1, #3611	; 0xe1b
 8013a5a:	428a      	cmp	r2, r1
 8013a5c:	d003      	beq.n	8013a66 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 8013a5e:	f640 621d 	movw	r2, #3613	; 0xe1d
 8013a62:	4293      	cmp	r3, r2
 8013a64:	d120      	bne.n	8013aa8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 8013a66:	3b01      	subs	r3, #1
 8013a68:	4602      	mov	r2, r0
 8013a6a:	4629      	mov	r1, r5
 8013a6c:	4620      	mov	r0, r4
 8013a6e:	b29b      	uxth	r3, r3
 8013a70:	f7ff ff4a 	bl	8013908 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8013a74:	7b41      	ldrb	r1, [r0, #13]
 8013a76:	00cb      	lsls	r3, r1, #3
 8013a78:	0649      	lsls	r1, r1, #25
 8013a7a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8013a7e:	7a03      	ldrb	r3, [r0, #8]
 8013a80:	ea43 0302 	orr.w	r3, r3, r2
 8013a84:	bf44      	itt	mi
 8013a86:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8013a8a:	b21b      	sxthmi	r3, r3
 8013a8c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8013a90:	7b6b      	ldrb	r3, [r5, #13]
 8013a92:	7aaa      	ldrb	r2, [r5, #10]
 8013a94:	005b      	lsls	r3, r3, #1
 8013a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013a9a:	4313      	orrs	r3, r2
 8013a9c:	115a      	asrs	r2, r3, #5
 8013a9e:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8013aa2:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8013aa6:	e035      	b.n	8013b14 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8013aa8:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8013aac:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8013ab0:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8013ab4:	7a2a      	ldrb	r2, [r5, #8]
 8013ab6:	ea42 0201 	orr.w	r2, r2, r1
 8013aba:	f640 6109 	movw	r1, #3593	; 0xe09
 8013abe:	bf1c      	itt	ne
 8013ac0:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8013ac4:	b212      	sxthne	r2, r2
 8013ac6:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8013aca:	f023 0210 	bic.w	r2, r3, #16
 8013ace:	428a      	cmp	r2, r1
 8013ad0:	d003      	beq.n	8013ada <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8013ad2:	f640 6213 	movw	r2, #3603	; 0xe13
 8013ad6:	4293      	cmp	r3, r2
 8013ad8:	d129      	bne.n	8013b2e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 8013ada:	7b6e      	ldrb	r6, [r5, #13]
 8013adc:	4629      	mov	r1, r5
 8013ade:	0076      	lsls	r6, r6, #1
 8013ae0:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8013ae4:	7aae      	ldrb	r6, [r5, #10]
 8013ae6:	4316      	orrs	r6, r2
 8013ae8:	f640 6213 	movw	r2, #3603	; 0xe13
 8013aec:	4293      	cmp	r3, r2
 8013aee:	4602      	mov	r2, r0
 8013af0:	4620      	mov	r0, r4
 8013af2:	bf16      	itet	ne
 8013af4:	f103 33ff 	addne.w	r3, r3, #4294967295
 8013af8:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8013afc:	b29b      	uxthne	r3, r3
 8013afe:	f7ff ff03 	bl	8013908 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8013b02:	7b43      	ldrb	r3, [r0, #13]
 8013b04:	7a82      	ldrb	r2, [r0, #10]
 8013b06:	005b      	lsls	r3, r3, #1
 8013b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013b0c:	4313      	orrs	r3, r2
 8013b0e:	1af6      	subs	r6, r6, r3
 8013b10:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8013b14:	7b69      	ldrb	r1, [r5, #13]
 8013b16:	00cb      	lsls	r3, r1, #3
 8013b18:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8013b1c:	7a2b      	ldrb	r3, [r5, #8]
 8013b1e:	4313      	orrs	r3, r2
 8013b20:	064a      	lsls	r2, r1, #25
 8013b22:	bf44      	itt	mi
 8013b24:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8013b28:	b21b      	sxthmi	r3, r3
 8013b2a:	1bdb      	subs	r3, r3, r7
 8013b2c:	e747      	b.n	80139be <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8013b2e:	2300      	movs	r3, #0
 8013b30:	e7b7      	b.n	8013aa2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 8013b32:	bf00      	nop
 8013b34:	3fc00079 	.word	0x3fc00079

08013b38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8013b38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013b3c:	4604      	mov	r4, r0
 8013b3e:	b942      	cbnz	r2, 8013b52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8013b40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013b44:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8013b48:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8013b4c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8013b50:	e047      	b.n	8013be2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8013b52:	7b51      	ldrb	r1, [r2, #13]
 8013b54:	8893      	ldrh	r3, [r2, #4]
 8013b56:	010d      	lsls	r5, r1, #4
 8013b58:	f405 7080 	and.w	r0, r5, #256	; 0x100
 8013b5c:	79d5      	ldrb	r5, [r2, #7]
 8013b5e:	4305      	orrs	r5, r0
 8013b60:	2d04      	cmp	r5, #4
 8013b62:	bfcc      	ite	gt
 8013b64:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8013b68:	f04f 0e01 	movle.w	lr, #1
 8013b6c:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8013b70:	f200 80ab 	bhi.w	8013cca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8013b74:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8013b78:	4283      	cmp	r3, r0
 8013b7a:	d216      	bcs.n	8013baa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013b7c:	f240 605b 	movw	r0, #1627	; 0x65b
 8013b80:	4283      	cmp	r3, r0
 8013b82:	d859      	bhi.n	8013c38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8013b84:	f240 6057 	movw	r0, #1623	; 0x657
 8013b88:	4283      	cmp	r3, r0
 8013b8a:	d20e      	bcs.n	8013baa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013b8c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8013b90:	d24a      	bcs.n	8013c28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8013b92:	f240 604e 	movw	r0, #1614	; 0x64e
 8013b96:	4283      	cmp	r3, r0
 8013b98:	d207      	bcs.n	8013baa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013b9a:	f240 601a 	movw	r0, #1562	; 0x61a
 8013b9e:	4283      	cmp	r3, r0
 8013ba0:	d02a      	beq.n	8013bf8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013ba2:	d821      	bhi.n	8013be8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8013ba4:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8013ba8:	d35b      	bcc.n	8013c62 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8013baa:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8013bae:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8013bb2:	f040 80d0 	bne.w	8013d56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8013bb6:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8013bba:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8013bbe:	f040 80ca 	bne.w	8013d56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8013bc2:	00cb      	lsls	r3, r1, #3
 8013bc4:	0649      	lsls	r1, r1, #25
 8013bc6:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8013bca:	7a13      	ldrb	r3, [r2, #8]
 8013bcc:	ea43 0300 	orr.w	r3, r3, r0
 8013bd0:	bf44      	itt	mi
 8013bd2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8013bd6:	b21b      	sxthmi	r3, r3
 8013bd8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8013bdc:	1b5d      	subs	r5, r3, r5
 8013bde:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8013be2:	4610      	mov	r0, r2
 8013be4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013be8:	f240 604b 	movw	r0, #1611	; 0x64b
 8013bec:	4283      	cmp	r3, r0
 8013bee:	d338      	bcc.n	8013c62 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8013bf0:	f240 604c 	movw	r0, #1612	; 0x64c
 8013bf4:	4283      	cmp	r3, r0
 8013bf6:	d9d8      	bls.n	8013baa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013bf8:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8013bfc:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8013c00:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8013c04:	f040 80f3 	bne.w	8013dee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8013c08:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8013c0c:	f040 80ef 	bne.w	8013dee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8013c10:	00cb      	lsls	r3, r1, #3
 8013c12:	064e      	lsls	r6, r1, #25
 8013c14:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8013c18:	7a13      	ldrb	r3, [r2, #8]
 8013c1a:	ea43 0300 	orr.w	r3, r3, r0
 8013c1e:	bf44      	itt	mi
 8013c20:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8013c24:	b21b      	sxthmi	r3, r3
 8013c26:	e7d9      	b.n	8013bdc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8013c28:	f240 6054 	movw	r0, #1620	; 0x654
 8013c2c:	4283      	cmp	r3, r0
 8013c2e:	d8e3      	bhi.n	8013bf8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013c30:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8013c34:	d9e0      	bls.n	8013bf8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013c36:	e7b8      	b.n	8013baa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013c38:	f240 6074 	movw	r0, #1652	; 0x674
 8013c3c:	4283      	cmp	r3, r0
 8013c3e:	d0b4      	beq.n	8013baa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013c40:	d82d      	bhi.n	8013c9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8013c42:	f240 605e 	movw	r0, #1630	; 0x65e
 8013c46:	4283      	cmp	r3, r0
 8013c48:	d804      	bhi.n	8013c54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8013c4a:	f240 605d 	movw	r0, #1629	; 0x65d
 8013c4e:	4283      	cmp	r3, r0
 8013c50:	d3d2      	bcc.n	8013bf8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013c52:	e7aa      	b.n	8013baa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013c54:	f240 605f 	movw	r0, #1631	; 0x65f
 8013c58:	4283      	cmp	r3, r0
 8013c5a:	d0cd      	beq.n	8013bf8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013c5c:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8013c60:	d0a3      	beq.n	8013baa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013c62:	00cb      	lsls	r3, r1, #3
 8013c64:	0649      	lsls	r1, r1, #25
 8013c66:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8013c6a:	7a13      	ldrb	r3, [r2, #8]
 8013c6c:	ea43 0300 	orr.w	r3, r3, r0
 8013c70:	bf44      	itt	mi
 8013c72:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8013c76:	b21b      	sxthmi	r3, r3
 8013c78:	1b5d      	subs	r5, r3, r5
 8013c7a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8013c7e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8013c82:	7b53      	ldrb	r3, [r2, #13]
 8013c84:	015b      	lsls	r3, r3, #5
 8013c86:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8013c8a:	7993      	ldrb	r3, [r2, #6]
 8013c8c:	430b      	orrs	r3, r1
 8013c8e:	2105      	movs	r1, #5
 8013c90:	005b      	lsls	r3, r3, #1
 8013c92:	fb93 f3f1 	sdiv	r3, r3, r1
 8013c96:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8013c9a:	440b      	add	r3, r1
 8013c9c:	e756      	b.n	8013b4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8013c9e:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8013ca2:	4283      	cmp	r3, r0
 8013ca4:	d809      	bhi.n	8013cba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8013ca6:	f240 60df 	movw	r0, #1759	; 0x6df
 8013caa:	4283      	cmp	r3, r0
 8013cac:	f4bf af7d 	bcs.w	8013baa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013cb0:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8013cb4:	2b05      	cmp	r3, #5
 8013cb6:	d8d4      	bhi.n	8013c62 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8013cb8:	e777      	b.n	8013baa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013cba:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8013cbe:	4283      	cmp	r3, r0
 8013cc0:	d09a      	beq.n	8013bf8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013cc2:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8013cc6:	4283      	cmp	r3, r0
 8013cc8:	e7ca      	b.n	8013c60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8013cca:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8013cce:	d22b      	bcs.n	8013d28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8013cd0:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8013cd4:	4283      	cmp	r3, r0
 8013cd6:	d28f      	bcs.n	8013bf8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013cd8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8013cdc:	4283      	cmp	r3, r0
 8013cde:	d816      	bhi.n	8013d0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8013ce0:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8013ce4:	4283      	cmp	r3, r0
 8013ce6:	f4bf af60 	bcs.w	8013baa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013cea:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8013cee:	4283      	cmp	r3, r0
 8013cf0:	d80a      	bhi.n	8013d08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8013cf2:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8013cf6:	4283      	cmp	r3, r0
 8013cf8:	f4bf af57 	bcs.w	8013baa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013cfc:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8013d00:	4283      	cmp	r3, r0
 8013d02:	f43f af79 	beq.w	8013bf8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013d06:	e7ac      	b.n	8013c62 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8013d08:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8013d0c:	e7f8      	b.n	8013d00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8013d0e:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8013d12:	4283      	cmp	r3, r0
 8013d14:	d802      	bhi.n	8013d1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8013d16:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8013d1a:	e798      	b.n	8013c4e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8013d1c:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8013d20:	4283      	cmp	r3, r0
 8013d22:	f47f af42 	bne.w	8013baa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013d26:	e767      	b.n	8013bf8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013d28:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8013d2c:	4283      	cmp	r3, r0
 8013d2e:	f43f af63 	beq.w	8013bf8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013d32:	d802      	bhi.n	8013d3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8013d34:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8013d38:	e7f2      	b.n	8013d20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8013d3a:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8013d3e:	4283      	cmp	r3, r0
 8013d40:	d805      	bhi.n	8013d4e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8013d42:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8013d46:	4283      	cmp	r3, r0
 8013d48:	f4ff af2f 	bcc.w	8013baa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013d4c:	e754      	b.n	8013bf8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013d4e:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8013d52:	4283      	cmp	r3, r0
 8013d54:	e7af      	b.n	8013cb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8013d56:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8013d5a:	4617      	mov	r7, r2
 8013d5c:	f102 0808 	add.w	r8, r2, #8
 8013d60:	4666      	mov	r6, ip
 8013d62:	6838      	ldr	r0, [r7, #0]
 8013d64:	3708      	adds	r7, #8
 8013d66:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8013d6a:	46e6      	mov	lr, ip
 8013d6c:	4547      	cmp	r7, r8
 8013d6e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8013d72:	46f4      	mov	ip, lr
 8013d74:	d1f5      	bne.n	8013d62 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8013d76:	6838      	ldr	r0, [r7, #0]
 8013d78:	f8ce 0000 	str.w	r0, [lr]
 8013d7c:	88b9      	ldrh	r1, [r7, #4]
 8013d7e:	f8ae 1004 	strh.w	r1, [lr, #4]
 8013d82:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8013d86:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8013d8a:	d009      	beq.n	8013da0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8013d8c:	7b51      	ldrb	r1, [r2, #13]
 8013d8e:	7992      	ldrb	r2, [r2, #6]
 8013d90:	0149      	lsls	r1, r1, #5
 8013d92:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8013d96:	4311      	orrs	r1, r2
 8013d98:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8013d9c:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8013da0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8013da4:	b2ad      	uxth	r5, r5
 8013da6:	d00d      	beq.n	8013dc4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8013da8:	442b      	add	r3, r5
 8013daa:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8013dae:	b29b      	uxth	r3, r3
 8013db0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8013db4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8013db8:	10db      	asrs	r3, r3, #3
 8013dba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013dbe:	4313      	orrs	r3, r2
 8013dc0:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8013dc4:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8013dc8:	00cb      	lsls	r3, r1, #3
 8013dca:	064f      	lsls	r7, r1, #25
 8013dcc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8013dd0:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8013dd4:	ea43 0302 	orr.w	r3, r3, r2
 8013dd8:	bf44      	itt	mi
 8013dda:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8013dde:	b21b      	sxthmi	r3, r3
 8013de0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8013de4:	1b5b      	subs	r3, r3, r5
 8013de6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8013dea:	4632      	mov	r2, r6
 8013dec:	e6f9      	b.n	8013be2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8013dee:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8013df2:	4617      	mov	r7, r2
 8013df4:	f102 0908 	add.w	r9, r2, #8
 8013df8:	4666      	mov	r6, ip
 8013dfa:	6838      	ldr	r0, [r7, #0]
 8013dfc:	3708      	adds	r7, #8
 8013dfe:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8013e02:	46e0      	mov	r8, ip
 8013e04:	454f      	cmp	r7, r9
 8013e06:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8013e0a:	46c4      	mov	ip, r8
 8013e0c:	d1f5      	bne.n	8013dfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8013e0e:	6838      	ldr	r0, [r7, #0]
 8013e10:	f8c8 0000 	str.w	r0, [r8]
 8013e14:	88b9      	ldrh	r1, [r7, #4]
 8013e16:	f8a8 1004 	strh.w	r1, [r8, #4]
 8013e1a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8013e1e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8013e22:	d009      	beq.n	8013e38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8013e24:	7b51      	ldrb	r1, [r2, #13]
 8013e26:	7992      	ldrb	r2, [r2, #6]
 8013e28:	0149      	lsls	r1, r1, #5
 8013e2a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8013e2e:	4311      	orrs	r1, r2
 8013e30:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8013e34:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8013e38:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8013e3c:	d00e      	beq.n	8013e5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8013e3e:	eba3 030e 	sub.w	r3, r3, lr
 8013e42:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8013e46:	b29b      	uxth	r3, r3
 8013e48:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8013e4c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8013e50:	10db      	asrs	r3, r3, #3
 8013e52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013e56:	4313      	orrs	r3, r2
 8013e58:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8013e5c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8013e60:	00cb      	lsls	r3, r1, #3
 8013e62:	0648      	lsls	r0, r1, #25
 8013e64:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8013e68:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8013e6c:	ea43 0302 	orr.w	r3, r3, r2
 8013e70:	bf44      	itt	mi
 8013e72:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8013e76:	b21b      	sxthmi	r3, r3
 8013e78:	1b5d      	subs	r5, r3, r5
 8013e7a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8013e7e:	e7b4      	b.n	8013dea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08013e80 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8013e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e84:	461e      	mov	r6, r3
 8013e86:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8013e88:	4604      	mov	r4, r0
 8013e8a:	4617      	mov	r7, r2
 8013e8c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8013e90:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8013e94:	f7ee fe2a 	bl	8002aec <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8013e98:	4605      	mov	r5, r0
 8013e9a:	b918      	cbnz	r0, 8013ea4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8013e9c:	6030      	str	r0, [r6, #0]
 8013e9e:	4628      	mov	r0, r5
 8013ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ea4:	683b      	ldr	r3, [r7, #0]
 8013ea6:	4601      	mov	r1, r0
 8013ea8:	4638      	mov	r0, r7
 8013eaa:	68db      	ldr	r3, [r3, #12]
 8013eac:	4798      	blx	r3
 8013eae:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8013eb2:	4602      	mov	r2, r0
 8013eb4:	6030      	str	r0, [r6, #0]
 8013eb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013eba:	d213      	bcs.n	8013ee4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8013ebc:	4643      	mov	r3, r8
 8013ebe:	4639      	mov	r1, r7
 8013ec0:	4620      	mov	r0, r4
 8013ec2:	f7ff fe39 	bl	8013b38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8013ec6:	6030      	str	r0, [r6, #0]
 8013ec8:	6833      	ldr	r3, [r6, #0]
 8013eca:	b143      	cbz	r3, 8013ede <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8013ecc:	7b5a      	ldrb	r2, [r3, #13]
 8013ece:	7a9b      	ldrb	r3, [r3, #10]
 8013ed0:	0052      	lsls	r2, r2, #1
 8013ed2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8013ed6:	4313      	orrs	r3, r2
 8013ed8:	bf0c      	ite	eq
 8013eda:	2301      	moveq	r3, #1
 8013edc:	2300      	movne	r3, #0
 8013ede:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8013ee2:	e7dc      	b.n	8013e9e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8013ee4:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8013ee8:	b29b      	uxth	r3, r3
 8013eea:	2b7f      	cmp	r3, #127	; 0x7f
 8013eec:	d804      	bhi.n	8013ef8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8013eee:	4639      	mov	r1, r7
 8013ef0:	4620      	mov	r0, r4
 8013ef2:	f7ff fd15 	bl	8013920 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8013ef6:	e7e6      	b.n	8013ec6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8013ef8:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d0e3      	beq.n	8013ec8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8013f00:	f640 1302 	movw	r3, #2306	; 0x902
 8013f04:	429d      	cmp	r5, r3
 8013f06:	d1df      	bne.n	8013ec8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8013f08:	4601      	mov	r1, r0
 8013f0a:	4620      	mov	r0, r4
 8013f0c:	f7ff fcd8 	bl	80138c0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8013f10:	e7d9      	b.n	8013ec6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08013f12 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8013f12:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f16:	461e      	mov	r6, r3
 8013f18:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8013f1a:	4604      	mov	r4, r0
 8013f1c:	4617      	mov	r7, r2
 8013f1e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8013f22:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8013f26:	f7ee fde1 	bl	8002aec <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8013f2a:	4605      	mov	r5, r0
 8013f2c:	b918      	cbnz	r0, 8013f36 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 8013f2e:	6030      	str	r0, [r6, #0]
 8013f30:	4628      	mov	r0, r5
 8013f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f36:	683b      	ldr	r3, [r7, #0]
 8013f38:	4601      	mov	r1, r0
 8013f3a:	4638      	mov	r0, r7
 8013f3c:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8013f40:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013f44:	47c8      	blx	r9
 8013f46:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8013f4a:	4602      	mov	r2, r0
 8013f4c:	6030      	str	r0, [r6, #0]
 8013f4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013f52:	d213      	bcs.n	8013f7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8013f54:	4643      	mov	r3, r8
 8013f56:	4639      	mov	r1, r7
 8013f58:	4620      	mov	r0, r4
 8013f5a:	f7ff fded 	bl	8013b38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8013f5e:	6030      	str	r0, [r6, #0]
 8013f60:	6833      	ldr	r3, [r6, #0]
 8013f62:	b143      	cbz	r3, 8013f76 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 8013f64:	7b5a      	ldrb	r2, [r3, #13]
 8013f66:	7a9b      	ldrb	r3, [r3, #10]
 8013f68:	0052      	lsls	r2, r2, #1
 8013f6a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8013f6e:	4313      	orrs	r3, r2
 8013f70:	bf0c      	ite	eq
 8013f72:	2301      	moveq	r3, #1
 8013f74:	2300      	movne	r3, #0
 8013f76:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8013f7a:	e7d9      	b.n	8013f30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 8013f7c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8013f80:	b29b      	uxth	r3, r3
 8013f82:	2b7f      	cmp	r3, #127	; 0x7f
 8013f84:	d804      	bhi.n	8013f90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 8013f86:	4639      	mov	r1, r7
 8013f88:	4620      	mov	r0, r4
 8013f8a:	f7ff fcc9 	bl	8013920 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8013f8e:	e7e6      	b.n	8013f5e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8013f90:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d0e3      	beq.n	8013f60 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8013f98:	f640 1302 	movw	r3, #2306	; 0x902
 8013f9c:	429d      	cmp	r5, r3
 8013f9e:	d1df      	bne.n	8013f60 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8013fa0:	4601      	mov	r1, r0
 8013fa2:	4620      	mov	r0, r4
 8013fa4:	f7ff fc8c 	bl	80138c0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8013fa8:	e7d9      	b.n	8013f5e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

08013faa <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8013faa:	b510      	push	{r4, lr}
 8013fac:	4604      	mov	r4, r0
 8013fae:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8013fb2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8013fb4:	b1e1      	cbz	r1, 8013ff0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8013fb6:	2b0a      	cmp	r3, #10
 8013fb8:	d02d      	beq.n	8014016 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8013fba:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8013fbc:	3901      	subs	r1, #1
 8013fbe:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8013fc2:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8013fc4:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8013fc8:	1c51      	adds	r1, r2, #1
 8013fca:	b289      	uxth	r1, r1
 8013fcc:	2901      	cmp	r1, #1
 8013fce:	bf8a      	itet	hi
 8013fd0:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8013fd4:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8013fd6:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8013fd8:	1c5a      	adds	r2, r3, #1
 8013fda:	8722      	strh	r2, [r4, #56]	; 0x38
 8013fdc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8013fde:	4413      	add	r3, r2
 8013fe0:	b29b      	uxth	r3, r3
 8013fe2:	2b09      	cmp	r3, #9
 8013fe4:	bf88      	it	hi
 8013fe6:	3b0a      	subhi	r3, #10
 8013fe8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8013fec:	8458      	strh	r0, [r3, #34]	; 0x22
 8013fee:	e7de      	b.n	8013fae <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8013ff0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8013ff2:	2b0a      	cmp	r3, #10
 8013ff4:	d00f      	beq.n	8014016 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8013ff6:	4620      	mov	r0, r4
 8013ff8:	f7ff fc21 	bl	801383e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8013ffc:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8013ffe:	1c5a      	adds	r2, r3, #1
 8014000:	8722      	strh	r2, [r4, #56]	; 0x38
 8014002:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8014004:	4413      	add	r3, r2
 8014006:	b29b      	uxth	r3, r3
 8014008:	2b09      	cmp	r3, #9
 801400a:	bf88      	it	hi
 801400c:	3b0a      	subhi	r3, #10
 801400e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8014012:	8458      	strh	r0, [r3, #34]	; 0x22
 8014014:	e7ec      	b.n	8013ff0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8014016:	bd10      	pop	{r4, pc}

08014018 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8014018:	b538      	push	{r3, r4, r5, lr}
 801401a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801401c:	4604      	mov	r4, r0
 801401e:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8014022:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8014024:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8014026:	3a01      	subs	r2, #1
 8014028:	8702      	strh	r2, [r0, #56]	; 0x38
 801402a:	1c5a      	adds	r2, r3, #1
 801402c:	b292      	uxth	r2, r2
 801402e:	2a09      	cmp	r2, #9
 8014030:	bf8a      	itet	hi
 8014032:	3b09      	subhi	r3, #9
 8014034:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8014036:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8014038:	f7ff ffb7 	bl	8013faa <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801403c:	8c23      	ldrh	r3, [r4, #32]
 801403e:	2b01      	cmp	r3, #1
 8014040:	bf9c      	itt	ls
 8014042:	3301      	addls	r3, #1
 8014044:	8423      	strhls	r3, [r4, #32]
 8014046:	8be3      	ldrh	r3, [r4, #30]
 8014048:	b90b      	cbnz	r3, 801404e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801404a:	2302      	movs	r3, #2
 801404c:	83e3      	strh	r3, [r4, #30]
 801404e:	8be3      	ldrh	r3, [r4, #30]
 8014050:	4628      	mov	r0, r5
 8014052:	3b01      	subs	r3, #1
 8014054:	b29b      	uxth	r3, r3
 8014056:	83e3      	strh	r3, [r4, #30]
 8014058:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801405c:	8365      	strh	r5, [r4, #26]
 801405e:	bd38      	pop	{r3, r4, r5, pc}

08014060 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8014060:	428a      	cmp	r2, r1
 8014062:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014066:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8014068:	d932      	bls.n	80140d0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801406a:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801406c:	1a54      	subs	r4, r2, r1
 801406e:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 8014072:	19ee      	adds	r6, r5, r7
 8014074:	fa1f fe84 	uxth.w	lr, r4
 8014078:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801407c:	3e01      	subs	r6, #1
 801407e:	b2b4      	uxth	r4, r6
 8014080:	eba4 090e 	sub.w	r9, r4, lr
 8014084:	fa1f f989 	uxth.w	r9, r9
 8014088:	2c09      	cmp	r4, #9
 801408a:	4626      	mov	r6, r4
 801408c:	bf88      	it	hi
 801408e:	f1a4 060a 	subhi.w	r6, r4, #10
 8014092:	f1bc 0f00 	cmp.w	ip, #0
 8014096:	f104 34ff 	add.w	r4, r4, #4294967295
 801409a:	bf08      	it	eq
 801409c:	f04f 0c02 	moveq.w	ip, #2
 80140a0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80140a4:	b2a4      	uxth	r4, r4
 80140a6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80140aa:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 80140ae:	454c      	cmp	r4, r9
 80140b0:	fa1f fc8c 	uxth.w	ip, ip
 80140b4:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 80140b8:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 80140bc:	d1e4      	bne.n	8014088 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 80140be:	eba5 050e 	sub.w	r5, r5, lr
 80140c2:	eb0e 0408 	add.w	r4, lr, r8
 80140c6:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 80140ca:	8705      	strh	r5, [r0, #56]	; 0x38
 80140cc:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 80140d0:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 80140d2:	250a      	movs	r5, #10
 80140d4:	1a64      	subs	r4, r4, r1
 80140d6:	4439      	add	r1, r7
 80140d8:	b289      	uxth	r1, r1
 80140da:	8704      	strh	r4, [r0, #56]	; 0x38
 80140dc:	2909      	cmp	r1, #9
 80140de:	bf88      	it	hi
 80140e0:	390a      	subhi	r1, #10
 80140e2:	86c1      	strh	r1, [r0, #54]	; 0x36
 80140e4:	b18a      	cbz	r2, 801410a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 80140e6:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 80140e8:	3a01      	subs	r2, #1
 80140ea:	3101      	adds	r1, #1
 80140ec:	b292      	uxth	r2, r2
 80140ee:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 80140f2:	8701      	strh	r1, [r0, #56]	; 0x38
 80140f4:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 80140f6:	b901      	cbnz	r1, 80140fa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 80140f8:	86c5      	strh	r5, [r0, #54]	; 0x36
 80140fa:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 80140fc:	3901      	subs	r1, #1
 80140fe:	b289      	uxth	r1, r1
 8014100:	86c1      	strh	r1, [r0, #54]	; 0x36
 8014102:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8014106:	844c      	strh	r4, [r1, #34]	; 0x22
 8014108:	e7ec      	b.n	80140e4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801410a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801410e:	f7ff bf4c 	b.w	8013faa <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08014112 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8014112:	b570      	push	{r4, r5, r6, lr}
 8014114:	2500      	movs	r5, #0
 8014116:	4295      	cmp	r5, r2
 8014118:	d011      	beq.n	801413e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801411a:	8bc4      	ldrh	r4, [r0, #30]
 801411c:	f831 6b02 	ldrh.w	r6, [r1], #2
 8014120:	4414      	add	r4, r2
 8014122:	3c01      	subs	r4, #1
 8014124:	1b64      	subs	r4, r4, r5
 8014126:	b2a4      	uxth	r4, r4
 8014128:	2c01      	cmp	r4, #1
 801412a:	bf88      	it	hi
 801412c:	3c02      	subhi	r4, #2
 801412e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8014132:	8b64      	ldrh	r4, [r4, #26]
 8014134:	42b4      	cmp	r4, r6
 8014136:	d117      	bne.n	8014168 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8014138:	3501      	adds	r5, #1
 801413a:	b2ad      	uxth	r5, r5
 801413c:	e7eb      	b.n	8014116 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801413e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8014142:	2400      	movs	r4, #0
 8014144:	4413      	add	r3, r2
 8014146:	b2a2      	uxth	r2, r4
 8014148:	429a      	cmp	r2, r3
 801414a:	da0f      	bge.n	801416c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801414c:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801414e:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8014152:	3401      	adds	r4, #1
 8014154:	4432      	add	r2, r6
 8014156:	b292      	uxth	r2, r2
 8014158:	2a09      	cmp	r2, #9
 801415a:	bf88      	it	hi
 801415c:	3a0a      	subhi	r2, #10
 801415e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8014162:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8014164:	42aa      	cmp	r2, r5
 8014166:	d0ee      	beq.n	8014146 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8014168:	2000      	movs	r0, #0
 801416a:	bd70      	pop	{r4, r5, r6, pc}
 801416c:	2001      	movs	r0, #1
 801416e:	e7fc      	b.n	801416a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08014170 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8014170:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014174:	4605      	mov	r5, r0
 8014176:	4616      	mov	r6, r2
 8014178:	1c8c      	adds	r4, r1, #2
 801417a:	8809      	ldrh	r1, [r1, #0]
 801417c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8014180:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8014184:	42b3      	cmp	r3, r6
 8014186:	d124      	bne.n	80141d2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8014188:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801418c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8014190:	f001 070f 	and.w	r7, r1, #15
 8014194:	4652      	mov	r2, sl
 8014196:	f8cd 8000 	str.w	r8, [sp]
 801419a:	464b      	mov	r3, r9
 801419c:	4621      	mov	r1, r4
 801419e:	4628      	mov	r0, r5
 80141a0:	f7ff ffb7 	bl	8014112 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80141a4:	4683      	mov	fp, r0
 80141a6:	b168      	cbz	r0, 80141c4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80141a8:	eb0a 0109 	add.w	r1, sl, r9
 80141ac:	463a      	mov	r2, r7
 80141ae:	4628      	mov	r0, r5
 80141b0:	4441      	add	r1, r8
 80141b2:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 80141b6:	4649      	mov	r1, r9
 80141b8:	f7ff ff52 	bl	8014060 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 80141bc:	4658      	mov	r0, fp
 80141be:	b003      	add	sp, #12
 80141c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141c4:	eb07 010a 	add.w	r1, r7, sl
 80141c8:	4449      	add	r1, r9
 80141ca:	4441      	add	r1, r8
 80141cc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80141d0:	e7d2      	b.n	8014178 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80141d2:	f04f 0b00 	mov.w	fp, #0
 80141d6:	e7f1      	b.n	80141bc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080141d8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 80141d8:	b570      	push	{r4, r5, r6, lr}
 80141da:	8810      	ldrh	r0, [r2, #0]
 80141dc:	4298      	cmp	r0, r3
 80141de:	d817      	bhi.n	8014210 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80141e0:	1e48      	subs	r0, r1, #1
 80141e2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80141e6:	4298      	cmp	r0, r3
 80141e8:	d312      	bcc.n	8014210 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80141ea:	2400      	movs	r4, #0
 80141ec:	428c      	cmp	r4, r1
 80141ee:	d20f      	bcs.n	8014210 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80141f0:	1860      	adds	r0, r4, r1
 80141f2:	1040      	asrs	r0, r0, #1
 80141f4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80141f8:	0085      	lsls	r5, r0, #2
 80141fa:	42b3      	cmp	r3, r6
 80141fc:	d902      	bls.n	8014204 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80141fe:	3001      	adds	r0, #1
 8014200:	b284      	uxth	r4, r0
 8014202:	e7f3      	b.n	80141ec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8014204:	d201      	bcs.n	801420a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8014206:	b281      	uxth	r1, r0
 8014208:	e7f0      	b.n	80141ec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801420a:	442a      	add	r2, r5
 801420c:	8850      	ldrh	r0, [r2, #2]
 801420e:	bd70      	pop	{r4, r5, r6, pc}
 8014210:	2000      	movs	r0, #0
 8014212:	e7fc      	b.n	801420e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08014214 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8014214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014218:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801421a:	4604      	mov	r4, r0
 801421c:	260b      	movs	r6, #11
 801421e:	886f      	ldrh	r7, [r5, #2]
 8014220:	087f      	lsrs	r7, r7, #1
 8014222:	3e01      	subs	r6, #1
 8014224:	d013      	beq.n	801424e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8014226:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8014228:	462a      	mov	r2, r5
 801422a:	4639      	mov	r1, r7
 801422c:	4620      	mov	r0, r4
 801422e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8014232:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8014236:	4643      	mov	r3, r8
 8014238:	f7ff ffce 	bl	80141d8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801423c:	b138      	cbz	r0, 801424e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801423e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8014242:	4642      	mov	r2, r8
 8014244:	4620      	mov	r0, r4
 8014246:	f7ff ff93 	bl	8014170 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801424a:	2800      	cmp	r0, #0
 801424c:	d1e9      	bne.n	8014222 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801424e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08014254 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8014254:	b570      	push	{r4, r5, r6, lr}
 8014256:	694a      	ldr	r2, [r1, #20]
 8014258:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801425a:	684b      	ldr	r3, [r1, #4]
 801425c:	1b54      	subs	r4, r2, r5
 801425e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8014260:	f000 8106 	beq.w	8014470 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8014264:	1b9b      	subs	r3, r3, r6
 8014266:	d003      	beq.n	8014270 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8014268:	4363      	muls	r3, r4
 801426a:	2210      	movs	r2, #16
 801426c:	fb93 f3f2 	sdiv	r3, r3, r2
 8014270:	680c      	ldr	r4, [r1, #0]
 8014272:	698a      	ldr	r2, [r1, #24]
 8014274:	1b65      	subs	r5, r4, r5
 8014276:	f000 80fd 	beq.w	8014474 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801427a:	1b92      	subs	r2, r2, r6
 801427c:	d003      	beq.n	8014286 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801427e:	436a      	muls	r2, r5
 8014280:	2410      	movs	r4, #16
 8014282:	fb92 f2f4 	sdiv	r2, r2, r4
 8014286:	1a9b      	subs	r3, r3, r2
 8014288:	ed9f 4a89 	vldr	s8, [pc, #548]	; 80144b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801428c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014290:	460a      	mov	r2, r1
 8014292:	ee07 3a90 	vmov	s15, r3
 8014296:	f100 040c 	add.w	r4, r0, #12
 801429a:	4603      	mov	r3, r0
 801429c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80142a0:	ee67 7a84 	vmul.f32	s15, s15, s8
 80142a4:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80142a8:	eeb1 6a43 	vneg.f32	s12, s6
 80142ac:	edd2 7a02 	vldr	s15, [r2, #8]
 80142b0:	3214      	adds	r2, #20
 80142b2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80142b6:	ece3 6a01 	vstmia	r3!, {s13}
 80142ba:	429c      	cmp	r4, r3
 80142bc:	ed52 7a02 	vldr	s15, [r2, #-8]
 80142c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80142c4:	edc3 7a02 	vstr	s15, [r3, #8]
 80142c8:	ed52 7a01 	vldr	s15, [r2, #-4]
 80142cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80142d0:	edc3 7a05 	vstr	s15, [r3, #20]
 80142d4:	d1ea      	bne.n	80142ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 80142d6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80142d8:	698b      	ldr	r3, [r1, #24]
 80142da:	edd0 4a02 	vldr	s9, [r0, #8]
 80142de:	1a9b      	subs	r3, r3, r2
 80142e0:	edd0 3a00 	vldr	s7, [r0]
 80142e4:	edd0 6a01 	vldr	s13, [r0, #4]
 80142e8:	ee07 3a90 	vmov	s15, r3
 80142ec:	684b      	ldr	r3, [r1, #4]
 80142ee:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80142f2:	ed90 5a05 	vldr	s10, [r0, #20]
 80142f6:	1a9b      	subs	r3, r3, r2
 80142f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80142fc:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8014300:	ed90 2a03 	vldr	s4, [r0, #12]
 8014304:	ee07 3a10 	vmov	s14, r3
 8014308:	edd0 5a04 	vldr	s11, [r0, #16]
 801430c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8014310:	ed90 1a07 	vldr	s2, [r0, #28]
 8014314:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014318:	edd0 2a06 	vldr	s5, [r0, #24]
 801431c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8014320:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8014324:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014328:	ee32 5a45 	vsub.f32	s10, s4, s10
 801432c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014330:	ee67 7a83 	vmul.f32	s15, s15, s6
 8014334:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8014338:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801433a:	694a      	ldr	r2, [r1, #20]
 801433c:	1b13      	subs	r3, r2, r4
 801433e:	ee07 3a10 	vmov	s14, r3
 8014342:	680b      	ldr	r3, [r1, #0]
 8014344:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014348:	1b1b      	subs	r3, r3, r4
 801434a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801434e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8014352:	ee07 3a10 	vmov	s14, r3
 8014356:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801435a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801435e:	eee6 4a87 	vfma.f32	s9, s13, s14
 8014362:	ee64 4a86 	vmul.f32	s9, s9, s12
 8014366:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801436a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801436c:	698b      	ldr	r3, [r1, #24]
 801436e:	1a9b      	subs	r3, r3, r2
 8014370:	ee06 3a90 	vmov	s13, r3
 8014374:	684b      	ldr	r3, [r1, #4]
 8014376:	1a9b      	subs	r3, r3, r2
 8014378:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801437c:	ee07 3a10 	vmov	s14, r3
 8014380:	ee66 6a84 	vmul.f32	s13, s13, s8
 8014384:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014388:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801438c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014390:	eee5 6a87 	vfma.f32	s13, s11, s14
 8014394:	ee66 6a83 	vmul.f32	s13, s13, s6
 8014398:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801439c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801439e:	694a      	ldr	r2, [r1, #20]
 80143a0:	1b13      	subs	r3, r2, r4
 80143a2:	ee07 3a10 	vmov	s14, r3
 80143a6:	680b      	ldr	r3, [r1, #0]
 80143a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80143ac:	1b1b      	subs	r3, r3, r4
 80143ae:	ee27 7a04 	vmul.f32	s14, s14, s8
 80143b2:	ee25 5a47 	vnmul.f32	s10, s10, s14
 80143b6:	ee07 3a10 	vmov	s14, r3
 80143ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80143be:	ee27 7a04 	vmul.f32	s14, s14, s8
 80143c2:	eea5 5a87 	vfma.f32	s10, s11, s14
 80143c6:	edd0 5a08 	vldr	s11, [r0, #32]
 80143ca:	ee31 1a65 	vsub.f32	s2, s2, s11
 80143ce:	ee72 5ae5 	vsub.f32	s11, s5, s11
 80143d2:	ee25 5a06 	vmul.f32	s10, s10, s12
 80143d6:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 80143da:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80143dc:	698b      	ldr	r3, [r1, #24]
 80143de:	1a9b      	subs	r3, r3, r2
 80143e0:	ee07 3a10 	vmov	s14, r3
 80143e4:	684b      	ldr	r3, [r1, #4]
 80143e6:	1a9b      	subs	r3, r3, r2
 80143e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80143ec:	ee01 3a90 	vmov	s3, r3
 80143f0:	ee27 7a04 	vmul.f32	s14, s14, s8
 80143f4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80143f8:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80143fc:	ee61 1a84 	vmul.f32	s3, s3, s8
 8014400:	eea1 7a21 	vfma.f32	s14, s2, s3
 8014404:	ee27 7a03 	vmul.f32	s14, s14, s6
 8014408:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801440c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801440e:	694a      	ldr	r2, [r1, #20]
 8014410:	1b13      	subs	r3, r2, r4
 8014412:	ee03 3a10 	vmov	s6, r3
 8014416:	680b      	ldr	r3, [r1, #0]
 8014418:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801441c:	1b1b      	subs	r3, r3, r4
 801441e:	ee23 3a04 	vmul.f32	s6, s6, s8
 8014422:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8014426:	ee03 3a10 	vmov	s6, r3
 801442a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801442e:	ee23 4a04 	vmul.f32	s8, s6, s8
 8014432:	eee1 5a04 	vfma.f32	s11, s2, s8
 8014436:	ee25 6a86 	vmul.f32	s12, s11, s12
 801443a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801443e:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8014442:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8014446:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801444a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801444e:	dd13      	ble.n	8014478 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8014450:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014454:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8014458:	63c3      	str	r3, [r0, #60]	; 0x3c
 801445a:	eee3 7a87 	vfma.f32	s15, s7, s14
 801445e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014466:	dd15      	ble.n	8014494 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8014468:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801446c:	6403      	str	r3, [r0, #64]	; 0x40
 801446e:	bd70      	pop	{r4, r5, r6, pc}
 8014470:	4623      	mov	r3, r4
 8014472:	e6fd      	b.n	8014270 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8014474:	462a      	mov	r2, r5
 8014476:	e706      	b.n	8014286 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8014478:	d502      	bpl.n	8014480 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801447a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801447e:	e7e9      	b.n	8014454 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8014480:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8014484:	eea3 2a85 	vfma.f32	s4, s7, s10
 8014488:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801448c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014490:	dade      	bge.n	8014450 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8014492:	e7f2      	b.n	801447a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8014494:	d502      	bpl.n	801449c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8014496:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801449a:	e7e7      	b.n	801446c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801449c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 80144a0:	eee3 4a86 	vfma.f32	s9, s7, s12
 80144a4:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80144a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144ac:	dadc      	bge.n	8014468 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 80144ae:	e7f2      	b.n	8014496 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 80144b0:	3d800000 	.word	0x3d800000

080144b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 80144b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144b8:	2714      	movs	r7, #20
 80144ba:	435f      	muls	r7, r3
 80144bc:	eb02 0c07 	add.w	ip, r2, r7
 80144c0:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80144c4:	f115 0e0f 	adds.w	lr, r5, #15
 80144c8:	f100 80a2 	bmi.w	8014610 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 80144cc:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 80144d0:	9c08      	ldr	r4, [sp, #32]
 80144d2:	2614      	movs	r6, #20
 80144d4:	f8c0 e014 	str.w	lr, [r0, #20]
 80144d8:	4366      	muls	r6, r4
 80144da:	eb02 0806 	add.w	r8, r2, r6
 80144de:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80144e2:	f115 040f 	adds.w	r4, r5, #15
 80144e6:	f100 809f 	bmi.w	8014628 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 80144ea:	1124      	asrs	r4, r4, #4
 80144ec:	eba4 040e 	sub.w	r4, r4, lr
 80144f0:	6184      	str	r4, [r0, #24]
 80144f2:	2c00      	cmp	r4, #0
 80144f4:	f000 808a 	beq.w	801460c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 80144f8:	f8dc 9004 	ldr.w	r9, [ip, #4]
 80144fc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8014500:	5995      	ldr	r5, [r2, r6]
 8014502:	eba4 0809 	sub.w	r8, r4, r9
 8014506:	59d4      	ldr	r4, [r2, r7]
 8014508:	eba5 0a04 	sub.w	sl, r5, r4
 801450c:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8014510:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8014514:	fb0e fe05 	mul.w	lr, lr, r5
 8014518:	fb0a ee19 	mls	lr, sl, r9, lr
 801451c:	fb08 e404 	mla	r4, r8, r4, lr
 8014520:	3c01      	subs	r4, #1
 8014522:	19a4      	adds	r4, r4, r6
 8014524:	f100 808c 	bmi.w	8014640 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8014528:	fb94 fef6 	sdiv	lr, r4, r6
 801452c:	fb06 441e 	mls	r4, r6, lr, r4
 8014530:	f8c0 e000 	str.w	lr, [r0]
 8014534:	6104      	str	r4, [r0, #16]
 8014536:	2d00      	cmp	r5, #0
 8014538:	f2c0 8095 	blt.w	8014666 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801453c:	fb95 f4f6 	sdiv	r4, r5, r6
 8014540:	fb06 5514 	mls	r5, r6, r4, r5
 8014544:	6044      	str	r4, [r0, #4]
 8014546:	6085      	str	r5, [r0, #8]
 8014548:	60c6      	str	r6, [r0, #12]
 801454a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801454e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8014552:	6945      	ldr	r5, [r0, #20]
 8014554:	59d2      	ldr	r2, [r2, r7]
 8014556:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801455a:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8014688 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801455e:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8014562:	ee07 4a10 	vmov	s14, r4
 8014566:	6804      	ldr	r4, [r0, #0]
 8014568:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801456c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014570:	ee07 2a90 	vmov	s15, r2
 8014574:	ee27 7a26 	vmul.f32	s14, s14, s13
 8014578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801457c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014580:	edd3 6a00 	vldr	s13, [r3]
 8014584:	eee6 6a07 	vfma.f32	s13, s12, s14
 8014588:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801458c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8014590:	edc0 6a07 	vstr	s13, [r0, #28]
 8014594:	edd0 6a01 	vldr	s13, [r0, #4]
 8014598:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801459c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80145a0:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 80145a4:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80145a8:	ed80 6a08 	vstr	s12, [r0, #32]
 80145ac:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80145ae:	6242      	str	r2, [r0, #36]	; 0x24
 80145b0:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 80145b4:	ed93 6a03 	vldr	s12, [r3, #12]
 80145b8:	eea5 6a87 	vfma.f32	s12, s11, s14
 80145bc:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 80145c0:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80145c4:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 80145c8:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 80145cc:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 80145d0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80145d4:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 80145d8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80145da:	6302      	str	r2, [r0, #48]	; 0x30
 80145dc:	ed93 6a06 	vldr	s12, [r3, #24]
 80145e0:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 80145e4:	eea5 6a87 	vfma.f32	s12, s11, s14
 80145e8:	eeb0 7a46 	vmov.f32	s14, s12
 80145ec:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 80145f0:	eea6 7a27 	vfma.f32	s14, s12, s15
 80145f4:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 80145f8:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 80145fc:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8014600:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014604:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 8014608:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801460a:	63c3      	str	r3, [r0, #60]	; 0x3c
 801460c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014610:	2410      	movs	r4, #16
 8014612:	f1c5 0501 	rsb	r5, r5, #1
 8014616:	fb9e fef4 	sdiv	lr, lr, r4
 801461a:	f015 050f 	ands.w	r5, r5, #15
 801461e:	bf18      	it	ne
 8014620:	2501      	movne	r5, #1
 8014622:	ebae 0e05 	sub.w	lr, lr, r5
 8014626:	e753      	b.n	80144d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8014628:	f04f 0910 	mov.w	r9, #16
 801462c:	f1c5 0501 	rsb	r5, r5, #1
 8014630:	fb94 f4f9 	sdiv	r4, r4, r9
 8014634:	f015 050f 	ands.w	r5, r5, #15
 8014638:	bf18      	it	ne
 801463a:	2501      	movne	r5, #1
 801463c:	1b64      	subs	r4, r4, r5
 801463e:	e755      	b.n	80144ec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8014640:	4264      	negs	r4, r4
 8014642:	fb94 fef6 	sdiv	lr, r4, r6
 8014646:	f1ce 0800 	rsb	r8, lr, #0
 801464a:	fb06 441e 	mls	r4, r6, lr, r4
 801464e:	f8c0 8000 	str.w	r8, [r0]
 8014652:	6104      	str	r4, [r0, #16]
 8014654:	2c00      	cmp	r4, #0
 8014656:	f43f af6e 	beq.w	8014536 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801465a:	ea6f 0e0e 	mvn.w	lr, lr
 801465e:	1b34      	subs	r4, r6, r4
 8014660:	f8c0 e000 	str.w	lr, [r0]
 8014664:	e766      	b.n	8014534 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8014666:	426d      	negs	r5, r5
 8014668:	fb95 f4f6 	sdiv	r4, r5, r6
 801466c:	f1c4 0e00 	rsb	lr, r4, #0
 8014670:	fb06 5514 	mls	r5, r6, r4, r5
 8014674:	f8c0 e004 	str.w	lr, [r0, #4]
 8014678:	6085      	str	r5, [r0, #8]
 801467a:	2d00      	cmp	r5, #0
 801467c:	f43f af64 	beq.w	8014548 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8014680:	43e4      	mvns	r4, r4
 8014682:	1b75      	subs	r5, r6, r5
 8014684:	6044      	str	r4, [r0, #4]
 8014686:	e75e      	b.n	8014546 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8014688:	3d800000 	.word	0x3d800000

0801468c <_ZN8touchgfx7Unicode6strlenEPKt>:
 801468c:	4602      	mov	r2, r0
 801468e:	b148      	cbz	r0, 80146a4 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8014690:	2300      	movs	r3, #0
 8014692:	b298      	uxth	r0, r3
 8014694:	3301      	adds	r3, #1
 8014696:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801469a:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801469e:	2900      	cmp	r1, #0
 80146a0:	d1f7      	bne.n	8014692 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 80146a2:	4770      	bx	lr
 80146a4:	4770      	bx	lr

080146a6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 80146a6:	b530      	push	{r4, r5, lr}
 80146a8:	4604      	mov	r4, r0
 80146aa:	b159      	cbz	r1, 80146c4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 80146ac:	b148      	cbz	r0, 80146c2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 80146ae:	2300      	movs	r3, #0
 80146b0:	b298      	uxth	r0, r3
 80146b2:	4282      	cmp	r2, r0
 80146b4:	d905      	bls.n	80146c2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 80146b6:	5ccd      	ldrb	r5, [r1, r3]
 80146b8:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 80146bc:	3301      	adds	r3, #1
 80146be:	2d00      	cmp	r5, #0
 80146c0:	d1f6      	bne.n	80146b0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 80146c2:	bd30      	pop	{r4, r5, pc}
 80146c4:	4608      	mov	r0, r1
 80146c6:	e7fc      	b.n	80146c2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

080146c8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 80146c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80146ca:	468c      	mov	ip, r1
 80146cc:	b08b      	sub	sp, #44	; 0x2c
 80146ce:	2100      	movs	r1, #0
 80146d0:	ae01      	add	r6, sp, #4
 80146d2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80146d6:	211f      	movs	r1, #31
 80146d8:	fbb0 f7f3 	udiv	r7, r0, r3
 80146dc:	fb03 0517 	mls	r5, r3, r7, r0
 80146e0:	4638      	mov	r0, r7
 80146e2:	b2ec      	uxtb	r4, r5
 80146e4:	2d09      	cmp	r5, #9
 80146e6:	bfd4      	ite	le
 80146e8:	3430      	addle	r4, #48	; 0x30
 80146ea:	3457      	addgt	r4, #87	; 0x57
 80146ec:	b2e4      	uxtb	r4, r4
 80146ee:	558c      	strb	r4, [r1, r6]
 80146f0:	1e4c      	subs	r4, r1, #1
 80146f2:	b92f      	cbnz	r7, 8014700 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 80146f4:	4431      	add	r1, r6
 80146f6:	4660      	mov	r0, ip
 80146f8:	f7ff ffd5 	bl	80146a6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 80146fc:	b00b      	add	sp, #44	; 0x2c
 80146fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014700:	4621      	mov	r1, r4
 8014702:	e7e9      	b.n	80146d8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

08014704 <_ZN8touchgfx7Unicode4itoaElPtti>:
 8014704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014706:	4607      	mov	r7, r0
 8014708:	b08b      	sub	sp, #44	; 0x2c
 801470a:	4608      	mov	r0, r1
 801470c:	b341      	cbz	r1, 8014760 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801470e:	1e99      	subs	r1, r3, #2
 8014710:	2922      	cmp	r1, #34	; 0x22
 8014712:	d825      	bhi.n	8014760 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8014714:	2100      	movs	r1, #0
 8014716:	463c      	mov	r4, r7
 8014718:	261f      	movs	r6, #31
 801471a:	f10d 0c04 	add.w	ip, sp, #4
 801471e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8014722:	1e71      	subs	r1, r6, #1
 8014724:	fb94 fef3 	sdiv	lr, r4, r3
 8014728:	fb03 441e 	mls	r4, r3, lr, r4
 801472c:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8014730:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8014734:	b2ec      	uxtb	r4, r5
 8014736:	2d09      	cmp	r5, #9
 8014738:	bfd4      	ite	le
 801473a:	3430      	addle	r4, #48	; 0x30
 801473c:	3457      	addgt	r4, #87	; 0x57
 801473e:	b2e4      	uxtb	r4, r4
 8014740:	f80c 4006 	strb.w	r4, [ip, r6]
 8014744:	4674      	mov	r4, lr
 8014746:	b96c      	cbnz	r4, 8014764 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 8014748:	2f00      	cmp	r7, #0
 801474a:	da05      	bge.n	8014758 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801474c:	ab0a      	add	r3, sp, #40	; 0x28
 801474e:	4419      	add	r1, r3
 8014750:	232d      	movs	r3, #45	; 0x2d
 8014752:	f801 3c24 	strb.w	r3, [r1, #-36]
 8014756:	1eb1      	subs	r1, r6, #2
 8014758:	3101      	adds	r1, #1
 801475a:	4461      	add	r1, ip
 801475c:	f7ff ffa3 	bl	80146a6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8014760:	b00b      	add	sp, #44	; 0x2c
 8014762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014764:	460e      	mov	r6, r1
 8014766:	e7dc      	b.n	8014722 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

08014768 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 8014768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801476c:	b085      	sub	sp, #20
 801476e:	4691      	mov	r9, r2
 8014770:	6802      	ldr	r2, [r0, #0]
 8014772:	4688      	mov	r8, r1
 8014774:	461c      	mov	r4, r3
 8014776:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801477a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801477e:	4683      	mov	fp, r0
 8014780:	4610      	mov	r0, r2
 8014782:	9103      	str	r1, [sp, #12]
 8014784:	9302      	str	r3, [sp, #8]
 8014786:	9201      	str	r2, [sp, #4]
 8014788:	f7ff ff80 	bl	801468c <_ZN8touchgfx7Unicode6strlenEPKt>
 801478c:	f1b8 0f00 	cmp.w	r8, #0
 8014790:	bf0c      	ite	eq
 8014792:	4684      	moveq	ip, r0
 8014794:	f100 0c01 	addne.w	ip, r0, #1
 8014798:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801479c:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 80147a0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80147a2:	fa1f fc8c 	uxth.w	ip, ip
 80147a6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80147a8:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 80147ac:	9903      	ldr	r1, [sp, #12]
 80147ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80147b2:	d041      	beq.n	8014838 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 80147b4:	d834      	bhi.n	8014820 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 80147b6:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 80147ba:	d059      	beq.n	8014870 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 80147bc:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 80147c0:	d03a      	beq.n	8014838 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 80147c2:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 80147c6:	d034      	beq.n	8014832 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 80147c8:	2400      	movs	r4, #0
 80147ca:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 80147ce:	3a01      	subs	r2, #1
 80147d0:	b169      	cbz	r1, 80147ee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 80147d2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80147d4:	458c      	cmp	ip, r1
 80147d6:	da09      	bge.n	80147ec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 80147d8:	eba1 010c 	sub.w	r1, r1, ip
 80147dc:	b289      	uxth	r1, r1
 80147de:	b933      	cbnz	r3, 80147ee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 80147e0:	2e00      	cmp	r6, #0
 80147e2:	d051      	beq.n	8014888 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 80147e4:	2800      	cmp	r0, #0
 80147e6:	d04f      	beq.n	8014888 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 80147e8:	440c      	add	r4, r1
 80147ea:	b2a4      	uxth	r4, r4
 80147ec:	2100      	movs	r1, #0
 80147ee:	682b      	ldr	r3, [r5, #0]
 80147f0:	4293      	cmp	r3, r2
 80147f2:	da07      	bge.n	8014804 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 80147f4:	f1b8 0f00 	cmp.w	r8, #0
 80147f8:	d004      	beq.n	8014804 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 80147fa:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 80147fe:	682b      	ldr	r3, [r5, #0]
 8014800:	3301      	adds	r3, #1
 8014802:	602b      	str	r3, [r5, #0]
 8014804:	2730      	movs	r7, #48	; 0x30
 8014806:	2c00      	cmp	r4, #0
 8014808:	d04e      	beq.n	80148a8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801480a:	682e      	ldr	r6, [r5, #0]
 801480c:	3c01      	subs	r4, #1
 801480e:	42b2      	cmp	r2, r6
 8014810:	b2a4      	uxth	r4, r4
 8014812:	dd49      	ble.n	80148a8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8014814:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8014818:	682b      	ldr	r3, [r5, #0]
 801481a:	3301      	adds	r3, #1
 801481c:	602b      	str	r3, [r5, #0]
 801481e:	e7f2      	b.n	8014806 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 8014820:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 8014824:	d01d      	beq.n	8014862 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 8014826:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801482a:	d002      	beq.n	8014832 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801482c:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 8014830:	e7c9      	b.n	80147c6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 8014832:	4684      	mov	ip, r0
 8014834:	f04f 0800 	mov.w	r8, #0
 8014838:	2c00      	cmp	r4, #0
 801483a:	d0c6      	beq.n	80147ca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801483c:	b947      	cbnz	r7, 8014850 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801483e:	2801      	cmp	r0, #1
 8014840:	d106      	bne.n	8014850 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8014842:	8814      	ldrh	r4, [r2, #0]
 8014844:	2c30      	cmp	r4, #48	; 0x30
 8014846:	bf02      	ittt	eq
 8014848:	3202      	addeq	r2, #2
 801484a:	4638      	moveq	r0, r7
 801484c:	f8cb 2000 	streq.w	r2, [fp]
 8014850:	45bc      	cmp	ip, r7
 8014852:	da14      	bge.n	801487e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8014854:	b2bf      	uxth	r7, r7
 8014856:	eba7 040c 	sub.w	r4, r7, ip
 801485a:	46bc      	mov	ip, r7
 801485c:	b2a4      	uxth	r4, r4
 801485e:	2600      	movs	r6, #0
 8014860:	e7b3      	b.n	80147ca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8014862:	4684      	mov	ip, r0
 8014864:	b16c      	cbz	r4, 8014882 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 8014866:	42b8      	cmp	r0, r7
 8014868:	dd00      	ble.n	801486c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801486a:	b2b8      	uxth	r0, r7
 801486c:	2400      	movs	r4, #0
 801486e:	e003      	b.n	8014878 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8014870:	f04f 0c01 	mov.w	ip, #1
 8014874:	2400      	movs	r4, #0
 8014876:	4660      	mov	r0, ip
 8014878:	4626      	mov	r6, r4
 801487a:	46a0      	mov	r8, r4
 801487c:	e7a5      	b.n	80147ca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801487e:	2400      	movs	r4, #0
 8014880:	e7ed      	b.n	801485e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 8014882:	4626      	mov	r6, r4
 8014884:	46a0      	mov	r8, r4
 8014886:	e7a0      	b.n	80147ca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8014888:	2900      	cmp	r1, #0
 801488a:	d0b0      	beq.n	80147ee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801488c:	2720      	movs	r7, #32
 801488e:	682e      	ldr	r6, [r5, #0]
 8014890:	2900      	cmp	r1, #0
 8014892:	d0ac      	beq.n	80147ee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8014894:	3901      	subs	r1, #1
 8014896:	4296      	cmp	r6, r2
 8014898:	b289      	uxth	r1, r1
 801489a:	daa7      	bge.n	80147ec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801489c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 80148a0:	682b      	ldr	r3, [r5, #0]
 80148a2:	3301      	adds	r3, #1
 80148a4:	602b      	str	r3, [r5, #0]
 80148a6:	e7f2      	b.n	801488e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 80148a8:	b188      	cbz	r0, 80148ce <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 80148aa:	682b      	ldr	r3, [r5, #0]
 80148ac:	3801      	subs	r0, #1
 80148ae:	429a      	cmp	r2, r3
 80148b0:	b280      	uxth	r0, r0
 80148b2:	dd0c      	ble.n	80148ce <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 80148b4:	f8db 3000 	ldr.w	r3, [fp]
 80148b8:	1c9c      	adds	r4, r3, #2
 80148ba:	f8cb 4000 	str.w	r4, [fp]
 80148be:	881c      	ldrh	r4, [r3, #0]
 80148c0:	682b      	ldr	r3, [r5, #0]
 80148c2:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 80148c6:	682b      	ldr	r3, [r5, #0]
 80148c8:	3301      	adds	r3, #1
 80148ca:	602b      	str	r3, [r5, #0]
 80148cc:	e7ec      	b.n	80148a8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 80148ce:	2620      	movs	r6, #32
 80148d0:	b151      	cbz	r1, 80148e8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 80148d2:	6828      	ldr	r0, [r5, #0]
 80148d4:	3901      	subs	r1, #1
 80148d6:	4282      	cmp	r2, r0
 80148d8:	b289      	uxth	r1, r1
 80148da:	dd05      	ble.n	80148e8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 80148dc:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 80148e0:	682b      	ldr	r3, [r5, #0]
 80148e2:	3301      	adds	r3, #1
 80148e4:	602b      	str	r3, [r5, #0]
 80148e6:	e7f3      	b.n	80148d0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 80148e8:	b005      	add	sp, #20
 80148ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080148ee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 80148ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80148f2:	2400      	movs	r4, #0
 80148f4:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 80148f8:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 80148fc:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 8014900:	8014      	strh	r4, [r2, #0]
 8014902:	701c      	strb	r4, [r3, #0]
 8014904:	f888 4000 	strb.w	r4, [r8]
 8014908:	f88c 4000 	strb.w	r4, [ip]
 801490c:	f88e 4000 	strb.w	r4, [lr]
 8014910:	703c      	strb	r4, [r7, #0]
 8014912:	6804      	ldr	r4, [r0, #0]
 8014914:	b1a4      	cbz	r4, 8014940 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 8014916:	8824      	ldrh	r4, [r4, #0]
 8014918:	f04f 0901 	mov.w	r9, #1
 801491c:	b314      	cbz	r4, 8014964 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801491e:	2c2b      	cmp	r4, #43	; 0x2b
 8014920:	d001      	beq.n	8014926 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 8014922:	2c20      	cmp	r4, #32
 8014924:	d110      	bne.n	8014948 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 8014926:	8014      	strh	r4, [r2, #0]
 8014928:	6804      	ldr	r4, [r0, #0]
 801492a:	b10c      	cbz	r4, 8014930 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801492c:	3402      	adds	r4, #2
 801492e:	6004      	str	r4, [r0, #0]
 8014930:	680c      	ldr	r4, [r1, #0]
 8014932:	b10c      	cbz	r4, 8014938 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 8014934:	3401      	adds	r4, #1
 8014936:	600c      	str	r4, [r1, #0]
 8014938:	6804      	ldr	r4, [r0, #0]
 801493a:	b17c      	cbz	r4, 801495c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801493c:	8824      	ldrh	r4, [r4, #0]
 801493e:	e7ed      	b.n	801491c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8014940:	680c      	ldr	r4, [r1, #0]
 8014942:	b17c      	cbz	r4, 8014964 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8014944:	7824      	ldrb	r4, [r4, #0]
 8014946:	e7e7      	b.n	8014918 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 8014948:	2c2d      	cmp	r4, #45	; 0x2d
 801494a:	d102      	bne.n	8014952 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801494c:	f883 9000 	strb.w	r9, [r3]
 8014950:	e7ea      	b.n	8014928 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8014952:	2c23      	cmp	r4, #35	; 0x23
 8014954:	d107      	bne.n	8014966 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 8014956:	f888 9000 	strb.w	r9, [r8]
 801495a:	e7e5      	b.n	8014928 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801495c:	680c      	ldr	r4, [r1, #0]
 801495e:	b10c      	cbz	r4, 8014964 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8014960:	7824      	ldrb	r4, [r4, #0]
 8014962:	e7db      	b.n	801491c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8014964:	2400      	movs	r4, #0
 8014966:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801496a:	2b09      	cmp	r3, #9
 801496c:	d901      	bls.n	8014972 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801496e:	2c2a      	cmp	r4, #42	; 0x2a
 8014970:	d122      	bne.n	80149b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8014972:	2301      	movs	r3, #1
 8014974:	2c30      	cmp	r4, #48	; 0x30
 8014976:	f88e 3000 	strb.w	r3, [lr]
 801497a:	d10d      	bne.n	8014998 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801497c:	f88c 3000 	strb.w	r3, [ip]
 8014980:	6803      	ldr	r3, [r0, #0]
 8014982:	b10b      	cbz	r3, 8014988 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8014984:	3302      	adds	r3, #2
 8014986:	6003      	str	r3, [r0, #0]
 8014988:	680b      	ldr	r3, [r1, #0]
 801498a:	b10b      	cbz	r3, 8014990 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801498c:	3301      	adds	r3, #1
 801498e:	600b      	str	r3, [r1, #0]
 8014990:	6803      	ldr	r3, [r0, #0]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d02f      	beq.n	80149f6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 8014996:	881c      	ldrh	r4, [r3, #0]
 8014998:	2c2a      	cmp	r4, #42	; 0x2a
 801499a:	d135      	bne.n	8014a08 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801499c:	f04f 33ff 	mov.w	r3, #4294967295
 80149a0:	6033      	str	r3, [r6, #0]
 80149a2:	6803      	ldr	r3, [r0, #0]
 80149a4:	b10b      	cbz	r3, 80149aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 80149a6:	3302      	adds	r3, #2
 80149a8:	6003      	str	r3, [r0, #0]
 80149aa:	680b      	ldr	r3, [r1, #0]
 80149ac:	b10b      	cbz	r3, 80149b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 80149ae:	3301      	adds	r3, #1
 80149b0:	600b      	str	r3, [r1, #0]
 80149b2:	6803      	ldr	r3, [r0, #0]
 80149b4:	b31b      	cbz	r3, 80149fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 80149b6:	881c      	ldrh	r4, [r3, #0]
 80149b8:	2c2e      	cmp	r4, #46	; 0x2e
 80149ba:	d11a      	bne.n	80149f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 80149bc:	2301      	movs	r3, #1
 80149be:	703b      	strb	r3, [r7, #0]
 80149c0:	6803      	ldr	r3, [r0, #0]
 80149c2:	b10b      	cbz	r3, 80149c8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 80149c4:	3302      	adds	r3, #2
 80149c6:	6003      	str	r3, [r0, #0]
 80149c8:	680b      	ldr	r3, [r1, #0]
 80149ca:	b10b      	cbz	r3, 80149d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 80149cc:	3301      	adds	r3, #1
 80149ce:	600b      	str	r3, [r1, #0]
 80149d0:	6803      	ldr	r3, [r0, #0]
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d036      	beq.n	8014a44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 80149d6:	881b      	ldrh	r3, [r3, #0]
 80149d8:	2b2a      	cmp	r3, #42	; 0x2a
 80149da:	d137      	bne.n	8014a4c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 80149dc:	f04f 33ff 	mov.w	r3, #4294967295
 80149e0:	602b      	str	r3, [r5, #0]
 80149e2:	6803      	ldr	r3, [r0, #0]
 80149e4:	b10b      	cbz	r3, 80149ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 80149e6:	3302      	adds	r3, #2
 80149e8:	6003      	str	r3, [r0, #0]
 80149ea:	680b      	ldr	r3, [r1, #0]
 80149ec:	b10b      	cbz	r3, 80149f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 80149ee:	3301      	adds	r3, #1
 80149f0:	600b      	str	r3, [r1, #0]
 80149f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80149f6:	680c      	ldr	r4, [r1, #0]
 80149f8:	b134      	cbz	r4, 8014a08 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 80149fa:	7824      	ldrb	r4, [r4, #0]
 80149fc:	e7cc      	b.n	8014998 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 80149fe:	680b      	ldr	r3, [r1, #0]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d0f6      	beq.n	80149f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8014a04:	781c      	ldrb	r4, [r3, #0]
 8014a06:	e7d7      	b.n	80149b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8014a08:	2300      	movs	r3, #0
 8014a0a:	220a      	movs	r2, #10
 8014a0c:	6033      	str	r3, [r6, #0]
 8014a0e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8014a12:	fa1f f38c 	uxth.w	r3, ip
 8014a16:	2b09      	cmp	r3, #9
 8014a18:	d8ce      	bhi.n	80149b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8014a1a:	6833      	ldr	r3, [r6, #0]
 8014a1c:	fb02 c303 	mla	r3, r2, r3, ip
 8014a20:	6033      	str	r3, [r6, #0]
 8014a22:	6803      	ldr	r3, [r0, #0]
 8014a24:	b10b      	cbz	r3, 8014a2a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 8014a26:	3302      	adds	r3, #2
 8014a28:	6003      	str	r3, [r0, #0]
 8014a2a:	680b      	ldr	r3, [r1, #0]
 8014a2c:	b10b      	cbz	r3, 8014a32 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 8014a2e:	3301      	adds	r3, #1
 8014a30:	600b      	str	r3, [r1, #0]
 8014a32:	6803      	ldr	r3, [r0, #0]
 8014a34:	b10b      	cbz	r3, 8014a3a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 8014a36:	881c      	ldrh	r4, [r3, #0]
 8014a38:	e7e9      	b.n	8014a0e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8014a3a:	680c      	ldr	r4, [r1, #0]
 8014a3c:	2c00      	cmp	r4, #0
 8014a3e:	d0e6      	beq.n	8014a0e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8014a40:	7824      	ldrb	r4, [r4, #0]
 8014a42:	e7e4      	b.n	8014a0e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8014a44:	680b      	ldr	r3, [r1, #0]
 8014a46:	b10b      	cbz	r3, 8014a4c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8014a48:	781b      	ldrb	r3, [r3, #0]
 8014a4a:	e7c5      	b.n	80149d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8014a4c:	2200      	movs	r2, #0
 8014a4e:	240a      	movs	r4, #10
 8014a50:	602a      	str	r2, [r5, #0]
 8014a52:	3b30      	subs	r3, #48	; 0x30
 8014a54:	682a      	ldr	r2, [r5, #0]
 8014a56:	b29e      	uxth	r6, r3
 8014a58:	2e09      	cmp	r6, #9
 8014a5a:	d813      	bhi.n	8014a84 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 8014a5c:	fb04 3302 	mla	r3, r4, r2, r3
 8014a60:	602b      	str	r3, [r5, #0]
 8014a62:	6803      	ldr	r3, [r0, #0]
 8014a64:	b10b      	cbz	r3, 8014a6a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 8014a66:	3302      	adds	r3, #2
 8014a68:	6003      	str	r3, [r0, #0]
 8014a6a:	680b      	ldr	r3, [r1, #0]
 8014a6c:	b10b      	cbz	r3, 8014a72 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 8014a6e:	3301      	adds	r3, #1
 8014a70:	600b      	str	r3, [r1, #0]
 8014a72:	6803      	ldr	r3, [r0, #0]
 8014a74:	b10b      	cbz	r3, 8014a7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 8014a76:	881b      	ldrh	r3, [r3, #0]
 8014a78:	e7eb      	b.n	8014a52 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8014a7a:	680b      	ldr	r3, [r1, #0]
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d0e8      	beq.n	8014a52 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8014a80:	781b      	ldrb	r3, [r3, #0]
 8014a82:	e7e6      	b.n	8014a52 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8014a84:	2a06      	cmp	r2, #6
 8014a86:	bfa8      	it	ge
 8014a88:	2206      	movge	r2, #6
 8014a8a:	602a      	str	r2, [r5, #0]
 8014a8c:	e7b1      	b.n	80149f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

08014a8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 8014a8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a92:	b0a3      	sub	sp, #140	; 0x8c
 8014a94:	2600      	movs	r6, #0
 8014a96:	4607      	mov	r7, r0
 8014a98:	4688      	mov	r8, r1
 8014a9a:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8014a9e:	4631      	mov	r1, r6
 8014aa0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8014aa2:	4648      	mov	r0, r9
 8014aa4:	960d      	str	r6, [sp, #52]	; 0x34
 8014aa6:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8014aaa:	2242      	movs	r2, #66	; 0x42
 8014aac:	f008 ff82 	bl	801d9b4 <memset>
 8014ab0:	b15f      	cbz	r7, 8014aca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 8014ab2:	f108 3aff 	add.w	sl, r8, #4294967295
 8014ab6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014ab8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014aba:	b152      	cbz	r2, 8014ad2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8014abc:	8812      	ldrh	r2, [r2, #0]
 8014abe:	b10a      	cbz	r2, 8014ac4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8014ac0:	459a      	cmp	sl, r3
 8014ac2:	dc2e      	bgt.n	8014b22 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 8014ac4:	2200      	movs	r2, #0
 8014ac6:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8014aca:	4638      	mov	r0, r7
 8014acc:	b023      	add	sp, #140	; 0x8c
 8014ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ad2:	9a08      	ldr	r2, [sp, #32]
 8014ad4:	2a00      	cmp	r2, #0
 8014ad6:	d0f5      	beq.n	8014ac4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8014ad8:	7812      	ldrb	r2, [r2, #0]
 8014ada:	e7f0      	b.n	8014abe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8014adc:	2d00      	cmp	r5, #0
 8014ade:	d0ea      	beq.n	8014ab6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8014ae0:	782a      	ldrb	r2, [r5, #0]
 8014ae2:	b142      	cbz	r2, 8014af6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 8014ae4:	2a25      	cmp	r2, #37	; 0x25
 8014ae6:	d001      	beq.n	8014aec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 8014ae8:	459a      	cmp	sl, r3
 8014aea:	dc08      	bgt.n	8014afe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8014aec:	f1bb 0f00 	cmp.w	fp, #0
 8014af0:	d121      	bne.n	8014b36 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 8014af2:	2d00      	cmp	r5, #0
 8014af4:	d0df      	beq.n	8014ab6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8014af6:	782a      	ldrb	r2, [r5, #0]
 8014af8:	f04f 0b00 	mov.w	fp, #0
 8014afc:	e01d      	b.n	8014b3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8014afe:	f1bb 0f00 	cmp.w	fp, #0
 8014b02:	d077      	beq.n	8014bf4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 8014b04:	f8bb 2000 	ldrh.w	r2, [fp]
 8014b08:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8014b0c:	f1bb 0f00 	cmp.w	fp, #0
 8014b10:	d002      	beq.n	8014b18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8014b12:	f10b 0202 	add.w	r2, fp, #2
 8014b16:	9209      	str	r2, [sp, #36]	; 0x24
 8014b18:	b10d      	cbz	r5, 8014b1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 8014b1a:	3501      	adds	r5, #1
 8014b1c:	9508      	str	r5, [sp, #32]
 8014b1e:	3301      	adds	r3, #1
 8014b20:	930d      	str	r3, [sp, #52]	; 0x34
 8014b22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014b24:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 8014b28:	f1bb 0f00 	cmp.w	fp, #0
 8014b2c:	d0d6      	beq.n	8014adc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 8014b2e:	f8bb 2000 	ldrh.w	r2, [fp]
 8014b32:	2a00      	cmp	r2, #0
 8014b34:	d1d6      	bne.n	8014ae4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 8014b36:	f8bb 2000 	ldrh.w	r2, [fp]
 8014b3a:	2a00      	cmp	r2, #0
 8014b3c:	d0bb      	beq.n	8014ab6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8014b3e:	459a      	cmp	sl, r3
 8014b40:	ddb9      	ble.n	8014ab6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8014b42:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 8014b46:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8014b4a:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 8014b4e:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 8014b52:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 8014b56:	960e      	str	r6, [sp, #56]	; 0x38
 8014b58:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 8014b5c:	960f      	str	r6, [sp, #60]	; 0x3c
 8014b5e:	f1bb 0f00 	cmp.w	fp, #0
 8014b62:	d002      	beq.n	8014b6a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8014b64:	f10b 0302 	add.w	r3, fp, #2
 8014b68:	9309      	str	r3, [sp, #36]	; 0x24
 8014b6a:	b10d      	cbz	r5, 8014b70 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 8014b6c:	1c6b      	adds	r3, r5, #1
 8014b6e:	9308      	str	r3, [sp, #32]
 8014b70:	ab0f      	add	r3, sp, #60	; 0x3c
 8014b72:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8014b76:	a908      	add	r1, sp, #32
 8014b78:	a809      	add	r0, sp, #36	; 0x24
 8014b7a:	9305      	str	r3, [sp, #20]
 8014b7c:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 8014b80:	9304      	str	r3, [sp, #16]
 8014b82:	ab0e      	add	r3, sp, #56	; 0x38
 8014b84:	9303      	str	r3, [sp, #12]
 8014b86:	ab0c      	add	r3, sp, #48	; 0x30
 8014b88:	9302      	str	r3, [sp, #8]
 8014b8a:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8014b8e:	9301      	str	r3, [sp, #4]
 8014b90:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8014b94:	9300      	str	r3, [sp, #0]
 8014b96:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 8014b9a:	f7ff fea8 	bl	80148ee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8014b9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	bfbf      	itttt	lt
 8014ba4:	6823      	ldrlt	r3, [r4, #0]
 8014ba6:	3404      	addlt	r4, #4
 8014ba8:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8014bac:	930e      	strlt	r3, [sp, #56]	; 0x38
 8014bae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	bfbe      	ittt	lt
 8014bb4:	6823      	ldrlt	r3, [r4, #0]
 8014bb6:	3404      	addlt	r4, #4
 8014bb8:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8014bbc:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8014bc0:	bfb8      	it	lt
 8014bc2:	930f      	strlt	r3, [sp, #60]	; 0x3c
 8014bc4:	b1d9      	cbz	r1, 8014bfe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 8014bc6:	880b      	ldrh	r3, [r1, #0]
 8014bc8:	2b69      	cmp	r3, #105	; 0x69
 8014bca:	d01f      	beq.n	8014c0c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8014bcc:	d82f      	bhi.n	8014c2e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 8014bce:	2b58      	cmp	r3, #88	; 0x58
 8014bd0:	d01c      	beq.n	8014c0c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8014bd2:	d818      	bhi.n	8014c06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 8014bd4:	2b25      	cmp	r3, #37	; 0x25
 8014bd6:	d034      	beq.n	8014c42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 8014bd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014bda:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 8014bde:	f1bb 0f00 	cmp.w	fp, #0
 8014be2:	f000 80b7 	beq.w	8014d54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 8014be6:	f8bb 5000 	ldrh.w	r5, [fp]
 8014bea:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 8014bee:	3301      	adds	r3, #1
 8014bf0:	930d      	str	r3, [sp, #52]	; 0x34
 8014bf2:	e029      	b.n	8014c48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8014bf4:	b10d      	cbz	r5, 8014bfa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 8014bf6:	782a      	ldrb	r2, [r5, #0]
 8014bf8:	e786      	b.n	8014b08 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8014bfa:	462a      	mov	r2, r5
 8014bfc:	e784      	b.n	8014b08 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8014bfe:	2a00      	cmp	r2, #0
 8014c00:	d0ea      	beq.n	8014bd8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8014c02:	7813      	ldrb	r3, [r2, #0]
 8014c04:	e7e0      	b.n	8014bc8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 8014c06:	3b63      	subs	r3, #99	; 0x63
 8014c08:	2b01      	cmp	r3, #1
 8014c0a:	d8e5      	bhi.n	8014bd8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8014c0c:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8014c10:	b329      	cbz	r1, 8014c5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 8014c12:	880b      	ldrh	r3, [r1, #0]
 8014c14:	2b69      	cmp	r3, #105	; 0x69
 8014c16:	d063      	beq.n	8014ce0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8014c18:	d825      	bhi.n	8014c66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 8014c1a:	2b63      	cmp	r3, #99	; 0x63
 8014c1c:	d038      	beq.n	8014c90 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 8014c1e:	2b64      	cmp	r3, #100	; 0x64
 8014c20:	d05e      	beq.n	8014ce0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8014c22:	2b58      	cmp	r3, #88	; 0x58
 8014c24:	d07a      	beq.n	8014d1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 8014c26:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 8014c2a:	4625      	mov	r5, r4
 8014c2c:	e036      	b.n	8014c9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8014c2e:	2b73      	cmp	r3, #115	; 0x73
 8014c30:	d0ec      	beq.n	8014c0c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8014c32:	d802      	bhi.n	8014c3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 8014c34:	2b6f      	cmp	r3, #111	; 0x6f
 8014c36:	d1cf      	bne.n	8014bd8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8014c38:	e7e8      	b.n	8014c0c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8014c3a:	2b75      	cmp	r3, #117	; 0x75
 8014c3c:	d0e6      	beq.n	8014c0c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8014c3e:	2b78      	cmp	r3, #120	; 0x78
 8014c40:	e7f9      	b.n	8014c36 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 8014c42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014c44:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 8014c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c4a:	b10b      	cbz	r3, 8014c50 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 8014c4c:	3302      	adds	r3, #2
 8014c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8014c50:	9b08      	ldr	r3, [sp, #32]
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	f43f af2f 	beq.w	8014ab6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8014c58:	3301      	adds	r3, #1
 8014c5a:	9308      	str	r3, [sp, #32]
 8014c5c:	e72b      	b.n	8014ab6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8014c5e:	2a00      	cmp	r2, #0
 8014c60:	d0e1      	beq.n	8014c26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8014c62:	7813      	ldrb	r3, [r2, #0]
 8014c64:	e7d6      	b.n	8014c14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 8014c66:	2b73      	cmp	r3, #115	; 0x73
 8014c68:	d036      	beq.n	8014cd8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 8014c6a:	d807      	bhi.n	8014c7c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 8014c6c:	2b6f      	cmp	r3, #111	; 0x6f
 8014c6e:	d1da      	bne.n	8014c26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8014c70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014c72:	1d25      	adds	r5, r4, #4
 8014c74:	2308      	movs	r3, #8
 8014c76:	eba8 0202 	sub.w	r2, r8, r2
 8014c7a:	e049      	b.n	8014d10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8014c7c:	2b75      	cmp	r3, #117	; 0x75
 8014c7e:	d042      	beq.n	8014d06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 8014c80:	2b78      	cmp	r3, #120	; 0x78
 8014c82:	d1d0      	bne.n	8014c26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8014c84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014c86:	1d25      	adds	r5, r4, #4
 8014c88:	2310      	movs	r3, #16
 8014c8a:	eba8 0202 	sub.w	r2, r8, r2
 8014c8e:	e03f      	b.n	8014d10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8014c90:	6823      	ldr	r3, [r4, #0]
 8014c92:	1d25      	adds	r5, r4, #4
 8014c94:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 8014c98:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8014c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c9e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d051      	beq.n	8014d4a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 8014ca6:	881a      	ldrh	r2, [r3, #0]
 8014ca8:	a80d      	add	r0, sp, #52	; 0x34
 8014caa:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8014cae:	462c      	mov	r4, r5
 8014cb0:	9005      	str	r0, [sp, #20]
 8014cb2:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 8014cb6:	9004      	str	r0, [sp, #16]
 8014cb8:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014cba:	9003      	str	r0, [sp, #12]
 8014cbc:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 8014cc0:	9002      	str	r0, [sp, #8]
 8014cc2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8014cc4:	9001      	str	r0, [sp, #4]
 8014cc6:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 8014cca:	e9cd 8706 	strd	r8, r7, [sp, #24]
 8014cce:	9000      	str	r0, [sp, #0]
 8014cd0:	a810      	add	r0, sp, #64	; 0x40
 8014cd2:	f7ff fd49 	bl	8014768 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 8014cd6:	e7b7      	b.n	8014c48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8014cd8:	1d25      	adds	r5, r4, #4
 8014cda:	6823      	ldr	r3, [r4, #0]
 8014cdc:	9310      	str	r3, [sp, #64]	; 0x40
 8014cde:	e7dd      	b.n	8014c9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8014ce0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014ce2:	230a      	movs	r3, #10
 8014ce4:	4649      	mov	r1, r9
 8014ce6:	6820      	ldr	r0, [r4, #0]
 8014ce8:	eba8 0202 	sub.w	r2, r8, r2
 8014cec:	1d25      	adds	r5, r4, #4
 8014cee:	b292      	uxth	r2, r2
 8014cf0:	f7ff fd08 	bl	8014704 <_ZN8touchgfx7Unicode4itoaElPtti>
 8014cf4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8014cf8:	2b2d      	cmp	r3, #45	; 0x2d
 8014cfa:	d1cf      	bne.n	8014c9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8014cfc:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8014d00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014d02:	3302      	adds	r3, #2
 8014d04:	e7ea      	b.n	8014cdc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 8014d06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014d08:	1d25      	adds	r5, r4, #4
 8014d0a:	230a      	movs	r3, #10
 8014d0c:	eba8 0202 	sub.w	r2, r8, r2
 8014d10:	b292      	uxth	r2, r2
 8014d12:	4649      	mov	r1, r9
 8014d14:	6820      	ldr	r0, [r4, #0]
 8014d16:	f7ff fcd7 	bl	80146c8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 8014d1a:	e7bf      	b.n	8014c9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8014d1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014d1e:	2310      	movs	r3, #16
 8014d20:	4649      	mov	r1, r9
 8014d22:	6820      	ldr	r0, [r4, #0]
 8014d24:	eba8 0202 	sub.w	r2, r8, r2
 8014d28:	1d25      	adds	r5, r4, #4
 8014d2a:	b292      	uxth	r2, r2
 8014d2c:	f7ff fccc 	bl	80146c8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 8014d30:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 8014d34:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d0af      	beq.n	8014c9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8014d3c:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8014d40:	2919      	cmp	r1, #25
 8014d42:	d8f7      	bhi.n	8014d34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 8014d44:	3b20      	subs	r3, #32
 8014d46:	8013      	strh	r3, [r2, #0]
 8014d48:	e7f4      	b.n	8014d34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 8014d4a:	9a08      	ldr	r2, [sp, #32]
 8014d4c:	2a00      	cmp	r2, #0
 8014d4e:	d0ab      	beq.n	8014ca8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8014d50:	7812      	ldrb	r2, [r2, #0]
 8014d52:	e7a9      	b.n	8014ca8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8014d54:	2d00      	cmp	r5, #0
 8014d56:	f43f af48 	beq.w	8014bea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 8014d5a:	782d      	ldrb	r5, [r5, #0]
 8014d5c:	e745      	b.n	8014bea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

08014d5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8014d5e:	b507      	push	{r0, r1, r2, lr}
 8014d60:	9300      	str	r3, [sp, #0]
 8014d62:	4613      	mov	r3, r2
 8014d64:	2200      	movs	r2, #0
 8014d66:	f7ff fe92 	bl	8014a8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 8014d6a:	b003      	add	sp, #12
 8014d6c:	f85d fb04 	ldr.w	pc, [sp], #4

08014d70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8014d70:	b40c      	push	{r2, r3}
 8014d72:	b507      	push	{r0, r1, r2, lr}
 8014d74:	ab04      	add	r3, sp, #16
 8014d76:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d7a:	9301      	str	r3, [sp, #4]
 8014d7c:	f7ff ffef 	bl	8014d5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8014d80:	b003      	add	sp, #12
 8014d82:	f85d eb04 	ldr.w	lr, [sp], #4
 8014d86:	b002      	add	sp, #8
 8014d88:	4770      	bx	lr
	...

08014d8c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8014d8c:	4b01      	ldr	r3, [pc, #4]	; (8014d94 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8014d8e:	6018      	str	r0, [r3, #0]
 8014d90:	4770      	bx	lr
 8014d92:	bf00      	nop
 8014d94:	2400e4bc 	.word	0x2400e4bc

08014d98 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8014d98:	4b06      	ldr	r3, [pc, #24]	; (8014db4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8014d9a:	881a      	ldrh	r2, [r3, #0]
 8014d9c:	4282      	cmp	r2, r0
 8014d9e:	d807      	bhi.n	8014db0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8014da0:	4b05      	ldr	r3, [pc, #20]	; (8014db8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8014da2:	881b      	ldrh	r3, [r3, #0]
 8014da4:	4413      	add	r3, r2
 8014da6:	4298      	cmp	r0, r3
 8014da8:	bfac      	ite	ge
 8014daa:	2000      	movge	r0, #0
 8014dac:	2001      	movlt	r0, #1
 8014dae:	4770      	bx	lr
 8014db0:	2000      	movs	r0, #0
 8014db2:	4770      	bx	lr
 8014db4:	2400e4dc 	.word	0x2400e4dc
 8014db8:	2400e4e0 	.word	0x2400e4e0

08014dbc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8014dbc:	b508      	push	{r3, lr}
 8014dbe:	4601      	mov	r1, r0
 8014dc0:	f7ff ffea 	bl	8014d98 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8014dc4:	b118      	cbz	r0, 8014dce <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8014dc6:	4b02      	ldr	r3, [pc, #8]	; (8014dd0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8014dce:	bd08      	pop	{r3, pc}
 8014dd0:	2400e4c0 	.word	0x2400e4c0

08014dd4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 8014dd4:	b538      	push	{r3, r4, r5, lr}
 8014dd6:	4604      	mov	r4, r0
 8014dd8:	f7ff ffde 	bl	8014d98 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8014ddc:	b188      	cbz	r0, 8014e02 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 8014dde:	4b09      	ldr	r3, [pc, #36]	; (8014e04 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 8014de0:	881a      	ldrh	r2, [r3, #0]
 8014de2:	4b09      	ldr	r3, [pc, #36]	; (8014e08 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 8014de4:	1aa4      	subs	r4, r4, r2
 8014de6:	220e      	movs	r2, #14
 8014de8:	681d      	ldr	r5, [r3, #0]
 8014dea:	4362      	muls	r2, r4
 8014dec:	18ac      	adds	r4, r5, r2
 8014dee:	7b23      	ldrb	r3, [r4, #12]
 8014df0:	f013 0320 	ands.w	r3, r3, #32
 8014df4:	bf17      	itett	ne
 8014df6:	680b      	ldrne	r3, [r1, #0]
 8014df8:	4618      	moveq	r0, r3
 8014dfa:	50ab      	strne	r3, [r5, r2]
 8014dfc:	684b      	ldrne	r3, [r1, #4]
 8014dfe:	bf18      	it	ne
 8014e00:	6063      	strne	r3, [r4, #4]
 8014e02:	bd38      	pop	{r3, r4, r5, pc}
 8014e04:	2400e4dc 	.word	0x2400e4dc
 8014e08:	2400e4c4 	.word	0x2400e4c4

08014e0c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 8014e0c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8014e10:	4606      	mov	r6, r0
 8014e12:	460c      	mov	r4, r1
 8014e14:	f7ff ffc0 	bl	8014d98 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8014e18:	b918      	cbnz	r0, 8014e22 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 8014e1a:	2000      	movs	r0, #0
 8014e1c:	b002      	add	sp, #8
 8014e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e22:	4608      	mov	r0, r1
 8014e24:	f7f7 fbf9 	bl	800c61a <_ZNK8touchgfx4Rect7isEmptyEv>
 8014e28:	2800      	cmp	r0, #0
 8014e2a:	d1f6      	bne.n	8014e1a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8014e2c:	4b3f      	ldr	r3, [pc, #252]	; (8014f2c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 8014e2e:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8014f30 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 8014e32:	881d      	ldrh	r5, [r3, #0]
 8014e34:	f8d9 a000 	ldr.w	sl, [r9]
 8014e38:	46c8      	mov	r8, r9
 8014e3a:	1b73      	subs	r3, r6, r5
 8014e3c:	250e      	movs	r5, #14
 8014e3e:	435d      	muls	r5, r3
 8014e40:	eb0a 0705 	add.w	r7, sl, r5
 8014e44:	7b3b      	ldrb	r3, [r7, #12]
 8014e46:	f013 0f20 	tst.w	r3, #32
 8014e4a:	d0e6      	beq.n	8014e1a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8014e4c:	4621      	mov	r1, r4
 8014e4e:	4638      	mov	r0, r7
 8014e50:	f7fc ff40 	bl	8011cd4 <_ZNK8touchgfx4Rect8includesERKS0_>
 8014e54:	2800      	cmp	r0, #0
 8014e56:	d1e1      	bne.n	8014e1c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8014e58:	4639      	mov	r1, r7
 8014e5a:	4620      	mov	r0, r4
 8014e5c:	f7fc ff3a 	bl	8011cd4 <_ZNK8touchgfx4Rect8includesERKS0_>
 8014e60:	b108      	cbz	r0, 8014e66 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 8014e62:	4621      	mov	r1, r4
 8014e64:	e020      	b.n	8014ea8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 8014e66:	f9b4 2000 	ldrsh.w	r2, [r4]
 8014e6a:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 8014e6e:	429a      	cmp	r2, r3
 8014e70:	d11e      	bne.n	8014eb0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8014e72:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8014e76:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014e7a:	429a      	cmp	r2, r3
 8014e7c:	d118      	bne.n	8014eb0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8014e7e:	6820      	ldr	r0, [r4, #0]
 8014e80:	466b      	mov	r3, sp
 8014e82:	6861      	ldr	r1, [r4, #4]
 8014e84:	c303      	stmia	r3!, {r0, r1}
 8014e86:	4639      	mov	r1, r7
 8014e88:	4668      	mov	r0, sp
 8014e8a:	f7f9 f924 	bl	800e0d6 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8014e8e:	f8d9 3000 	ldr.w	r3, [r9]
 8014e92:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8014e96:	442b      	add	r3, r5
 8014e98:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8014e9c:	4413      	add	r3, r2
 8014e9e:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8014ea2:	4293      	cmp	r3, r2
 8014ea4:	dc04      	bgt.n	8014eb0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8014ea6:	4669      	mov	r1, sp
 8014ea8:	4630      	mov	r0, r6
 8014eaa:	f7ff ff93 	bl	8014dd4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 8014eae:	e7b5      	b.n	8014e1c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8014eb0:	f8d8 3000 	ldr.w	r3, [r8]
 8014eb4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8014eb8:	442b      	add	r3, r5
 8014eba:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8014ebe:	4291      	cmp	r1, r2
 8014ec0:	d119      	bne.n	8014ef6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8014ec2:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8014ec6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8014eca:	4291      	cmp	r1, r2
 8014ecc:	d113      	bne.n	8014ef6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8014ece:	6820      	ldr	r0, [r4, #0]
 8014ed0:	466a      	mov	r2, sp
 8014ed2:	6861      	ldr	r1, [r4, #4]
 8014ed4:	c203      	stmia	r2!, {r0, r1}
 8014ed6:	4619      	mov	r1, r3
 8014ed8:	4668      	mov	r0, sp
 8014eda:	f7f9 f8fc 	bl	800e0d6 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8014ede:	f8d8 3000 	ldr.w	r3, [r8]
 8014ee2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8014ee6:	442b      	add	r3, r5
 8014ee8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8014eec:	4413      	add	r3, r2
 8014eee:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8014ef2:	4293      	cmp	r3, r2
 8014ef4:	ddd7      	ble.n	8014ea6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 8014ef6:	4620      	mov	r0, r4
 8014ef8:	f7f7 fb8f 	bl	800c61a <_ZNK8touchgfx4Rect7isEmptyEv>
 8014efc:	b990      	cbnz	r0, 8014f24 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 8014efe:	88a7      	ldrh	r7, [r4, #4]
 8014f00:	88e3      	ldrh	r3, [r4, #6]
 8014f02:	fb17 f703 	smulbb	r7, r7, r3
 8014f06:	f8d8 3000 	ldr.w	r3, [r8]
 8014f0a:	441d      	add	r5, r3
 8014f0c:	4628      	mov	r0, r5
 8014f0e:	f7f7 fb84 	bl	800c61a <_ZNK8touchgfx4Rect7isEmptyEv>
 8014f12:	b948      	cbnz	r0, 8014f28 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 8014f14:	88ab      	ldrh	r3, [r5, #4]
 8014f16:	88ea      	ldrh	r2, [r5, #6]
 8014f18:	fb13 f302 	smulbb	r3, r3, r2
 8014f1c:	42bb      	cmp	r3, r7
 8014f1e:	f6bf af7c 	bge.w	8014e1a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8014f22:	e79e      	b.n	8014e62 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 8014f24:	2700      	movs	r7, #0
 8014f26:	e7ee      	b.n	8014f06 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 8014f28:	2300      	movs	r3, #0
 8014f2a:	e7f7      	b.n	8014f1c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 8014f2c:	2400e4dc 	.word	0x2400e4dc
 8014f30:	2400e4c4 	.word	0x2400e4c4

08014f34 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8014f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f36:	4c24      	ldr	r4, [pc, #144]	; (8014fc8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8014f38:	6823      	ldr	r3, [r4, #0]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d042      	beq.n	8014fc4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8014f3e:	4a23      	ldr	r2, [pc, #140]	; (8014fcc <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8014f40:	4d23      	ldr	r5, [pc, #140]	; (8014fd0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8014f42:	8811      	ldrh	r1, [r2, #0]
 8014f44:	f8b5 c000 	ldrh.w	ip, [r5]
 8014f48:	4822      	ldr	r0, [pc, #136]	; (8014fd4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8014f4a:	4461      	add	r1, ip
 8014f4c:	1c4a      	adds	r2, r1, #1
 8014f4e:	008f      	lsls	r7, r1, #2
 8014f50:	f022 0201 	bic.w	r2, r2, #1
 8014f54:	19de      	adds	r6, r3, r7
 8014f56:	0412      	lsls	r2, r2, #16
 8014f58:	6006      	str	r6, [r0, #0]
 8014f5a:	4e1f      	ldr	r6, [pc, #124]	; (8014fd8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8014f5c:	0c12      	lsrs	r2, r2, #16
 8014f5e:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8014f62:	19da      	adds	r2, r3, r7
 8014f64:	6032      	str	r2, [r6, #0]
 8014f66:	220e      	movs	r2, #14
 8014f68:	fb02 f20c 	mul.w	r2, r2, ip
 8014f6c:	3203      	adds	r2, #3
 8014f6e:	f022 0203 	bic.w	r2, r2, #3
 8014f72:	443a      	add	r2, r7
 8014f74:	4f19      	ldr	r7, [pc, #100]	; (8014fdc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8014f76:	4413      	add	r3, r2
 8014f78:	603b      	str	r3, [r7, #0]
 8014f7a:	2300      	movs	r3, #0
 8014f7c:	4f18      	ldr	r7, [pc, #96]	; (8014fe0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8014f7e:	469c      	mov	ip, r3
 8014f80:	803b      	strh	r3, [r7, #0]
 8014f82:	4f18      	ldr	r7, [pc, #96]	; (8014fe4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8014f84:	683f      	ldr	r7, [r7, #0]
 8014f86:	1aba      	subs	r2, r7, r2
 8014f88:	4f17      	ldr	r7, [pc, #92]	; (8014fe8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8014f8a:	603a      	str	r2, [r7, #0]
 8014f8c:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8014f90:	4a16      	ldr	r2, [pc, #88]	; (8014fec <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8014f92:	8013      	strh	r3, [r2, #0]
 8014f94:	428b      	cmp	r3, r1
 8014f96:	d10d      	bne.n	8014fb4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8014f98:	882d      	ldrh	r5, [r5, #0]
 8014f9a:	2300      	movs	r3, #0
 8014f9c:	6830      	ldr	r0, [r6, #0]
 8014f9e:	240e      	movs	r4, #14
 8014fa0:	429d      	cmp	r5, r3
 8014fa2:	d90f      	bls.n	8014fc4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8014fa4:	fb04 0203 	mla	r2, r4, r3, r0
 8014fa8:	3301      	adds	r3, #1
 8014faa:	7b11      	ldrb	r1, [r2, #12]
 8014fac:	f36f 1145 	bfc	r1, #5, #1
 8014fb0:	7311      	strb	r1, [r2, #12]
 8014fb2:	e7f5      	b.n	8014fa0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8014fb4:	6822      	ldr	r2, [r4, #0]
 8014fb6:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8014fba:	6802      	ldr	r2, [r0, #0]
 8014fbc:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8014fc0:	3301      	adds	r3, #1
 8014fc2:	e7e7      	b.n	8014f94 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8014fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014fc6:	bf00      	nop
 8014fc8:	2400e4c0 	.word	0x2400e4c0
 8014fcc:	2400e4dc 	.word	0x2400e4dc
 8014fd0:	2400e4e0 	.word	0x2400e4e0
 8014fd4:	2400e4d4 	.word	0x2400e4d4
 8014fd8:	2400e4c4 	.word	0x2400e4c4
 8014fdc:	2400e4cc 	.word	0x2400e4cc
 8014fe0:	2400e4de 	.word	0x2400e4de
 8014fe4:	2400e4c8 	.word	0x2400e4c8
 8014fe8:	2400e4d8 	.word	0x2400e4d8
 8014fec:	2400e4d0 	.word	0x2400e4d0

08014ff0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8014ff0:	4b06      	ldr	r3, [pc, #24]	; (801500c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	b943      	cbnz	r3, 8015008 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8014ff6:	b139      	cbz	r1, 8015008 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8014ff8:	4b05      	ldr	r3, [pc, #20]	; (8015010 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8014ffa:	801a      	strh	r2, [r3, #0]
 8014ffc:	4b05      	ldr	r3, [pc, #20]	; (8015014 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8014ffe:	6019      	str	r1, [r3, #0]
 8015000:	4b05      	ldr	r3, [pc, #20]	; (8015018 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8015002:	6018      	str	r0, [r3, #0]
 8015004:	f7ff bf96 	b.w	8014f34 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8015008:	4770      	bx	lr
 801500a:	bf00      	nop
 801500c:	2400e4cc 	.word	0x2400e4cc
 8015010:	2400e4e0 	.word	0x2400e4e0
 8015014:	2400e4c8 	.word	0x2400e4c8
 8015018:	2400e4c0 	.word	0x2400e4c0

0801501c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801501c:	b470      	push	{r4, r5, r6}
 801501e:	4c07      	ldr	r4, [pc, #28]	; (801503c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8015020:	4605      	mov	r5, r0
 8015022:	4610      	mov	r0, r2
 8015024:	9a03      	ldr	r2, [sp, #12]
 8015026:	6826      	ldr	r6, [r4, #0]
 8015028:	b936      	cbnz	r6, 8015038 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801502a:	6025      	str	r5, [r4, #0]
 801502c:	4c04      	ldr	r4, [pc, #16]	; (8015040 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801502e:	8021      	strh	r1, [r4, #0]
 8015030:	4619      	mov	r1, r3
 8015032:	bc70      	pop	{r4, r5, r6}
 8015034:	f7ff bfdc 	b.w	8014ff0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8015038:	bc70      	pop	{r4, r5, r6}
 801503a:	4770      	bx	lr
 801503c:	2400e4e4 	.word	0x2400e4e4
 8015040:	2400e4dc 	.word	0x2400e4dc

08015044 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8015044:	4a12      	ldr	r2, [pc, #72]	; (8015090 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8015046:	8803      	ldrh	r3, [r0, #0]
 8015048:	8812      	ldrh	r2, [r2, #0]
 801504a:	4293      	cmp	r3, r2
 801504c:	d207      	bcs.n	801505e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801504e:	4a11      	ldr	r2, [pc, #68]	; (8015094 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8015050:	2114      	movs	r1, #20
 8015052:	6812      	ldr	r2, [r2, #0]
 8015054:	fb01 2303 	mla	r3, r1, r3, r2
 8015058:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801505c:	4770      	bx	lr
 801505e:	490e      	ldr	r1, [pc, #56]	; (8015098 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8015060:	8809      	ldrh	r1, [r1, #0]
 8015062:	4411      	add	r1, r2
 8015064:	428b      	cmp	r3, r1
 8015066:	da04      	bge.n	8015072 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8015068:	1a9b      	subs	r3, r3, r2
 801506a:	4a0c      	ldr	r2, [pc, #48]	; (801509c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801506c:	210e      	movs	r1, #14
 801506e:	6812      	ldr	r2, [r2, #0]
 8015070:	e7f0      	b.n	8015054 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8015072:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015076:	4293      	cmp	r3, r2
 8015078:	d108      	bne.n	801508c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801507a:	4b09      	ldr	r3, [pc, #36]	; (80150a0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801507c:	781b      	ldrb	r3, [r3, #0]
 801507e:	b91b      	cbnz	r3, 8015088 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8015080:	4b08      	ldr	r3, [pc, #32]	; (80150a4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8015082:	f9b3 0000 	ldrsh.w	r0, [r3]
 8015086:	4770      	bx	lr
 8015088:	4b07      	ldr	r3, [pc, #28]	; (80150a8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801508a:	e7fa      	b.n	8015082 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801508c:	2000      	movs	r0, #0
 801508e:	4770      	bx	lr
 8015090:	2400e4dc 	.word	0x2400e4dc
 8015094:	2400e4e4 	.word	0x2400e4e4
 8015098:	2400e4e0 	.word	0x2400e4e0
 801509c:	2400e4c4 	.word	0x2400e4c4
 80150a0:	2400e44c 	.word	0x2400e44c
 80150a4:	2400e44e 	.word	0x2400e44e
 80150a8:	2400e450 	.word	0x2400e450

080150ac <_ZNK8touchgfx6Bitmap9getHeightEv>:
 80150ac:	4a12      	ldr	r2, [pc, #72]	; (80150f8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 80150ae:	8803      	ldrh	r3, [r0, #0]
 80150b0:	8812      	ldrh	r2, [r2, #0]
 80150b2:	4293      	cmp	r3, r2
 80150b4:	d207      	bcs.n	80150c6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 80150b6:	4a11      	ldr	r2, [pc, #68]	; (80150fc <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 80150b8:	2114      	movs	r1, #20
 80150ba:	6812      	ldr	r2, [r2, #0]
 80150bc:	fb01 2303 	mla	r3, r1, r3, r2
 80150c0:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 80150c4:	4770      	bx	lr
 80150c6:	490e      	ldr	r1, [pc, #56]	; (8015100 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 80150c8:	8809      	ldrh	r1, [r1, #0]
 80150ca:	4411      	add	r1, r2
 80150cc:	428b      	cmp	r3, r1
 80150ce:	da04      	bge.n	80150da <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 80150d0:	1a9b      	subs	r3, r3, r2
 80150d2:	4a0c      	ldr	r2, [pc, #48]	; (8015104 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 80150d4:	210e      	movs	r1, #14
 80150d6:	6812      	ldr	r2, [r2, #0]
 80150d8:	e7f0      	b.n	80150bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 80150da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80150de:	4293      	cmp	r3, r2
 80150e0:	d108      	bne.n	80150f4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 80150e2:	4b09      	ldr	r3, [pc, #36]	; (8015108 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 80150e4:	781b      	ldrb	r3, [r3, #0]
 80150e6:	b91b      	cbnz	r3, 80150f0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 80150e8:	4b08      	ldr	r3, [pc, #32]	; (801510c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80150ea:	f9b3 0000 	ldrsh.w	r0, [r3]
 80150ee:	4770      	bx	lr
 80150f0:	4b07      	ldr	r3, [pc, #28]	; (8015110 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80150f2:	e7fa      	b.n	80150ea <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 80150f4:	2000      	movs	r0, #0
 80150f6:	4770      	bx	lr
 80150f8:	2400e4dc 	.word	0x2400e4dc
 80150fc:	2400e4e4 	.word	0x2400e4e4
 8015100:	2400e4e0 	.word	0x2400e4e0
 8015104:	2400e4c4 	.word	0x2400e4c4
 8015108:	2400e44c 	.word	0x2400e44c
 801510c:	2400e450 	.word	0x2400e450
 8015110:	2400e44e 	.word	0x2400e44e

08015114 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8015114:	4a1f      	ldr	r2, [pc, #124]	; (8015194 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 8015116:	b510      	push	{r4, lr}
 8015118:	880b      	ldrh	r3, [r1, #0]
 801511a:	8812      	ldrh	r2, [r2, #0]
 801511c:	4293      	cmp	r3, r2
 801511e:	d213      	bcs.n	8015148 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8015120:	4a1d      	ldr	r2, [pc, #116]	; (8015198 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 8015122:	2114      	movs	r1, #20
 8015124:	6812      	ldr	r2, [r2, #0]
 8015126:	fb01 2303 	mla	r3, r1, r3, r2
 801512a:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801512e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8015132:	8a1a      	ldrh	r2, [r3, #16]
 8015134:	8a5b      	ldrh	r3, [r3, #18]
 8015136:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801513a:	8004      	strh	r4, [r0, #0]
 801513c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015140:	8041      	strh	r1, [r0, #2]
 8015142:	8082      	strh	r2, [r0, #4]
 8015144:	80c3      	strh	r3, [r0, #6]
 8015146:	e00e      	b.n	8015166 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8015148:	4914      	ldr	r1, [pc, #80]	; (801519c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801514a:	8809      	ldrh	r1, [r1, #0]
 801514c:	4411      	add	r1, r2
 801514e:	428b      	cmp	r3, r1
 8015150:	da0a      	bge.n	8015168 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 8015152:	1a9b      	subs	r3, r3, r2
 8015154:	4a12      	ldr	r2, [pc, #72]	; (80151a0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8015156:	210e      	movs	r1, #14
 8015158:	6812      	ldr	r2, [r2, #0]
 801515a:	fb01 2303 	mla	r3, r1, r3, r2
 801515e:	681a      	ldr	r2, [r3, #0]
 8015160:	6002      	str	r2, [r0, #0]
 8015162:	685a      	ldr	r2, [r3, #4]
 8015164:	6042      	str	r2, [r0, #4]
 8015166:	bd10      	pop	{r4, pc}
 8015168:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801516c:	4293      	cmp	r3, r2
 801516e:	d10b      	bne.n	8015188 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 8015170:	4b0c      	ldr	r3, [pc, #48]	; (80151a4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8015172:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015176:	4b0c      	ldr	r3, [pc, #48]	; (80151a8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8015178:	8081      	strh	r1, [r0, #4]
 801517a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801517e:	2300      	movs	r3, #0
 8015180:	80c2      	strh	r2, [r0, #6]
 8015182:	8003      	strh	r3, [r0, #0]
 8015184:	8043      	strh	r3, [r0, #2]
 8015186:	e7ee      	b.n	8015166 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8015188:	2300      	movs	r3, #0
 801518a:	8003      	strh	r3, [r0, #0]
 801518c:	8043      	strh	r3, [r0, #2]
 801518e:	8083      	strh	r3, [r0, #4]
 8015190:	e7d8      	b.n	8015144 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8015192:	bf00      	nop
 8015194:	2400e4dc 	.word	0x2400e4dc
 8015198:	2400e4e4 	.word	0x2400e4e4
 801519c:	2400e4e0 	.word	0x2400e4e0
 80151a0:	2400e4c4 	.word	0x2400e4c4
 80151a4:	2400e448 	.word	0x2400e448
 80151a8:	2400e44a 	.word	0x2400e44a

080151ac <_ZNK8touchgfx6Bitmap7getDataEv>:
 80151ac:	4a12      	ldr	r2, [pc, #72]	; (80151f8 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 80151ae:	8803      	ldrh	r3, [r0, #0]
 80151b0:	8811      	ldrh	r1, [r2, #0]
 80151b2:	428b      	cmp	r3, r1
 80151b4:	d20b      	bcs.n	80151ce <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 80151b6:	4a11      	ldr	r2, [pc, #68]	; (80151fc <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80151b8:	6812      	ldr	r2, [r2, #0]
 80151ba:	b112      	cbz	r2, 80151c2 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 80151bc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80151c0:	b9c0      	cbnz	r0, 80151f4 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 80151c2:	4a0f      	ldr	r2, [pc, #60]	; (8015200 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 80151c4:	6811      	ldr	r1, [r2, #0]
 80151c6:	2214      	movs	r2, #20
 80151c8:	4353      	muls	r3, r2
 80151ca:	58c8      	ldr	r0, [r1, r3]
 80151cc:	4770      	bx	lr
 80151ce:	4a0d      	ldr	r2, [pc, #52]	; (8015204 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 80151d0:	8812      	ldrh	r2, [r2, #0]
 80151d2:	440a      	add	r2, r1
 80151d4:	4293      	cmp	r3, r2
 80151d6:	da04      	bge.n	80151e2 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 80151d8:	4a08      	ldr	r2, [pc, #32]	; (80151fc <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80151da:	6812      	ldr	r2, [r2, #0]
 80151dc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80151e0:	4770      	bx	lr
 80151e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80151e6:	4293      	cmp	r3, r2
 80151e8:	d103      	bne.n	80151f2 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 80151ea:	4b07      	ldr	r3, [pc, #28]	; (8015208 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80151f0:	4770      	bx	lr
 80151f2:	2000      	movs	r0, #0
 80151f4:	4770      	bx	lr
 80151f6:	bf00      	nop
 80151f8:	2400e4dc 	.word	0x2400e4dc
 80151fc:	2400e4c0 	.word	0x2400e4c0
 8015200:	2400e4e4 	.word	0x2400e4e4
 8015204:	2400e4e0 	.word	0x2400e4e0
 8015208:	2400e454 	.word	0x2400e454

0801520c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801520c:	4b24      	ldr	r3, [pc, #144]	; (80152a0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801520e:	8802      	ldrh	r2, [r0, #0]
 8015210:	8818      	ldrh	r0, [r3, #0]
 8015212:	4282      	cmp	r2, r0
 8015214:	d221      	bcs.n	801525a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8015216:	4b23      	ldr	r3, [pc, #140]	; (80152a4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8015218:	6819      	ldr	r1, [r3, #0]
 801521a:	2314      	movs	r3, #20
 801521c:	fb03 1302 	mla	r3, r3, r2, r1
 8015220:	6858      	ldr	r0, [r3, #4]
 8015222:	2800      	cmp	r0, #0
 8015224:	d03a      	beq.n	801529c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8015226:	4920      	ldr	r1, [pc, #128]	; (80152a8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8015228:	6809      	ldr	r1, [r1, #0]
 801522a:	2900      	cmp	r1, #0
 801522c:	d036      	beq.n	801529c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801522e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015232:	2900      	cmp	r1, #0
 8015234:	d032      	beq.n	801529c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8015236:	891a      	ldrh	r2, [r3, #8]
 8015238:	8958      	ldrh	r0, [r3, #10]
 801523a:	4350      	muls	r0, r2
 801523c:	7c5a      	ldrb	r2, [r3, #17]
 801523e:	7cdb      	ldrb	r3, [r3, #19]
 8015240:	0952      	lsrs	r2, r2, #5
 8015242:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8015246:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801524a:	2b0b      	cmp	r3, #11
 801524c:	bf18      	it	ne
 801524e:	0040      	lslne	r0, r0, #1
 8015250:	3003      	adds	r0, #3
 8015252:	f020 0003 	bic.w	r0, r0, #3
 8015256:	4408      	add	r0, r1
 8015258:	4770      	bx	lr
 801525a:	4b14      	ldr	r3, [pc, #80]	; (80152ac <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801525c:	881b      	ldrh	r3, [r3, #0]
 801525e:	4403      	add	r3, r0
 8015260:	429a      	cmp	r2, r3
 8015262:	da1a      	bge.n	801529a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8015264:	4b12      	ldr	r3, [pc, #72]	; (80152b0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8015266:	1a10      	subs	r0, r2, r0
 8015268:	210e      	movs	r1, #14
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	fb01 3000 	mla	r0, r1, r0, r3
 8015270:	7b03      	ldrb	r3, [r0, #12]
 8015272:	f003 031f 	and.w	r3, r3, #31
 8015276:	2b0b      	cmp	r3, #11
 8015278:	d10b      	bne.n	8015292 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801527a:	8903      	ldrh	r3, [r0, #8]
 801527c:	8940      	ldrh	r0, [r0, #10]
 801527e:	4358      	muls	r0, r3
 8015280:	4b09      	ldr	r3, [pc, #36]	; (80152a8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8015282:	3003      	adds	r0, #3
 8015284:	6819      	ldr	r1, [r3, #0]
 8015286:	f020 0303 	bic.w	r3, r0, #3
 801528a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801528e:	4418      	add	r0, r3
 8015290:	4770      	bx	lr
 8015292:	2b0d      	cmp	r3, #13
 8015294:	d101      	bne.n	801529a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8015296:	300d      	adds	r0, #13
 8015298:	4770      	bx	lr
 801529a:	2000      	movs	r0, #0
 801529c:	4770      	bx	lr
 801529e:	bf00      	nop
 80152a0:	2400e4dc 	.word	0x2400e4dc
 80152a4:	2400e4e4 	.word	0x2400e4e4
 80152a8:	2400e4c0 	.word	0x2400e4c0
 80152ac:	2400e4e0 	.word	0x2400e4e0
 80152b0:	2400e4c4 	.word	0x2400e4c4

080152b4 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 80152b4:	4a17      	ldr	r2, [pc, #92]	; (8015314 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 80152b6:	b510      	push	{r4, lr}
 80152b8:	8803      	ldrh	r3, [r0, #0]
 80152ba:	8812      	ldrh	r2, [r2, #0]
 80152bc:	4293      	cmp	r3, r2
 80152be:	d20c      	bcs.n	80152da <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 80152c0:	4a15      	ldr	r2, [pc, #84]	; (8015318 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 80152c2:	2114      	movs	r1, #20
 80152c4:	6812      	ldr	r2, [r2, #0]
 80152c6:	fb01 2303 	mla	r3, r1, r3, r2
 80152ca:	7c58      	ldrb	r0, [r3, #17]
 80152cc:	0942      	lsrs	r2, r0, #5
 80152ce:	7cd8      	ldrb	r0, [r3, #19]
 80152d0:	f3c0 1042 	ubfx	r0, r0, #5, #3
 80152d4:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80152d8:	bd10      	pop	{r4, pc}
 80152da:	4910      	ldr	r1, [pc, #64]	; (801531c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 80152dc:	8809      	ldrh	r1, [r1, #0]
 80152de:	4411      	add	r1, r2
 80152e0:	428b      	cmp	r3, r1
 80152e2:	da09      	bge.n	80152f8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 80152e4:	1a9b      	subs	r3, r3, r2
 80152e6:	4a0e      	ldr	r2, [pc, #56]	; (8015320 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 80152e8:	210e      	movs	r1, #14
 80152ea:	6812      	ldr	r2, [r2, #0]
 80152ec:	fb01 2303 	mla	r3, r1, r3, r2
 80152f0:	7b18      	ldrb	r0, [r3, #12]
 80152f2:	f000 001f 	and.w	r0, r0, #31
 80152f6:	e7ef      	b.n	80152d8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 80152f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80152fc:	4293      	cmp	r3, r2
 80152fe:	d106      	bne.n	801530e <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8015300:	f7f7 fc18 	bl	800cb34 <_ZN8touchgfx3HAL3lcdEv>
 8015304:	6803      	ldr	r3, [r0, #0]
 8015306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801530a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801530c:	4718      	bx	r3
 801530e:	2000      	movs	r0, #0
 8015310:	e7e2      	b.n	80152d8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8015312:	bf00      	nop
 8015314:	2400e4dc 	.word	0x2400e4dc
 8015318:	2400e4e4 	.word	0x2400e4e4
 801531c:	2400e4e0 	.word	0x2400e4e0
 8015320:	2400e4c4 	.word	0x2400e4c4

08015324 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8015324:	2018      	movs	r0, #24
 8015326:	4770      	bx	lr

08015328 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8015328:	2001      	movs	r0, #1
 801532a:	4770      	bx	lr

0801532c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801532c:	4b02      	ldr	r3, [pc, #8]	; (8015338 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 801532e:	8818      	ldrh	r0, [r3, #0]
 8015330:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8015334:	b280      	uxth	r0, r0
 8015336:	4770      	bx	lr
 8015338:	2400e44e 	.word	0x2400e44e

0801533c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801533c:	2bff      	cmp	r3, #255	; 0xff
 801533e:	d040      	beq.n	80153c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 8015340:	2a2c      	cmp	r2, #44	; 0x2c
 8015342:	d02a      	beq.n	801539a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 8015344:	d80f      	bhi.n	8015366 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 8015346:	2a08      	cmp	r2, #8
 8015348:	d037      	beq.n	80153ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801534a:	d805      	bhi.n	8015358 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 801534c:	2a04      	cmp	r2, #4
 801534e:	d032      	beq.n	80153b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 8015350:	2a05      	cmp	r2, #5
 8015352:	d02e      	beq.n	80153b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8015354:	2000      	movs	r0, #0
 8015356:	4770      	bx	lr
 8015358:	2a0a      	cmp	r2, #10
 801535a:	d02e      	beq.n	80153ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801535c:	d301      	bcc.n	8015362 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 801535e:	2a0b      	cmp	r2, #11
 8015360:	d1f8      	bne.n	8015354 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015362:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8015364:	4770      	bx	lr
 8015366:	2a30      	cmp	r2, #48	; 0x30
 8015368:	d029      	beq.n	80153be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801536a:	d808      	bhi.n	801537e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 801536c:	2a2e      	cmp	r2, #46	; 0x2e
 801536e:	684b      	ldr	r3, [r1, #4]
 8015370:	d01a      	beq.n	80153a8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8015372:	d90b      	bls.n	801538c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 8015374:	781b      	ldrb	r3, [r3, #0]
 8015376:	2b00      	cmp	r3, #0
 8015378:	d1ec      	bne.n	8015354 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801537a:	6a00      	ldr	r0, [r0, #32]
 801537c:	4770      	bx	lr
 801537e:	2a32      	cmp	r2, #50	; 0x32
 8015380:	d01d      	beq.n	80153be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8015382:	d301      	bcc.n	8015388 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 8015384:	2a33      	cmp	r2, #51	; 0x33
 8015386:	d1e5      	bne.n	8015354 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015388:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801538a:	4770      	bx	lr
 801538c:	781b      	ldrb	r3, [r3, #0]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d0f3      	beq.n	801537a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 8015392:	2b01      	cmp	r3, #1
 8015394:	d1de      	bne.n	8015354 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015396:	6900      	ldr	r0, [r0, #16]
 8015398:	4770      	bx	lr
 801539a:	684b      	ldr	r3, [r1, #4]
 801539c:	781b      	ldrb	r3, [r3, #0]
 801539e:	b133      	cbz	r3, 80153ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 80153a0:	2b01      	cmp	r3, #1
 80153a2:	d1d7      	bne.n	8015354 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80153a4:	6880      	ldr	r0, [r0, #8]
 80153a6:	4770      	bx	lr
 80153a8:	781b      	ldrb	r3, [r3, #0]
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d1d2      	bne.n	8015354 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80153ae:	6980      	ldr	r0, [r0, #24]
 80153b0:	4770      	bx	lr
 80153b2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80153b4:	4770      	bx	lr
 80153b6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80153b8:	4770      	bx	lr
 80153ba:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80153bc:	4770      	bx	lr
 80153be:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80153c0:	4770      	bx	lr
 80153c2:	2a2c      	cmp	r2, #44	; 0x2c
 80153c4:	d02a      	beq.n	801541c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 80153c6:	d80f      	bhi.n	80153e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 80153c8:	2a08      	cmp	r2, #8
 80153ca:	d035      	beq.n	8015438 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 80153cc:	d805      	bhi.n	80153da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80153ce:	2a04      	cmp	r2, #4
 80153d0:	d030      	beq.n	8015434 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 80153d2:	2a05      	cmp	r2, #5
 80153d4:	d1be      	bne.n	8015354 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80153d6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80153d8:	4770      	bx	lr
 80153da:	2a0a      	cmp	r2, #10
 80153dc:	d02c      	beq.n	8015438 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 80153de:	d301      	bcc.n	80153e4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 80153e0:	2a0b      	cmp	r2, #11
 80153e2:	d1b7      	bne.n	8015354 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80153e4:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80153e6:	4770      	bx	lr
 80153e8:	2a30      	cmp	r2, #48	; 0x30
 80153ea:	d027      	beq.n	801543c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 80153ec:	d808      	bhi.n	8015400 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 80153ee:	2a2e      	cmp	r2, #46	; 0x2e
 80153f0:	684b      	ldr	r3, [r1, #4]
 80153f2:	d01a      	beq.n	801542a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 80153f4:	d90b      	bls.n	801540e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 80153f6:	781b      	ldrb	r3, [r3, #0]
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d1ab      	bne.n	8015354 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80153fc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80153fe:	4770      	bx	lr
 8015400:	2a32      	cmp	r2, #50	; 0x32
 8015402:	d01b      	beq.n	801543c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8015404:	d301      	bcc.n	801540a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 8015406:	2a33      	cmp	r2, #51	; 0x33
 8015408:	d1a4      	bne.n	8015354 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801540a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801540c:	4770      	bx	lr
 801540e:	781b      	ldrb	r3, [r3, #0]
 8015410:	2b00      	cmp	r3, #0
 8015412:	d0f3      	beq.n	80153fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 8015414:	2b01      	cmp	r3, #1
 8015416:	d19d      	bne.n	8015354 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015418:	6940      	ldr	r0, [r0, #20]
 801541a:	4770      	bx	lr
 801541c:	684b      	ldr	r3, [r1, #4]
 801541e:	781b      	ldrb	r3, [r3, #0]
 8015420:	b133      	cbz	r3, 8015430 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 8015422:	2b01      	cmp	r3, #1
 8015424:	d196      	bne.n	8015354 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015426:	68c0      	ldr	r0, [r0, #12]
 8015428:	4770      	bx	lr
 801542a:	781b      	ldrb	r3, [r3, #0]
 801542c:	2b00      	cmp	r3, #0
 801542e:	d191      	bne.n	8015354 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015430:	69c0      	ldr	r0, [r0, #28]
 8015432:	4770      	bx	lr
 8015434:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8015436:	4770      	bx	lr
 8015438:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801543a:	4770      	bx	lr
 801543c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801543e:	4770      	bx	lr

08015440 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015444:	b085      	sub	sp, #20
 8015446:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8015448:	9203      	str	r2, [sp, #12]
 801544a:	6870      	ldr	r0, [r6, #4]
 801544c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8015450:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8015454:	9101      	str	r1, [sp, #4]
 8015456:	fa1f f885 	uxth.w	r8, r5
 801545a:	43ed      	mvns	r5, r5
 801545c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8015460:	b2ed      	uxtb	r5, r5
 8015462:	fb00 2404 	mla	r4, r0, r4, r2
 8015466:	6832      	ldr	r2, [r6, #0]
 8015468:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801546c:	4414      	add	r4, r2
 801546e:	f8dc 2000 	ldr.w	r2, [ip]
 8015472:	9202      	str	r2, [sp, #8]
 8015474:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8015478:	f102 0e04 	add.w	lr, r2, #4
 801547c:	9a01      	ldr	r2, [sp, #4]
 801547e:	2a00      	cmp	r2, #0
 8015480:	dc03      	bgt.n	801548a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8015482:	9a03      	ldr	r2, [sp, #12]
 8015484:	2a00      	cmp	r2, #0
 8015486:	f340 8116 	ble.w	80156b6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801548a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801548c:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8015490:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8015494:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015496:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801549a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801549e:	2b00      	cmp	r3, #0
 80154a0:	dd0e      	ble.n	80154c0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80154a2:	1406      	asrs	r6, r0, #16
 80154a4:	d405      	bmi.n	80154b2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80154a6:	4556      	cmp	r6, sl
 80154a8:	da03      	bge.n	80154b2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80154aa:	1416      	asrs	r6, r2, #16
 80154ac:	d401      	bmi.n	80154b2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80154ae:	454e      	cmp	r6, r9
 80154b0:	db07      	blt.n	80154c2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80154b2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80154b4:	3b01      	subs	r3, #1
 80154b6:	3403      	adds	r4, #3
 80154b8:	4430      	add	r0, r6
 80154ba:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80154bc:	4432      	add	r2, r6
 80154be:	e7ee      	b.n	801549e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80154c0:	d063      	beq.n	801558a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80154c2:	1e5e      	subs	r6, r3, #1
 80154c4:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80154c6:	fb07 0706 	mla	r7, r7, r6, r0
 80154ca:	143f      	asrs	r7, r7, #16
 80154cc:	d454      	bmi.n	8015578 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80154ce:	4557      	cmp	r7, sl
 80154d0:	da52      	bge.n	8015578 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80154d2:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80154d4:	fb07 2606 	mla	r6, r7, r6, r2
 80154d8:	1436      	asrs	r6, r6, #16
 80154da:	d44d      	bmi.n	8015578 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80154dc:	454e      	cmp	r6, r9
 80154de:	da4b      	bge.n	8015578 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80154e0:	1ce6      	adds	r6, r4, #3
 80154e2:	4699      	mov	r9, r3
 80154e4:	f1b9 0f00 	cmp.w	r9, #0
 80154e8:	f106 0603 	add.w	r6, r6, #3
 80154ec:	dd48      	ble.n	8015580 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80154ee:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 80154f2:	1417      	asrs	r7, r2, #16
 80154f4:	9902      	ldr	r1, [sp, #8]
 80154f6:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80154fa:	f109 39ff 	add.w	r9, r9, #4294967295
 80154fe:	fb0b 1707 	mla	r7, fp, r7, r1
 8015502:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8015506:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015508:	f817 700a 	ldrb.w	r7, [r7, sl]
 801550c:	fb1b fb05 	smulbb	fp, fp, r5
 8015510:	4408      	add	r0, r1
 8015512:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015514:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8015518:	440a      	add	r2, r1
 801551a:	eb0e 0a07 	add.w	sl, lr, r7
 801551e:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8015522:	fb07 b708 	mla	r7, r7, r8, fp
 8015526:	b2bf      	uxth	r7, r7
 8015528:	f107 0b01 	add.w	fp, r7, #1
 801552c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8015530:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8015534:	fb1b fb05 	smulbb	fp, fp, r5
 8015538:	123f      	asrs	r7, r7, #8
 801553a:	f806 7c06 	strb.w	r7, [r6, #-6]
 801553e:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8015542:	fb07 b708 	mla	r7, r7, r8, fp
 8015546:	b2bf      	uxth	r7, r7
 8015548:	f107 0b01 	add.w	fp, r7, #1
 801554c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8015550:	123f      	asrs	r7, r7, #8
 8015552:	f806 7c05 	strb.w	r7, [r6, #-5]
 8015556:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801555a:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801555e:	fb1a fa05 	smulbb	sl, sl, r5
 8015562:	fb07 a708 	mla	r7, r7, r8, sl
 8015566:	b2bf      	uxth	r7, r7
 8015568:	f107 0a01 	add.w	sl, r7, #1
 801556c:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8015570:	123f      	asrs	r7, r7, #8
 8015572:	f806 7c04 	strb.w	r7, [r6, #-4]
 8015576:	e7b5      	b.n	80154e4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8015578:	2700      	movs	r7, #0
 801557a:	1bde      	subs	r6, r3, r7
 801557c:	2e00      	cmp	r6, #0
 801557e:	dc42      	bgt.n	8015606 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8015580:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015584:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015588:	441c      	add	r4, r3
 801558a:	9b01      	ldr	r3, [sp, #4]
 801558c:	2b00      	cmp	r3, #0
 801558e:	f340 8092 	ble.w	80156b6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8015592:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015596:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015598:	ee30 0a04 	vadd.f32	s0, s0, s8
 801559c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80155a0:	eef0 6a62 	vmov.f32	s13, s5
 80155a4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80155a8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80155ac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80155b0:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 80155b4:	eef0 6a43 	vmov.f32	s13, s6
 80155b8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80155bc:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 80155c0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80155c4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80155c8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80155cc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80155d0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80155d4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80155d8:	ee12 2a90 	vmov	r2, s5
 80155dc:	eef0 2a47 	vmov.f32	s5, s14
 80155e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80155e4:	ee13 2a10 	vmov	r2, s6
 80155e8:	9311      	str	r3, [sp, #68]	; 0x44
 80155ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80155ec:	eeb0 3a67 	vmov.f32	s6, s15
 80155f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80155f4:	9312      	str	r3, [sp, #72]	; 0x48
 80155f6:	9b01      	ldr	r3, [sp, #4]
 80155f8:	9a03      	ldr	r2, [sp, #12]
 80155fa:	3b01      	subs	r3, #1
 80155fc:	9301      	str	r3, [sp, #4]
 80155fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015600:	bf08      	it	eq
 8015602:	4613      	moveq	r3, r2
 8015604:	e73a      	b.n	801547c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8015606:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801560a:	d44e      	bmi.n	80156aa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801560c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8015610:	4556      	cmp	r6, sl
 8015612:	dd4a      	ble.n	80156aa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015614:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8015618:	d447      	bmi.n	80156aa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801561a:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801561e:	4559      	cmp	r1, fp
 8015620:	dd43      	ble.n	80156aa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015622:	fa0f f986 	sxth.w	r9, r6
 8015626:	9902      	ldr	r1, [sp, #8]
 8015628:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801562c:	fb0b 1909 	mla	r9, fp, r9, r1
 8015630:	f814 b006 	ldrb.w	fp, [r4, r6]
 8015634:	f819 900a 	ldrb.w	r9, [r9, sl]
 8015638:	fb1b fb05 	smulbb	fp, fp, r5
 801563c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8015640:	eb0e 0a09 	add.w	sl, lr, r9
 8015644:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8015648:	fb09 b908 	mla	r9, r9, r8, fp
 801564c:	fa1f f989 	uxth.w	r9, r9
 8015650:	f109 0b01 	add.w	fp, r9, #1
 8015654:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015658:	ea4f 2929 	mov.w	r9, r9, asr #8
 801565c:	f804 9006 	strb.w	r9, [r4, r6]
 8015660:	4426      	add	r6, r4
 8015662:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8015666:	f896 b001 	ldrb.w	fp, [r6, #1]
 801566a:	fb1b fb05 	smulbb	fp, fp, r5
 801566e:	fb09 b908 	mla	r9, r9, r8, fp
 8015672:	fa1f f989 	uxth.w	r9, r9
 8015676:	f109 0b01 	add.w	fp, r9, #1
 801567a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801567e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015682:	f886 9001 	strb.w	r9, [r6, #1]
 8015686:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801568a:	f896 a002 	ldrb.w	sl, [r6, #2]
 801568e:	fb1a fa05 	smulbb	sl, sl, r5
 8015692:	fb09 a908 	mla	r9, r9, r8, sl
 8015696:	fa1f f989 	uxth.w	r9, r9
 801569a:	f109 0a01 	add.w	sl, r9, #1
 801569e:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 80156a2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80156a6:	f886 9002 	strb.w	r9, [r6, #2]
 80156aa:	9911      	ldr	r1, [sp, #68]	; 0x44
 80156ac:	3701      	adds	r7, #1
 80156ae:	4408      	add	r0, r1
 80156b0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80156b2:	440a      	add	r2, r1
 80156b4:	e761      	b.n	801557a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80156b6:	b005      	add	sp, #20
 80156b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080156bc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80156bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156c0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80156c2:	4693      	mov	fp, r2
 80156c4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80156c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80156ca:	6868      	ldr	r0, [r5, #4]
 80156cc:	6877      	ldr	r7, [r6, #4]
 80156ce:	9100      	str	r1, [sp, #0]
 80156d0:	3704      	adds	r7, #4
 80156d2:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80156d6:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 80156da:	fb00 2404 	mla	r4, r0, r4, r2
 80156de:	682a      	ldr	r2, [r5, #0]
 80156e0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80156e4:	4414      	add	r4, r2
 80156e6:	6832      	ldr	r2, [r6, #0]
 80156e8:	9201      	str	r2, [sp, #4]
 80156ea:	9a00      	ldr	r2, [sp, #0]
 80156ec:	2a00      	cmp	r2, #0
 80156ee:	dc03      	bgt.n	80156f8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80156f0:	f1bb 0f00 	cmp.w	fp, #0
 80156f4:	f340 80bc 	ble.w	8015870 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80156f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80156fa:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 80156fe:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8015702:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015704:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8015708:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801570c:	2b00      	cmp	r3, #0
 801570e:	dd0c      	ble.n	801572a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8015710:	1405      	asrs	r5, r0, #16
 8015712:	d405      	bmi.n	8015720 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8015714:	4555      	cmp	r5, sl
 8015716:	da03      	bge.n	8015720 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8015718:	1415      	asrs	r5, r2, #16
 801571a:	d401      	bmi.n	8015720 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801571c:	454d      	cmp	r5, r9
 801571e:	db05      	blt.n	801572c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015720:	4440      	add	r0, r8
 8015722:	4472      	add	r2, lr
 8015724:	3b01      	subs	r3, #1
 8015726:	3403      	adds	r4, #3
 8015728:	e7f0      	b.n	801570c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801572a:	d03f      	beq.n	80157ac <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801572c:	1e5d      	subs	r5, r3, #1
 801572e:	fb08 0c05 	mla	ip, r8, r5, r0
 8015732:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8015736:	d42e      	bmi.n	8015796 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015738:	45d4      	cmp	ip, sl
 801573a:	da2c      	bge.n	8015796 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801573c:	fb0e 2505 	mla	r5, lr, r5, r2
 8015740:	142d      	asrs	r5, r5, #16
 8015742:	d428      	bmi.n	8015796 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015744:	454d      	cmp	r5, r9
 8015746:	da26      	bge.n	8015796 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015748:	1ce5      	adds	r5, r4, #3
 801574a:	469c      	mov	ip, r3
 801574c:	f1bc 0f00 	cmp.w	ip, #0
 8015750:	f105 0503 	add.w	r5, r5, #3
 8015754:	dd25      	ble.n	80157a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8015756:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801575a:	ea4f 4922 	mov.w	r9, r2, asr #16
 801575e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015762:	4472      	add	r2, lr
 8015764:	468a      	mov	sl, r1
 8015766:	9901      	ldr	r1, [sp, #4]
 8015768:	fb0a 1909 	mla	r9, sl, r9, r1
 801576c:	1401      	asrs	r1, r0, #16
 801576e:	4440      	add	r0, r8
 8015770:	f819 9001 	ldrb.w	r9, [r9, r1]
 8015774:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8015778:	eb07 0a09 	add.w	sl, r7, r9
 801577c:	f817 9009 	ldrb.w	r9, [r7, r9]
 8015780:	f805 9c06 	strb.w	r9, [r5, #-6]
 8015784:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8015788:	f805 9c05 	strb.w	r9, [r5, #-5]
 801578c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8015790:	f805 9c04 	strb.w	r9, [r5, #-4]
 8015794:	e7da      	b.n	801574c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8015796:	2500      	movs	r5, #0
 8015798:	eba3 0c05 	sub.w	ip, r3, r5
 801579c:	f1bc 0f00 	cmp.w	ip, #0
 80157a0:	dc3b      	bgt.n	801581a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 80157a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80157a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80157aa:	441c      	add	r4, r3
 80157ac:	9b00      	ldr	r3, [sp, #0]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	dd5e      	ble.n	8015870 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80157b2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80157b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80157b8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80157bc:	eeb0 6a62 	vmov.f32	s12, s5
 80157c0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80157c4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80157c8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80157cc:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 80157d0:	eeb0 6a43 	vmov.f32	s12, s6
 80157d4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80157d8:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 80157dc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80157e0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80157e4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80157e8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80157ec:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80157f0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80157f4:	ee12 2a90 	vmov	r2, s5
 80157f8:	eef0 2a47 	vmov.f32	s5, s14
 80157fc:	fb92 f8f3 	sdiv	r8, r2, r3
 8015800:	ee13 2a10 	vmov	r2, s6
 8015804:	eeb0 3a67 	vmov.f32	s6, s15
 8015808:	fb92 fef3 	sdiv	lr, r2, r3
 801580c:	9b00      	ldr	r3, [sp, #0]
 801580e:	3b01      	subs	r3, #1
 8015810:	9300      	str	r3, [sp, #0]
 8015812:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015814:	bf08      	it	eq
 8015816:	465b      	moveq	r3, fp
 8015818:	e767      	b.n	80156ea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801581a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801581e:	d423      	bmi.n	8015868 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8015820:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8015824:	45cc      	cmp	ip, r9
 8015826:	dd1f      	ble.n	8015868 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8015828:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801582c:	d41c      	bmi.n	8015868 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801582e:	68f1      	ldr	r1, [r6, #12]
 8015830:	4551      	cmp	r1, sl
 8015832:	dd19      	ble.n	8015868 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8015834:	fa0f fc8c 	sxth.w	ip, ip
 8015838:	9901      	ldr	r1, [sp, #4]
 801583a:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801583e:	f81c c009 	ldrb.w	ip, [ip, r9]
 8015842:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8015846:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801584a:	eb07 090c 	add.w	r9, r7, ip
 801584e:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8015852:	f804 a00c 	strb.w	sl, [r4, ip]
 8015856:	44a4      	add	ip, r4
 8015858:	f899 a001 	ldrb.w	sl, [r9, #1]
 801585c:	f88c a001 	strb.w	sl, [ip, #1]
 8015860:	f899 9002 	ldrb.w	r9, [r9, #2]
 8015864:	f88c 9002 	strb.w	r9, [ip, #2]
 8015868:	4440      	add	r0, r8
 801586a:	4472      	add	r2, lr
 801586c:	3501      	adds	r5, #1
 801586e:	e793      	b.n	8015798 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8015870:	b003      	add	sp, #12
 8015872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015876 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015876:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801587a:	b085      	sub	sp, #20
 801587c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015880:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015882:	9202      	str	r2, [sp, #8]
 8015884:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8015888:	6860      	ldr	r0, [r4, #4]
 801588a:	9203      	str	r2, [sp, #12]
 801588c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8015890:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8015894:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8015898:	fb00 2505 	mla	r5, r0, r5, r2
 801589c:	6822      	ldr	r2, [r4, #0]
 801589e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80158a2:	4415      	add	r5, r2
 80158a4:	f8dc 2000 	ldr.w	r2, [ip]
 80158a8:	9200      	str	r2, [sp, #0]
 80158aa:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80158ae:	3204      	adds	r2, #4
 80158b0:	9201      	str	r2, [sp, #4]
 80158b2:	2900      	cmp	r1, #0
 80158b4:	dc03      	bgt.n	80158be <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80158b6:	9a02      	ldr	r2, [sp, #8]
 80158b8:	2a00      	cmp	r2, #0
 80158ba:	f340 8127 	ble.w	8015b0c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80158be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80158c0:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80158c4:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80158c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80158ca:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80158ce:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	dd0d      	ble.n	80158f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80158d6:	1422      	asrs	r2, r4, #16
 80158d8:	d405      	bmi.n	80158e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80158da:	4542      	cmp	r2, r8
 80158dc:	da03      	bge.n	80158e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80158de:	1402      	asrs	r2, r0, #16
 80158e0:	d401      	bmi.n	80158e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80158e2:	42ba      	cmp	r2, r7
 80158e4:	db06      	blt.n	80158f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80158e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80158e8:	4474      	add	r4, lr
 80158ea:	3b01      	subs	r3, #1
 80158ec:	3503      	adds	r5, #3
 80158ee:	4410      	add	r0, r2
 80158f0:	e7ef      	b.n	80158d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80158f2:	d075      	beq.n	80159e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 80158f4:	1e5a      	subs	r2, r3, #1
 80158f6:	fb0e 4602 	mla	r6, lr, r2, r4
 80158fa:	1436      	asrs	r6, r6, #16
 80158fc:	d465      	bmi.n	80159ca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80158fe:	4546      	cmp	r6, r8
 8015900:	da63      	bge.n	80159ca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8015902:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8015904:	fb06 0202 	mla	r2, r6, r2, r0
 8015908:	1412      	asrs	r2, r2, #16
 801590a:	d45e      	bmi.n	80159ca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801590c:	42ba      	cmp	r2, r7
 801590e:	da5c      	bge.n	80159ca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8015910:	1cef      	adds	r7, r5, #3
 8015912:	4699      	mov	r9, r3
 8015914:	f1b9 0f00 	cmp.w	r9, #0
 8015918:	dd5d      	ble.n	80159d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801591a:	1402      	asrs	r2, r0, #16
 801591c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8015920:	1426      	asrs	r6, r4, #16
 8015922:	4692      	mov	sl, r2
 8015924:	9a00      	ldr	r2, [sp, #0]
 8015926:	fb08 220a 	mla	r2, r8, sl, r2
 801592a:	5d92      	ldrb	r2, [r2, r6]
 801592c:	9e01      	ldr	r6, [sp, #4]
 801592e:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8015932:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8015936:	d041      	beq.n	80159bc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8015938:	9a03      	ldr	r2, [sp, #12]
 801593a:	fa5f fb86 	uxtb.w	fp, r6
 801593e:	fb02 f808 	mul.w	r8, r2, r8
 8015942:	f108 0201 	add.w	r2, r8, #1
 8015946:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801594a:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801594e:	1212      	asrs	r2, r2, #8
 8015950:	fa1f fa82 	uxth.w	sl, r2
 8015954:	43d2      	mvns	r2, r2
 8015956:	fb1b fb0a 	smulbb	fp, fp, sl
 801595a:	b2d2      	uxtb	r2, r2
 801595c:	fb08 b802 	mla	r8, r8, r2, fp
 8015960:	fa1f f888 	uxth.w	r8, r8
 8015964:	f108 0b01 	add.w	fp, r8, #1
 8015968:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801596c:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8015970:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8015974:	fb1b fb0a 	smulbb	fp, fp, sl
 8015978:	ea4f 2828 	mov.w	r8, r8, asr #8
 801597c:	fb16 fa0a 	smulbb	sl, r6, sl
 8015980:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8015984:	f807 8c03 	strb.w	r8, [r7, #-3]
 8015988:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801598c:	fb06 aa02 	mla	sl, r6, r2, sl
 8015990:	fb08 b802 	mla	r8, r8, r2, fp
 8015994:	fa1f fa8a 	uxth.w	sl, sl
 8015998:	fa1f f888 	uxth.w	r8, r8
 801599c:	f10a 0601 	add.w	r6, sl, #1
 80159a0:	f108 0b01 	add.w	fp, r8, #1
 80159a4:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 80159a8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80159ac:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80159b0:	ea4f 2828 	mov.w	r8, r8, asr #8
 80159b4:	f807 ac01 	strb.w	sl, [r7, #-1]
 80159b8:	f807 8c02 	strb.w	r8, [r7, #-2]
 80159bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80159be:	4474      	add	r4, lr
 80159c0:	3703      	adds	r7, #3
 80159c2:	f109 39ff 	add.w	r9, r9, #4294967295
 80159c6:	4410      	add	r0, r2
 80159c8:	e7a4      	b.n	8015914 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80159ca:	f04f 0800 	mov.w	r8, #0
 80159ce:	eba3 0208 	sub.w	r2, r3, r8
 80159d2:	2a00      	cmp	r2, #0
 80159d4:	dc3b      	bgt.n	8015a4e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80159d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80159da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80159de:	441d      	add	r5, r3
 80159e0:	2900      	cmp	r1, #0
 80159e2:	f340 8093 	ble.w	8015b0c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80159e6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80159ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80159ec:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80159f0:	3901      	subs	r1, #1
 80159f2:	eeb0 6a62 	vmov.f32	s12, s5
 80159f6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80159fa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80159fe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015a02:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8015a06:	eeb0 6a43 	vmov.f32	s12, s6
 8015a0a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015a0e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8015a12:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015a16:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015a1a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015a1e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015a22:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015a26:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015a2a:	ee12 2a90 	vmov	r2, s5
 8015a2e:	eef0 2a47 	vmov.f32	s5, s14
 8015a32:	fb92 fef3 	sdiv	lr, r2, r3
 8015a36:	ee13 2a10 	vmov	r2, s6
 8015a3a:	eeb0 3a67 	vmov.f32	s6, s15
 8015a3e:	fb92 f3f3 	sdiv	r3, r2, r3
 8015a42:	9a02      	ldr	r2, [sp, #8]
 8015a44:	9312      	str	r3, [sp, #72]	; 0x48
 8015a46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015a48:	bf08      	it	eq
 8015a4a:	4613      	moveq	r3, r2
 8015a4c:	e731      	b.n	80158b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8015a4e:	1427      	asrs	r7, r4, #16
 8015a50:	d456      	bmi.n	8015b00 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8015a52:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8015a56:	42be      	cmp	r6, r7
 8015a58:	dd52      	ble.n	8015b00 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8015a5a:	ea5f 4920 	movs.w	r9, r0, asr #16
 8015a5e:	d44f      	bmi.n	8015b00 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8015a60:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8015a64:	454a      	cmp	r2, r9
 8015a66:	dd4b      	ble.n	8015b00 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8015a68:	9a00      	ldr	r2, [sp, #0]
 8015a6a:	b236      	sxth	r6, r6
 8015a6c:	fb09 2606 	mla	r6, r9, r6, r2
 8015a70:	5df2      	ldrb	r2, [r6, r7]
 8015a72:	9e01      	ldr	r6, [sp, #4]
 8015a74:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8015a78:	0e3a      	lsrs	r2, r7, #24
 8015a7a:	d041      	beq.n	8015b00 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8015a7c:	9e03      	ldr	r6, [sp, #12]
 8015a7e:	fa5f fb87 	uxtb.w	fp, r7
 8015a82:	4372      	muls	r2, r6
 8015a84:	1c56      	adds	r6, r2, #1
 8015a86:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8015a8a:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8015a8e:	1212      	asrs	r2, r2, #8
 8015a90:	f815 9006 	ldrb.w	r9, [r5, r6]
 8015a94:	fa1f fa82 	uxth.w	sl, r2
 8015a98:	43d2      	mvns	r2, r2
 8015a9a:	fb1b fb0a 	smulbb	fp, fp, sl
 8015a9e:	b2d2      	uxtb	r2, r2
 8015aa0:	fb09 b902 	mla	r9, r9, r2, fp
 8015aa4:	fa1f f989 	uxth.w	r9, r9
 8015aa8:	f109 0b01 	add.w	fp, r9, #1
 8015aac:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015ab0:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8015ab4:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8015ab8:	fb1b fb0a 	smulbb	fp, fp, sl
 8015abc:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015ac0:	fb17 fa0a 	smulbb	sl, r7, sl
 8015ac4:	f805 9006 	strb.w	r9, [r5, r6]
 8015ac8:	442e      	add	r6, r5
 8015aca:	78b7      	ldrb	r7, [r6, #2]
 8015acc:	f896 9001 	ldrb.w	r9, [r6, #1]
 8015ad0:	fb07 aa02 	mla	sl, r7, r2, sl
 8015ad4:	fb09 b902 	mla	r9, r9, r2, fp
 8015ad8:	fa1f fa8a 	uxth.w	sl, sl
 8015adc:	fa1f f989 	uxth.w	r9, r9
 8015ae0:	f10a 0701 	add.w	r7, sl, #1
 8015ae4:	f109 0b01 	add.w	fp, r9, #1
 8015ae8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8015aec:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015af0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8015af4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015af8:	f886 a002 	strb.w	sl, [r6, #2]
 8015afc:	f886 9001 	strb.w	r9, [r6, #1]
 8015b00:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015b02:	4474      	add	r4, lr
 8015b04:	f108 0801 	add.w	r8, r8, #1
 8015b08:	4410      	add	r0, r2
 8015b0a:	e760      	b.n	80159ce <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8015b0c:	b005      	add	sp, #20
 8015b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015b12 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015b12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b16:	b085      	sub	sp, #20
 8015b18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015b1c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8015b1e:	9203      	str	r2, [sp, #12]
 8015b20:	6868      	ldr	r0, [r5, #4]
 8015b22:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8015b26:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8015b2a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8015b2e:	fb00 2404 	mla	r4, r0, r4, r2
 8015b32:	682a      	ldr	r2, [r5, #0]
 8015b34:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015b38:	4414      	add	r4, r2
 8015b3a:	f8dc 2000 	ldr.w	r2, [ip]
 8015b3e:	9201      	str	r2, [sp, #4]
 8015b40:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8015b44:	3204      	adds	r2, #4
 8015b46:	9202      	str	r2, [sp, #8]
 8015b48:	2900      	cmp	r1, #0
 8015b4a:	dc03      	bgt.n	8015b54 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8015b4c:	9a03      	ldr	r2, [sp, #12]
 8015b4e:	2a00      	cmp	r2, #0
 8015b50:	f340 8137 	ble.w	8015dc2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8015b54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015b56:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8015b5a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8015b5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015b60:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8015b64:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	dd0d      	ble.n	8015b88 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8015b6c:	1405      	asrs	r5, r0, #16
 8015b6e:	d405      	bmi.n	8015b7c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8015b70:	4545      	cmp	r5, r8
 8015b72:	da03      	bge.n	8015b7c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8015b74:	1415      	asrs	r5, r2, #16
 8015b76:	d401      	bmi.n	8015b7c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8015b78:	42bd      	cmp	r5, r7
 8015b7a:	db06      	blt.n	8015b8a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8015b7c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8015b7e:	4470      	add	r0, lr
 8015b80:	3b01      	subs	r3, #1
 8015b82:	3403      	adds	r4, #3
 8015b84:	442a      	add	r2, r5
 8015b86:	e7ef      	b.n	8015b68 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8015b88:	d070      	beq.n	8015c6c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8015b8a:	1e5d      	subs	r5, r3, #1
 8015b8c:	fb0e 0605 	mla	r6, lr, r5, r0
 8015b90:	1436      	asrs	r6, r6, #16
 8015b92:	d462      	bmi.n	8015c5a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8015b94:	4546      	cmp	r6, r8
 8015b96:	da60      	bge.n	8015c5a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8015b98:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8015b9a:	fb06 2505 	mla	r5, r6, r5, r2
 8015b9e:	142d      	asrs	r5, r5, #16
 8015ba0:	d45b      	bmi.n	8015c5a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8015ba2:	42bd      	cmp	r5, r7
 8015ba4:	da59      	bge.n	8015c5a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8015ba6:	1ce5      	adds	r5, r4, #3
 8015ba8:	469a      	mov	sl, r3
 8015baa:	f1ba 0f00 	cmp.w	sl, #0
 8015bae:	dd58      	ble.n	8015c62 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8015bb0:	1416      	asrs	r6, r2, #16
 8015bb2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8015bb6:	1407      	asrs	r7, r0, #16
 8015bb8:	46b1      	mov	r9, r6
 8015bba:	9e01      	ldr	r6, [sp, #4]
 8015bbc:	fb08 6609 	mla	r6, r8, r9, r6
 8015bc0:	5df6      	ldrb	r6, [r6, r7]
 8015bc2:	9f02      	ldr	r7, [sp, #8]
 8015bc4:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8015bc8:	0e37      	lsrs	r7, r6, #24
 8015bca:	2fff      	cmp	r7, #255	; 0xff
 8015bcc:	f000 80f0 	beq.w	8015db0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8015bd0:	fa5f f887 	uxtb.w	r8, r7
 8015bd4:	b3d7      	cbz	r7, 8015c4c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8015bd6:	fa1f f788 	uxth.w	r7, r8
 8015bda:	ea6f 0808 	mvn.w	r8, r8
 8015bde:	fa5f fb86 	uxtb.w	fp, r6
 8015be2:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8015be6:	fa5f f888 	uxtb.w	r8, r8
 8015bea:	fb1b fb07 	smulbb	fp, fp, r7
 8015bee:	fb09 b908 	mla	r9, r9, r8, fp
 8015bf2:	fa1f f989 	uxth.w	r9, r9
 8015bf6:	f109 0b01 	add.w	fp, r9, #1
 8015bfa:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015bfe:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8015c02:	fb1b fb08 	smulbb	fp, fp, r8
 8015c06:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015c0a:	f805 9c03 	strb.w	r9, [r5, #-3]
 8015c0e:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8015c12:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8015c16:	fb09 b907 	mla	r9, r9, r7, fp
 8015c1a:	fa1f f989 	uxth.w	r9, r9
 8015c1e:	f109 0b01 	add.w	fp, r9, #1
 8015c22:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015c26:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015c2a:	f805 9c02 	strb.w	r9, [r5, #-2]
 8015c2e:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8015c32:	fb19 f808 	smulbb	r8, r9, r8
 8015c36:	fb06 8607 	mla	r6, r6, r7, r8
 8015c3a:	b2b6      	uxth	r6, r6
 8015c3c:	f106 0801 	add.w	r8, r6, #1
 8015c40:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8015c44:	ea4f 2828 	mov.w	r8, r8, asr #8
 8015c48:	f805 8c01 	strb.w	r8, [r5, #-1]
 8015c4c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8015c4e:	4470      	add	r0, lr
 8015c50:	3503      	adds	r5, #3
 8015c52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015c56:	4432      	add	r2, r6
 8015c58:	e7a7      	b.n	8015baa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8015c5a:	2600      	movs	r6, #0
 8015c5c:	1b9d      	subs	r5, r3, r6
 8015c5e:	2d00      	cmp	r5, #0
 8015c60:	dc3b      	bgt.n	8015cda <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8015c62:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015c66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015c6a:	441c      	add	r4, r3
 8015c6c:	2900      	cmp	r1, #0
 8015c6e:	f340 80a8 	ble.w	8015dc2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8015c72:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015c76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c78:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015c7c:	3901      	subs	r1, #1
 8015c7e:	eeb0 6a62 	vmov.f32	s12, s5
 8015c82:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015c86:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015c8a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015c8e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8015c92:	eeb0 6a43 	vmov.f32	s12, s6
 8015c96:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015c9a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8015c9e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015ca2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015ca6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015caa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015cae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015cb2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015cb6:	ee12 2a90 	vmov	r2, s5
 8015cba:	eef0 2a47 	vmov.f32	s5, s14
 8015cbe:	fb92 fef3 	sdiv	lr, r2, r3
 8015cc2:	ee13 2a10 	vmov	r2, s6
 8015cc6:	eeb0 3a67 	vmov.f32	s6, s15
 8015cca:	fb92 f3f3 	sdiv	r3, r2, r3
 8015cce:	9a03      	ldr	r2, [sp, #12]
 8015cd0:	9312      	str	r3, [sp, #72]	; 0x48
 8015cd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015cd4:	bf08      	it	eq
 8015cd6:	4613      	moveq	r3, r2
 8015cd8:	e736      	b.n	8015b48 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8015cda:	ea5f 4820 	movs.w	r8, r0, asr #16
 8015cde:	d457      	bmi.n	8015d90 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8015ce0:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8015ce4:	4547      	cmp	r7, r8
 8015ce6:	dd53      	ble.n	8015d90 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8015ce8:	ea5f 4922 	movs.w	r9, r2, asr #16
 8015cec:	d450      	bmi.n	8015d90 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8015cee:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8015cf2:	454d      	cmp	r5, r9
 8015cf4:	dd4c      	ble.n	8015d90 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8015cf6:	9d01      	ldr	r5, [sp, #4]
 8015cf8:	b23f      	sxth	r7, r7
 8015cfa:	fb09 5707 	mla	r7, r9, r7, r5
 8015cfe:	f817 5008 	ldrb.w	r5, [r7, r8]
 8015d02:	9f02      	ldr	r7, [sp, #8]
 8015d04:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8015d08:	0e2f      	lsrs	r7, r5, #24
 8015d0a:	2fff      	cmp	r7, #255	; 0xff
 8015d0c:	d045      	beq.n	8015d9a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8015d0e:	fa5f f987 	uxtb.w	r9, r7
 8015d12:	b3ef      	cbz	r7, 8015d90 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8015d14:	fa1f f889 	uxth.w	r8, r9
 8015d18:	ea6f 0909 	mvn.w	r9, r9
 8015d1c:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8015d20:	fa5f fb85 	uxtb.w	fp, r5
 8015d24:	f814 a007 	ldrb.w	sl, [r4, r7]
 8015d28:	fa5f f989 	uxtb.w	r9, r9
 8015d2c:	fb1b fb08 	smulbb	fp, fp, r8
 8015d30:	fb0a ba09 	mla	sl, sl, r9, fp
 8015d34:	fa1f fa8a 	uxth.w	sl, sl
 8015d38:	f10a 0b01 	add.w	fp, sl, #1
 8015d3c:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8015d40:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8015d44:	f804 a007 	strb.w	sl, [r4, r7]
 8015d48:	4427      	add	r7, r4
 8015d4a:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8015d4e:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8015d52:	f897 b001 	ldrb.w	fp, [r7, #1]
 8015d56:	fb1b fb09 	smulbb	fp, fp, r9
 8015d5a:	fb0a ba08 	mla	sl, sl, r8, fp
 8015d5e:	fa1f fa8a 	uxth.w	sl, sl
 8015d62:	f10a 0b01 	add.w	fp, sl, #1
 8015d66:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8015d6a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8015d6e:	f887 a001 	strb.w	sl, [r7, #1]
 8015d72:	f897 a002 	ldrb.w	sl, [r7, #2]
 8015d76:	fb1a f909 	smulbb	r9, sl, r9
 8015d7a:	fb05 9508 	mla	r5, r5, r8, r9
 8015d7e:	b2ad      	uxth	r5, r5
 8015d80:	f105 0901 	add.w	r9, r5, #1
 8015d84:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8015d88:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015d8c:	f887 9002 	strb.w	r9, [r7, #2]
 8015d90:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8015d92:	4470      	add	r0, lr
 8015d94:	3601      	adds	r6, #1
 8015d96:	442a      	add	r2, r5
 8015d98:	e760      	b.n	8015c5c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8015d9a:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8015d9e:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8015da2:	55e5      	strb	r5, [r4, r7]
 8015da4:	4427      	add	r7, r4
 8015da6:	0c2d      	lsrs	r5, r5, #16
 8015da8:	f887 8001 	strb.w	r8, [r7, #1]
 8015dac:	70bd      	strb	r5, [r7, #2]
 8015dae:	e7ef      	b.n	8015d90 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8015db0:	0a37      	lsrs	r7, r6, #8
 8015db2:	f805 6c03 	strb.w	r6, [r5, #-3]
 8015db6:	0c36      	lsrs	r6, r6, #16
 8015db8:	f805 7c02 	strb.w	r7, [r5, #-2]
 8015dbc:	f805 6c01 	strb.w	r6, [r5, #-1]
 8015dc0:	e744      	b.n	8015c4c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8015dc2:	b005      	add	sp, #20
 8015dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015dc8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015dc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dcc:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8015dce:	9201      	str	r2, [sp, #4]
 8015dd0:	6870      	ldr	r0, [r6, #4]
 8015dd2:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8015dd6:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8015dda:	fa1f fe85 	uxth.w	lr, r5
 8015dde:	43ed      	mvns	r5, r5
 8015de0:	f8dc 8000 	ldr.w	r8, [ip]
 8015de4:	b2ed      	uxtb	r5, r5
 8015de6:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8015dea:	fb00 2404 	mla	r4, r0, r4, r2
 8015dee:	6832      	ldr	r2, [r6, #0]
 8015df0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015df4:	4414      	add	r4, r2
 8015df6:	2900      	cmp	r1, #0
 8015df8:	dc03      	bgt.n	8015e02 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8015dfa:	9a01      	ldr	r2, [sp, #4]
 8015dfc:	2a00      	cmp	r2, #0
 8015dfe:	f340 810d 	ble.w	801601c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8015e02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015e04:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8015e08:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8015e0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015e0e:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8015e12:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	dd0e      	ble.n	8015e38 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015e1a:	1406      	asrs	r6, r0, #16
 8015e1c:	d405      	bmi.n	8015e2a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8015e1e:	4556      	cmp	r6, sl
 8015e20:	da03      	bge.n	8015e2a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8015e22:	1416      	asrs	r6, r2, #16
 8015e24:	d401      	bmi.n	8015e2a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8015e26:	454e      	cmp	r6, r9
 8015e28:	db07      	blt.n	8015e3a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015e2a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8015e2c:	3b01      	subs	r3, #1
 8015e2e:	3403      	adds	r4, #3
 8015e30:	4430      	add	r0, r6
 8015e32:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8015e34:	4432      	add	r2, r6
 8015e36:	e7ee      	b.n	8015e16 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8015e38:	d060      	beq.n	8015efc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8015e3a:	1e5e      	subs	r6, r3, #1
 8015e3c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8015e3e:	fb07 0706 	mla	r7, r7, r6, r0
 8015e42:	143f      	asrs	r7, r7, #16
 8015e44:	d451      	bmi.n	8015eea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8015e46:	4557      	cmp	r7, sl
 8015e48:	da4f      	bge.n	8015eea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8015e4a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8015e4c:	fb07 2606 	mla	r6, r7, r6, r2
 8015e50:	1436      	asrs	r6, r6, #16
 8015e52:	d44a      	bmi.n	8015eea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8015e54:	454e      	cmp	r6, r9
 8015e56:	da48      	bge.n	8015eea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8015e58:	1ce6      	adds	r6, r4, #3
 8015e5a:	4699      	mov	r9, r3
 8015e5c:	f1b9 0f00 	cmp.w	r9, #0
 8015e60:	f106 0603 	add.w	r6, r6, #3
 8015e64:	dd45      	ble.n	8015ef2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8015e66:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8015e6a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8015e6e:	1417      	asrs	r7, r2, #16
 8015e70:	f109 39ff 	add.w	r9, r9, #4294967295
 8015e74:	fb0b a707 	mla	r7, fp, r7, sl
 8015e78:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8015e7c:	fb1b fb05 	smulbb	fp, fp, r5
 8015e80:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8015e84:	eb08 0a07 	add.w	sl, r8, r7
 8015e88:	f818 7007 	ldrb.w	r7, [r8, r7]
 8015e8c:	fb07 b70e 	mla	r7, r7, lr, fp
 8015e90:	b2bf      	uxth	r7, r7
 8015e92:	f107 0b01 	add.w	fp, r7, #1
 8015e96:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8015e9a:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8015e9e:	fb1b fb05 	smulbb	fp, fp, r5
 8015ea2:	123f      	asrs	r7, r7, #8
 8015ea4:	f806 7c06 	strb.w	r7, [r6, #-6]
 8015ea8:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8015eac:	fb07 b70e 	mla	r7, r7, lr, fp
 8015eb0:	b2bf      	uxth	r7, r7
 8015eb2:	f107 0b01 	add.w	fp, r7, #1
 8015eb6:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8015eba:	123f      	asrs	r7, r7, #8
 8015ebc:	f806 7c05 	strb.w	r7, [r6, #-5]
 8015ec0:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8015ec4:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8015ec8:	fb1a fa05 	smulbb	sl, sl, r5
 8015ecc:	fb07 a70e 	mla	r7, r7, lr, sl
 8015ed0:	b2bf      	uxth	r7, r7
 8015ed2:	f107 0a01 	add.w	sl, r7, #1
 8015ed6:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8015eda:	123f      	asrs	r7, r7, #8
 8015edc:	f806 7c04 	strb.w	r7, [r6, #-4]
 8015ee0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8015ee2:	4438      	add	r0, r7
 8015ee4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8015ee6:	443a      	add	r2, r7
 8015ee8:	e7b8      	b.n	8015e5c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8015eea:	2700      	movs	r7, #0
 8015eec:	1bde      	subs	r6, r3, r7
 8015eee:	2e00      	cmp	r6, #0
 8015ef0:	dc3f      	bgt.n	8015f72 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8015ef2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015ef6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015efa:	441c      	add	r4, r3
 8015efc:	2900      	cmp	r1, #0
 8015efe:	f340 808d 	ble.w	801601c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8015f02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015f06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f08:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015f0c:	3901      	subs	r1, #1
 8015f0e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015f12:	eef0 6a62 	vmov.f32	s13, s5
 8015f16:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015f1a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015f1e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015f22:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8015f26:	eef0 6a43 	vmov.f32	s13, s6
 8015f2a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015f2e:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8015f32:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015f36:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015f3a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015f3e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015f42:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015f46:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015f4a:	ee12 2a90 	vmov	r2, s5
 8015f4e:	eef0 2a47 	vmov.f32	s5, s14
 8015f52:	fb92 f3f3 	sdiv	r3, r2, r3
 8015f56:	ee13 2a10 	vmov	r2, s6
 8015f5a:	930f      	str	r3, [sp, #60]	; 0x3c
 8015f5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f5e:	eeb0 3a67 	vmov.f32	s6, s15
 8015f62:	fb92 f3f3 	sdiv	r3, r2, r3
 8015f66:	9a01      	ldr	r2, [sp, #4]
 8015f68:	9310      	str	r3, [sp, #64]	; 0x40
 8015f6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f6c:	bf08      	it	eq
 8015f6e:	4613      	moveq	r3, r2
 8015f70:	e741      	b.n	8015df6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8015f72:	ea5f 4920 	movs.w	r9, r0, asr #16
 8015f76:	d44b      	bmi.n	8016010 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8015f78:	f8dc b008 	ldr.w	fp, [ip, #8]
 8015f7c:	45cb      	cmp	fp, r9
 8015f7e:	dd47      	ble.n	8016010 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8015f80:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8015f84:	d444      	bmi.n	8016010 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8015f86:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8015f8a:	4556      	cmp	r6, sl
 8015f8c:	dd40      	ble.n	8016010 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8015f8e:	fa0f f68b 	sxth.w	r6, fp
 8015f92:	fb0a 9906 	mla	r9, sl, r6, r9
 8015f96:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8015f9a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8015f9e:	f814 b006 	ldrb.w	fp, [r4, r6]
 8015fa2:	fb1b fb05 	smulbb	fp, fp, r5
 8015fa6:	eb08 0a09 	add.w	sl, r8, r9
 8015faa:	f818 9009 	ldrb.w	r9, [r8, r9]
 8015fae:	fb09 b90e 	mla	r9, r9, lr, fp
 8015fb2:	fa1f f989 	uxth.w	r9, r9
 8015fb6:	f109 0b01 	add.w	fp, r9, #1
 8015fba:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015fbe:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015fc2:	f804 9006 	strb.w	r9, [r4, r6]
 8015fc6:	4426      	add	r6, r4
 8015fc8:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8015fcc:	f896 b001 	ldrb.w	fp, [r6, #1]
 8015fd0:	fb1b fb05 	smulbb	fp, fp, r5
 8015fd4:	fb09 b90e 	mla	r9, r9, lr, fp
 8015fd8:	fa1f f989 	uxth.w	r9, r9
 8015fdc:	f109 0b01 	add.w	fp, r9, #1
 8015fe0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015fe4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015fe8:	f886 9001 	strb.w	r9, [r6, #1]
 8015fec:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8015ff0:	f896 a002 	ldrb.w	sl, [r6, #2]
 8015ff4:	fb1a fa05 	smulbb	sl, sl, r5
 8015ff8:	fb09 a90e 	mla	r9, r9, lr, sl
 8015ffc:	fa1f f989 	uxth.w	r9, r9
 8016000:	f109 0a01 	add.w	sl, r9, #1
 8016004:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8016008:	ea4f 2929 	mov.w	r9, r9, asr #8
 801600c:	f886 9002 	strb.w	r9, [r6, #2]
 8016010:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8016012:	3701      	adds	r7, #1
 8016014:	4430      	add	r0, r6
 8016016:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8016018:	4432      	add	r2, r6
 801601a:	e767      	b.n	8015eec <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801601c:	b003      	add	sp, #12
 801601e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016022 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016022:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016026:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8016028:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801602c:	9201      	str	r2, [sp, #4]
 801602e:	6868      	ldr	r0, [r5, #4]
 8016030:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8016032:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8016036:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 801603a:	fb00 2404 	mla	r4, r0, r4, r2
 801603e:	682a      	ldr	r2, [r5, #0]
 8016040:	f8d7 8000 	ldr.w	r8, [r7]
 8016044:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016048:	4414      	add	r4, r2
 801604a:	2900      	cmp	r1, #0
 801604c:	dc03      	bgt.n	8016056 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801604e:	9a01      	ldr	r2, [sp, #4]
 8016050:	2a00      	cmp	r2, #0
 8016052:	f340 80af 	ble.w	80161b4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8016056:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016058:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801605c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8016060:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016062:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 8016066:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801606a:	2b00      	cmp	r3, #0
 801606c:	dd0c      	ble.n	8016088 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801606e:	1405      	asrs	r5, r0, #16
 8016070:	d405      	bmi.n	801607e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016072:	4555      	cmp	r5, sl
 8016074:	da03      	bge.n	801607e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016076:	1415      	asrs	r5, r2, #16
 8016078:	d401      	bmi.n	801607e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801607a:	454d      	cmp	r5, r9
 801607c:	db05      	blt.n	801608a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801607e:	4470      	add	r0, lr
 8016080:	4462      	add	r2, ip
 8016082:	3b01      	subs	r3, #1
 8016084:	3403      	adds	r4, #3
 8016086:	e7f0      	b.n	801606a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8016088:	d038      	beq.n	80160fc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801608a:	1e5d      	subs	r5, r3, #1
 801608c:	fb0e 0605 	mla	r6, lr, r5, r0
 8016090:	1436      	asrs	r6, r6, #16
 8016092:	d42a      	bmi.n	80160ea <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8016094:	4556      	cmp	r6, sl
 8016096:	da28      	bge.n	80160ea <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8016098:	fb0c 2505 	mla	r5, ip, r5, r2
 801609c:	142d      	asrs	r5, r5, #16
 801609e:	d424      	bmi.n	80160ea <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80160a0:	454d      	cmp	r5, r9
 80160a2:	da22      	bge.n	80160ea <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80160a4:	1ce6      	adds	r6, r4, #3
 80160a6:	4699      	mov	r9, r3
 80160a8:	f1b9 0f00 	cmp.w	r9, #0
 80160ac:	f106 0603 	add.w	r6, r6, #3
 80160b0:	dd1f      	ble.n	80160f2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 80160b2:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 80160b6:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80160ba:	1415      	asrs	r5, r2, #16
 80160bc:	4470      	add	r0, lr
 80160be:	4462      	add	r2, ip
 80160c0:	f109 39ff 	add.w	r9, r9, #4294967295
 80160c4:	fb0b a505 	mla	r5, fp, r5, sl
 80160c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80160cc:	eb08 0a05 	add.w	sl, r8, r5
 80160d0:	f818 5005 	ldrb.w	r5, [r8, r5]
 80160d4:	f806 5c06 	strb.w	r5, [r6, #-6]
 80160d8:	f89a 5001 	ldrb.w	r5, [sl, #1]
 80160dc:	f806 5c05 	strb.w	r5, [r6, #-5]
 80160e0:	f89a 5002 	ldrb.w	r5, [sl, #2]
 80160e4:	f806 5c04 	strb.w	r5, [r6, #-4]
 80160e8:	e7de      	b.n	80160a8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80160ea:	2600      	movs	r6, #0
 80160ec:	1b9d      	subs	r5, r3, r6
 80160ee:	2d00      	cmp	r5, #0
 80160f0:	dc38      	bgt.n	8016164 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80160f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80160f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80160fa:	441c      	add	r4, r3
 80160fc:	2900      	cmp	r1, #0
 80160fe:	dd59      	ble.n	80161b4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8016100:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016104:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016106:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801610a:	3901      	subs	r1, #1
 801610c:	eeb0 6a62 	vmov.f32	s12, s5
 8016110:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016114:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016118:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801611c:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8016120:	eeb0 6a43 	vmov.f32	s12, s6
 8016124:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016128:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801612c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016130:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016134:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016138:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801613c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016140:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016144:	ee12 2a90 	vmov	r2, s5
 8016148:	eef0 2a47 	vmov.f32	s5, s14
 801614c:	fb92 fef3 	sdiv	lr, r2, r3
 8016150:	ee13 2a10 	vmov	r2, s6
 8016154:	eeb0 3a67 	vmov.f32	s6, s15
 8016158:	fb92 fcf3 	sdiv	ip, r2, r3
 801615c:	9a01      	ldr	r2, [sp, #4]
 801615e:	bf08      	it	eq
 8016160:	4613      	moveq	r3, r2
 8016162:	e772      	b.n	801604a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8016164:	ea5f 4920 	movs.w	r9, r0, asr #16
 8016168:	d420      	bmi.n	80161ac <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801616a:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801616e:	45cb      	cmp	fp, r9
 8016170:	dd1c      	ble.n	80161ac <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8016172:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8016176:	d419      	bmi.n	80161ac <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8016178:	68fd      	ldr	r5, [r7, #12]
 801617a:	4555      	cmp	r5, sl
 801617c:	dd16      	ble.n	80161ac <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801617e:	fa0f f58b 	sxth.w	r5, fp
 8016182:	fb0a 9505 	mla	r5, sl, r5, r9
 8016186:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801618a:	f818 9005 	ldrb.w	r9, [r8, r5]
 801618e:	eb08 0b05 	add.w	fp, r8, r5
 8016192:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8016196:	f804 9005 	strb.w	r9, [r4, r5]
 801619a:	4425      	add	r5, r4
 801619c:	f89b 9001 	ldrb.w	r9, [fp, #1]
 80161a0:	f885 9001 	strb.w	r9, [r5, #1]
 80161a4:	f89b 9002 	ldrb.w	r9, [fp, #2]
 80161a8:	f885 9002 	strb.w	r9, [r5, #2]
 80161ac:	4470      	add	r0, lr
 80161ae:	4462      	add	r2, ip
 80161b0:	3601      	adds	r6, #1
 80161b2:	e79b      	b.n	80160ec <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 80161b4:	b003      	add	sp, #12
 80161b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080161ba <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80161ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161be:	b085      	sub	sp, #20
 80161c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80161c4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80161c6:	9202      	str	r2, [sp, #8]
 80161c8:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80161cc:	6860      	ldr	r0, [r4, #4]
 80161ce:	9203      	str	r2, [sp, #12]
 80161d0:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80161d4:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 80161d8:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 80161dc:	fb00 2505 	mla	r5, r0, r5, r2
 80161e0:	6822      	ldr	r2, [r4, #0]
 80161e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80161e6:	4415      	add	r5, r2
 80161e8:	f8dc 2000 	ldr.w	r2, [ip]
 80161ec:	9201      	str	r2, [sp, #4]
 80161ee:	2900      	cmp	r1, #0
 80161f0:	dc03      	bgt.n	80161fa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80161f2:	9a02      	ldr	r2, [sp, #8]
 80161f4:	2a00      	cmp	r2, #0
 80161f6:	f340 8122 	ble.w	801643e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80161fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80161fc:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016200:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8016204:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016206:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801620a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801620e:	2b00      	cmp	r3, #0
 8016210:	dd0d      	ble.n	801622e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8016212:	1422      	asrs	r2, r4, #16
 8016214:	d405      	bmi.n	8016222 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8016216:	4542      	cmp	r2, r8
 8016218:	da03      	bge.n	8016222 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801621a:	1402      	asrs	r2, r0, #16
 801621c:	d401      	bmi.n	8016222 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801621e:	42ba      	cmp	r2, r7
 8016220:	db06      	blt.n	8016230 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8016222:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016224:	4474      	add	r4, lr
 8016226:	3b01      	subs	r3, #1
 8016228:	3503      	adds	r5, #3
 801622a:	4410      	add	r0, r2
 801622c:	e7ef      	b.n	801620e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801622e:	d072      	beq.n	8016316 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8016230:	1e5a      	subs	r2, r3, #1
 8016232:	fb0e 4602 	mla	r6, lr, r2, r4
 8016236:	1436      	asrs	r6, r6, #16
 8016238:	d462      	bmi.n	8016300 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801623a:	4546      	cmp	r6, r8
 801623c:	da60      	bge.n	8016300 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801623e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8016240:	fb06 0202 	mla	r2, r6, r2, r0
 8016244:	1412      	asrs	r2, r2, #16
 8016246:	d45b      	bmi.n	8016300 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8016248:	42ba      	cmp	r2, r7
 801624a:	da59      	bge.n	8016300 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801624c:	1cef      	adds	r7, r5, #3
 801624e:	4699      	mov	r9, r3
 8016250:	f1b9 0f00 	cmp.w	r9, #0
 8016254:	dd5a      	ble.n	801630c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016256:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801625a:	1426      	asrs	r6, r4, #16
 801625c:	1402      	asrs	r2, r0, #16
 801625e:	fb08 6202 	mla	r2, r8, r2, r6
 8016262:	9e01      	ldr	r6, [sp, #4]
 8016264:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8016268:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801626c:	d041      	beq.n	80162f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801626e:	9a03      	ldr	r2, [sp, #12]
 8016270:	fa5f fb86 	uxtb.w	fp, r6
 8016274:	fb02 f808 	mul.w	r8, r2, r8
 8016278:	f108 0201 	add.w	r2, r8, #1
 801627c:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8016280:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8016284:	1212      	asrs	r2, r2, #8
 8016286:	fa1f fa82 	uxth.w	sl, r2
 801628a:	43d2      	mvns	r2, r2
 801628c:	fb1b fb0a 	smulbb	fp, fp, sl
 8016290:	b2d2      	uxtb	r2, r2
 8016292:	fb08 b802 	mla	r8, r8, r2, fp
 8016296:	fa1f f888 	uxth.w	r8, r8
 801629a:	f108 0b01 	add.w	fp, r8, #1
 801629e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80162a2:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 80162a6:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80162aa:	fb1b fb0a 	smulbb	fp, fp, sl
 80162ae:	ea4f 2828 	mov.w	r8, r8, asr #8
 80162b2:	fb16 fa0a 	smulbb	sl, r6, sl
 80162b6:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 80162ba:	f807 8c03 	strb.w	r8, [r7, #-3]
 80162be:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 80162c2:	fb06 aa02 	mla	sl, r6, r2, sl
 80162c6:	fb08 b802 	mla	r8, r8, r2, fp
 80162ca:	fa1f fa8a 	uxth.w	sl, sl
 80162ce:	fa1f f888 	uxth.w	r8, r8
 80162d2:	f10a 0601 	add.w	r6, sl, #1
 80162d6:	f108 0b01 	add.w	fp, r8, #1
 80162da:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 80162de:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80162e2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80162e6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80162ea:	f807 ac01 	strb.w	sl, [r7, #-1]
 80162ee:	f807 8c02 	strb.w	r8, [r7, #-2]
 80162f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80162f4:	4474      	add	r4, lr
 80162f6:	3703      	adds	r7, #3
 80162f8:	f109 39ff 	add.w	r9, r9, #4294967295
 80162fc:	4410      	add	r0, r2
 80162fe:	e7a7      	b.n	8016250 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8016300:	f04f 0800 	mov.w	r8, #0
 8016304:	eba3 0208 	sub.w	r2, r3, r8
 8016308:	2a00      	cmp	r2, #0
 801630a:	dc3b      	bgt.n	8016384 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801630c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016310:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016314:	441d      	add	r5, r3
 8016316:	2900      	cmp	r1, #0
 8016318:	f340 8091 	ble.w	801643e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801631c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016320:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016322:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016326:	3901      	subs	r1, #1
 8016328:	eeb0 6a62 	vmov.f32	s12, s5
 801632c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016330:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016334:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016338:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801633c:	eeb0 6a43 	vmov.f32	s12, s6
 8016340:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016344:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8016348:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801634c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016350:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016354:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016358:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801635c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016360:	ee12 2a90 	vmov	r2, s5
 8016364:	eef0 2a47 	vmov.f32	s5, s14
 8016368:	fb92 fef3 	sdiv	lr, r2, r3
 801636c:	ee13 2a10 	vmov	r2, s6
 8016370:	eeb0 3a67 	vmov.f32	s6, s15
 8016374:	fb92 f3f3 	sdiv	r3, r2, r3
 8016378:	9a02      	ldr	r2, [sp, #8]
 801637a:	9312      	str	r3, [sp, #72]	; 0x48
 801637c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801637e:	bf08      	it	eq
 8016380:	4613      	moveq	r3, r2
 8016382:	e734      	b.n	80161ee <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8016384:	1427      	asrs	r7, r4, #16
 8016386:	d454      	bmi.n	8016432 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016388:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801638c:	42be      	cmp	r6, r7
 801638e:	dd50      	ble.n	8016432 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016390:	ea5f 4920 	movs.w	r9, r0, asr #16
 8016394:	d44d      	bmi.n	8016432 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016396:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801639a:	454a      	cmp	r2, r9
 801639c:	dd49      	ble.n	8016432 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801639e:	b236      	sxth	r6, r6
 80163a0:	9a01      	ldr	r2, [sp, #4]
 80163a2:	fb09 7606 	mla	r6, r9, r6, r7
 80163a6:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 80163aa:	0e3a      	lsrs	r2, r7, #24
 80163ac:	d041      	beq.n	8016432 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80163ae:	9e03      	ldr	r6, [sp, #12]
 80163b0:	fa5f fb87 	uxtb.w	fp, r7
 80163b4:	4372      	muls	r2, r6
 80163b6:	1c56      	adds	r6, r2, #1
 80163b8:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80163bc:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 80163c0:	1212      	asrs	r2, r2, #8
 80163c2:	f815 9006 	ldrb.w	r9, [r5, r6]
 80163c6:	fa1f fa82 	uxth.w	sl, r2
 80163ca:	43d2      	mvns	r2, r2
 80163cc:	fb1b fb0a 	smulbb	fp, fp, sl
 80163d0:	b2d2      	uxtb	r2, r2
 80163d2:	fb09 b902 	mla	r9, r9, r2, fp
 80163d6:	fa1f f989 	uxth.w	r9, r9
 80163da:	f109 0b01 	add.w	fp, r9, #1
 80163de:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80163e2:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80163e6:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80163ea:	fb1b fb0a 	smulbb	fp, fp, sl
 80163ee:	ea4f 2929 	mov.w	r9, r9, asr #8
 80163f2:	fb17 fa0a 	smulbb	sl, r7, sl
 80163f6:	f805 9006 	strb.w	r9, [r5, r6]
 80163fa:	442e      	add	r6, r5
 80163fc:	78b7      	ldrb	r7, [r6, #2]
 80163fe:	f896 9001 	ldrb.w	r9, [r6, #1]
 8016402:	fb07 aa02 	mla	sl, r7, r2, sl
 8016406:	fb09 b902 	mla	r9, r9, r2, fp
 801640a:	fa1f fa8a 	uxth.w	sl, sl
 801640e:	fa1f f989 	uxth.w	r9, r9
 8016412:	f10a 0701 	add.w	r7, sl, #1
 8016416:	f109 0b01 	add.w	fp, r9, #1
 801641a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801641e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016422:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016426:	ea4f 2929 	mov.w	r9, r9, asr #8
 801642a:	f886 a002 	strb.w	sl, [r6, #2]
 801642e:	f886 9001 	strb.w	r9, [r6, #1]
 8016432:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016434:	4474      	add	r4, lr
 8016436:	f108 0801 	add.w	r8, r8, #1
 801643a:	4410      	add	r0, r2
 801643c:	e762      	b.n	8016304 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801643e:	b005      	add	sp, #20
 8016440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016444 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016444:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016448:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801644a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801644e:	9201      	str	r2, [sp, #4]
 8016450:	6860      	ldr	r0, [r4, #4]
 8016452:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8016456:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 801645a:	fb00 2505 	mla	r5, r0, r5, r2
 801645e:	6822      	ldr	r2, [r4, #0]
 8016460:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016464:	4415      	add	r5, r2
 8016466:	f8dc 2000 	ldr.w	r2, [ip]
 801646a:	9200      	str	r2, [sp, #0]
 801646c:	2900      	cmp	r1, #0
 801646e:	dc03      	bgt.n	8016478 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8016470:	9a01      	ldr	r2, [sp, #4]
 8016472:	2a00      	cmp	r2, #0
 8016474:	f340 812b 	ble.w	80166ce <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016478:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801647a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801647e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8016482:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016484:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016488:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801648c:	2b00      	cmp	r3, #0
 801648e:	dd0e      	ble.n	80164ae <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8016490:	1422      	asrs	r2, r4, #16
 8016492:	d405      	bmi.n	80164a0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016494:	4572      	cmp	r2, lr
 8016496:	da03      	bge.n	80164a0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016498:	1402      	asrs	r2, r0, #16
 801649a:	d401      	bmi.n	80164a0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801649c:	42ba      	cmp	r2, r7
 801649e:	db07      	blt.n	80164b0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80164a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80164a2:	3b01      	subs	r3, #1
 80164a4:	3503      	adds	r5, #3
 80164a6:	4414      	add	r4, r2
 80164a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80164aa:	4410      	add	r0, r2
 80164ac:	e7ee      	b.n	801648c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80164ae:	d06f      	beq.n	8016590 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80164b0:	1e5a      	subs	r2, r3, #1
 80164b2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80164b4:	fb06 4602 	mla	r6, r6, r2, r4
 80164b8:	1436      	asrs	r6, r6, #16
 80164ba:	d45e      	bmi.n	801657a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80164bc:	4576      	cmp	r6, lr
 80164be:	da5c      	bge.n	801657a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80164c0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80164c2:	fb06 0202 	mla	r2, r6, r2, r0
 80164c6:	1412      	asrs	r2, r2, #16
 80164c8:	d457      	bmi.n	801657a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80164ca:	42ba      	cmp	r2, r7
 80164cc:	da55      	bge.n	801657a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80164ce:	1cee      	adds	r6, r5, #3
 80164d0:	469a      	mov	sl, r3
 80164d2:	f1ba 0f00 	cmp.w	sl, #0
 80164d6:	dd56      	ble.n	8016586 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80164d8:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80164dc:	1427      	asrs	r7, r4, #16
 80164de:	1402      	asrs	r2, r0, #16
 80164e0:	fb0e 7202 	mla	r2, lr, r2, r7
 80164e4:	9f00      	ldr	r7, [sp, #0]
 80164e6:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 80164ea:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 80164ee:	d03c      	beq.n	801656a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80164f0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80164f4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80164f8:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80164fc:	fa5f f28e 	uxtb.w	r2, lr
 8016500:	b2ff      	uxtb	r7, r7
 8016502:	f000 80dd 	beq.w	80166c0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8016506:	fa1f f882 	uxth.w	r8, r2
 801650a:	43d2      	mvns	r2, r2
 801650c:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8016510:	fb17 f708 	smulbb	r7, r7, r8
 8016514:	b2d2      	uxtb	r2, r2
 8016516:	fb19 f908 	smulbb	r9, r9, r8
 801651a:	fb0e 7702 	mla	r7, lr, r2, r7
 801651e:	fb1b f808 	smulbb	r8, fp, r8
 8016522:	b2bf      	uxth	r7, r7
 8016524:	f107 0e01 	add.w	lr, r7, #1
 8016528:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801652c:	123f      	asrs	r7, r7, #8
 801652e:	f806 7c03 	strb.w	r7, [r6, #-3]
 8016532:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8016536:	fb07 9902 	mla	r9, r7, r2, r9
 801653a:	fa1f f989 	uxth.w	r9, r9
 801653e:	f109 0701 	add.w	r7, r9, #1
 8016542:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8016546:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801654a:	fb07 8802 	mla	r8, r7, r2, r8
 801654e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016552:	fa1f f888 	uxth.w	r8, r8
 8016556:	f806 9c02 	strb.w	r9, [r6, #-2]
 801655a:	f108 0201 	add.w	r2, r8, #1
 801655e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8016562:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016566:	f806 8c01 	strb.w	r8, [r6, #-1]
 801656a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801656c:	3603      	adds	r6, #3
 801656e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016572:	4414      	add	r4, r2
 8016574:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016576:	4410      	add	r0, r2
 8016578:	e7ab      	b.n	80164d2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801657a:	f04f 0e00 	mov.w	lr, #0
 801657e:	eba3 020e 	sub.w	r2, r3, lr
 8016582:	2a00      	cmp	r2, #0
 8016584:	dc3d      	bgt.n	8016602 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8016586:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801658a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801658e:	441d      	add	r5, r3
 8016590:	2900      	cmp	r1, #0
 8016592:	f340 809c 	ble.w	80166ce <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016596:	ee30 0a04 	vadd.f32	s0, s0, s8
 801659a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801659c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80165a0:	3901      	subs	r1, #1
 80165a2:	eeb0 6a62 	vmov.f32	s12, s5
 80165a6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80165aa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80165ae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80165b2:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 80165b6:	eeb0 6a43 	vmov.f32	s12, s6
 80165ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80165be:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 80165c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80165c6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80165ca:	ee77 2a62 	vsub.f32	s5, s14, s5
 80165ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80165d2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80165d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80165da:	ee12 2a90 	vmov	r2, s5
 80165de:	eef0 2a47 	vmov.f32	s5, s14
 80165e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80165e6:	ee13 2a10 	vmov	r2, s6
 80165ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80165ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80165ee:	eeb0 3a67 	vmov.f32	s6, s15
 80165f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80165f6:	9a01      	ldr	r2, [sp, #4]
 80165f8:	9310      	str	r3, [sp, #64]	; 0x40
 80165fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80165fc:	bf08      	it	eq
 80165fe:	4613      	moveq	r3, r2
 8016600:	e734      	b.n	801646c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8016602:	1427      	asrs	r7, r4, #16
 8016604:	d44d      	bmi.n	80166a2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016606:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801660a:	42be      	cmp	r6, r7
 801660c:	dd49      	ble.n	80166a2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801660e:	ea5f 4820 	movs.w	r8, r0, asr #16
 8016612:	d446      	bmi.n	80166a2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016614:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016618:	4542      	cmp	r2, r8
 801661a:	dd42      	ble.n	80166a2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801661c:	b236      	sxth	r6, r6
 801661e:	9a00      	ldr	r2, [sp, #0]
 8016620:	fb08 7606 	mla	r6, r8, r6, r7
 8016624:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8016628:	0e3a      	lsrs	r2, r7, #24
 801662a:	d03a      	beq.n	80166a2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801662c:	2aff      	cmp	r2, #255	; 0xff
 801662e:	b2d6      	uxtb	r6, r2
 8016630:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8016634:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8016638:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801663c:	b2ff      	uxtb	r7, r7
 801663e:	d037      	beq.n	80166b0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8016640:	fa1f f986 	uxth.w	r9, r6
 8016644:	4472      	add	r2, lr
 8016646:	43f6      	mvns	r6, r6
 8016648:	f815 8002 	ldrb.w	r8, [r5, r2]
 801664c:	fb17 f709 	smulbb	r7, r7, r9
 8016650:	fb1a fa09 	smulbb	sl, sl, r9
 8016654:	b2f6      	uxtb	r6, r6
 8016656:	fb1b f909 	smulbb	r9, fp, r9
 801665a:	fb08 7706 	mla	r7, r8, r6, r7
 801665e:	b2bf      	uxth	r7, r7
 8016660:	f107 0801 	add.w	r8, r7, #1
 8016664:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8016668:	123f      	asrs	r7, r7, #8
 801666a:	54af      	strb	r7, [r5, r2]
 801666c:	442a      	add	r2, r5
 801666e:	7857      	ldrb	r7, [r2, #1]
 8016670:	fb07 aa06 	mla	sl, r7, r6, sl
 8016674:	fa1f fa8a 	uxth.w	sl, sl
 8016678:	f10a 0701 	add.w	r7, sl, #1
 801667c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016680:	7897      	ldrb	r7, [r2, #2]
 8016682:	fb07 9906 	mla	r9, r7, r6, r9
 8016686:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801668a:	fa1f f989 	uxth.w	r9, r9
 801668e:	f882 a001 	strb.w	sl, [r2, #1]
 8016692:	f109 0601 	add.w	r6, r9, #1
 8016696:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801669a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801669e:	f882 9002 	strb.w	r9, [r2, #2]
 80166a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80166a4:	f10e 0e01 	add.w	lr, lr, #1
 80166a8:	4414      	add	r4, r2
 80166aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80166ac:	4410      	add	r0, r2
 80166ae:	e766      	b.n	801657e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80166b0:	4472      	add	r2, lr
 80166b2:	54af      	strb	r7, [r5, r2]
 80166b4:	442a      	add	r2, r5
 80166b6:	f882 a001 	strb.w	sl, [r2, #1]
 80166ba:	f882 b002 	strb.w	fp, [r2, #2]
 80166be:	e7f0      	b.n	80166a2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80166c0:	f806 7c03 	strb.w	r7, [r6, #-3]
 80166c4:	f806 9c02 	strb.w	r9, [r6, #-2]
 80166c8:	f806 bc01 	strb.w	fp, [r6, #-1]
 80166cc:	e74d      	b.n	801656a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80166ce:	b003      	add	sp, #12
 80166d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080166d4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80166d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166d8:	b087      	sub	sp, #28
 80166da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80166de:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80166e0:	9204      	str	r2, [sp, #16]
 80166e2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80166e6:	6860      	ldr	r0, [r4, #4]
 80166e8:	9205      	str	r2, [sp, #20]
 80166ea:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 80166ee:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 80166f2:	9101      	str	r1, [sp, #4]
 80166f4:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 80166f8:	fb00 2505 	mla	r5, r0, r5, r2
 80166fc:	6822      	ldr	r2, [r4, #0]
 80166fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016702:	4415      	add	r5, r2
 8016704:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8016708:	3201      	adds	r2, #1
 801670a:	f022 0201 	bic.w	r2, r2, #1
 801670e:	9202      	str	r2, [sp, #8]
 8016710:	f8dc 2000 	ldr.w	r2, [ip]
 8016714:	9203      	str	r2, [sp, #12]
 8016716:	9a01      	ldr	r2, [sp, #4]
 8016718:	2a00      	cmp	r2, #0
 801671a:	dc03      	bgt.n	8016724 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801671c:	9a04      	ldr	r2, [sp, #16]
 801671e:	2a00      	cmp	r2, #0
 8016720:	f340 8135 	ble.w	801698e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8016724:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016726:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801672a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801672e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016730:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016734:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8016738:	2b00      	cmp	r3, #0
 801673a:	dd0d      	ble.n	8016758 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801673c:	1422      	asrs	r2, r4, #16
 801673e:	d405      	bmi.n	801674c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016740:	4542      	cmp	r2, r8
 8016742:	da03      	bge.n	801674c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016744:	1402      	asrs	r2, r0, #16
 8016746:	d401      	bmi.n	801674c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016748:	42ba      	cmp	r2, r7
 801674a:	db06      	blt.n	801675a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801674c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801674e:	4474      	add	r4, lr
 8016750:	3b01      	subs	r3, #1
 8016752:	3503      	adds	r5, #3
 8016754:	4410      	add	r0, r2
 8016756:	e7ef      	b.n	8016738 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8016758:	d077      	beq.n	801684a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801675a:	1e5a      	subs	r2, r3, #1
 801675c:	fb0e 4602 	mla	r6, lr, r2, r4
 8016760:	1436      	asrs	r6, r6, #16
 8016762:	d469      	bmi.n	8016838 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016764:	4546      	cmp	r6, r8
 8016766:	da67      	bge.n	8016838 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016768:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801676a:	fb06 0202 	mla	r2, r6, r2, r0
 801676e:	1412      	asrs	r2, r2, #16
 8016770:	d462      	bmi.n	8016838 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016772:	42ba      	cmp	r2, r7
 8016774:	da60      	bge.n	8016838 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016776:	1cee      	adds	r6, r5, #3
 8016778:	4699      	mov	r9, r3
 801677a:	f1b9 0f00 	cmp.w	r9, #0
 801677e:	dd5f      	ble.n	8016840 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8016780:	1422      	asrs	r2, r4, #16
 8016782:	9902      	ldr	r1, [sp, #8]
 8016784:	1407      	asrs	r7, r0, #16
 8016786:	fb01 2707 	mla	r7, r1, r7, r2
 801678a:	9903      	ldr	r1, [sp, #12]
 801678c:	087a      	lsrs	r2, r7, #1
 801678e:	5c8a      	ldrb	r2, [r1, r2]
 8016790:	07f9      	lsls	r1, r7, #31
 8016792:	bf54      	ite	pl
 8016794:	f002 020f 	andpl.w	r2, r2, #15
 8016798:	1112      	asrmi	r2, r2, #4
 801679a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801679e:	b2d2      	uxtb	r2, r2
 80167a0:	2a00      	cmp	r2, #0
 80167a2:	d042      	beq.n	801682a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80167a4:	497b      	ldr	r1, [pc, #492]	; (8016994 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 80167a6:	680f      	ldr	r7, [r1, #0]
 80167a8:	9905      	ldr	r1, [sp, #20]
 80167aa:	fa5f fb87 	uxtb.w	fp, r7
 80167ae:	434a      	muls	r2, r1
 80167b0:	f102 0801 	add.w	r8, r2, #1
 80167b4:	eb08 2222 	add.w	r2, r8, r2, asr #8
 80167b8:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 80167bc:	1212      	asrs	r2, r2, #8
 80167be:	fa1f fa82 	uxth.w	sl, r2
 80167c2:	43d2      	mvns	r2, r2
 80167c4:	fb1b fb0a 	smulbb	fp, fp, sl
 80167c8:	b2d2      	uxtb	r2, r2
 80167ca:	fb08 b802 	mla	r8, r8, r2, fp
 80167ce:	fa1f f888 	uxth.w	r8, r8
 80167d2:	f108 0b01 	add.w	fp, r8, #1
 80167d6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80167da:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80167de:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80167e2:	fb1b fb0a 	smulbb	fp, fp, sl
 80167e6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80167ea:	fb17 fa0a 	smulbb	sl, r7, sl
 80167ee:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 80167f2:	f806 8c03 	strb.w	r8, [r6, #-3]
 80167f6:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 80167fa:	fb07 aa02 	mla	sl, r7, r2, sl
 80167fe:	fb08 b802 	mla	r8, r8, r2, fp
 8016802:	fa1f fa8a 	uxth.w	sl, sl
 8016806:	fa1f f888 	uxth.w	r8, r8
 801680a:	f10a 0701 	add.w	r7, sl, #1
 801680e:	f108 0b01 	add.w	fp, r8, #1
 8016812:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016816:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801681a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801681e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016822:	f806 ac01 	strb.w	sl, [r6, #-1]
 8016826:	f806 8c02 	strb.w	r8, [r6, #-2]
 801682a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801682c:	4474      	add	r4, lr
 801682e:	3603      	adds	r6, #3
 8016830:	f109 39ff 	add.w	r9, r9, #4294967295
 8016834:	4410      	add	r0, r2
 8016836:	e7a0      	b.n	801677a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8016838:	2700      	movs	r7, #0
 801683a:	1bda      	subs	r2, r3, r7
 801683c:	2a00      	cmp	r2, #0
 801683e:	dc3e      	bgt.n	80168be <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8016840:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016844:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016848:	441d      	add	r5, r3
 801684a:	9b01      	ldr	r3, [sp, #4]
 801684c:	2b00      	cmp	r3, #0
 801684e:	f340 809e 	ble.w	801698e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8016852:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016856:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016858:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801685c:	eeb0 6a62 	vmov.f32	s12, s5
 8016860:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016864:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016868:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801686c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8016870:	eeb0 6a43 	vmov.f32	s12, s6
 8016874:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016878:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801687c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016880:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016884:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016888:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801688c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016890:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016894:	ee12 2a90 	vmov	r2, s5
 8016898:	eef0 2a47 	vmov.f32	s5, s14
 801689c:	fb92 fef3 	sdiv	lr, r2, r3
 80168a0:	ee13 2a10 	vmov	r2, s6
 80168a4:	eeb0 3a67 	vmov.f32	s6, s15
 80168a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80168ac:	9314      	str	r3, [sp, #80]	; 0x50
 80168ae:	9b01      	ldr	r3, [sp, #4]
 80168b0:	9a04      	ldr	r2, [sp, #16]
 80168b2:	3b01      	subs	r3, #1
 80168b4:	9301      	str	r3, [sp, #4]
 80168b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80168b8:	bf08      	it	eq
 80168ba:	4613      	moveq	r3, r2
 80168bc:	e72b      	b.n	8016716 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80168be:	1426      	asrs	r6, r4, #16
 80168c0:	d460      	bmi.n	8016984 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80168c2:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80168c6:	42b2      	cmp	r2, r6
 80168c8:	dd5c      	ble.n	8016984 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80168ca:	ea5f 4820 	movs.w	r8, r0, asr #16
 80168ce:	d459      	bmi.n	8016984 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80168d0:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80168d4:	4542      	cmp	r2, r8
 80168d6:	dd55      	ble.n	8016984 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80168d8:	9a02      	ldr	r2, [sp, #8]
 80168da:	9903      	ldr	r1, [sp, #12]
 80168dc:	fb08 6602 	mla	r6, r8, r2, r6
 80168e0:	0872      	lsrs	r2, r6, #1
 80168e2:	07f6      	lsls	r6, r6, #31
 80168e4:	5c8a      	ldrb	r2, [r1, r2]
 80168e6:	bf54      	ite	pl
 80168e8:	f002 020f 	andpl.w	r2, r2, #15
 80168ec:	1112      	asrmi	r2, r2, #4
 80168ee:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80168f2:	b2d2      	uxtb	r2, r2
 80168f4:	2a00      	cmp	r2, #0
 80168f6:	d045      	beq.n	8016984 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80168f8:	4926      	ldr	r1, [pc, #152]	; (8016994 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 80168fa:	f8d1 8000 	ldr.w	r8, [r1]
 80168fe:	9905      	ldr	r1, [sp, #20]
 8016900:	fa5f fb88 	uxtb.w	fp, r8
 8016904:	434a      	muls	r2, r1
 8016906:	1c56      	adds	r6, r2, #1
 8016908:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801690c:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8016910:	1212      	asrs	r2, r2, #8
 8016912:	f815 9006 	ldrb.w	r9, [r5, r6]
 8016916:	fa1f fa82 	uxth.w	sl, r2
 801691a:	43d2      	mvns	r2, r2
 801691c:	fb1b fb0a 	smulbb	fp, fp, sl
 8016920:	b2d2      	uxtb	r2, r2
 8016922:	fb09 b902 	mla	r9, r9, r2, fp
 8016926:	fa1f f989 	uxth.w	r9, r9
 801692a:	f109 0b01 	add.w	fp, r9, #1
 801692e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016932:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 8016936:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801693a:	fb1b fb0a 	smulbb	fp, fp, sl
 801693e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016942:	fb18 fa0a 	smulbb	sl, r8, sl
 8016946:	f805 9006 	strb.w	r9, [r5, r6]
 801694a:	442e      	add	r6, r5
 801694c:	f896 8002 	ldrb.w	r8, [r6, #2]
 8016950:	f896 9001 	ldrb.w	r9, [r6, #1]
 8016954:	fb08 aa02 	mla	sl, r8, r2, sl
 8016958:	fb09 b902 	mla	r9, r9, r2, fp
 801695c:	fa1f fa8a 	uxth.w	sl, sl
 8016960:	fa1f f989 	uxth.w	r9, r9
 8016964:	f10a 0801 	add.w	r8, sl, #1
 8016968:	f109 0b01 	add.w	fp, r9, #1
 801696c:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8016970:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016974:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016978:	ea4f 2929 	mov.w	r9, r9, asr #8
 801697c:	f886 a002 	strb.w	sl, [r6, #2]
 8016980:	f886 9001 	strb.w	r9, [r6, #1]
 8016984:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016986:	4474      	add	r4, lr
 8016988:	3701      	adds	r7, #1
 801698a:	4410      	add	r0, r2
 801698c:	e755      	b.n	801683a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801698e:	b007      	add	sp, #28
 8016990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016994:	2400e464 	.word	0x2400e464

08016998 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801699c:	b085      	sub	sp, #20
 801699e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80169a2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80169a4:	9203      	str	r2, [sp, #12]
 80169a6:	6860      	ldr	r0, [r4, #4]
 80169a8:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80169ac:	9100      	str	r1, [sp, #0]
 80169ae:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 80169b2:	fb00 2606 	mla	r6, r0, r6, r2
 80169b6:	6822      	ldr	r2, [r4, #0]
 80169b8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80169bc:	4416      	add	r6, r2
 80169be:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80169c2:	3201      	adds	r2, #1
 80169c4:	f022 0201 	bic.w	r2, r2, #1
 80169c8:	9201      	str	r2, [sp, #4]
 80169ca:	f8dc 2000 	ldr.w	r2, [ip]
 80169ce:	9202      	str	r2, [sp, #8]
 80169d0:	9a00      	ldr	r2, [sp, #0]
 80169d2:	2a00      	cmp	r2, #0
 80169d4:	dc03      	bgt.n	80169de <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80169d6:	9a03      	ldr	r2, [sp, #12]
 80169d8:	2a00      	cmp	r2, #0
 80169da:	f340 8140 	ble.w	8016c5e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 80169de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80169e0:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80169e4:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 80169e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80169ea:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80169ee:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	dd0e      	ble.n	8016a14 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80169f6:	142a      	asrs	r2, r5, #16
 80169f8:	d405      	bmi.n	8016a06 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80169fa:	4572      	cmp	r2, lr
 80169fc:	da03      	bge.n	8016a06 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80169fe:	1422      	asrs	r2, r4, #16
 8016a00:	d401      	bmi.n	8016a06 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8016a02:	42ba      	cmp	r2, r7
 8016a04:	db07      	blt.n	8016a16 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8016a06:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016a08:	3b01      	subs	r3, #1
 8016a0a:	3603      	adds	r6, #3
 8016a0c:	4415      	add	r5, r2
 8016a0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016a10:	4414      	add	r4, r2
 8016a12:	e7ee      	b.n	80169f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8016a14:	d072      	beq.n	8016afc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016a16:	1e5a      	subs	r2, r3, #1
 8016a18:	9811      	ldr	r0, [sp, #68]	; 0x44
 8016a1a:	fb00 5002 	mla	r0, r0, r2, r5
 8016a1e:	1400      	asrs	r0, r0, #16
 8016a20:	d463      	bmi.n	8016aea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016a22:	4570      	cmp	r0, lr
 8016a24:	da61      	bge.n	8016aea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016a26:	9812      	ldr	r0, [sp, #72]	; 0x48
 8016a28:	fb00 4202 	mla	r2, r0, r2, r4
 8016a2c:	1412      	asrs	r2, r2, #16
 8016a2e:	d45c      	bmi.n	8016aea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016a30:	42ba      	cmp	r2, r7
 8016a32:	da5a      	bge.n	8016aea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016a34:	1cf0      	adds	r0, r6, #3
 8016a36:	469a      	mov	sl, r3
 8016a38:	f1ba 0f00 	cmp.w	sl, #0
 8016a3c:	dd59      	ble.n	8016af2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8016a3e:	142a      	asrs	r2, r5, #16
 8016a40:	9901      	ldr	r1, [sp, #4]
 8016a42:	1427      	asrs	r7, r4, #16
 8016a44:	fb01 2707 	mla	r7, r1, r7, r2
 8016a48:	9902      	ldr	r1, [sp, #8]
 8016a4a:	087a      	lsrs	r2, r7, #1
 8016a4c:	5c8a      	ldrb	r2, [r1, r2]
 8016a4e:	07f9      	lsls	r1, r7, #31
 8016a50:	bf54      	ite	pl
 8016a52:	f002 020f 	andpl.w	r2, r2, #15
 8016a56:	1112      	asrmi	r2, r2, #4
 8016a58:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8016a5c:	b2d2      	uxtb	r2, r2
 8016a5e:	2a00      	cmp	r2, #0
 8016a60:	d03b      	beq.n	8016ada <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8016a62:	4980      	ldr	r1, [pc, #512]	; (8016c64 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8016a64:	2aff      	cmp	r2, #255	; 0xff
 8016a66:	680f      	ldr	r7, [r1, #0]
 8016a68:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8016a6c:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8016a70:	b2ff      	uxtb	r7, r7
 8016a72:	f000 80ed 	beq.w	8016c50 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8016a76:	fa1f f882 	uxth.w	r8, r2
 8016a7a:	43d2      	mvns	r2, r2
 8016a7c:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8016a80:	fb17 f708 	smulbb	r7, r7, r8
 8016a84:	b2d2      	uxtb	r2, r2
 8016a86:	fb19 f908 	smulbb	r9, r9, r8
 8016a8a:	fb0e 7702 	mla	r7, lr, r2, r7
 8016a8e:	fb1b f808 	smulbb	r8, fp, r8
 8016a92:	b2bf      	uxth	r7, r7
 8016a94:	f107 0e01 	add.w	lr, r7, #1
 8016a98:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8016a9c:	123f      	asrs	r7, r7, #8
 8016a9e:	f800 7c03 	strb.w	r7, [r0, #-3]
 8016aa2:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8016aa6:	fb07 9902 	mla	r9, r7, r2, r9
 8016aaa:	fa1f f989 	uxth.w	r9, r9
 8016aae:	f109 0701 	add.w	r7, r9, #1
 8016ab2:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8016ab6:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8016aba:	fb07 8802 	mla	r8, r7, r2, r8
 8016abe:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016ac2:	fa1f f888 	uxth.w	r8, r8
 8016ac6:	f800 9c02 	strb.w	r9, [r0, #-2]
 8016aca:	f108 0201 	add.w	r2, r8, #1
 8016ace:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8016ad2:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016ad6:	f800 8c01 	strb.w	r8, [r0, #-1]
 8016ada:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016adc:	3003      	adds	r0, #3
 8016ade:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016ae2:	4415      	add	r5, r2
 8016ae4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016ae6:	4414      	add	r4, r2
 8016ae8:	e7a6      	b.n	8016a38 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8016aea:	2700      	movs	r7, #0
 8016aec:	1bda      	subs	r2, r3, r7
 8016aee:	2a00      	cmp	r2, #0
 8016af0:	dc40      	bgt.n	8016b74 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8016af2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016af6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016afa:	441e      	add	r6, r3
 8016afc:	9b00      	ldr	r3, [sp, #0]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	f340 80ad 	ble.w	8016c5e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8016b04:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016b08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016b0a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016b0e:	eeb0 6a62 	vmov.f32	s12, s5
 8016b12:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016b16:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016b1a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016b1e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8016b22:	eeb0 6a43 	vmov.f32	s12, s6
 8016b26:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016b2a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8016b2e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016b32:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016b36:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016b3a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016b3e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016b42:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016b46:	ee12 2a90 	vmov	r2, s5
 8016b4a:	eef0 2a47 	vmov.f32	s5, s14
 8016b4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8016b52:	ee13 2a10 	vmov	r2, s6
 8016b56:	9311      	str	r3, [sp, #68]	; 0x44
 8016b58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016b5a:	eeb0 3a67 	vmov.f32	s6, s15
 8016b5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8016b62:	9312      	str	r3, [sp, #72]	; 0x48
 8016b64:	9b00      	ldr	r3, [sp, #0]
 8016b66:	9a03      	ldr	r2, [sp, #12]
 8016b68:	3b01      	subs	r3, #1
 8016b6a:	9300      	str	r3, [sp, #0]
 8016b6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016b6e:	bf08      	it	eq
 8016b70:	4613      	moveq	r3, r2
 8016b72:	e72d      	b.n	80169d0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8016b74:	1428      	asrs	r0, r5, #16
 8016b76:	d45c      	bmi.n	8016c32 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8016b78:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8016b7c:	4282      	cmp	r2, r0
 8016b7e:	dd58      	ble.n	8016c32 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8016b80:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8016b84:	d455      	bmi.n	8016c32 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8016b86:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016b8a:	4572      	cmp	r2, lr
 8016b8c:	dd51      	ble.n	8016c32 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8016b8e:	9a01      	ldr	r2, [sp, #4]
 8016b90:	9902      	ldr	r1, [sp, #8]
 8016b92:	fb0e 0002 	mla	r0, lr, r2, r0
 8016b96:	0842      	lsrs	r2, r0, #1
 8016b98:	07c0      	lsls	r0, r0, #31
 8016b9a:	5c8a      	ldrb	r2, [r1, r2]
 8016b9c:	bf54      	ite	pl
 8016b9e:	f002 020f 	andpl.w	r2, r2, #15
 8016ba2:	1112      	asrmi	r2, r2, #4
 8016ba4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8016ba8:	b2d2      	uxtb	r2, r2
 8016baa:	2a00      	cmp	r2, #0
 8016bac:	d041      	beq.n	8016c32 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8016bae:	492d      	ldr	r1, [pc, #180]	; (8016c64 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8016bb0:	2aff      	cmp	r2, #255	; 0xff
 8016bb2:	6808      	ldr	r0, [r1, #0]
 8016bb4:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8016bb8:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8016bbc:	fa5f fe80 	uxtb.w	lr, r0
 8016bc0:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8016bc4:	d03b      	beq.n	8016c3e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8016bc6:	fa1f f982 	uxth.w	r9, r2
 8016bca:	4438      	add	r0, r7
 8016bcc:	43d2      	mvns	r2, r2
 8016bce:	f816 8000 	ldrb.w	r8, [r6, r0]
 8016bd2:	fb1e fe09 	smulbb	lr, lr, r9
 8016bd6:	fb1a fa09 	smulbb	sl, sl, r9
 8016bda:	b2d2      	uxtb	r2, r2
 8016bdc:	fb1b f909 	smulbb	r9, fp, r9
 8016be0:	fb08 ee02 	mla	lr, r8, r2, lr
 8016be4:	fa1f fe8e 	uxth.w	lr, lr
 8016be8:	f10e 0801 	add.w	r8, lr, #1
 8016bec:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8016bf0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8016bf4:	f806 e000 	strb.w	lr, [r6, r0]
 8016bf8:	4430      	add	r0, r6
 8016bfa:	f890 e001 	ldrb.w	lr, [r0, #1]
 8016bfe:	fb0e aa02 	mla	sl, lr, r2, sl
 8016c02:	fa1f fa8a 	uxth.w	sl, sl
 8016c06:	f10a 0e01 	add.w	lr, sl, #1
 8016c0a:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 8016c0e:	f890 e002 	ldrb.w	lr, [r0, #2]
 8016c12:	fb0e 9902 	mla	r9, lr, r2, r9
 8016c16:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016c1a:	fa1f f989 	uxth.w	r9, r9
 8016c1e:	f880 a001 	strb.w	sl, [r0, #1]
 8016c22:	f109 0201 	add.w	r2, r9, #1
 8016c26:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8016c2a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016c2e:	f880 9002 	strb.w	r9, [r0, #2]
 8016c32:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016c34:	3701      	adds	r7, #1
 8016c36:	4415      	add	r5, r2
 8016c38:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016c3a:	4414      	add	r4, r2
 8016c3c:	e756      	b.n	8016aec <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8016c3e:	4438      	add	r0, r7
 8016c40:	f806 e000 	strb.w	lr, [r6, r0]
 8016c44:	4430      	add	r0, r6
 8016c46:	f880 a001 	strb.w	sl, [r0, #1]
 8016c4a:	f880 b002 	strb.w	fp, [r0, #2]
 8016c4e:	e7f0      	b.n	8016c32 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8016c50:	f800 7c03 	strb.w	r7, [r0, #-3]
 8016c54:	f800 9c02 	strb.w	r9, [r0, #-2]
 8016c58:	f800 bc01 	strb.w	fp, [r0, #-1]
 8016c5c:	e73d      	b.n	8016ada <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8016c5e:	b005      	add	sp, #20
 8016c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c64:	2400e464 	.word	0x2400e464

08016c68 <_ZN8touchgfx8LCD24bppD1Ev>:
 8016c68:	4770      	bx	lr

08016c6a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8016c6a:	4770      	bx	lr

08016c6c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8016c6c:	4770      	bx	lr

08016c6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8016c6e:	4770      	bx	lr

08016c70 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8016c70:	4770      	bx	lr

08016c72 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8016c72:	4770      	bx	lr

08016c74 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8016c74:	4770      	bx	lr

08016c76 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8016c76:	4770      	bx	lr

08016c78 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8016c78:	4770      	bx	lr

08016c7a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8016c7a:	4770      	bx	lr

08016c7c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8016c7c:	4770      	bx	lr

08016c7e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8016c7e:	4770      	bx	lr

08016c80 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8016c80:	4770      	bx	lr

08016c82 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8016c82:	4770      	bx	lr

08016c84 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8016c84:	4770      	bx	lr

08016c86 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8016c86:	4770      	bx	lr

08016c88 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8016c88:	4770      	bx	lr

08016c8a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8016c8a:	4770      	bx	lr

08016c8c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8016c8c:	4770      	bx	lr

08016c8e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8016c8e:	4770      	bx	lr

08016c90 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8016c90:	4770      	bx	lr
	...

08016c94 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8016c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016c96:	4606      	mov	r6, r0
 8016c98:	b087      	sub	sp, #28
 8016c9a:	4615      	mov	r5, r2
 8016c9c:	461f      	mov	r7, r3
 8016c9e:	b353      	cbz	r3, 8016cf6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8016ca0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	dd26      	ble.n	8016cf6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8016ca8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	dd22      	ble.n	8016cf6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8016cb0:	6808      	ldr	r0, [r1, #0]
 8016cb2:	aa04      	add	r2, sp, #16
 8016cb4:	6849      	ldr	r1, [r1, #4]
 8016cb6:	4c1b      	ldr	r4, [pc, #108]	; (8016d24 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8016cb8:	c203      	stmia	r2!, {r0, r1}
 8016cba:	a804      	add	r0, sp, #16
 8016cbc:	f7fa fef6 	bl	8011aac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016cc0:	6820      	ldr	r0, [r4, #0]
 8016cc2:	6803      	ldr	r3, [r0, #0]
 8016cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016cc6:	4798      	blx	r3
 8016cc8:	2fff      	cmp	r7, #255	; 0xff
 8016cca:	d016      	beq.n	8016cfa <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8016ccc:	f010 0f08 	tst.w	r0, #8
 8016cd0:	6820      	ldr	r0, [r4, #0]
 8016cd2:	d015      	beq.n	8016d00 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8016cd4:	2400      	movs	r4, #0
 8016cd6:	6801      	ldr	r1, [r0, #0]
 8016cd8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8016cdc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8016ce0:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8016ce4:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8016ce8:	9401      	str	r4, [sp, #4]
 8016cea:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8016cee:	9400      	str	r4, [sp, #0]
 8016cf0:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8016cf2:	4629      	mov	r1, r5
 8016cf4:	47a0      	blx	r4
 8016cf6:	b007      	add	sp, #28
 8016cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016cfa:	f010 0f02 	tst.w	r0, #2
 8016cfe:	e7e7      	b.n	8016cd0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8016d00:	6803      	ldr	r3, [r0, #0]
 8016d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d04:	4798      	blx	r3
 8016d06:	4b08      	ldr	r3, [pc, #32]	; (8016d28 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8016d08:	4601      	mov	r1, r0
 8016d0a:	4630      	mov	r0, r6
 8016d0c:	881a      	ldrh	r2, [r3, #0]
 8016d0e:	6833      	ldr	r3, [r6, #0]
 8016d10:	e9cd 5700 	strd	r5, r7, [sp]
 8016d14:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8016d16:	ab04      	add	r3, sp, #16
 8016d18:	47a8      	blx	r5
 8016d1a:	6820      	ldr	r0, [r4, #0]
 8016d1c:	6803      	ldr	r3, [r0, #0]
 8016d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d20:	4798      	blx	r3
 8016d22:	e7e8      	b.n	8016cf6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8016d24:	2400e454 	.word	0x2400e454
 8016d28:	2400e44e 	.word	0x2400e44e

08016d2c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8016d2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016d30:	b08b      	sub	sp, #44	; 0x2c
 8016d32:	460d      	mov	r5, r1
 8016d34:	4616      	mov	r6, r2
 8016d36:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 8016d3a:	f1b8 0f00 	cmp.w	r8, #0
 8016d3e:	d047      	beq.n	8016dd0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8016d40:	6810      	ldr	r0, [r2, #0]
 8016d42:	ac06      	add	r4, sp, #24
 8016d44:	6851      	ldr	r1, [r2, #4]
 8016d46:	4f51      	ldr	r7, [pc, #324]	; (8016e8c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 8016d48:	c403      	stmia	r4!, {r0, r1}
 8016d4a:	6818      	ldr	r0, [r3, #0]
 8016d4c:	ac08      	add	r4, sp, #32
 8016d4e:	6859      	ldr	r1, [r3, #4]
 8016d50:	c403      	stmia	r4!, {r0, r1}
 8016d52:	a806      	add	r0, sp, #24
 8016d54:	f7fa feaa 	bl	8011aac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016d58:	4631      	mov	r1, r6
 8016d5a:	a808      	add	r0, sp, #32
 8016d5c:	f7fa fece 	bl	8011afc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8016d60:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8016d64:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8016d68:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8016d6c:	6838      	ldr	r0, [r7, #0]
 8016d6e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8016d72:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 8016d76:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 8016d7a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8016d7e:	440d      	add	r5, r1
 8016d80:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8016d84:	440a      	add	r2, r1
 8016d86:	f8ad 2020 	strh.w	r2, [sp, #32]
 8016d8a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8016d8e:	4413      	add	r3, r2
 8016d90:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8016d94:	6803      	ldr	r3, [r0, #0]
 8016d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016d98:	4798      	blx	r3
 8016d9a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8016d9e:	d01a      	beq.n	8016dd6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 8016da0:	f010 0f04 	tst.w	r0, #4
 8016da4:	6838      	ldr	r0, [r7, #0]
 8016da6:	d019      	beq.n	8016ddc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8016da8:	2100      	movs	r1, #0
 8016daa:	6807      	ldr	r7, [r0, #0]
 8016dac:	b2a4      	uxth	r4, r4
 8016dae:	f8cd 800c 	str.w	r8, [sp, #12]
 8016db2:	b2b6      	uxth	r6, r6
 8016db4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8016db8:	9401      	str	r4, [sp, #4]
 8016dba:	9600      	str	r6, [sp, #0]
 8016dbc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8016dc0:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8016dc4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8016dc8:	9102      	str	r1, [sp, #8]
 8016dca:	4629      	mov	r1, r5
 8016dcc:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8016dce:	47a0      	blx	r4
 8016dd0:	b00b      	add	sp, #44	; 0x2c
 8016dd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016dd6:	f010 0f01 	tst.w	r0, #1
 8016dda:	e7e3      	b.n	8016da4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8016ddc:	6803      	ldr	r3, [r0, #0]
 8016dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016de0:	4798      	blx	r3
 8016de2:	4a2b      	ldr	r2, [pc, #172]	; (8016e90 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8016de4:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8016de8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8016dec:	8813      	ldrh	r3, [r2, #0]
 8016dee:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 8016df2:	fb03 f404 	mul.w	r4, r3, r4
 8016df6:	fb03 c101 	mla	r1, r3, r1, ip
 8016dfa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016dfe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8016e02:	4408      	add	r0, r1
 8016e04:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8016e08:	4404      	add	r4, r0
 8016e0a:	d02e      	beq.n	8016e6a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8016e0c:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8016e10:	1b9b      	subs	r3, r3, r6
 8016e12:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 8016e16:	1b96      	subs	r6, r2, r6
 8016e18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016e1c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8016e20:	42a0      	cmp	r0, r4
 8016e22:	d22d      	bcs.n	8016e80 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8016e24:	eb00 0e01 	add.w	lr, r0, r1
 8016e28:	4570      	cmp	r0, lr
 8016e2a:	d210      	bcs.n	8016e4e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 8016e2c:	f890 9000 	ldrb.w	r9, [r0]
 8016e30:	f815 2b01 	ldrb.w	r2, [r5], #1
 8016e34:	fb19 f90c 	smulbb	r9, r9, ip
 8016e38:	fb02 9208 	mla	r2, r2, r8, r9
 8016e3c:	b292      	uxth	r2, r2
 8016e3e:	f102 0901 	add.w	r9, r2, #1
 8016e42:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 8016e46:	1212      	asrs	r2, r2, #8
 8016e48:	f800 2b01 	strb.w	r2, [r0], #1
 8016e4c:	e7ec      	b.n	8016e28 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8016e4e:	4418      	add	r0, r3
 8016e50:	4435      	add	r5, r6
 8016e52:	e7e5      	b.n	8016e20 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8016e54:	8813      	ldrh	r3, [r2, #0]
 8016e56:	1b9b      	subs	r3, r3, r6
 8016e58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016e5c:	4418      	add	r0, r3
 8016e5e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8016e62:	1b9b      	subs	r3, r3, r6
 8016e64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016e68:	441d      	add	r5, r3
 8016e6a:	42a0      	cmp	r0, r4
 8016e6c:	d208      	bcs.n	8016e80 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8016e6e:	eb00 0c01 	add.w	ip, r0, r1
 8016e72:	4560      	cmp	r0, ip
 8016e74:	d2ee      	bcs.n	8016e54 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 8016e76:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016e7a:	f800 3b01 	strb.w	r3, [r0], #1
 8016e7e:	e7f8      	b.n	8016e72 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8016e80:	6838      	ldr	r0, [r7, #0]
 8016e82:	6803      	ldr	r3, [r0, #0]
 8016e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e86:	4798      	blx	r3
 8016e88:	e7a2      	b.n	8016dd0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8016e8a:	bf00      	nop
 8016e8c:	2400e454 	.word	0x2400e454
 8016e90:	2400e44e 	.word	0x2400e44e

08016e94 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8016e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e96:	2300      	movs	r3, #0
 8016e98:	b085      	sub	sp, #20
 8016e9a:	9300      	str	r3, [sp, #0]
 8016e9c:	4b41      	ldr	r3, [pc, #260]	; (8016fa4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 8016e9e:	781b      	ldrb	r3, [r3, #0]
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d136      	bne.n	8016f12 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 8016ea4:	4a40      	ldr	r2, [pc, #256]	; (8016fa8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8016ea6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016eaa:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d131      	bne.n	8016f16 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 8016eb2:	4b3e      	ldr	r3, [pc, #248]	; (8016fac <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8016eb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016eb8:	ac02      	add	r4, sp, #8
 8016eba:	6808      	ldr	r0, [r1, #0]
 8016ebc:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016ec0:	ab02      	add	r3, sp, #8
 8016ec2:	6849      	ldr	r1, [r1, #4]
 8016ec4:	4d3a      	ldr	r5, [pc, #232]	; (8016fb0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 8016ec6:	c303      	stmia	r3!, {r0, r1}
 8016ec8:	4669      	mov	r1, sp
 8016eca:	4620      	mov	r0, r4
 8016ecc:	f7fa fe16 	bl	8011afc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8016ed0:	4668      	mov	r0, sp
 8016ed2:	f7fa fdeb 	bl	8011aac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016ed6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8016eda:	f8bd 2000 	ldrh.w	r2, [sp]
 8016ede:	462e      	mov	r6, r5
 8016ee0:	6828      	ldr	r0, [r5, #0]
 8016ee2:	4413      	add	r3, r2
 8016ee4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8016ee8:	f8ad 3008 	strh.w	r3, [sp, #8]
 8016eec:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8016ef0:	4413      	add	r3, r2
 8016ef2:	f8ad 300a 	strh.w	r3, [sp, #10]
 8016ef6:	6803      	ldr	r3, [r0, #0]
 8016ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016efa:	4798      	blx	r3
 8016efc:	f010 0f01 	tst.w	r0, #1
 8016f00:	d00b      	beq.n	8016f1a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 8016f02:	6828      	ldr	r0, [r5, #0]
 8016f04:	6803      	ldr	r3, [r0, #0]
 8016f06:	e894 0006 	ldmia.w	r4, {r1, r2}
 8016f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016f0c:	4798      	blx	r3
 8016f0e:	b005      	add	sp, #20
 8016f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f12:	4a26      	ldr	r2, [pc, #152]	; (8016fac <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8016f14:	e7c7      	b.n	8016ea6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8016f16:	4b24      	ldr	r3, [pc, #144]	; (8016fa8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8016f18:	e7cc      	b.n	8016eb4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8016f1a:	6830      	ldr	r0, [r6, #0]
 8016f1c:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8016f20:	6803      	ldr	r3, [r0, #0]
 8016f22:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8016f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f28:	4798      	blx	r3
 8016f2a:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8016f2e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8016f32:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8016f36:	fb14 3402 	smlabb	r4, r4, r2, r3
 8016f3a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016f3e:	4404      	add	r4, r0
 8016f40:	6830      	ldr	r0, [r6, #0]
 8016f42:	6803      	ldr	r3, [r0, #0]
 8016f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016f46:	4798      	blx	r3
 8016f48:	4917      	ldr	r1, [pc, #92]	; (8016fa8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8016f4a:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8016f4e:	880b      	ldrh	r3, [r1, #0]
 8016f50:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 8016f54:	fb03 c202 	mla	r2, r3, r2, ip
 8016f58:	437b      	muls	r3, r7
 8016f5a:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8016f5e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016f62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016f66:	4410      	add	r0, r2
 8016f68:	18c2      	adds	r2, r0, r3
 8016f6a:	4290      	cmp	r0, r2
 8016f6c:	d214      	bcs.n	8016f98 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 8016f6e:	eb00 0c07 	add.w	ip, r0, r7
 8016f72:	4560      	cmp	r0, ip
 8016f74:	d204      	bcs.n	8016f80 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 8016f76:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016f7a:	f800 3b01 	strb.w	r3, [r0], #1
 8016f7e:	e7f8      	b.n	8016f72 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 8016f80:	880b      	ldrh	r3, [r1, #0]
 8016f82:	1b5b      	subs	r3, r3, r5
 8016f84:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016f88:	4418      	add	r0, r3
 8016f8a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8016f8e:	1b5b      	subs	r3, r3, r5
 8016f90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016f94:	441c      	add	r4, r3
 8016f96:	e7e8      	b.n	8016f6a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 8016f98:	6830      	ldr	r0, [r6, #0]
 8016f9a:	6803      	ldr	r3, [r0, #0]
 8016f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f9e:	4798      	blx	r3
 8016fa0:	e7b5      	b.n	8016f0e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8016fa2:	bf00      	nop
 8016fa4:	2400e44c 	.word	0x2400e44c
 8016fa8:	2400e44e 	.word	0x2400e44e
 8016fac:	2400e450 	.word	0x2400e450
 8016fb0:	2400e454 	.word	0x2400e454

08016fb4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8016fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fb8:	b089      	sub	sp, #36	; 0x24
 8016fba:	4607      	mov	r7, r0
 8016fbc:	4689      	mov	r9, r1
 8016fbe:	4692      	mov	sl, r2
 8016fc0:	ac08      	add	r4, sp, #32
 8016fc2:	461e      	mov	r6, r3
 8016fc4:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8016fc8:	4620      	mov	r0, r4
 8016fca:	f7fe f8ef 	bl	80151ac <_ZNK8touchgfx6Bitmap7getDataEv>
 8016fce:	683b      	ldr	r3, [r7, #0]
 8016fd0:	4605      	mov	r5, r0
 8016fd2:	4620      	mov	r0, r4
 8016fd4:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8016fd8:	f7fe f834 	bl	8015044 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016fdc:	4683      	mov	fp, r0
 8016fde:	4620      	mov	r0, r4
 8016fe0:	f7fe f864 	bl	80150ac <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016fe4:	4653      	mov	r3, sl
 8016fe6:	464a      	mov	r2, r9
 8016fe8:	4639      	mov	r1, r7
 8016fea:	9500      	str	r5, [sp, #0]
 8016fec:	e9cd b001 	strd	fp, r0, [sp, #4]
 8016ff0:	a806      	add	r0, sp, #24
 8016ff2:	47c0      	blx	r8
 8016ff4:	a906      	add	r1, sp, #24
 8016ff6:	4630      	mov	r0, r6
 8016ff8:	f7fd ff08 	bl	8014e0c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8016ffc:	4628      	mov	r0, r5
 8016ffe:	b009      	add	sp, #36	; 0x24
 8017000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017004 <_ZN8touchgfx8LCD24bppD0Ev>:
 8017004:	b510      	push	{r4, lr}
 8017006:	4604      	mov	r4, r0
 8017008:	2158      	movs	r1, #88	; 0x58
 801700a:	f006 fc18 	bl	801d83e <_ZdlPvj>
 801700e:	4620      	mov	r0, r4
 8017010:	bd10      	pop	{r4, pc}

08017012 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8017012:	b510      	push	{r4, lr}
 8017014:	4604      	mov	r4, r0
 8017016:	2104      	movs	r1, #4
 8017018:	f006 fc11 	bl	801d83e <_ZdlPvj>
 801701c:	4620      	mov	r0, r4
 801701e:	bd10      	pop	{r4, pc}

08017020 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8017020:	b510      	push	{r4, lr}
 8017022:	4604      	mov	r4, r0
 8017024:	2104      	movs	r1, #4
 8017026:	f006 fc0a 	bl	801d83e <_ZdlPvj>
 801702a:	4620      	mov	r0, r4
 801702c:	bd10      	pop	{r4, pc}

0801702e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801702e:	b510      	push	{r4, lr}
 8017030:	4604      	mov	r4, r0
 8017032:	2104      	movs	r1, #4
 8017034:	f006 fc03 	bl	801d83e <_ZdlPvj>
 8017038:	4620      	mov	r0, r4
 801703a:	bd10      	pop	{r4, pc}

0801703c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801703c:	b510      	push	{r4, lr}
 801703e:	4604      	mov	r4, r0
 8017040:	2104      	movs	r1, #4
 8017042:	f006 fbfc 	bl	801d83e <_ZdlPvj>
 8017046:	4620      	mov	r0, r4
 8017048:	bd10      	pop	{r4, pc}

0801704a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801704a:	b510      	push	{r4, lr}
 801704c:	4604      	mov	r4, r0
 801704e:	2104      	movs	r1, #4
 8017050:	f006 fbf5 	bl	801d83e <_ZdlPvj>
 8017054:	4620      	mov	r0, r4
 8017056:	bd10      	pop	{r4, pc}

08017058 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8017058:	b510      	push	{r4, lr}
 801705a:	4604      	mov	r4, r0
 801705c:	2104      	movs	r1, #4
 801705e:	f006 fbee 	bl	801d83e <_ZdlPvj>
 8017062:	4620      	mov	r0, r4
 8017064:	bd10      	pop	{r4, pc}

08017066 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8017066:	b510      	push	{r4, lr}
 8017068:	4604      	mov	r4, r0
 801706a:	2104      	movs	r1, #4
 801706c:	f006 fbe7 	bl	801d83e <_ZdlPvj>
 8017070:	4620      	mov	r0, r4
 8017072:	bd10      	pop	{r4, pc}

08017074 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8017074:	b510      	push	{r4, lr}
 8017076:	4604      	mov	r4, r0
 8017078:	2104      	movs	r1, #4
 801707a:	f006 fbe0 	bl	801d83e <_ZdlPvj>
 801707e:	4620      	mov	r0, r4
 8017080:	bd10      	pop	{r4, pc}

08017082 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8017082:	b510      	push	{r4, lr}
 8017084:	4604      	mov	r4, r0
 8017086:	2104      	movs	r1, #4
 8017088:	f006 fbd9 	bl	801d83e <_ZdlPvj>
 801708c:	4620      	mov	r0, r4
 801708e:	bd10      	pop	{r4, pc}

08017090 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8017090:	b510      	push	{r4, lr}
 8017092:	4604      	mov	r4, r0
 8017094:	2104      	movs	r1, #4
 8017096:	f006 fbd2 	bl	801d83e <_ZdlPvj>
 801709a:	4620      	mov	r0, r4
 801709c:	bd10      	pop	{r4, pc}

0801709e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801709e:	b510      	push	{r4, lr}
 80170a0:	4604      	mov	r4, r0
 80170a2:	2104      	movs	r1, #4
 80170a4:	f006 fbcb 	bl	801d83e <_ZdlPvj>
 80170a8:	4620      	mov	r0, r4
 80170aa:	bd10      	pop	{r4, pc}

080170ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80170ac:	b510      	push	{r4, lr}
 80170ae:	4604      	mov	r4, r0
 80170b0:	2104      	movs	r1, #4
 80170b2:	f006 fbc4 	bl	801d83e <_ZdlPvj>
 80170b6:	4620      	mov	r0, r4
 80170b8:	bd10      	pop	{r4, pc}

080170ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80170ba:	b510      	push	{r4, lr}
 80170bc:	4604      	mov	r4, r0
 80170be:	2104      	movs	r1, #4
 80170c0:	f006 fbbd 	bl	801d83e <_ZdlPvj>
 80170c4:	4620      	mov	r0, r4
 80170c6:	bd10      	pop	{r4, pc}

080170c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80170c8:	b510      	push	{r4, lr}
 80170ca:	4604      	mov	r4, r0
 80170cc:	2104      	movs	r1, #4
 80170ce:	f006 fbb6 	bl	801d83e <_ZdlPvj>
 80170d2:	4620      	mov	r0, r4
 80170d4:	bd10      	pop	{r4, pc}

080170d6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80170d6:	b510      	push	{r4, lr}
 80170d8:	4604      	mov	r4, r0
 80170da:	2104      	movs	r1, #4
 80170dc:	f006 fbaf 	bl	801d83e <_ZdlPvj>
 80170e0:	4620      	mov	r0, r4
 80170e2:	bd10      	pop	{r4, pc}

080170e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80170e4:	b510      	push	{r4, lr}
 80170e6:	4604      	mov	r4, r0
 80170e8:	2104      	movs	r1, #4
 80170ea:	f006 fba8 	bl	801d83e <_ZdlPvj>
 80170ee:	4620      	mov	r0, r4
 80170f0:	bd10      	pop	{r4, pc}

080170f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 80170f2:	b510      	push	{r4, lr}
 80170f4:	4604      	mov	r4, r0
 80170f6:	2104      	movs	r1, #4
 80170f8:	f006 fba1 	bl	801d83e <_ZdlPvj>
 80170fc:	4620      	mov	r0, r4
 80170fe:	bd10      	pop	{r4, pc}

08017100 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8017100:	b510      	push	{r4, lr}
 8017102:	4604      	mov	r4, r0
 8017104:	2104      	movs	r1, #4
 8017106:	f006 fb9a 	bl	801d83e <_ZdlPvj>
 801710a:	4620      	mov	r0, r4
 801710c:	bd10      	pop	{r4, pc}

0801710e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801710e:	b510      	push	{r4, lr}
 8017110:	4604      	mov	r4, r0
 8017112:	2104      	movs	r1, #4
 8017114:	f006 fb93 	bl	801d83e <_ZdlPvj>
 8017118:	4620      	mov	r0, r4
 801711a:	bd10      	pop	{r4, pc}

0801711c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801711c:	b510      	push	{r4, lr}
 801711e:	4604      	mov	r4, r0
 8017120:	2104      	movs	r1, #4
 8017122:	f006 fb8c 	bl	801d83e <_ZdlPvj>
 8017126:	4620      	mov	r0, r4
 8017128:	bd10      	pop	{r4, pc}

0801712a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801712a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801712e:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8017132:	9c06      	ldr	r4, [sp, #24]
 8017134:	2800      	cmp	r0, #0
 8017136:	d06e      	beq.n	8017216 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8017138:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801713c:	2d00      	cmp	r5, #0
 801713e:	dd6a      	ble.n	8017216 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8017140:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 8017144:	f1bc 0f00 	cmp.w	ip, #0
 8017148:	dd65      	ble.n	8017216 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801714a:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801714e:	28ff      	cmp	r0, #255	; 0xff
 8017150:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017154:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8017158:	fb02 3306 	mla	r3, r2, r6, r3
 801715c:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8017160:	b2e4      	uxtb	r4, r4
 8017162:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017166:	4419      	add	r1, r3
 8017168:	fb02 f30c 	mul.w	r3, r2, ip
 801716c:	eba2 0205 	sub.w	r2, r2, r5
 8017170:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017174:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017178:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801717c:	440b      	add	r3, r1
 801717e:	d03e      	beq.n	80171fe <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 8017180:	fa1f fc80 	uxth.w	ip, r0
 8017184:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8017188:	fb06 f60c 	mul.w	r6, r6, ip
 801718c:	b280      	uxth	r0, r0
 801718e:	fb07 f70c 	mul.w	r7, r7, ip
 8017192:	fb04 f40c 	mul.w	r4, r4, ip
 8017196:	4299      	cmp	r1, r3
 8017198:	d23d      	bcs.n	8017216 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801719a:	eb01 0c05 	add.w	ip, r1, r5
 801719e:	458c      	cmp	ip, r1
 80171a0:	f101 0e03 	add.w	lr, r1, #3
 80171a4:	d928      	bls.n	80171f8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 80171a6:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 80171aa:	fb11 f100 	smulbb	r1, r1, r0
 80171ae:	4421      	add	r1, r4
 80171b0:	b289      	uxth	r1, r1
 80171b2:	f101 0801 	add.w	r8, r1, #1
 80171b6:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80171ba:	1209      	asrs	r1, r1, #8
 80171bc:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80171c0:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 80171c4:	fb11 f100 	smulbb	r1, r1, r0
 80171c8:	4439      	add	r1, r7
 80171ca:	b289      	uxth	r1, r1
 80171cc:	f101 0801 	add.w	r8, r1, #1
 80171d0:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80171d4:	1209      	asrs	r1, r1, #8
 80171d6:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80171da:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80171de:	fb11 f100 	smulbb	r1, r1, r0
 80171e2:	4431      	add	r1, r6
 80171e4:	b289      	uxth	r1, r1
 80171e6:	f101 0801 	add.w	r8, r1, #1
 80171ea:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80171ee:	1209      	asrs	r1, r1, #8
 80171f0:	f80e 1c01 	strb.w	r1, [lr, #-1]
 80171f4:	4671      	mov	r1, lr
 80171f6:	e7d2      	b.n	801719e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 80171f8:	4411      	add	r1, r2
 80171fa:	e7cc      	b.n	8017196 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 80171fc:	4411      	add	r1, r2
 80171fe:	4299      	cmp	r1, r3
 8017200:	d209      	bcs.n	8017216 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8017202:	1948      	adds	r0, r1, r5
 8017204:	4281      	cmp	r1, r0
 8017206:	d2f9      	bcs.n	80171fc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 8017208:	700c      	strb	r4, [r1, #0]
 801720a:	3103      	adds	r1, #3
 801720c:	f801 7c02 	strb.w	r7, [r1, #-2]
 8017210:	f801 6c01 	strb.w	r6, [r1, #-1]
 8017214:	e7f6      	b.n	8017204 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8017216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801721c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801721c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017220:	b093      	sub	sp, #76	; 0x4c
 8017222:	4699      	mov	r9, r3
 8017224:	4617      	mov	r7, r2
 8017226:	f9b3 2000 	ldrsh.w	r2, [r3]
 801722a:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	; 0x74
 801722e:	4604      	mov	r4, r0
 8017230:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017234:	a80c      	add	r0, sp, #48	; 0x30
 8017236:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 801723a:	460d      	mov	r5, r1
 801723c:	4649      	mov	r1, r9
 801723e:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8017242:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8017246:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 801724a:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
 801724e:	f7f5 f9a1 	bl	800c594 <_ZN8touchgfx4RectaNERKS0_>
 8017252:	4639      	mov	r1, r7
 8017254:	a80c      	add	r0, sp, #48	; 0x30
 8017256:	f7f5 f99d 	bl	800c594 <_ZN8touchgfx4RectaNERKS0_>
 801725a:	4b78      	ldr	r3, [pc, #480]	; (801743c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801725c:	8818      	ldrh	r0, [r3, #0]
 801725e:	4b78      	ldr	r3, [pc, #480]	; (8017440 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 8017260:	b202      	sxth	r2, r0
 8017262:	8819      	ldrh	r1, [r3, #0]
 8017264:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8017268:	b20f      	sxth	r7, r1
 801726a:	2b00      	cmp	r3, #0
 801726c:	da07      	bge.n	801727e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 801726e:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 8017272:	4463      	add	r3, ip
 8017274:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8017278:	2300      	movs	r3, #0
 801727a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801727e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8017282:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 8017286:	1ad2      	subs	r2, r2, r3
 8017288:	4594      	cmp	ip, r2
 801728a:	bfc4      	itt	gt
 801728c:	1ac2      	subgt	r2, r0, r3
 801728e:	f8ad 2034 	strhgt.w	r2, [sp, #52]	; 0x34
 8017292:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8017296:	2a00      	cmp	r2, #0
 8017298:	da07      	bge.n	80172aa <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 801729a:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 801729e:	4462      	add	r2, ip
 80172a0:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 80172a4:	2200      	movs	r2, #0
 80172a6:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 80172aa:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 80172ae:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 80172b2:	1abf      	subs	r7, r7, r2
 80172b4:	45bc      	cmp	ip, r7
 80172b6:	f8df c190 	ldr.w	ip, [pc, #400]	; 8017448 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 80172ba:	bfc8      	it	gt
 80172bc:	1a8f      	subgt	r7, r1, r2
 80172be:	f89c c000 	ldrb.w	ip, [ip]
 80172c2:	bfc8      	it	gt
 80172c4:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 80172c8:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 80172cc:	f1bc 0f00 	cmp.w	ip, #0
 80172d0:	d176      	bne.n	80173c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 80172d2:	4287      	cmp	r7, r0
 80172d4:	bf14      	ite	ne
 80172d6:	2100      	movne	r1, #0
 80172d8:	2101      	moveq	r1, #1
 80172da:	2f00      	cmp	r7, #0
 80172dc:	9107      	str	r1, [sp, #28]
 80172de:	dd73      	ble.n	80173c8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 80172e0:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 80172e4:	2900      	cmp	r1, #0
 80172e6:	9104      	str	r1, [sp, #16]
 80172e8:	dd6e      	ble.n	80173c8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 80172ea:	f8b9 1000 	ldrh.w	r1, [r9]
 80172ee:	a80e      	add	r0, sp, #56	; 0x38
 80172f0:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 80172f4:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80172f8:	1a5b      	subs	r3, r3, r1
 80172fa:	a910      	add	r1, sp, #64	; 0x40
 80172fc:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 8017300:	b21b      	sxth	r3, r3
 8017302:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 8017306:	f8df a144 	ldr.w	sl, [pc, #324]	; 801744c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801730a:	9305      	str	r3, [sp, #20]
 801730c:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8017310:	1ad2      	subs	r2, r2, r3
 8017312:	b213      	sxth	r3, r2
 8017314:	9306      	str	r3, [sp, #24]
 8017316:	9b05      	ldr	r3, [sp, #20]
 8017318:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801731c:	9b06      	ldr	r3, [sp, #24]
 801731e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8017322:	9b04      	ldr	r3, [sp, #16]
 8017324:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8017328:	2300      	movs	r3, #0
 801732a:	9310      	str	r3, [sp, #64]	; 0x40
 801732c:	f7fa fbe6 	bl	8011afc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017330:	4640      	mov	r0, r8
 8017332:	f7fa fbbb 	bl	8011aac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017336:	a810      	add	r0, sp, #64	; 0x40
 8017338:	f7fa fbb8 	bl	8011aac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801733c:	4b41      	ldr	r3, [pc, #260]	; (8017444 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 801733e:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8017342:	4628      	mov	r0, r5
 8017344:	881b      	ldrh	r3, [r3, #0]
 8017346:	9308      	str	r3, [sp, #32]
 8017348:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801734c:	b21b      	sxth	r3, r3
 801734e:	9303      	str	r3, [sp, #12]
 8017350:	682b      	ldr	r3, [r5, #0]
 8017352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017354:	4798      	blx	r3
 8017356:	9a03      	ldr	r2, [sp, #12]
 8017358:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801735c:	4681      	mov	r9, r0
 801735e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8017362:	fb13 f302 	smulbb	r3, r3, r2
 8017366:	2203      	movs	r2, #3
 8017368:	f8da 0000 	ldr.w	r0, [sl]
 801736c:	fb15 3302 	smlabb	r3, r5, r2, r3
 8017370:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8017372:	920b      	str	r2, [sp, #44]	; 0x2c
 8017374:	441d      	add	r5, r3
 8017376:	6803      	ldr	r3, [r0, #0]
 8017378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801737a:	4798      	blx	r3
 801737c:	9009      	str	r0, [sp, #36]	; 0x24
 801737e:	f8da 0000 	ldr.w	r0, [sl]
 8017382:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8017386:	6803      	ldr	r3, [r0, #0]
 8017388:	910a      	str	r1, [sp, #40]	; 0x28
 801738a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801738c:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 8017390:	4798      	blx	r3
 8017392:	f010 0f01 	tst.w	r0, #1
 8017396:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801739a:	d01e      	beq.n	80173da <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 801739c:	f8da 0000 	ldr.w	r0, [sl]
 80173a0:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 80173a4:	6803      	ldr	r3, [r0, #0]
 80173a6:	9200      	str	r2, [sp, #0]
 80173a8:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 80173aa:	462b      	mov	r3, r5
 80173ac:	e898 0006 	ldmia.w	r8, {r1, r2}
 80173b0:	47b0      	blx	r6
 80173b2:	9b05      	ldr	r3, [sp, #20]
 80173b4:	80a7      	strh	r7, [r4, #4]
 80173b6:	8023      	strh	r3, [r4, #0]
 80173b8:	9b06      	ldr	r3, [sp, #24]
 80173ba:	8063      	strh	r3, [r4, #2]
 80173bc:	9b04      	ldr	r3, [sp, #16]
 80173be:	e007      	b.n	80173d0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 80173c0:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 80173c4:	4288      	cmp	r0, r1
 80173c6:	e785      	b.n	80172d4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 80173c8:	2300      	movs	r3, #0
 80173ca:	8023      	strh	r3, [r4, #0]
 80173cc:	8063      	strh	r3, [r4, #2]
 80173ce:	80a3      	strh	r3, [r4, #4]
 80173d0:	4620      	mov	r0, r4
 80173d2:	80e3      	strh	r3, [r4, #6]
 80173d4:	b013      	add	sp, #76	; 0x4c
 80173d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173da:	fb09 f606 	mul.w	r6, r9, r6
 80173de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173e0:	fb11 6602 	smlabb	r6, r1, r2, r6
 80173e4:	9a07      	ldr	r2, [sp, #28]
 80173e6:	4433      	add	r3, r6
 80173e8:	461e      	mov	r6, r3
 80173ea:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 80173ee:	b16a      	cbz	r2, 801740c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 80173f0:	9a08      	ldr	r2, [sp, #32]
 80173f2:	4593      	cmp	fp, r2
 80173f4:	d10a      	bne.n	801740c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 80173f6:	f8da 0000 	ldr.w	r0, [sl]
 80173fa:	fb09 f303 	mul.w	r3, r9, r3
 80173fe:	4629      	mov	r1, r5
 8017400:	6802      	ldr	r2, [r0, #0]
 8017402:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8017406:	4632      	mov	r2, r6
 8017408:	47d0      	blx	sl
 801740a:	e7d2      	b.n	80173b2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801740c:	9a03      	ldr	r2, [sp, #12]
 801740e:	f8df b03c 	ldr.w	fp, [pc, #60]	; 801744c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8017412:	fb02 5803 	mla	r8, r2, r3, r5
 8017416:	4545      	cmp	r5, r8
 8017418:	d2cb      	bcs.n	80173b2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801741a:	f8db 0000 	ldr.w	r0, [fp]
 801741e:	4629      	mov	r1, r5
 8017420:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8017424:	6802      	ldr	r2, [r0, #0]
 8017426:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801742a:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801742e:	4632      	mov	r2, r6
 8017430:	47d0      	blx	sl
 8017432:	9b03      	ldr	r3, [sp, #12]
 8017434:	444e      	add	r6, r9
 8017436:	441d      	add	r5, r3
 8017438:	e7ed      	b.n	8017416 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801743a:	bf00      	nop
 801743c:	2400e448 	.word	0x2400e448
 8017440:	2400e44a 	.word	0x2400e44a
 8017444:	2400e44e 	.word	0x2400e44e
 8017448:	2400e44c 	.word	0x2400e44c
 801744c:	2400e454 	.word	0x2400e454

08017450 <_ZN8touchgfx8LCD24bppC1Ev>:
 8017450:	2200      	movs	r2, #0
 8017452:	490c      	ldr	r1, [pc, #48]	; (8017484 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 8017454:	6042      	str	r2, [r0, #4]
 8017456:	6001      	str	r1, [r0, #0]
 8017458:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801745c:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8017460:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8017464:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8017468:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801746c:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8017470:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8017474:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8017478:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801747c:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8017480:	4770      	bx	lr
 8017482:	bf00      	nop
 8017484:	08020c58 	.word	0x08020c58

08017488 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8017488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801748c:	b091      	sub	sp, #68	; 0x44
 801748e:	4607      	mov	r7, r0
 8017490:	4688      	mov	r8, r1
 8017492:	6810      	ldr	r0, [r2, #0]
 8017494:	6851      	ldr	r1, [r2, #4]
 8017496:	ac0c      	add	r4, sp, #48	; 0x30
 8017498:	4616      	mov	r6, r2
 801749a:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801749e:	4d64      	ldr	r5, [pc, #400]	; (8017630 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 80174a0:	f8df a190 	ldr.w	sl, [pc, #400]	; 8017634 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 80174a4:	c403      	stmia	r4!, {r0, r1}
 80174a6:	6818      	ldr	r0, [r3, #0]
 80174a8:	ac0e      	add	r4, sp, #56	; 0x38
 80174aa:	6859      	ldr	r1, [r3, #4]
 80174ac:	c403      	stmia	r4!, {r0, r1}
 80174ae:	a80c      	add	r0, sp, #48	; 0x30
 80174b0:	f7fa fafc 	bl	8011aac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80174b4:	4631      	mov	r1, r6
 80174b6:	a80e      	add	r0, sp, #56	; 0x38
 80174b8:	f7fa fb20 	bl	8011afc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80174bc:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80174c0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80174c4:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80174c8:	6828      	ldr	r0, [r5, #0]
 80174ca:	fb11 2103 	smlabb	r1, r1, r3, r2
 80174ce:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 80174d2:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 80174d6:	440f      	add	r7, r1
 80174d8:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80174dc:	440a      	add	r2, r1
 80174de:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80174e2:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80174e6:	4413      	add	r3, r2
 80174e8:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80174ec:	6803      	ldr	r3, [r0, #0]
 80174ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80174f0:	4798      	blx	r3
 80174f2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80174f6:	6828      	ldr	r0, [r5, #0]
 80174f8:	d01f      	beq.n	801753a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 80174fa:	2201      	movs	r2, #1
 80174fc:	2500      	movs	r5, #0
 80174fe:	6801      	ldr	r1, [r0, #0]
 8017500:	b2a4      	uxth	r4, r4
 8017502:	b2b6      	uxth	r6, r6
 8017504:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017508:	e9cd 2508 	strd	r2, r5, [sp, #32]
 801750c:	250b      	movs	r5, #11
 801750e:	9507      	str	r5, [sp, #28]
 8017510:	f8ba 5000 	ldrh.w	r5, [sl]
 8017514:	f8cd 9010 	str.w	r9, [sp, #16]
 8017518:	9602      	str	r6, [sp, #8]
 801751a:	9401      	str	r4, [sp, #4]
 801751c:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8017520:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8017524:	9203      	str	r2, [sp, #12]
 8017526:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801752a:	9200      	str	r2, [sp, #0]
 801752c:	4642      	mov	r2, r8
 801752e:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8017530:	4639      	mov	r1, r7
 8017532:	47a0      	blx	r4
 8017534:	b011      	add	sp, #68	; 0x44
 8017536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801753a:	6803      	ldr	r3, [r0, #0]
 801753c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801753e:	4798      	blx	r3
 8017540:	f8ba 5000 	ldrh.w	r5, [sl]
 8017544:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8017548:	f04f 0e04 	mov.w	lr, #4
 801754c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8017550:	436e      	muls	r6, r5
 8017552:	fb05 2303 	mla	r3, r5, r3, r2
 8017556:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801755a:	1b2d      	subs	r5, r5, r4
 801755c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017560:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017564:	4418      	add	r0, r3
 8017566:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801756a:	1982      	adds	r2, r0, r6
 801756c:	1b1b      	subs	r3, r3, r4
 801756e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017572:	930b      	str	r3, [sp, #44]	; 0x2c
 8017574:	4290      	cmp	r0, r2
 8017576:	d254      	bcs.n	8017622 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 8017578:	eb00 0a04 	add.w	sl, r0, r4
 801757c:	4550      	cmp	r0, sl
 801757e:	d24c      	bcs.n	801761a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 8017580:	f817 1b01 	ldrb.w	r1, [r7], #1
 8017584:	fb1e e101 	smlabb	r1, lr, r1, lr
 8017588:	eb08 0c01 	add.w	ip, r8, r1
 801758c:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8017590:	b173      	cbz	r3, 80175b0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8017592:	2bff      	cmp	r3, #255	; 0xff
 8017594:	f818 b001 	ldrb.w	fp, [r8, r1]
 8017598:	d10c      	bne.n	80175b4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801759a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801759e:	d109      	bne.n	80175b4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 80175a0:	f880 b000 	strb.w	fp, [r0]
 80175a4:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80175a8:	7043      	strb	r3, [r0, #1]
 80175aa:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80175ae:	7083      	strb	r3, [r0, #2]
 80175b0:	3003      	adds	r0, #3
 80175b2:	e7e3      	b.n	801757c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 80175b4:	fb09 f103 	mul.w	r1, r9, r3
 80175b8:	1c4b      	adds	r3, r1, #1
 80175ba:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80175be:	7801      	ldrb	r1, [r0, #0]
 80175c0:	121b      	asrs	r3, r3, #8
 80175c2:	b29e      	uxth	r6, r3
 80175c4:	43db      	mvns	r3, r3
 80175c6:	fb1b fb06 	smulbb	fp, fp, r6
 80175ca:	b2db      	uxtb	r3, r3
 80175cc:	fb01 b103 	mla	r1, r1, r3, fp
 80175d0:	b289      	uxth	r1, r1
 80175d2:	f101 0b01 	add.w	fp, r1, #1
 80175d6:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 80175da:	f890 b001 	ldrb.w	fp, [r0, #1]
 80175de:	fb1b fb03 	smulbb	fp, fp, r3
 80175e2:	1209      	asrs	r1, r1, #8
 80175e4:	7001      	strb	r1, [r0, #0]
 80175e6:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80175ea:	fb01 b106 	mla	r1, r1, r6, fp
 80175ee:	b289      	uxth	r1, r1
 80175f0:	f101 0b01 	add.w	fp, r1, #1
 80175f4:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 80175f8:	1209      	asrs	r1, r1, #8
 80175fa:	7041      	strb	r1, [r0, #1]
 80175fc:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8017600:	f890 c002 	ldrb.w	ip, [r0, #2]
 8017604:	fb1c f303 	smulbb	r3, ip, r3
 8017608:	fb01 3606 	mla	r6, r1, r6, r3
 801760c:	b2b6      	uxth	r6, r6
 801760e:	1c73      	adds	r3, r6, #1
 8017610:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8017614:	1236      	asrs	r6, r6, #8
 8017616:	7086      	strb	r6, [r0, #2]
 8017618:	e7ca      	b.n	80175b0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801761a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801761c:	4428      	add	r0, r5
 801761e:	441f      	add	r7, r3
 8017620:	e7a8      	b.n	8017574 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 8017622:	4b03      	ldr	r3, [pc, #12]	; (8017630 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8017624:	6818      	ldr	r0, [r3, #0]
 8017626:	6803      	ldr	r3, [r0, #0]
 8017628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801762a:	4798      	blx	r3
 801762c:	e782      	b.n	8017534 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801762e:	bf00      	nop
 8017630:	2400e454 	.word	0x2400e454
 8017634:	2400e44e 	.word	0x2400e44e

08017638 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8017638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801763c:	b091      	sub	sp, #68	; 0x44
 801763e:	4680      	mov	r8, r0
 8017640:	460e      	mov	r6, r1
 8017642:	6810      	ldr	r0, [r2, #0]
 8017644:	6851      	ldr	r1, [r2, #4]
 8017646:	ad0c      	add	r5, sp, #48	; 0x30
 8017648:	4614      	mov	r4, r2
 801764a:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801764e:	f8df 9198 	ldr.w	r9, [pc, #408]	; 80177e8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 8017652:	f8df a198 	ldr.w	sl, [pc, #408]	; 80177ec <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8017656:	c503      	stmia	r5!, {r0, r1}
 8017658:	6818      	ldr	r0, [r3, #0]
 801765a:	ad0e      	add	r5, sp, #56	; 0x38
 801765c:	6859      	ldr	r1, [r3, #4]
 801765e:	c503      	stmia	r5!, {r0, r1}
 8017660:	a80c      	add	r0, sp, #48	; 0x30
 8017662:	f7fa fa23 	bl	8011aac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017666:	4621      	mov	r1, r4
 8017668:	a80e      	add	r0, sp, #56	; 0x38
 801766a:	f7fa fa47 	bl	8011afc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801766e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8017672:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8017676:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801767a:	f8d9 0000 	ldr.w	r0, [r9]
 801767e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8017682:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8017686:	eb08 0401 	add.w	r4, r8, r1
 801768a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801768e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8017692:	440a      	add	r2, r1
 8017694:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8017698:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801769c:	4413      	add	r3, r2
 801769e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80176a2:	6803      	ldr	r3, [r0, #0]
 80176a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80176a6:	4798      	blx	r3
 80176a8:	f010 0f80 	tst.w	r0, #128	; 0x80
 80176ac:	f8d9 0000 	ldr.w	r0, [r9]
 80176b0:	d022      	beq.n	80176f8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 80176b2:	2200      	movs	r2, #0
 80176b4:	f04f 0c01 	mov.w	ip, #1
 80176b8:	6801      	ldr	r1, [r0, #0]
 80176ba:	b2ad      	uxth	r5, r5
 80176bc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80176c0:	e9cd c208 	strd	ip, r2, [sp, #32]
 80176c4:	f04f 0c0b 	mov.w	ip, #11
 80176c8:	f8cd c01c 	str.w	ip, [sp, #28]
 80176cc:	f8ba c000 	ldrh.w	ip, [sl]
 80176d0:	9704      	str	r7, [sp, #16]
 80176d2:	9502      	str	r5, [sp, #8]
 80176d4:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 80176d8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80176dc:	9203      	str	r2, [sp, #12]
 80176de:	fa1f f288 	uxth.w	r2, r8
 80176e2:	9201      	str	r2, [sp, #4]
 80176e4:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80176e8:	9200      	str	r2, [sp, #0]
 80176ea:	4632      	mov	r2, r6
 80176ec:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 80176ee:	4621      	mov	r1, r4
 80176f0:	47a8      	blx	r5
 80176f2:	b011      	add	sp, #68	; 0x44
 80176f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176f8:	6803      	ldr	r3, [r0, #0]
 80176fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80176fc:	4798      	blx	r3
 80176fe:	f8ba 2000 	ldrh.w	r2, [sl]
 8017702:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8017706:	f04f 0e03 	mov.w	lr, #3
 801770a:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801770e:	4355      	muls	r5, r2
 8017710:	fa1f fc87 	uxth.w	ip, r7
 8017714:	fb02 1303 	mla	r3, r2, r3, r1
 8017718:	eba2 0208 	sub.w	r2, r2, r8
 801771c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017720:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017724:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017728:	4418      	add	r0, r3
 801772a:	920b      	str	r2, [sp, #44]	; 0x2c
 801772c:	1943      	adds	r3, r0, r5
 801772e:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8017732:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 8017736:	eba2 0208 	sub.w	r2, r2, r8
 801773a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801773e:	b2ad      	uxth	r5, r5
 8017740:	4298      	cmp	r0, r3
 8017742:	d24a      	bcs.n	80177da <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 8017744:	eb00 0908 	add.w	r9, r0, r8
 8017748:	4621      	mov	r1, r4
 801774a:	4548      	cmp	r0, r9
 801774c:	460c      	mov	r4, r1
 801774e:	d240      	bcs.n	80177d2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 8017750:	f04f 0a04 	mov.w	sl, #4
 8017754:	7824      	ldrb	r4, [r4, #0]
 8017756:	2fff      	cmp	r7, #255	; 0xff
 8017758:	f101 0101 	add.w	r1, r1, #1
 801775c:	fb1e a404 	smlabb	r4, lr, r4, sl
 8017760:	eb06 0a04 	add.w	sl, r6, r4
 8017764:	f816 b004 	ldrb.w	fp, [r6, r4]
 8017768:	d02b      	beq.n	80177c2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 801776a:	7804      	ldrb	r4, [r0, #0]
 801776c:	fb14 f405 	smulbb	r4, r4, r5
 8017770:	fb0b 440c 	mla	r4, fp, ip, r4
 8017774:	b2a4      	uxth	r4, r4
 8017776:	f104 0b01 	add.w	fp, r4, #1
 801777a:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801777e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8017782:	fb1b fb05 	smulbb	fp, fp, r5
 8017786:	1224      	asrs	r4, r4, #8
 8017788:	7004      	strb	r4, [r0, #0]
 801778a:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801778e:	fb04 b40c 	mla	r4, r4, ip, fp
 8017792:	b2a4      	uxth	r4, r4
 8017794:	f104 0b01 	add.w	fp, r4, #1
 8017798:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801779c:	1224      	asrs	r4, r4, #8
 801779e:	7044      	strb	r4, [r0, #1]
 80177a0:	f89a 4002 	ldrb.w	r4, [sl, #2]
 80177a4:	f890 a002 	ldrb.w	sl, [r0, #2]
 80177a8:	fb1a fa05 	smulbb	sl, sl, r5
 80177ac:	fb04 a40c 	mla	r4, r4, ip, sl
 80177b0:	b2a4      	uxth	r4, r4
 80177b2:	f104 0a01 	add.w	sl, r4, #1
 80177b6:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 80177ba:	1224      	asrs	r4, r4, #8
 80177bc:	7084      	strb	r4, [r0, #2]
 80177be:	3003      	adds	r0, #3
 80177c0:	e7c3      	b.n	801774a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 80177c2:	f880 b000 	strb.w	fp, [r0]
 80177c6:	f89a 4001 	ldrb.w	r4, [sl, #1]
 80177ca:	7044      	strb	r4, [r0, #1]
 80177cc:	f89a 4002 	ldrb.w	r4, [sl, #2]
 80177d0:	e7f4      	b.n	80177bc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 80177d2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80177d4:	4420      	add	r0, r4
 80177d6:	188c      	adds	r4, r1, r2
 80177d8:	e7b2      	b.n	8017740 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 80177da:	4b03      	ldr	r3, [pc, #12]	; (80177e8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 80177dc:	6818      	ldr	r0, [r3, #0]
 80177de:	6803      	ldr	r3, [r0, #0]
 80177e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177e2:	4798      	blx	r3
 80177e4:	e785      	b.n	80176f2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 80177e6:	bf00      	nop
 80177e8:	2400e454 	.word	0x2400e454
 80177ec:	2400e44e 	.word	0x2400e44e

080177f0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 80177f0:	b430      	push	{r4, r5}
 80177f2:	780d      	ldrb	r5, [r1, #0]
 80177f4:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80177f8:	b11d      	cbz	r5, 8017802 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x12>
 80177fa:	2d01      	cmp	r5, #1
 80177fc:	d005      	beq.n	801780a <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 80177fe:	bc30      	pop	{r4, r5}
 8017800:	4770      	bx	lr
 8017802:	9402      	str	r4, [sp, #8]
 8017804:	bc30      	pop	{r4, r5}
 8017806:	f7ff be3f 	b.w	8017488 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801780a:	9402      	str	r4, [sp, #8]
 801780c:	bc30      	pop	{r4, r5}
 801780e:	f7ff bf13 	b.w	8017638 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
	...

08017814 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8017814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017818:	4605      	mov	r5, r0
 801781a:	b08f      	sub	sp, #60	; 0x3c
 801781c:	460c      	mov	r4, r1
 801781e:	461f      	mov	r7, r3
 8017820:	2b00      	cmp	r3, #0
 8017822:	d052      	beq.n	80178ca <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8017824:	6808      	ldr	r0, [r1, #0]
 8017826:	ab0a      	add	r3, sp, #40	; 0x28
 8017828:	6849      	ldr	r1, [r1, #4]
 801782a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80179f4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801782e:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 80179f8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 8017832:	c303      	stmia	r3!, {r0, r1}
 8017834:	6810      	ldr	r0, [r2, #0]
 8017836:	ab0c      	add	r3, sp, #48	; 0x30
 8017838:	6851      	ldr	r1, [r2, #4]
 801783a:	c303      	stmia	r3!, {r0, r1}
 801783c:	a80a      	add	r0, sp, #40	; 0x28
 801783e:	f7fa f935 	bl	8011aac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017842:	4621      	mov	r1, r4
 8017844:	a80c      	add	r0, sp, #48	; 0x30
 8017846:	f7fa f959 	bl	8011afc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801784a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801784e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8017852:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8017856:	f8d8 0000 	ldr.w	r0, [r8]
 801785a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801785e:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 8017862:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 8017866:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801786a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801786e:	440a      	add	r2, r1
 8017870:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8017874:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8017878:	4413      	add	r3, r2
 801787a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801787e:	6803      	ldr	r3, [r0, #0]
 8017880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017882:	4798      	blx	r3
 8017884:	2fff      	cmp	r7, #255	; 0xff
 8017886:	d023      	beq.n	80178d0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8017888:	f010 0f04 	tst.w	r0, #4
 801788c:	f8d8 0000 	ldr.w	r0, [r8]
 8017890:	d021      	beq.n	80178d6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 8017892:	2100      	movs	r1, #0
 8017894:	f04f 0e01 	mov.w	lr, #1
 8017898:	f8d0 c000 	ldr.w	ip, [r0]
 801789c:	b2a4      	uxth	r4, r4
 801789e:	9106      	str	r1, [sp, #24]
 80178a0:	b2b6      	uxth	r6, r6
 80178a2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80178a6:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80178aa:	e9cd e107 	strd	lr, r1, [sp, #28]
 80178ae:	f8b9 e000 	ldrh.w	lr, [r9]
 80178b2:	9703      	str	r7, [sp, #12]
 80178b4:	9401      	str	r4, [sp, #4]
 80178b6:	9600      	str	r6, [sp, #0]
 80178b8:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 80178bc:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80178c0:	9102      	str	r1, [sp, #8]
 80178c2:	4629      	mov	r1, r5
 80178c4:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 80178c8:	47a0      	blx	r4
 80178ca:	b00f      	add	sp, #60	; 0x3c
 80178cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178d0:	f010 0f01 	tst.w	r0, #1
 80178d4:	e7da      	b.n	801788c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 80178d6:	6803      	ldr	r3, [r0, #0]
 80178d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80178da:	4798      	blx	r3
 80178dc:	f8b9 1000 	ldrh.w	r1, [r9]
 80178e0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80178e4:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 80178e8:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80178ec:	434c      	muls	r4, r1
 80178ee:	2fff      	cmp	r7, #255	; 0xff
 80178f0:	fb01 2303 	mla	r3, r1, r3, r2
 80178f4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80178f8:	eba1 0106 	sub.w	r1, r1, r6
 80178fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017900:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8017904:	4418      	add	r0, r3
 8017906:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801790a:	eba3 0606 	sub.w	r6, r3, r6
 801790e:	4404      	add	r4, r0
 8017910:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8017914:	d04a      	beq.n	80179ac <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 8017916:	43fa      	mvns	r2, r7
 8017918:	b2bb      	uxth	r3, r7
 801791a:	b2d7      	uxtb	r7, r2
 801791c:	42a0      	cmp	r0, r4
 801791e:	d263      	bcs.n	80179e8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8017920:	eb00 0e0c 	add.w	lr, r0, ip
 8017924:	4586      	cmp	lr, r0
 8017926:	f100 0803 	add.w	r8, r0, #3
 801792a:	d93a      	bls.n	80179a2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801792c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8017930:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 8017934:	00d0      	lsls	r0, r2, #3
 8017936:	fb19 f907 	smulbb	r9, r9, r7
 801793a:	b2c0      	uxtb	r0, r0
 801793c:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8017940:	fb00 9003 	mla	r0, r0, r3, r9
 8017944:	b280      	uxth	r0, r0
 8017946:	f100 0901 	add.w	r9, r0, #1
 801794a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801794e:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 8017952:	fb19 f907 	smulbb	r9, r9, r7
 8017956:	1200      	asrs	r0, r0, #8
 8017958:	f808 0c03 	strb.w	r0, [r8, #-3]
 801795c:	10d0      	asrs	r0, r2, #3
 801795e:	1212      	asrs	r2, r2, #8
 8017960:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8017964:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8017968:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801796c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8017970:	fb00 9003 	mla	r0, r0, r3, r9
 8017974:	b280      	uxth	r0, r0
 8017976:	f100 0901 	add.w	r9, r0, #1
 801797a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801797e:	1200      	asrs	r0, r0, #8
 8017980:	f808 0c02 	strb.w	r0, [r8, #-2]
 8017984:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8017988:	fb10 f007 	smulbb	r0, r0, r7
 801798c:	fb02 0203 	mla	r2, r2, r3, r0
 8017990:	b292      	uxth	r2, r2
 8017992:	1c50      	adds	r0, r2, #1
 8017994:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8017998:	4640      	mov	r0, r8
 801799a:	1212      	asrs	r2, r2, #8
 801799c:	f808 2c01 	strb.w	r2, [r8, #-1]
 80179a0:	e7c0      	b.n	8017924 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 80179a2:	4408      	add	r0, r1
 80179a4:	4435      	add	r5, r6
 80179a6:	e7b9      	b.n	801791c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 80179a8:	4408      	add	r0, r1
 80179aa:	4435      	add	r5, r6
 80179ac:	42a0      	cmp	r0, r4
 80179ae:	d21b      	bcs.n	80179e8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 80179b0:	eb00 070c 	add.w	r7, r0, ip
 80179b4:	42b8      	cmp	r0, r7
 80179b6:	d2f7      	bcs.n	80179a8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 80179b8:	f835 3b02 	ldrh.w	r3, [r5], #2
 80179bc:	3003      	adds	r0, #3
 80179be:	00da      	lsls	r2, r3, #3
 80179c0:	b2d2      	uxtb	r2, r2
 80179c2:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80179c6:	f800 2c03 	strb.w	r2, [r0, #-3]
 80179ca:	10da      	asrs	r2, r3, #3
 80179cc:	121b      	asrs	r3, r3, #8
 80179ce:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80179d2:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80179d6:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80179da:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80179de:	f800 2c02 	strb.w	r2, [r0, #-2]
 80179e2:	f800 3c01 	strb.w	r3, [r0, #-1]
 80179e6:	e7e5      	b.n	80179b4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 80179e8:	4b02      	ldr	r3, [pc, #8]	; (80179f4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 80179ea:	6818      	ldr	r0, [r3, #0]
 80179ec:	6803      	ldr	r3, [r0, #0]
 80179ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179f0:	4798      	blx	r3
 80179f2:	e76a      	b.n	80178ca <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 80179f4:	2400e454 	.word	0x2400e454
 80179f8:	2400e44e 	.word	0x2400e44e

080179fc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 80179fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a00:	b08a      	sub	sp, #40	; 0x28
 8017a02:	460d      	mov	r5, r1
 8017a04:	4604      	mov	r4, r0
 8017a06:	461e      	mov	r6, r3
 8017a08:	6808      	ldr	r0, [r1, #0]
 8017a0a:	ab06      	add	r3, sp, #24
 8017a0c:	6849      	ldr	r1, [r1, #4]
 8017a0e:	4f5d      	ldr	r7, [pc, #372]	; (8017b84 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 8017a10:	c303      	stmia	r3!, {r0, r1}
 8017a12:	6810      	ldr	r0, [r2, #0]
 8017a14:	ab08      	add	r3, sp, #32
 8017a16:	6851      	ldr	r1, [r2, #4]
 8017a18:	c303      	stmia	r3!, {r0, r1}
 8017a1a:	a806      	add	r0, sp, #24
 8017a1c:	f7fa f846 	bl	8011aac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017a20:	4629      	mov	r1, r5
 8017a22:	a808      	add	r0, sp, #32
 8017a24:	f7fa f86a 	bl	8011afc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017a28:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8017a2c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8017a30:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8017a34:	6838      	ldr	r0, [r7, #0]
 8017a36:	fb11 2103 	smlabb	r1, r1, r3, r2
 8017a3a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8017a3e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8017a42:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8017a46:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8017a4a:	440a      	add	r2, r1
 8017a4c:	f8ad 2020 	strh.w	r2, [sp, #32]
 8017a50:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8017a54:	4413      	add	r3, r2
 8017a56:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8017a5a:	6803      	ldr	r3, [r0, #0]
 8017a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017a5e:	4798      	blx	r3
 8017a60:	2eff      	cmp	r6, #255	; 0xff
 8017a62:	d119      	bne.n	8017a98 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8017a64:	f010 0f20 	tst.w	r0, #32
 8017a68:	6838      	ldr	r0, [r7, #0]
 8017a6a:	d018      	beq.n	8017a9e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8017a6c:	b2ad      	uxth	r5, r5
 8017a6e:	2700      	movs	r7, #0
 8017a70:	6801      	ldr	r1, [r0, #0]
 8017a72:	9501      	str	r5, [sp, #4]
 8017a74:	fa1f f588 	uxth.w	r5, r8
 8017a78:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8017a7c:	9500      	str	r5, [sp, #0]
 8017a7e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8017a82:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8017a86:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8017a8a:	9602      	str	r6, [sp, #8]
 8017a8c:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8017a8e:	4621      	mov	r1, r4
 8017a90:	47a8      	blx	r5
 8017a92:	b00a      	add	sp, #40	; 0x28
 8017a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a98:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017a9c:	e7e4      	b.n	8017a68 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 8017a9e:	6803      	ldr	r3, [r0, #0]
 8017aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017aa2:	4798      	blx	r3
 8017aa4:	4b38      	ldr	r3, [pc, #224]	; (8017b88 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 8017aa6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8017aaa:	f8b3 c000 	ldrh.w	ip, [r3]
 8017aae:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8017ab2:	fb0c f505 	mul.w	r5, ip, r5
 8017ab6:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 8017aba:	fb0c 2303 	mla	r3, ip, r3, r2
 8017abe:	ebac 0c08 	sub.w	ip, ip, r8
 8017ac2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017ac6:	ebae 0e08 	sub.w	lr, lr, r8
 8017aca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017ace:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8017ad2:	4418      	add	r0, r3
 8017ad4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8017ad8:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8017adc:	4405      	add	r5, r0
 8017ade:	42a8      	cmp	r0, r5
 8017ae0:	d24a      	bcs.n	8017b78 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 8017ae2:	eb00 0803 	add.w	r8, r0, r3
 8017ae6:	4540      	cmp	r0, r8
 8017ae8:	d243      	bcs.n	8017b72 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 8017aea:	78e2      	ldrb	r2, [r4, #3]
 8017aec:	b15a      	cbz	r2, 8017b06 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 8017aee:	2aff      	cmp	r2, #255	; 0xff
 8017af0:	f894 9000 	ldrb.w	r9, [r4]
 8017af4:	d10a      	bne.n	8017b0c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8017af6:	2eff      	cmp	r6, #255	; 0xff
 8017af8:	d108      	bne.n	8017b0c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8017afa:	f880 9000 	strb.w	r9, [r0]
 8017afe:	7862      	ldrb	r2, [r4, #1]
 8017b00:	7042      	strb	r2, [r0, #1]
 8017b02:	78a2      	ldrb	r2, [r4, #2]
 8017b04:	7082      	strb	r2, [r0, #2]
 8017b06:	3003      	adds	r0, #3
 8017b08:	3404      	adds	r4, #4
 8017b0a:	e7ec      	b.n	8017ae6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 8017b0c:	4372      	muls	r2, r6
 8017b0e:	1c51      	adds	r1, r2, #1
 8017b10:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8017b14:	1209      	asrs	r1, r1, #8
 8017b16:	fa1f fa81 	uxth.w	sl, r1
 8017b1a:	43c9      	mvns	r1, r1
 8017b1c:	fb19 f90a 	smulbb	r9, r9, sl
 8017b20:	b2ca      	uxtb	r2, r1
 8017b22:	7801      	ldrb	r1, [r0, #0]
 8017b24:	fb01 9902 	mla	r9, r1, r2, r9
 8017b28:	fa1f f989 	uxth.w	r9, r9
 8017b2c:	f109 0101 	add.w	r1, r9, #1
 8017b30:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8017b34:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017b38:	f880 9000 	strb.w	r9, [r0]
 8017b3c:	f890 9001 	ldrb.w	r9, [r0, #1]
 8017b40:	7861      	ldrb	r1, [r4, #1]
 8017b42:	fb19 f902 	smulbb	r9, r9, r2
 8017b46:	fb01 910a 	mla	r1, r1, sl, r9
 8017b4a:	b289      	uxth	r1, r1
 8017b4c:	f101 0901 	add.w	r9, r1, #1
 8017b50:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8017b54:	1209      	asrs	r1, r1, #8
 8017b56:	7041      	strb	r1, [r0, #1]
 8017b58:	7881      	ldrb	r1, [r0, #2]
 8017b5a:	f894 9002 	ldrb.w	r9, [r4, #2]
 8017b5e:	fb11 f202 	smulbb	r2, r1, r2
 8017b62:	fb09 220a 	mla	r2, r9, sl, r2
 8017b66:	b292      	uxth	r2, r2
 8017b68:	1c51      	adds	r1, r2, #1
 8017b6a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8017b6e:	1212      	asrs	r2, r2, #8
 8017b70:	e7c8      	b.n	8017b04 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 8017b72:	4460      	add	r0, ip
 8017b74:	4474      	add	r4, lr
 8017b76:	e7b2      	b.n	8017ade <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 8017b78:	6838      	ldr	r0, [r7, #0]
 8017b7a:	6803      	ldr	r3, [r0, #0]
 8017b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b7e:	4798      	blx	r3
 8017b80:	e787      	b.n	8017a92 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8017b82:	bf00      	nop
 8017b84:	2400e454 	.word	0x2400e454
 8017b88:	2400e44e 	.word	0x2400e44e

08017b8c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8017b8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017b90:	b085      	sub	sp, #20
 8017b92:	4606      	mov	r6, r0
 8017b94:	460c      	mov	r4, r1
 8017b96:	4691      	mov	r9, r2
 8017b98:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8017b9c:	4698      	mov	r8, r3
 8017b9e:	b31d      	cbz	r5, 8017be8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8017ba0:	4608      	mov	r0, r1
 8017ba2:	f7fd fa4f 	bl	8015044 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017ba6:	4607      	mov	r7, r0
 8017ba8:	4620      	mov	r0, r4
 8017baa:	f7fd fa7f 	bl	80150ac <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017bae:	f8ad 000e 	strh.w	r0, [sp, #14]
 8017bb2:	4620      	mov	r0, r4
 8017bb4:	f8ad 9008 	strh.w	r9, [sp, #8]
 8017bb8:	f8ad 800a 	strh.w	r8, [sp, #10]
 8017bbc:	f8ad 700c 	strh.w	r7, [sp, #12]
 8017bc0:	f7fd fb78 	bl	80152b4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017bc4:	280b      	cmp	r0, #11
 8017bc6:	d80f      	bhi.n	8017be8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8017bc8:	e8df f000 	tbb	[pc, r0]
 8017bcc:	0e062920 	.word	0x0e062920
 8017bd0:	0e0e0e0e 	.word	0x0e0e0e0e
 8017bd4:	110e0e0e 	.word	0x110e0e0e
 8017bd8:	4620      	mov	r0, r4
 8017bda:	f7fd fae7 	bl	80151ac <_ZNK8touchgfx6Bitmap7getDataEv>
 8017bde:	462b      	mov	r3, r5
 8017be0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017be2:	a902      	add	r1, sp, #8
 8017be4:	f7ff ff0a 	bl	80179fc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8017be8:	b005      	add	sp, #20
 8017bea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017bee:	4620      	mov	r0, r4
 8017bf0:	f7fd fadc 	bl	80151ac <_ZNK8touchgfx6Bitmap7getDataEv>
 8017bf4:	4606      	mov	r6, r0
 8017bf6:	4620      	mov	r0, r4
 8017bf8:	f7fd fb08 	bl	801520c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8017bfc:	9500      	str	r5, [sp, #0]
 8017bfe:	4601      	mov	r1, r0
 8017c00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017c02:	aa02      	add	r2, sp, #8
 8017c04:	4630      	mov	r0, r6
 8017c06:	f7ff fdf3 	bl	80177f0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8017c0a:	e7ed      	b.n	8017be8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8017c0c:	4620      	mov	r0, r4
 8017c0e:	f7fd facd 	bl	80151ac <_ZNK8touchgfx6Bitmap7getDataEv>
 8017c12:	462b      	mov	r3, r5
 8017c14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017c16:	a902      	add	r1, sp, #8
 8017c18:	f7ff fdfc 	bl	8017814 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8017c1c:	e7e4      	b.n	8017be8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8017c1e:	6833      	ldr	r3, [r6, #0]
 8017c20:	4620      	mov	r0, r4
 8017c22:	68df      	ldr	r7, [r3, #12]
 8017c24:	f7fd fac2 	bl	80151ac <_ZNK8touchgfx6Bitmap7getDataEv>
 8017c28:	2300      	movs	r3, #0
 8017c2a:	4601      	mov	r1, r0
 8017c2c:	aa02      	add	r2, sp, #8
 8017c2e:	4630      	mov	r0, r6
 8017c30:	e9cd 5300 	strd	r5, r3, [sp]
 8017c34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017c36:	47b8      	blx	r7
 8017c38:	e7d6      	b.n	8017be8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

08017c3a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8017c3a:	b4f0      	push	{r4, r5, r6, r7}
 8017c3c:	4616      	mov	r6, r2
 8017c3e:	461c      	mov	r4, r3
 8017c40:	460d      	mov	r5, r1
 8017c42:	9a04      	ldr	r2, [sp, #16]
 8017c44:	2e01      	cmp	r6, #1
 8017c46:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8017c4a:	d00e      	beq.n	8017c6a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 8017c4c:	d303      	bcc.n	8017c56 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 8017c4e:	2e02      	cmp	r6, #2
 8017c50:	d006      	beq.n	8017c60 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 8017c52:	bcf0      	pop	{r4, r5, r6, r7}
 8017c54:	4770      	bx	lr
 8017c56:	4621      	mov	r1, r4
 8017c58:	4628      	mov	r0, r5
 8017c5a:	bcf0      	pop	{r4, r5, r6, r7}
 8017c5c:	f7ff bdda 	b.w	8017814 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8017c60:	4621      	mov	r1, r4
 8017c62:	4628      	mov	r0, r5
 8017c64:	bcf0      	pop	{r4, r5, r6, r7}
 8017c66:	f7ff bec9 	b.w	80179fc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8017c6a:	6805      	ldr	r5, [r0, #0]
 8017c6c:	2600      	movs	r6, #0
 8017c6e:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8017c72:	68ed      	ldr	r5, [r5, #12]
 8017c74:	4613      	mov	r3, r2
 8017c76:	4622      	mov	r2, r4
 8017c78:	46ac      	mov	ip, r5
 8017c7a:	bcf0      	pop	{r4, r5, r6, r7}
 8017c7c:	4760      	bx	ip
	...

08017c80 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8017c80:	b160      	cbz	r0, 8017c9c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 8017c82:	2903      	cmp	r1, #3
 8017c84:	d818      	bhi.n	8017cb8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8017c86:	e8df f001 	tbb	[pc, r1]
 8017c8a:	1902      	.short	0x1902
 8017c8c:	1b06      	.short	0x1b06
 8017c8e:	4b0e      	ldr	r3, [pc, #56]	; (8017cc8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8017c90:	8818      	ldrh	r0, [r3, #0]
 8017c92:	4240      	negs	r0, r0
 8017c94:	4770      	bx	lr
 8017c96:	4b0c      	ldr	r3, [pc, #48]	; (8017cc8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8017c98:	8818      	ldrh	r0, [r3, #0]
 8017c9a:	4770      	bx	lr
 8017c9c:	2903      	cmp	r1, #3
 8017c9e:	d80b      	bhi.n	8017cb8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8017ca0:	a301      	add	r3, pc, #4	; (adr r3, 8017ca8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 8017ca2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8017ca6:	bf00      	nop
 8017ca8:	08017cbd 	.word	0x08017cbd
 8017cac:	08017c97 	.word	0x08017c97
 8017cb0:	08017cc1 	.word	0x08017cc1
 8017cb4:	08017c8f 	.word	0x08017c8f
 8017cb8:	2000      	movs	r0, #0
 8017cba:	4770      	bx	lr
 8017cbc:	2001      	movs	r0, #1
 8017cbe:	4770      	bx	lr
 8017cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8017cc4:	4770      	bx	lr
 8017cc6:	bf00      	nop
 8017cc8:	2400e44e 	.word	0x2400e44e

08017ccc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 8017ccc:	b160      	cbz	r0, 8017ce8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 8017cce:	2903      	cmp	r1, #3
 8017cd0:	d818      	bhi.n	8017d04 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8017cd2:	e8df f001 	tbb	[pc, r1]
 8017cd6:	0219      	.short	0x0219
 8017cd8:	051b      	.short	0x051b
 8017cda:	4b0e      	ldr	r3, [pc, #56]	; (8017d14 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8017cdc:	8818      	ldrh	r0, [r3, #0]
 8017cde:	4770      	bx	lr
 8017ce0:	4b0c      	ldr	r3, [pc, #48]	; (8017d14 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8017ce2:	8818      	ldrh	r0, [r3, #0]
 8017ce4:	4240      	negs	r0, r0
 8017ce6:	4770      	bx	lr
 8017ce8:	2903      	cmp	r1, #3
 8017cea:	d80b      	bhi.n	8017d04 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8017cec:	a301      	add	r3, pc, #4	; (adr r3, 8017cf4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 8017cee:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8017cf2:	bf00      	nop
 8017cf4:	08017cdb 	.word	0x08017cdb
 8017cf8:	08017d0d 	.word	0x08017d0d
 8017cfc:	08017ce1 	.word	0x08017ce1
 8017d00:	08017d09 	.word	0x08017d09
 8017d04:	2000      	movs	r0, #0
 8017d06:	4770      	bx	lr
 8017d08:	2001      	movs	r0, #1
 8017d0a:	4770      	bx	lr
 8017d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8017d10:	4770      	bx	lr
 8017d12:	bf00      	nop
 8017d14:	2400e44e 	.word	0x2400e44e

08017d18 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8017d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d1c:	b097      	sub	sp, #92	; 0x5c
 8017d1e:	910b      	str	r1, [sp, #44]	; 0x2c
 8017d20:	a912      	add	r1, sp, #72	; 0x48
 8017d22:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 8017d26:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 8017d2a:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 8017d2e:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 8017d32:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 8017d36:	e881 000c 	stmia.w	r1, {r2, r3}
 8017d3a:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 8017d3e:	930a      	str	r3, [sp, #40]	; 0x28
 8017d40:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8017d44:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 8017d48:	9311      	str	r3, [sp, #68]	; 0x44
 8017d4a:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 8017d4e:	798d      	ldrb	r5, [r1, #6]
 8017d50:	930c      	str	r3, [sp, #48]	; 0x30
 8017d52:	7b4b      	ldrb	r3, [r1, #13]
 8017d54:	0158      	lsls	r0, r3, #5
 8017d56:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8017d5a:	4328      	orrs	r0, r5
 8017d5c:	9009      	str	r0, [sp, #36]	; 0x24
 8017d5e:	f000 817c 	beq.w	801805a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8017d62:	011b      	lsls	r3, r3, #4
 8017d64:	79c8      	ldrb	r0, [r1, #7]
 8017d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017d6a:	4303      	orrs	r3, r0
 8017d6c:	930e      	str	r3, [sp, #56]	; 0x38
 8017d6e:	f000 8174 	beq.w	801805a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8017d72:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8017d76:	b29b      	uxth	r3, r3
 8017d78:	2f00      	cmp	r7, #0
 8017d7a:	f000 8116 	beq.w	8017faa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 8017d7e:	1aff      	subs	r7, r7, r3
 8017d80:	b2bf      	uxth	r7, r7
 8017d82:	043b      	lsls	r3, r7, #16
 8017d84:	d502      	bpl.n	8017d8c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8017d86:	1bf6      	subs	r6, r6, r7
 8017d88:	2700      	movs	r7, #0
 8017d8a:	b236      	sxth	r6, r6
 8017d8c:	f9b2 1000 	ldrsh.w	r1, [r2]
 8017d90:	a812      	add	r0, sp, #72	; 0x48
 8017d92:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8017d96:	428e      	cmp	r6, r1
 8017d98:	b28b      	uxth	r3, r1
 8017d9a:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8017d9e:	bfbf      	itttt	lt
 8017da0:	18ff      	addlt	r7, r7, r3
 8017da2:	1bbe      	sublt	r6, r7, r6
 8017da4:	b2b7      	uxthlt	r7, r6
 8017da6:	460e      	movlt	r6, r1
 8017da8:	8891      	ldrh	r1, [r2, #4]
 8017daa:	440b      	add	r3, r1
 8017dac:	4631      	mov	r1, r6
 8017dae:	b21b      	sxth	r3, r3
 8017db0:	9310      	str	r3, [sp, #64]	; 0x40
 8017db2:	88d3      	ldrh	r3, [r2, #6]
 8017db4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017db6:	449a      	add	sl, r3
 8017db8:	fa0f f38a 	sxth.w	r3, sl
 8017dbc:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8017dc0:	930f      	str	r3, [sp, #60]	; 0x3c
 8017dc2:	4bb5      	ldr	r3, [pc, #724]	; (8018098 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 8017dc4:	f893 b000 	ldrb.w	fp, [r3]
 8017dc8:	f10b 3cff 	add.w	ip, fp, #4294967295
 8017dcc:	f1dc 0300 	rsbs	r3, ip, #0
 8017dd0:	eb43 030c 	adc.w	r3, r3, ip
 8017dd4:	930d      	str	r3, [sp, #52]	; 0x34
 8017dd6:	464b      	mov	r3, r9
 8017dd8:	f7f9 fce2 	bl	80117a0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8017ddc:	4631      	mov	r1, r6
 8017dde:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8017de2:	464b      	mov	r3, r9
 8017de4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017de6:	a812      	add	r0, sp, #72	; 0x48
 8017de8:	f7f9 fcf7 	bl	80117da <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8017dec:	a916      	add	r1, sp, #88	; 0x58
 8017dee:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8017df2:	a815      	add	r0, sp, #84	; 0x54
 8017df4:	f7f9 fe18 	bl	8011a28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8017df8:	f1b9 0f00 	cmp.w	r9, #0
 8017dfc:	f040 80d8 	bne.w	8017fb0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 8017e00:	f1bb 0f01 	cmp.w	fp, #1
 8017e04:	f040 80dc 	bne.w	8017fc0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8017e08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017e0a:	b153      	cbz	r3, 8017e22 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8017e0c:	2508      	movs	r5, #8
 8017e0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017e10:	fb95 f3f8 	sdiv	r3, r5, r8
 8017e14:	1e5d      	subs	r5, r3, #1
 8017e16:	4415      	add	r5, r2
 8017e18:	fb95 f5f3 	sdiv	r5, r5, r3
 8017e1c:	fb15 f503 	smulbb	r5, r5, r3
 8017e20:	b2ad      	uxth	r5, r5
 8017e22:	b907      	cbnz	r7, 8017e26 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8017e24:	b16c      	cbz	r4, 8017e42 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 8017e26:	fb04 7305 	mla	r3, r4, r5, r7
 8017e2a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8017e2c:	ebaa 0a04 	sub.w	sl, sl, r4
 8017e30:	fb08 f303 	mul.w	r3, r8, r3
 8017e34:	fa1f fa8a 	uxth.w	sl, sl
 8017e38:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8017e3c:	f003 0407 	and.w	r4, r3, #7
 8017e40:	9226      	str	r2, [sp, #152]	; 0x98
 8017e42:	4649      	mov	r1, r9
 8017e44:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017e46:	f7ff ff1b 	bl	8017c80 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8017e4a:	4683      	mov	fp, r0
 8017e4c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017e4e:	f7ff ff3d 	bl	8017ccc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8017e52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017e54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017e56:	4681      	mov	r9, r0
 8017e58:	1a9b      	subs	r3, r3, r2
 8017e5a:	459a      	cmp	sl, r3
 8017e5c:	bfa8      	it	ge
 8017e5e:	469a      	movge	sl, r3
 8017e60:	f1ba 0f00 	cmp.w	sl, #0
 8017e64:	f340 80f9 	ble.w	801805a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8017e68:	1bf6      	subs	r6, r6, r7
 8017e6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017e6c:	1b9e      	subs	r6, r3, r6
 8017e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e70:	429e      	cmp	r6, r3
 8017e72:	bfd4      	ite	le
 8017e74:	ebc7 0706 	rsble	r7, r7, r6
 8017e78:	ebc7 0703 	rsbgt	r7, r7, r3
 8017e7c:	2f00      	cmp	r7, #0
 8017e7e:	f340 80ec 	ble.w	801805a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8017e82:	1bed      	subs	r5, r5, r7
 8017e84:	fb08 f305 	mul.w	r3, r8, r5
 8017e88:	930d      	str	r3, [sp, #52]	; 0x34
 8017e8a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017e8c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8017e90:	930e      	str	r3, [sp, #56]	; 0x38
 8017e92:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017e94:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8017e98:	930f      	str	r3, [sp, #60]	; 0x3c
 8017e9a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017e9c:	b2db      	uxtb	r3, r3
 8017e9e:	9310      	str	r3, [sp, #64]	; 0x40
 8017ea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	f040 80de 	bne.w	8018064 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 8017ea8:	4b7c      	ldr	r3, [pc, #496]	; (801809c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 8017eaa:	6818      	ldr	r0, [r3, #0]
 8017eac:	6803      	ldr	r3, [r0, #0]
 8017eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017eb0:	4798      	blx	r3
 8017eb2:	2301      	movs	r3, #1
 8017eb4:	4a7a      	ldr	r2, [pc, #488]	; (80180a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8017eb6:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 8017eba:	fb07 9b1b 	mls	fp, r7, fp, r9
 8017ebe:	fa03 f308 	lsl.w	r3, r3, r8
 8017ec2:	8811      	ldrh	r1, [r2, #0]
 8017ec4:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8017ec8:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8017ecc:	3b01      	subs	r3, #1
 8017ece:	fb06 bb07 	mla	fp, r6, r7, fp
 8017ed2:	b2db      	uxtb	r3, r3
 8017ed4:	930a      	str	r3, [sp, #40]	; 0x28
 8017ed6:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8017eda:	fb01 2303 	mla	r3, r1, r3, r2
 8017ede:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017ee2:	18c3      	adds	r3, r0, r3
 8017ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8017ee6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017ee8:	781a      	ldrb	r2, [r3, #0]
 8017eea:	4122      	asrs	r2, r4
 8017eec:	b2d2      	uxtb	r2, r2
 8017eee:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8017ef2:	f0c0 80d7 	bcc.w	80180a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 8017ef6:	46be      	mov	lr, r7
 8017ef8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017efa:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8017efe:	f0c0 80ba 	bcc.w	8018076 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 8017f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f04:	4013      	ands	r3, r2
 8017f06:	d041      	beq.n	8017f8c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8017f08:	20ff      	movs	r0, #255	; 0xff
 8017f0a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8017f0c:	fb90 f5f5 	sdiv	r5, r0, r5
 8017f10:	436b      	muls	r3, r5
 8017f12:	2bfe      	cmp	r3, #254	; 0xfe
 8017f14:	dd03      	ble.n	8017f1e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 8017f16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017f18:	4285      	cmp	r5, r0
 8017f1a:	f000 80a5 	beq.w	8018068 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 8017f1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017f20:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017f22:	fb15 f303 	smulbb	r3, r5, r3
 8017f26:	b29b      	uxth	r3, r3
 8017f28:	1c5d      	adds	r5, r3, #1
 8017f2a:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8017f2e:	780d      	ldrb	r5, [r1, #0]
 8017f30:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8017f34:	fa1f fc83 	uxth.w	ip, r3
 8017f38:	43db      	mvns	r3, r3
 8017f3a:	fb10 f90c 	smulbb	r9, r0, ip
 8017f3e:	b2db      	uxtb	r3, r3
 8017f40:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8017f42:	fb05 9503 	mla	r5, r5, r3, r9
 8017f46:	b2ad      	uxth	r5, r5
 8017f48:	f105 0901 	add.w	r9, r5, #1
 8017f4c:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8017f50:	fb10 f90c 	smulbb	r9, r0, ip
 8017f54:	980e      	ldr	r0, [sp, #56]	; 0x38
 8017f56:	122d      	asrs	r5, r5, #8
 8017f58:	fb10 fc0c 	smulbb	ip, r0, ip
 8017f5c:	700d      	strb	r5, [r1, #0]
 8017f5e:	784d      	ldrb	r5, [r1, #1]
 8017f60:	fb05 9503 	mla	r5, r5, r3, r9
 8017f64:	b2ad      	uxth	r5, r5
 8017f66:	f105 0901 	add.w	r9, r5, #1
 8017f6a:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8017f6e:	122d      	asrs	r5, r5, #8
 8017f70:	704d      	strb	r5, [r1, #1]
 8017f72:	788d      	ldrb	r5, [r1, #2]
 8017f74:	fb05 cc03 	mla	ip, r5, r3, ip
 8017f78:	fa1f fc8c 	uxth.w	ip, ip
 8017f7c:	f10c 0301 	add.w	r3, ip, #1
 8017f80:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8017f84:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8017f88:	f881 c002 	strb.w	ip, [r1, #2]
 8017f8c:	4444      	add	r4, r8
 8017f8e:	4431      	add	r1, r6
 8017f90:	b2a4      	uxth	r4, r4
 8017f92:	2c07      	cmp	r4, #7
 8017f94:	bf89      	itett	hi
 8017f96:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 8017f98:	fa42 f208 	asrls.w	r2, r2, r8
 8017f9c:	2400      	movhi	r4, #0
 8017f9e:	785a      	ldrbhi	r2, [r3, #1]
 8017fa0:	bf8a      	itet	hi
 8017fa2:	3301      	addhi	r3, #1
 8017fa4:	b2d2      	uxtbls	r2, r2
 8017fa6:	9326      	strhi	r3, [sp, #152]	; 0x98
 8017fa8:	e7a7      	b.n	8017efa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 8017faa:	441e      	add	r6, r3
 8017fac:	b236      	sxth	r6, r6
 8017fae:	e6ed      	b.n	8017d8c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8017fb0:	f1b9 0f01 	cmp.w	r9, #1
 8017fb4:	f47f af28 	bne.w	8017e08 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8017fb8:	f1bb 0f01 	cmp.w	fp, #1
 8017fbc:	f47f af24 	bne.w	8017e08 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8017fc0:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 801809c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 8017fc4:	f8db 0000 	ldr.w	r0, [fp]
 8017fc8:	6803      	ldr	r3, [r0, #0]
 8017fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017fcc:	4798      	blx	r3
 8017fce:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8017fd2:	465a      	mov	r2, fp
 8017fd4:	d006      	beq.n	8017fe4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8017fd6:	f1b8 0f04 	cmp.w	r8, #4
 8017fda:	d141      	bne.n	8018060 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 8017fdc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017fde:	3300      	adds	r3, #0
 8017fe0:	bf18      	it	ne
 8017fe2:	2301      	movne	r3, #1
 8017fe4:	0580      	lsls	r0, r0, #22
 8017fe6:	d566      	bpl.n	80180b6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8017fe8:	f1b8 0f08 	cmp.w	r8, #8
 8017fec:	d163      	bne.n	80180b6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	bf0c      	ite	eq
 8017ff2:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8017ff6:	f44f 7180 	movne.w	r1, #256	; 0x100
 8017ffa:	2f00      	cmp	r7, #0
 8017ffc:	f47f af04 	bne.w	8017e08 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8018000:	2c00      	cmp	r4, #0
 8018002:	f47f af01 	bne.w	8017e08 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8018006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018008:	9810      	ldr	r0, [sp, #64]	; 0x40
 801800a:	18f3      	adds	r3, r6, r3
 801800c:	4283      	cmp	r3, r0
 801800e:	f73f aefb 	bgt.w	8017e08 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8018012:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018014:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018016:	4403      	add	r3, r0
 8018018:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801801a:	4283      	cmp	r3, r0
 801801c:	f73f aef4 	bgt.w	8017e08 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8018020:	f1b8 0f08 	cmp.w	r8, #8
 8018024:	6810      	ldr	r0, [r2, #0]
 8018026:	f04f 0600 	mov.w	r6, #0
 801802a:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801802e:	bf18      	it	ne
 8018030:	3501      	addne	r5, #1
 8018032:	6804      	ldr	r4, [r0, #0]
 8018034:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8018038:	bf18      	it	ne
 801803a:	f025 0501 	bicne.w	r5, r5, #1
 801803e:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8018042:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018044:	bf18      	it	ne
 8018046:	b2ad      	uxthne	r5, r5
 8018048:	9104      	str	r1, [sp, #16]
 801804a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801804c:	e9cd 5a00 	strd	r5, sl, [sp]
 8018050:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8018054:	9926      	ldr	r1, [sp, #152]	; 0x98
 8018056:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8018058:	47a0      	blx	r4
 801805a:	b017      	add	sp, #92	; 0x5c
 801805c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018060:	2300      	movs	r3, #0
 8018062:	e7bf      	b.n	8017fe4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8018064:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018066:	e724      	b.n	8017eb2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 8018068:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801806a:	700b      	strb	r3, [r1, #0]
 801806c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801806e:	704b      	strb	r3, [r1, #1]
 8018070:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018072:	708b      	strb	r3, [r1, #2]
 8018074:	e78a      	b.n	8017f8c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8018076:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018078:	b153      	cbz	r3, 8018090 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801807a:	441c      	add	r4, r3
 801807c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801807e:	b2a4      	uxth	r4, r4
 8018080:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8018084:	f004 0407 	and.w	r4, r4, #7
 8018088:	781a      	ldrb	r2, [r3, #0]
 801808a:	9326      	str	r3, [sp, #152]	; 0x98
 801808c:	4122      	asrs	r2, r4
 801808e:	b2d2      	uxtb	r2, r2
 8018090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018092:	445b      	add	r3, fp
 8018094:	9309      	str	r3, [sp, #36]	; 0x24
 8018096:	e72a      	b.n	8017eee <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 8018098:	2400e44c 	.word	0x2400e44c
 801809c:	2400e454 	.word	0x2400e454
 80180a0:	2400e44e 	.word	0x2400e44e
 80180a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d1d7      	bne.n	801805a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80180aa:	4b06      	ldr	r3, [pc, #24]	; (80180c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 80180ac:	6818      	ldr	r0, [r3, #0]
 80180ae:	6803      	ldr	r3, [r0, #0]
 80180b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180b2:	4798      	blx	r3
 80180b4:	e7d1      	b.n	801805a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	f43f aea6 	beq.w	8017e08 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80180bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80180c0:	e79b      	b.n	8017ffa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 80180c2:	bf00      	nop
 80180c4:	2400e454 	.word	0x2400e454

080180c8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80180c8:	b538      	push	{r3, r4, r5, lr}
 80180ca:	4c15      	ldr	r4, [pc, #84]	; (8018120 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80180cc:	4605      	mov	r5, r0
 80180ce:	7823      	ldrb	r3, [r4, #0]
 80180d0:	f3bf 8f5b 	dmb	ish
 80180d4:	07da      	lsls	r2, r3, #31
 80180d6:	d40b      	bmi.n	80180f0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80180d8:	4620      	mov	r0, r4
 80180da:	f005 fbb2 	bl	801d842 <__cxa_guard_acquire>
 80180de:	b138      	cbz	r0, 80180f0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80180e0:	4620      	mov	r0, r4
 80180e2:	f005 fbba 	bl	801d85a <__cxa_guard_release>
 80180e6:	4a0f      	ldr	r2, [pc, #60]	; (8018124 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80180e8:	490f      	ldr	r1, [pc, #60]	; (8018128 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80180ea:	4810      	ldr	r0, [pc, #64]	; (801812c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80180ec:	f005 fba2 	bl	801d834 <__aeabi_atexit>
 80180f0:	4c0f      	ldr	r4, [pc, #60]	; (8018130 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80180f2:	7823      	ldrb	r3, [r4, #0]
 80180f4:	f3bf 8f5b 	dmb	ish
 80180f8:	07db      	lsls	r3, r3, #31
 80180fa:	d40b      	bmi.n	8018114 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80180fc:	4620      	mov	r0, r4
 80180fe:	f005 fba0 	bl	801d842 <__cxa_guard_acquire>
 8018102:	b138      	cbz	r0, 8018114 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8018104:	4620      	mov	r0, r4
 8018106:	f005 fba8 	bl	801d85a <__cxa_guard_release>
 801810a:	4a06      	ldr	r2, [pc, #24]	; (8018124 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801810c:	4909      	ldr	r1, [pc, #36]	; (8018134 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801810e:	480a      	ldr	r0, [pc, #40]	; (8018138 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8018110:	f005 fb90 	bl	801d834 <__aeabi_atexit>
 8018114:	4b05      	ldr	r3, [pc, #20]	; (801812c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8018116:	612b      	str	r3, [r5, #16]
 8018118:	4b07      	ldr	r3, [pc, #28]	; (8018138 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801811a:	616b      	str	r3, [r5, #20]
 801811c:	bd38      	pop	{r3, r4, r5, pc}
 801811e:	bf00      	nop
 8018120:	2400e528 	.word	0x2400e528
 8018124:	24000000 	.word	0x24000000
 8018128:	08016c8d 	.word	0x08016c8d
 801812c:	240000a0 	.word	0x240000a0
 8018130:	2400e52c 	.word	0x2400e52c
 8018134:	08016c8b 	.word	0x08016c8b
 8018138:	240000a4 	.word	0x240000a4

0801813c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801813c:	b538      	push	{r3, r4, r5, lr}
 801813e:	4c15      	ldr	r4, [pc, #84]	; (8018194 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8018140:	4605      	mov	r5, r0
 8018142:	7823      	ldrb	r3, [r4, #0]
 8018144:	f3bf 8f5b 	dmb	ish
 8018148:	07da      	lsls	r2, r3, #31
 801814a:	d40b      	bmi.n	8018164 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801814c:	4620      	mov	r0, r4
 801814e:	f005 fb78 	bl	801d842 <__cxa_guard_acquire>
 8018152:	b138      	cbz	r0, 8018164 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8018154:	4620      	mov	r0, r4
 8018156:	f005 fb80 	bl	801d85a <__cxa_guard_release>
 801815a:	4a0f      	ldr	r2, [pc, #60]	; (8018198 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801815c:	490f      	ldr	r1, [pc, #60]	; (801819c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801815e:	4810      	ldr	r0, [pc, #64]	; (80181a0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8018160:	f005 fb68 	bl	801d834 <__aeabi_atexit>
 8018164:	4c0f      	ldr	r4, [pc, #60]	; (80181a4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8018166:	7823      	ldrb	r3, [r4, #0]
 8018168:	f3bf 8f5b 	dmb	ish
 801816c:	07db      	lsls	r3, r3, #31
 801816e:	d40b      	bmi.n	8018188 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8018170:	4620      	mov	r0, r4
 8018172:	f005 fb66 	bl	801d842 <__cxa_guard_acquire>
 8018176:	b138      	cbz	r0, 8018188 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8018178:	4620      	mov	r0, r4
 801817a:	f005 fb6e 	bl	801d85a <__cxa_guard_release>
 801817e:	4a06      	ldr	r2, [pc, #24]	; (8018198 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8018180:	4909      	ldr	r1, [pc, #36]	; (80181a8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8018182:	480a      	ldr	r0, [pc, #40]	; (80181ac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8018184:	f005 fb56 	bl	801d834 <__aeabi_atexit>
 8018188:	4b05      	ldr	r3, [pc, #20]	; (80181a0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801818a:	60ab      	str	r3, [r5, #8]
 801818c:	4b07      	ldr	r3, [pc, #28]	; (80181ac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801818e:	60eb      	str	r3, [r5, #12]
 8018190:	bd38      	pop	{r3, r4, r5, pc}
 8018192:	bf00      	nop
 8018194:	2400e508 	.word	0x2400e508
 8018198:	24000000 	.word	0x24000000
 801819c:	08016c91 	.word	0x08016c91
 80181a0:	24000080 	.word	0x24000080
 80181a4:	2400e50c 	.word	0x2400e50c
 80181a8:	08016c8f 	.word	0x08016c8f
 80181ac:	24000084 	.word	0x24000084

080181b0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 80181b0:	b510      	push	{r4, lr}
 80181b2:	4604      	mov	r4, r0
 80181b4:	f7ff ff88 	bl	80180c8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80181b8:	4620      	mov	r0, r4
 80181ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80181be:	f7ff bfbd 	b.w	801813c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080181c4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80181c4:	b538      	push	{r3, r4, r5, lr}
 80181c6:	4c15      	ldr	r4, [pc, #84]	; (801821c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80181c8:	4605      	mov	r5, r0
 80181ca:	7823      	ldrb	r3, [r4, #0]
 80181cc:	f3bf 8f5b 	dmb	ish
 80181d0:	07da      	lsls	r2, r3, #31
 80181d2:	d40b      	bmi.n	80181ec <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80181d4:	4620      	mov	r0, r4
 80181d6:	f005 fb34 	bl	801d842 <__cxa_guard_acquire>
 80181da:	b138      	cbz	r0, 80181ec <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80181dc:	4620      	mov	r0, r4
 80181de:	f005 fb3c 	bl	801d85a <__cxa_guard_release>
 80181e2:	4a0f      	ldr	r2, [pc, #60]	; (8018220 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80181e4:	490f      	ldr	r1, [pc, #60]	; (8018224 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80181e6:	4810      	ldr	r0, [pc, #64]	; (8018228 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80181e8:	f005 fb24 	bl	801d834 <__aeabi_atexit>
 80181ec:	4c0f      	ldr	r4, [pc, #60]	; (801822c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 80181ee:	7823      	ldrb	r3, [r4, #0]
 80181f0:	f3bf 8f5b 	dmb	ish
 80181f4:	07db      	lsls	r3, r3, #31
 80181f6:	d40b      	bmi.n	8018210 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80181f8:	4620      	mov	r0, r4
 80181fa:	f005 fb22 	bl	801d842 <__cxa_guard_acquire>
 80181fe:	b138      	cbz	r0, 8018210 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8018200:	4620      	mov	r0, r4
 8018202:	f005 fb2a 	bl	801d85a <__cxa_guard_release>
 8018206:	4a06      	ldr	r2, [pc, #24]	; (8018220 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8018208:	4909      	ldr	r1, [pc, #36]	; (8018230 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801820a:	480a      	ldr	r0, [pc, #40]	; (8018234 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801820c:	f005 fb12 	bl	801d834 <__aeabi_atexit>
 8018210:	4b05      	ldr	r3, [pc, #20]	; (8018228 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8018212:	622b      	str	r3, [r5, #32]
 8018214:	4b07      	ldr	r3, [pc, #28]	; (8018234 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8018216:	626b      	str	r3, [r5, #36]	; 0x24
 8018218:	bd38      	pop	{r3, r4, r5, pc}
 801821a:	bf00      	nop
 801821c:	2400e530 	.word	0x2400e530
 8018220:	24000000 	.word	0x24000000
 8018224:	08016c85 	.word	0x08016c85
 8018228:	240000a8 	.word	0x240000a8
 801822c:	2400e534 	.word	0x2400e534
 8018230:	08016c83 	.word	0x08016c83
 8018234:	240000ac 	.word	0x240000ac

08018238 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8018238:	b538      	push	{r3, r4, r5, lr}
 801823a:	4c15      	ldr	r4, [pc, #84]	; (8018290 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801823c:	4605      	mov	r5, r0
 801823e:	7823      	ldrb	r3, [r4, #0]
 8018240:	f3bf 8f5b 	dmb	ish
 8018244:	07da      	lsls	r2, r3, #31
 8018246:	d40b      	bmi.n	8018260 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8018248:	4620      	mov	r0, r4
 801824a:	f005 fafa 	bl	801d842 <__cxa_guard_acquire>
 801824e:	b138      	cbz	r0, 8018260 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8018250:	4620      	mov	r0, r4
 8018252:	f005 fb02 	bl	801d85a <__cxa_guard_release>
 8018256:	4a0f      	ldr	r2, [pc, #60]	; (8018294 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8018258:	490f      	ldr	r1, [pc, #60]	; (8018298 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801825a:	4810      	ldr	r0, [pc, #64]	; (801829c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801825c:	f005 faea 	bl	801d834 <__aeabi_atexit>
 8018260:	4c0f      	ldr	r4, [pc, #60]	; (80182a0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8018262:	7823      	ldrb	r3, [r4, #0]
 8018264:	f3bf 8f5b 	dmb	ish
 8018268:	07db      	lsls	r3, r3, #31
 801826a:	d40b      	bmi.n	8018284 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801826c:	4620      	mov	r0, r4
 801826e:	f005 fae8 	bl	801d842 <__cxa_guard_acquire>
 8018272:	b138      	cbz	r0, 8018284 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8018274:	4620      	mov	r0, r4
 8018276:	f005 faf0 	bl	801d85a <__cxa_guard_release>
 801827a:	4a06      	ldr	r2, [pc, #24]	; (8018294 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801827c:	4909      	ldr	r1, [pc, #36]	; (80182a4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801827e:	480a      	ldr	r0, [pc, #40]	; (80182a8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8018280:	f005 fad8 	bl	801d834 <__aeabi_atexit>
 8018284:	4b05      	ldr	r3, [pc, #20]	; (801829c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8018286:	61ab      	str	r3, [r5, #24]
 8018288:	4b07      	ldr	r3, [pc, #28]	; (80182a8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801828a:	61eb      	str	r3, [r5, #28]
 801828c:	bd38      	pop	{r3, r4, r5, pc}
 801828e:	bf00      	nop
 8018290:	2400e510 	.word	0x2400e510
 8018294:	24000000 	.word	0x24000000
 8018298:	08016c89 	.word	0x08016c89
 801829c:	24000088 	.word	0x24000088
 80182a0:	2400e514 	.word	0x2400e514
 80182a4:	08016c87 	.word	0x08016c87
 80182a8:	2400008c 	.word	0x2400008c

080182ac <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 80182ac:	b510      	push	{r4, lr}
 80182ae:	4604      	mov	r4, r0
 80182b0:	f7ff ff88 	bl	80181c4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80182b4:	4620      	mov	r0, r4
 80182b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80182ba:	f7ff bfbd 	b.w	8018238 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

080182c0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 80182c0:	b538      	push	{r3, r4, r5, lr}
 80182c2:	4c15      	ldr	r4, [pc, #84]	; (8018318 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 80182c4:	4605      	mov	r5, r0
 80182c6:	7823      	ldrb	r3, [r4, #0]
 80182c8:	f3bf 8f5b 	dmb	ish
 80182cc:	07da      	lsls	r2, r3, #31
 80182ce:	d40b      	bmi.n	80182e8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80182d0:	4620      	mov	r0, r4
 80182d2:	f005 fab6 	bl	801d842 <__cxa_guard_acquire>
 80182d6:	b138      	cbz	r0, 80182e8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80182d8:	4620      	mov	r0, r4
 80182da:	f005 fabe 	bl	801d85a <__cxa_guard_release>
 80182de:	4a0f      	ldr	r2, [pc, #60]	; (801831c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 80182e0:	490f      	ldr	r1, [pc, #60]	; (8018320 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 80182e2:	4810      	ldr	r0, [pc, #64]	; (8018324 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 80182e4:	f005 faa6 	bl	801d834 <__aeabi_atexit>
 80182e8:	4c0f      	ldr	r4, [pc, #60]	; (8018328 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 80182ea:	7823      	ldrb	r3, [r4, #0]
 80182ec:	f3bf 8f5b 	dmb	ish
 80182f0:	07db      	lsls	r3, r3, #31
 80182f2:	d40b      	bmi.n	801830c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 80182f4:	4620      	mov	r0, r4
 80182f6:	f005 faa4 	bl	801d842 <__cxa_guard_acquire>
 80182fa:	b138      	cbz	r0, 801830c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 80182fc:	4620      	mov	r0, r4
 80182fe:	f005 faac 	bl	801d85a <__cxa_guard_release>
 8018302:	4a06      	ldr	r2, [pc, #24]	; (801831c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8018304:	4909      	ldr	r1, [pc, #36]	; (801832c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8018306:	480a      	ldr	r0, [pc, #40]	; (8018330 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8018308:	f005 fa94 	bl	801d834 <__aeabi_atexit>
 801830c:	4b05      	ldr	r3, [pc, #20]	; (8018324 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801830e:	632b      	str	r3, [r5, #48]	; 0x30
 8018310:	4b07      	ldr	r3, [pc, #28]	; (8018330 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8018312:	636b      	str	r3, [r5, #52]	; 0x34
 8018314:	bd38      	pop	{r3, r4, r5, pc}
 8018316:	bf00      	nop
 8018318:	2400e518 	.word	0x2400e518
 801831c:	24000000 	.word	0x24000000
 8018320:	08016c7d 	.word	0x08016c7d
 8018324:	24000090 	.word	0x24000090
 8018328:	2400e51c 	.word	0x2400e51c
 801832c:	08016c7b 	.word	0x08016c7b
 8018330:	24000094 	.word	0x24000094

08018334 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8018334:	b538      	push	{r3, r4, r5, lr}
 8018336:	4c15      	ldr	r4, [pc, #84]	; (801838c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8018338:	4605      	mov	r5, r0
 801833a:	7823      	ldrb	r3, [r4, #0]
 801833c:	f3bf 8f5b 	dmb	ish
 8018340:	07da      	lsls	r2, r3, #31
 8018342:	d40b      	bmi.n	801835c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8018344:	4620      	mov	r0, r4
 8018346:	f005 fa7c 	bl	801d842 <__cxa_guard_acquire>
 801834a:	b138      	cbz	r0, 801835c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801834c:	4620      	mov	r0, r4
 801834e:	f005 fa84 	bl	801d85a <__cxa_guard_release>
 8018352:	4a0f      	ldr	r2, [pc, #60]	; (8018390 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8018354:	490f      	ldr	r1, [pc, #60]	; (8018394 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8018356:	4810      	ldr	r0, [pc, #64]	; (8018398 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8018358:	f005 fa6c 	bl	801d834 <__aeabi_atexit>
 801835c:	4c0f      	ldr	r4, [pc, #60]	; (801839c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801835e:	7823      	ldrb	r3, [r4, #0]
 8018360:	f3bf 8f5b 	dmb	ish
 8018364:	07db      	lsls	r3, r3, #31
 8018366:	d40b      	bmi.n	8018380 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8018368:	4620      	mov	r0, r4
 801836a:	f005 fa6a 	bl	801d842 <__cxa_guard_acquire>
 801836e:	b138      	cbz	r0, 8018380 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8018370:	4620      	mov	r0, r4
 8018372:	f005 fa72 	bl	801d85a <__cxa_guard_release>
 8018376:	4a06      	ldr	r2, [pc, #24]	; (8018390 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8018378:	4909      	ldr	r1, [pc, #36]	; (80183a0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801837a:	480a      	ldr	r0, [pc, #40]	; (80183a4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801837c:	f005 fa5a 	bl	801d834 <__aeabi_atexit>
 8018380:	4b05      	ldr	r3, [pc, #20]	; (8018398 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8018382:	62ab      	str	r3, [r5, #40]	; 0x28
 8018384:	4b07      	ldr	r3, [pc, #28]	; (80183a4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8018386:	62eb      	str	r3, [r5, #44]	; 0x2c
 8018388:	bd38      	pop	{r3, r4, r5, pc}
 801838a:	bf00      	nop
 801838c:	2400e4f0 	.word	0x2400e4f0
 8018390:	24000000 	.word	0x24000000
 8018394:	08016c81 	.word	0x08016c81
 8018398:	24000068 	.word	0x24000068
 801839c:	2400e4f4 	.word	0x2400e4f4
 80183a0:	08016c7f 	.word	0x08016c7f
 80183a4:	2400006c 	.word	0x2400006c

080183a8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 80183a8:	b510      	push	{r4, lr}
 80183aa:	4604      	mov	r4, r0
 80183ac:	f7ff ff88 	bl	80182c0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 80183b0:	4620      	mov	r0, r4
 80183b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80183b6:	f7ff bfbd 	b.w	8018334 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

080183bc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 80183bc:	b538      	push	{r3, r4, r5, lr}
 80183be:	4c15      	ldr	r4, [pc, #84]	; (8018414 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 80183c0:	4605      	mov	r5, r0
 80183c2:	7823      	ldrb	r3, [r4, #0]
 80183c4:	f3bf 8f5b 	dmb	ish
 80183c8:	07da      	lsls	r2, r3, #31
 80183ca:	d40b      	bmi.n	80183e4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80183cc:	4620      	mov	r0, r4
 80183ce:	f005 fa38 	bl	801d842 <__cxa_guard_acquire>
 80183d2:	b138      	cbz	r0, 80183e4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80183d4:	4620      	mov	r0, r4
 80183d6:	f005 fa40 	bl	801d85a <__cxa_guard_release>
 80183da:	4a0f      	ldr	r2, [pc, #60]	; (8018418 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80183dc:	490f      	ldr	r1, [pc, #60]	; (801841c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 80183de:	4810      	ldr	r0, [pc, #64]	; (8018420 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80183e0:	f005 fa28 	bl	801d834 <__aeabi_atexit>
 80183e4:	4c0f      	ldr	r4, [pc, #60]	; (8018424 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 80183e6:	7823      	ldrb	r3, [r4, #0]
 80183e8:	f3bf 8f5b 	dmb	ish
 80183ec:	07db      	lsls	r3, r3, #31
 80183ee:	d40b      	bmi.n	8018408 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80183f0:	4620      	mov	r0, r4
 80183f2:	f005 fa26 	bl	801d842 <__cxa_guard_acquire>
 80183f6:	b138      	cbz	r0, 8018408 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80183f8:	4620      	mov	r0, r4
 80183fa:	f005 fa2e 	bl	801d85a <__cxa_guard_release>
 80183fe:	4a06      	ldr	r2, [pc, #24]	; (8018418 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8018400:	4909      	ldr	r1, [pc, #36]	; (8018428 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8018402:	480a      	ldr	r0, [pc, #40]	; (801842c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8018404:	f005 fa16 	bl	801d834 <__aeabi_atexit>
 8018408:	4b05      	ldr	r3, [pc, #20]	; (8018420 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801840a:	642b      	str	r3, [r5, #64]	; 0x40
 801840c:	4b07      	ldr	r3, [pc, #28]	; (801842c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801840e:	646b      	str	r3, [r5, #68]	; 0x44
 8018410:	bd38      	pop	{r3, r4, r5, pc}
 8018412:	bf00      	nop
 8018414:	2400e520 	.word	0x2400e520
 8018418:	24000000 	.word	0x24000000
 801841c:	08016c75 	.word	0x08016c75
 8018420:	24000098 	.word	0x24000098
 8018424:	2400e524 	.word	0x2400e524
 8018428:	08016c73 	.word	0x08016c73
 801842c:	2400009c 	.word	0x2400009c

08018430 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8018430:	b538      	push	{r3, r4, r5, lr}
 8018432:	4c15      	ldr	r4, [pc, #84]	; (8018488 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8018434:	4605      	mov	r5, r0
 8018436:	7823      	ldrb	r3, [r4, #0]
 8018438:	f3bf 8f5b 	dmb	ish
 801843c:	07da      	lsls	r2, r3, #31
 801843e:	d40b      	bmi.n	8018458 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8018440:	4620      	mov	r0, r4
 8018442:	f005 f9fe 	bl	801d842 <__cxa_guard_acquire>
 8018446:	b138      	cbz	r0, 8018458 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8018448:	4620      	mov	r0, r4
 801844a:	f005 fa06 	bl	801d85a <__cxa_guard_release>
 801844e:	4a0f      	ldr	r2, [pc, #60]	; (801848c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8018450:	490f      	ldr	r1, [pc, #60]	; (8018490 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8018452:	4810      	ldr	r0, [pc, #64]	; (8018494 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8018454:	f005 f9ee 	bl	801d834 <__aeabi_atexit>
 8018458:	4c0f      	ldr	r4, [pc, #60]	; (8018498 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801845a:	7823      	ldrb	r3, [r4, #0]
 801845c:	f3bf 8f5b 	dmb	ish
 8018460:	07db      	lsls	r3, r3, #31
 8018462:	d40b      	bmi.n	801847c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8018464:	4620      	mov	r0, r4
 8018466:	f005 f9ec 	bl	801d842 <__cxa_guard_acquire>
 801846a:	b138      	cbz	r0, 801847c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801846c:	4620      	mov	r0, r4
 801846e:	f005 f9f4 	bl	801d85a <__cxa_guard_release>
 8018472:	4a06      	ldr	r2, [pc, #24]	; (801848c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8018474:	4909      	ldr	r1, [pc, #36]	; (801849c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8018476:	480a      	ldr	r0, [pc, #40]	; (80184a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8018478:	f005 f9dc 	bl	801d834 <__aeabi_atexit>
 801847c:	4b05      	ldr	r3, [pc, #20]	; (8018494 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801847e:	63ab      	str	r3, [r5, #56]	; 0x38
 8018480:	4b07      	ldr	r3, [pc, #28]	; (80184a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8018482:	63eb      	str	r3, [r5, #60]	; 0x3c
 8018484:	bd38      	pop	{r3, r4, r5, pc}
 8018486:	bf00      	nop
 8018488:	2400e500 	.word	0x2400e500
 801848c:	24000000 	.word	0x24000000
 8018490:	08016c79 	.word	0x08016c79
 8018494:	24000078 	.word	0x24000078
 8018498:	2400e504 	.word	0x2400e504
 801849c:	08016c77 	.word	0x08016c77
 80184a0:	2400007c 	.word	0x2400007c

080184a4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 80184a4:	b510      	push	{r4, lr}
 80184a6:	4604      	mov	r4, r0
 80184a8:	f7ff ff88 	bl	80183bc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80184ac:	4620      	mov	r0, r4
 80184ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80184b2:	f7ff bfbd 	b.w	8018430 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

080184b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 80184b8:	b538      	push	{r3, r4, r5, lr}
 80184ba:	4c15      	ldr	r4, [pc, #84]	; (8018510 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80184bc:	4605      	mov	r5, r0
 80184be:	7823      	ldrb	r3, [r4, #0]
 80184c0:	f3bf 8f5b 	dmb	ish
 80184c4:	07da      	lsls	r2, r3, #31
 80184c6:	d40b      	bmi.n	80184e0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80184c8:	4620      	mov	r0, r4
 80184ca:	f005 f9ba 	bl	801d842 <__cxa_guard_acquire>
 80184ce:	b138      	cbz	r0, 80184e0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80184d0:	4620      	mov	r0, r4
 80184d2:	f005 f9c2 	bl	801d85a <__cxa_guard_release>
 80184d6:	4a0f      	ldr	r2, [pc, #60]	; (8018514 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80184d8:	490f      	ldr	r1, [pc, #60]	; (8018518 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 80184da:	4810      	ldr	r0, [pc, #64]	; (801851c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80184dc:	f005 f9aa 	bl	801d834 <__aeabi_atexit>
 80184e0:	4c0f      	ldr	r4, [pc, #60]	; (8018520 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 80184e2:	7823      	ldrb	r3, [r4, #0]
 80184e4:	f3bf 8f5b 	dmb	ish
 80184e8:	07db      	lsls	r3, r3, #31
 80184ea:	d40b      	bmi.n	8018504 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80184ec:	4620      	mov	r0, r4
 80184ee:	f005 f9a8 	bl	801d842 <__cxa_guard_acquire>
 80184f2:	b138      	cbz	r0, 8018504 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80184f4:	4620      	mov	r0, r4
 80184f6:	f005 f9b0 	bl	801d85a <__cxa_guard_release>
 80184fa:	4a06      	ldr	r2, [pc, #24]	; (8018514 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80184fc:	4909      	ldr	r1, [pc, #36]	; (8018524 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 80184fe:	480a      	ldr	r0, [pc, #40]	; (8018528 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8018500:	f005 f998 	bl	801d834 <__aeabi_atexit>
 8018504:	4b05      	ldr	r3, [pc, #20]	; (801851c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8018506:	652b      	str	r3, [r5, #80]	; 0x50
 8018508:	4b07      	ldr	r3, [pc, #28]	; (8018528 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801850a:	656b      	str	r3, [r5, #84]	; 0x54
 801850c:	bd38      	pop	{r3, r4, r5, pc}
 801850e:	bf00      	nop
 8018510:	2400e4f8 	.word	0x2400e4f8
 8018514:	24000000 	.word	0x24000000
 8018518:	08016c6d 	.word	0x08016c6d
 801851c:	24000070 	.word	0x24000070
 8018520:	2400e4fc 	.word	0x2400e4fc
 8018524:	08016c6b 	.word	0x08016c6b
 8018528:	24000074 	.word	0x24000074

0801852c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801852c:	b538      	push	{r3, r4, r5, lr}
 801852e:	4c15      	ldr	r4, [pc, #84]	; (8018584 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8018530:	4605      	mov	r5, r0
 8018532:	7823      	ldrb	r3, [r4, #0]
 8018534:	f3bf 8f5b 	dmb	ish
 8018538:	07da      	lsls	r2, r3, #31
 801853a:	d40b      	bmi.n	8018554 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801853c:	4620      	mov	r0, r4
 801853e:	f005 f980 	bl	801d842 <__cxa_guard_acquire>
 8018542:	b138      	cbz	r0, 8018554 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8018544:	4620      	mov	r0, r4
 8018546:	f005 f988 	bl	801d85a <__cxa_guard_release>
 801854a:	4a0f      	ldr	r2, [pc, #60]	; (8018588 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801854c:	490f      	ldr	r1, [pc, #60]	; (801858c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801854e:	4810      	ldr	r0, [pc, #64]	; (8018590 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8018550:	f005 f970 	bl	801d834 <__aeabi_atexit>
 8018554:	4c0f      	ldr	r4, [pc, #60]	; (8018594 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8018556:	7823      	ldrb	r3, [r4, #0]
 8018558:	f3bf 8f5b 	dmb	ish
 801855c:	07db      	lsls	r3, r3, #31
 801855e:	d40b      	bmi.n	8018578 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8018560:	4620      	mov	r0, r4
 8018562:	f005 f96e 	bl	801d842 <__cxa_guard_acquire>
 8018566:	b138      	cbz	r0, 8018578 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8018568:	4620      	mov	r0, r4
 801856a:	f005 f976 	bl	801d85a <__cxa_guard_release>
 801856e:	4a06      	ldr	r2, [pc, #24]	; (8018588 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8018570:	4909      	ldr	r1, [pc, #36]	; (8018598 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8018572:	480a      	ldr	r0, [pc, #40]	; (801859c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8018574:	f005 f95e 	bl	801d834 <__aeabi_atexit>
 8018578:	4b05      	ldr	r3, [pc, #20]	; (8018590 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801857a:	64ab      	str	r3, [r5, #72]	; 0x48
 801857c:	4b07      	ldr	r3, [pc, #28]	; (801859c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801857e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8018580:	bd38      	pop	{r3, r4, r5, pc}
 8018582:	bf00      	nop
 8018584:	2400e4e8 	.word	0x2400e4e8
 8018588:	24000000 	.word	0x24000000
 801858c:	08016c71 	.word	0x08016c71
 8018590:	24000060 	.word	0x24000060
 8018594:	2400e4ec 	.word	0x2400e4ec
 8018598:	08016c6f 	.word	0x08016c6f
 801859c:	24000064 	.word	0x24000064

080185a0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 80185a0:	b510      	push	{r4, lr}
 80185a2:	4604      	mov	r4, r0
 80185a4:	f7ff ff88 	bl	80184b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80185a8:	4620      	mov	r0, r4
 80185aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80185ae:	f7ff bfbd 	b.w	801852c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

080185b2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 80185b2:	b510      	push	{r4, lr}
 80185b4:	4604      	mov	r4, r0
 80185b6:	f7ff fff3 	bl	80185a0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 80185ba:	4620      	mov	r0, r4
 80185bc:	f7ff ff72 	bl	80184a4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 80185c0:	4620      	mov	r0, r4
 80185c2:	f7ff fe73 	bl	80182ac <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 80185c6:	4620      	mov	r0, r4
 80185c8:	f7ff fdf2 	bl	80181b0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 80185cc:	4620      	mov	r0, r4
 80185ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80185d2:	f7ff bee9 	b.w	80183a8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>

080185d6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 80185d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185da:	b087      	sub	sp, #28
 80185dc:	788d      	ldrb	r5, [r1, #2]
 80185de:	f891 9000 	ldrb.w	r9, [r1]
 80185e2:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 80185e6:	9501      	str	r5, [sp, #4]
 80185e8:	784d      	ldrb	r5, [r1, #1]
 80185ea:	9203      	str	r2, [sp, #12]
 80185ec:	9502      	str	r5, [sp, #8]
 80185ee:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 80185f2:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 80185f6:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 80185fa:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 80185fe:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 8018602:	fb06 0708 	mla	r7, r6, r8, r0
 8018606:	2e00      	cmp	r6, #0
 8018608:	eb02 0a07 	add.w	sl, r2, r7
 801860c:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8018610:	9d01      	ldr	r5, [sp, #4]
 8018612:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8018616:	ea45 0509 	orr.w	r5, r5, r9
 801861a:	9505      	str	r5, [sp, #20]
 801861c:	f2c0 80b2 	blt.w	8018784 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8018620:	45b3      	cmp	fp, r6
 8018622:	f340 80af 	ble.w	8018784 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8018626:	2800      	cmp	r0, #0
 8018628:	f2c0 80aa 	blt.w	8018780 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801862c:	4580      	cmp	r8, r0
 801862e:	f340 80a7 	ble.w	8018780 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8018632:	9a03      	ldr	r2, [sp, #12]
 8018634:	5dd7      	ldrb	r7, [r2, r7]
 8018636:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801863a:	441f      	add	r7, r3
 801863c:	1c42      	adds	r2, r0, #1
 801863e:	f100 80a4 	bmi.w	801878a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8018642:	4590      	cmp	r8, r2
 8018644:	f340 80a1 	ble.w	801878a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8018648:	2c00      	cmp	r4, #0
 801864a:	f000 809e 	beq.w	801878a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801864e:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8018652:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018656:	441d      	add	r5, r3
 8018658:	3601      	adds	r6, #1
 801865a:	f100 809a 	bmi.w	8018792 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801865e:	45b3      	cmp	fp, r6
 8018660:	f340 8097 	ble.w	8018792 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8018664:	f1bc 0f00 	cmp.w	ip, #0
 8018668:	f000 8093 	beq.w	8018792 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801866c:	2800      	cmp	r0, #0
 801866e:	f2c0 808e 	blt.w	801878e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8018672:	4580      	cmp	r8, r0
 8018674:	f340 808b 	ble.w	801878e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8018678:	f81a 6008 	ldrb.w	r6, [sl, r8]
 801867c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8018680:	441e      	add	r6, r3
 8018682:	3001      	adds	r0, #1
 8018684:	f100 8088 	bmi.w	8018798 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8018688:	4580      	cmp	r8, r0
 801868a:	f340 8085 	ble.w	8018798 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801868e:	2c00      	cmp	r4, #0
 8018690:	f000 8082 	beq.w	8018798 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8018694:	44d0      	add	r8, sl
 8018696:	f898 2001 	ldrb.w	r2, [r8, #1]
 801869a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801869e:	4413      	add	r3, r2
 80186a0:	b2a4      	uxth	r4, r4
 80186a2:	f895 a000 	ldrb.w	sl, [r5]
 80186a6:	fa1f fc8c 	uxth.w	ip, ip
 80186aa:	fb04 fb0c 	mul.w	fp, r4, ip
 80186ae:	0124      	lsls	r4, r4, #4
 80186b0:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 80186b4:	f5c4 7880 	rsb	r8, r4, #256	; 0x100
 80186b8:	eba4 040b 	sub.w	r4, r4, fp
 80186bc:	fa1f f08c 	uxth.w	r0, ip
 80186c0:	b2a2      	uxth	r2, r4
 80186c2:	783c      	ldrb	r4, [r7, #0]
 80186c4:	eba8 0800 	sub.w	r8, r8, r0
 80186c8:	fa1f fc8e 	uxth.w	ip, lr
 80186cc:	fb02 fa0a 	mul.w	sl, r2, sl
 80186d0:	ea6f 0e0e 	mvn.w	lr, lr
 80186d4:	fa1f f888 	uxth.w	r8, r8
 80186d8:	fa5f fe8e 	uxtb.w	lr, lr
 80186dc:	fb08 aa04 	mla	sl, r8, r4, sl
 80186e0:	7834      	ldrb	r4, [r6, #0]
 80186e2:	fb19 f90e 	smulbb	r9, r9, lr
 80186e6:	fb00 aa04 	mla	sl, r0, r4, sl
 80186ea:	781c      	ldrb	r4, [r3, #0]
 80186ec:	fb0b a404 	mla	r4, fp, r4, sl
 80186f0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80186f4:	fb04 990c 	mla	r9, r4, ip, r9
 80186f8:	fa1f f989 	uxth.w	r9, r9
 80186fc:	f109 0401 	add.w	r4, r9, #1
 8018700:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8018704:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018708:	f881 9000 	strb.w	r9, [r1]
 801870c:	f895 9001 	ldrb.w	r9, [r5, #1]
 8018710:	787c      	ldrb	r4, [r7, #1]
 8018712:	fb02 f909 	mul.w	r9, r2, r9
 8018716:	fb08 9904 	mla	r9, r8, r4, r9
 801871a:	7874      	ldrb	r4, [r6, #1]
 801871c:	fb00 9904 	mla	r9, r0, r4, r9
 8018720:	785c      	ldrb	r4, [r3, #1]
 8018722:	fb0b 9404 	mla	r4, fp, r4, r9
 8018726:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801872a:	9c02      	ldr	r4, [sp, #8]
 801872c:	fb14 f90e 	smulbb	r9, r4, lr
 8018730:	fb0a 940c 	mla	r4, sl, ip, r9
 8018734:	b2a4      	uxth	r4, r4
 8018736:	f104 0901 	add.w	r9, r4, #1
 801873a:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801873e:	1224      	asrs	r4, r4, #8
 8018740:	704c      	strb	r4, [r1, #1]
 8018742:	78ad      	ldrb	r5, [r5, #2]
 8018744:	78bc      	ldrb	r4, [r7, #2]
 8018746:	436a      	muls	r2, r5
 8018748:	789b      	ldrb	r3, [r3, #2]
 801874a:	fb08 2204 	mla	r2, r8, r4, r2
 801874e:	78b4      	ldrb	r4, [r6, #2]
 8018750:	fb00 2004 	mla	r0, r0, r4, r2
 8018754:	fb0b 0b03 	mla	fp, fp, r3, r0
 8018758:	9b01      	ldr	r3, [sp, #4]
 801875a:	fb13 fe0e 	smulbb	lr, r3, lr
 801875e:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8018762:	fb0b ec0c 	mla	ip, fp, ip, lr
 8018766:	fa1f fc8c 	uxth.w	ip, ip
 801876a:	f10c 0e01 	add.w	lr, ip, #1
 801876e:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 8018772:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8018776:	f881 c002 	strb.w	ip, [r1, #2]
 801877a:	b007      	add	sp, #28
 801877c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018780:	af05      	add	r7, sp, #20
 8018782:	e75b      	b.n	801863c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 8018784:	ad05      	add	r5, sp, #20
 8018786:	462f      	mov	r7, r5
 8018788:	e766      	b.n	8018658 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801878a:	ad05      	add	r5, sp, #20
 801878c:	e764      	b.n	8018658 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801878e:	ae05      	add	r6, sp, #20
 8018790:	e777      	b.n	8018682 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 8018792:	ab05      	add	r3, sp, #20
 8018794:	461e      	mov	r6, r3
 8018796:	e783      	b.n	80186a0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 8018798:	ab05      	add	r3, sp, #20
 801879a:	e781      	b.n	80186a0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801879c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801879c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187a0:	b093      	sub	sp, #76	; 0x4c
 80187a2:	9210      	str	r2, [sp, #64]	; 0x40
 80187a4:	9309      	str	r3, [sp, #36]	; 0x24
 80187a6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80187a8:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 80187ac:	9011      	str	r0, [sp, #68]	; 0x44
 80187ae:	930e      	str	r3, [sp, #56]	; 0x38
 80187b0:	6850      	ldr	r0, [r2, #4]
 80187b2:	910d      	str	r1, [sp, #52]	; 0x34
 80187b4:	6812      	ldr	r2, [r2, #0]
 80187b6:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 80187ba:	fb00 1303 	mla	r3, r0, r3, r1
 80187be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80187c2:	18d3      	adds	r3, r2, r3
 80187c4:	930a      	str	r3, [sp, #40]	; 0x28
 80187c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80187c8:	681b      	ldr	r3, [r3, #0]
 80187ca:	930c      	str	r3, [sp, #48]	; 0x30
 80187cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80187ce:	685c      	ldr	r4, [r3, #4]
 80187d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80187d2:	3404      	adds	r4, #4
 80187d4:	43db      	mvns	r3, r3
 80187d6:	b2db      	uxtb	r3, r3
 80187d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80187da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80187dc:	2b00      	cmp	r3, #0
 80187de:	dc03      	bgt.n	80187e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80187e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	f340 8250 	ble.w	8018c88 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 80187e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80187ea:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80187ee:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80187f2:	1e48      	subs	r0, r1, #1
 80187f4:	1e55      	subs	r5, r2, #1
 80187f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	f340 80ee 	ble.w	80189da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 80187fe:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8018800:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8018802:	1436      	asrs	r6, r6, #16
 8018804:	ea4f 4323 	mov.w	r3, r3, asr #16
 8018808:	d406      	bmi.n	8018818 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801880a:	4286      	cmp	r6, r0
 801880c:	da04      	bge.n	8018818 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801880e:	2b00      	cmp	r3, #0
 8018810:	db02      	blt.n	8018818 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018812:	42ab      	cmp	r3, r5
 8018814:	f2c0 80e2 	blt.w	80189dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8018818:	3601      	adds	r6, #1
 801881a:	f100 80cf 	bmi.w	80189bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801881e:	42b1      	cmp	r1, r6
 8018820:	f2c0 80cc 	blt.w	80189bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8018824:	3301      	adds	r3, #1
 8018826:	f100 80c9 	bmi.w	80189bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801882a:	429a      	cmp	r2, r3
 801882c:	f2c0 80c6 	blt.w	80189bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8018830:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 8018834:	f1bb 0f00 	cmp.w	fp, #0
 8018838:	f340 80f1 	ble.w	8018a1e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801883c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801883e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8018840:	9824      	ldr	r0, [sp, #144]	; 0x90
 8018842:	141d      	asrs	r5, r3, #16
 8018844:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018846:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801884a:	68c7      	ldr	r7, [r0, #12]
 801884c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801884e:	1418      	asrs	r0, r3, #16
 8018850:	f3c3 3803 	ubfx	r8, r3, #12, #4
 8018854:	6892      	ldr	r2, [r2, #8]
 8018856:	f100 8137 	bmi.w	8018ac8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801885a:	f102 3cff 	add.w	ip, r2, #4294967295
 801885e:	4560      	cmp	r0, ip
 8018860:	f280 8132 	bge.w	8018ac8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8018864:	2d00      	cmp	r5, #0
 8018866:	f2c0 812f 	blt.w	8018ac8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801886a:	f107 3cff 	add.w	ip, r7, #4294967295
 801886e:	4565      	cmp	r5, ip
 8018870:	f280 812a 	bge.w	8018ac8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8018874:	b212      	sxth	r2, r2
 8018876:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8018878:	fb05 0002 	mla	r0, r5, r2, r0
 801887c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801887e:	f817 c000 	ldrb.w	ip, [r7, r0]
 8018882:	4405      	add	r5, r0
 8018884:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8018888:	eb04 0e0c 	add.w	lr, r4, ip
 801888c:	f1b8 0f00 	cmp.w	r8, #0
 8018890:	f000 810c 	beq.w	8018aac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8018894:	786f      	ldrb	r7, [r5, #1]
 8018896:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801889a:	4427      	add	r7, r4
 801889c:	2900      	cmp	r1, #0
 801889e:	f000 810d 	beq.w	8018abc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 80188a2:	18a8      	adds	r0, r5, r2
 80188a4:	5caa      	ldrb	r2, [r5, r2]
 80188a6:	7840      	ldrb	r0, [r0, #1]
 80188a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80188ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80188b0:	4422      	add	r2, r4
 80188b2:	4420      	add	r0, r4
 80188b4:	fa1f f388 	uxth.w	r3, r8
 80188b8:	f814 a00c 	ldrb.w	sl, [r4, ip]
 80188bc:	b289      	uxth	r1, r1
 80188be:	f897 c000 	ldrb.w	ip, [r7]
 80188c2:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80188c6:	fb03 f901 	mul.w	r9, r3, r1
 80188ca:	011b      	lsls	r3, r3, #4
 80188cc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80188d0:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 80188d4:	eba3 0309 	sub.w	r3, r3, r9
 80188d8:	b289      	uxth	r1, r1
 80188da:	b29b      	uxth	r3, r3
 80188dc:	eba8 0801 	sub.w	r8, r8, r1
 80188e0:	fb03 fc0c 	mul.w	ip, r3, ip
 80188e4:	fa1f f888 	uxth.w	r8, r8
 80188e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80188ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80188ec:	fb08 cc0a 	mla	ip, r8, sl, ip
 80188f0:	f892 a000 	ldrb.w	sl, [r2]
 80188f4:	fb01 cc0a 	mla	ip, r1, sl, ip
 80188f8:	f890 a000 	ldrb.w	sl, [r0]
 80188fc:	fb09 cc0a 	mla	ip, r9, sl, ip
 8018900:	f896 a000 	ldrb.w	sl, [r6]
 8018904:	fb1a fa03 	smulbb	sl, sl, r3
 8018908:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801890c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801890e:	fb0c ac05 	mla	ip, ip, r5, sl
 8018912:	fa1f fc8c 	uxth.w	ip, ip
 8018916:	f10c 0a01 	add.w	sl, ip, #1
 801891a:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801891e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018922:	f886 a000 	strb.w	sl, [r6]
 8018926:	f897 c001 	ldrb.w	ip, [r7, #1]
 801892a:	f89e a001 	ldrb.w	sl, [lr, #1]
 801892e:	fb03 fc0c 	mul.w	ip, r3, ip
 8018932:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018934:	fb08 cc0a 	mla	ip, r8, sl, ip
 8018938:	f892 a001 	ldrb.w	sl, [r2, #1]
 801893c:	fb01 cc0a 	mla	ip, r1, sl, ip
 8018940:	f890 a001 	ldrb.w	sl, [r0, #1]
 8018944:	fb09 cc0a 	mla	ip, r9, sl, ip
 8018948:	f896 a001 	ldrb.w	sl, [r6, #1]
 801894c:	fb1a fa03 	smulbb	sl, sl, r3
 8018950:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8018954:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018956:	fb0c ac05 	mla	ip, ip, r5, sl
 801895a:	fa1f fc8c 	uxth.w	ip, ip
 801895e:	f10c 0a01 	add.w	sl, ip, #1
 8018962:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8018966:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801896a:	f886 c001 	strb.w	ip, [r6, #1]
 801896e:	78bf      	ldrb	r7, [r7, #2]
 8018970:	f89e c002 	ldrb.w	ip, [lr, #2]
 8018974:	437b      	muls	r3, r7
 8018976:	fb08 330c 	mla	r3, r8, ip, r3
 801897a:	f892 c002 	ldrb.w	ip, [r2, #2]
 801897e:	7882      	ldrb	r2, [r0, #2]
 8018980:	fb01 310c 	mla	r1, r1, ip, r3
 8018984:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018986:	fb09 1902 	mla	r9, r9, r2, r1
 801898a:	78b1      	ldrb	r1, [r6, #2]
 801898c:	fb11 f103 	smulbb	r1, r1, r3
 8018990:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8018994:	fb09 1505 	mla	r5, r9, r5, r1
 8018998:	b2ad      	uxth	r5, r5
 801899a:	1c6b      	adds	r3, r5, #1
 801899c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80189a0:	122d      	asrs	r5, r5, #8
 80189a2:	70b5      	strb	r5, [r6, #2]
 80189a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80189a6:	3603      	adds	r6, #3
 80189a8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80189aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80189ae:	4413      	add	r3, r2
 80189b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80189b2:	931d      	str	r3, [sp, #116]	; 0x74
 80189b4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80189b6:	4413      	add	r3, r2
 80189b8:	931e      	str	r3, [sp, #120]	; 0x78
 80189ba:	e73b      	b.n	8018834 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80189bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80189be:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 80189c0:	4433      	add	r3, r6
 80189c2:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80189c4:	931d      	str	r3, [sp, #116]	; 0x74
 80189c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80189c8:	4433      	add	r3, r6
 80189ca:	931e      	str	r3, [sp, #120]	; 0x78
 80189cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189ce:	3b01      	subs	r3, #1
 80189d0:	9309      	str	r3, [sp, #36]	; 0x24
 80189d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80189d4:	3303      	adds	r3, #3
 80189d6:	930a      	str	r3, [sp, #40]	; 0x28
 80189d8:	e70d      	b.n	80187f6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80189da:	d028      	beq.n	8018a2e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 80189dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189de:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80189e0:	3b01      	subs	r3, #1
 80189e2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80189e4:	fb00 5003 	mla	r0, r0, r3, r5
 80189e8:	1400      	asrs	r0, r0, #16
 80189ea:	f53f af21 	bmi.w	8018830 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80189ee:	3901      	subs	r1, #1
 80189f0:	4288      	cmp	r0, r1
 80189f2:	f6bf af1d 	bge.w	8018830 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80189f6:	9920      	ldr	r1, [sp, #128]	; 0x80
 80189f8:	981e      	ldr	r0, [sp, #120]	; 0x78
 80189fa:	fb01 0303 	mla	r3, r1, r3, r0
 80189fe:	141b      	asrs	r3, r3, #16
 8018a00:	f53f af16 	bmi.w	8018830 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8018a04:	3a01      	subs	r2, #1
 8018a06:	4293      	cmp	r3, r2
 8018a08:	f6bf af12 	bge.w	8018830 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8018a0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018a0e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8018a12:	1cdf      	adds	r7, r3, #3
 8018a14:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8018a18:	f1b9 0f00 	cmp.w	r9, #0
 8018a1c:	dc73      	bgt.n	8018b06 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8018a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018a22:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018a26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018a2a:	441a      	add	r2, r3
 8018a2c:	920a      	str	r2, [sp, #40]	; 0x28
 8018a2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	f340 8129 	ble.w	8018c88 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8018a36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018a3a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018a3c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018a40:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018a44:	eef0 6a62 	vmov.f32	s13, s5
 8018a48:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018a4c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018a50:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018a54:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8018a58:	eef0 6a43 	vmov.f32	s13, s6
 8018a5c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018a60:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8018a64:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018a68:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018a6c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018a70:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018a74:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018a78:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018a7c:	ee12 2a90 	vmov	r2, s5
 8018a80:	eef0 2a47 	vmov.f32	s5, s14
 8018a84:	fb92 f3f3 	sdiv	r3, r2, r3
 8018a88:	ee13 2a10 	vmov	r2, s6
 8018a8c:	931f      	str	r3, [sp, #124]	; 0x7c
 8018a8e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018a90:	eeb0 3a67 	vmov.f32	s6, s15
 8018a94:	fb92 f3f3 	sdiv	r3, r2, r3
 8018a98:	9320      	str	r3, [sp, #128]	; 0x80
 8018a9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018a9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018a9e:	3b01      	subs	r3, #1
 8018aa0:	930d      	str	r3, [sp, #52]	; 0x34
 8018aa2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018aa4:	bf08      	it	eq
 8018aa6:	4613      	moveq	r3, r2
 8018aa8:	9309      	str	r3, [sp, #36]	; 0x24
 8018aaa:	e696      	b.n	80187da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8018aac:	b149      	cbz	r1, 8018ac2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8018aae:	5caa      	ldrb	r2, [r5, r2]
 8018ab0:	4670      	mov	r0, lr
 8018ab2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018ab6:	4422      	add	r2, r4
 8018ab8:	4677      	mov	r7, lr
 8018aba:	e6fb      	b.n	80188b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8018abc:	4670      	mov	r0, lr
 8018abe:	4672      	mov	r2, lr
 8018ac0:	e6f8      	b.n	80188b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8018ac2:	4670      	mov	r0, lr
 8018ac4:	4672      	mov	r2, lr
 8018ac6:	e7f7      	b.n	8018ab8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8018ac8:	f110 0c01 	adds.w	ip, r0, #1
 8018acc:	f53f af6a 	bmi.w	80189a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8018ad0:	4562      	cmp	r2, ip
 8018ad2:	f6ff af67 	blt.w	80189a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8018ad6:	f115 0c01 	adds.w	ip, r5, #1
 8018ada:	f53f af63 	bmi.w	80189a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8018ade:	4567      	cmp	r7, ip
 8018ae0:	f6ff af60 	blt.w	80189a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8018ae4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018ae6:	b23f      	sxth	r7, r7
 8018ae8:	b212      	sxth	r2, r2
 8018aea:	9002      	str	r0, [sp, #8]
 8018aec:	9701      	str	r7, [sp, #4]
 8018aee:	9200      	str	r2, [sp, #0]
 8018af0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018af2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018af4:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8018af8:	e9cd 5803 	strd	r5, r8, [sp, #12]
 8018afc:	4623      	mov	r3, r4
 8018afe:	4631      	mov	r1, r6
 8018b00:	f7ff fd69 	bl	80185d6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8018b04:	e74e      	b.n	80189a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8018b06:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8018b08:	981e      	ldr	r0, [sp, #120]	; 0x78
 8018b0a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8018b0e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8018b10:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8018b12:	1400      	asrs	r0, r0, #16
 8018b14:	142d      	asrs	r5, r5, #16
 8018b16:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018b18:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8018b1c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8018b20:	fb02 5000 	mla	r0, r2, r0, r5
 8018b24:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018b26:	f815 e000 	ldrb.w	lr, [r5, r0]
 8018b2a:	eb05 0c00 	add.w	ip, r5, r0
 8018b2e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8018b32:	eb04 060e 	add.w	r6, r4, lr
 8018b36:	2b00      	cmp	r3, #0
 8018b38:	f000 8097 	beq.w	8018c6a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 8018b3c:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8018b40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018b44:	4425      	add	r5, r4
 8018b46:	2900      	cmp	r1, #0
 8018b48:	f000 8098 	beq.w	8018c7c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 8018b4c:	eb0c 0002 	add.w	r0, ip, r2
 8018b50:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8018b54:	7840      	ldrb	r0, [r0, #1]
 8018b56:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018b5a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018b5e:	4422      	add	r2, r4
 8018b60:	4420      	add	r0, r4
 8018b62:	b29b      	uxth	r3, r3
 8018b64:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8018b68:	b289      	uxth	r1, r1
 8018b6a:	f895 e000 	ldrb.w	lr, [r5]
 8018b6e:	3703      	adds	r7, #3
 8018b70:	f109 39ff 	add.w	r9, r9, #4294967295
 8018b74:	fb03 f801 	mul.w	r8, r3, r1
 8018b78:	011b      	lsls	r3, r3, #4
 8018b7a:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8018b7e:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8018b82:	eba3 0308 	sub.w	r3, r3, r8
 8018b86:	b289      	uxth	r1, r1
 8018b88:	b29b      	uxth	r3, r3
 8018b8a:	ebac 0c01 	sub.w	ip, ip, r1
 8018b8e:	fb03 fe0e 	mul.w	lr, r3, lr
 8018b92:	fa1f fc8c 	uxth.w	ip, ip
 8018b96:	930f      	str	r3, [sp, #60]	; 0x3c
 8018b98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018b9a:	fb0c ee0b 	mla	lr, ip, fp, lr
 8018b9e:	f892 b000 	ldrb.w	fp, [r2]
 8018ba2:	fb01 ee0b 	mla	lr, r1, fp, lr
 8018ba6:	f890 b000 	ldrb.w	fp, [r0]
 8018baa:	fb08 ee0b 	mla	lr, r8, fp, lr
 8018bae:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 8018bb2:	fb1b fb03 	smulbb	fp, fp, r3
 8018bb6:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8018bba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018bbc:	fb0e be0a 	mla	lr, lr, sl, fp
 8018bc0:	fa1f fe8e 	uxth.w	lr, lr
 8018bc4:	f10e 0b01 	add.w	fp, lr, #1
 8018bc8:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8018bcc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8018bd0:	f807 ec06 	strb.w	lr, [r7, #-6]
 8018bd4:	f895 e001 	ldrb.w	lr, [r5, #1]
 8018bd8:	f896 b001 	ldrb.w	fp, [r6, #1]
 8018bdc:	fb03 fe0e 	mul.w	lr, r3, lr
 8018be0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018be2:	fb0c ee0b 	mla	lr, ip, fp, lr
 8018be6:	f892 b001 	ldrb.w	fp, [r2, #1]
 8018bea:	fb01 ee0b 	mla	lr, r1, fp, lr
 8018bee:	f890 b001 	ldrb.w	fp, [r0, #1]
 8018bf2:	fb08 ee0b 	mla	lr, r8, fp, lr
 8018bf6:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 8018bfa:	fb1b fb03 	smulbb	fp, fp, r3
 8018bfe:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8018c02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018c04:	fb0e be0a 	mla	lr, lr, sl, fp
 8018c08:	fa1f fe8e 	uxth.w	lr, lr
 8018c0c:	f10e 0b01 	add.w	fp, lr, #1
 8018c10:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8018c14:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8018c18:	f807 ec05 	strb.w	lr, [r7, #-5]
 8018c1c:	78ad      	ldrb	r5, [r5, #2]
 8018c1e:	78b6      	ldrb	r6, [r6, #2]
 8018c20:	436b      	muls	r3, r5
 8018c22:	7895      	ldrb	r5, [r2, #2]
 8018c24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018c26:	fb0c 3306 	mla	r3, ip, r6, r3
 8018c2a:	fb01 3305 	mla	r3, r1, r5, r3
 8018c2e:	7885      	ldrb	r5, [r0, #2]
 8018c30:	fb08 3805 	mla	r8, r8, r5, r3
 8018c34:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8018c38:	fb13 f302 	smulbb	r3, r3, r2
 8018c3c:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8018c40:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8018c42:	fb08 380a 	mla	r8, r8, sl, r3
 8018c46:	fa1f f888 	uxth.w	r8, r8
 8018c4a:	f108 0301 	add.w	r3, r8, #1
 8018c4e:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 8018c52:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018c54:	4413      	add	r3, r2
 8018c56:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018c58:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018c5c:	931d      	str	r3, [sp, #116]	; 0x74
 8018c5e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8018c60:	f807 8c04 	strb.w	r8, [r7, #-4]
 8018c64:	4413      	add	r3, r2
 8018c66:	931e      	str	r3, [sp, #120]	; 0x78
 8018c68:	e6d6      	b.n	8018a18 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8018c6a:	b151      	cbz	r1, 8018c82 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8018c6c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8018c70:	4630      	mov	r0, r6
 8018c72:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018c76:	4422      	add	r2, r4
 8018c78:	4635      	mov	r5, r6
 8018c7a:	e772      	b.n	8018b62 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8018c7c:	4630      	mov	r0, r6
 8018c7e:	4632      	mov	r2, r6
 8018c80:	e76f      	b.n	8018b62 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8018c82:	4630      	mov	r0, r6
 8018c84:	4632      	mov	r2, r6
 8018c86:	e7f7      	b.n	8018c78 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8018c88:	b013      	add	sp, #76	; 0x4c
 8018c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018c8e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8018c8e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8018c92:	784c      	ldrb	r4, [r1, #1]
 8018c94:	f891 a002 	ldrb.w	sl, [r1, #2]
 8018c98:	0224      	lsls	r4, r4, #8
 8018c9a:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8018c9e:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8018ca2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8018ca6:	f891 a000 	ldrb.w	sl, [r1]
 8018caa:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 8018cae:	ea44 040a 	orr.w	r4, r4, sl
 8018cb2:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 8018cb6:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	; 0x30
 8018cba:	9401      	str	r4, [sp, #4]
 8018cbc:	fb05 c70e 	mla	r7, r5, lr, ip
 8018cc0:	2d00      	cmp	r5, #0
 8018cc2:	eb02 0807 	add.w	r8, r2, r7
 8018cc6:	db72      	blt.n	8018dae <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8018cc8:	45a9      	cmp	r9, r5
 8018cca:	dd70      	ble.n	8018dae <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8018ccc:	f1bc 0f00 	cmp.w	ip, #0
 8018cd0:	db6b      	blt.n	8018daa <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8018cd2:	45e6      	cmp	lr, ip
 8018cd4:	dd69      	ble.n	8018daa <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8018cd6:	5dd7      	ldrb	r7, [r2, r7]
 8018cd8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8018cdc:	441f      	add	r7, r3
 8018cde:	f11c 0201 	adds.w	r2, ip, #1
 8018ce2:	d467      	bmi.n	8018db4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8018ce4:	4596      	cmp	lr, r2
 8018ce6:	dd65      	ble.n	8018db4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8018ce8:	2800      	cmp	r0, #0
 8018cea:	d063      	beq.n	8018db4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8018cec:	f898 4001 	ldrb.w	r4, [r8, #1]
 8018cf0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018cf4:	441c      	add	r4, r3
 8018cf6:	3501      	adds	r5, #1
 8018cf8:	d460      	bmi.n	8018dbc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8018cfa:	45a9      	cmp	r9, r5
 8018cfc:	dd5e      	ble.n	8018dbc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8018cfe:	2e00      	cmp	r6, #0
 8018d00:	d05c      	beq.n	8018dbc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8018d02:	f1bc 0f00 	cmp.w	ip, #0
 8018d06:	db57      	blt.n	8018db8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8018d08:	45e6      	cmp	lr, ip
 8018d0a:	dd55      	ble.n	8018db8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8018d0c:	f818 500e 	ldrb.w	r5, [r8, lr]
 8018d10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018d14:	441d      	add	r5, r3
 8018d16:	f11c 0201 	adds.w	r2, ip, #1
 8018d1a:	d452      	bmi.n	8018dc2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8018d1c:	4596      	cmp	lr, r2
 8018d1e:	dd50      	ble.n	8018dc2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8018d20:	2800      	cmp	r0, #0
 8018d22:	d04e      	beq.n	8018dc2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8018d24:	44c6      	add	lr, r8
 8018d26:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8018d2a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018d2e:	4413      	add	r3, r2
 8018d30:	b280      	uxth	r0, r0
 8018d32:	f897 8000 	ldrb.w	r8, [r7]
 8018d36:	b2b2      	uxth	r2, r6
 8018d38:	fb00 f602 	mul.w	r6, r0, r2
 8018d3c:	0100      	lsls	r0, r0, #4
 8018d3e:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8018d42:	f5c0 7e80 	rsb	lr, r0, #256	; 0x100
 8018d46:	1b80      	subs	r0, r0, r6
 8018d48:	fa1f fc82 	uxth.w	ip, r2
 8018d4c:	b282      	uxth	r2, r0
 8018d4e:	7820      	ldrb	r0, [r4, #0]
 8018d50:	ebae 0e0c 	sub.w	lr, lr, ip
 8018d54:	4350      	muls	r0, r2
 8018d56:	fa1f fe8e 	uxth.w	lr, lr
 8018d5a:	fb0e 0808 	mla	r8, lr, r8, r0
 8018d5e:	7828      	ldrb	r0, [r5, #0]
 8018d60:	fb0c 8800 	mla	r8, ip, r0, r8
 8018d64:	7818      	ldrb	r0, [r3, #0]
 8018d66:	fb06 8000 	mla	r0, r6, r0, r8
 8018d6a:	1200      	asrs	r0, r0, #8
 8018d6c:	7008      	strb	r0, [r1, #0]
 8018d6e:	7860      	ldrb	r0, [r4, #1]
 8018d70:	f897 8001 	ldrb.w	r8, [r7, #1]
 8018d74:	4350      	muls	r0, r2
 8018d76:	fb0e 0808 	mla	r8, lr, r8, r0
 8018d7a:	7868      	ldrb	r0, [r5, #1]
 8018d7c:	fb0c 8800 	mla	r8, ip, r0, r8
 8018d80:	7858      	ldrb	r0, [r3, #1]
 8018d82:	fb06 8000 	mla	r0, r6, r0, r8
 8018d86:	1200      	asrs	r0, r0, #8
 8018d88:	7048      	strb	r0, [r1, #1]
 8018d8a:	78a0      	ldrb	r0, [r4, #2]
 8018d8c:	78bf      	ldrb	r7, [r7, #2]
 8018d8e:	4350      	muls	r0, r2
 8018d90:	78aa      	ldrb	r2, [r5, #2]
 8018d92:	fb0e 0007 	mla	r0, lr, r7, r0
 8018d96:	fb0c 0c02 	mla	ip, ip, r2, r0
 8018d9a:	789a      	ldrb	r2, [r3, #2]
 8018d9c:	fb06 c202 	mla	r2, r6, r2, ip
 8018da0:	1212      	asrs	r2, r2, #8
 8018da2:	708a      	strb	r2, [r1, #2]
 8018da4:	b002      	add	sp, #8
 8018da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018daa:	af01      	add	r7, sp, #4
 8018dac:	e797      	b.n	8018cde <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 8018dae:	ac01      	add	r4, sp, #4
 8018db0:	4627      	mov	r7, r4
 8018db2:	e7a0      	b.n	8018cf6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8018db4:	ac01      	add	r4, sp, #4
 8018db6:	e79e      	b.n	8018cf6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8018db8:	ad01      	add	r5, sp, #4
 8018dba:	e7ac      	b.n	8018d16 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 8018dbc:	ab01      	add	r3, sp, #4
 8018dbe:	461d      	mov	r5, r3
 8018dc0:	e7b6      	b.n	8018d30 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 8018dc2:	ab01      	add	r3, sp, #4
 8018dc4:	e7b4      	b.n	8018d30 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

08018dc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018dc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dca:	b08d      	sub	sp, #52	; 0x34
 8018dcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018dd0:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 8018dd4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8018dd6:	900b      	str	r0, [sp, #44]	; 0x2c
 8018dd8:	9306      	str	r3, [sp, #24]
 8018dda:	6850      	ldr	r0, [r2, #4]
 8018ddc:	6812      	ldr	r2, [r2, #0]
 8018dde:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8018de0:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	; 0x70
 8018de4:	fb00 1303 	mla	r3, r0, r3, r1
 8018de8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018dec:	18d3      	adds	r3, r2, r3
 8018dee:	9307      	str	r3, [sp, #28]
 8018df0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8018df2:	681b      	ldr	r3, [r3, #0]
 8018df4:	9308      	str	r3, [sp, #32]
 8018df6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8018df8:	685d      	ldr	r5, [r3, #4]
 8018dfa:	3504      	adds	r5, #4
 8018dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018dfe:	2b00      	cmp	r3, #0
 8018e00:	dc03      	bgt.n	8018e0a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8018e02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	f340 81e6 	ble.w	80191d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8018e0a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8018e0c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018e10:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8018e14:	1e48      	subs	r0, r1, #1
 8018e16:	1e56      	subs	r6, r2, #1
 8018e18:	9b06      	ldr	r3, [sp, #24]
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	f340 80bd 	ble.w	8018f9a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8018e20:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018e22:	1427      	asrs	r7, r4, #16
 8018e24:	ea4f 4323 	mov.w	r3, r3, asr #16
 8018e28:	d406      	bmi.n	8018e38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018e2a:	4287      	cmp	r7, r0
 8018e2c:	da04      	bge.n	8018e38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	db02      	blt.n	8018e38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018e32:	42b3      	cmp	r3, r6
 8018e34:	f2c0 80b2 	blt.w	8018f9c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8018e38:	3701      	adds	r7, #1
 8018e3a:	f100 80a1 	bmi.w	8018f80 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8018e3e:	42b9      	cmp	r1, r7
 8018e40:	f2c0 809e 	blt.w	8018f80 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8018e44:	3301      	adds	r3, #1
 8018e46:	f100 809b 	bmi.w	8018f80 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8018e4a:	429a      	cmp	r2, r3
 8018e4c:	f2c0 8098 	blt.w	8018f80 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8018e50:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 8018e54:	f1bb 0f00 	cmp.w	fp, #0
 8018e58:	f340 80bf 	ble.w	8018fda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8018e5c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018e5e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8018e60:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018e62:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8018e66:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8018e6a:	1420      	asrs	r0, r4, #16
 8018e6c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8018e6e:	ea4f 4723 	mov.w	r7, r3, asr #16
 8018e72:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8018e76:	6892      	ldr	r2, [r2, #8]
 8018e78:	f100 8103 	bmi.w	8019082 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8018e7c:	f102 3eff 	add.w	lr, r2, #4294967295
 8018e80:	4570      	cmp	r0, lr
 8018e82:	f280 80fe 	bge.w	8019082 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8018e86:	2f00      	cmp	r7, #0
 8018e88:	f2c0 80fb 	blt.w	8019082 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8018e8c:	f10c 3eff 	add.w	lr, ip, #4294967295
 8018e90:	4577      	cmp	r7, lr
 8018e92:	f280 80f6 	bge.w	8019082 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8018e96:	b212      	sxth	r2, r2
 8018e98:	fb07 0002 	mla	r0, r7, r2, r0
 8018e9c:	9f08      	ldr	r7, [sp, #32]
 8018e9e:	f817 8000 	ldrb.w	r8, [r7, r0]
 8018ea2:	eb07 0e00 	add.w	lr, r7, r0
 8018ea6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8018eaa:	eb05 0c08 	add.w	ip, r5, r8
 8018eae:	2b00      	cmp	r3, #0
 8018eb0:	f000 80d8 	beq.w	8019064 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8018eb4:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8018eb8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8018ebc:	442f      	add	r7, r5
 8018ebe:	2900      	cmp	r1, #0
 8018ec0:	f000 80d9 	beq.w	8019076 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8018ec4:	eb0e 0002 	add.w	r0, lr, r2
 8018ec8:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8018ecc:	7840      	ldrb	r0, [r0, #1]
 8018ece:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018ed2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018ed6:	442a      	add	r2, r5
 8018ed8:	4428      	add	r0, r5
 8018eda:	b29b      	uxth	r3, r3
 8018edc:	f815 a008 	ldrb.w	sl, [r5, r8]
 8018ee0:	b289      	uxth	r1, r1
 8018ee2:	f897 8000 	ldrb.w	r8, [r7]
 8018ee6:	fb03 f901 	mul.w	r9, r3, r1
 8018eea:	011b      	lsls	r3, r3, #4
 8018eec:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8018ef0:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8018ef4:	eba3 0309 	sub.w	r3, r3, r9
 8018ef8:	b289      	uxth	r1, r1
 8018efa:	b29b      	uxth	r3, r3
 8018efc:	ebae 0e01 	sub.w	lr, lr, r1
 8018f00:	fb03 f808 	mul.w	r8, r3, r8
 8018f04:	fa1f fe8e 	uxth.w	lr, lr
 8018f08:	fb0e 880a 	mla	r8, lr, sl, r8
 8018f0c:	f892 a000 	ldrb.w	sl, [r2]
 8018f10:	fb01 880a 	mla	r8, r1, sl, r8
 8018f14:	f890 a000 	ldrb.w	sl, [r0]
 8018f18:	fb09 880a 	mla	r8, r9, sl, r8
 8018f1c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018f20:	f886 8000 	strb.w	r8, [r6]
 8018f24:	f897 8001 	ldrb.w	r8, [r7, #1]
 8018f28:	f89c a001 	ldrb.w	sl, [ip, #1]
 8018f2c:	fb03 f808 	mul.w	r8, r3, r8
 8018f30:	fb0e 880a 	mla	r8, lr, sl, r8
 8018f34:	f892 a001 	ldrb.w	sl, [r2, #1]
 8018f38:	fb01 880a 	mla	r8, r1, sl, r8
 8018f3c:	f890 a001 	ldrb.w	sl, [r0, #1]
 8018f40:	fb09 880a 	mla	r8, r9, sl, r8
 8018f44:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018f48:	f886 8001 	strb.w	r8, [r6, #1]
 8018f4c:	78bf      	ldrb	r7, [r7, #2]
 8018f4e:	f89c c002 	ldrb.w	ip, [ip, #2]
 8018f52:	437b      	muls	r3, r7
 8018f54:	7892      	ldrb	r2, [r2, #2]
 8018f56:	fb0e 330c 	mla	r3, lr, ip, r3
 8018f5a:	fb01 3102 	mla	r1, r1, r2, r3
 8018f5e:	7882      	ldrb	r2, [r0, #2]
 8018f60:	fb09 1902 	mla	r9, r9, r2, r1
 8018f64:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018f68:	f886 9002 	strb.w	r9, [r6, #2]
 8018f6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018f6e:	3603      	adds	r6, #3
 8018f70:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8018f72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018f76:	441c      	add	r4, r3
 8018f78:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018f7a:	4413      	add	r3, r2
 8018f7c:	9318      	str	r3, [sp, #96]	; 0x60
 8018f7e:	e769      	b.n	8018e54 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8018f80:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018f82:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8018f84:	441c      	add	r4, r3
 8018f86:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018f88:	443b      	add	r3, r7
 8018f8a:	9318      	str	r3, [sp, #96]	; 0x60
 8018f8c:	9b06      	ldr	r3, [sp, #24]
 8018f8e:	3b01      	subs	r3, #1
 8018f90:	9306      	str	r3, [sp, #24]
 8018f92:	9b07      	ldr	r3, [sp, #28]
 8018f94:	3303      	adds	r3, #3
 8018f96:	9307      	str	r3, [sp, #28]
 8018f98:	e73e      	b.n	8018e18 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8018f9a:	d026      	beq.n	8018fea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8018f9c:	9b06      	ldr	r3, [sp, #24]
 8018f9e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8018fa0:	3b01      	subs	r3, #1
 8018fa2:	fb00 4003 	mla	r0, r0, r3, r4
 8018fa6:	1400      	asrs	r0, r0, #16
 8018fa8:	f53f af52 	bmi.w	8018e50 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8018fac:	3901      	subs	r1, #1
 8018fae:	4288      	cmp	r0, r1
 8018fb0:	f6bf af4e 	bge.w	8018e50 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8018fb4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8018fb6:	9818      	ldr	r0, [sp, #96]	; 0x60
 8018fb8:	fb01 0303 	mla	r3, r1, r3, r0
 8018fbc:	141b      	asrs	r3, r3, #16
 8018fbe:	f53f af47 	bmi.w	8018e50 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8018fc2:	3a01      	subs	r2, #1
 8018fc4:	4293      	cmp	r3, r2
 8018fc6:	f6bf af43 	bge.w	8018e50 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8018fca:	9b07      	ldr	r3, [sp, #28]
 8018fcc:	f8dd a018 	ldr.w	sl, [sp, #24]
 8018fd0:	f103 0803 	add.w	r8, r3, #3
 8018fd4:	f1ba 0f00 	cmp.w	sl, #0
 8018fd8:	dc71      	bgt.n	80190be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8018fda:	9b06      	ldr	r3, [sp, #24]
 8018fdc:	9a07      	ldr	r2, [sp, #28]
 8018fde:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018fe2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018fe6:	441a      	add	r2, r3
 8018fe8:	9207      	str	r2, [sp, #28]
 8018fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	f340 80f2 	ble.w	80191d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8018ff2:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018ff6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018ff8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018ffc:	eeb0 6a62 	vmov.f32	s12, s5
 8019000:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019004:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019008:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801900c:	ee16 4a10 	vmov	r4, s12
 8019010:	eeb0 6a43 	vmov.f32	s12, s6
 8019014:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019018:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
 801901c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019020:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019024:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019028:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801902c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019030:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019034:	ee12 2a90 	vmov	r2, s5
 8019038:	eef0 2a47 	vmov.f32	s5, s14
 801903c:	fb92 f3f3 	sdiv	r3, r2, r3
 8019040:	ee13 2a10 	vmov	r2, s6
 8019044:	9319      	str	r3, [sp, #100]	; 0x64
 8019046:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8019048:	eeb0 3a67 	vmov.f32	s6, s15
 801904c:	fb92 f3f3 	sdiv	r3, r2, r3
 8019050:	931a      	str	r3, [sp, #104]	; 0x68
 8019052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019054:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019056:	3b01      	subs	r3, #1
 8019058:	9309      	str	r3, [sp, #36]	; 0x24
 801905a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801905c:	bf08      	it	eq
 801905e:	4613      	moveq	r3, r2
 8019060:	9306      	str	r3, [sp, #24]
 8019062:	e6cb      	b.n	8018dfc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8019064:	b151      	cbz	r1, 801907c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8019066:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801906a:	4660      	mov	r0, ip
 801906c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019070:	442a      	add	r2, r5
 8019072:	4667      	mov	r7, ip
 8019074:	e731      	b.n	8018eda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8019076:	4660      	mov	r0, ip
 8019078:	4662      	mov	r2, ip
 801907a:	e72e      	b.n	8018eda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801907c:	4660      	mov	r0, ip
 801907e:	4662      	mov	r2, ip
 8019080:	e7f7      	b.n	8019072 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 8019082:	f110 0e01 	adds.w	lr, r0, #1
 8019086:	f53f af71 	bmi.w	8018f6c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801908a:	4572      	cmp	r2, lr
 801908c:	f6ff af6e 	blt.w	8018f6c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8019090:	f117 0e01 	adds.w	lr, r7, #1
 8019094:	f53f af6a 	bmi.w	8018f6c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8019098:	45f4      	cmp	ip, lr
 801909a:	f6ff af67 	blt.w	8018f6c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801909e:	b212      	sxth	r2, r2
 80190a0:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80190a4:	fa0f f38c 	sxth.w	r3, ip
 80190a8:	9200      	str	r2, [sp, #0]
 80190aa:	4631      	mov	r1, r6
 80190ac:	9a08      	ldr	r2, [sp, #32]
 80190ae:	9301      	str	r3, [sp, #4]
 80190b0:	462b      	mov	r3, r5
 80190b2:	e9cd 0702 	strd	r0, r7, [sp, #8]
 80190b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80190b8:	f7ff fde9 	bl	8018c8e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 80190bc:	e756      	b.n	8018f6c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80190be:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80190c0:	1426      	asrs	r6, r4, #16
 80190c2:	9818      	ldr	r0, [sp, #96]	; 0x60
 80190c4:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80190c8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80190cc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80190ce:	1400      	asrs	r0, r0, #16
 80190d0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80190d4:	fb02 6000 	mla	r0, r2, r0, r6
 80190d8:	9e08      	ldr	r6, [sp, #32]
 80190da:	f816 e000 	ldrb.w	lr, [r6, r0]
 80190de:	eb06 0c00 	add.w	ip, r6, r0
 80190e2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80190e6:	eb05 070e 	add.w	r7, r5, lr
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	d064      	beq.n	80191b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80190ee:	f89c 6001 	ldrb.w	r6, [ip, #1]
 80190f2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80190f6:	442e      	add	r6, r5
 80190f8:	2900      	cmp	r1, #0
 80190fa:	d066      	beq.n	80191ca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 80190fc:	eb0c 0002 	add.w	r0, ip, r2
 8019100:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019104:	7840      	ldrb	r0, [r0, #1]
 8019106:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801910a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801910e:	442a      	add	r2, r5
 8019110:	4428      	add	r0, r5
 8019112:	b29b      	uxth	r3, r3
 8019114:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8019118:	b289      	uxth	r1, r1
 801911a:	f896 e000 	ldrb.w	lr, [r6]
 801911e:	f108 0803 	add.w	r8, r8, #3
 8019122:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019126:	fb03 f901 	mul.w	r9, r3, r1
 801912a:	011b      	lsls	r3, r3, #4
 801912c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8019130:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8019134:	eba3 0309 	sub.w	r3, r3, r9
 8019138:	b289      	uxth	r1, r1
 801913a:	b29b      	uxth	r3, r3
 801913c:	ebac 0c01 	sub.w	ip, ip, r1
 8019140:	fb03 fe0e 	mul.w	lr, r3, lr
 8019144:	fa1f fc8c 	uxth.w	ip, ip
 8019148:	fb0c ee0b 	mla	lr, ip, fp, lr
 801914c:	f892 b000 	ldrb.w	fp, [r2]
 8019150:	fb01 ee0b 	mla	lr, r1, fp, lr
 8019154:	f890 b000 	ldrb.w	fp, [r0]
 8019158:	fb09 ee0b 	mla	lr, r9, fp, lr
 801915c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019160:	f808 ec06 	strb.w	lr, [r8, #-6]
 8019164:	f896 e001 	ldrb.w	lr, [r6, #1]
 8019168:	f897 b001 	ldrb.w	fp, [r7, #1]
 801916c:	fb03 fe0e 	mul.w	lr, r3, lr
 8019170:	fb0c ee0b 	mla	lr, ip, fp, lr
 8019174:	f892 b001 	ldrb.w	fp, [r2, #1]
 8019178:	fb01 ee0b 	mla	lr, r1, fp, lr
 801917c:	f890 b001 	ldrb.w	fp, [r0, #1]
 8019180:	fb09 ee0b 	mla	lr, r9, fp, lr
 8019184:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019188:	f808 ec05 	strb.w	lr, [r8, #-5]
 801918c:	78b6      	ldrb	r6, [r6, #2]
 801918e:	78bf      	ldrb	r7, [r7, #2]
 8019190:	4373      	muls	r3, r6
 8019192:	7896      	ldrb	r6, [r2, #2]
 8019194:	7882      	ldrb	r2, [r0, #2]
 8019196:	fb0c 3307 	mla	r3, ip, r7, r3
 801919a:	fb01 3306 	mla	r3, r1, r6, r3
 801919e:	fb09 3902 	mla	r9, r9, r2, r3
 80191a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80191a4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80191a6:	441c      	add	r4, r3
 80191a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80191aa:	ea4f 2929 	mov.w	r9, r9, asr #8
 80191ae:	4413      	add	r3, r2
 80191b0:	f808 9c04 	strb.w	r9, [r8, #-4]
 80191b4:	9318      	str	r3, [sp, #96]	; 0x60
 80191b6:	e70d      	b.n	8018fd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80191b8:	b151      	cbz	r1, 80191d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 80191ba:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80191be:	4638      	mov	r0, r7
 80191c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80191c4:	442a      	add	r2, r5
 80191c6:	463e      	mov	r6, r7
 80191c8:	e7a3      	b.n	8019112 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80191ca:	4638      	mov	r0, r7
 80191cc:	463a      	mov	r2, r7
 80191ce:	e7a0      	b.n	8019112 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80191d0:	4638      	mov	r0, r7
 80191d2:	463a      	mov	r2, r7
 80191d4:	e7f7      	b.n	80191c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 80191d6:	b00d      	add	sp, #52	; 0x34
 80191d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080191dc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 80191dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191e0:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 80191e4:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80191e8:	2d00      	cmp	r5, #0
 80191ea:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 80191ee:	fb05 700c 	mla	r0, r5, ip, r7
 80191f2:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80191f6:	f89d e044 	ldrb.w	lr, [sp, #68]	; 0x44
 80191fa:	eb02 0800 	add.w	r8, r2, r0
 80191fe:	f2c0 8118 	blt.w	8019432 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8019202:	45a9      	cmp	r9, r5
 8019204:	f340 8115 	ble.w	8019432 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8019208:	2f00      	cmp	r7, #0
 801920a:	f2c0 8110 	blt.w	801942e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801920e:	45bc      	cmp	ip, r7
 8019210:	f340 810d 	ble.w	801942e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8019214:	5c12      	ldrb	r2, [r2, r0]
 8019216:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801921a:	1c7a      	adds	r2, r7, #1
 801921c:	f100 810c 	bmi.w	8019438 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8019220:	4594      	cmp	ip, r2
 8019222:	f340 8109 	ble.w	8019438 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8019226:	2c00      	cmp	r4, #0
 8019228:	f000 8108 	beq.w	801943c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 801922c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8019230:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8019234:	3501      	adds	r5, #1
 8019236:	f100 8105 	bmi.w	8019444 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801923a:	45a9      	cmp	r9, r5
 801923c:	f340 8102 	ble.w	8019444 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8019240:	f1be 0f00 	cmp.w	lr, #0
 8019244:	f000 8101 	beq.w	801944a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 8019248:	2f00      	cmp	r7, #0
 801924a:	f2c0 80f9 	blt.w	8019440 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801924e:	45bc      	cmp	ip, r7
 8019250:	f340 80f6 	ble.w	8019440 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8019254:	f818 200c 	ldrb.w	r2, [r8, ip]
 8019258:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801925c:	3701      	adds	r7, #1
 801925e:	f100 80f7 	bmi.w	8019450 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8019262:	45bc      	cmp	ip, r7
 8019264:	f340 80f4 	ble.w	8019450 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8019268:	2c00      	cmp	r4, #0
 801926a:	f000 80f3 	beq.w	8019454 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 801926e:	44c4      	add	ip, r8
 8019270:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8019274:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8019278:	fa1f fc84 	uxth.w	ip, r4
 801927c:	fa1f f48e 	uxth.w	r4, lr
 8019280:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8019284:	fb04 fe0c 	mul.w	lr, r4, ip
 8019288:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801928c:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8019290:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8019294:	ebac 070e 	sub.w	r7, ip, lr
 8019298:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801929c:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80192a0:	b2a4      	uxth	r4, r4
 80192a2:	b2bf      	uxth	r7, r7
 80192a4:	1b1b      	subs	r3, r3, r4
 80192a6:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80192aa:	fb07 fc0a 	mul.w	ip, r7, sl
 80192ae:	b29b      	uxth	r3, r3
 80192b0:	fb03 cc0b 	mla	ip, r3, fp, ip
 80192b4:	9300      	str	r3, [sp, #0]
 80192b6:	fb04 cc09 	mla	ip, r4, r9, ip
 80192ba:	fb0e cc08 	mla	ip, lr, r8, ip
 80192be:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80192c2:	9301      	str	r3, [sp, #4]
 80192c4:	2b00      	cmp	r3, #0
 80192c6:	f000 80af 	beq.w	8019428 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 80192ca:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80192ce:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80192d2:	fb0b fc0c 	mul.w	ip, fp, ip
 80192d6:	fb0b f606 	mul.w	r6, fp, r6
 80192da:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80192de:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80192e2:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80192e6:	44dc      	add	ip, fp
 80192e8:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 80192ec:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80192f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80192f4:	fb0a fb0b 	mul.w	fp, sl, fp
 80192f8:	fb0a fa00 	mul.w	sl, sl, r0
 80192fc:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8019300:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8019304:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8019308:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801930c:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8019310:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019314:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8019318:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801931c:	0a36      	lsrs	r6, r6, #8
 801931e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019322:	44dc      	add	ip, fp
 8019324:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8019328:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801932c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019330:	fb09 fb0b 	mul.w	fp, r9, fp
 8019334:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019338:	fb09 f905 	mul.w	r9, r9, r5
 801933c:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8019340:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019344:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8019348:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801934c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8019350:	fb0c fc07 	mul.w	ip, ip, r7
 8019354:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8019358:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 801935c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8019360:	4458      	add	r0, fp
 8019362:	fb08 f505 	mul.w	r5, r8, r5
 8019366:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801936a:	fb08 f802 	mul.w	r8, r8, r2
 801936e:	0a00      	lsrs	r0, r0, #8
 8019370:	0a2a      	lsrs	r2, r5, #8
 8019372:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8019376:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801937a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801937e:	4415      	add	r5, r2
 8019380:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8019384:	0a2d      	lsrs	r5, r5, #8
 8019386:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801938a:	9a00      	ldr	r2, [sp, #0]
 801938c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8019390:	fb03 cc02 	mla	ip, r3, r2, ip
 8019394:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8019398:	9b01      	ldr	r3, [sp, #4]
 801939a:	fb05 c50e 	mla	r5, r5, lr, ip
 801939e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80193a2:	fb00 5004 	mla	r0, r0, r4, r5
 80193a6:	0a00      	lsrs	r0, r0, #8
 80193a8:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 80193ac:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 80193b0:	4378      	muls	r0, r7
 80193b2:	fb02 0006 	mla	r0, r2, r6, r0
 80193b6:	fb0e 0e08 	mla	lr, lr, r8, r0
 80193ba:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 80193be:	fb04 e000 	mla	r0, r4, r0, lr
 80193c2:	0a00      	lsrs	r0, r0, #8
 80193c4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80193c8:	4328      	orrs	r0, r5
 80193ca:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 80193ce:	b2ad      	uxth	r5, r5
 80193d0:	b2c4      	uxtb	r4, r0
 80193d2:	436b      	muls	r3, r5
 80193d4:	fb14 f405 	smulbb	r4, r4, r5
 80193d8:	1c5a      	adds	r2, r3, #1
 80193da:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80193de:	780b      	ldrb	r3, [r1, #0]
 80193e0:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 80193e4:	b2d2      	uxtb	r2, r2
 80193e6:	fb03 4302 	mla	r3, r3, r2, r4
 80193ea:	b29b      	uxth	r3, r3
 80193ec:	1c5c      	adds	r4, r3, #1
 80193ee:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 80193f2:	784c      	ldrb	r4, [r1, #1]
 80193f4:	fb14 f402 	smulbb	r4, r4, r2
 80193f8:	121b      	asrs	r3, r3, #8
 80193fa:	700b      	strb	r3, [r1, #0]
 80193fc:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8019400:	fb03 4305 	mla	r3, r3, r5, r4
 8019404:	b29b      	uxth	r3, r3
 8019406:	1c5c      	adds	r4, r3, #1
 8019408:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801940c:	0c04      	lsrs	r4, r0, #16
 801940e:	7888      	ldrb	r0, [r1, #2]
 8019410:	121b      	asrs	r3, r3, #8
 8019412:	fb10 f002 	smulbb	r0, r0, r2
 8019416:	704b      	strb	r3, [r1, #1]
 8019418:	fb04 0005 	mla	r0, r4, r5, r0
 801941c:	b280      	uxth	r0, r0
 801941e:	1c43      	adds	r3, r0, #1
 8019420:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8019424:	1200      	asrs	r0, r0, #8
 8019426:	7088      	strb	r0, [r1, #2]
 8019428:	b003      	add	sp, #12
 801942a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801942e:	2600      	movs	r6, #0
 8019430:	e6f3      	b.n	801921a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 8019432:	2000      	movs	r0, #0
 8019434:	4606      	mov	r6, r0
 8019436:	e6fd      	b.n	8019234 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8019438:	2000      	movs	r0, #0
 801943a:	e6fb      	b.n	8019234 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801943c:	4620      	mov	r0, r4
 801943e:	e6f9      	b.n	8019234 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8019440:	2500      	movs	r5, #0
 8019442:	e70b      	b.n	801925c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 8019444:	2200      	movs	r2, #0
 8019446:	4615      	mov	r5, r2
 8019448:	e716      	b.n	8019278 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801944a:	4672      	mov	r2, lr
 801944c:	4675      	mov	r5, lr
 801944e:	e713      	b.n	8019278 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8019450:	2200      	movs	r2, #0
 8019452:	e711      	b.n	8019278 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8019454:	4622      	mov	r2, r4
 8019456:	e70f      	b.n	8019278 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

08019458 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801945c:	b09f      	sub	sp, #124	; 0x7c
 801945e:	921b      	str	r2, [sp, #108]	; 0x6c
 8019460:	9309      	str	r3, [sp, #36]	; 0x24
 8019462:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8019464:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8019468:	901d      	str	r0, [sp, #116]	; 0x74
 801946a:	931c      	str	r3, [sp, #112]	; 0x70
 801946c:	6850      	ldr	r0, [r2, #4]
 801946e:	9119      	str	r1, [sp, #100]	; 0x64
 8019470:	6812      	ldr	r2, [r2, #0]
 8019472:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8019474:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8019478:	fb00 1303 	mla	r3, r0, r3, r1
 801947c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019480:	18d3      	adds	r3, r2, r3
 8019482:	930c      	str	r3, [sp, #48]	; 0x30
 8019484:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019486:	681b      	ldr	r3, [r3, #0]
 8019488:	9312      	str	r3, [sp, #72]	; 0x48
 801948a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801948c:	685e      	ldr	r6, [r3, #4]
 801948e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8019492:	3604      	adds	r6, #4
 8019494:	930d      	str	r3, [sp, #52]	; 0x34
 8019496:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019498:	2b00      	cmp	r3, #0
 801949a:	dc03      	bgt.n	80194a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801949c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801949e:	2b00      	cmp	r3, #0
 80194a0:	f340 8378 	ble.w	8019b94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 80194a4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80194a6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80194aa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80194ae:	1e48      	subs	r0, r1, #1
 80194b0:	1e57      	subs	r7, r2, #1
 80194b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80194b4:	2b00      	cmp	r3, #0
 80194b6:	f340 818c 	ble.w	80197d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80194ba:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80194bc:	142b      	asrs	r3, r5, #16
 80194be:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80194c2:	d406      	bmi.n	80194d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80194c4:	4584      	cmp	ip, r0
 80194c6:	da04      	bge.n	80194d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80194c8:	2b00      	cmp	r3, #0
 80194ca:	db02      	blt.n	80194d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80194cc:	42bb      	cmp	r3, r7
 80194ce:	f2c0 8181 	blt.w	80197d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80194d2:	f11c 0c01 	adds.w	ip, ip, #1
 80194d6:	f100 816f 	bmi.w	80197b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80194da:	4561      	cmp	r1, ip
 80194dc:	f2c0 816c 	blt.w	80197b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80194e0:	3301      	adds	r3, #1
 80194e2:	f100 8169 	bmi.w	80197b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80194e6:	429a      	cmp	r2, r3
 80194e8:	f2c0 8166 	blt.w	80197b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80194ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80194ee:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80194f0:	931a      	str	r3, [sp, #104]	; 0x68
 80194f2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80194f4:	2b00      	cmp	r3, #0
 80194f6:	f340 818c 	ble.w	8019812 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 80194fa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80194fc:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8019500:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8019504:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8019508:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801950a:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801950e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019510:	141b      	asrs	r3, r3, #16
 8019512:	f100 81d0 	bmi.w	80198b6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8019516:	f100 38ff 	add.w	r8, r0, #4294967295
 801951a:	4543      	cmp	r3, r8
 801951c:	f280 81cb 	bge.w	80198b6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8019520:	f1bc 0f00 	cmp.w	ip, #0
 8019524:	f2c0 81c7 	blt.w	80198b6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8019528:	f10e 38ff 	add.w	r8, lr, #4294967295
 801952c:	45c4      	cmp	ip, r8
 801952e:	f280 81c2 	bge.w	80198b6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8019532:	b200      	sxth	r0, r0
 8019534:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019536:	fb0c 3300 	mla	r3, ip, r0, r3
 801953a:	eb04 0803 	add.w	r8, r4, r3
 801953e:	5ce3      	ldrb	r3, [r4, r3]
 8019540:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8019544:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8019548:	2a00      	cmp	r2, #0
 801954a:	f000 81a9 	beq.w	80198a0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801954e:	f898 c001 	ldrb.w	ip, [r8, #1]
 8019552:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8019556:	940e      	str	r4, [sp, #56]	; 0x38
 8019558:	0e24      	lsrs	r4, r4, #24
 801955a:	9415      	str	r4, [sp, #84]	; 0x54
 801955c:	b179      	cbz	r1, 801957e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801955e:	eb08 0c00 	add.w	ip, r8, r0
 8019562:	f818 0000 	ldrb.w	r0, [r8, r0]
 8019566:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801956a:	900a      	str	r0, [sp, #40]	; 0x28
 801956c:	0e00      	lsrs	r0, r0, #24
 801956e:	9013      	str	r0, [sp, #76]	; 0x4c
 8019570:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8019574:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8019578:	900f      	str	r0, [sp, #60]	; 0x3c
 801957a:	0e00      	lsrs	r0, r0, #24
 801957c:	9016      	str	r0, [sp, #88]	; 0x58
 801957e:	b292      	uxth	r2, r2
 8019580:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019582:	b289      	uxth	r1, r1
 8019584:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019586:	fb02 f901 	mul.w	r9, r2, r1
 801958a:	0112      	lsls	r2, r2, #4
 801958c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8019590:	eba2 0809 	sub.w	r8, r2, r9
 8019594:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8019598:	b289      	uxth	r1, r1
 801959a:	fa1f f888 	uxth.w	r8, r8
 801959e:	1a52      	subs	r2, r2, r1
 80195a0:	fb08 f000 	mul.w	r0, r8, r0
 80195a4:	b292      	uxth	r2, r2
 80195a6:	fb02 000e 	mla	r0, r2, lr, r0
 80195aa:	fb01 0004 	mla	r0, r1, r4, r0
 80195ae:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80195b0:	fb09 0004 	mla	r0, r9, r4, r0
 80195b4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80195b8:	2800      	cmp	r0, #0
 80195ba:	f000 80f2 	beq.w	80197a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80195be:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80195c2:	d01b      	beq.n	80195fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 80195c4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80195c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80195cc:	fb0e fa0a 	mul.w	sl, lr, sl
 80195d0:	fb0e fe03 	mul.w	lr, lr, r3
 80195d4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80195d8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80195dc:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80195e0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80195e4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80195e8:	4453      	add	r3, sl
 80195ea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80195ee:	0a1b      	lsrs	r3, r3, #8
 80195f0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80195f4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80195f8:	ea43 030c 	orr.w	r3, r3, ip
 80195fc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80195fe:	2cff      	cmp	r4, #255	; 0xff
 8019600:	d021      	beq.n	8019646 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8019602:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019604:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019608:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801960a:	fb04 fb0b 	mul.w	fp, r4, fp
 801960e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019610:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019614:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019616:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801961a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801961e:	fb04 fa0a 	mul.w	sl, r4, sl
 8019622:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019626:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801962a:	44de      	add	lr, fp
 801962c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019630:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019634:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019638:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801963c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019640:	ea4e 040a 	orr.w	r4, lr, sl
 8019644:	940e      	str	r4, [sp, #56]	; 0x38
 8019646:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019648:	2cff      	cmp	r4, #255	; 0xff
 801964a:	d021      	beq.n	8019690 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801964c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801964e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019652:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019654:	fb04 fb0b 	mul.w	fp, r4, fp
 8019658:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801965a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801965e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019660:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019664:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019668:	fb04 fa0a 	mul.w	sl, r4, sl
 801966c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019670:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019674:	44de      	add	lr, fp
 8019676:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801967a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801967e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019682:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019686:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801968a:	ea4e 040a 	orr.w	r4, lr, sl
 801968e:	940a      	str	r4, [sp, #40]	; 0x28
 8019690:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019692:	2cff      	cmp	r4, #255	; 0xff
 8019694:	d021      	beq.n	80196da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8019696:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019698:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801969c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801969e:	fb04 fb0b 	mul.w	fp, r4, fp
 80196a2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80196a4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80196a8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80196aa:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80196ae:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80196b2:	fb04 fa0a 	mul.w	sl, r4, sl
 80196b6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80196ba:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80196be:	44de      	add	lr, fp
 80196c0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80196c4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80196c8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80196cc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80196d0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80196d4:	ea4e 040a 	orr.w	r4, lr, sl
 80196d8:	940f      	str	r4, [sp, #60]	; 0x3c
 80196da:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80196dc:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80196e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80196e4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80196e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80196ea:	fb08 fc0c 	mul.w	ip, r8, ip
 80196ee:	fb02 cc0e 	mla	ip, r2, lr, ip
 80196f2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80196f6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80196f8:	fb01 cc0e 	mla	ip, r1, lr, ip
 80196fc:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8019700:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019702:	fb09 cc0e 	mla	ip, r9, lr, ip
 8019706:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801970a:	fb08 f80e 	mul.w	r8, r8, lr
 801970e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019712:	fb02 8303 	mla	r3, r2, r3, r8
 8019716:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019718:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801971c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8019720:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019722:	fb01 330a 	mla	r3, r1, sl, r3
 8019726:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801972a:	fb09 3901 	mla	r9, r9, r1, r3
 801972e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019730:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019732:	4343      	muls	r3, r0
 8019734:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8019738:	1c58      	adds	r0, r3, #1
 801973a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801973e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8019742:	ea4c 0c09 	orr.w	ip, ip, r9
 8019746:	783b      	ldrb	r3, [r7, #0]
 8019748:	fa5f f28c 	uxtb.w	r2, ip
 801974c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8019750:	fb12 f201 	smulbb	r2, r2, r1
 8019754:	b2c0      	uxtb	r0, r0
 8019756:	fb03 2300 	mla	r3, r3, r0, r2
 801975a:	b29b      	uxth	r3, r3
 801975c:	1c5a      	adds	r2, r3, #1
 801975e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019762:	787a      	ldrb	r2, [r7, #1]
 8019764:	fb12 f200 	smulbb	r2, r2, r0
 8019768:	121b      	asrs	r3, r3, #8
 801976a:	703b      	strb	r3, [r7, #0]
 801976c:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8019770:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8019774:	fb03 2301 	mla	r3, r3, r1, r2
 8019778:	b29b      	uxth	r3, r3
 801977a:	1c5a      	adds	r2, r3, #1
 801977c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019780:	121b      	asrs	r3, r3, #8
 8019782:	707b      	strb	r3, [r7, #1]
 8019784:	78bb      	ldrb	r3, [r7, #2]
 8019786:	fb13 f000 	smulbb	r0, r3, r0
 801978a:	fb0c 0c01 	mla	ip, ip, r1, r0
 801978e:	fa1f fc8c 	uxth.w	ip, ip
 8019792:	f10c 0301 	add.w	r3, ip, #1
 8019796:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801979a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801979e:	f887 c002 	strb.w	ip, [r7, #2]
 80197a2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80197a4:	3703      	adds	r7, #3
 80197a6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80197a8:	441a      	add	r2, r3
 80197aa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80197ac:	441d      	add	r5, r3
 80197ae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80197b0:	9229      	str	r2, [sp, #164]	; 0xa4
 80197b2:	3b01      	subs	r3, #1
 80197b4:	931a      	str	r3, [sp, #104]	; 0x68
 80197b6:	e69c      	b.n	80194f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80197b8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80197ba:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80197bc:	441c      	add	r4, r3
 80197be:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80197c0:	441d      	add	r5, r3
 80197c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80197c4:	9429      	str	r4, [sp, #164]	; 0xa4
 80197c6:	3b01      	subs	r3, #1
 80197c8:	9309      	str	r3, [sp, #36]	; 0x24
 80197ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80197cc:	3303      	adds	r3, #3
 80197ce:	930c      	str	r3, [sp, #48]	; 0x30
 80197d0:	e66f      	b.n	80194b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80197d2:	d026      	beq.n	8019822 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 80197d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80197d6:	982b      	ldr	r0, [sp, #172]	; 0xac
 80197d8:	3b01      	subs	r3, #1
 80197da:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80197dc:	fb00 4003 	mla	r0, r0, r3, r4
 80197e0:	1400      	asrs	r0, r0, #16
 80197e2:	f53f ae83 	bmi.w	80194ec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80197e6:	3901      	subs	r1, #1
 80197e8:	4288      	cmp	r0, r1
 80197ea:	f6bf ae7f 	bge.w	80194ec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80197ee:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80197f0:	fb01 5303 	mla	r3, r1, r3, r5
 80197f4:	141b      	asrs	r3, r3, #16
 80197f6:	f53f ae79 	bmi.w	80194ec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80197fa:	3a01      	subs	r2, #1
 80197fc:	4293      	cmp	r3, r2
 80197fe:	f6bf ae75 	bge.w	80194ec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8019802:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019804:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8019808:	f103 0e03 	add.w	lr, r3, #3
 801980c:	f1bb 0f00 	cmp.w	fp, #0
 8019810:	dc71      	bgt.n	80198f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8019812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019814:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8019818:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801981a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801981e:	4423      	add	r3, r4
 8019820:	930c      	str	r3, [sp, #48]	; 0x30
 8019822:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019824:	2b00      	cmp	r3, #0
 8019826:	f340 81b5 	ble.w	8019b94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801982a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801982e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019830:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019834:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019838:	eef0 6a62 	vmov.f32	s13, s5
 801983c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019840:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019844:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019848:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801984c:	eef0 6a43 	vmov.f32	s13, s6
 8019850:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019854:	ee16 5a90 	vmov	r5, s13
 8019858:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801985c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019860:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019864:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019868:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801986c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019870:	ee12 2a90 	vmov	r2, s5
 8019874:	eef0 2a47 	vmov.f32	s5, s14
 8019878:	fb92 f3f3 	sdiv	r3, r2, r3
 801987c:	ee13 2a10 	vmov	r2, s6
 8019880:	932b      	str	r3, [sp, #172]	; 0xac
 8019882:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019884:	eeb0 3a67 	vmov.f32	s6, s15
 8019888:	fb92 f3f3 	sdiv	r3, r2, r3
 801988c:	932c      	str	r3, [sp, #176]	; 0xb0
 801988e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019890:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8019892:	3b01      	subs	r3, #1
 8019894:	9319      	str	r3, [sp, #100]	; 0x64
 8019896:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019898:	bf08      	it	eq
 801989a:	4613      	moveq	r3, r2
 801989c:	9309      	str	r3, [sp, #36]	; 0x24
 801989e:	e5fa      	b.n	8019496 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80198a0:	2900      	cmp	r1, #0
 80198a2:	f43f ae6c 	beq.w	801957e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80198a6:	f818 0000 	ldrb.w	r0, [r8, r0]
 80198aa:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80198ae:	900a      	str	r0, [sp, #40]	; 0x28
 80198b0:	0e00      	lsrs	r0, r0, #24
 80198b2:	9013      	str	r0, [sp, #76]	; 0x4c
 80198b4:	e663      	b.n	801957e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80198b6:	f113 0801 	adds.w	r8, r3, #1
 80198ba:	f53f af72 	bmi.w	80197a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80198be:	4540      	cmp	r0, r8
 80198c0:	f6ff af6f 	blt.w	80197a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80198c4:	f11c 0801 	adds.w	r8, ip, #1
 80198c8:	f53f af6b 	bmi.w	80197a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80198cc:	45c6      	cmp	lr, r8
 80198ce:	f6ff af68 	blt.w	80197a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80198d2:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80198d4:	b200      	sxth	r0, r0
 80198d6:	9302      	str	r3, [sp, #8]
 80198d8:	fa0f f38e 	sxth.w	r3, lr
 80198dc:	9000      	str	r0, [sp, #0]
 80198de:	9301      	str	r3, [sp, #4]
 80198e0:	4633      	mov	r3, r6
 80198e2:	981d      	ldr	r0, [sp, #116]	; 0x74
 80198e4:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80198e8:	e9cd c203 	strd	ip, r2, [sp, #12]
 80198ec:	4639      	mov	r1, r7
 80198ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80198f0:	f7ff fc74 	bl	80191dc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 80198f4:	e755      	b.n	80197a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80198f6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80198f8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80198fc:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80198fe:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8019902:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019904:	1427      	asrs	r7, r4, #16
 8019906:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019908:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801990c:	142b      	asrs	r3, r5, #16
 801990e:	fb01 7303 	mla	r3, r1, r3, r7
 8019912:	18e7      	adds	r7, r4, r3
 8019914:	5ce3      	ldrb	r3, [r4, r3]
 8019916:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801991a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801991e:	2a00      	cmp	r2, #0
 8019920:	f000 812e 	beq.w	8019b80 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 8019924:	f897 8001 	ldrb.w	r8, [r7, #1]
 8019928:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801992c:	9410      	str	r4, [sp, #64]	; 0x40
 801992e:	0e24      	lsrs	r4, r4, #24
 8019930:	9417      	str	r4, [sp, #92]	; 0x5c
 8019932:	b170      	cbz	r0, 8019952 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8019934:	eb07 0801 	add.w	r8, r7, r1
 8019938:	5c79      	ldrb	r1, [r7, r1]
 801993a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801993e:	910b      	str	r1, [sp, #44]	; 0x2c
 8019940:	0e09      	lsrs	r1, r1, #24
 8019942:	9114      	str	r1, [sp, #80]	; 0x50
 8019944:	f898 1001 	ldrb.w	r1, [r8, #1]
 8019948:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801994c:	9111      	str	r1, [sp, #68]	; 0x44
 801994e:	0e09      	lsrs	r1, r1, #24
 8019950:	9118      	str	r1, [sp, #96]	; 0x60
 8019952:	b292      	uxth	r2, r2
 8019954:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8019956:	b280      	uxth	r0, r0
 8019958:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801995a:	fb02 f900 	mul.w	r9, r2, r0
 801995e:	0112      	lsls	r2, r2, #4
 8019960:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8019964:	eba2 0809 	sub.w	r8, r2, r9
 8019968:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801996c:	b280      	uxth	r0, r0
 801996e:	fa1f f888 	uxth.w	r8, r8
 8019972:	1a12      	subs	r2, r2, r0
 8019974:	fb08 f101 	mul.w	r1, r8, r1
 8019978:	b292      	uxth	r2, r2
 801997a:	fb02 110c 	mla	r1, r2, ip, r1
 801997e:	fb00 1104 	mla	r1, r0, r4, r1
 8019982:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8019984:	fb09 1104 	mla	r1, r9, r4, r1
 8019988:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801998c:	2900      	cmp	r1, #0
 801998e:	f000 80ec 	beq.w	8019b6a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8019992:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8019996:	d019      	beq.n	80199cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 8019998:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801999c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80199a0:	fb0c fa0a 	mul.w	sl, ip, sl
 80199a4:	fb0c fc03 	mul.w	ip, ip, r3
 80199a8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80199ac:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80199b0:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80199b4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80199b8:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80199bc:	4453      	add	r3, sl
 80199be:	0a3f      	lsrs	r7, r7, #8
 80199c0:	0a1b      	lsrs	r3, r3, #8
 80199c2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80199c6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80199ca:	433b      	orrs	r3, r7
 80199cc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80199ce:	2cff      	cmp	r4, #255	; 0xff
 80199d0:	d020      	beq.n	8019a14 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 80199d2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80199d4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80199d8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80199da:	4367      	muls	r7, r4
 80199dc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80199de:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80199e2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80199e6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80199e8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80199ec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80199f0:	fb04 fa0a 	mul.w	sl, r4, sl
 80199f4:	44bc      	add	ip, r7
 80199f6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80199fa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80199fe:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019a02:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019a06:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019a0a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019a0e:	ea4c 040a 	orr.w	r4, ip, sl
 8019a12:	9410      	str	r4, [sp, #64]	; 0x40
 8019a14:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019a16:	2cff      	cmp	r4, #255	; 0xff
 8019a18:	d020      	beq.n	8019a5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 8019a1a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8019a1c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019a20:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019a22:	4367      	muls	r7, r4
 8019a24:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8019a26:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8019a2a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019a2e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019a30:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8019a34:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019a38:	fb04 fa0a 	mul.w	sl, r4, sl
 8019a3c:	44bc      	add	ip, r7
 8019a3e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8019a42:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019a46:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019a4a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019a4e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019a52:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019a56:	ea4c 040a 	orr.w	r4, ip, sl
 8019a5a:	940b      	str	r4, [sp, #44]	; 0x2c
 8019a5c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8019a5e:	2cff      	cmp	r4, #255	; 0xff
 8019a60:	d020      	beq.n	8019aa4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8019a62:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019a64:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019a68:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8019a6a:	4367      	muls	r7, r4
 8019a6c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019a6e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8019a72:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019a76:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8019a78:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8019a7c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019a80:	fb04 fa0a 	mul.w	sl, r4, sl
 8019a84:	44bc      	add	ip, r7
 8019a86:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8019a8a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019a8e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019a92:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019a96:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019a9a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019a9e:	ea4c 040a 	orr.w	r4, ip, sl
 8019aa2:	9411      	str	r4, [sp, #68]	; 0x44
 8019aa4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019aa6:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8019aaa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019aae:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019ab2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8019ab4:	fb08 f707 	mul.w	r7, r8, r7
 8019ab8:	fb02 770c 	mla	r7, r2, ip, r7
 8019abc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019ac0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019ac2:	fb00 770c 	mla	r7, r0, ip, r7
 8019ac6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019aca:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019acc:	fb09 770c 	mla	r7, r9, ip, r7
 8019ad0:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8019ad4:	fb08 f80c 	mul.w	r8, r8, ip
 8019ad8:	0a3f      	lsrs	r7, r7, #8
 8019ada:	fb02 8303 	mla	r3, r2, r3, r8
 8019ade:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019ae0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8019ae4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8019ae8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019aea:	fb00 330a 	mla	r3, r0, sl, r3
 8019aee:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8019af2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8019af4:	fb09 3c0c 	mla	ip, r9, ip, r3
 8019af8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019afa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019afe:	434b      	muls	r3, r1
 8019b00:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8019b04:	1c59      	adds	r1, r3, #1
 8019b06:	ea47 070c 	orr.w	r7, r7, ip
 8019b0a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8019b0e:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8019b12:	b2fa      	uxtb	r2, r7
 8019b14:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8019b18:	fb12 f200 	smulbb	r2, r2, r0
 8019b1c:	b2c9      	uxtb	r1, r1
 8019b1e:	fb03 2301 	mla	r3, r3, r1, r2
 8019b22:	b29b      	uxth	r3, r3
 8019b24:	1c5a      	adds	r2, r3, #1
 8019b26:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019b2a:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8019b2e:	fb12 f201 	smulbb	r2, r2, r1
 8019b32:	121b      	asrs	r3, r3, #8
 8019b34:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8019b38:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8019b3c:	0c3f      	lsrs	r7, r7, #16
 8019b3e:	fb03 2300 	mla	r3, r3, r0, r2
 8019b42:	b29b      	uxth	r3, r3
 8019b44:	1c5a      	adds	r2, r3, #1
 8019b46:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019b4a:	121b      	asrs	r3, r3, #8
 8019b4c:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8019b50:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8019b54:	fb13 f101 	smulbb	r1, r3, r1
 8019b58:	fb07 1700 	mla	r7, r7, r0, r1
 8019b5c:	b2bf      	uxth	r7, r7
 8019b5e:	1c7b      	adds	r3, r7, #1
 8019b60:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8019b64:	123f      	asrs	r7, r7, #8
 8019b66:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8019b6a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8019b6c:	f10e 0e03 	add.w	lr, lr, #3
 8019b70:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8019b72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019b76:	441a      	add	r2, r3
 8019b78:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019b7a:	9229      	str	r2, [sp, #164]	; 0xa4
 8019b7c:	441d      	add	r5, r3
 8019b7e:	e645      	b.n	801980c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8019b80:	2800      	cmp	r0, #0
 8019b82:	f43f aee6 	beq.w	8019952 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8019b86:	5c79      	ldrb	r1, [r7, r1]
 8019b88:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8019b8c:	910b      	str	r1, [sp, #44]	; 0x2c
 8019b8e:	0e09      	lsrs	r1, r1, #24
 8019b90:	9114      	str	r1, [sp, #80]	; 0x50
 8019b92:	e6de      	b.n	8019952 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8019b94:	b01f      	add	sp, #124	; 0x7c
 8019b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019b9a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8019b9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b9e:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 8019ba2:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8019ba6:	2d00      	cmp	r5, #0
 8019ba8:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8019bac:	fb05 700e 	mla	r0, r5, lr, r7
 8019bb0:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8019bb4:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 8019bb8:	eb02 0800 	add.w	r8, r2, r0
 8019bbc:	f2c0 8105 	blt.w	8019dca <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8019bc0:	45a9      	cmp	r9, r5
 8019bc2:	f340 8102 	ble.w	8019dca <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8019bc6:	2f00      	cmp	r7, #0
 8019bc8:	f2c0 80fd 	blt.w	8019dc6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8019bcc:	45be      	cmp	lr, r7
 8019bce:	f340 80fa 	ble.w	8019dc6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8019bd2:	5c12      	ldrb	r2, [r2, r0]
 8019bd4:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8019bd8:	1c7a      	adds	r2, r7, #1
 8019bda:	f100 80f9 	bmi.w	8019dd0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8019bde:	4596      	cmp	lr, r2
 8019be0:	f340 80f6 	ble.w	8019dd0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8019be4:	2c00      	cmp	r4, #0
 8019be6:	f000 80f5 	beq.w	8019dd4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 8019bea:	f898 2001 	ldrb.w	r2, [r8, #1]
 8019bee:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8019bf2:	3501      	adds	r5, #1
 8019bf4:	f100 80f2 	bmi.w	8019ddc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8019bf8:	45a9      	cmp	r9, r5
 8019bfa:	f340 80ef 	ble.w	8019ddc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8019bfe:	f1bc 0f00 	cmp.w	ip, #0
 8019c02:	f000 80ee 	beq.w	8019de2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 8019c06:	2f00      	cmp	r7, #0
 8019c08:	f2c0 80e6 	blt.w	8019dd8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8019c0c:	45be      	cmp	lr, r7
 8019c0e:	f340 80e3 	ble.w	8019dd8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8019c12:	f818 200e 	ldrb.w	r2, [r8, lr]
 8019c16:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8019c1a:	3701      	adds	r7, #1
 8019c1c:	f100 80e4 	bmi.w	8019de8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8019c20:	45be      	cmp	lr, r7
 8019c22:	f340 80e1 	ble.w	8019de8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8019c26:	2c00      	cmp	r4, #0
 8019c28:	f000 80e0 	beq.w	8019dec <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 8019c2c:	44c6      	add	lr, r8
 8019c2e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8019c32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8019c36:	b2a3      	uxth	r3, r4
 8019c38:	fa1f fc8c 	uxth.w	ip, ip
 8019c3c:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8019c40:	fb0c fe03 	mul.w	lr, ip, r3
 8019c44:	011b      	lsls	r3, r3, #4
 8019c46:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8019c4a:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 8019c4e:	eba3 070e 	sub.w	r7, r3, lr
 8019c52:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8019c56:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8019c5a:	fa1f f48c 	uxth.w	r4, ip
 8019c5e:	b2bf      	uxth	r7, r7
 8019c60:	1b1b      	subs	r3, r3, r4
 8019c62:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8019c66:	fb07 fc0a 	mul.w	ip, r7, sl
 8019c6a:	b29b      	uxth	r3, r3
 8019c6c:	fb03 cc0b 	mla	ip, r3, fp, ip
 8019c70:	9300      	str	r3, [sp, #0]
 8019c72:	fb04 cc09 	mla	ip, r4, r9, ip
 8019c76:	fb0e cc08 	mla	ip, lr, r8, ip
 8019c7a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8019c7e:	9301      	str	r3, [sp, #4]
 8019c80:	2b00      	cmp	r3, #0
 8019c82:	f000 809d 	beq.w	8019dc0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 8019c86:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8019c8a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019c8e:	fb0b fc0c 	mul.w	ip, fp, ip
 8019c92:	fb0b f606 	mul.w	r6, fp, r6
 8019c96:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8019c9a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8019c9e:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8019ca2:	44dc      	add	ip, fp
 8019ca4:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 8019ca8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8019cac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019cb0:	fb0a fb0b 	mul.w	fp, sl, fp
 8019cb4:	fb0a fa00 	mul.w	sl, sl, r0
 8019cb8:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8019cbc:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8019cc0:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8019cc4:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8019cc8:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8019ccc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019cd0:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8019cd4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019cd8:	0a36      	lsrs	r6, r6, #8
 8019cda:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019cde:	44dc      	add	ip, fp
 8019ce0:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8019ce4:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8019ce8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019cec:	fb09 fb0b 	mul.w	fp, r9, fp
 8019cf0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019cf4:	fb09 f905 	mul.w	r9, r9, r5
 8019cf8:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8019cfc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019d00:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8019d04:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019d08:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8019d0c:	fb0c fc07 	mul.w	ip, ip, r7
 8019d10:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8019d14:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8019d18:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8019d1c:	4458      	add	r0, fp
 8019d1e:	fb08 f505 	mul.w	r5, r8, r5
 8019d22:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8019d26:	fb08 f802 	mul.w	r8, r8, r2
 8019d2a:	0a00      	lsrs	r0, r0, #8
 8019d2c:	0a2a      	lsrs	r2, r5, #8
 8019d2e:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8019d32:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8019d36:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8019d3a:	4415      	add	r5, r2
 8019d3c:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8019d40:	0a2d      	lsrs	r5, r5, #8
 8019d42:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8019d46:	9a00      	ldr	r2, [sp, #0]
 8019d48:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8019d4c:	fb03 cc02 	mla	ip, r3, r2, ip
 8019d50:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8019d54:	9b01      	ldr	r3, [sp, #4]
 8019d56:	fb05 c50e 	mla	r5, r5, lr, ip
 8019d5a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8019d5e:	43db      	mvns	r3, r3
 8019d60:	fb00 5004 	mla	r0, r0, r4, r5
 8019d64:	b2db      	uxtb	r3, r3
 8019d66:	0a00      	lsrs	r0, r0, #8
 8019d68:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8019d6c:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 8019d70:	4378      	muls	r0, r7
 8019d72:	fb02 0006 	mla	r0, r2, r6, r0
 8019d76:	780a      	ldrb	r2, [r1, #0]
 8019d78:	fb0e 0e08 	mla	lr, lr, r8, r0
 8019d7c:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 8019d80:	fb04 e000 	mla	r0, r4, r0, lr
 8019d84:	fb02 f403 	mul.w	r4, r2, r3
 8019d88:	0a00      	lsrs	r0, r0, #8
 8019d8a:	1c62      	adds	r2, r4, #1
 8019d8c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8019d90:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8019d94:	4328      	orrs	r0, r5
 8019d96:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8019d9a:	700a      	strb	r2, [r1, #0]
 8019d9c:	784a      	ldrb	r2, [r1, #1]
 8019d9e:	435a      	muls	r2, r3
 8019da0:	1c54      	adds	r4, r2, #1
 8019da2:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8019da6:	0a02      	lsrs	r2, r0, #8
 8019da8:	0c00      	lsrs	r0, r0, #16
 8019daa:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8019dae:	704a      	strb	r2, [r1, #1]
 8019db0:	788a      	ldrb	r2, [r1, #2]
 8019db2:	4353      	muls	r3, r2
 8019db4:	1c5a      	adds	r2, r3, #1
 8019db6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019dba:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8019dbe:	7088      	strb	r0, [r1, #2]
 8019dc0:	b003      	add	sp, #12
 8019dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019dc6:	2600      	movs	r6, #0
 8019dc8:	e706      	b.n	8019bd8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 8019dca:	2000      	movs	r0, #0
 8019dcc:	4606      	mov	r6, r0
 8019dce:	e710      	b.n	8019bf2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8019dd0:	2000      	movs	r0, #0
 8019dd2:	e70e      	b.n	8019bf2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8019dd4:	4620      	mov	r0, r4
 8019dd6:	e70c      	b.n	8019bf2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8019dd8:	2500      	movs	r5, #0
 8019dda:	e71e      	b.n	8019c1a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 8019ddc:	2200      	movs	r2, #0
 8019dde:	4615      	mov	r5, r2
 8019de0:	e729      	b.n	8019c36 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8019de2:	4662      	mov	r2, ip
 8019de4:	4665      	mov	r5, ip
 8019de6:	e726      	b.n	8019c36 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8019de8:	2200      	movs	r2, #0
 8019dea:	e724      	b.n	8019c36 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8019dec:	4622      	mov	r2, r4
 8019dee:	e722      	b.n	8019c36 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

08019df0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019df4:	b09b      	sub	sp, #108	; 0x6c
 8019df6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019dfa:	9218      	str	r2, [sp, #96]	; 0x60
 8019dfc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8019dfe:	9019      	str	r0, [sp, #100]	; 0x64
 8019e00:	9116      	str	r1, [sp, #88]	; 0x58
 8019e02:	6850      	ldr	r0, [r2, #4]
 8019e04:	9307      	str	r3, [sp, #28]
 8019e06:	6812      	ldr	r2, [r2, #0]
 8019e08:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8019e0a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8019e0e:	fb00 1303 	mla	r3, r0, r3, r1
 8019e12:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019e16:	18d3      	adds	r3, r2, r3
 8019e18:	930a      	str	r3, [sp, #40]	; 0x28
 8019e1a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019e1c:	681b      	ldr	r3, [r3, #0]
 8019e1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8019e20:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019e22:	685e      	ldr	r6, [r3, #4]
 8019e24:	3604      	adds	r6, #4
 8019e26:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8019e28:	2b00      	cmp	r3, #0
 8019e2a:	dc03      	bgt.n	8019e34 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8019e2c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019e2e:	2b00      	cmp	r3, #0
 8019e30:	f340 834f 	ble.w	801a4d2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8019e34:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019e36:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8019e3a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8019e3e:	1e48      	subs	r0, r1, #1
 8019e40:	1e57      	subs	r7, r2, #1
 8019e42:	9b07      	ldr	r3, [sp, #28]
 8019e44:	2b00      	cmp	r3, #0
 8019e46:	f340 8178 	ble.w	801a13a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8019e4a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8019e4c:	142b      	asrs	r3, r5, #16
 8019e4e:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8019e52:	d406      	bmi.n	8019e62 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019e54:	4584      	cmp	ip, r0
 8019e56:	da04      	bge.n	8019e62 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019e58:	2b00      	cmp	r3, #0
 8019e5a:	db02      	blt.n	8019e62 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019e5c:	42bb      	cmp	r3, r7
 8019e5e:	f2c0 816d 	blt.w	801a13c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8019e62:	f11c 0c01 	adds.w	ip, ip, #1
 8019e66:	f100 815b 	bmi.w	801a120 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8019e6a:	4561      	cmp	r1, ip
 8019e6c:	f2c0 8158 	blt.w	801a120 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8019e70:	3301      	adds	r3, #1
 8019e72:	f100 8155 	bmi.w	801a120 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8019e76:	429a      	cmp	r2, r3
 8019e78:	f2c0 8152 	blt.w	801a120 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8019e7c:	9b07      	ldr	r3, [sp, #28]
 8019e7e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8019e80:	9317      	str	r3, [sp, #92]	; 0x5c
 8019e82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019e84:	2b00      	cmp	r3, #0
 8019e86:	f340 8178 	ble.w	801a17a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8019e8a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8019e8c:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8019e90:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8019e94:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8019e98:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019e9a:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8019e9e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8019ea0:	141b      	asrs	r3, r3, #16
 8019ea2:	f100 81ba 	bmi.w	801a21a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8019ea6:	f101 38ff 	add.w	r8, r1, #4294967295
 8019eaa:	4543      	cmp	r3, r8
 8019eac:	f280 81b5 	bge.w	801a21a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8019eb0:	f1bc 0f00 	cmp.w	ip, #0
 8019eb4:	f2c0 81b1 	blt.w	801a21a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8019eb8:	f10e 38ff 	add.w	r8, lr, #4294967295
 8019ebc:	45c4      	cmp	ip, r8
 8019ebe:	f280 81ac 	bge.w	801a21a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8019ec2:	b209      	sxth	r1, r1
 8019ec4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019ec6:	fb0c 3301 	mla	r3, ip, r1, r3
 8019eca:	eb04 0803 	add.w	r8, r4, r3
 8019ece:	5ce3      	ldrb	r3, [r4, r3]
 8019ed0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8019ed4:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8019ed8:	2a00      	cmp	r2, #0
 8019eda:	f000 8193 	beq.w	801a204 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 8019ede:	f898 c001 	ldrb.w	ip, [r8, #1]
 8019ee2:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8019ee6:	940b      	str	r4, [sp, #44]	; 0x2c
 8019ee8:	0e24      	lsrs	r4, r4, #24
 8019eea:	9412      	str	r4, [sp, #72]	; 0x48
 8019eec:	b178      	cbz	r0, 8019f0e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8019eee:	eb08 0c01 	add.w	ip, r8, r1
 8019ef2:	f818 1001 	ldrb.w	r1, [r8, r1]
 8019ef6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8019efa:	9108      	str	r1, [sp, #32]
 8019efc:	0e09      	lsrs	r1, r1, #24
 8019efe:	9110      	str	r1, [sp, #64]	; 0x40
 8019f00:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8019f04:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8019f08:	910c      	str	r1, [sp, #48]	; 0x30
 8019f0a:	0e09      	lsrs	r1, r1, #24
 8019f0c:	9113      	str	r1, [sp, #76]	; 0x4c
 8019f0e:	b292      	uxth	r2, r2
 8019f10:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019f12:	b280      	uxth	r0, r0
 8019f14:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019f16:	fb02 f900 	mul.w	r9, r2, r0
 8019f1a:	0112      	lsls	r2, r2, #4
 8019f1c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8019f20:	eba2 0809 	sub.w	r8, r2, r9
 8019f24:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8019f28:	b280      	uxth	r0, r0
 8019f2a:	fa1f f888 	uxth.w	r8, r8
 8019f2e:	1a12      	subs	r2, r2, r0
 8019f30:	fb08 f101 	mul.w	r1, r8, r1
 8019f34:	b292      	uxth	r2, r2
 8019f36:	fb02 110e 	mla	r1, r2, lr, r1
 8019f3a:	fb00 1104 	mla	r1, r0, r4, r1
 8019f3e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019f40:	fb09 1104 	mla	r1, r9, r4, r1
 8019f44:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8019f48:	2900      	cmp	r1, #0
 8019f4a:	f000 80de 	beq.w	801a10a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8019f4e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8019f52:	d01b      	beq.n	8019f8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8019f54:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8019f58:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019f5c:	fb0e fa0a 	mul.w	sl, lr, sl
 8019f60:	fb0e fe03 	mul.w	lr, lr, r3
 8019f64:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8019f68:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8019f6c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8019f70:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019f74:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8019f78:	4453      	add	r3, sl
 8019f7a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019f7e:	0a1b      	lsrs	r3, r3, #8
 8019f80:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8019f84:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019f88:	ea43 030c 	orr.w	r3, r3, ip
 8019f8c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019f8e:	2cff      	cmp	r4, #255	; 0xff
 8019f90:	d021      	beq.n	8019fd6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8019f92:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8019f94:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019f98:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019f9a:	fb04 fb0b 	mul.w	fp, r4, fp
 8019f9e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8019fa0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019fa4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019fa6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019faa:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019fae:	fb04 fa0a 	mul.w	sl, r4, sl
 8019fb2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019fb6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019fba:	44de      	add	lr, fp
 8019fbc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019fc0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019fc4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019fc8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019fcc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019fd0:	ea4e 040a 	orr.w	r4, lr, sl
 8019fd4:	940b      	str	r4, [sp, #44]	; 0x2c
 8019fd6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019fd8:	2cff      	cmp	r4, #255	; 0xff
 8019fda:	d021      	beq.n	801a020 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8019fdc:	9c08      	ldr	r4, [sp, #32]
 8019fde:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019fe2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019fe4:	fb04 fb0b 	mul.w	fp, r4, fp
 8019fe8:	9c08      	ldr	r4, [sp, #32]
 8019fea:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019fee:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019ff0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019ff4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019ff8:	fb04 fa0a 	mul.w	sl, r4, sl
 8019ffc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a000:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a004:	44de      	add	lr, fp
 801a006:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a00a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a00e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a012:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a016:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a01a:	ea4e 040a 	orr.w	r4, lr, sl
 801a01e:	9408      	str	r4, [sp, #32]
 801a020:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a022:	2cff      	cmp	r4, #255	; 0xff
 801a024:	d021      	beq.n	801a06a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801a026:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a028:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a02c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a02e:	fb04 fb0b 	mul.w	fp, r4, fp
 801a032:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a034:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a038:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a03a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a03e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a042:	fb04 fa0a 	mul.w	sl, r4, sl
 801a046:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a04a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a04e:	44de      	add	lr, fp
 801a050:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a054:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a058:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a05c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a060:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a064:	ea4e 040a 	orr.w	r4, lr, sl
 801a068:	940c      	str	r4, [sp, #48]	; 0x30
 801a06a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a06c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801a070:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a074:	43c9      	mvns	r1, r1
 801a076:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a07a:	9c08      	ldr	r4, [sp, #32]
 801a07c:	b2c9      	uxtb	r1, r1
 801a07e:	fb08 fc0c 	mul.w	ip, r8, ip
 801a082:	fb02 cc0e 	mla	ip, r2, lr, ip
 801a086:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a08a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a08c:	fb00 cc0e 	mla	ip, r0, lr, ip
 801a090:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a094:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a096:	fb09 cc0e 	mla	ip, r9, lr, ip
 801a09a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801a09e:	fb08 f80e 	mul.w	r8, r8, lr
 801a0a2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a0a6:	fb02 8303 	mla	r3, r2, r3, r8
 801a0aa:	9a08      	ldr	r2, [sp, #32]
 801a0ac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a0b0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801a0b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a0b6:	fb00 330a 	mla	r3, r0, sl, r3
 801a0ba:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801a0be:	fb09 3900 	mla	r9, r9, r0, r3
 801a0c2:	783b      	ldrb	r3, [r7, #0]
 801a0c4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801a0c8:	fb03 f201 	mul.w	r2, r3, r1
 801a0cc:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801a0d0:	1c53      	adds	r3, r2, #1
 801a0d2:	ea4c 0c09 	orr.w	ip, ip, r9
 801a0d6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801a0da:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801a0de:	703b      	strb	r3, [r7, #0]
 801a0e0:	787b      	ldrb	r3, [r7, #1]
 801a0e2:	434b      	muls	r3, r1
 801a0e4:	1c5a      	adds	r2, r3, #1
 801a0e6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801a0ea:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801a0ee:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801a0f2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801a0f6:	707b      	strb	r3, [r7, #1]
 801a0f8:	78bb      	ldrb	r3, [r7, #2]
 801a0fa:	4359      	muls	r1, r3
 801a0fc:	1c4b      	adds	r3, r1, #1
 801a0fe:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801a102:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801a106:	f887 c002 	strb.w	ip, [r7, #2]
 801a10a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a10c:	3703      	adds	r7, #3
 801a10e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801a110:	441a      	add	r2, r3
 801a112:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a114:	441d      	add	r5, r3
 801a116:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a118:	9225      	str	r2, [sp, #148]	; 0x94
 801a11a:	3b01      	subs	r3, #1
 801a11c:	9317      	str	r3, [sp, #92]	; 0x5c
 801a11e:	e6b0      	b.n	8019e82 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801a120:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a122:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801a124:	441c      	add	r4, r3
 801a126:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a128:	441d      	add	r5, r3
 801a12a:	9b07      	ldr	r3, [sp, #28]
 801a12c:	9425      	str	r4, [sp, #148]	; 0x94
 801a12e:	3b01      	subs	r3, #1
 801a130:	9307      	str	r3, [sp, #28]
 801a132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a134:	3303      	adds	r3, #3
 801a136:	930a      	str	r3, [sp, #40]	; 0x28
 801a138:	e683      	b.n	8019e42 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801a13a:	d026      	beq.n	801a18a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 801a13c:	9b07      	ldr	r3, [sp, #28]
 801a13e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801a140:	3b01      	subs	r3, #1
 801a142:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801a144:	fb00 4003 	mla	r0, r0, r3, r4
 801a148:	1400      	asrs	r0, r0, #16
 801a14a:	f53f ae97 	bmi.w	8019e7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801a14e:	3901      	subs	r1, #1
 801a150:	4288      	cmp	r0, r1
 801a152:	f6bf ae93 	bge.w	8019e7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801a156:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801a158:	fb01 5303 	mla	r3, r1, r3, r5
 801a15c:	141b      	asrs	r3, r3, #16
 801a15e:	f53f ae8d 	bmi.w	8019e7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801a162:	3a01      	subs	r2, #1
 801a164:	4293      	cmp	r3, r2
 801a166:	f6bf ae89 	bge.w	8019e7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801a16a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a16c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801a170:	f103 0e03 	add.w	lr, r3, #3
 801a174:	f1bb 0f00 	cmp.w	fp, #0
 801a178:	dc6d      	bgt.n	801a256 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 801a17a:	9b07      	ldr	r3, [sp, #28]
 801a17c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801a180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a182:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a186:	4423      	add	r3, r4
 801a188:	930a      	str	r3, [sp, #40]	; 0x28
 801a18a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a18c:	2b00      	cmp	r3, #0
 801a18e:	f340 81a0 	ble.w	801a4d2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801a192:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a196:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a198:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a19c:	eeb0 6a62 	vmov.f32	s12, s5
 801a1a0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a1a4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a1a8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a1ac:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 801a1b0:	eeb0 6a43 	vmov.f32	s12, s6
 801a1b4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a1b8:	ee16 5a10 	vmov	r5, s12
 801a1bc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a1c0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a1c4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a1c8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a1cc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a1d0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a1d4:	ee12 2a90 	vmov	r2, s5
 801a1d8:	eef0 2a47 	vmov.f32	s5, s14
 801a1dc:	fb92 f3f3 	sdiv	r3, r2, r3
 801a1e0:	ee13 2a10 	vmov	r2, s6
 801a1e4:	9327      	str	r3, [sp, #156]	; 0x9c
 801a1e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a1e8:	eeb0 3a67 	vmov.f32	s6, s15
 801a1ec:	fb92 f3f3 	sdiv	r3, r2, r3
 801a1f0:	9328      	str	r3, [sp, #160]	; 0xa0
 801a1f2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a1f4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a1f6:	3b01      	subs	r3, #1
 801a1f8:	9316      	str	r3, [sp, #88]	; 0x58
 801a1fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a1fc:	bf08      	it	eq
 801a1fe:	4613      	moveq	r3, r2
 801a200:	9307      	str	r3, [sp, #28]
 801a202:	e610      	b.n	8019e26 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801a204:	2800      	cmp	r0, #0
 801a206:	f43f ae82 	beq.w	8019f0e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801a20a:	f818 1001 	ldrb.w	r1, [r8, r1]
 801a20e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a212:	9108      	str	r1, [sp, #32]
 801a214:	0e09      	lsrs	r1, r1, #24
 801a216:	9110      	str	r1, [sp, #64]	; 0x40
 801a218:	e679      	b.n	8019f0e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801a21a:	f113 0801 	adds.w	r8, r3, #1
 801a21e:	f53f af74 	bmi.w	801a10a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801a222:	4541      	cmp	r1, r8
 801a224:	f6ff af71 	blt.w	801a10a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801a228:	f11c 0801 	adds.w	r8, ip, #1
 801a22c:	f53f af6d 	bmi.w	801a10a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801a230:	45c6      	cmp	lr, r8
 801a232:	f6ff af6a 	blt.w	801a10a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801a236:	b209      	sxth	r1, r1
 801a238:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801a23c:	fa0f f38e 	sxth.w	r3, lr
 801a240:	9100      	str	r1, [sp, #0]
 801a242:	4639      	mov	r1, r7
 801a244:	9301      	str	r3, [sp, #4]
 801a246:	4633      	mov	r3, r6
 801a248:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801a24c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a24e:	9819      	ldr	r0, [sp, #100]	; 0x64
 801a250:	f7ff fca3 	bl	8019b9a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801a254:	e759      	b.n	801a10a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801a256:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a258:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801a25c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801a25e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801a262:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a264:	1427      	asrs	r7, r4, #16
 801a266:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a268:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a26c:	142b      	asrs	r3, r5, #16
 801a26e:	fb01 7303 	mla	r3, r1, r3, r7
 801a272:	18e7      	adds	r7, r4, r3
 801a274:	5ce3      	ldrb	r3, [r4, r3]
 801a276:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801a27a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801a27e:	2a00      	cmp	r2, #0
 801a280:	f000 811d 	beq.w	801a4be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 801a284:	f897 8001 	ldrb.w	r8, [r7, #1]
 801a288:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801a28c:	940d      	str	r4, [sp, #52]	; 0x34
 801a28e:	0e24      	lsrs	r4, r4, #24
 801a290:	9414      	str	r4, [sp, #80]	; 0x50
 801a292:	b170      	cbz	r0, 801a2b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801a294:	eb07 0801 	add.w	r8, r7, r1
 801a298:	5c79      	ldrb	r1, [r7, r1]
 801a29a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a29e:	9109      	str	r1, [sp, #36]	; 0x24
 801a2a0:	0e09      	lsrs	r1, r1, #24
 801a2a2:	9111      	str	r1, [sp, #68]	; 0x44
 801a2a4:	f898 1001 	ldrb.w	r1, [r8, #1]
 801a2a8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a2ac:	910e      	str	r1, [sp, #56]	; 0x38
 801a2ae:	0e09      	lsrs	r1, r1, #24
 801a2b0:	9115      	str	r1, [sp, #84]	; 0x54
 801a2b2:	b292      	uxth	r2, r2
 801a2b4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a2b6:	b280      	uxth	r0, r0
 801a2b8:	fb02 f900 	mul.w	r9, r2, r0
 801a2bc:	0112      	lsls	r2, r2, #4
 801a2be:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801a2c2:	eba2 0809 	sub.w	r8, r2, r9
 801a2c6:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801a2ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a2cc:	b280      	uxth	r0, r0
 801a2ce:	fa1f f888 	uxth.w	r8, r8
 801a2d2:	1a09      	subs	r1, r1, r0
 801a2d4:	fb08 f202 	mul.w	r2, r8, r2
 801a2d8:	b289      	uxth	r1, r1
 801a2da:	fb01 220c 	mla	r2, r1, ip, r2
 801a2de:	fb00 2204 	mla	r2, r0, r4, r2
 801a2e2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a2e4:	fb09 2204 	mla	r2, r9, r4, r2
 801a2e8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801a2ec:	2a00      	cmp	r2, #0
 801a2ee:	f000 80db 	beq.w	801a4a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801a2f2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801a2f6:	d019      	beq.n	801a32c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 801a2f8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801a2fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a300:	fb0c fa0a 	mul.w	sl, ip, sl
 801a304:	fb0c fc03 	mul.w	ip, ip, r3
 801a308:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801a30c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a310:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801a314:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a318:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801a31c:	4453      	add	r3, sl
 801a31e:	0a3f      	lsrs	r7, r7, #8
 801a320:	0a1b      	lsrs	r3, r3, #8
 801a322:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801a326:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a32a:	433b      	orrs	r3, r7
 801a32c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a32e:	2cff      	cmp	r4, #255	; 0xff
 801a330:	d020      	beq.n	801a374 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 801a332:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a334:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a338:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a33a:	4367      	muls	r7, r4
 801a33c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a33e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a342:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a346:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a348:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a34c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a350:	fb04 fa0a 	mul.w	sl, r4, sl
 801a354:	44bc      	add	ip, r7
 801a356:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a35a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a35e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a362:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a366:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a36a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a36e:	ea4c 040a 	orr.w	r4, ip, sl
 801a372:	940d      	str	r4, [sp, #52]	; 0x34
 801a374:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a376:	2cff      	cmp	r4, #255	; 0xff
 801a378:	d020      	beq.n	801a3bc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 801a37a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a37c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a380:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a382:	4367      	muls	r7, r4
 801a384:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a386:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a38a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a38e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a390:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a394:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a398:	fb04 fa0a 	mul.w	sl, r4, sl
 801a39c:	44bc      	add	ip, r7
 801a39e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a3a2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a3a6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a3aa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a3ae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a3b2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a3b6:	ea4c 040a 	orr.w	r4, ip, sl
 801a3ba:	9409      	str	r4, [sp, #36]	; 0x24
 801a3bc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a3be:	2cff      	cmp	r4, #255	; 0xff
 801a3c0:	d020      	beq.n	801a404 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 801a3c2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a3c4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a3c8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a3ca:	4367      	muls	r7, r4
 801a3cc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a3ce:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a3d2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a3d6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a3d8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a3dc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a3e0:	fb04 fa0a 	mul.w	sl, r4, sl
 801a3e4:	44bc      	add	ip, r7
 801a3e6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a3ea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a3ee:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a3f2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a3f6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a3fa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a3fe:	ea4c 040a 	orr.w	r4, ip, sl
 801a402:	940e      	str	r4, [sp, #56]	; 0x38
 801a404:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a406:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801a40a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a40e:	43d2      	mvns	r2, r2
 801a410:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a414:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a416:	b2d2      	uxtb	r2, r2
 801a418:	fb08 f707 	mul.w	r7, r8, r7
 801a41c:	fb01 770c 	mla	r7, r1, ip, r7
 801a420:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a424:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a426:	fb00 770c 	mla	r7, r0, ip, r7
 801a42a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a42e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a430:	fb09 770c 	mla	r7, r9, ip, r7
 801a434:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801a438:	fb08 f80c 	mul.w	r8, r8, ip
 801a43c:	0a3f      	lsrs	r7, r7, #8
 801a43e:	fb01 8303 	mla	r3, r1, r3, r8
 801a442:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a444:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801a448:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801a44c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801a44e:	fb00 330a 	mla	r3, r0, sl, r3
 801a452:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801a456:	fb09 3c0c 	mla	ip, r9, ip, r3
 801a45a:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801a45e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a462:	fb03 f102 	mul.w	r1, r3, r2
 801a466:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a46a:	1c4b      	adds	r3, r1, #1
 801a46c:	ea47 070c 	orr.w	r7, r7, ip
 801a470:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801a474:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801a478:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801a47c:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 801a480:	4353      	muls	r3, r2
 801a482:	1c59      	adds	r1, r3, #1
 801a484:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801a488:	0a3b      	lsrs	r3, r7, #8
 801a48a:	0c3f      	lsrs	r7, r7, #16
 801a48c:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801a490:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801a494:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801a498:	435a      	muls	r2, r3
 801a49a:	1c53      	adds	r3, r2, #1
 801a49c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801a4a0:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801a4a4:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801a4a8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a4aa:	f10e 0e03 	add.w	lr, lr, #3
 801a4ae:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801a4b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a4b4:	441a      	add	r2, r3
 801a4b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a4b8:	9225      	str	r2, [sp, #148]	; 0x94
 801a4ba:	441d      	add	r5, r3
 801a4bc:	e65a      	b.n	801a174 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801a4be:	2800      	cmp	r0, #0
 801a4c0:	f43f aef7 	beq.w	801a2b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801a4c4:	5c79      	ldrb	r1, [r7, r1]
 801a4c6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a4ca:	9109      	str	r1, [sp, #36]	; 0x24
 801a4cc:	0e09      	lsrs	r1, r1, #24
 801a4ce:	9111      	str	r1, [sp, #68]	; 0x44
 801a4d0:	e6ef      	b.n	801a2b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801a4d2:	b01b      	add	sp, #108	; 0x6c
 801a4d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a4d8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801a4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4dc:	b08d      	sub	sp, #52	; 0x34
 801a4de:	468b      	mov	fp, r1
 801a4e0:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	; 0x5c
 801a4e4:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 801a4e8:	fb0c 5703 	mla	r7, ip, r3, r5
 801a4ec:	f1bc 0f00 	cmp.w	ip, #0
 801a4f0:	910b      	str	r1, [sp, #44]	; 0x2c
 801a4f2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801a4f6:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801a4fa:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 801a4fe:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 801a502:	eb02 0607 	add.w	r6, r2, r7
 801a506:	f89b 4000 	ldrb.w	r4, [fp]
 801a50a:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801a50e:	f89b 1002 	ldrb.w	r1, [fp, #2]
 801a512:	f2c0 80c1 	blt.w	801a698 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801a516:	45e6      	cmp	lr, ip
 801a518:	f340 80be 	ble.w	801a698 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801a51c:	2d00      	cmp	r5, #0
 801a51e:	f2c0 80b7 	blt.w	801a690 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801a522:	42ab      	cmp	r3, r5
 801a524:	f340 80b4 	ble.w	801a690 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801a528:	5dd2      	ldrb	r2, [r2, r7]
 801a52a:	9205      	str	r2, [sp, #20]
 801a52c:	7872      	ldrb	r2, [r6, #1]
 801a52e:	9206      	str	r2, [sp, #24]
 801a530:	78b2      	ldrb	r2, [r6, #2]
 801a532:	9207      	str	r2, [sp, #28]
 801a534:	1c6a      	adds	r2, r5, #1
 801a536:	f100 80b6 	bmi.w	801a6a6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801a53a:	4293      	cmp	r3, r2
 801a53c:	f340 80b3 	ble.w	801a6a6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801a540:	f1b8 0f00 	cmp.w	r8, #0
 801a544:	f000 80af 	beq.w	801a6a6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801a548:	78f2      	ldrb	r2, [r6, #3]
 801a54a:	9201      	str	r2, [sp, #4]
 801a54c:	7932      	ldrb	r2, [r6, #4]
 801a54e:	9202      	str	r2, [sp, #8]
 801a550:	7972      	ldrb	r2, [r6, #5]
 801a552:	9203      	str	r2, [sp, #12]
 801a554:	f11c 0c01 	adds.w	ip, ip, #1
 801a558:	f100 80ad 	bmi.w	801a6b6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801a55c:	45e6      	cmp	lr, ip
 801a55e:	f340 80aa 	ble.w	801a6b6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801a562:	f1ba 0f00 	cmp.w	sl, #0
 801a566:	f000 80a6 	beq.w	801a6b6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801a56a:	2d00      	cmp	r5, #0
 801a56c:	f2c0 809f 	blt.w	801a6ae <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801a570:	42ab      	cmp	r3, r5
 801a572:	f340 809c 	ble.w	801a6ae <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801a576:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801a57a:	f816 9002 	ldrb.w	r9, [r6, r2]
 801a57e:	2203      	movs	r2, #3
 801a580:	fb03 6c02 	mla	ip, r3, r2, r6
 801a584:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801a588:	f89c e002 	ldrb.w	lr, [ip, #2]
 801a58c:	9704      	str	r7, [sp, #16]
 801a58e:	3501      	adds	r5, #1
 801a590:	f100 8098 	bmi.w	801a6c4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801a594:	42ab      	cmp	r3, r5
 801a596:	f340 8095 	ble.w	801a6c4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801a59a:	f1b8 0f00 	cmp.w	r8, #0
 801a59e:	f000 8091 	beq.w	801a6c4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801a5a2:	f04f 0c03 	mov.w	ip, #3
 801a5a6:	fb13 c20c 	smlabb	r2, r3, ip, ip
 801a5aa:	5cb5      	ldrb	r5, [r6, r2]
 801a5ac:	fb03 620c 	mla	r2, r3, ip, r6
 801a5b0:	fb03 630c 	mla	r3, r3, ip, r6
 801a5b4:	7912      	ldrb	r2, [r2, #4]
 801a5b6:	795e      	ldrb	r6, [r3, #5]
 801a5b8:	fa1f f388 	uxth.w	r3, r8
 801a5bc:	fa1f fc8a 	uxth.w	ip, sl
 801a5c0:	fb03 f70c 	mul.w	r7, r3, ip
 801a5c4:	011b      	lsls	r3, r3, #4
 801a5c6:	9708      	str	r7, [sp, #32]
 801a5c8:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801a5cc:	f5c3 7a80 	rsb	sl, r3, #256	; 0x100
 801a5d0:	1bdb      	subs	r3, r3, r7
 801a5d2:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 801a5d6:	fa1f fc8c 	uxth.w	ip, ip
 801a5da:	b29b      	uxth	r3, r3
 801a5dc:	9709      	str	r7, [sp, #36]	; 0x24
 801a5de:	ebaa 0a0c 	sub.w	sl, sl, ip
 801a5e2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801a5e4:	930a      	str	r3, [sp, #40]	; 0x28
 801a5e6:	fa1f fa8a 	uxth.w	sl, sl
 801a5ea:	ea6f 0807 	mvn.w	r8, r7
 801a5ee:	9f01      	ldr	r7, [sp, #4]
 801a5f0:	435f      	muls	r7, r3
 801a5f2:	9b05      	ldr	r3, [sp, #20]
 801a5f4:	fa5f f888 	uxtb.w	r8, r8
 801a5f8:	fb0a 7703 	mla	r7, sl, r3, r7
 801a5fc:	9b08      	ldr	r3, [sp, #32]
 801a5fe:	fb14 f408 	smulbb	r4, r4, r8
 801a602:	fb0c 7709 	mla	r7, ip, r9, r7
 801a606:	fb10 f008 	smulbb	r0, r0, r8
 801a60a:	fb11 f108 	smulbb	r1, r1, r8
 801a60e:	fb03 7705 	mla	r7, r3, r5, r7
 801a612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a614:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801a618:	fb07 4703 	mla	r7, r7, r3, r4
 801a61c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a61e:	b2bf      	uxth	r7, r7
 801a620:	1c7c      	adds	r4, r7, #1
 801a622:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 801a626:	1224      	asrs	r4, r4, #8
 801a628:	f88b 4000 	strb.w	r4, [fp]
 801a62c:	9c02      	ldr	r4, [sp, #8]
 801a62e:	435c      	muls	r4, r3
 801a630:	9b06      	ldr	r3, [sp, #24]
 801a632:	fb0a 4403 	mla	r4, sl, r3, r4
 801a636:	9b04      	ldr	r3, [sp, #16]
 801a638:	fb0c 4403 	mla	r4, ip, r3, r4
 801a63c:	9b08      	ldr	r3, [sp, #32]
 801a63e:	fb03 4402 	mla	r4, r3, r2, r4
 801a642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a644:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a646:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801a64a:	fb04 0403 	mla	r4, r4, r3, r0
 801a64e:	9b03      	ldr	r3, [sp, #12]
 801a650:	435a      	muls	r2, r3
 801a652:	b2a4      	uxth	r4, r4
 801a654:	4613      	mov	r3, r2
 801a656:	9a07      	ldr	r2, [sp, #28]
 801a658:	1c60      	adds	r0, r4, #1
 801a65a:	fb0a 3a02 	mla	sl, sl, r2, r3
 801a65e:	9b08      	ldr	r3, [sp, #32]
 801a660:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 801a664:	fb0c ac0e 	mla	ip, ip, lr, sl
 801a668:	1224      	asrs	r4, r4, #8
 801a66a:	fb03 c606 	mla	r6, r3, r6, ip
 801a66e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a670:	f88b 4001 	strb.w	r4, [fp, #1]
 801a674:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801a678:	fb06 1103 	mla	r1, r6, r3, r1
 801a67c:	b289      	uxth	r1, r1
 801a67e:	1c4e      	adds	r6, r1, #1
 801a680:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801a684:	1209      	asrs	r1, r1, #8
 801a686:	f88b 1002 	strb.w	r1, [fp, #2]
 801a68a:	b00d      	add	sp, #52	; 0x34
 801a68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a690:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a694:	9405      	str	r4, [sp, #20]
 801a696:	e74d      	b.n	801a534 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 801a698:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a69c:	9401      	str	r4, [sp, #4]
 801a69e:	9405      	str	r4, [sp, #20]
 801a6a0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a6a4:	e756      	b.n	801a554 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801a6a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a6aa:	9401      	str	r4, [sp, #4]
 801a6ac:	e752      	b.n	801a554 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801a6ae:	468e      	mov	lr, r1
 801a6b0:	9004      	str	r0, [sp, #16]
 801a6b2:	46a1      	mov	r9, r4
 801a6b4:	e76b      	b.n	801a58e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 801a6b6:	460e      	mov	r6, r1
 801a6b8:	4602      	mov	r2, r0
 801a6ba:	4625      	mov	r5, r4
 801a6bc:	468e      	mov	lr, r1
 801a6be:	9004      	str	r0, [sp, #16]
 801a6c0:	46a1      	mov	r9, r4
 801a6c2:	e779      	b.n	801a5b8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 801a6c4:	460e      	mov	r6, r1
 801a6c6:	4602      	mov	r2, r0
 801a6c8:	4625      	mov	r5, r4
 801a6ca:	e775      	b.n	801a5b8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

0801a6cc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6d0:	b09f      	sub	sp, #124	; 0x7c
 801a6d2:	920e      	str	r2, [sp, #56]	; 0x38
 801a6d4:	9307      	str	r3, [sp, #28]
 801a6d6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801a6d8:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801a6dc:	901d      	str	r0, [sp, #116]	; 0x74
 801a6de:	930c      	str	r3, [sp, #48]	; 0x30
 801a6e0:	6850      	ldr	r0, [r2, #4]
 801a6e2:	910b      	str	r1, [sp, #44]	; 0x2c
 801a6e4:	6812      	ldr	r2, [r2, #0]
 801a6e6:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801a6ea:	e9dd a829 	ldrd	sl, r8, [sp, #164]	; 0xa4
 801a6ee:	fb00 1303 	mla	r3, r0, r3, r1
 801a6f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a6f6:	18d3      	adds	r3, r2, r3
 801a6f8:	9308      	str	r3, [sp, #32]
 801a6fa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a6fc:	681b      	ldr	r3, [r3, #0]
 801a6fe:	930a      	str	r3, [sp, #40]	; 0x28
 801a700:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a702:	43db      	mvns	r3, r3
 801a704:	b2db      	uxtb	r3, r3
 801a706:	9309      	str	r3, [sp, #36]	; 0x24
 801a708:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a70a:	2b00      	cmp	r3, #0
 801a70c:	dc03      	bgt.n	801a716 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801a70e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a710:	2b00      	cmp	r3, #0
 801a712:	f340 81f5 	ble.w	801ab00 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801a716:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a718:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a71c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a720:	1e48      	subs	r0, r1, #1
 801a722:	1e54      	subs	r4, r2, #1
 801a724:	9b07      	ldr	r3, [sp, #28]
 801a726:	2b00      	cmp	r3, #0
 801a728:	f340 80d5 	ble.w	801a8d6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801a72c:	ea5f 452a 	movs.w	r5, sl, asr #16
 801a730:	ea4f 4328 	mov.w	r3, r8, asr #16
 801a734:	d406      	bmi.n	801a744 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801a736:	4285      	cmp	r5, r0
 801a738:	da04      	bge.n	801a744 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801a73a:	2b00      	cmp	r3, #0
 801a73c:	db02      	blt.n	801a744 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801a73e:	42a3      	cmp	r3, r4
 801a740:	f2c0 80ca 	blt.w	801a8d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801a744:	3501      	adds	r5, #1
 801a746:	f100 80bb 	bmi.w	801a8c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801a74a:	42a9      	cmp	r1, r5
 801a74c:	f2c0 80b8 	blt.w	801a8c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801a750:	3301      	adds	r3, #1
 801a752:	f100 80b5 	bmi.w	801a8c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801a756:	429a      	cmp	r2, r3
 801a758:	f2c0 80b2 	blt.w	801a8c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801a75c:	9b07      	ldr	r3, [sp, #28]
 801a75e:	9d08      	ldr	r5, [sp, #32]
 801a760:	930d      	str	r3, [sp, #52]	; 0x34
 801a762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a764:	2b00      	cmp	r3, #0
 801a766:	f340 80d6 	ble.w	801a916 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 801a76a:	9830      	ldr	r0, [sp, #192]	; 0xc0
 801a76c:	ea4f 4428 	mov.w	r4, r8, asr #16
 801a770:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a772:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801a776:	68c6      	ldr	r6, [r0, #12]
 801a778:	ea5f 402a 	movs.w	r0, sl, asr #16
 801a77c:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801a780:	689b      	ldr	r3, [r3, #8]
 801a782:	f100 810f 	bmi.w	801a9a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801a786:	1e5f      	subs	r7, r3, #1
 801a788:	42b8      	cmp	r0, r7
 801a78a:	f280 810b 	bge.w	801a9a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801a78e:	2c00      	cmp	r4, #0
 801a790:	f2c0 8108 	blt.w	801a9a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801a794:	1e77      	subs	r7, r6, #1
 801a796:	42bc      	cmp	r4, r7
 801a798:	f280 8104 	bge.w	801a9a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801a79c:	b21b      	sxth	r3, r3
 801a79e:	fb04 0003 	mla	r0, r4, r3, r0
 801a7a2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801a7a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a7a8:	1826      	adds	r6, r4, r0
 801a7aa:	5c24      	ldrb	r4, [r4, r0]
 801a7ac:	78b7      	ldrb	r7, [r6, #2]
 801a7ae:	7870      	ldrb	r0, [r6, #1]
 801a7b0:	970f      	str	r7, [sp, #60]	; 0x3c
 801a7b2:	7977      	ldrb	r7, [r6, #5]
 801a7b4:	f896 e003 	ldrb.w	lr, [r6, #3]
 801a7b8:	f896 c004 	ldrb.w	ip, [r6, #4]
 801a7bc:	9710      	str	r7, [sp, #64]	; 0x40
 801a7be:	b1c9      	cbz	r1, 801a7f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801a7c0:	f04f 0b03 	mov.w	fp, #3
 801a7c4:	f06f 0904 	mvn.w	r9, #4
 801a7c8:	3605      	adds	r6, #5
 801a7ca:	fb13 930b 	smlabb	r3, r3, fp, r9
 801a7ce:	eb06 0b03 	add.w	fp, r6, r3
 801a7d2:	5cf3      	ldrb	r3, [r6, r3]
 801a7d4:	9311      	str	r3, [sp, #68]	; 0x44
 801a7d6:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801a7da:	9313      	str	r3, [sp, #76]	; 0x4c
 801a7dc:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801a7e0:	9315      	str	r3, [sp, #84]	; 0x54
 801a7e2:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801a7e6:	9312      	str	r3, [sp, #72]	; 0x48
 801a7e8:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801a7ec:	9314      	str	r3, [sp, #80]	; 0x50
 801a7ee:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801a7f2:	9316      	str	r3, [sp, #88]	; 0x58
 801a7f4:	b292      	uxth	r2, r2
 801a7f6:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801a7f8:	b289      	uxth	r1, r1
 801a7fa:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801a7fe:	fb02 f601 	mul.w	r6, r2, r1
 801a802:	0112      	lsls	r2, r2, #4
 801a804:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 801a808:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 801a80c:	1b92      	subs	r2, r2, r6
 801a80e:	b289      	uxth	r1, r1
 801a810:	b292      	uxth	r2, r2
 801a812:	eba9 0901 	sub.w	r9, r9, r1
 801a816:	fb02 fe0e 	mul.w	lr, r2, lr
 801a81a:	fa1f f989 	uxth.w	r9, r9
 801a81e:	fb02 fc0c 	mul.w	ip, r2, ip
 801a822:	fb09 e404 	mla	r4, r9, r4, lr
 801a826:	f895 e000 	ldrb.w	lr, [r5]
 801a82a:	fb09 c000 	mla	r0, r9, r0, ip
 801a82e:	fb01 4407 	mla	r4, r1, r7, r4
 801a832:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801a834:	fb06 4407 	mla	r4, r6, r7, r4
 801a838:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801a83a:	fb1e fe07 	smulbb	lr, lr, r7
 801a83e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801a842:	fb04 e403 	mla	r4, r4, r3, lr
 801a846:	b2a4      	uxth	r4, r4
 801a848:	f104 0e01 	add.w	lr, r4, #1
 801a84c:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 801a850:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a852:	fb01 0004 	mla	r0, r1, r4, r0
 801a856:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a858:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801a85c:	fb06 0004 	mla	r0, r6, r4, r0
 801a860:	786c      	ldrb	r4, [r5, #1]
 801a862:	f885 e000 	strb.w	lr, [r5]
 801a866:	fb14 f407 	smulbb	r4, r4, r7
 801a86a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801a86e:	fb00 4003 	mla	r0, r0, r3, r4
 801a872:	b280      	uxth	r0, r0
 801a874:	1c44      	adds	r4, r0, #1
 801a876:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801a87a:	1200      	asrs	r0, r0, #8
 801a87c:	7068      	strb	r0, [r5, #1]
 801a87e:	9810      	ldr	r0, [sp, #64]	; 0x40
 801a880:	4342      	muls	r2, r0
 801a882:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801a884:	fb09 2200 	mla	r2, r9, r0, r2
 801a888:	9815      	ldr	r0, [sp, #84]	; 0x54
 801a88a:	fb01 2100 	mla	r1, r1, r0, r2
 801a88e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801a890:	fb06 1602 	mla	r6, r6, r2, r1
 801a894:	78a9      	ldrb	r1, [r5, #2]
 801a896:	fb11 f107 	smulbb	r1, r1, r7
 801a89a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801a89e:	fb06 1303 	mla	r3, r6, r3, r1
 801a8a2:	b29b      	uxth	r3, r3
 801a8a4:	1c5e      	adds	r6, r3, #1
 801a8a6:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801a8aa:	121b      	asrs	r3, r3, #8
 801a8ac:	70ab      	strb	r3, [r5, #2]
 801a8ae:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a8b0:	3503      	adds	r5, #3
 801a8b2:	449a      	add	sl, r3
 801a8b4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a8b6:	4498      	add	r8, r3
 801a8b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a8ba:	3b01      	subs	r3, #1
 801a8bc:	930d      	str	r3, [sp, #52]	; 0x34
 801a8be:	e750      	b.n	801a762 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a8c0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a8c2:	449a      	add	sl, r3
 801a8c4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a8c6:	4498      	add	r8, r3
 801a8c8:	9b07      	ldr	r3, [sp, #28]
 801a8ca:	3b01      	subs	r3, #1
 801a8cc:	9307      	str	r3, [sp, #28]
 801a8ce:	9b08      	ldr	r3, [sp, #32]
 801a8d0:	3303      	adds	r3, #3
 801a8d2:	9308      	str	r3, [sp, #32]
 801a8d4:	e726      	b.n	801a724 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801a8d6:	d026      	beq.n	801a926 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801a8d8:	9b07      	ldr	r3, [sp, #28]
 801a8da:	982b      	ldr	r0, [sp, #172]	; 0xac
 801a8dc:	3b01      	subs	r3, #1
 801a8de:	fb00 a003 	mla	r0, r0, r3, sl
 801a8e2:	1400      	asrs	r0, r0, #16
 801a8e4:	f53f af3a 	bmi.w	801a75c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801a8e8:	3901      	subs	r1, #1
 801a8ea:	4288      	cmp	r0, r1
 801a8ec:	f6bf af36 	bge.w	801a75c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801a8f0:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801a8f2:	fb01 8303 	mla	r3, r1, r3, r8
 801a8f6:	141b      	asrs	r3, r3, #16
 801a8f8:	f53f af30 	bmi.w	801a75c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801a8fc:	3a01      	subs	r2, #1
 801a8fe:	4293      	cmp	r3, r2
 801a900:	f6bf af2c 	bge.w	801a75c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801a904:	9b08      	ldr	r3, [sp, #32]
 801a906:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801a90a:	1cdd      	adds	r5, r3, #3
 801a90c:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 801a910:	f1bc 0f00 	cmp.w	ip, #0
 801a914:	dc5f      	bgt.n	801a9d6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 801a916:	9b07      	ldr	r3, [sp, #28]
 801a918:	9a08      	ldr	r2, [sp, #32]
 801a91a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a91e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a922:	441a      	add	r2, r3
 801a924:	9208      	str	r2, [sp, #32]
 801a926:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a928:	2b00      	cmp	r3, #0
 801a92a:	f340 80e9 	ble.w	801ab00 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801a92e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a932:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a934:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a938:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a93c:	eef0 6a62 	vmov.f32	s13, s5
 801a940:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a944:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a948:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a94c:	ee16 aa90 	vmov	sl, s13
 801a950:	eef0 6a43 	vmov.f32	s13, s6
 801a954:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a958:	ee16 8a90 	vmov	r8, s13
 801a95c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a960:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a964:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a968:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a96c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a970:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a974:	ee12 2a90 	vmov	r2, s5
 801a978:	eef0 2a47 	vmov.f32	s5, s14
 801a97c:	fb92 f3f3 	sdiv	r3, r2, r3
 801a980:	ee13 2a10 	vmov	r2, s6
 801a984:	932b      	str	r3, [sp, #172]	; 0xac
 801a986:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a988:	eeb0 3a67 	vmov.f32	s6, s15
 801a98c:	fb92 f3f3 	sdiv	r3, r2, r3
 801a990:	932c      	str	r3, [sp, #176]	; 0xb0
 801a992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a994:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a996:	3b01      	subs	r3, #1
 801a998:	930b      	str	r3, [sp, #44]	; 0x2c
 801a99a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a99c:	bf08      	it	eq
 801a99e:	4613      	moveq	r3, r2
 801a9a0:	9307      	str	r3, [sp, #28]
 801a9a2:	e6b1      	b.n	801a708 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801a9a4:	1c47      	adds	r7, r0, #1
 801a9a6:	d482      	bmi.n	801a8ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801a9a8:	42bb      	cmp	r3, r7
 801a9aa:	db80      	blt.n	801a8ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801a9ac:	1c67      	adds	r7, r4, #1
 801a9ae:	f53f af7e 	bmi.w	801a8ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801a9b2:	42be      	cmp	r6, r7
 801a9b4:	f6ff af7b 	blt.w	801a8ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801a9b8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801a9ba:	b236      	sxth	r6, r6
 801a9bc:	9001      	str	r0, [sp, #4]
 801a9be:	b21b      	sxth	r3, r3
 801a9c0:	9600      	str	r6, [sp, #0]
 801a9c2:	981d      	ldr	r0, [sp, #116]	; 0x74
 801a9c4:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801a9c8:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801a9cc:	4629      	mov	r1, r5
 801a9ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a9d0:	f7ff fd82 	bl	801a4d8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801a9d4:	e76b      	b.n	801a8ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801a9d6:	9930      	ldr	r1, [sp, #192]	; 0xc0
 801a9d8:	ea4f 402a 	mov.w	r0, sl, asr #16
 801a9dc:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801a9e0:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801a9e4:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 801a9e8:	ea4f 4128 	mov.w	r1, r8, asr #16
 801a9ec:	fb07 0101 	mla	r1, r7, r1, r0
 801a9f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 801a9f2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a9f6:	1844      	adds	r4, r0, r1
 801a9f8:	5c40      	ldrb	r0, [r0, r1]
 801a9fa:	78a6      	ldrb	r6, [r4, #2]
 801a9fc:	7861      	ldrb	r1, [r4, #1]
 801a9fe:	960f      	str	r6, [sp, #60]	; 0x3c
 801aa00:	78e6      	ldrb	r6, [r4, #3]
 801aa02:	910d      	str	r1, [sp, #52]	; 0x34
 801aa04:	9610      	str	r6, [sp, #64]	; 0x40
 801aa06:	f894 9004 	ldrb.w	r9, [r4, #4]
 801aa0a:	f894 b005 	ldrb.w	fp, [r4, #5]
 801aa0e:	b192      	cbz	r2, 801aa36 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801aa10:	f06f 0604 	mvn.w	r6, #4
 801aa14:	2103      	movs	r1, #3
 801aa16:	3405      	adds	r4, #5
 801aa18:	fb17 6701 	smlabb	r7, r7, r1, r6
 801aa1c:	19e6      	adds	r6, r4, r7
 801aa1e:	5de4      	ldrb	r4, [r4, r7]
 801aa20:	9417      	str	r4, [sp, #92]	; 0x5c
 801aa22:	7874      	ldrb	r4, [r6, #1]
 801aa24:	9419      	str	r4, [sp, #100]	; 0x64
 801aa26:	78b4      	ldrb	r4, [r6, #2]
 801aa28:	941b      	str	r4, [sp, #108]	; 0x6c
 801aa2a:	78f4      	ldrb	r4, [r6, #3]
 801aa2c:	9418      	str	r4, [sp, #96]	; 0x60
 801aa2e:	7934      	ldrb	r4, [r6, #4]
 801aa30:	941a      	str	r4, [sp, #104]	; 0x68
 801aa32:	7974      	ldrb	r4, [r6, #5]
 801aa34:	941c      	str	r4, [sp, #112]	; 0x70
 801aa36:	b29b      	uxth	r3, r3
 801aa38:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801aa3a:	b292      	uxth	r2, r2
 801aa3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801aa3e:	3503      	adds	r5, #3
 801aa40:	f10c 3cff 	add.w	ip, ip, #4294967295
 801aa44:	fb03 f402 	mul.w	r4, r3, r2
 801aa48:	011b      	lsls	r3, r3, #4
 801aa4a:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801aa4e:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 801aa52:	1b1b      	subs	r3, r3, r4
 801aa54:	b292      	uxth	r2, r2
 801aa56:	b29b      	uxth	r3, r3
 801aa58:	1ab6      	subs	r6, r6, r2
 801aa5a:	435f      	muls	r7, r3
 801aa5c:	b2b6      	uxth	r6, r6
 801aa5e:	fb03 f909 	mul.w	r9, r3, r9
 801aa62:	fb03 fb0b 	mul.w	fp, r3, fp
 801aa66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801aa68:	fb06 7000 	mla	r0, r6, r0, r7
 801aa6c:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801aa6e:	fb06 bb03 	mla	fp, r6, r3, fp
 801aa72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801aa74:	fb02 0007 	mla	r0, r2, r7, r0
 801aa78:	9f18      	ldr	r7, [sp, #96]	; 0x60
 801aa7a:	fb02 bb03 	mla	fp, r2, r3, fp
 801aa7e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801aa80:	fb04 0007 	mla	r0, r4, r7, r0
 801aa84:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801aa88:	fb17 f701 	smulbb	r7, r7, r1
 801aa8c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801aa90:	990d      	ldr	r1, [sp, #52]	; 0x34
 801aa92:	fb00 700e 	mla	r0, r0, lr, r7
 801aa96:	fb06 9101 	mla	r1, r6, r1, r9
 801aa9a:	b280      	uxth	r0, r0
 801aa9c:	1c47      	adds	r7, r0, #1
 801aa9e:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801aaa2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801aaa4:	1200      	asrs	r0, r0, #8
 801aaa6:	f805 0c06 	strb.w	r0, [r5, #-6]
 801aaaa:	9819      	ldr	r0, [sp, #100]	; 0x64
 801aaac:	fb02 1100 	mla	r1, r2, r0, r1
 801aab0:	981a      	ldr	r0, [sp, #104]	; 0x68
 801aab2:	fb04 1100 	mla	r1, r4, r0, r1
 801aab6:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 801aaba:	fb04 b403 	mla	r4, r4, r3, fp
 801aabe:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801aac2:	fb10 f007 	smulbb	r0, r0, r7
 801aac6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801aaca:	fb13 f307 	smulbb	r3, r3, r7
 801aace:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801aad2:	fb01 010e 	mla	r1, r1, lr, r0
 801aad6:	fb04 340e 	mla	r4, r4, lr, r3
 801aada:	b289      	uxth	r1, r1
 801aadc:	b2a4      	uxth	r4, r4
 801aade:	1c48      	adds	r0, r1, #1
 801aae0:	1c63      	adds	r3, r4, #1
 801aae2:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801aae6:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801aaea:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801aaec:	1209      	asrs	r1, r1, #8
 801aaee:	1224      	asrs	r4, r4, #8
 801aaf0:	449a      	add	sl, r3
 801aaf2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801aaf4:	f805 1c05 	strb.w	r1, [r5, #-5]
 801aaf8:	f805 4c04 	strb.w	r4, [r5, #-4]
 801aafc:	4498      	add	r8, r3
 801aafe:	e707      	b.n	801a910 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801ab00:	b01f      	add	sp, #124	; 0x7c
 801ab02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ab06 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801ab06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab0a:	b087      	sub	sp, #28
 801ab0c:	780d      	ldrb	r5, [r1, #0]
 801ab0e:	784c      	ldrb	r4, [r1, #1]
 801ab10:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801ab14:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 801ab18:	9004      	str	r0, [sp, #16]
 801ab1a:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801ab1e:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
 801ab22:	9005      	str	r0, [sp, #20]
 801ab24:	fb06 bc03 	mla	ip, r6, r3, fp
 801ab28:	2e00      	cmp	r6, #0
 801ab2a:	7888      	ldrb	r0, [r1, #2]
 801ab2c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801ab30:	eb02 090c 	add.w	r9, r2, ip
 801ab34:	f2c0 8084 	blt.w	801ac40 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801ab38:	42b7      	cmp	r7, r6
 801ab3a:	f340 8081 	ble.w	801ac40 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801ab3e:	f1bb 0f00 	cmp.w	fp, #0
 801ab42:	db79      	blt.n	801ac38 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801ab44:	455b      	cmp	r3, fp
 801ab46:	dd77      	ble.n	801ac38 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801ab48:	f812 200c 	ldrb.w	r2, [r2, ip]
 801ab4c:	9201      	str	r2, [sp, #4]
 801ab4e:	f899 2001 	ldrb.w	r2, [r9, #1]
 801ab52:	9202      	str	r2, [sp, #8]
 801ab54:	f899 2002 	ldrb.w	r2, [r9, #2]
 801ab58:	9203      	str	r2, [sp, #12]
 801ab5a:	f11b 0201 	adds.w	r2, fp, #1
 801ab5e:	d476      	bmi.n	801ac4e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801ab60:	4293      	cmp	r3, r2
 801ab62:	dd74      	ble.n	801ac4e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801ab64:	9a04      	ldr	r2, [sp, #16]
 801ab66:	2a00      	cmp	r2, #0
 801ab68:	d071      	beq.n	801ac4e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801ab6a:	f899 8003 	ldrb.w	r8, [r9, #3]
 801ab6e:	f899 c004 	ldrb.w	ip, [r9, #4]
 801ab72:	f899 a005 	ldrb.w	sl, [r9, #5]
 801ab76:	3601      	adds	r6, #1
 801ab78:	d471      	bmi.n	801ac5e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801ab7a:	42b7      	cmp	r7, r6
 801ab7c:	dd6f      	ble.n	801ac5e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801ab7e:	9a05      	ldr	r2, [sp, #20]
 801ab80:	2a00      	cmp	r2, #0
 801ab82:	d06c      	beq.n	801ac5e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801ab84:	f1bb 0f00 	cmp.w	fp, #0
 801ab88:	db65      	blt.n	801ac56 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801ab8a:	455b      	cmp	r3, fp
 801ab8c:	dd63      	ble.n	801ac56 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801ab8e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801ab92:	f819 e002 	ldrb.w	lr, [r9, r2]
 801ab96:	2203      	movs	r2, #3
 801ab98:	fb03 9602 	mla	r6, r3, r2, r9
 801ab9c:	7877      	ldrb	r7, [r6, #1]
 801ab9e:	78b6      	ldrb	r6, [r6, #2]
 801aba0:	f11b 0b01 	adds.w	fp, fp, #1
 801aba4:	d40c      	bmi.n	801abc0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801aba6:	455b      	cmp	r3, fp
 801aba8:	dd0a      	ble.n	801abc0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801abaa:	9a04      	ldr	r2, [sp, #16]
 801abac:	b142      	cbz	r2, 801abc0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801abae:	2203      	movs	r2, #3
 801abb0:	fb13 2002 	smlabb	r0, r3, r2, r2
 801abb4:	f819 5000 	ldrb.w	r5, [r9, r0]
 801abb8:	fb03 9002 	mla	r0, r3, r2, r9
 801abbc:	7904      	ldrb	r4, [r0, #4]
 801abbe:	7940      	ldrb	r0, [r0, #5]
 801abc0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801abc4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801abc8:	fb03 fb02 	mul.w	fp, r3, r2
 801abcc:	011b      	lsls	r3, r3, #4
 801abce:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801abd2:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801abd6:	eba3 030b 	sub.w	r3, r3, fp
 801abda:	b292      	uxth	r2, r2
 801abdc:	b29b      	uxth	r3, r3
 801abde:	eba9 0902 	sub.w	r9, r9, r2
 801abe2:	9304      	str	r3, [sp, #16]
 801abe4:	fa1f f989 	uxth.w	r9, r9
 801abe8:	fb03 f808 	mul.w	r8, r3, r8
 801abec:	9b01      	ldr	r3, [sp, #4]
 801abee:	fb09 8803 	mla	r8, r9, r3, r8
 801abf2:	9b04      	ldr	r3, [sp, #16]
 801abf4:	fb03 fc0c 	mul.w	ip, r3, ip
 801abf8:	9b02      	ldr	r3, [sp, #8]
 801abfa:	fb02 880e 	mla	r8, r2, lr, r8
 801abfe:	fb09 cc03 	mla	ip, r9, r3, ip
 801ac02:	9b04      	ldr	r3, [sp, #16]
 801ac04:	fb0b 8805 	mla	r8, fp, r5, r8
 801ac08:	fb02 c707 	mla	r7, r2, r7, ip
 801ac0c:	fb03 f30a 	mul.w	r3, r3, sl
 801ac10:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ac14:	fb0b 7404 	mla	r4, fp, r4, r7
 801ac18:	f881 8000 	strb.w	r8, [r1]
 801ac1c:	1224      	asrs	r4, r4, #8
 801ac1e:	704c      	strb	r4, [r1, #1]
 801ac20:	9c03      	ldr	r4, [sp, #12]
 801ac22:	fb09 3904 	mla	r9, r9, r4, r3
 801ac26:	fb02 9206 	mla	r2, r2, r6, r9
 801ac2a:	fb0b 2000 	mla	r0, fp, r0, r2
 801ac2e:	1200      	asrs	r0, r0, #8
 801ac30:	7088      	strb	r0, [r1, #2]
 801ac32:	b007      	add	sp, #28
 801ac34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac38:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801ac3c:	9501      	str	r5, [sp, #4]
 801ac3e:	e78c      	b.n	801ab5a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 801ac40:	4682      	mov	sl, r0
 801ac42:	46a4      	mov	ip, r4
 801ac44:	46a8      	mov	r8, r5
 801ac46:	9501      	str	r5, [sp, #4]
 801ac48:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801ac4c:	e793      	b.n	801ab76 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801ac4e:	4682      	mov	sl, r0
 801ac50:	46a4      	mov	ip, r4
 801ac52:	46a8      	mov	r8, r5
 801ac54:	e78f      	b.n	801ab76 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801ac56:	4606      	mov	r6, r0
 801ac58:	4627      	mov	r7, r4
 801ac5a:	46ae      	mov	lr, r5
 801ac5c:	e7a0      	b.n	801aba0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801ac5e:	4606      	mov	r6, r0
 801ac60:	4627      	mov	r7, r4
 801ac62:	46ae      	mov	lr, r5
 801ac64:	e7ac      	b.n	801abc0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

0801ac66 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ac66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac6a:	b09b      	sub	sp, #108	; 0x6c
 801ac6c:	920b      	str	r2, [sp, #44]	; 0x2c
 801ac6e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ac70:	9019      	str	r0, [sp, #100]	; 0x64
 801ac72:	9109      	str	r1, [sp, #36]	; 0x24
 801ac74:	6850      	ldr	r0, [r2, #4]
 801ac76:	9306      	str	r3, [sp, #24]
 801ac78:	6812      	ldr	r2, [r2, #0]
 801ac7a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801ac7e:	e9dd b425 	ldrd	fp, r4, [sp, #148]	; 0x94
 801ac82:	fb00 1303 	mla	r3, r0, r3, r1
 801ac86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ac8a:	18d3      	adds	r3, r2, r3
 801ac8c:	9307      	str	r3, [sp, #28]
 801ac8e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ac90:	681b      	ldr	r3, [r3, #0]
 801ac92:	9308      	str	r3, [sp, #32]
 801ac94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac96:	2b00      	cmp	r3, #0
 801ac98:	dc03      	bgt.n	801aca2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ac9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ac9c:	2b00      	cmp	r3, #0
 801ac9e:	f340 81ab 	ble.w	801aff8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801aca2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801aca4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801aca8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801acac:	1e48      	subs	r0, r1, #1
 801acae:	1e55      	subs	r5, r2, #1
 801acb0:	9b06      	ldr	r3, [sp, #24]
 801acb2:	2b00      	cmp	r3, #0
 801acb4:	f340 80b1 	ble.w	801ae1a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801acb8:	ea5f 462b 	movs.w	r6, fp, asr #16
 801acbc:	ea4f 4324 	mov.w	r3, r4, asr #16
 801acc0:	d406      	bmi.n	801acd0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801acc2:	4286      	cmp	r6, r0
 801acc4:	da04      	bge.n	801acd0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801acc6:	2b00      	cmp	r3, #0
 801acc8:	db02      	blt.n	801acd0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801acca:	42ab      	cmp	r3, r5
 801accc:	f2c0 80a6 	blt.w	801ae1c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801acd0:	3601      	adds	r6, #1
 801acd2:	f100 8097 	bmi.w	801ae04 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801acd6:	42b1      	cmp	r1, r6
 801acd8:	f2c0 8094 	blt.w	801ae04 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801acdc:	3301      	adds	r3, #1
 801acde:	f100 8091 	bmi.w	801ae04 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801ace2:	429a      	cmp	r2, r3
 801ace4:	f2c0 808e 	blt.w	801ae04 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801ace8:	9b06      	ldr	r3, [sp, #24]
 801acea:	9e07      	ldr	r6, [sp, #28]
 801acec:	930a      	str	r3, [sp, #40]	; 0x28
 801acee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801acf0:	2b00      	cmp	r3, #0
 801acf2:	f340 80b0 	ble.w	801ae56 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801acf6:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801acf8:	1425      	asrs	r5, r4, #16
 801acfa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801acfc:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801ad00:	68c7      	ldr	r7, [r0, #12]
 801ad02:	ea5f 402b 	movs.w	r0, fp, asr #16
 801ad06:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801ad0a:	689b      	ldr	r3, [r3, #8]
 801ad0c:	f100 80ea 	bmi.w	801aee4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ad10:	f103 3cff 	add.w	ip, r3, #4294967295
 801ad14:	4560      	cmp	r0, ip
 801ad16:	f280 80e5 	bge.w	801aee4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ad1a:	2d00      	cmp	r5, #0
 801ad1c:	f2c0 80e2 	blt.w	801aee4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ad20:	f107 3cff 	add.w	ip, r7, #4294967295
 801ad24:	4565      	cmp	r5, ip
 801ad26:	f280 80dd 	bge.w	801aee4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ad2a:	b21b      	sxth	r3, r3
 801ad2c:	fb05 0003 	mla	r0, r5, r3, r0
 801ad30:	9d08      	ldr	r5, [sp, #32]
 801ad32:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ad36:	182f      	adds	r7, r5, r0
 801ad38:	5c2d      	ldrb	r5, [r5, r0]
 801ad3a:	7878      	ldrb	r0, [r7, #1]
 801ad3c:	f897 e002 	ldrb.w	lr, [r7, #2]
 801ad40:	900c      	str	r0, [sp, #48]	; 0x30
 801ad42:	f897 9003 	ldrb.w	r9, [r7, #3]
 801ad46:	f897 8004 	ldrb.w	r8, [r7, #4]
 801ad4a:	f897 a005 	ldrb.w	sl, [r7, #5]
 801ad4e:	b1c9      	cbz	r1, 801ad84 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801ad50:	f04f 0c03 	mov.w	ip, #3
 801ad54:	f06f 0004 	mvn.w	r0, #4
 801ad58:	3705      	adds	r7, #5
 801ad5a:	fb13 030c 	smlabb	r3, r3, ip, r0
 801ad5e:	eb07 0c03 	add.w	ip, r7, r3
 801ad62:	5cfb      	ldrb	r3, [r7, r3]
 801ad64:	930d      	str	r3, [sp, #52]	; 0x34
 801ad66:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801ad6a:	930f      	str	r3, [sp, #60]	; 0x3c
 801ad6c:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801ad70:	9311      	str	r3, [sp, #68]	; 0x44
 801ad72:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801ad76:	930e      	str	r3, [sp, #56]	; 0x38
 801ad78:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801ad7c:	9310      	str	r3, [sp, #64]	; 0x40
 801ad7e:	f89c 3005 	ldrb.w	r3, [ip, #5]
 801ad82:	9312      	str	r3, [sp, #72]	; 0x48
 801ad84:	b292      	uxth	r2, r2
 801ad86:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ad88:	b289      	uxth	r1, r1
 801ad8a:	fb02 f301 	mul.w	r3, r2, r1
 801ad8e:	0112      	lsls	r2, r2, #4
 801ad90:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801ad94:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801ad98:	1ad2      	subs	r2, r2, r3
 801ad9a:	b289      	uxth	r1, r1
 801ad9c:	b292      	uxth	r2, r2
 801ad9e:	1a7f      	subs	r7, r7, r1
 801ada0:	fb02 f909 	mul.w	r9, r2, r9
 801ada4:	b2bf      	uxth	r7, r7
 801ada6:	fb02 f808 	mul.w	r8, r2, r8
 801adaa:	fb02 fa0a 	mul.w	sl, r2, sl
 801adae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801adb0:	fb07 9905 	mla	r9, r7, r5, r9
 801adb4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801adb6:	fb07 8800 	mla	r8, r7, r0, r8
 801adba:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801adbc:	fb07 aa0e 	mla	sl, r7, lr, sl
 801adc0:	fb01 9905 	mla	r9, r1, r5, r9
 801adc4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801adc6:	fb01 8800 	mla	r8, r1, r0, r8
 801adca:	9810      	ldr	r0, [sp, #64]	; 0x40
 801adcc:	fb01 a102 	mla	r1, r1, r2, sl
 801add0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801add2:	fb03 9905 	mla	r9, r3, r5, r9
 801add6:	fb03 8800 	mla	r8, r3, r0, r8
 801adda:	fb03 1302 	mla	r3, r3, r2, r1
 801adde:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ade2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ade6:	121b      	asrs	r3, r3, #8
 801ade8:	f886 9000 	strb.w	r9, [r6]
 801adec:	f886 8001 	strb.w	r8, [r6, #1]
 801adf0:	70b3      	strb	r3, [r6, #2]
 801adf2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801adf4:	3603      	adds	r6, #3
 801adf6:	449b      	add	fp, r3
 801adf8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801adfa:	441c      	add	r4, r3
 801adfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801adfe:	3b01      	subs	r3, #1
 801ae00:	930a      	str	r3, [sp, #40]	; 0x28
 801ae02:	e774      	b.n	801acee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801ae04:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ae06:	449b      	add	fp, r3
 801ae08:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ae0a:	441c      	add	r4, r3
 801ae0c:	9b06      	ldr	r3, [sp, #24]
 801ae0e:	3b01      	subs	r3, #1
 801ae10:	9306      	str	r3, [sp, #24]
 801ae12:	9b07      	ldr	r3, [sp, #28]
 801ae14:	3303      	adds	r3, #3
 801ae16:	9307      	str	r3, [sp, #28]
 801ae18:	e74a      	b.n	801acb0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801ae1a:	d024      	beq.n	801ae66 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801ae1c:	9b06      	ldr	r3, [sp, #24]
 801ae1e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801ae20:	3b01      	subs	r3, #1
 801ae22:	fb00 b003 	mla	r0, r0, r3, fp
 801ae26:	1400      	asrs	r0, r0, #16
 801ae28:	f53f af5e 	bmi.w	801ace8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801ae2c:	3901      	subs	r1, #1
 801ae2e:	4288      	cmp	r0, r1
 801ae30:	f6bf af5a 	bge.w	801ace8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801ae34:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801ae36:	fb01 4303 	mla	r3, r1, r3, r4
 801ae3a:	141b      	asrs	r3, r3, #16
 801ae3c:	f53f af54 	bmi.w	801ace8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801ae40:	3a01      	subs	r2, #1
 801ae42:	4293      	cmp	r3, r2
 801ae44:	f6bf af50 	bge.w	801ace8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801ae48:	9b07      	ldr	r3, [sp, #28]
 801ae4a:	f8dd e018 	ldr.w	lr, [sp, #24]
 801ae4e:	1cde      	adds	r6, r3, #3
 801ae50:	f1be 0f00 	cmp.w	lr, #0
 801ae54:	dc5f      	bgt.n	801af16 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ae56:	9b06      	ldr	r3, [sp, #24]
 801ae58:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ae5c:	9b07      	ldr	r3, [sp, #28]
 801ae5e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ae62:	4423      	add	r3, r4
 801ae64:	9307      	str	r3, [sp, #28]
 801ae66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae68:	2b00      	cmp	r3, #0
 801ae6a:	f340 80c5 	ble.w	801aff8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801ae6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ae72:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ae74:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ae78:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ae7c:	eef0 6a62 	vmov.f32	s13, s5
 801ae80:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ae84:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ae88:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ae8c:	ee16 ba90 	vmov	fp, s13
 801ae90:	eef0 6a43 	vmov.f32	s13, s6
 801ae94:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ae98:	ee16 4a90 	vmov	r4, s13
 801ae9c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801aea0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801aea4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801aea8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801aeac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801aeb0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801aeb4:	ee12 2a90 	vmov	r2, s5
 801aeb8:	eef0 2a47 	vmov.f32	s5, s14
 801aebc:	fb92 f3f3 	sdiv	r3, r2, r3
 801aec0:	ee13 2a10 	vmov	r2, s6
 801aec4:	9327      	str	r3, [sp, #156]	; 0x9c
 801aec6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801aec8:	eeb0 3a67 	vmov.f32	s6, s15
 801aecc:	fb92 f3f3 	sdiv	r3, r2, r3
 801aed0:	9328      	str	r3, [sp, #160]	; 0xa0
 801aed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aed4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801aed6:	3b01      	subs	r3, #1
 801aed8:	9309      	str	r3, [sp, #36]	; 0x24
 801aeda:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801aedc:	bf08      	it	eq
 801aede:	4613      	moveq	r3, r2
 801aee0:	9306      	str	r3, [sp, #24]
 801aee2:	e6d7      	b.n	801ac94 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801aee4:	f110 0c01 	adds.w	ip, r0, #1
 801aee8:	d483      	bmi.n	801adf2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801aeea:	4563      	cmp	r3, ip
 801aeec:	db81      	blt.n	801adf2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801aeee:	f115 0c01 	adds.w	ip, r5, #1
 801aef2:	f53f af7e 	bmi.w	801adf2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801aef6:	4567      	cmp	r7, ip
 801aef8:	f6ff af7b 	blt.w	801adf2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801aefc:	b23f      	sxth	r7, r7
 801aefe:	b21b      	sxth	r3, r3
 801af00:	9700      	str	r7, [sp, #0]
 801af02:	e9cd 2103 	strd	r2, r1, [sp, #12]
 801af06:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801af0a:	9a08      	ldr	r2, [sp, #32]
 801af0c:	4631      	mov	r1, r6
 801af0e:	9819      	ldr	r0, [sp, #100]	; 0x64
 801af10:	f7ff fdf9 	bl	801ab06 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801af14:	e76d      	b.n	801adf2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801af16:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801af18:	ea4f 402b 	mov.w	r0, fp, asr #16
 801af1c:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801af20:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801af24:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801af28:	1421      	asrs	r1, r4, #16
 801af2a:	930a      	str	r3, [sp, #40]	; 0x28
 801af2c:	fb0c 0101 	mla	r1, ip, r1, r0
 801af30:	9808      	ldr	r0, [sp, #32]
 801af32:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801af36:	1845      	adds	r5, r0, r1
 801af38:	5c40      	ldrb	r0, [r0, r1]
 801af3a:	796f      	ldrb	r7, [r5, #5]
 801af3c:	7869      	ldrb	r1, [r5, #1]
 801af3e:	f895 8002 	ldrb.w	r8, [r5, #2]
 801af42:	f895 a003 	ldrb.w	sl, [r5, #3]
 801af46:	f895 9004 	ldrb.w	r9, [r5, #4]
 801af4a:	970c      	str	r7, [sp, #48]	; 0x30
 801af4c:	b1a2      	cbz	r2, 801af78 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 801af4e:	2703      	movs	r7, #3
 801af50:	f06f 0304 	mvn.w	r3, #4
 801af54:	3505      	adds	r5, #5
 801af56:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801af5a:	eb05 070c 	add.w	r7, r5, ip
 801af5e:	f815 500c 	ldrb.w	r5, [r5, ip]
 801af62:	9513      	str	r5, [sp, #76]	; 0x4c
 801af64:	787d      	ldrb	r5, [r7, #1]
 801af66:	9515      	str	r5, [sp, #84]	; 0x54
 801af68:	78bd      	ldrb	r5, [r7, #2]
 801af6a:	9517      	str	r5, [sp, #92]	; 0x5c
 801af6c:	78fd      	ldrb	r5, [r7, #3]
 801af6e:	9514      	str	r5, [sp, #80]	; 0x50
 801af70:	793d      	ldrb	r5, [r7, #4]
 801af72:	9516      	str	r5, [sp, #88]	; 0x58
 801af74:	797d      	ldrb	r5, [r7, #5]
 801af76:	9518      	str	r5, [sp, #96]	; 0x60
 801af78:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801af7c:	b292      	uxth	r2, r2
 801af7e:	3603      	adds	r6, #3
 801af80:	f10e 3eff 	add.w	lr, lr, #4294967295
 801af84:	fb03 f502 	mul.w	r5, r3, r2
 801af88:	011b      	lsls	r3, r3, #4
 801af8a:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801af8e:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801af92:	1b5b      	subs	r3, r3, r5
 801af94:	b292      	uxth	r2, r2
 801af96:	b29b      	uxth	r3, r3
 801af98:	1abf      	subs	r7, r7, r2
 801af9a:	fb03 f909 	mul.w	r9, r3, r9
 801af9e:	b2bf      	uxth	r7, r7
 801afa0:	fb03 fa0a 	mul.w	sl, r3, sl
 801afa4:	fb07 9901 	mla	r9, r7, r1, r9
 801afa8:	9915      	ldr	r1, [sp, #84]	; 0x54
 801afaa:	fb07 aa00 	mla	sl, r7, r0, sl
 801afae:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801afb0:	fb02 9901 	mla	r9, r2, r1, r9
 801afb4:	9916      	ldr	r1, [sp, #88]	; 0x58
 801afb6:	fb02 aa00 	mla	sl, r2, r0, sl
 801afba:	9814      	ldr	r0, [sp, #80]	; 0x50
 801afbc:	fb05 9901 	mla	r9, r5, r1, r9
 801afc0:	990c      	ldr	r1, [sp, #48]	; 0x30
 801afc2:	fb05 aa00 	mla	sl, r5, r0, sl
 801afc6:	434b      	muls	r3, r1
 801afc8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801afca:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801afce:	fb07 3308 	mla	r3, r7, r8, r3
 801afd2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801afd6:	f806 ac06 	strb.w	sl, [r6, #-6]
 801afda:	fb02 3201 	mla	r2, r2, r1, r3
 801afde:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801afe0:	f806 9c05 	strb.w	r9, [r6, #-5]
 801afe4:	fb05 2503 	mla	r5, r5, r3, r2
 801afe8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801afea:	122d      	asrs	r5, r5, #8
 801afec:	449b      	add	fp, r3
 801afee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801aff0:	f806 5c04 	strb.w	r5, [r6, #-4]
 801aff4:	441c      	add	r4, r3
 801aff6:	e72b      	b.n	801ae50 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801aff8:	b01b      	add	sp, #108	; 0x6c
 801affa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801affe <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801affe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b002:	b087      	sub	sp, #28
 801b004:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 801b008:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801b00c:	fb05 7003 	mla	r0, r5, r3, r7
 801b010:	2d00      	cmp	r5, #0
 801b012:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801b016:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 801b01a:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801b01e:	f2c0 811f 	blt.w	801b260 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801b022:	45a8      	cmp	r8, r5
 801b024:	f340 811c 	ble.w	801b260 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801b028:	2f00      	cmp	r7, #0
 801b02a:	f2c0 8117 	blt.w	801b25c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801b02e:	42bb      	cmp	r3, r7
 801b030:	f340 8114 	ble.w	801b25c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801b034:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801b038:	1c7a      	adds	r2, r7, #1
 801b03a:	f100 8114 	bmi.w	801b266 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801b03e:	4293      	cmp	r3, r2
 801b040:	f340 8111 	ble.w	801b266 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801b044:	2c00      	cmp	r4, #0
 801b046:	f000 8110 	beq.w	801b26a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 801b04a:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801b04e:	3501      	adds	r5, #1
 801b050:	f100 810f 	bmi.w	801b272 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801b054:	45a8      	cmp	r8, r5
 801b056:	f340 810c 	ble.w	801b272 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801b05a:	f1be 0f00 	cmp.w	lr, #0
 801b05e:	f000 810b 	beq.w	801b278 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 801b062:	2f00      	cmp	r7, #0
 801b064:	f2c0 8103 	blt.w	801b26e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801b068:	42bb      	cmp	r3, r7
 801b06a:	f340 8100 	ble.w	801b26e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801b06e:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801b072:	3701      	adds	r7, #1
 801b074:	f100 8103 	bmi.w	801b27e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801b078:	42bb      	cmp	r3, r7
 801b07a:	f340 8100 	ble.w	801b27e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801b07e:	2c00      	cmp	r4, #0
 801b080:	f000 80ff 	beq.w	801b282 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 801b084:	3301      	adds	r3, #1
 801b086:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801b08a:	fa1f fc84 	uxth.w	ip, r4
 801b08e:	fa1f fe8e 	uxth.w	lr, lr
 801b092:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801b096:	fb0c f90e 	mul.w	r9, ip, lr
 801b09a:	0e13      	lsrs	r3, r2, #24
 801b09c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801b0a0:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801b0a4:	9302      	str	r3, [sp, #8]
 801b0a6:	ebac 0709 	sub.w	r7, ip, r9
 801b0aa:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801b0ae:	fa1f f48e 	uxth.w	r4, lr
 801b0b2:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801b0b6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801b0ba:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801b0be:	fb0a fe0e 	mul.w	lr, sl, lr
 801b0c2:	1b1b      	subs	r3, r3, r4
 801b0c4:	fb0a f606 	mul.w	r6, sl, r6
 801b0c8:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801b0cc:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801b0d0:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801b0d4:	b29b      	uxth	r3, r3
 801b0d6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b0da:	b2bf      	uxth	r7, r7
 801b0dc:	9301      	str	r3, [sp, #4]
 801b0de:	44e6      	add	lr, ip
 801b0e0:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801b0e4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b0e8:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801b0ec:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 801b0f0:	9303      	str	r3, [sp, #12]
 801b0f2:	0a33      	lsrs	r3, r6, #8
 801b0f4:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 801b0f8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801b0fc:	9304      	str	r3, [sp, #16]
 801b0fe:	fb0b f606 	mul.w	r6, fp, r6
 801b102:	fb0b f000 	mul.w	r0, fp, r0
 801b106:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801b10a:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801b10e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b112:	44b6      	add	lr, r6
 801b114:	f500 7680 	add.w	r6, r0, #256	; 0x100
 801b118:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801b11c:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 801b120:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801b124:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b128:	fb08 f606 	mul.w	r6, r8, r6
 801b12c:	0a03      	lsrs	r3, r0, #8
 801b12e:	fb08 f505 	mul.w	r5, r8, r5
 801b132:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b136:	0a30      	lsrs	r0, r6, #8
 801b138:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801b13c:	9305      	str	r3, [sp, #20]
 801b13e:	0e13      	lsrs	r3, r2, #24
 801b140:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801b144:	fb0e fe07 	mul.w	lr, lr, r7
 801b148:	4430      	add	r0, r6
 801b14a:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801b14e:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801b152:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801b156:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801b15a:	0a00      	lsrs	r0, r0, #8
 801b15c:	435e      	muls	r6, r3
 801b15e:	0a2d      	lsrs	r5, r5, #8
 801b160:	435a      	muls	r2, r3
 801b162:	9b03      	ldr	r3, [sp, #12]
 801b164:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801b168:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801b16c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801b170:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b174:	44b4      	add	ip, r6
 801b176:	f502 7680 	add.w	r6, r2, #256	; 0x100
 801b17a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b17e:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801b182:	9e01      	ldr	r6, [sp, #4]
 801b184:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b188:	fb03 ee06 	mla	lr, r3, r6, lr
 801b18c:	9b04      	ldr	r3, [sp, #16]
 801b18e:	0a12      	lsrs	r2, r2, #8
 801b190:	fb0c ee09 	mla	lr, ip, r9, lr
 801b194:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 801b198:	9b05      	ldr	r3, [sp, #20]
 801b19a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801b19e:	fb00 ee04 	mla	lr, r0, r4, lr
 801b1a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b1a6:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 801b1aa:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 801b1ae:	9b01      	ldr	r3, [sp, #4]
 801b1b0:	fb07 fe0e 	mul.w	lr, r7, lr
 801b1b4:	fb07 f70b 	mul.w	r7, r7, fp
 801b1b8:	fb03 ee06 	mla	lr, r3, r6, lr
 801b1bc:	fb03 730a 	mla	r3, r3, sl, r7
 801b1c0:	fb09 e202 	mla	r2, r9, r2, lr
 801b1c4:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801b1c8:	fb04 2e0e 	mla	lr, r4, lr, r2
 801b1cc:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 801b1d0:	fb04 3408 	mla	r4, r4, r8, r3
 801b1d4:	9b02      	ldr	r3, [sp, #8]
 801b1d6:	b292      	uxth	r2, r2
 801b1d8:	fb09 4903 	mla	r9, r9, r3, r4
 801b1dc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b1e0:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801b1e4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801b1e8:	fb09 f902 	mul.w	r9, r9, r2
 801b1ec:	ea40 0e0e 	orr.w	lr, r0, lr
 801b1f0:	f109 0301 	add.w	r3, r9, #1
 801b1f4:	fa5f f08e 	uxtb.w	r0, lr
 801b1f8:	fb10 f002 	smulbb	r0, r0, r2
 801b1fc:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801b200:	780b      	ldrb	r3, [r1, #0]
 801b202:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 801b206:	fa5f f989 	uxtb.w	r9, r9
 801b20a:	fb03 0309 	mla	r3, r3, r9, r0
 801b20e:	b29b      	uxth	r3, r3
 801b210:	1c58      	adds	r0, r3, #1
 801b212:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801b216:	7848      	ldrb	r0, [r1, #1]
 801b218:	fb10 f009 	smulbb	r0, r0, r9
 801b21c:	121b      	asrs	r3, r3, #8
 801b21e:	700b      	strb	r3, [r1, #0]
 801b220:	f3ce 2307 	ubfx	r3, lr, #8, #8
 801b224:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801b228:	fb03 0302 	mla	r3, r3, r2, r0
 801b22c:	b29b      	uxth	r3, r3
 801b22e:	1c58      	adds	r0, r3, #1
 801b230:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801b234:	121b      	asrs	r3, r3, #8
 801b236:	704b      	strb	r3, [r1, #1]
 801b238:	788b      	ldrb	r3, [r1, #2]
 801b23a:	fb13 f909 	smulbb	r9, r3, r9
 801b23e:	fb0e 9e02 	mla	lr, lr, r2, r9
 801b242:	fa1f fe8e 	uxth.w	lr, lr
 801b246:	f10e 0301 	add.w	r3, lr, #1
 801b24a:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801b24e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b252:	f881 e002 	strb.w	lr, [r1, #2]
 801b256:	b007      	add	sp, #28
 801b258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b25c:	2600      	movs	r6, #0
 801b25e:	e6eb      	b.n	801b038 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 801b260:	2000      	movs	r0, #0
 801b262:	4606      	mov	r6, r0
 801b264:	e6f3      	b.n	801b04e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801b266:	2000      	movs	r0, #0
 801b268:	e6f1      	b.n	801b04e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801b26a:	4620      	mov	r0, r4
 801b26c:	e6ef      	b.n	801b04e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801b26e:	2500      	movs	r5, #0
 801b270:	e6ff      	b.n	801b072 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 801b272:	2200      	movs	r2, #0
 801b274:	4615      	mov	r5, r2
 801b276:	e708      	b.n	801b08a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801b278:	4672      	mov	r2, lr
 801b27a:	4675      	mov	r5, lr
 801b27c:	e705      	b.n	801b08a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801b27e:	2200      	movs	r2, #0
 801b280:	e703      	b.n	801b08a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801b282:	4622      	mov	r2, r4
 801b284:	e701      	b.n	801b08a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

0801b286 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b286:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b28a:	b09d      	sub	sp, #116	; 0x74
 801b28c:	9219      	str	r2, [sp, #100]	; 0x64
 801b28e:	9307      	str	r3, [sp, #28]
 801b290:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801b292:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 801b296:	901b      	str	r0, [sp, #108]	; 0x6c
 801b298:	931a      	str	r3, [sp, #104]	; 0x68
 801b29a:	6850      	ldr	r0, [r2, #4]
 801b29c:	9117      	str	r1, [sp, #92]	; 0x5c
 801b29e:	6812      	ldr	r2, [r2, #0]
 801b2a0:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801b2a4:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 801b2a8:	fb00 1303 	mla	r3, r0, r3, r1
 801b2ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b2b0:	18d3      	adds	r3, r2, r3
 801b2b2:	930a      	str	r3, [sp, #40]	; 0x28
 801b2b4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801b2b6:	681b      	ldr	r3, [r3, #0]
 801b2b8:	9310      	str	r3, [sp, #64]	; 0x40
 801b2ba:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801b2be:	930b      	str	r3, [sp, #44]	; 0x2c
 801b2c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b2c2:	2b00      	cmp	r3, #0
 801b2c4:	dc03      	bgt.n	801b2ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801b2c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b2c8:	2b00      	cmp	r3, #0
 801b2ca:	f340 8368 	ble.w	801b99e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801b2ce:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801b2d0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b2d4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b2d8:	1e48      	subs	r0, r1, #1
 801b2da:	1e57      	subs	r7, r2, #1
 801b2dc:	9b07      	ldr	r3, [sp, #28]
 801b2de:	2b00      	cmp	r3, #0
 801b2e0:	f340 8187 	ble.w	801b5f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801b2e4:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801b2e8:	ea4f 4326 	mov.w	r3, r6, asr #16
 801b2ec:	d406      	bmi.n	801b2fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b2ee:	4584      	cmp	ip, r0
 801b2f0:	da04      	bge.n	801b2fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b2f2:	2b00      	cmp	r3, #0
 801b2f4:	db02      	blt.n	801b2fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b2f6:	42bb      	cmp	r3, r7
 801b2f8:	f2c0 817c 	blt.w	801b5f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801b2fc:	f11c 0c01 	adds.w	ip, ip, #1
 801b300:	f100 816c 	bmi.w	801b5dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801b304:	4561      	cmp	r1, ip
 801b306:	f2c0 8169 	blt.w	801b5dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801b30a:	3301      	adds	r3, #1
 801b30c:	f100 8166 	bmi.w	801b5dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801b310:	429a      	cmp	r2, r3
 801b312:	f2c0 8163 	blt.w	801b5dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801b316:	9b07      	ldr	r3, [sp, #28]
 801b318:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801b31a:	9318      	str	r3, [sp, #96]	; 0x60
 801b31c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801b31e:	2b00      	cmp	r3, #0
 801b320:	f340 8186 	ble.w	801b630 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801b324:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801b326:	142a      	asrs	r2, r5, #16
 801b328:	ea4f 4026 	mov.w	r0, r6, asr #16
 801b32c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801b330:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801b334:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801b338:	f100 81cb 	bmi.w	801b6d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801b33c:	f10e 38ff 	add.w	r8, lr, #4294967295
 801b340:	4542      	cmp	r2, r8
 801b342:	f280 81c6 	bge.w	801b6d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801b346:	2800      	cmp	r0, #0
 801b348:	f2c0 81c3 	blt.w	801b6d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801b34c:	f103 38ff 	add.w	r8, r3, #4294967295
 801b350:	4540      	cmp	r0, r8
 801b352:	f280 81be 	bge.w	801b6d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801b356:	fa0f f38e 	sxth.w	r3, lr
 801b35a:	fb00 2203 	mla	r2, r0, r3, r2
 801b35e:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b360:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801b364:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801b368:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801b36c:	2900      	cmp	r1, #0
 801b36e:	f000 81a6 	beq.w	801b6be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801b372:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801b376:	900c      	str	r0, [sp, #48]	; 0x30
 801b378:	0e00      	lsrs	r0, r0, #24
 801b37a:	9013      	str	r0, [sp, #76]	; 0x4c
 801b37c:	f1bc 0f00 	cmp.w	ip, #0
 801b380:	d00f      	beq.n	801b3a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801b382:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801b386:	3b01      	subs	r3, #1
 801b388:	009b      	lsls	r3, r3, #2
 801b38a:	3304      	adds	r3, #4
 801b38c:	eb08 0003 	add.w	r0, r8, r3
 801b390:	f858 3003 	ldr.w	r3, [r8, r3]
 801b394:	9308      	str	r3, [sp, #32]
 801b396:	0e1b      	lsrs	r3, r3, #24
 801b398:	9311      	str	r3, [sp, #68]	; 0x44
 801b39a:	6843      	ldr	r3, [r0, #4]
 801b39c:	930d      	str	r3, [sp, #52]	; 0x34
 801b39e:	0e1b      	lsrs	r3, r3, #24
 801b3a0:	9314      	str	r3, [sp, #80]	; 0x50
 801b3a2:	b289      	uxth	r1, r1
 801b3a4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801b3a6:	fa1f fc8c 	uxth.w	ip, ip
 801b3aa:	0108      	lsls	r0, r1, #4
 801b3ac:	fb01 f90c 	mul.w	r9, r1, ip
 801b3b0:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801b3b4:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801b3b8:	eba0 0809 	sub.w	r8, r0, r9
 801b3bc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b3be:	fa1f f18c 	uxth.w	r1, ip
 801b3c2:	fa1f f888 	uxth.w	r8, r8
 801b3c6:	1a5b      	subs	r3, r3, r1
 801b3c8:	fb08 f000 	mul.w	r0, r8, r0
 801b3cc:	b29b      	uxth	r3, r3
 801b3ce:	fb03 000e 	mla	r0, r3, lr, r0
 801b3d2:	fb01 0004 	mla	r0, r1, r4, r0
 801b3d6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b3d8:	fb09 0004 	mla	r0, r9, r4, r0
 801b3dc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801b3e0:	2800      	cmp	r0, #0
 801b3e2:	f000 80f2 	beq.w	801b5ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801b3e6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801b3ea:	d01b      	beq.n	801b424 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801b3ec:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 801b3f0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801b3f4:	fb0e fa0a 	mul.w	sl, lr, sl
 801b3f8:	fb0e fe02 	mul.w	lr, lr, r2
 801b3fc:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801b400:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801b404:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801b408:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801b40c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801b410:	4452      	add	r2, sl
 801b412:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b416:	0a12      	lsrs	r2, r2, #8
 801b418:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801b41c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801b420:	ea42 020c 	orr.w	r2, r2, ip
 801b424:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b426:	2cff      	cmp	r4, #255	; 0xff
 801b428:	d021      	beq.n	801b46e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801b42a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b42c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801b430:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b432:	fb04 fb0b 	mul.w	fp, r4, fp
 801b436:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b438:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801b43c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b43e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b442:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801b446:	fb04 fa0a 	mul.w	sl, r4, sl
 801b44a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b44e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801b452:	44de      	add	lr, fp
 801b454:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b458:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b45c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b460:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b464:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b468:	ea4e 040a 	orr.w	r4, lr, sl
 801b46c:	940c      	str	r4, [sp, #48]	; 0x30
 801b46e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801b470:	2cff      	cmp	r4, #255	; 0xff
 801b472:	d021      	beq.n	801b4b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801b474:	9c08      	ldr	r4, [sp, #32]
 801b476:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801b47a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801b47c:	fb04 fb0b 	mul.w	fp, r4, fp
 801b480:	9c08      	ldr	r4, [sp, #32]
 801b482:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801b486:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801b488:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b48c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801b490:	fb04 fa0a 	mul.w	sl, r4, sl
 801b494:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b498:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801b49c:	44de      	add	lr, fp
 801b49e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b4a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b4a6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b4aa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b4ae:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b4b2:	ea4e 040a 	orr.w	r4, lr, sl
 801b4b6:	9408      	str	r4, [sp, #32]
 801b4b8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b4ba:	2cff      	cmp	r4, #255	; 0xff
 801b4bc:	d021      	beq.n	801b502 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801b4be:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801b4c0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801b4c4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b4c6:	fb04 fb0b 	mul.w	fp, r4, fp
 801b4ca:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801b4cc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801b4d0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b4d2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b4d6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801b4da:	fb04 fa0a 	mul.w	sl, r4, sl
 801b4de:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b4e2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801b4e6:	44de      	add	lr, fp
 801b4e8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b4ec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b4f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b4f4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b4f8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b4fc:	ea4e 040a 	orr.w	r4, lr, sl
 801b500:	940d      	str	r4, [sp, #52]	; 0x34
 801b502:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b504:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801b508:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801b50c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801b510:	9c08      	ldr	r4, [sp, #32]
 801b512:	fb08 fc0c 	mul.w	ip, r8, ip
 801b516:	fb03 cc0e 	mla	ip, r3, lr, ip
 801b51a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801b51e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801b520:	fb01 cc0e 	mla	ip, r1, lr, ip
 801b524:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801b528:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b52a:	fb09 cc0e 	mla	ip, r9, lr, ip
 801b52e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801b532:	fb08 f80e 	mul.w	r8, r8, lr
 801b536:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b53a:	fb03 8202 	mla	r2, r3, r2, r8
 801b53e:	9b08      	ldr	r3, [sp, #32]
 801b540:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b544:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 801b548:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b54a:	fb01 220a 	mla	r2, r1, sl, r2
 801b54e:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 801b552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b554:	fb09 2901 	mla	r9, r9, r1, r2
 801b558:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b55a:	4343      	muls	r3, r0
 801b55c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801b560:	1c58      	adds	r0, r3, #1
 801b562:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801b566:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801b56a:	783b      	ldrb	r3, [r7, #0]
 801b56c:	ea4c 0c09 	orr.w	ip, ip, r9
 801b570:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801b574:	fa5f f28c 	uxtb.w	r2, ip
 801b578:	b2c0      	uxtb	r0, r0
 801b57a:	fb12 f201 	smulbb	r2, r2, r1
 801b57e:	fb03 2300 	mla	r3, r3, r0, r2
 801b582:	b29b      	uxth	r3, r3
 801b584:	1c5a      	adds	r2, r3, #1
 801b586:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b58a:	787a      	ldrb	r2, [r7, #1]
 801b58c:	fb12 f200 	smulbb	r2, r2, r0
 801b590:	121b      	asrs	r3, r3, #8
 801b592:	703b      	strb	r3, [r7, #0]
 801b594:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801b598:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801b59c:	fb03 2301 	mla	r3, r3, r1, r2
 801b5a0:	b29b      	uxth	r3, r3
 801b5a2:	1c5a      	adds	r2, r3, #1
 801b5a4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b5a8:	121b      	asrs	r3, r3, #8
 801b5aa:	707b      	strb	r3, [r7, #1]
 801b5ac:	78bb      	ldrb	r3, [r7, #2]
 801b5ae:	fb13 f000 	smulbb	r0, r3, r0
 801b5b2:	fb0c 0c01 	mla	ip, ip, r1, r0
 801b5b6:	fa1f fc8c 	uxth.w	ip, ip
 801b5ba:	f10c 0301 	add.w	r3, ip, #1
 801b5be:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801b5c2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b5c6:	f887 c002 	strb.w	ip, [r7, #2]
 801b5ca:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b5cc:	3703      	adds	r7, #3
 801b5ce:	441d      	add	r5, r3
 801b5d0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b5d2:	441e      	add	r6, r3
 801b5d4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801b5d6:	3b01      	subs	r3, #1
 801b5d8:	9318      	str	r3, [sp, #96]	; 0x60
 801b5da:	e69f      	b.n	801b31c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b5dc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b5de:	441d      	add	r5, r3
 801b5e0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b5e2:	441e      	add	r6, r3
 801b5e4:	9b07      	ldr	r3, [sp, #28]
 801b5e6:	3b01      	subs	r3, #1
 801b5e8:	9307      	str	r3, [sp, #28]
 801b5ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b5ec:	3303      	adds	r3, #3
 801b5ee:	930a      	str	r3, [sp, #40]	; 0x28
 801b5f0:	e674      	b.n	801b2dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801b5f2:	d025      	beq.n	801b640 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801b5f4:	9b07      	ldr	r3, [sp, #28]
 801b5f6:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801b5f8:	3b01      	subs	r3, #1
 801b5fa:	fb00 5003 	mla	r0, r0, r3, r5
 801b5fe:	1400      	asrs	r0, r0, #16
 801b600:	f53f ae89 	bmi.w	801b316 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b604:	3901      	subs	r1, #1
 801b606:	4288      	cmp	r0, r1
 801b608:	f6bf ae85 	bge.w	801b316 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b60c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801b60e:	fb01 6303 	mla	r3, r1, r3, r6
 801b612:	141b      	asrs	r3, r3, #16
 801b614:	f53f ae7f 	bmi.w	801b316 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b618:	3a01      	subs	r2, #1
 801b61a:	4293      	cmp	r3, r2
 801b61c:	f6bf ae7b 	bge.w	801b316 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b622:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801b626:	f103 0e03 	add.w	lr, r3, #3
 801b62a:	f1bb 0f00 	cmp.w	fp, #0
 801b62e:	dc6e      	bgt.n	801b70e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801b630:	9b07      	ldr	r3, [sp, #28]
 801b632:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801b636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b638:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b63c:	4423      	add	r3, r4
 801b63e:	930a      	str	r3, [sp, #40]	; 0x28
 801b640:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b642:	2b00      	cmp	r3, #0
 801b644:	f340 81ab 	ble.w	801b99e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801b648:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b64c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b64e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b652:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b656:	eef0 6a62 	vmov.f32	s13, s5
 801b65a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b65e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b662:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b666:	ee16 5a90 	vmov	r5, s13
 801b66a:	eef0 6a43 	vmov.f32	s13, s6
 801b66e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b672:	ee16 6a90 	vmov	r6, s13
 801b676:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b67a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b67e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b682:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b686:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b68a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b68e:	ee12 2a90 	vmov	r2, s5
 801b692:	eef0 2a47 	vmov.f32	s5, s14
 801b696:	fb92 f3f3 	sdiv	r3, r2, r3
 801b69a:	ee13 2a10 	vmov	r2, s6
 801b69e:	9329      	str	r3, [sp, #164]	; 0xa4
 801b6a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b6a2:	eeb0 3a67 	vmov.f32	s6, s15
 801b6a6:	fb92 f3f3 	sdiv	r3, r2, r3
 801b6aa:	932a      	str	r3, [sp, #168]	; 0xa8
 801b6ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b6ae:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801b6b0:	3b01      	subs	r3, #1
 801b6b2:	9317      	str	r3, [sp, #92]	; 0x5c
 801b6b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b6b6:	bf08      	it	eq
 801b6b8:	4613      	moveq	r3, r2
 801b6ba:	9307      	str	r3, [sp, #28]
 801b6bc:	e600      	b.n	801b2c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801b6be:	f1bc 0f00 	cmp.w	ip, #0
 801b6c2:	f43f ae6e 	beq.w	801b3a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801b6c6:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801b6ca:	9308      	str	r3, [sp, #32]
 801b6cc:	0e1b      	lsrs	r3, r3, #24
 801b6ce:	9311      	str	r3, [sp, #68]	; 0x44
 801b6d0:	e667      	b.n	801b3a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801b6d2:	f112 0801 	adds.w	r8, r2, #1
 801b6d6:	f53f af78 	bmi.w	801b5ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801b6da:	45c6      	cmp	lr, r8
 801b6dc:	f6ff af75 	blt.w	801b5ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801b6e0:	f110 0801 	adds.w	r8, r0, #1
 801b6e4:	f53f af71 	bmi.w	801b5ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801b6e8:	4543      	cmp	r3, r8
 801b6ea:	f6ff af6e 	blt.w	801b5ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801b6ee:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801b6f0:	b21b      	sxth	r3, r3
 801b6f2:	9201      	str	r2, [sp, #4]
 801b6f4:	9300      	str	r3, [sp, #0]
 801b6f6:	fa0f f38e 	sxth.w	r3, lr
 801b6fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b6fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b700:	e9cd c404 	strd	ip, r4, [sp, #16]
 801b704:	4639      	mov	r1, r7
 801b706:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801b708:	f7ff fc79 	bl	801affe <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801b70c:	e75d      	b.n	801b5ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801b70e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801b710:	142f      	asrs	r7, r5, #16
 801b712:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801b714:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801b718:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801b71c:	1433      	asrs	r3, r6, #16
 801b71e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801b722:	fb02 7303 	mla	r3, r2, r3, r7
 801b726:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801b72a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801b72e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801b732:	2900      	cmp	r1, #0
 801b734:	f000 812a 	beq.w	801b98c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801b738:	687c      	ldr	r4, [r7, #4]
 801b73a:	940e      	str	r4, [sp, #56]	; 0x38
 801b73c:	0e24      	lsrs	r4, r4, #24
 801b73e:	9415      	str	r4, [sp, #84]	; 0x54
 801b740:	b178      	cbz	r0, 801b762 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801b742:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 801b746:	3a01      	subs	r2, #1
 801b748:	0092      	lsls	r2, r2, #2
 801b74a:	3204      	adds	r2, #4
 801b74c:	eb07 0802 	add.w	r8, r7, r2
 801b750:	58ba      	ldr	r2, [r7, r2]
 801b752:	9209      	str	r2, [sp, #36]	; 0x24
 801b754:	0e12      	lsrs	r2, r2, #24
 801b756:	9212      	str	r2, [sp, #72]	; 0x48
 801b758:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801b75c:	920f      	str	r2, [sp, #60]	; 0x3c
 801b75e:	0e12      	lsrs	r2, r2, #24
 801b760:	9216      	str	r2, [sp, #88]	; 0x58
 801b762:	b289      	uxth	r1, r1
 801b764:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b766:	b280      	uxth	r0, r0
 801b768:	fb01 f900 	mul.w	r9, r1, r0
 801b76c:	0109      	lsls	r1, r1, #4
 801b76e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801b772:	eba1 0809 	sub.w	r8, r1, r9
 801b776:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801b77a:	9915      	ldr	r1, [sp, #84]	; 0x54
 801b77c:	b280      	uxth	r0, r0
 801b77e:	fa1f f888 	uxth.w	r8, r8
 801b782:	1a12      	subs	r2, r2, r0
 801b784:	fb08 f101 	mul.w	r1, r8, r1
 801b788:	b292      	uxth	r2, r2
 801b78a:	fb02 110c 	mla	r1, r2, ip, r1
 801b78e:	fb00 1104 	mla	r1, r0, r4, r1
 801b792:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801b794:	fb09 1104 	mla	r1, r9, r4, r1
 801b798:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801b79c:	2900      	cmp	r1, #0
 801b79e:	f000 80ec 	beq.w	801b97a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801b7a2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801b7a6:	d019      	beq.n	801b7dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 801b7a8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801b7ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b7b0:	fb0c fa0a 	mul.w	sl, ip, sl
 801b7b4:	fb0c fc03 	mul.w	ip, ip, r3
 801b7b8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801b7bc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801b7c0:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801b7c4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801b7c8:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801b7cc:	4453      	add	r3, sl
 801b7ce:	0a3f      	lsrs	r7, r7, #8
 801b7d0:	0a1b      	lsrs	r3, r3, #8
 801b7d2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801b7d6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801b7da:	433b      	orrs	r3, r7
 801b7dc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801b7de:	2cff      	cmp	r4, #255	; 0xff
 801b7e0:	d020      	beq.n	801b824 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 801b7e2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801b7e4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801b7e8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801b7ea:	4367      	muls	r7, r4
 801b7ec:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801b7ee:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801b7f2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801b7f6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801b7f8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801b7fc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b800:	fb04 fa0a 	mul.w	sl, r4, sl
 801b804:	44bc      	add	ip, r7
 801b806:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801b80a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b80e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b812:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b816:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b81a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b81e:	ea4c 040a 	orr.w	r4, ip, sl
 801b822:	940e      	str	r4, [sp, #56]	; 0x38
 801b824:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b826:	2cff      	cmp	r4, #255	; 0xff
 801b828:	d020      	beq.n	801b86c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 801b82a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801b82c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801b830:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b832:	4367      	muls	r7, r4
 801b834:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801b836:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801b83a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801b83e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b840:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801b844:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b848:	fb04 fa0a 	mul.w	sl, r4, sl
 801b84c:	44bc      	add	ip, r7
 801b84e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801b852:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b856:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b85a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b85e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b862:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b866:	ea4c 040a 	orr.w	r4, ip, sl
 801b86a:	9409      	str	r4, [sp, #36]	; 0x24
 801b86c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801b86e:	2cff      	cmp	r4, #255	; 0xff
 801b870:	d020      	beq.n	801b8b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 801b872:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801b874:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801b878:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801b87a:	4367      	muls	r7, r4
 801b87c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801b87e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801b882:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801b886:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801b888:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801b88c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b890:	fb04 fa0a 	mul.w	sl, r4, sl
 801b894:	44bc      	add	ip, r7
 801b896:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801b89a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b89e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b8a2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b8a6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b8aa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b8ae:	ea4c 040a 	orr.w	r4, ip, sl
 801b8b2:	940f      	str	r4, [sp, #60]	; 0x3c
 801b8b4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801b8b6:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801b8ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b8be:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801b8c2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801b8c4:	fb08 f707 	mul.w	r7, r8, r7
 801b8c8:	fb02 770c 	mla	r7, r2, ip, r7
 801b8cc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801b8d0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801b8d2:	fb00 770c 	mla	r7, r0, ip, r7
 801b8d6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801b8da:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801b8dc:	fb09 770c 	mla	r7, r9, ip, r7
 801b8e0:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801b8e4:	fb08 f80c 	mul.w	r8, r8, ip
 801b8e8:	0a3f      	lsrs	r7, r7, #8
 801b8ea:	fb02 8303 	mla	r3, r2, r3, r8
 801b8ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b8f0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801b8f4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801b8f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b8fa:	fb00 330a 	mla	r3, r0, sl, r3
 801b8fe:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801b902:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b904:	fb09 3c0c 	mla	ip, r9, ip, r3
 801b908:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b90a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b90e:	434b      	muls	r3, r1
 801b910:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801b914:	1c59      	adds	r1, r3, #1
 801b916:	ea47 070c 	orr.w	r7, r7, ip
 801b91a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801b91e:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801b922:	b2fa      	uxtb	r2, r7
 801b924:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801b928:	fb12 f200 	smulbb	r2, r2, r0
 801b92c:	b2c9      	uxtb	r1, r1
 801b92e:	fb03 2301 	mla	r3, r3, r1, r2
 801b932:	b29b      	uxth	r3, r3
 801b934:	1c5a      	adds	r2, r3, #1
 801b936:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b93a:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801b93e:	fb12 f201 	smulbb	r2, r2, r1
 801b942:	121b      	asrs	r3, r3, #8
 801b944:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801b948:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801b94c:	0c3f      	lsrs	r7, r7, #16
 801b94e:	fb03 2300 	mla	r3, r3, r0, r2
 801b952:	b29b      	uxth	r3, r3
 801b954:	1c5a      	adds	r2, r3, #1
 801b956:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b95a:	121b      	asrs	r3, r3, #8
 801b95c:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801b960:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801b964:	fb13 f101 	smulbb	r1, r3, r1
 801b968:	fb07 1700 	mla	r7, r7, r0, r1
 801b96c:	b2bf      	uxth	r7, r7
 801b96e:	1c79      	adds	r1, r7, #1
 801b970:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801b974:	123f      	asrs	r7, r7, #8
 801b976:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801b97a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b97c:	f10e 0e03 	add.w	lr, lr, #3
 801b980:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b984:	441d      	add	r5, r3
 801b986:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b988:	441e      	add	r6, r3
 801b98a:	e64e      	b.n	801b62a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 801b98c:	2800      	cmp	r0, #0
 801b98e:	f43f aee8 	beq.w	801b762 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801b992:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801b996:	9209      	str	r2, [sp, #36]	; 0x24
 801b998:	0e12      	lsrs	r2, r2, #24
 801b99a:	9212      	str	r2, [sp, #72]	; 0x48
 801b99c:	e6e1      	b.n	801b762 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801b99e:	b01d      	add	sp, #116	; 0x74
 801b9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b9a4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801b9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9a8:	b087      	sub	sp, #28
 801b9aa:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 801b9ae:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801b9b2:	fb05 7003 	mla	r0, r5, r3, r7
 801b9b6:	2d00      	cmp	r5, #0
 801b9b8:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801b9bc:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 801b9c0:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801b9c4:	f2c0 810a 	blt.w	801bbdc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801b9c8:	45a8      	cmp	r8, r5
 801b9ca:	f340 8107 	ble.w	801bbdc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801b9ce:	2f00      	cmp	r7, #0
 801b9d0:	f2c0 8102 	blt.w	801bbd8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801b9d4:	42bb      	cmp	r3, r7
 801b9d6:	f340 80ff 	ble.w	801bbd8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801b9da:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801b9de:	1c7a      	adds	r2, r7, #1
 801b9e0:	f100 80ff 	bmi.w	801bbe2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801b9e4:	4293      	cmp	r3, r2
 801b9e6:	f340 80fc 	ble.w	801bbe2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801b9ea:	2c00      	cmp	r4, #0
 801b9ec:	f000 80fb 	beq.w	801bbe6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 801b9f0:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801b9f4:	3501      	adds	r5, #1
 801b9f6:	f100 80fa 	bmi.w	801bbee <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801b9fa:	45a8      	cmp	r8, r5
 801b9fc:	f340 80f7 	ble.w	801bbee <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801ba00:	f1be 0f00 	cmp.w	lr, #0
 801ba04:	f000 80f6 	beq.w	801bbf4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 801ba08:	2f00      	cmp	r7, #0
 801ba0a:	f2c0 80ee 	blt.w	801bbea <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801ba0e:	42bb      	cmp	r3, r7
 801ba10:	f340 80eb 	ble.w	801bbea <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801ba14:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801ba18:	3701      	adds	r7, #1
 801ba1a:	f100 80ee 	bmi.w	801bbfa <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801ba1e:	42bb      	cmp	r3, r7
 801ba20:	f340 80eb 	ble.w	801bbfa <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801ba24:	2c00      	cmp	r4, #0
 801ba26:	f000 80ea 	beq.w	801bbfe <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 801ba2a:	3301      	adds	r3, #1
 801ba2c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801ba30:	fa1f fc84 	uxth.w	ip, r4
 801ba34:	fa1f fe8e 	uxth.w	lr, lr
 801ba38:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801ba3c:	fb0c f90e 	mul.w	r9, ip, lr
 801ba40:	0e13      	lsrs	r3, r2, #24
 801ba42:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801ba46:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801ba4a:	9302      	str	r3, [sp, #8]
 801ba4c:	ebac 0709 	sub.w	r7, ip, r9
 801ba50:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801ba54:	fa1f f48e 	uxth.w	r4, lr
 801ba58:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801ba5c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ba60:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801ba64:	fb0a fe0e 	mul.w	lr, sl, lr
 801ba68:	1b1b      	subs	r3, r3, r4
 801ba6a:	fb0a f606 	mul.w	r6, sl, r6
 801ba6e:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801ba72:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801ba76:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801ba7a:	b29b      	uxth	r3, r3
 801ba7c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ba80:	b2bf      	uxth	r7, r7
 801ba82:	9301      	str	r3, [sp, #4]
 801ba84:	44e6      	add	lr, ip
 801ba86:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801ba8a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ba8e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801ba92:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 801ba96:	9303      	str	r3, [sp, #12]
 801ba98:	0a33      	lsrs	r3, r6, #8
 801ba9a:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 801ba9e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801baa2:	9304      	str	r3, [sp, #16]
 801baa4:	fb0b f606 	mul.w	r6, fp, r6
 801baa8:	fb0b f000 	mul.w	r0, fp, r0
 801baac:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801bab0:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801bab4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bab8:	44b6      	add	lr, r6
 801baba:	f500 7680 	add.w	r6, r0, #256	; 0x100
 801babe:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801bac2:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 801bac6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801baca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bace:	fb08 f606 	mul.w	r6, r8, r6
 801bad2:	0a03      	lsrs	r3, r0, #8
 801bad4:	fb08 f505 	mul.w	r5, r8, r5
 801bad8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801badc:	0a30      	lsrs	r0, r6, #8
 801bade:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801bae2:	9305      	str	r3, [sp, #20]
 801bae4:	0e13      	lsrs	r3, r2, #24
 801bae6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801baea:	fb0e fe07 	mul.w	lr, lr, r7
 801baee:	4430      	add	r0, r6
 801baf0:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801baf4:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801baf8:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801bafc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801bb00:	0a00      	lsrs	r0, r0, #8
 801bb02:	435e      	muls	r6, r3
 801bb04:	0a2d      	lsrs	r5, r5, #8
 801bb06:	435a      	muls	r2, r3
 801bb08:	9b03      	ldr	r3, [sp, #12]
 801bb0a:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801bb0e:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801bb12:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801bb16:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801bb1a:	44b4      	add	ip, r6
 801bb1c:	f502 7680 	add.w	r6, r2, #256	; 0x100
 801bb20:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bb24:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801bb28:	9e01      	ldr	r6, [sp, #4]
 801bb2a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801bb2e:	fb03 ee06 	mla	lr, r3, r6, lr
 801bb32:	9b04      	ldr	r3, [sp, #16]
 801bb34:	0a12      	lsrs	r2, r2, #8
 801bb36:	fb0c ee09 	mla	lr, ip, r9, lr
 801bb3a:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 801bb3e:	9b05      	ldr	r3, [sp, #20]
 801bb40:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801bb44:	fb00 ee04 	mla	lr, r0, r4, lr
 801bb48:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bb4c:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 801bb50:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 801bb54:	9b01      	ldr	r3, [sp, #4]
 801bb56:	fb07 fe0e 	mul.w	lr, r7, lr
 801bb5a:	fb07 f70b 	mul.w	r7, r7, fp
 801bb5e:	fb03 ee06 	mla	lr, r3, r6, lr
 801bb62:	fb03 730a 	mla	r3, r3, sl, r7
 801bb66:	fb09 e202 	mla	r2, r9, r2, lr
 801bb6a:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801bb6e:	fb04 2e0e 	mla	lr, r4, lr, r2
 801bb72:	fb04 3408 	mla	r4, r4, r8, r3
 801bb76:	9b02      	ldr	r3, [sp, #8]
 801bb78:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bb7c:	fb09 4903 	mla	r9, r9, r3, r4
 801bb80:	780b      	ldrb	r3, [r1, #0]
 801bb82:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801bb86:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801bb8a:	ea40 0e0e 	orr.w	lr, r0, lr
 801bb8e:	fa5f f989 	uxtb.w	r9, r9
 801bb92:	fb03 f209 	mul.w	r2, r3, r9
 801bb96:	1c53      	adds	r3, r2, #1
 801bb98:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801bb9c:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801bba0:	700b      	strb	r3, [r1, #0]
 801bba2:	784b      	ldrb	r3, [r1, #1]
 801bba4:	fb03 f309 	mul.w	r3, r3, r9
 801bba8:	1c5a      	adds	r2, r3, #1
 801bbaa:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801bbae:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801bbb2:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801bbb6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801bbba:	704b      	strb	r3, [r1, #1]
 801bbbc:	788b      	ldrb	r3, [r1, #2]
 801bbbe:	fb03 f909 	mul.w	r9, r3, r9
 801bbc2:	f109 0301 	add.w	r3, r9, #1
 801bbc6:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801bbca:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 801bbce:	f881 e002 	strb.w	lr, [r1, #2]
 801bbd2:	b007      	add	sp, #28
 801bbd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbd8:	2600      	movs	r6, #0
 801bbda:	e700      	b.n	801b9de <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 801bbdc:	2000      	movs	r0, #0
 801bbde:	4606      	mov	r6, r0
 801bbe0:	e708      	b.n	801b9f4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801bbe2:	2000      	movs	r0, #0
 801bbe4:	e706      	b.n	801b9f4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801bbe6:	4620      	mov	r0, r4
 801bbe8:	e704      	b.n	801b9f4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801bbea:	2500      	movs	r5, #0
 801bbec:	e714      	b.n	801ba18 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 801bbee:	2200      	movs	r2, #0
 801bbf0:	4615      	mov	r5, r2
 801bbf2:	e71d      	b.n	801ba30 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801bbf4:	4672      	mov	r2, lr
 801bbf6:	4675      	mov	r5, lr
 801bbf8:	e71a      	b.n	801ba30 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801bbfa:	2200      	movs	r2, #0
 801bbfc:	e718      	b.n	801ba30 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801bbfe:	4622      	mov	r2, r4
 801bc00:	e716      	b.n	801ba30 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0801bc02 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bc02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc06:	b099      	sub	sp, #100	; 0x64
 801bc08:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 801bc0c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801bc0e:	9017      	str	r0, [sp, #92]	; 0x5c
 801bc10:	9306      	str	r3, [sp, #24]
 801bc12:	6850      	ldr	r0, [r2, #4]
 801bc14:	6812      	ldr	r2, [r2, #0]
 801bc16:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801bc1a:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	; 0x8c
 801bc1e:	fb00 1303 	mla	r3, r0, r3, r1
 801bc22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bc26:	18d3      	adds	r3, r2, r3
 801bc28:	9309      	str	r3, [sp, #36]	; 0x24
 801bc2a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801bc2c:	681b      	ldr	r3, [r3, #0]
 801bc2e:	930e      	str	r3, [sp, #56]	; 0x38
 801bc30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bc32:	2b00      	cmp	r3, #0
 801bc34:	dc03      	bgt.n	801bc3e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801bc36:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801bc38:	2b00      	cmp	r3, #0
 801bc3a:	f340 8360 	ble.w	801c2fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801bc3e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801bc40:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801bc44:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801bc48:	1e48      	subs	r0, r1, #1
 801bc4a:	1e57      	subs	r7, r2, #1
 801bc4c:	9b06      	ldr	r3, [sp, #24]
 801bc4e:	2b00      	cmp	r3, #0
 801bc50:	f340 817b 	ble.w	801bf4a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 801bc54:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801bc58:	ea4f 4326 	mov.w	r3, r6, asr #16
 801bc5c:	d406      	bmi.n	801bc6c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801bc5e:	4584      	cmp	ip, r0
 801bc60:	da04      	bge.n	801bc6c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801bc62:	2b00      	cmp	r3, #0
 801bc64:	db02      	blt.n	801bc6c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801bc66:	42bb      	cmp	r3, r7
 801bc68:	f2c0 8170 	blt.w	801bf4c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801bc6c:	f11c 0c01 	adds.w	ip, ip, #1
 801bc70:	f100 8160 	bmi.w	801bf34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801bc74:	4561      	cmp	r1, ip
 801bc76:	f2c0 815d 	blt.w	801bf34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801bc7a:	3301      	adds	r3, #1
 801bc7c:	f100 815a 	bmi.w	801bf34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801bc80:	429a      	cmp	r2, r3
 801bc82:	f2c0 8157 	blt.w	801bf34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801bc86:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801bc8a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801bc8c:	f1b8 0f00 	cmp.w	r8, #0
 801bc90:	f340 8179 	ble.w	801bf86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801bc94:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801bc96:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801bc9a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801bc9c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801bca0:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801bca4:	142a      	asrs	r2, r5, #16
 801bca6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801bcaa:	689b      	ldr	r3, [r3, #8]
 801bcac:	f100 81be 	bmi.w	801c02c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801bcb0:	f103 39ff 	add.w	r9, r3, #4294967295
 801bcb4:	454a      	cmp	r2, r9
 801bcb6:	f280 81b9 	bge.w	801c02c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801bcba:	f1bc 0f00 	cmp.w	ip, #0
 801bcbe:	f2c0 81b5 	blt.w	801c02c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801bcc2:	f10e 39ff 	add.w	r9, lr, #4294967295
 801bcc6:	45cc      	cmp	ip, r9
 801bcc8:	f280 81b0 	bge.w	801c02c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801bccc:	b21b      	sxth	r3, r3
 801bcce:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801bcd0:	fb0c 2203 	mla	r2, ip, r3, r2
 801bcd4:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801bcd8:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801bcdc:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801bce0:	2900      	cmp	r1, #0
 801bce2:	f000 8197 	beq.w	801c014 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801bce6:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801bcea:	940a      	str	r4, [sp, #40]	; 0x28
 801bcec:	0e24      	lsrs	r4, r4, #24
 801bcee:	9411      	str	r4, [sp, #68]	; 0x44
 801bcf0:	b180      	cbz	r0, 801bd14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801bcf2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801bcf6:	3b01      	subs	r3, #1
 801bcf8:	009b      	lsls	r3, r3, #2
 801bcfa:	3304      	adds	r3, #4
 801bcfc:	eb09 0c03 	add.w	ip, r9, r3
 801bd00:	f859 3003 	ldr.w	r3, [r9, r3]
 801bd04:	9307      	str	r3, [sp, #28]
 801bd06:	0e1b      	lsrs	r3, r3, #24
 801bd08:	930f      	str	r3, [sp, #60]	; 0x3c
 801bd0a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801bd0e:	930b      	str	r3, [sp, #44]	; 0x2c
 801bd10:	0e1b      	lsrs	r3, r3, #24
 801bd12:	9312      	str	r3, [sp, #72]	; 0x48
 801bd14:	b289      	uxth	r1, r1
 801bd16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bd18:	b280      	uxth	r0, r0
 801bd1a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801bd1c:	fb01 fa00 	mul.w	sl, r1, r0
 801bd20:	0109      	lsls	r1, r1, #4
 801bd22:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801bd26:	eba1 090a 	sub.w	r9, r1, sl
 801bd2a:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801bd2e:	b280      	uxth	r0, r0
 801bd30:	fa1f f989 	uxth.w	r9, r9
 801bd34:	1a09      	subs	r1, r1, r0
 801bd36:	fb09 f303 	mul.w	r3, r9, r3
 801bd3a:	b289      	uxth	r1, r1
 801bd3c:	fb01 330e 	mla	r3, r1, lr, r3
 801bd40:	fb00 3304 	mla	r3, r0, r4, r3
 801bd44:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801bd46:	fb0a 3304 	mla	r3, sl, r4, r3
 801bd4a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801bd4e:	2b00      	cmp	r3, #0
 801bd50:	f000 80e8 	beq.w	801bf24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801bd54:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801bd58:	d01b      	beq.n	801bd92 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801bd5a:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 801bd5e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801bd62:	fb0e fb0b 	mul.w	fp, lr, fp
 801bd66:	fb0e fe02 	mul.w	lr, lr, r2
 801bd6a:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801bd6e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801bd72:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801bd76:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801bd7a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801bd7e:	445a      	add	r2, fp
 801bd80:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bd84:	0a12      	lsrs	r2, r2, #8
 801bd86:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801bd8a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801bd8e:	ea42 020c 	orr.w	r2, r2, ip
 801bd92:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801bd94:	2cff      	cmp	r4, #255	; 0xff
 801bd96:	d021      	beq.n	801bddc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801bd98:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801bd9a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801bd9e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801bda0:	fb04 fc0c 	mul.w	ip, r4, ip
 801bda4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801bda6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801bdaa:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801bdae:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801bdb0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801bdb4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bdb8:	fb04 fb0b 	mul.w	fp, r4, fp
 801bdbc:	44e6      	add	lr, ip
 801bdbe:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801bdc2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bdc6:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801bdca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bdce:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801bdd2:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801bdd6:	ea4e 040b 	orr.w	r4, lr, fp
 801bdda:	940a      	str	r4, [sp, #40]	; 0x28
 801bddc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801bdde:	2cff      	cmp	r4, #255	; 0xff
 801bde0:	d021      	beq.n	801be26 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801bde2:	9c07      	ldr	r4, [sp, #28]
 801bde4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801bde8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801bdea:	fb04 fc0c 	mul.w	ip, r4, ip
 801bdee:	9c07      	ldr	r4, [sp, #28]
 801bdf0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801bdf4:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801bdf8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801bdfa:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801bdfe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801be02:	fb04 fb0b 	mul.w	fp, r4, fp
 801be06:	44e6      	add	lr, ip
 801be08:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801be0c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801be10:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801be14:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801be18:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801be1c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801be20:	ea4e 040b 	orr.w	r4, lr, fp
 801be24:	9407      	str	r4, [sp, #28]
 801be26:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801be28:	2cff      	cmp	r4, #255	; 0xff
 801be2a:	d021      	beq.n	801be70 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801be2c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801be2e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801be32:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801be34:	fb04 fc0c 	mul.w	ip, r4, ip
 801be38:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801be3a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801be3e:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801be42:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801be44:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801be48:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801be4c:	fb04 fb0b 	mul.w	fp, r4, fp
 801be50:	44e6      	add	lr, ip
 801be52:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801be56:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801be5a:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801be5e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801be62:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801be66:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801be6a:	ea4e 040b 	orr.w	r4, lr, fp
 801be6e:	940b      	str	r4, [sp, #44]	; 0x2c
 801be70:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801be72:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801be76:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801be7a:	2bff      	cmp	r3, #255	; 0xff
 801be7c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801be80:	9c07      	ldr	r4, [sp, #28]
 801be82:	fb09 fc0c 	mul.w	ip, r9, ip
 801be86:	fb01 cc0e 	mla	ip, r1, lr, ip
 801be8a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801be8e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801be90:	fb00 cc0e 	mla	ip, r0, lr, ip
 801be94:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801be98:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801be9a:	fb0a cc0e 	mla	ip, sl, lr, ip
 801be9e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801bea2:	fb09 f90e 	mul.w	r9, r9, lr
 801bea6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801beaa:	fb01 9202 	mla	r2, r1, r2, r9
 801beae:	9907      	ldr	r1, [sp, #28]
 801beb0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801beb4:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 801beb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801beba:	fb00 220b 	mla	r2, r0, fp, r2
 801bebe:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801bec2:	fb0a 2a00 	mla	sl, sl, r0, r2
 801bec6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801beca:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801bece:	ea4c 0c0a 	orr.w	ip, ip, sl
 801bed2:	fa5f f08c 	uxtb.w	r0, ip
 801bed6:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801beda:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801bede:	f000 80a2 	beq.w	801c026 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801bee2:	43db      	mvns	r3, r3
 801bee4:	783a      	ldrb	r2, [r7, #0]
 801bee6:	f897 a002 	ldrb.w	sl, [r7, #2]
 801beea:	b2db      	uxtb	r3, r3
 801beec:	fb02 fe03 	mul.w	lr, r2, r3
 801bef0:	fb0a fa03 	mul.w	sl, sl, r3
 801bef4:	f10e 0201 	add.w	r2, lr, #1
 801bef8:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801befc:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801bf00:	703a      	strb	r2, [r7, #0]
 801bf02:	787a      	ldrb	r2, [r7, #1]
 801bf04:	fb02 f003 	mul.w	r0, r2, r3
 801bf08:	f10a 0301 	add.w	r3, sl, #1
 801bf0c:	1c42      	adds	r2, r0, #1
 801bf0e:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801bf12:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801bf16:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801bf1a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801bf1e:	707a      	strb	r2, [r7, #1]
 801bf20:	f887 c002 	strb.w	ip, [r7, #2]
 801bf24:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801bf26:	3703      	adds	r7, #3
 801bf28:	f108 38ff 	add.w	r8, r8, #4294967295
 801bf2c:	441d      	add	r5, r3
 801bf2e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801bf30:	441e      	add	r6, r3
 801bf32:	e6ab      	b.n	801bc8c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801bf34:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801bf36:	441d      	add	r5, r3
 801bf38:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801bf3a:	441e      	add	r6, r3
 801bf3c:	9b06      	ldr	r3, [sp, #24]
 801bf3e:	3b01      	subs	r3, #1
 801bf40:	9306      	str	r3, [sp, #24]
 801bf42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf44:	3303      	adds	r3, #3
 801bf46:	9309      	str	r3, [sp, #36]	; 0x24
 801bf48:	e680      	b.n	801bc4c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801bf4a:	d024      	beq.n	801bf96 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801bf4c:	9b06      	ldr	r3, [sp, #24]
 801bf4e:	9825      	ldr	r0, [sp, #148]	; 0x94
 801bf50:	3b01      	subs	r3, #1
 801bf52:	fb00 5003 	mla	r0, r0, r3, r5
 801bf56:	1400      	asrs	r0, r0, #16
 801bf58:	f53f ae95 	bmi.w	801bc86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801bf5c:	3901      	subs	r1, #1
 801bf5e:	4288      	cmp	r0, r1
 801bf60:	f6bf ae91 	bge.w	801bc86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801bf64:	9926      	ldr	r1, [sp, #152]	; 0x98
 801bf66:	fb01 6303 	mla	r3, r1, r3, r6
 801bf6a:	141b      	asrs	r3, r3, #16
 801bf6c:	f53f ae8b 	bmi.w	801bc86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801bf70:	3a01      	subs	r2, #1
 801bf72:	4293      	cmp	r3, r2
 801bf74:	f6bf ae87 	bge.w	801bc86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801bf78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf7a:	f8dd b018 	ldr.w	fp, [sp, #24]
 801bf7e:	1cdf      	adds	r7, r3, #3
 801bf80:	f1bb 0f00 	cmp.w	fp, #0
 801bf84:	dc6e      	bgt.n	801c064 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 801bf86:	9b06      	ldr	r3, [sp, #24]
 801bf88:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801bf8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf8e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bf92:	4423      	add	r3, r4
 801bf94:	9309      	str	r3, [sp, #36]	; 0x24
 801bf96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bf98:	2b00      	cmp	r3, #0
 801bf9a:	f340 81b0 	ble.w	801c2fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801bf9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bfa2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801bfa4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bfa8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bfac:	eef0 6a62 	vmov.f32	s13, s5
 801bfb0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801bfb4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bfb8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bfbc:	ee16 5a90 	vmov	r5, s13
 801bfc0:	eef0 6a43 	vmov.f32	s13, s6
 801bfc4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bfc8:	ee16 6a90 	vmov	r6, s13
 801bfcc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bfd0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bfd4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bfd8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bfdc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bfe0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bfe4:	ee12 2a90 	vmov	r2, s5
 801bfe8:	eef0 2a47 	vmov.f32	s5, s14
 801bfec:	fb92 f3f3 	sdiv	r3, r2, r3
 801bff0:	ee13 2a10 	vmov	r2, s6
 801bff4:	9325      	str	r3, [sp, #148]	; 0x94
 801bff6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801bff8:	eeb0 3a67 	vmov.f32	s6, s15
 801bffc:	fb92 f3f3 	sdiv	r3, r2, r3
 801c000:	9326      	str	r3, [sp, #152]	; 0x98
 801c002:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c004:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c006:	3b01      	subs	r3, #1
 801c008:	9315      	str	r3, [sp, #84]	; 0x54
 801c00a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c00c:	bf08      	it	eq
 801c00e:	4613      	moveq	r3, r2
 801c010:	9306      	str	r3, [sp, #24]
 801c012:	e60d      	b.n	801bc30 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801c014:	2800      	cmp	r0, #0
 801c016:	f43f ae7d 	beq.w	801bd14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801c01a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801c01e:	9307      	str	r3, [sp, #28]
 801c020:	0e1b      	lsrs	r3, r3, #24
 801c022:	930f      	str	r3, [sp, #60]	; 0x3c
 801c024:	e676      	b.n	801bd14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801c026:	7038      	strb	r0, [r7, #0]
 801c028:	7079      	strb	r1, [r7, #1]
 801c02a:	e779      	b.n	801bf20 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801c02c:	f112 0901 	adds.w	r9, r2, #1
 801c030:	f53f af78 	bmi.w	801bf24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801c034:	454b      	cmp	r3, r9
 801c036:	f6ff af75 	blt.w	801bf24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801c03a:	f11c 0901 	adds.w	r9, ip, #1
 801c03e:	f53f af71 	bmi.w	801bf24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801c042:	45ce      	cmp	lr, r9
 801c044:	f6ff af6e 	blt.w	801bf24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801c048:	b21b      	sxth	r3, r3
 801c04a:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801c04e:	fa0f f28e 	sxth.w	r2, lr
 801c052:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801c056:	9200      	str	r2, [sp, #0]
 801c058:	4639      	mov	r1, r7
 801c05a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c05c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801c05e:	f7ff fca1 	bl	801b9a4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801c062:	e75f      	b.n	801bf24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801c064:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c066:	1429      	asrs	r1, r5, #16
 801c068:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c06a:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801c06e:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 801c072:	1433      	asrs	r3, r6, #16
 801c074:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801c078:	fb0c 1303 	mla	r3, ip, r3, r1
 801c07c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801c07e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801c082:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801c086:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801c08a:	2a00      	cmp	r2, #0
 801c08c:	f000 8129 	beq.w	801c2e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 801c090:	684c      	ldr	r4, [r1, #4]
 801c092:	940c      	str	r4, [sp, #48]	; 0x30
 801c094:	0e24      	lsrs	r4, r4, #24
 801c096:	9413      	str	r4, [sp, #76]	; 0x4c
 801c098:	b198      	cbz	r0, 801c0c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801c09a:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 801c09e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c0a2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801c0a6:	f10c 0c04 	add.w	ip, ip, #4
 801c0aa:	eb01 080c 	add.w	r8, r1, ip
 801c0ae:	f851 100c 	ldr.w	r1, [r1, ip]
 801c0b2:	9108      	str	r1, [sp, #32]
 801c0b4:	0e09      	lsrs	r1, r1, #24
 801c0b6:	9110      	str	r1, [sp, #64]	; 0x40
 801c0b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801c0bc:	910d      	str	r1, [sp, #52]	; 0x34
 801c0be:	0e09      	lsrs	r1, r1, #24
 801c0c0:	9114      	str	r1, [sp, #80]	; 0x50
 801c0c2:	b292      	uxth	r2, r2
 801c0c4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c0c6:	b280      	uxth	r0, r0
 801c0c8:	fb02 f900 	mul.w	r9, r2, r0
 801c0cc:	0112      	lsls	r2, r2, #4
 801c0ce:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801c0d2:	eba2 0809 	sub.w	r8, r2, r9
 801c0d6:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801c0da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c0dc:	b280      	uxth	r0, r0
 801c0de:	fa1f f888 	uxth.w	r8, r8
 801c0e2:	1a09      	subs	r1, r1, r0
 801c0e4:	fb08 f202 	mul.w	r2, r8, r2
 801c0e8:	b289      	uxth	r1, r1
 801c0ea:	fb01 220e 	mla	r2, r1, lr, r2
 801c0ee:	fb00 2204 	mla	r2, r0, r4, r2
 801c0f2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c0f4:	fb09 2204 	mla	r2, r9, r4, r2
 801c0f8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801c0fc:	2a00      	cmp	r2, #0
 801c0fe:	f000 80e8 	beq.w	801c2d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 801c102:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801c106:	d01b      	beq.n	801c140 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 801c108:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801c10c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c110:	fb0e fa0a 	mul.w	sl, lr, sl
 801c114:	fb0e fe03 	mul.w	lr, lr, r3
 801c118:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801c11c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801c120:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801c124:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c128:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801c12c:	4453      	add	r3, sl
 801c12e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c132:	0a1b      	lsrs	r3, r3, #8
 801c134:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801c138:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c13c:	ea43 030c 	orr.w	r3, r3, ip
 801c140:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c142:	2cff      	cmp	r4, #255	; 0xff
 801c144:	d021      	beq.n	801c18a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 801c146:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c148:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c14c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c14e:	fb04 fc0c 	mul.w	ip, r4, ip
 801c152:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c154:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801c158:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c15c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c15e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c162:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c166:	fb04 fa0a 	mul.w	sl, r4, sl
 801c16a:	44e6      	add	lr, ip
 801c16c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801c170:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c174:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c178:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c17c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c180:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c184:	ea4e 040a 	orr.w	r4, lr, sl
 801c188:	940c      	str	r4, [sp, #48]	; 0x30
 801c18a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c18c:	2cff      	cmp	r4, #255	; 0xff
 801c18e:	d021      	beq.n	801c1d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 801c190:	9c08      	ldr	r4, [sp, #32]
 801c192:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c196:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c198:	fb04 fc0c 	mul.w	ip, r4, ip
 801c19c:	9c08      	ldr	r4, [sp, #32]
 801c19e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801c1a2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c1a4:	fb04 fa0e 	mul.w	sl, r4, lr
 801c1a8:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801c1ac:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c1b0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c1b4:	44e6      	add	lr, ip
 801c1b6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801c1ba:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c1be:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c1c2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c1c6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c1ca:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c1ce:	ea4e 040a 	orr.w	r4, lr, sl
 801c1d2:	9408      	str	r4, [sp, #32]
 801c1d4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c1d6:	2cff      	cmp	r4, #255	; 0xff
 801c1d8:	d021      	beq.n	801c21e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 801c1da:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801c1dc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c1e0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c1e2:	fb04 fc0c 	mul.w	ip, r4, ip
 801c1e6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801c1e8:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801c1ec:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c1f0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c1f2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c1f6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c1fa:	fb04 fa0a 	mul.w	sl, r4, sl
 801c1fe:	44e6      	add	lr, ip
 801c200:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801c204:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c208:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c20c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c210:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c214:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c218:	ea4e 040a 	orr.w	r4, lr, sl
 801c21c:	940d      	str	r4, [sp, #52]	; 0x34
 801c21e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c220:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801c224:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c228:	2aff      	cmp	r2, #255	; 0xff
 801c22a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c22e:	9c08      	ldr	r4, [sp, #32]
 801c230:	fb08 fc0c 	mul.w	ip, r8, ip
 801c234:	fb01 cc0e 	mla	ip, r1, lr, ip
 801c238:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801c23c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801c23e:	fb00 cc0e 	mla	ip, r0, lr, ip
 801c242:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801c246:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c248:	fb09 cc0e 	mla	ip, r9, lr, ip
 801c24c:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801c250:	fb08 f80e 	mul.w	r8, r8, lr
 801c254:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c258:	fb01 8303 	mla	r3, r1, r3, r8
 801c25c:	9908      	ldr	r1, [sp, #32]
 801c25e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c262:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801c266:	990d      	ldr	r1, [sp, #52]	; 0x34
 801c268:	fb00 330a 	mla	r3, r0, sl, r3
 801c26c:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 801c270:	fb09 3e0e 	mla	lr, r9, lr, r3
 801c274:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c278:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801c27c:	ea4c 0c0e 	orr.w	ip, ip, lr
 801c280:	fa5f f08c 	uxtb.w	r0, ip
 801c284:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801c288:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801c28c:	d032      	beq.n	801c2f4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 801c28e:	43d2      	mvns	r2, r2
 801c290:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 801c294:	b2d2      	uxtb	r2, r2
 801c296:	fb0e fe02 	mul.w	lr, lr, r2
 801c29a:	f10e 0301 	add.w	r3, lr, #1
 801c29e:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 801c2a2:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801c2a6:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 801c2aa:	4350      	muls	r0, r2
 801c2ac:	f807 3c03 	strb.w	r3, [r7, #-3]
 801c2b0:	1c43      	adds	r3, r0, #1
 801c2b2:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801c2b6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801c2ba:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801c2be:	4353      	muls	r3, r2
 801c2c0:	f807 1c02 	strb.w	r1, [r7, #-2]
 801c2c4:	1c5a      	adds	r2, r3, #1
 801c2c6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801c2ca:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801c2ce:	f807 cc01 	strb.w	ip, [r7, #-1]
 801c2d2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801c2d4:	3703      	adds	r7, #3
 801c2d6:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c2da:	441d      	add	r5, r3
 801c2dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c2de:	441e      	add	r6, r3
 801c2e0:	e64e      	b.n	801bf80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 801c2e2:	2800      	cmp	r0, #0
 801c2e4:	f43f aeed 	beq.w	801c0c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801c2e8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801c2ec:	9108      	str	r1, [sp, #32]
 801c2ee:	0e09      	lsrs	r1, r1, #24
 801c2f0:	9110      	str	r1, [sp, #64]	; 0x40
 801c2f2:	e6e6      	b.n	801c0c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801c2f4:	f807 0c03 	strb.w	r0, [r7, #-3]
 801c2f8:	f807 1c02 	strb.w	r1, [r7, #-2]
 801c2fc:	e7e7      	b.n	801c2ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 801c2fe:	b019      	add	sp, #100	; 0x64
 801c300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c304 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 801c304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c308:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 801c30c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801c310:	2c00      	cmp	r4, #0
 801c312:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801c316:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 801c31a:	fb00 4e03 	mla	lr, r0, r3, r4
 801c31e:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 801c322:	f2c0 80b8 	blt.w	801c496 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801c326:	45a1      	cmp	r9, r4
 801c328:	f340 80b5 	ble.w	801c496 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801c32c:	2800      	cmp	r0, #0
 801c32e:	f2c0 80b2 	blt.w	801c496 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801c332:	4580      	cmp	r8, r0
 801c334:	f340 80af 	ble.w	801c496 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801c338:	ea4f 055e 	mov.w	r5, lr, lsr #1
 801c33c:	f01e 0f01 	tst.w	lr, #1
 801c340:	5d56      	ldrb	r6, [r2, r5]
 801c342:	bf0c      	ite	eq
 801c344:	f006 060f 	andeq.w	r6, r6, #15
 801c348:	1136      	asrne	r6, r6, #4
 801c34a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801c34e:	b2f6      	uxtb	r6, r6
 801c350:	f114 0a01 	adds.w	sl, r4, #1
 801c354:	f100 80a1 	bmi.w	801c49a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801c358:	45d1      	cmp	r9, sl
 801c35a:	f340 809e 	ble.w	801c49a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801c35e:	2800      	cmp	r0, #0
 801c360:	f2c0 809b 	blt.w	801c49a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801c364:	4580      	cmp	r8, r0
 801c366:	f340 8098 	ble.w	801c49a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801c36a:	2f00      	cmp	r7, #0
 801c36c:	f000 8097 	beq.w	801c49e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 801c370:	f10e 0b01 	add.w	fp, lr, #1
 801c374:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801c378:	f01b 0f01 	tst.w	fp, #1
 801c37c:	5d55      	ldrb	r5, [r2, r5]
 801c37e:	bf0c      	ite	eq
 801c380:	f005 050f 	andeq.w	r5, r5, #15
 801c384:	112d      	asrne	r5, r5, #4
 801c386:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801c38a:	b2ed      	uxtb	r5, r5
 801c38c:	f1bc 0f00 	cmp.w	ip, #0
 801c390:	f000 8089 	beq.w	801c4a6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 801c394:	2c00      	cmp	r4, #0
 801c396:	f100 0001 	add.w	r0, r0, #1
 801c39a:	f2c0 8082 	blt.w	801c4a2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801c39e:	45a1      	cmp	r9, r4
 801c3a0:	dd7f      	ble.n	801c4a2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801c3a2:	2800      	cmp	r0, #0
 801c3a4:	db7d      	blt.n	801c4a2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801c3a6:	4580      	cmp	r8, r0
 801c3a8:	dd7b      	ble.n	801c4a2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801c3aa:	eb03 0b0e 	add.w	fp, r3, lr
 801c3ae:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801c3b2:	f01b 0f01 	tst.w	fp, #1
 801c3b6:	5d14      	ldrb	r4, [r2, r4]
 801c3b8:	bf0c      	ite	eq
 801c3ba:	f004 040f 	andeq.w	r4, r4, #15
 801c3be:	1124      	asrne	r4, r4, #4
 801c3c0:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801c3c4:	b2e4      	uxtb	r4, r4
 801c3c6:	f1ba 0f00 	cmp.w	sl, #0
 801c3ca:	db6f      	blt.n	801c4ac <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801c3cc:	45d1      	cmp	r9, sl
 801c3ce:	dd6d      	ble.n	801c4ac <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801c3d0:	2800      	cmp	r0, #0
 801c3d2:	db6b      	blt.n	801c4ac <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801c3d4:	4580      	cmp	r8, r0
 801c3d6:	dd69      	ble.n	801c4ac <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801c3d8:	2f00      	cmp	r7, #0
 801c3da:	d069      	beq.n	801c4b0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 801c3dc:	3301      	adds	r3, #1
 801c3de:	449e      	add	lr, r3
 801c3e0:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801c3e4:	f01e 0f01 	tst.w	lr, #1
 801c3e8:	5cd0      	ldrb	r0, [r2, r3]
 801c3ea:	bf0c      	ite	eq
 801c3ec:	f000 000f 	andeq.w	r0, r0, #15
 801c3f0:	1100      	asrne	r0, r0, #4
 801c3f2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801c3f6:	b2c3      	uxtb	r3, r0
 801c3f8:	b2ba      	uxth	r2, r7
 801c3fa:	fa1f fc8c 	uxth.w	ip, ip
 801c3fe:	fb02 f00c 	mul.w	r0, r2, ip
 801c402:	0112      	lsls	r2, r2, #4
 801c404:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 801c408:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801c40c:	1a12      	subs	r2, r2, r0
 801c40e:	fa1f fc8c 	uxth.w	ip, ip
 801c412:	b292      	uxth	r2, r2
 801c414:	eba7 070c 	sub.w	r7, r7, ip
 801c418:	436a      	muls	r2, r5
 801c41a:	b2bf      	uxth	r7, r7
 801c41c:	fb06 2207 	mla	r2, r6, r7, r2
 801c420:	fb0c 2404 	mla	r4, ip, r4, r2
 801c424:	fb00 4303 	mla	r3, r0, r3, r4
 801c428:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c42c:	b38b      	cbz	r3, 801c492 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 801c42e:	4a21      	ldr	r2, [pc, #132]	; (801c4b4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 801c430:	6814      	ldr	r4, [r2, #0]
 801c432:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 801c436:	b2e5      	uxtb	r5, r4
 801c438:	4353      	muls	r3, r2
 801c43a:	1c5a      	adds	r2, r3, #1
 801c43c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801c440:	1212      	asrs	r2, r2, #8
 801c442:	b290      	uxth	r0, r2
 801c444:	43d2      	mvns	r2, r2
 801c446:	fb15 f500 	smulbb	r5, r5, r0
 801c44a:	b2d3      	uxtb	r3, r2
 801c44c:	780a      	ldrb	r2, [r1, #0]
 801c44e:	fb02 5203 	mla	r2, r2, r3, r5
 801c452:	b292      	uxth	r2, r2
 801c454:	1c55      	adds	r5, r2, #1
 801c456:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801c45a:	784d      	ldrb	r5, [r1, #1]
 801c45c:	fb15 f503 	smulbb	r5, r5, r3
 801c460:	1212      	asrs	r2, r2, #8
 801c462:	700a      	strb	r2, [r1, #0]
 801c464:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801c468:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801c46c:	fb02 5200 	mla	r2, r2, r0, r5
 801c470:	b292      	uxth	r2, r2
 801c472:	1c55      	adds	r5, r2, #1
 801c474:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801c478:	1212      	asrs	r2, r2, #8
 801c47a:	704a      	strb	r2, [r1, #1]
 801c47c:	788a      	ldrb	r2, [r1, #2]
 801c47e:	fb12 f303 	smulbb	r3, r2, r3
 801c482:	fb04 3300 	mla	r3, r4, r0, r3
 801c486:	b29b      	uxth	r3, r3
 801c488:	1c5a      	adds	r2, r3, #1
 801c48a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c48e:	121b      	asrs	r3, r3, #8
 801c490:	708b      	strb	r3, [r1, #2]
 801c492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c496:	2600      	movs	r6, #0
 801c498:	e75a      	b.n	801c350 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 801c49a:	2500      	movs	r5, #0
 801c49c:	e776      	b.n	801c38c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801c49e:	463d      	mov	r5, r7
 801c4a0:	e774      	b.n	801c38c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801c4a2:	2400      	movs	r4, #0
 801c4a4:	e78f      	b.n	801c3c6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 801c4a6:	4663      	mov	r3, ip
 801c4a8:	4664      	mov	r4, ip
 801c4aa:	e7a5      	b.n	801c3f8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801c4ac:	2300      	movs	r3, #0
 801c4ae:	e7a3      	b.n	801c3f8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801c4b0:	463b      	mov	r3, r7
 801c4b2:	e7a1      	b.n	801c3f8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801c4b4:	2400e464 	.word	0x2400e464

0801c4b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4bc:	b097      	sub	sp, #92	; 0x5c
 801c4be:	9214      	str	r2, [sp, #80]	; 0x50
 801c4c0:	9309      	str	r3, [sp, #36]	; 0x24
 801c4c2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801c4c4:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801c4c8:	9015      	str	r0, [sp, #84]	; 0x54
 801c4ca:	910c      	str	r1, [sp, #48]	; 0x30
 801c4cc:	6850      	ldr	r0, [r2, #4]
 801c4ce:	930e      	str	r3, [sp, #56]	; 0x38
 801c4d0:	6812      	ldr	r2, [r2, #0]
 801c4d2:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801c4d6:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	; 0x84
 801c4da:	fb00 1303 	mla	r3, r0, r3, r1
 801c4de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c4e2:	eb02 0a03 	add.w	sl, r2, r3
 801c4e6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c4e8:	689b      	ldr	r3, [r3, #8]
 801c4ea:	3301      	adds	r3, #1
 801c4ec:	f023 0301 	bic.w	r3, r3, #1
 801c4f0:	930f      	str	r3, [sp, #60]	; 0x3c
 801c4f2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c4f4:	681f      	ldr	r7, [r3, #0]
 801c4f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c4f8:	2b00      	cmp	r3, #0
 801c4fa:	dc03      	bgt.n	801c504 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801c4fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c4fe:	2b00      	cmp	r3, #0
 801c500:	f340 8247 	ble.w	801c992 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801c504:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c506:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c50a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c50e:	1e48      	subs	r0, r1, #1
 801c510:	f102 3cff 	add.w	ip, r2, #4294967295
 801c514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c516:	2b00      	cmp	r3, #0
 801c518:	f340 80e5 	ble.w	801c6e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801c51c:	ea5f 4e25 	movs.w	lr, r5, asr #16
 801c520:	ea4f 4326 	mov.w	r3, r6, asr #16
 801c524:	d406      	bmi.n	801c534 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c526:	4586      	cmp	lr, r0
 801c528:	da04      	bge.n	801c534 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c52a:	2b00      	cmp	r3, #0
 801c52c:	db02      	blt.n	801c534 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c52e:	4563      	cmp	r3, ip
 801c530:	f2c0 80da 	blt.w	801c6e8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801c534:	f11e 0e01 	adds.w	lr, lr, #1
 801c538:	f100 80cb 	bmi.w	801c6d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801c53c:	4571      	cmp	r1, lr
 801c53e:	f2c0 80c8 	blt.w	801c6d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801c542:	3301      	adds	r3, #1
 801c544:	f100 80c5 	bmi.w	801c6d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801c548:	429a      	cmp	r2, r3
 801c54a:	f2c0 80c2 	blt.w	801c6d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801c54e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c550:	46d0      	mov	r8, sl
 801c552:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801c556:	930d      	str	r3, [sp, #52]	; 0x34
 801c558:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c55a:	2b00      	cmp	r3, #0
 801c55c:	f340 80e3 	ble.w	801c726 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801c560:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c562:	1430      	asrs	r0, r6, #16
 801c564:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801c568:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801c56c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801c570:	142b      	asrs	r3, r5, #16
 801c572:	f100 812e 	bmi.w	801c7d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801c576:	f10c 3bff 	add.w	fp, ip, #4294967295
 801c57a:	455b      	cmp	r3, fp
 801c57c:	f280 8129 	bge.w	801c7d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801c580:	2800      	cmp	r0, #0
 801c582:	f2c0 8126 	blt.w	801c7d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801c586:	f10e 3bff 	add.w	fp, lr, #4294967295
 801c58a:	4558      	cmp	r0, fp
 801c58c:	f280 8121 	bge.w	801c7d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801c590:	fb00 3309 	mla	r3, r0, r9, r3
 801c594:	0858      	lsrs	r0, r3, #1
 801c596:	07dc      	lsls	r4, r3, #31
 801c598:	f817 c000 	ldrb.w	ip, [r7, r0]
 801c59c:	bf54      	ite	pl
 801c59e:	f00c 0c0f 	andpl.w	ip, ip, #15
 801c5a2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801c5a6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801c5aa:	fa5f fc8c 	uxtb.w	ip, ip
 801c5ae:	2a00      	cmp	r2, #0
 801c5b0:	f000 80fe 	beq.w	801c7b0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801c5b4:	1c58      	adds	r0, r3, #1
 801c5b6:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801c5ba:	07c0      	lsls	r0, r0, #31
 801c5bc:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801c5c0:	bf54      	ite	pl
 801c5c2:	f00e 0e0f 	andpl.w	lr, lr, #15
 801c5c6:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801c5ca:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801c5ce:	fa5f f08e 	uxtb.w	r0, lr
 801c5d2:	9010      	str	r0, [sp, #64]	; 0x40
 801c5d4:	b1d9      	cbz	r1, 801c60e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801c5d6:	444b      	add	r3, r9
 801c5d8:	0858      	lsrs	r0, r3, #1
 801c5da:	07dc      	lsls	r4, r3, #31
 801c5dc:	f103 0301 	add.w	r3, r3, #1
 801c5e0:	5c38      	ldrb	r0, [r7, r0]
 801c5e2:	bf54      	ite	pl
 801c5e4:	f000 000f 	andpl.w	r0, r0, #15
 801c5e8:	1100      	asrmi	r0, r0, #4
 801c5ea:	07dc      	lsls	r4, r3, #31
 801c5ec:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801c5f0:	b2c0      	uxtb	r0, r0
 801c5f2:	900a      	str	r0, [sp, #40]	; 0x28
 801c5f4:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801c5f8:	f817 e000 	ldrb.w	lr, [r7, r0]
 801c5fc:	bf54      	ite	pl
 801c5fe:	f00e 030f 	andpl.w	r3, lr, #15
 801c602:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801c606:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801c60a:	b2db      	uxtb	r3, r3
 801c60c:	9311      	str	r3, [sp, #68]	; 0x44
 801c60e:	b292      	uxth	r2, r2
 801c610:	b289      	uxth	r1, r1
 801c612:	0113      	lsls	r3, r2, #4
 801c614:	fb02 f001 	mul.w	r0, r2, r1
 801c618:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c61a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801c61e:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 801c622:	1a1b      	subs	r3, r3, r0
 801c624:	b289      	uxth	r1, r1
 801c626:	b29b      	uxth	r3, r3
 801c628:	ebae 0e01 	sub.w	lr, lr, r1
 801c62c:	4353      	muls	r3, r2
 801c62e:	fa1f fe8e 	uxth.w	lr, lr
 801c632:	fb0c 320e 	mla	r2, ip, lr, r3
 801c636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c638:	fb01 2203 	mla	r2, r1, r3, r2
 801c63c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c63e:	fb00 2203 	mla	r2, r0, r3, r2
 801c642:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801c646:	2a00      	cmp	r2, #0
 801c648:	d039      	beq.n	801c6be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801c64a:	4bc7      	ldr	r3, [pc, #796]	; (801c968 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801c64c:	6819      	ldr	r1, [r3, #0]
 801c64e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c650:	fa5f fc81 	uxtb.w	ip, r1
 801c654:	435a      	muls	r2, r3
 801c656:	1c53      	adds	r3, r2, #1
 801c658:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801c65c:	1212      	asrs	r2, r2, #8
 801c65e:	b290      	uxth	r0, r2
 801c660:	43d2      	mvns	r2, r2
 801c662:	fb1c fc00 	smulbb	ip, ip, r0
 801c666:	b2d3      	uxtb	r3, r2
 801c668:	f898 2000 	ldrb.w	r2, [r8]
 801c66c:	fb02 c203 	mla	r2, r2, r3, ip
 801c670:	b292      	uxth	r2, r2
 801c672:	f102 0c01 	add.w	ip, r2, #1
 801c676:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801c67a:	f898 c001 	ldrb.w	ip, [r8, #1]
 801c67e:	fb1c fc03 	smulbb	ip, ip, r3
 801c682:	1212      	asrs	r2, r2, #8
 801c684:	f888 2000 	strb.w	r2, [r8]
 801c688:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801c68c:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801c690:	fb02 c200 	mla	r2, r2, r0, ip
 801c694:	b292      	uxth	r2, r2
 801c696:	f102 0c01 	add.w	ip, r2, #1
 801c69a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801c69e:	1212      	asrs	r2, r2, #8
 801c6a0:	f888 2001 	strb.w	r2, [r8, #1]
 801c6a4:	f898 2002 	ldrb.w	r2, [r8, #2]
 801c6a8:	fb12 f303 	smulbb	r3, r2, r3
 801c6ac:	fb01 3300 	mla	r3, r1, r0, r3
 801c6b0:	b29b      	uxth	r3, r3
 801c6b2:	1c5a      	adds	r2, r3, #1
 801c6b4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c6b8:	121b      	asrs	r3, r3, #8
 801c6ba:	f888 3002 	strb.w	r3, [r8, #2]
 801c6be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c6c0:	f108 0803 	add.w	r8, r8, #3
 801c6c4:	441d      	add	r5, r3
 801c6c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c6c8:	441e      	add	r6, r3
 801c6ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c6cc:	3b01      	subs	r3, #1
 801c6ce:	930d      	str	r3, [sp, #52]	; 0x34
 801c6d0:	e742      	b.n	801c558 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c6d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c6d4:	f10a 0a03 	add.w	sl, sl, #3
 801c6d8:	441d      	add	r5, r3
 801c6da:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c6dc:	441e      	add	r6, r3
 801c6de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c6e0:	3b01      	subs	r3, #1
 801c6e2:	9309      	str	r3, [sp, #36]	; 0x24
 801c6e4:	e716      	b.n	801c514 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c6e6:	d024      	beq.n	801c732 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801c6e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c6ea:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801c6ec:	3b01      	subs	r3, #1
 801c6ee:	fb00 5003 	mla	r0, r0, r3, r5
 801c6f2:	1400      	asrs	r0, r0, #16
 801c6f4:	f53f af2b 	bmi.w	801c54e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c6f8:	3901      	subs	r1, #1
 801c6fa:	4288      	cmp	r0, r1
 801c6fc:	f6bf af27 	bge.w	801c54e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c700:	9924      	ldr	r1, [sp, #144]	; 0x90
 801c702:	fb01 6303 	mla	r3, r1, r3, r6
 801c706:	141b      	asrs	r3, r3, #16
 801c708:	f53f af21 	bmi.w	801c54e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c70c:	3a01      	subs	r2, #1
 801c70e:	4293      	cmp	r3, r2
 801c710:	f6bf af1d 	bge.w	801c54e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c714:	f10a 0e03 	add.w	lr, sl, #3
 801c718:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801c71c:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801c720:	f1b8 0f00 	cmp.w	r8, #0
 801c724:	dc76      	bgt.n	801c814 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 801c726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c728:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801c72c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c730:	44a2      	add	sl, r4
 801c732:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c734:	2b00      	cmp	r3, #0
 801c736:	f340 812c 	ble.w	801c992 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801c73a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c73e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c740:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c744:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c748:	eef0 6a62 	vmov.f32	s13, s5
 801c74c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c750:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c754:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c758:	ee16 5a90 	vmov	r5, s13
 801c75c:	eef0 6a43 	vmov.f32	s13, s6
 801c760:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c764:	ee16 6a90 	vmov	r6, s13
 801c768:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c76c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c770:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c774:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c778:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c77c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c780:	ee12 2a90 	vmov	r2, s5
 801c784:	eef0 2a47 	vmov.f32	s5, s14
 801c788:	fb92 f3f3 	sdiv	r3, r2, r3
 801c78c:	ee13 2a10 	vmov	r2, s6
 801c790:	9323      	str	r3, [sp, #140]	; 0x8c
 801c792:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c794:	eeb0 3a67 	vmov.f32	s6, s15
 801c798:	fb92 f3f3 	sdiv	r3, r2, r3
 801c79c:	9324      	str	r3, [sp, #144]	; 0x90
 801c79e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c7a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c7a2:	3b01      	subs	r3, #1
 801c7a4:	930c      	str	r3, [sp, #48]	; 0x30
 801c7a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c7a8:	bf08      	it	eq
 801c7aa:	4613      	moveq	r3, r2
 801c7ac:	9309      	str	r3, [sp, #36]	; 0x24
 801c7ae:	e6a2      	b.n	801c4f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801c7b0:	2900      	cmp	r1, #0
 801c7b2:	f43f af2c 	beq.w	801c60e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801c7b6:	eb09 0003 	add.w	r0, r9, r3
 801c7ba:	0843      	lsrs	r3, r0, #1
 801c7bc:	07c0      	lsls	r0, r0, #31
 801c7be:	5cfb      	ldrb	r3, [r7, r3]
 801c7c0:	bf54      	ite	pl
 801c7c2:	f003 030f 	andpl.w	r3, r3, #15
 801c7c6:	111b      	asrmi	r3, r3, #4
 801c7c8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801c7cc:	b2db      	uxtb	r3, r3
 801c7ce:	930a      	str	r3, [sp, #40]	; 0x28
 801c7d0:	e71d      	b.n	801c60e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801c7d2:	f113 0b01 	adds.w	fp, r3, #1
 801c7d6:	f53f af72 	bmi.w	801c6be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801c7da:	45dc      	cmp	ip, fp
 801c7dc:	f6ff af6f 	blt.w	801c6be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801c7e0:	f110 0b01 	adds.w	fp, r0, #1
 801c7e4:	f53f af6b 	bmi.w	801c6be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801c7e8:	45de      	cmp	lr, fp
 801c7ea:	f6ff af68 	blt.w	801c6be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801c7ee:	9302      	str	r3, [sp, #8]
 801c7f0:	fa0f f38e 	sxth.w	r3, lr
 801c7f4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c7f6:	9301      	str	r3, [sp, #4]
 801c7f8:	fa0f f38c 	sxth.w	r3, ip
 801c7fc:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801c800:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801c804:	9300      	str	r3, [sp, #0]
 801c806:	463a      	mov	r2, r7
 801c808:	464b      	mov	r3, r9
 801c80a:	4641      	mov	r1, r8
 801c80c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801c80e:	f7ff fd79 	bl	801c304 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 801c812:	e754      	b.n	801c6be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801c814:	142a      	asrs	r2, r5, #16
 801c816:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801c81a:	1433      	asrs	r3, r6, #16
 801c81c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801c820:	fb09 2303 	mla	r3, r9, r3, r2
 801c824:	085a      	lsrs	r2, r3, #1
 801c826:	07dc      	lsls	r4, r3, #31
 801c828:	5cba      	ldrb	r2, [r7, r2]
 801c82a:	bf54      	ite	pl
 801c82c:	f002 020f 	andpl.w	r2, r2, #15
 801c830:	1112      	asrmi	r2, r2, #4
 801c832:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c836:	b2d2      	uxtb	r2, r2
 801c838:	2900      	cmp	r1, #0
 801c83a:	f000 8097 	beq.w	801c96c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801c83e:	f103 0b01 	add.w	fp, r3, #1
 801c842:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 801c846:	f01b 0f01 	tst.w	fp, #1
 801c84a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801c84e:	bf0c      	ite	eq
 801c850:	f00c 0c0f 	andeq.w	ip, ip, #15
 801c854:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801c858:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801c85c:	fa5f f48c 	uxtb.w	r4, ip
 801c860:	9412      	str	r4, [sp, #72]	; 0x48
 801c862:	b300      	cbz	r0, 801c8a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801c864:	444b      	add	r3, r9
 801c866:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801c86a:	07dc      	lsls	r4, r3, #31
 801c86c:	f103 0301 	add.w	r3, r3, #1
 801c870:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801c874:	bf54      	ite	pl
 801c876:	f00c 0c0f 	andpl.w	ip, ip, #15
 801c87a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801c87e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801c882:	fa5f f48c 	uxtb.w	r4, ip
 801c886:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801c88a:	940b      	str	r4, [sp, #44]	; 0x2c
 801c88c:	07dc      	lsls	r4, r3, #31
 801c88e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801c892:	bf54      	ite	pl
 801c894:	f00c 0c0f 	andpl.w	ip, ip, #15
 801c898:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801c89c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801c8a0:	fa5f f38c 	uxtb.w	r3, ip
 801c8a4:	9313      	str	r3, [sp, #76]	; 0x4c
 801c8a6:	b289      	uxth	r1, r1
 801c8a8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c8aa:	b280      	uxth	r0, r0
 801c8ac:	fb01 f300 	mul.w	r3, r1, r0
 801c8b0:	0109      	lsls	r1, r1, #4
 801c8b2:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801c8b6:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 801c8ba:	1ac9      	subs	r1, r1, r3
 801c8bc:	b280      	uxth	r0, r0
 801c8be:	b289      	uxth	r1, r1
 801c8c0:	ebac 0c00 	sub.w	ip, ip, r0
 801c8c4:	4361      	muls	r1, r4
 801c8c6:	fa1f fc8c 	uxth.w	ip, ip
 801c8ca:	fb02 120c 	mla	r2, r2, ip, r1
 801c8ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c8d0:	fb00 2001 	mla	r0, r0, r1, r2
 801c8d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c8d6:	fb03 0302 	mla	r3, r3, r2, r0
 801c8da:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c8de:	2b00      	cmp	r3, #0
 801c8e0:	d039      	beq.n	801c956 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801c8e2:	4a21      	ldr	r2, [pc, #132]	; (801c968 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801c8e4:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801c8e8:	6810      	ldr	r0, [r2, #0]
 801c8ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c8ec:	fa5f fc80 	uxtb.w	ip, r0
 801c8f0:	4353      	muls	r3, r2
 801c8f2:	1c5a      	adds	r2, r3, #1
 801c8f4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c8f8:	121b      	asrs	r3, r3, #8
 801c8fa:	b29a      	uxth	r2, r3
 801c8fc:	43db      	mvns	r3, r3
 801c8fe:	fb1c fc02 	smulbb	ip, ip, r2
 801c902:	b2db      	uxtb	r3, r3
 801c904:	fb01 c103 	mla	r1, r1, r3, ip
 801c908:	b289      	uxth	r1, r1
 801c90a:	f101 0c01 	add.w	ip, r1, #1
 801c90e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801c912:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 801c916:	fb1c fc03 	smulbb	ip, ip, r3
 801c91a:	1209      	asrs	r1, r1, #8
 801c91c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801c920:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801c924:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801c928:	fb01 c102 	mla	r1, r1, r2, ip
 801c92c:	b289      	uxth	r1, r1
 801c92e:	f101 0c01 	add.w	ip, r1, #1
 801c932:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801c936:	1209      	asrs	r1, r1, #8
 801c938:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801c93c:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801c940:	fb11 f303 	smulbb	r3, r1, r3
 801c944:	fb00 3002 	mla	r0, r0, r2, r3
 801c948:	b280      	uxth	r0, r0
 801c94a:	1c42      	adds	r2, r0, #1
 801c94c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801c950:	1200      	asrs	r0, r0, #8
 801c952:	f80e 0c01 	strb.w	r0, [lr, #-1]
 801c956:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c958:	f10e 0e03 	add.w	lr, lr, #3
 801c95c:	f108 38ff 	add.w	r8, r8, #4294967295
 801c960:	441d      	add	r5, r3
 801c962:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c964:	441e      	add	r6, r3
 801c966:	e6db      	b.n	801c720 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801c968:	2400e464 	.word	0x2400e464
 801c96c:	2800      	cmp	r0, #0
 801c96e:	d09a      	beq.n	801c8a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801c970:	444b      	add	r3, r9
 801c972:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801c976:	07db      	lsls	r3, r3, #31
 801c978:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801c97c:	bf54      	ite	pl
 801c97e:	f00c 0c0f 	andpl.w	ip, ip, #15
 801c982:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801c986:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801c98a:	fa5f f38c 	uxtb.w	r3, ip
 801c98e:	930b      	str	r3, [sp, #44]	; 0x2c
 801c990:	e789      	b.n	801c8a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801c992:	b017      	add	sp, #92	; 0x5c
 801c994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c998 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 801c998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c99c:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 801c9a0:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801c9a4:	2d00      	cmp	r5, #0
 801c9a6:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801c9aa:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 801c9ae:	fb04 5e03 	mla	lr, r4, r3, r5
 801c9b2:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 801c9b6:	f2c0 80b1 	blt.w	801cb1c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801c9ba:	45a9      	cmp	r9, r5
 801c9bc:	f340 80ae 	ble.w	801cb1c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801c9c0:	2c00      	cmp	r4, #0
 801c9c2:	f2c0 80ab 	blt.w	801cb1c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801c9c6:	45a0      	cmp	r8, r4
 801c9c8:	f340 80a8 	ble.w	801cb1c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801c9cc:	ea4f 065e 	mov.w	r6, lr, lsr #1
 801c9d0:	f01e 0f01 	tst.w	lr, #1
 801c9d4:	5d97      	ldrb	r7, [r2, r6]
 801c9d6:	bf0c      	ite	eq
 801c9d8:	f007 070f 	andeq.w	r7, r7, #15
 801c9dc:	113f      	asrne	r7, r7, #4
 801c9de:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 801c9e2:	b2ff      	uxtb	r7, r7
 801c9e4:	f115 0a01 	adds.w	sl, r5, #1
 801c9e8:	f100 809a 	bmi.w	801cb20 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801c9ec:	45d1      	cmp	r9, sl
 801c9ee:	f340 8097 	ble.w	801cb20 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801c9f2:	2c00      	cmp	r4, #0
 801c9f4:	f2c0 8094 	blt.w	801cb20 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801c9f8:	45a0      	cmp	r8, r4
 801c9fa:	f340 8091 	ble.w	801cb20 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801c9fe:	2800      	cmp	r0, #0
 801ca00:	f000 8090 	beq.w	801cb24 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 801ca04:	f10e 0b01 	add.w	fp, lr, #1
 801ca08:	ea4f 065b 	mov.w	r6, fp, lsr #1
 801ca0c:	f01b 0f01 	tst.w	fp, #1
 801ca10:	5d96      	ldrb	r6, [r2, r6]
 801ca12:	bf0c      	ite	eq
 801ca14:	f006 060f 	andeq.w	r6, r6, #15
 801ca18:	1136      	asrne	r6, r6, #4
 801ca1a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801ca1e:	b2f6      	uxtb	r6, r6
 801ca20:	f1bc 0f00 	cmp.w	ip, #0
 801ca24:	f000 8082 	beq.w	801cb2c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 801ca28:	2d00      	cmp	r5, #0
 801ca2a:	f104 0401 	add.w	r4, r4, #1
 801ca2e:	db7b      	blt.n	801cb28 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801ca30:	45a9      	cmp	r9, r5
 801ca32:	dd79      	ble.n	801cb28 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801ca34:	2c00      	cmp	r4, #0
 801ca36:	db77      	blt.n	801cb28 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801ca38:	45a0      	cmp	r8, r4
 801ca3a:	dd75      	ble.n	801cb28 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801ca3c:	eb03 0b0e 	add.w	fp, r3, lr
 801ca40:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801ca44:	f01b 0f01 	tst.w	fp, #1
 801ca48:	5d55      	ldrb	r5, [r2, r5]
 801ca4a:	bf0c      	ite	eq
 801ca4c:	f005 050f 	andeq.w	r5, r5, #15
 801ca50:	112d      	asrne	r5, r5, #4
 801ca52:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801ca56:	b2ed      	uxtb	r5, r5
 801ca58:	f1ba 0f00 	cmp.w	sl, #0
 801ca5c:	db69      	blt.n	801cb32 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801ca5e:	45d1      	cmp	r9, sl
 801ca60:	dd67      	ble.n	801cb32 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801ca62:	2c00      	cmp	r4, #0
 801ca64:	db65      	blt.n	801cb32 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801ca66:	45a0      	cmp	r8, r4
 801ca68:	dd63      	ble.n	801cb32 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801ca6a:	2800      	cmp	r0, #0
 801ca6c:	d063      	beq.n	801cb36 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 801ca6e:	3301      	adds	r3, #1
 801ca70:	449e      	add	lr, r3
 801ca72:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801ca76:	f01e 0f01 	tst.w	lr, #1
 801ca7a:	5cd4      	ldrb	r4, [r2, r3]
 801ca7c:	bf0c      	ite	eq
 801ca7e:	f004 040f 	andeq.w	r4, r4, #15
 801ca82:	1124      	asrne	r4, r4, #4
 801ca84:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801ca88:	b2e3      	uxtb	r3, r4
 801ca8a:	b282      	uxth	r2, r0
 801ca8c:	fa1f fc8c 	uxth.w	ip, ip
 801ca90:	fb02 f40c 	mul.w	r4, r2, ip
 801ca94:	0112      	lsls	r2, r2, #4
 801ca96:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 801ca9a:	fa1f f08c 	uxth.w	r0, ip
 801ca9e:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 801caa2:	1b12      	subs	r2, r2, r4
 801caa4:	ebac 0c00 	sub.w	ip, ip, r0
 801caa8:	b292      	uxth	r2, r2
 801caaa:	fa1f fc8c 	uxth.w	ip, ip
 801caae:	4372      	muls	r2, r6
 801cab0:	fb07 220c 	mla	r2, r7, ip, r2
 801cab4:	fb00 2005 	mla	r0, r0, r5, r2
 801cab8:	fb04 0303 	mla	r3, r4, r3, r0
 801cabc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801cac0:	b353      	cbz	r3, 801cb18 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 801cac2:	4a1e      	ldr	r2, [pc, #120]	; (801cb3c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 801cac4:	7808      	ldrb	r0, [r1, #0]
 801cac6:	6814      	ldr	r4, [r2, #0]
 801cac8:	b29a      	uxth	r2, r3
 801caca:	43db      	mvns	r3, r3
 801cacc:	b2e5      	uxtb	r5, r4
 801cace:	b2db      	uxtb	r3, r3
 801cad0:	fb15 f502 	smulbb	r5, r5, r2
 801cad4:	fb00 5003 	mla	r0, r0, r3, r5
 801cad8:	b280      	uxth	r0, r0
 801cada:	1c45      	adds	r5, r0, #1
 801cadc:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801cae0:	784d      	ldrb	r5, [r1, #1]
 801cae2:	fb15 f503 	smulbb	r5, r5, r3
 801cae6:	1200      	asrs	r0, r0, #8
 801cae8:	7008      	strb	r0, [r1, #0]
 801caea:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801caee:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801caf2:	fb00 5002 	mla	r0, r0, r2, r5
 801caf6:	b280      	uxth	r0, r0
 801caf8:	1c45      	adds	r5, r0, #1
 801cafa:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801cafe:	1200      	asrs	r0, r0, #8
 801cb00:	7048      	strb	r0, [r1, #1]
 801cb02:	7888      	ldrb	r0, [r1, #2]
 801cb04:	fb10 f303 	smulbb	r3, r0, r3
 801cb08:	fb04 3202 	mla	r2, r4, r2, r3
 801cb0c:	b292      	uxth	r2, r2
 801cb0e:	1c53      	adds	r3, r2, #1
 801cb10:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801cb14:	1212      	asrs	r2, r2, #8
 801cb16:	708a      	strb	r2, [r1, #2]
 801cb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb1c:	2700      	movs	r7, #0
 801cb1e:	e761      	b.n	801c9e4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 801cb20:	2600      	movs	r6, #0
 801cb22:	e77d      	b.n	801ca20 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801cb24:	4606      	mov	r6, r0
 801cb26:	e77b      	b.n	801ca20 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801cb28:	2500      	movs	r5, #0
 801cb2a:	e795      	b.n	801ca58 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 801cb2c:	4663      	mov	r3, ip
 801cb2e:	4665      	mov	r5, ip
 801cb30:	e7ab      	b.n	801ca8a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801cb32:	2300      	movs	r3, #0
 801cb34:	e7a9      	b.n	801ca8a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801cb36:	4603      	mov	r3, r0
 801cb38:	e7a7      	b.n	801ca8a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801cb3a:	bf00      	nop
 801cb3c:	2400e464 	.word	0x2400e464

0801cb40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb44:	b093      	sub	sp, #76	; 0x4c
 801cb46:	461c      	mov	r4, r3
 801cb48:	920c      	str	r2, [sp, #48]	; 0x30
 801cb4a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801cb4c:	9011      	str	r0, [sp, #68]	; 0x44
 801cb4e:	9107      	str	r1, [sp, #28]
 801cb50:	6850      	ldr	r0, [r2, #4]
 801cb52:	6812      	ldr	r2, [r2, #0]
 801cb54:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801cb58:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	; 0x74
 801cb5c:	fb00 1303 	mla	r3, r0, r3, r1
 801cb60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cb64:	eb02 0b03 	add.w	fp, r2, r3
 801cb68:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cb6a:	689b      	ldr	r3, [r3, #8]
 801cb6c:	3301      	adds	r3, #1
 801cb6e:	f023 0301 	bic.w	r3, r3, #1
 801cb72:	9309      	str	r3, [sp, #36]	; 0x24
 801cb74:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cb76:	f8d3 8000 	ldr.w	r8, [r3]
 801cb7a:	9b07      	ldr	r3, [sp, #28]
 801cb7c:	2b00      	cmp	r3, #0
 801cb7e:	dc03      	bgt.n	801cb88 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801cb80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cb82:	2b00      	cmp	r3, #0
 801cb84:	f340 822b 	ble.w	801cfde <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801cb88:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cb8a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801cb8e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801cb92:	1e48      	subs	r0, r1, #1
 801cb94:	1e57      	subs	r7, r2, #1
 801cb96:	2c00      	cmp	r4, #0
 801cb98:	f340 80d7 	ble.w	801cd4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801cb9c:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801cba0:	ea4f 4326 	mov.w	r3, r6, asr #16
 801cba4:	d406      	bmi.n	801cbb4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801cba6:	4584      	cmp	ip, r0
 801cba8:	da04      	bge.n	801cbb4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801cbaa:	2b00      	cmp	r3, #0
 801cbac:	db02      	blt.n	801cbb4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801cbae:	42bb      	cmp	r3, r7
 801cbb0:	f2c0 80cc 	blt.w	801cd4c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801cbb4:	f11c 0c01 	adds.w	ip, ip, #1
 801cbb8:	f100 80bf 	bmi.w	801cd3a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801cbbc:	4561      	cmp	r1, ip
 801cbbe:	f2c0 80bc 	blt.w	801cd3a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801cbc2:	3301      	adds	r3, #1
 801cbc4:	f100 80b9 	bmi.w	801cd3a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801cbc8:	429a      	cmp	r2, r3
 801cbca:	f2c0 80b6 	blt.w	801cd3a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801cbce:	46a2      	mov	sl, r4
 801cbd0:	465f      	mov	r7, fp
 801cbd2:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801cbd6:	f1ba 0f00 	cmp.w	sl, #0
 801cbda:	f340 80d4 	ble.w	801cd86 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801cbde:	f3c5 3303 	ubfx	r3, r5, #12, #4
 801cbe2:	1430      	asrs	r0, r6, #16
 801cbe4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801cbe8:	9308      	str	r3, [sp, #32]
 801cbea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cbec:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801cbf0:	142b      	asrs	r3, r5, #16
 801cbf2:	f100 8124 	bmi.w	801ce3e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801cbf6:	f10c 32ff 	add.w	r2, ip, #4294967295
 801cbfa:	4293      	cmp	r3, r2
 801cbfc:	f280 811f 	bge.w	801ce3e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801cc00:	2800      	cmp	r0, #0
 801cc02:	f2c0 811c 	blt.w	801ce3e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801cc06:	f10e 32ff 	add.w	r2, lr, #4294967295
 801cc0a:	4290      	cmp	r0, r2
 801cc0c:	f280 8117 	bge.w	801ce3e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801cc10:	fb00 3309 	mla	r3, r0, r9, r3
 801cc14:	0858      	lsrs	r0, r3, #1
 801cc16:	07da      	lsls	r2, r3, #31
 801cc18:	9a08      	ldr	r2, [sp, #32]
 801cc1a:	f818 c000 	ldrb.w	ip, [r8, r0]
 801cc1e:	bf54      	ite	pl
 801cc20:	f00c 0c0f 	andpl.w	ip, ip, #15
 801cc24:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801cc28:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801cc2c:	fa5f fc8c 	uxtb.w	ip, ip
 801cc30:	2a00      	cmp	r2, #0
 801cc32:	f000 80ed 	beq.w	801ce10 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 801cc36:	1c58      	adds	r0, r3, #1
 801cc38:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801cc3c:	07c0      	lsls	r0, r0, #31
 801cc3e:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801cc42:	bf54      	ite	pl
 801cc44:	f00e 0e0f 	andpl.w	lr, lr, #15
 801cc48:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801cc4c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801cc50:	fa5f fe8e 	uxtb.w	lr, lr
 801cc54:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 801cc58:	b1c9      	cbz	r1, 801cc8e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801cc5a:	444b      	add	r3, r9
 801cc5c:	0858      	lsrs	r0, r3, #1
 801cc5e:	07da      	lsls	r2, r3, #31
 801cc60:	f818 0000 	ldrb.w	r0, [r8, r0]
 801cc64:	bf54      	ite	pl
 801cc66:	f000 000f 	andpl.w	r0, r0, #15
 801cc6a:	1100      	asrmi	r0, r0, #4
 801cc6c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801cc70:	b2c0      	uxtb	r0, r0
 801cc72:	900a      	str	r0, [sp, #40]	; 0x28
 801cc74:	1c58      	adds	r0, r3, #1
 801cc76:	0843      	lsrs	r3, r0, #1
 801cc78:	07c2      	lsls	r2, r0, #31
 801cc7a:	f818 3003 	ldrb.w	r3, [r8, r3]
 801cc7e:	bf54      	ite	pl
 801cc80:	f003 030f 	andpl.w	r3, r3, #15
 801cc84:	111b      	asrmi	r3, r3, #4
 801cc86:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801cc8a:	b2db      	uxtb	r3, r3
 801cc8c:	930e      	str	r3, [sp, #56]	; 0x38
 801cc8e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801cc92:	b289      	uxth	r1, r1
 801cc94:	fb02 f301 	mul.w	r3, r2, r1
 801cc98:	0112      	lsls	r2, r2, #4
 801cc9a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801cc9e:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801cca2:	1ad2      	subs	r2, r2, r3
 801cca4:	b289      	uxth	r1, r1
 801cca6:	b292      	uxth	r2, r2
 801cca8:	1a40      	subs	r0, r0, r1
 801ccaa:	fa1f fe80 	uxth.w	lr, r0
 801ccae:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ccb0:	4342      	muls	r2, r0
 801ccb2:	fb0c 2c0e 	mla	ip, ip, lr, r2
 801ccb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ccb8:	fb01 c102 	mla	r1, r1, r2, ip
 801ccbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ccbe:	fb03 1302 	mla	r3, r3, r2, r1
 801ccc2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ccc6:	b383      	cbz	r3, 801cd2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ccc8:	4ac6      	ldr	r2, [pc, #792]	; (801cfe4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801ccca:	2bff      	cmp	r3, #255	; 0xff
 801cccc:	6812      	ldr	r2, [r2, #0]
 801ccce:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801ccd2:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801ccd6:	b2d2      	uxtb	r2, r2
 801ccd8:	f000 80ac 	beq.w	801ce34 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801ccdc:	b299      	uxth	r1, r3
 801ccde:	43db      	mvns	r3, r3
 801cce0:	f897 c000 	ldrb.w	ip, [r7]
 801cce4:	fb12 f201 	smulbb	r2, r2, r1
 801cce8:	b2db      	uxtb	r3, r3
 801ccea:	fb10 f001 	smulbb	r0, r0, r1
 801ccee:	fb0c 2203 	mla	r2, ip, r3, r2
 801ccf2:	fb1e f101 	smulbb	r1, lr, r1
 801ccf6:	b292      	uxth	r2, r2
 801ccf8:	f102 0c01 	add.w	ip, r2, #1
 801ccfc:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801cd00:	1212      	asrs	r2, r2, #8
 801cd02:	703a      	strb	r2, [r7, #0]
 801cd04:	787a      	ldrb	r2, [r7, #1]
 801cd06:	fb02 0003 	mla	r0, r2, r3, r0
 801cd0a:	b280      	uxth	r0, r0
 801cd0c:	1c42      	adds	r2, r0, #1
 801cd0e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801cd12:	78ba      	ldrb	r2, [r7, #2]
 801cd14:	fb02 1303 	mla	r3, r2, r3, r1
 801cd18:	1200      	asrs	r0, r0, #8
 801cd1a:	b29b      	uxth	r3, r3
 801cd1c:	7078      	strb	r0, [r7, #1]
 801cd1e:	f103 0e01 	add.w	lr, r3, #1
 801cd22:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801cd26:	121b      	asrs	r3, r3, #8
 801cd28:	70bb      	strb	r3, [r7, #2]
 801cd2a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801cd2c:	3703      	adds	r7, #3
 801cd2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cd32:	441d      	add	r5, r3
 801cd34:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801cd36:	441e      	add	r6, r3
 801cd38:	e74d      	b.n	801cbd6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801cd3a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801cd3c:	3c01      	subs	r4, #1
 801cd3e:	f10b 0b03 	add.w	fp, fp, #3
 801cd42:	441d      	add	r5, r3
 801cd44:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801cd46:	441e      	add	r6, r3
 801cd48:	e725      	b.n	801cb96 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801cd4a:	d021      	beq.n	801cd90 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801cd4c:	1e63      	subs	r3, r4, #1
 801cd4e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801cd50:	fb00 5003 	mla	r0, r0, r3, r5
 801cd54:	1400      	asrs	r0, r0, #16
 801cd56:	f53f af3a 	bmi.w	801cbce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801cd5a:	3901      	subs	r1, #1
 801cd5c:	4288      	cmp	r0, r1
 801cd5e:	f6bf af36 	bge.w	801cbce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801cd62:	9920      	ldr	r1, [sp, #128]	; 0x80
 801cd64:	fb01 6303 	mla	r3, r1, r3, r6
 801cd68:	141b      	asrs	r3, r3, #16
 801cd6a:	f53f af30 	bmi.w	801cbce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801cd6e:	3a01      	subs	r2, #1
 801cd70:	4293      	cmp	r3, r2
 801cd72:	f6bf af2c 	bge.w	801cbce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801cd76:	f10b 0c03 	add.w	ip, fp, #3
 801cd7a:	46a6      	mov	lr, r4
 801cd7c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801cd80:	f1be 0f00 	cmp.w	lr, #0
 801cd84:	dc79      	bgt.n	801ce7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 801cd86:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801cd8a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801cd8e:	44a3      	add	fp, r4
 801cd90:	9b07      	ldr	r3, [sp, #28]
 801cd92:	2b00      	cmp	r3, #0
 801cd94:	f340 8123 	ble.w	801cfde <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801cd98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cd9c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801cd9e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cda2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cda6:	eef0 6a62 	vmov.f32	s13, s5
 801cdaa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801cdae:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cdb2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cdb6:	ee16 5a90 	vmov	r5, s13
 801cdba:	eef0 6a43 	vmov.f32	s13, s6
 801cdbe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cdc2:	ee16 6a90 	vmov	r6, s13
 801cdc6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cdca:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cdce:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cdd2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cdd6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cdda:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cdde:	ee12 2a90 	vmov	r2, s5
 801cde2:	eef0 2a47 	vmov.f32	s5, s14
 801cde6:	fb92 f3f3 	sdiv	r3, r2, r3
 801cdea:	ee13 2a10 	vmov	r2, s6
 801cdee:	931f      	str	r3, [sp, #124]	; 0x7c
 801cdf0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801cdf2:	eeb0 3a67 	vmov.f32	s6, s15
 801cdf6:	fb92 f3f3 	sdiv	r3, r2, r3
 801cdfa:	9320      	str	r3, [sp, #128]	; 0x80
 801cdfc:	9b07      	ldr	r3, [sp, #28]
 801cdfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ce00:	3b01      	subs	r3, #1
 801ce02:	9307      	str	r3, [sp, #28]
 801ce04:	bf08      	it	eq
 801ce06:	4614      	moveq	r4, r2
 801ce08:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ce0a:	bf18      	it	ne
 801ce0c:	461c      	movne	r4, r3
 801ce0e:	e6b4      	b.n	801cb7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801ce10:	2900      	cmp	r1, #0
 801ce12:	f43f af3c 	beq.w	801cc8e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801ce16:	eb09 0003 	add.w	r0, r9, r3
 801ce1a:	0843      	lsrs	r3, r0, #1
 801ce1c:	07c0      	lsls	r0, r0, #31
 801ce1e:	f818 3003 	ldrb.w	r3, [r8, r3]
 801ce22:	bf54      	ite	pl
 801ce24:	f003 030f 	andpl.w	r3, r3, #15
 801ce28:	111b      	asrmi	r3, r3, #4
 801ce2a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801ce2e:	b2db      	uxtb	r3, r3
 801ce30:	930a      	str	r3, [sp, #40]	; 0x28
 801ce32:	e72c      	b.n	801cc8e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801ce34:	703a      	strb	r2, [r7, #0]
 801ce36:	7078      	strb	r0, [r7, #1]
 801ce38:	f887 e002 	strb.w	lr, [r7, #2]
 801ce3c:	e775      	b.n	801cd2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ce3e:	1c5a      	adds	r2, r3, #1
 801ce40:	f53f af73 	bmi.w	801cd2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ce44:	4594      	cmp	ip, r2
 801ce46:	f6ff af70 	blt.w	801cd2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ce4a:	1c42      	adds	r2, r0, #1
 801ce4c:	f53f af6d 	bmi.w	801cd2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ce50:	4596      	cmp	lr, r2
 801ce52:	f6ff af6a 	blt.w	801cd2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ce56:	9302      	str	r3, [sp, #8]
 801ce58:	fa0f f38e 	sxth.w	r3, lr
 801ce5c:	9a08      	ldr	r2, [sp, #32]
 801ce5e:	9301      	str	r3, [sp, #4]
 801ce60:	fa0f f38c 	sxth.w	r3, ip
 801ce64:	9105      	str	r1, [sp, #20]
 801ce66:	4639      	mov	r1, r7
 801ce68:	9300      	str	r3, [sp, #0]
 801ce6a:	464b      	mov	r3, r9
 801ce6c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801ce70:	4642      	mov	r2, r8
 801ce72:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ce74:	f7ff fd90 	bl	801c998 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 801ce78:	e757      	b.n	801cd2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ce7a:	142a      	asrs	r2, r5, #16
 801ce7c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801ce80:	1433      	asrs	r3, r6, #16
 801ce82:	f3c6 3703 	ubfx	r7, r6, #12, #4
 801ce86:	fb09 2303 	mla	r3, r9, r3, r2
 801ce8a:	085a      	lsrs	r2, r3, #1
 801ce8c:	07d9      	lsls	r1, r3, #31
 801ce8e:	f818 2002 	ldrb.w	r2, [r8, r2]
 801ce92:	bf54      	ite	pl
 801ce94:	f002 020f 	andpl.w	r2, r2, #15
 801ce98:	1112      	asrmi	r2, r2, #4
 801ce9a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ce9e:	b2d2      	uxtb	r2, r2
 801cea0:	2800      	cmp	r0, #0
 801cea2:	f000 8085 	beq.w	801cfb0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801cea6:	f103 0a01 	add.w	sl, r3, #1
 801ceaa:	ea4f 015a 	mov.w	r1, sl, lsr #1
 801ceae:	f01a 0f01 	tst.w	sl, #1
 801ceb2:	f818 1001 	ldrb.w	r1, [r8, r1]
 801ceb6:	bf0c      	ite	eq
 801ceb8:	f001 010f 	andeq.w	r1, r1, #15
 801cebc:	1109      	asrne	r1, r1, #4
 801cebe:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801cec2:	b2c9      	uxtb	r1, r1
 801cec4:	910f      	str	r1, [sp, #60]	; 0x3c
 801cec6:	b1df      	cbz	r7, 801cf00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801cec8:	444b      	add	r3, r9
 801ceca:	0859      	lsrs	r1, r3, #1
 801cecc:	f013 0f01 	tst.w	r3, #1
 801ced0:	f103 0301 	add.w	r3, r3, #1
 801ced4:	f818 1001 	ldrb.w	r1, [r8, r1]
 801ced8:	bf0c      	ite	eq
 801ceda:	f001 010f 	andeq.w	r1, r1, #15
 801cede:	1109      	asrne	r1, r1, #4
 801cee0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801cee4:	b2c9      	uxtb	r1, r1
 801cee6:	910b      	str	r1, [sp, #44]	; 0x2c
 801cee8:	0859      	lsrs	r1, r3, #1
 801ceea:	07db      	lsls	r3, r3, #31
 801ceec:	f818 1001 	ldrb.w	r1, [r8, r1]
 801cef0:	bf54      	ite	pl
 801cef2:	f001 010f 	andpl.w	r1, r1, #15
 801cef6:	1109      	asrmi	r1, r1, #4
 801cef8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801cefc:	b2c9      	uxtb	r1, r1
 801cefe:	9110      	str	r1, [sp, #64]	; 0x40
 801cf00:	b280      	uxth	r0, r0
 801cf02:	b2bf      	uxth	r7, r7
 801cf04:	fb00 f307 	mul.w	r3, r0, r7
 801cf08:	0100      	lsls	r0, r0, #4
 801cf0a:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 801cf0e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 801cf12:	1ac0      	subs	r0, r0, r3
 801cf14:	b2bf      	uxth	r7, r7
 801cf16:	b280      	uxth	r0, r0
 801cf18:	1bc9      	subs	r1, r1, r7
 801cf1a:	fa1f fa81 	uxth.w	sl, r1
 801cf1e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801cf20:	4348      	muls	r0, r1
 801cf22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801cf24:	fb02 020a 	mla	r2, r2, sl, r0
 801cf28:	fb07 2701 	mla	r7, r7, r1, r2
 801cf2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cf2e:	fb03 7302 	mla	r3, r3, r2, r7
 801cf32:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801cf36:	b393      	cbz	r3, 801cf9e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801cf38:	4a2a      	ldr	r2, [pc, #168]	; (801cfe4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801cf3a:	2bff      	cmp	r3, #255	; 0xff
 801cf3c:	6811      	ldr	r1, [r2, #0]
 801cf3e:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 801cf42:	f3c1 2707 	ubfx	r7, r1, #8, #8
 801cf46:	b2c9      	uxtb	r1, r1
 801cf48:	d042      	beq.n	801cfd0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801cf4a:	b298      	uxth	r0, r3
 801cf4c:	43db      	mvns	r3, r3
 801cf4e:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 801cf52:	fb11 f100 	smulbb	r1, r1, r0
 801cf56:	b2db      	uxtb	r3, r3
 801cf58:	fb17 f700 	smulbb	r7, r7, r0
 801cf5c:	fb02 1103 	mla	r1, r2, r3, r1
 801cf60:	fb1a f000 	smulbb	r0, sl, r0
 801cf64:	b289      	uxth	r1, r1
 801cf66:	1c4a      	adds	r2, r1, #1
 801cf68:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801cf6c:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 801cf70:	fb02 7703 	mla	r7, r2, r3, r7
 801cf74:	1209      	asrs	r1, r1, #8
 801cf76:	b2bf      	uxth	r7, r7
 801cf78:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801cf7c:	1c7a      	adds	r2, r7, #1
 801cf7e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801cf82:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 801cf86:	fb02 0303 	mla	r3, r2, r3, r0
 801cf8a:	123f      	asrs	r7, r7, #8
 801cf8c:	b29b      	uxth	r3, r3
 801cf8e:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801cf92:	1c5a      	adds	r2, r3, #1
 801cf94:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801cf98:	121b      	asrs	r3, r3, #8
 801cf9a:	f80c 3c01 	strb.w	r3, [ip, #-1]
 801cf9e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801cfa0:	f10c 0c03 	add.w	ip, ip, #3
 801cfa4:	f10e 3eff 	add.w	lr, lr, #4294967295
 801cfa8:	441d      	add	r5, r3
 801cfaa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801cfac:	441e      	add	r6, r3
 801cfae:	e6e7      	b.n	801cd80 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801cfb0:	2f00      	cmp	r7, #0
 801cfb2:	d0a5      	beq.n	801cf00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801cfb4:	444b      	add	r3, r9
 801cfb6:	0859      	lsrs	r1, r3, #1
 801cfb8:	07db      	lsls	r3, r3, #31
 801cfba:	f818 1001 	ldrb.w	r1, [r8, r1]
 801cfbe:	bf54      	ite	pl
 801cfc0:	f001 010f 	andpl.w	r1, r1, #15
 801cfc4:	1109      	asrmi	r1, r1, #4
 801cfc6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801cfca:	b2c9      	uxtb	r1, r1
 801cfcc:	910b      	str	r1, [sp, #44]	; 0x2c
 801cfce:	e797      	b.n	801cf00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801cfd0:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801cfd4:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801cfd8:	f80c ac01 	strb.w	sl, [ip, #-1]
 801cfdc:	e7df      	b.n	801cf9e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801cfde:	b013      	add	sp, #76	; 0x4c
 801cfe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cfe4:	2400e464 	.word	0x2400e464

0801cfe8 <CRC_Lock>:
 801cfe8:	4a20      	ldr	r2, [pc, #128]	; (801d06c <CRC_Lock+0x84>)
 801cfea:	b530      	push	{r4, r5, lr}
 801cfec:	6813      	ldr	r3, [r2, #0]
 801cfee:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801cff2:	f24c 2540 	movw	r5, #49728	; 0xc240
 801cff6:	f023 0301 	bic.w	r3, r3, #1
 801cffa:	6013      	str	r3, [r2, #0]
 801cffc:	4b1c      	ldr	r3, [pc, #112]	; (801d070 <CRC_Lock+0x88>)
 801cffe:	681a      	ldr	r2, [r3, #0]
 801d000:	4022      	ands	r2, r4
 801d002:	42aa      	cmp	r2, r5
 801d004:	d005      	beq.n	801d012 <CRC_Lock+0x2a>
 801d006:	681b      	ldr	r3, [r3, #0]
 801d008:	f24c 2270 	movw	r2, #49776	; 0xc270
 801d00c:	4023      	ands	r3, r4
 801d00e:	4293      	cmp	r3, r2
 801d010:	d124      	bne.n	801d05c <CRC_Lock+0x74>
 801d012:	4b18      	ldr	r3, [pc, #96]	; (801d074 <CRC_Lock+0x8c>)
 801d014:	681b      	ldr	r3, [r3, #0]
 801d016:	bb0b      	cbnz	r3, 801d05c <CRC_Lock+0x74>
 801d018:	4b17      	ldr	r3, [pc, #92]	; (801d078 <CRC_Lock+0x90>)
 801d01a:	681a      	ldr	r2, [r3, #0]
 801d01c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801d020:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801d024:	d00d      	beq.n	801d042 <CRC_Lock+0x5a>
 801d026:	681a      	ldr	r2, [r3, #0]
 801d028:	f240 4483 	movw	r4, #1155	; 0x483
 801d02c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801d030:	42a2      	cmp	r2, r4
 801d032:	d006      	beq.n	801d042 <CRC_Lock+0x5a>
 801d034:	681b      	ldr	r3, [r3, #0]
 801d036:	f240 4285 	movw	r2, #1157	; 0x485
 801d03a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d03e:	4293      	cmp	r3, r2
 801d040:	d10c      	bne.n	801d05c <CRC_Lock+0x74>
 801d042:	4b0e      	ldr	r3, [pc, #56]	; (801d07c <CRC_Lock+0x94>)
 801d044:	2201      	movs	r2, #1
 801d046:	601a      	str	r2, [r3, #0]
 801d048:	681a      	ldr	r2, [r3, #0]
 801d04a:	2a00      	cmp	r2, #0
 801d04c:	d1fc      	bne.n	801d048 <CRC_Lock+0x60>
 801d04e:	4b0c      	ldr	r3, [pc, #48]	; (801d080 <CRC_Lock+0x98>)
 801d050:	6018      	str	r0, [r3, #0]
 801d052:	6818      	ldr	r0, [r3, #0]
 801d054:	1a43      	subs	r3, r0, r1
 801d056:	4258      	negs	r0, r3
 801d058:	4158      	adcs	r0, r3
 801d05a:	bd30      	pop	{r4, r5, pc}
 801d05c:	4b09      	ldr	r3, [pc, #36]	; (801d084 <CRC_Lock+0x9c>)
 801d05e:	2201      	movs	r2, #1
 801d060:	601a      	str	r2, [r3, #0]
 801d062:	681a      	ldr	r2, [r3, #0]
 801d064:	2a00      	cmp	r2, #0
 801d066:	d1fc      	bne.n	801d062 <CRC_Lock+0x7a>
 801d068:	4b07      	ldr	r3, [pc, #28]	; (801d088 <CRC_Lock+0xa0>)
 801d06a:	e7f1      	b.n	801d050 <CRC_Lock+0x68>
 801d06c:	e0002000 	.word	0xe0002000
 801d070:	e000ed00 	.word	0xe000ed00
 801d074:	e0042000 	.word	0xe0042000
 801d078:	5c001000 	.word	0x5c001000
 801d07c:	58024c08 	.word	0x58024c08
 801d080:	58024c00 	.word	0x58024c00
 801d084:	40023008 	.word	0x40023008
 801d088:	40023000 	.word	0x40023000

0801d08c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801d08c:	6101      	str	r1, [r0, #16]
 801d08e:	4770      	bx	lr

0801d090 <_ZN8touchgfx8Gestures4tickEv>:
 801d090:	7b83      	ldrb	r3, [r0, #14]
 801d092:	b14b      	cbz	r3, 801d0a8 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801d094:	8903      	ldrh	r3, [r0, #8]
 801d096:	3301      	adds	r3, #1
 801d098:	b29b      	uxth	r3, r3
 801d09a:	2b07      	cmp	r3, #7
 801d09c:	8103      	strh	r3, [r0, #8]
 801d09e:	bf81      	itttt	hi
 801d0a0:	2300      	movhi	r3, #0
 801d0a2:	8143      	strhhi	r3, [r0, #10]
 801d0a4:	8183      	strhhi	r3, [r0, #12]
 801d0a6:	7383      	strbhi	r3, [r0, #14]
 801d0a8:	4770      	bx	lr
	...

0801d0ac <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801d0ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801d0b0:	4698      	mov	r8, r3
 801d0b2:	8883      	ldrh	r3, [r0, #4]
 801d0b4:	4604      	mov	r4, r0
 801d0b6:	4617      	mov	r7, r2
 801d0b8:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d0bc:	eba8 0303 	sub.w	r3, r8, r3
 801d0c0:	4a19      	ldr	r2, [pc, #100]	; (801d128 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 801d0c2:	460e      	mov	r6, r1
 801d0c4:	b21b      	sxth	r3, r3
 801d0c6:	88c1      	ldrh	r1, [r0, #6]
 801d0c8:	9200      	str	r2, [sp, #0]
 801d0ca:	2000      	movs	r0, #0
 801d0cc:	2b00      	cmp	r3, #0
 801d0ce:	8aa2      	ldrh	r2, [r4, #20]
 801d0d0:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801d0d4:	bfb8      	it	lt
 801d0d6:	425b      	neglt	r3, r3
 801d0d8:	f88d 0004 	strb.w	r0, [sp, #4]
 801d0dc:	f8ad 1008 	strh.w	r1, [sp, #8]
 801d0e0:	b21b      	sxth	r3, r3
 801d0e2:	f8ad 800a 	strh.w	r8, [sp, #10]
 801d0e6:	f8ad 500c 	strh.w	r5, [sp, #12]
 801d0ea:	4293      	cmp	r3, r2
 801d0ec:	dc07      	bgt.n	801d0fe <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 801d0ee:	1a69      	subs	r1, r5, r1
 801d0f0:	b209      	sxth	r1, r1
 801d0f2:	2900      	cmp	r1, #0
 801d0f4:	bfb8      	it	lt
 801d0f6:	4249      	neglt	r1, r1
 801d0f8:	b209      	sxth	r1, r1
 801d0fa:	428a      	cmp	r2, r1
 801d0fc:	da10      	bge.n	801d120 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 801d0fe:	6920      	ldr	r0, [r4, #16]
 801d100:	4669      	mov	r1, sp
 801d102:	eba8 0606 	sub.w	r6, r8, r6
 801d106:	1bef      	subs	r7, r5, r7
 801d108:	6803      	ldr	r3, [r0, #0]
 801d10a:	685b      	ldr	r3, [r3, #4]
 801d10c:	4798      	blx	r3
 801d10e:	2300      	movs	r3, #0
 801d110:	2001      	movs	r0, #1
 801d112:	8166      	strh	r6, [r4, #10]
 801d114:	8123      	strh	r3, [r4, #8]
 801d116:	81a7      	strh	r7, [r4, #12]
 801d118:	f8a4 8004 	strh.w	r8, [r4, #4]
 801d11c:	80e5      	strh	r5, [r4, #6]
 801d11e:	73a0      	strb	r0, [r4, #14]
 801d120:	b004      	add	sp, #16
 801d122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d126:	bf00      	nop
 801d128:	08020a6c 	.word	0x08020a6c

0801d12c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801d12c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d12e:	461e      	mov	r6, r3
 801d130:	1e4b      	subs	r3, r1, #1
 801d132:	b085      	sub	sp, #20
 801d134:	4604      	mov	r4, r0
 801d136:	2b01      	cmp	r3, #1
 801d138:	460d      	mov	r5, r1
 801d13a:	4617      	mov	r7, r2
 801d13c:	d84b      	bhi.n	801d1d6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801d13e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801d142:	1cd3      	adds	r3, r2, #3
 801d144:	b29b      	uxth	r3, r3
 801d146:	2b06      	cmp	r3, #6
 801d148:	d916      	bls.n	801d178 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801d14a:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801d1ec <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801d14e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d152:	f8cd c004 	str.w	ip, [sp, #4]
 801d156:	f04f 0c00 	mov.w	ip, #0
 801d15a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801d15e:	6900      	ldr	r0, [r0, #16]
 801d160:	f8ad 100c 	strh.w	r1, [sp, #12]
 801d164:	a901      	add	r1, sp, #4
 801d166:	f88d c008 	strb.w	ip, [sp, #8]
 801d16a:	f8ad 200a 	strh.w	r2, [sp, #10]
 801d16e:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d172:	6803      	ldr	r3, [r0, #0]
 801d174:	689b      	ldr	r3, [r3, #8]
 801d176:	4798      	blx	r3
 801d178:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d17c:	1cd3      	adds	r3, r2, #3
 801d17e:	b29b      	uxth	r3, r3
 801d180:	2b06      	cmp	r3, #6
 801d182:	d916      	bls.n	801d1b2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801d184:	f8df c064 	ldr.w	ip, [pc, #100]	; 801d1ec <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801d188:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d18c:	f8cd c004 	str.w	ip, [sp, #4]
 801d190:	f04f 0c01 	mov.w	ip, #1
 801d194:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801d198:	6920      	ldr	r0, [r4, #16]
 801d19a:	f8ad 100c 	strh.w	r1, [sp, #12]
 801d19e:	a901      	add	r1, sp, #4
 801d1a0:	f88d c008 	strb.w	ip, [sp, #8]
 801d1a4:	f8ad 200a 	strh.w	r2, [sp, #10]
 801d1a8:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d1ac:	6803      	ldr	r3, [r0, #0]
 801d1ae:	689b      	ldr	r3, [r3, #8]
 801d1b0:	4798      	blx	r3
 801d1b2:	4b0d      	ldr	r3, [pc, #52]	; (801d1e8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801d1b4:	a901      	add	r1, sp, #4
 801d1b6:	6920      	ldr	r0, [r4, #16]
 801d1b8:	9301      	str	r3, [sp, #4]
 801d1ba:	2300      	movs	r3, #0
 801d1bc:	f88d 5008 	strb.w	r5, [sp, #8]
 801d1c0:	f8ad 700a 	strh.w	r7, [sp, #10]
 801d1c4:	f8ad 600c 	strh.w	r6, [sp, #12]
 801d1c8:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d1cc:	6803      	ldr	r3, [r0, #0]
 801d1ce:	681b      	ldr	r3, [r3, #0]
 801d1d0:	4798      	blx	r3
 801d1d2:	b005      	add	sp, #20
 801d1d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d1d6:	2900      	cmp	r1, #0
 801d1d8:	d1eb      	bne.n	801d1b2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801d1da:	80a2      	strh	r2, [r4, #4]
 801d1dc:	80c6      	strh	r6, [r0, #6]
 801d1de:	60a1      	str	r1, [r4, #8]
 801d1e0:	81a1      	strh	r1, [r4, #12]
 801d1e2:	73a1      	strb	r1, [r4, #14]
 801d1e4:	e7e5      	b.n	801d1b2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801d1e6:	bf00      	nop
 801d1e8:	08020a58 	.word	0x08020a58
 801d1ec:	08020a80 	.word	0x08020a80

0801d1f0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>:
 801d1f0:	10c9      	asrs	r1, r1, #3
 801d1f2:	2900      	cmp	r1, #0
 801d1f4:	bfb8      	it	lt
 801d1f6:	4249      	neglt	r1, r1
 801d1f8:	2801      	cmp	r0, #1
 801d1fa:	d108      	bne.n	801d20e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 801d1fc:	f3c1 0008 	ubfx	r0, r1, #0, #9
 801d200:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 801d204:	4601      	mov	r1, r0
 801d206:	dd02      	ble.n	801d20e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 801d208:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 801d20c:	4770      	bx	lr
 801d20e:	29ff      	cmp	r1, #255	; 0xff
 801d210:	bfa8      	it	ge
 801d212:	21ff      	movge	r1, #255	; 0xff
 801d214:	4608      	mov	r0, r1
 801d216:	4770      	bx	lr

0801d218 <_ZN8touchgfx10Rasterizer6lineToEii>:
 801d218:	b410      	push	{r4}
 801d21a:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801d21e:	429c      	cmp	r4, r3
 801d220:	d803      	bhi.n	801d22a <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 801d222:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d226:	f7f2 bf53 	b.w	80100d0 <_ZN8touchgfx7Outline6lineToEii>
 801d22a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d22e:	4770      	bx	lr

0801d230 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 801d230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d234:	b08b      	sub	sp, #44	; 0x2c
 801d236:	4606      	mov	r6, r0
 801d238:	468a      	mov	sl, r1
 801d23a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801d23e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801d242:	9308      	str	r3, [sp, #32]
 801d244:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801d248:	9309      	str	r3, [sp, #36]	; 0x24
 801d24a:	f7f3 f8ac 	bl	80103a6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 801d24e:	68b5      	ldr	r5, [r6, #8]
 801d250:	4604      	mov	r4, r0
 801d252:	2d00      	cmp	r5, #0
 801d254:	d044      	beq.n	801d2e0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 801d256:	6873      	ldr	r3, [r6, #4]
 801d258:	42ab      	cmp	r3, r5
 801d25a:	d33d      	bcc.n	801d2d8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 801d25c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801d260:	f04f 0800 	mov.w	r8, #0
 801d264:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 801d268:	eb02 0b03 	add.w	fp, r2, r3
 801d26c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801d270:	fb02 1203 	mla	r2, r2, r3, r1
 801d274:	9205      	str	r2, [sp, #20]
 801d276:	1e6a      	subs	r2, r5, #1
 801d278:	9204      	str	r2, [sp, #16]
 801d27a:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 801d27e:	f9b4 7000 	ldrsh.w	r7, [r4]
 801d282:	454b      	cmp	r3, r9
 801d284:	463a      	mov	r2, r7
 801d286:	d008      	beq.n	801d29a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 801d288:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
 801d28c:	eb03 0b09 	add.w	fp, r3, r9
 801d290:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 801d294:	fb03 1309 	mla	r3, r3, r9, r1
 801d298:	9305      	str	r3, [sp, #20]
 801d29a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801d29e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801d2a2:	4498      	add	r8, r3
 801d2a4:	9b04      	ldr	r3, [sp, #16]
 801d2a6:	3b01      	subs	r3, #1
 801d2a8:	9304      	str	r3, [sp, #16]
 801d2aa:	9b04      	ldr	r3, [sp, #16]
 801d2ac:	3301      	adds	r3, #1
 801d2ae:	d015      	beq.n	801d2dc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 801d2b0:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 801d2b4:	42bb      	cmp	r3, r7
 801d2b6:	d117      	bne.n	801d2e8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 801d2b8:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 801d2bc:	9b04      	ldr	r3, [sp, #16]
 801d2be:	4548      	cmp	r0, r9
 801d2c0:	f103 33ff 	add.w	r3, r3, #4294967295
 801d2c4:	d17d      	bne.n	801d3c2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 801d2c6:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 801d2ca:	4401      	add	r1, r0
 801d2cc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d2d0:	4480      	add	r8, r0
 801d2d2:	e7e9      	b.n	801d2a8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 801d2d4:	461f      	mov	r7, r3
 801d2d6:	e042      	b.n	801d35e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 801d2d8:	2000      	movs	r0, #0
 801d2da:	e002      	b.n	801d2e2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 801d2dc:	2900      	cmp	r1, #0
 801d2de:	d16d      	bne.n	801d3bc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 801d2e0:	2001      	movs	r0, #1
 801d2e2:	b00b      	add	sp, #44	; 0x2c
 801d2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2e8:	b379      	cbz	r1, 801d34a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 801d2ea:	2f00      	cmp	r7, #0
 801d2ec:	db29      	blt.n	801d342 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 801d2ee:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 801d2f2:	42bb      	cmp	r3, r7
 801d2f4:	dd25      	ble.n	801d342 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 801d2f6:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 801d2fa:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 801d2fe:	f7ff ff77 	bl	801d1f0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 801d302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d304:	fb10 f003 	smulbb	r0, r0, r3
 801d308:	b280      	uxth	r0, r0
 801d30a:	1c41      	adds	r1, r0, #1
 801d30c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801d310:	1209      	asrs	r1, r1, #8
 801d312:	f011 0fff 	tst.w	r1, #255	; 0xff
 801d316:	d014      	beq.n	801d342 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 801d318:	b2c9      	uxtb	r1, r1
 801d31a:	9808      	ldr	r0, [sp, #32]
 801d31c:	b2ba      	uxth	r2, r7
 801d31e:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 801d320:	9102      	str	r1, [sp, #8]
 801d322:	2101      	movs	r1, #1
 801d324:	4413      	add	r3, r2
 801d326:	4402      	add	r2, r0
 801d328:	9101      	str	r1, [sp, #4]
 801d32a:	fa0f f18b 	sxth.w	r1, fp
 801d32e:	f8da 0000 	ldr.w	r0, [sl]
 801d332:	b21b      	sxth	r3, r3
 801d334:	9100      	str	r1, [sp, #0]
 801d336:	b212      	sxth	r2, r2
 801d338:	6941      	ldr	r1, [r0, #20]
 801d33a:	4650      	mov	r0, sl
 801d33c:	460d      	mov	r5, r1
 801d33e:	9905      	ldr	r1, [sp, #20]
 801d340:	47a8      	blx	r5
 801d342:	9b04      	ldr	r3, [sp, #16]
 801d344:	1c7a      	adds	r2, r7, #1
 801d346:	3301      	adds	r3, #1
 801d348:	d0ca      	beq.n	801d2e0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 801d34a:	f9b4 7000 	ldrsh.w	r7, [r4]
 801d34e:	1abb      	subs	r3, r7, r2
 801d350:	2b00      	cmp	r3, #0
 801d352:	dd31      	ble.n	801d3b8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801d354:	2a00      	cmp	r2, #0
 801d356:	dabd      	bge.n	801d2d4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 801d358:	2f00      	cmp	r7, #0
 801d35a:	dd2d      	ble.n	801d3b8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801d35c:	2200      	movs	r2, #0
 801d35e:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 801d362:	19d1      	adds	r1, r2, r7
 801d364:	4299      	cmp	r1, r3
 801d366:	db02      	blt.n	801d36e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 801d368:	1a9f      	subs	r7, r3, r2
 801d36a:	2f00      	cmp	r7, #0
 801d36c:	dd24      	ble.n	801d3b8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801d36e:	ea4f 1188 	mov.w	r1, r8, lsl #6
 801d372:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 801d376:	f7ff ff3b 	bl	801d1f0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 801d37a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d37c:	fb10 f003 	smulbb	r0, r0, r3
 801d380:	b280      	uxth	r0, r0
 801d382:	1c41      	adds	r1, r0, #1
 801d384:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801d388:	1209      	asrs	r1, r1, #8
 801d38a:	f011 0fff 	tst.w	r1, #255	; 0xff
 801d38e:	d013      	beq.n	801d3b8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801d390:	b292      	uxth	r2, r2
 801d392:	9808      	ldr	r0, [sp, #32]
 801d394:	b2c9      	uxtb	r1, r1
 801d396:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 801d398:	b23f      	sxth	r7, r7
 801d39a:	4413      	add	r3, r2
 801d39c:	9102      	str	r1, [sp, #8]
 801d39e:	4402      	add	r2, r0
 801d3a0:	fa0f f18b 	sxth.w	r1, fp
 801d3a4:	f8da 0000 	ldr.w	r0, [sl]
 801d3a8:	b21b      	sxth	r3, r3
 801d3aa:	9100      	str	r1, [sp, #0]
 801d3ac:	b212      	sxth	r2, r2
 801d3ae:	9701      	str	r7, [sp, #4]
 801d3b0:	9905      	ldr	r1, [sp, #20]
 801d3b2:	6947      	ldr	r7, [r0, #20]
 801d3b4:	4650      	mov	r0, sl
 801d3b6:	47b8      	blx	r7
 801d3b8:	464b      	mov	r3, r9
 801d3ba:	e75e      	b.n	801d27a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 801d3bc:	2f00      	cmp	r7, #0
 801d3be:	da96      	bge.n	801d2ee <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 801d3c0:	e78e      	b.n	801d2e0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 801d3c2:	2900      	cmp	r1, #0
 801d3c4:	d0f8      	beq.n	801d3b8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801d3c6:	e790      	b.n	801d2ea <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

0801d3c8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 801d3c8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801d3cc:	4b4a      	ldr	r3, [pc, #296]	; (801d4f8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x130>)
 801d3ce:	2500      	movs	r5, #0
 801d3d0:	f100 0620 	add.w	r6, r0, #32
 801d3d4:	4604      	mov	r4, r0
 801d3d6:	4690      	mov	r8, r2
 801d3d8:	f100 0718 	add.w	r7, r0, #24
 801d3dc:	e9c0 3100 	strd	r3, r1, [r0]
 801d3e0:	e9c0 5502 	strd	r5, r5, [r0, #8]
 801d3e4:	e9c0 5504 	strd	r5, r5, [r0, #16]
 801d3e8:	e9c0 5506 	strd	r5, r5, [r0, #24]
 801d3ec:	4630      	mov	r0, r6
 801d3ee:	f7f2 f9b5 	bl	800f75c <_ZN8touchgfx7OutlineC1Ev>
 801d3f2:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 801d3f6:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 801d3fa:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 801d3fe:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 801d402:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 801d406:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 801d40a:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 801d40e:	f8d4 c004 	ldr.w	ip, [r4, #4]
 801d412:	9500      	str	r5, [sp, #0]
 801d414:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
 801d418:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 801d41c:	f9b8 2000 	ldrsh.w	r2, [r8]
 801d420:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 801d424:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 801d428:	4410      	add	r0, r2
 801d42a:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 801d42e:	b280      	uxth	r0, r0
 801d430:	fa0f fa80 	sxth.w	sl, r0
 801d434:	45aa      	cmp	sl, r5
 801d436:	dd5c      	ble.n	801d4f2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 801d438:	4591      	cmp	r9, r2
 801d43a:	dd5a      	ble.n	801d4f2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 801d43c:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 801d440:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801d444:	440b      	add	r3, r1
 801d446:	b29b      	uxth	r3, r3
 801d448:	b21d      	sxth	r5, r3
 801d44a:	2d00      	cmp	r5, #0
 801d44c:	dd51      	ble.n	801d4f2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 801d44e:	458e      	cmp	lr, r1
 801d450:	dd4f      	ble.n	801d4f2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 801d452:	45d1      	cmp	r9, sl
 801d454:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801d458:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 801d45c:	bfb8      	it	lt
 801d45e:	fa1f f089 	uxthlt.w	r0, r9
 801d462:	45ae      	cmp	lr, r5
 801d464:	f8ad 2000 	strh.w	r2, [sp]
 801d468:	bfb8      	it	lt
 801d46a:	fa1f f38e 	uxthlt.w	r3, lr
 801d46e:	1a80      	subs	r0, r0, r2
 801d470:	f8ad 1002 	strh.w	r1, [sp, #2]
 801d474:	1a5b      	subs	r3, r3, r1
 801d476:	f8ad 0004 	strh.w	r0, [sp, #4]
 801d47a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d47e:	466d      	mov	r5, sp
 801d480:	e895 0003 	ldmia.w	r5, {r0, r1}
 801d484:	e887 0003 	stmia.w	r7, {r0, r1}
 801d488:	f8dc 3000 	ldr.w	r3, [ip]
 801d48c:	4660      	mov	r0, ip
 801d48e:	4639      	mov	r1, r7
 801d490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d492:	4798      	blx	r3
 801d494:	6861      	ldr	r1, [r4, #4]
 801d496:	4628      	mov	r0, r5
 801d498:	3104      	adds	r1, #4
 801d49a:	f7f4 fb2f 	bl	8011afc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d49e:	4638      	mov	r0, r7
 801d4a0:	f7f4 fb04 	bl	8011aac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d4a4:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801d4a8:	f8bd 2000 	ldrh.w	r2, [sp]
 801d4ac:	4630      	mov	r0, r6
 801d4ae:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 801d4b2:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801d4b6:	f7f2 f935 	bl	800f724 <_ZN8touchgfx7Outline5resetEv>
 801d4ba:	f9bd 3000 	ldrsh.w	r3, [sp]
 801d4be:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
 801d4c2:	4620      	mov	r0, r4
 801d4c4:	015b      	lsls	r3, r3, #5
 801d4c6:	60a3      	str	r3, [r4, #8]
 801d4c8:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801d4cc:	015b      	lsls	r3, r3, #5
 801d4ce:	60e3      	str	r3, [r4, #12]
 801d4d0:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801d4d4:	015b      	lsls	r3, r3, #5
 801d4d6:	6123      	str	r3, [r4, #16]
 801d4d8:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801d4dc:	015b      	lsls	r3, r3, #5
 801d4de:	6163      	str	r3, [r4, #20]
 801d4e0:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 801d4e4:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 801d4e8:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
 801d4ec:	b002      	add	sp, #8
 801d4ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d4f2:	2300      	movs	r3, #0
 801d4f4:	9301      	str	r3, [sp, #4]
 801d4f6:	e7c2      	b.n	801d47e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xb6>
 801d4f8:	08020cb0 	.word	0x08020cb0

0801d4fc <_ZN8touchgfx6Canvas5closeEv>:
 801d4fc:	b538      	push	{r3, r4, r5, lr}
 801d4fe:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 801d502:	4604      	mov	r4, r0
 801d504:	b193      	cbz	r3, 801d52c <_ZN8touchgfx6Canvas5closeEv+0x30>
 801d506:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 801d50a:	f890 2065 	ldrb.w	r2, [r0, #101]	; 0x65
 801d50e:	4213      	tst	r3, r2
 801d510:	d10c      	bne.n	801d52c <_ZN8touchgfx6Canvas5closeEv+0x30>
 801d512:	f100 0520 	add.w	r5, r0, #32
 801d516:	b123      	cbz	r3, 801d522 <_ZN8touchgfx6Canvas5closeEv+0x26>
 801d518:	e9d0 1217 	ldrd	r1, r2, [r0, #92]	; 0x5c
 801d51c:	4628      	mov	r0, r5
 801d51e:	f7ff fe7b 	bl	801d218 <_ZN8touchgfx10Rasterizer6lineToEii>
 801d522:	4628      	mov	r0, r5
 801d524:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
 801d528:	f7ff fe76 	bl	801d218 <_ZN8touchgfx10Rasterizer6lineToEii>
 801d52c:	2300      	movs	r3, #0
 801d52e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 801d532:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
 801d536:	4298      	cmp	r0, r3
 801d538:	bf34      	ite	cc
 801d53a:	2000      	movcc	r0, #0
 801d53c:	2001      	movcs	r0, #1
 801d53e:	bd38      	pop	{r3, r4, r5, pc}

0801d540 <_ZN8touchgfx6Canvas6renderEh>:
 801d540:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801d544:	4604      	mov	r4, r0
 801d546:	6840      	ldr	r0, [r0, #4]
 801d548:	460d      	mov	r5, r1
 801d54a:	6803      	ldr	r3, [r0, #0]
 801d54c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d54e:	4798      	blx	r3
 801d550:	fb10 f105 	smulbb	r1, r0, r5
 801d554:	b289      	uxth	r1, r1
 801d556:	1c4d      	adds	r5, r1, #1
 801d558:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 801d55c:	122d      	asrs	r5, r5, #8
 801d55e:	f000 8097 	beq.w	801d690 <_ZN8touchgfx6Canvas6renderEh+0x150>
 801d562:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 801d566:	2b00      	cmp	r3, #0
 801d568:	f000 8092 	beq.w	801d690 <_ZN8touchgfx6Canvas6renderEh+0x150>
 801d56c:	4620      	mov	r0, r4
 801d56e:	f7ff ffc5 	bl	801d4fc <_ZN8touchgfx6Canvas5closeEv>
 801d572:	4607      	mov	r7, r0
 801d574:	2800      	cmp	r0, #0
 801d576:	d043      	beq.n	801d600 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 801d578:	6863      	ldr	r3, [r4, #4]
 801d57a:	4e46      	ldr	r6, [pc, #280]	; (801d694 <_ZN8touchgfx6Canvas6renderEh+0x154>)
 801d57c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801d57e:	6837      	ldr	r7, [r6, #0]
 801d580:	6803      	ldr	r3, [r0, #0]
 801d582:	689b      	ldr	r3, [r3, #8]
 801d584:	4798      	blx	r3
 801d586:	4601      	mov	r1, r0
 801d588:	4638      	mov	r0, r7
 801d58a:	f7ef ff0f 	bl	800d3ac <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 801d58e:	4607      	mov	r7, r0
 801d590:	f7ef fad0 	bl	800cb34 <_ZN8touchgfx3HAL3lcdEv>
 801d594:	6803      	ldr	r3, [r0, #0]
 801d596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d598:	4798      	blx	r3
 801d59a:	4680      	mov	r8, r0
 801d59c:	f7ef faca 	bl	800cb34 <_ZN8touchgfx3HAL3lcdEv>
 801d5a0:	6803      	ldr	r3, [r0, #0]
 801d5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d5a4:	4798      	blx	r3
 801d5a6:	280b      	cmp	r0, #11
 801d5a8:	d857      	bhi.n	801d65a <_ZN8touchgfx6Canvas6renderEh+0x11a>
 801d5aa:	e8df f000 	tbb	[pc, r0]
 801d5ae:	584d      	.short	0x584d
 801d5b0:	2d560668 	.word	0x2d560668
 801d5b4:	6161613d 	.word	0x6161613d
 801d5b8:	6161      	.short	0x6161
 801d5ba:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 801d5be:	2208      	movs	r2, #8
 801d5c0:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801d5c4:	fb91 f2f2 	sdiv	r2, r1, r2
 801d5c8:	fb08 2303 	mla	r3, r8, r3, r2
 801d5cc:	441f      	add	r7, r3
 801d5ce:	424b      	negs	r3, r1
 801d5d0:	f001 0107 	and.w	r1, r1, #7
 801d5d4:	f003 0307 	and.w	r3, r3, #7
 801d5d8:	bf58      	it	pl
 801d5da:	4259      	negpl	r1, r3
 801d5dc:	b2c9      	uxtb	r1, r1
 801d5de:	6860      	ldr	r0, [r4, #4]
 801d5e0:	b2ed      	uxtb	r5, r5
 801d5e2:	fa0f f388 	sxth.w	r3, r8
 801d5e6:	463a      	mov	r2, r7
 801d5e8:	e9cd 1500 	strd	r1, r5, [sp]
 801d5ec:	6a81      	ldr	r1, [r0, #40]	; 0x28
 801d5ee:	f104 0020 	add.w	r0, r4, #32
 801d5f2:	f7ff fe1d 	bl	801d230 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 801d5f6:	4607      	mov	r7, r0
 801d5f8:	6830      	ldr	r0, [r6, #0]
 801d5fa:	6803      	ldr	r3, [r0, #0]
 801d5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d5fe:	4798      	blx	r3
 801d600:	4638      	mov	r0, r7
 801d602:	b002      	add	sp, #8
 801d604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d608:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 801d60c:	2204      	movs	r2, #4
 801d60e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801d612:	fb91 f2f2 	sdiv	r2, r1, r2
 801d616:	fb08 2303 	mla	r3, r8, r3, r2
 801d61a:	441f      	add	r7, r3
 801d61c:	424b      	negs	r3, r1
 801d61e:	f001 0103 	and.w	r1, r1, #3
 801d622:	f003 0303 	and.w	r3, r3, #3
 801d626:	e7d7      	b.n	801d5d8 <_ZN8touchgfx6Canvas6renderEh+0x98>
 801d628:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 801d62c:	2202      	movs	r2, #2
 801d62e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801d632:	2900      	cmp	r1, #0
 801d634:	fb91 f2f2 	sdiv	r2, r1, r2
 801d638:	f001 0101 	and.w	r1, r1, #1
 801d63c:	fb08 2303 	mla	r3, r8, r3, r2
 801d640:	bfb8      	it	lt
 801d642:	4249      	neglt	r1, r1
 801d644:	441f      	add	r7, r3
 801d646:	e7c9      	b.n	801d5dc <_ZN8touchgfx6Canvas6renderEh+0x9c>
 801d648:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801d64c:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 801d650:	fb08 f303 	mul.w	r3, r8, r3
 801d654:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801d658:	441f      	add	r7, r3
 801d65a:	2100      	movs	r1, #0
 801d65c:	e7bf      	b.n	801d5de <_ZN8touchgfx6Canvas6renderEh+0x9e>
 801d65e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801d662:	2103      	movs	r1, #3
 801d664:	fb08 f203 	mul.w	r2, r8, r3
 801d668:	8b23      	ldrh	r3, [r4, #24]
 801d66a:	fb13 2301 	smlabb	r3, r3, r1, r2
 801d66e:	e7f3      	b.n	801d658 <_ZN8touchgfx6Canvas6renderEh+0x118>
 801d670:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801d674:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 801d678:	fb08 2303 	mla	r3, r8, r3, r2
 801d67c:	e7ec      	b.n	801d658 <_ZN8touchgfx6Canvas6renderEh+0x118>
 801d67e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801d682:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 801d686:	fb08 f303 	mul.w	r3, r8, r3
 801d68a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801d68e:	e7e3      	b.n	801d658 <_ZN8touchgfx6Canvas6renderEh+0x118>
 801d690:	2701      	movs	r7, #1
 801d692:	e7b5      	b.n	801d600 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 801d694:	2400e454 	.word	0x2400e454

0801d698 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 801d698:	4b07      	ldr	r3, [pc, #28]	; (801d6b8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 801d69a:	b510      	push	{r4, lr}
 801d69c:	781b      	ldrb	r3, [r3, #0]
 801d69e:	2b01      	cmp	r3, #1
 801d6a0:	d108      	bne.n	801d6b4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 801d6a2:	6843      	ldr	r3, [r0, #4]
 801d6a4:	6814      	ldr	r4, [r2, #0]
 801d6a6:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801d6aa:	680b      	ldr	r3, [r1, #0]
 801d6ac:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 801d6b0:	6013      	str	r3, [r2, #0]
 801d6b2:	600c      	str	r4, [r1, #0]
 801d6b4:	bd10      	pop	{r4, pc}
 801d6b6:	bf00      	nop
 801d6b8:	2400e44c 	.word	0x2400e44c

0801d6bc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 801d6bc:	b513      	push	{r0, r1, r4, lr}
 801d6be:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 801d6c2:	4604      	mov	r4, r0
 801d6c4:	e9cd 2100 	strd	r2, r1, [sp]
 801d6c8:	b9a3      	cbnz	r3, 801d6f4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 801d6ca:	466a      	mov	r2, sp
 801d6cc:	a901      	add	r1, sp, #4
 801d6ce:	4620      	mov	r0, r4
 801d6d0:	f7ff ffe2 	bl	801d698 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 801d6d4:	68a3      	ldr	r3, [r4, #8]
 801d6d6:	9901      	ldr	r1, [sp, #4]
 801d6d8:	9a00      	ldr	r2, [sp, #0]
 801d6da:	1ac9      	subs	r1, r1, r3
 801d6dc:	68e3      	ldr	r3, [r4, #12]
 801d6de:	1ad2      	subs	r2, r2, r3
 801d6e0:	9101      	str	r1, [sp, #4]
 801d6e2:	2a00      	cmp	r2, #0
 801d6e4:	9200      	str	r2, [sp, #0]
 801d6e6:	da0b      	bge.n	801d700 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 801d6e8:	2301      	movs	r3, #1
 801d6ea:	2900      	cmp	r1, #0
 801d6ec:	da0e      	bge.n	801d70c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 801d6ee:	f043 0304 	orr.w	r3, r3, #4
 801d6f2:	e013      	b.n	801d71c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 801d6f4:	f7ff ff02 	bl	801d4fc <_ZN8touchgfx6Canvas5closeEv>
 801d6f8:	2800      	cmp	r0, #0
 801d6fa:	d1e6      	bne.n	801d6ca <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 801d6fc:	b002      	add	sp, #8
 801d6fe:	bd10      	pop	{r4, pc}
 801d700:	6963      	ldr	r3, [r4, #20]
 801d702:	429a      	cmp	r2, r3
 801d704:	bfac      	ite	ge
 801d706:	2302      	movge	r3, #2
 801d708:	2300      	movlt	r3, #0
 801d70a:	e7ee      	b.n	801d6ea <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 801d70c:	6920      	ldr	r0, [r4, #16]
 801d70e:	4281      	cmp	r1, r0
 801d710:	bfac      	ite	ge
 801d712:	2008      	movge	r0, #8
 801d714:	2000      	movlt	r0, #0
 801d716:	4318      	orrs	r0, r3
 801d718:	b2c3      	uxtb	r3, r0
 801d71a:	b158      	cbz	r0, 801d734 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 801d71c:	2200      	movs	r2, #0
 801d71e:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 801d722:	9901      	ldr	r1, [sp, #4]
 801d724:	9a00      	ldr	r2, [sp, #0]
 801d726:	66a1      	str	r1, [r4, #104]	; 0x68
 801d728:	66e2      	str	r2, [r4, #108]	; 0x6c
 801d72a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 801d72e:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
 801d732:	e7e3      	b.n	801d6fc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 801d734:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 801d738:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 801d73c:	4298      	cmp	r0, r3
 801d73e:	d803      	bhi.n	801d748 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 801d740:	f104 0020 	add.w	r0, r4, #32
 801d744:	f7f2 fcde 	bl	8010104 <_ZN8touchgfx7Outline6moveToEii>
 801d748:	2301      	movs	r3, #1
 801d74a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 801d74e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801d752:	2300      	movs	r3, #0
 801d754:	e7e5      	b.n	801d722 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

0801d756 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 801d756:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d758:	ab02      	add	r3, sp, #8
 801d75a:	4604      	mov	r4, r0
 801d75c:	9101      	str	r1, [sp, #4]
 801d75e:	a901      	add	r1, sp, #4
 801d760:	f843 2d08 	str.w	r2, [r3, #-8]!
 801d764:	461a      	mov	r2, r3
 801d766:	f7ff ff97 	bl	801d698 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 801d76a:	68a3      	ldr	r3, [r4, #8]
 801d76c:	9901      	ldr	r1, [sp, #4]
 801d76e:	9a00      	ldr	r2, [sp, #0]
 801d770:	1ac9      	subs	r1, r1, r3
 801d772:	68e3      	ldr	r3, [r4, #12]
 801d774:	1ad2      	subs	r2, r2, r3
 801d776:	9101      	str	r1, [sp, #4]
 801d778:	2a00      	cmp	r2, #0
 801d77a:	9200      	str	r2, [sp, #0]
 801d77c:	db1c      	blt.n	801d7b8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 801d77e:	6963      	ldr	r3, [r4, #20]
 801d780:	429a      	cmp	r2, r3
 801d782:	bfac      	ite	ge
 801d784:	2002      	movge	r0, #2
 801d786:	2000      	movlt	r0, #0
 801d788:	2900      	cmp	r1, #0
 801d78a:	db17      	blt.n	801d7bc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 801d78c:	6923      	ldr	r3, [r4, #16]
 801d78e:	4299      	cmp	r1, r3
 801d790:	bfac      	ite	ge
 801d792:	2308      	movge	r3, #8
 801d794:	2300      	movlt	r3, #0
 801d796:	4303      	orrs	r3, r0
 801d798:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 801d79c:	b2dd      	uxtb	r5, r3
 801d79e:	b978      	cbnz	r0, 801d7c0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 801d7a0:	f104 0020 	add.w	r0, r4, #32
 801d7a4:	f7ff fd38 	bl	801d218 <_ZN8touchgfx10Rasterizer6lineToEii>
 801d7a8:	9b01      	ldr	r3, [sp, #4]
 801d7aa:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 801d7ae:	65e3      	str	r3, [r4, #92]	; 0x5c
 801d7b0:	9b00      	ldr	r3, [sp, #0]
 801d7b2:	6623      	str	r3, [r4, #96]	; 0x60
 801d7b4:	b002      	add	sp, #8
 801d7b6:	bd70      	pop	{r4, r5, r6, pc}
 801d7b8:	2001      	movs	r0, #1
 801d7ba:	e7e5      	b.n	801d788 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 801d7bc:	2304      	movs	r3, #4
 801d7be:	e7ea      	b.n	801d796 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 801d7c0:	b113      	cbz	r3, 801d7c8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 801d7c2:	ea10 0305 	ands.w	r3, r0, r5
 801d7c6:	d11c      	bne.n	801d802 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 801d7c8:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 801d7cc:	f104 0620 	add.w	r6, r4, #32
 801d7d0:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
 801d7d4:	b98b      	cbnz	r3, 801d7fa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 801d7d6:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 801d7da:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 801d7de:	4298      	cmp	r0, r3
 801d7e0:	d802      	bhi.n	801d7e8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 801d7e2:	4630      	mov	r0, r6
 801d7e4:	f7f2 fc8e 	bl	8010104 <_ZN8touchgfx7Outline6moveToEii>
 801d7e8:	2301      	movs	r3, #1
 801d7ea:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 801d7ee:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801d7f2:	4630      	mov	r0, r6
 801d7f4:	e9dd 2100 	ldrd	r2, r1, [sp]
 801d7f8:	e7d4      	b.n	801d7a4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 801d7fa:	4630      	mov	r0, r6
 801d7fc:	f7ff fd0c 	bl	801d218 <_ZN8touchgfx10Rasterizer6lineToEii>
 801d800:	e7f7      	b.n	801d7f2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 801d802:	461d      	mov	r5, r3
 801d804:	e7d0      	b.n	801d7a8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

0801d808 <_ZN8touchgfx6CanvasD1Ev>:
 801d808:	4b04      	ldr	r3, [pc, #16]	; (801d81c <_ZN8touchgfx6CanvasD1Ev+0x14>)
 801d80a:	b510      	push	{r4, lr}
 801d80c:	4604      	mov	r4, r0
 801d80e:	f840 3b20 	str.w	r3, [r0], #32
 801d812:	f7f1 ff7f 	bl	800f714 <_ZN8touchgfx7OutlineD1Ev>
 801d816:	4620      	mov	r0, r4
 801d818:	bd10      	pop	{r4, pc}
 801d81a:	bf00      	nop
 801d81c:	08020cb0 	.word	0x08020cb0

0801d820 <_ZN8touchgfx6CanvasD0Ev>:
 801d820:	b510      	push	{r4, lr}
 801d822:	4604      	mov	r4, r0
 801d824:	f7ff fff0 	bl	801d808 <_ZN8touchgfx6CanvasD1Ev>
 801d828:	2170      	movs	r1, #112	; 0x70
 801d82a:	4620      	mov	r0, r4
 801d82c:	f000 f807 	bl	801d83e <_ZdlPvj>
 801d830:	4620      	mov	r0, r4
 801d832:	bd10      	pop	{r4, pc}

0801d834 <__aeabi_atexit>:
 801d834:	460b      	mov	r3, r1
 801d836:	4601      	mov	r1, r0
 801d838:	4618      	mov	r0, r3
 801d83a:	f000 b853 	b.w	801d8e4 <__cxa_atexit>

0801d83e <_ZdlPvj>:
 801d83e:	f000 b812 	b.w	801d866 <_ZdlPv>

0801d842 <__cxa_guard_acquire>:
 801d842:	6803      	ldr	r3, [r0, #0]
 801d844:	07db      	lsls	r3, r3, #31
 801d846:	d406      	bmi.n	801d856 <__cxa_guard_acquire+0x14>
 801d848:	7843      	ldrb	r3, [r0, #1]
 801d84a:	b103      	cbz	r3, 801d84e <__cxa_guard_acquire+0xc>
 801d84c:	deff      	udf	#255	; 0xff
 801d84e:	2301      	movs	r3, #1
 801d850:	7043      	strb	r3, [r0, #1]
 801d852:	4618      	mov	r0, r3
 801d854:	4770      	bx	lr
 801d856:	2000      	movs	r0, #0
 801d858:	4770      	bx	lr

0801d85a <__cxa_guard_release>:
 801d85a:	2301      	movs	r3, #1
 801d85c:	6003      	str	r3, [r0, #0]
 801d85e:	4770      	bx	lr

0801d860 <__cxa_pure_virtual>:
 801d860:	b508      	push	{r3, lr}
 801d862:	f000 f80f 	bl	801d884 <_ZSt9terminatev>

0801d866 <_ZdlPv>:
 801d866:	f000 b88f 	b.w	801d988 <free>

0801d86a <_ZN10__cxxabiv111__terminateEPFvvE>:
 801d86a:	b508      	push	{r3, lr}
 801d86c:	4780      	blx	r0
 801d86e:	f000 f80e 	bl	801d88e <abort>
	...

0801d874 <_ZSt13get_terminatev>:
 801d874:	4b02      	ldr	r3, [pc, #8]	; (801d880 <_ZSt13get_terminatev+0xc>)
 801d876:	6818      	ldr	r0, [r3, #0]
 801d878:	f3bf 8f5b 	dmb	ish
 801d87c:	4770      	bx	lr
 801d87e:	bf00      	nop
 801d880:	240000b0 	.word	0x240000b0

0801d884 <_ZSt9terminatev>:
 801d884:	b508      	push	{r3, lr}
 801d886:	f7ff fff5 	bl	801d874 <_ZSt13get_terminatev>
 801d88a:	f7ff ffee 	bl	801d86a <_ZN10__cxxabiv111__terminateEPFvvE>

0801d88e <abort>:
 801d88e:	b508      	push	{r3, lr}
 801d890:	2006      	movs	r0, #6
 801d892:	f000 fc9d 	bl	801e1d0 <raise>
 801d896:	2001      	movs	r0, #1
 801d898:	f7e3 fc62 	bl	8001160 <_exit>

0801d89c <__assert_func>:
 801d89c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d89e:	4614      	mov	r4, r2
 801d8a0:	461a      	mov	r2, r3
 801d8a2:	4b09      	ldr	r3, [pc, #36]	; (801d8c8 <__assert_func+0x2c>)
 801d8a4:	681b      	ldr	r3, [r3, #0]
 801d8a6:	4605      	mov	r5, r0
 801d8a8:	68d8      	ldr	r0, [r3, #12]
 801d8aa:	b14c      	cbz	r4, 801d8c0 <__assert_func+0x24>
 801d8ac:	4b07      	ldr	r3, [pc, #28]	; (801d8cc <__assert_func+0x30>)
 801d8ae:	9100      	str	r1, [sp, #0]
 801d8b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d8b4:	4906      	ldr	r1, [pc, #24]	; (801d8d0 <__assert_func+0x34>)
 801d8b6:	462b      	mov	r3, r5
 801d8b8:	f000 f828 	bl	801d90c <fiprintf>
 801d8bc:	f7ff ffe7 	bl	801d88e <abort>
 801d8c0:	4b04      	ldr	r3, [pc, #16]	; (801d8d4 <__assert_func+0x38>)
 801d8c2:	461c      	mov	r4, r3
 801d8c4:	e7f3      	b.n	801d8ae <__assert_func+0x12>
 801d8c6:	bf00      	nop
 801d8c8:	240000b4 	.word	0x240000b4
 801d8cc:	08020cbc 	.word	0x08020cbc
 801d8d0:	08020cc9 	.word	0x08020cc9
 801d8d4:	08020cf7 	.word	0x08020cf7

0801d8d8 <atexit>:
 801d8d8:	2300      	movs	r3, #0
 801d8da:	4601      	mov	r1, r0
 801d8dc:	461a      	mov	r2, r3
 801d8de:	4618      	mov	r0, r3
 801d8e0:	f000 bd52 	b.w	801e388 <__register_exitproc>

0801d8e4 <__cxa_atexit>:
 801d8e4:	b510      	push	{r4, lr}
 801d8e6:	4c05      	ldr	r4, [pc, #20]	; (801d8fc <__cxa_atexit+0x18>)
 801d8e8:	4613      	mov	r3, r2
 801d8ea:	b12c      	cbz	r4, 801d8f8 <__cxa_atexit+0x14>
 801d8ec:	460a      	mov	r2, r1
 801d8ee:	4601      	mov	r1, r0
 801d8f0:	2002      	movs	r0, #2
 801d8f2:	f000 fd49 	bl	801e388 <__register_exitproc>
 801d8f6:	bd10      	pop	{r4, pc}
 801d8f8:	4620      	mov	r0, r4
 801d8fa:	e7fc      	b.n	801d8f6 <__cxa_atexit+0x12>
 801d8fc:	0801e389 	.word	0x0801e389

0801d900 <__errno>:
 801d900:	4b01      	ldr	r3, [pc, #4]	; (801d908 <__errno+0x8>)
 801d902:	6818      	ldr	r0, [r3, #0]
 801d904:	4770      	bx	lr
 801d906:	bf00      	nop
 801d908:	240000b4 	.word	0x240000b4

0801d90c <fiprintf>:
 801d90c:	b40e      	push	{r1, r2, r3}
 801d90e:	b503      	push	{r0, r1, lr}
 801d910:	4601      	mov	r1, r0
 801d912:	ab03      	add	r3, sp, #12
 801d914:	4805      	ldr	r0, [pc, #20]	; (801d92c <fiprintf+0x20>)
 801d916:	f853 2b04 	ldr.w	r2, [r3], #4
 801d91a:	6800      	ldr	r0, [r0, #0]
 801d91c:	9301      	str	r3, [sp, #4]
 801d91e:	f000 f95b 	bl	801dbd8 <_vfiprintf_r>
 801d922:	b002      	add	sp, #8
 801d924:	f85d eb04 	ldr.w	lr, [sp], #4
 801d928:	b003      	add	sp, #12
 801d92a:	4770      	bx	lr
 801d92c:	240000b4 	.word	0x240000b4

0801d930 <__libc_init_array>:
 801d930:	b570      	push	{r4, r5, r6, lr}
 801d932:	4d0d      	ldr	r5, [pc, #52]	; (801d968 <__libc_init_array+0x38>)
 801d934:	4c0d      	ldr	r4, [pc, #52]	; (801d96c <__libc_init_array+0x3c>)
 801d936:	1b64      	subs	r4, r4, r5
 801d938:	10a4      	asrs	r4, r4, #2
 801d93a:	2600      	movs	r6, #0
 801d93c:	42a6      	cmp	r6, r4
 801d93e:	d109      	bne.n	801d954 <__libc_init_array+0x24>
 801d940:	4d0b      	ldr	r5, [pc, #44]	; (801d970 <__libc_init_array+0x40>)
 801d942:	4c0c      	ldr	r4, [pc, #48]	; (801d974 <__libc_init_array+0x44>)
 801d944:	f001 f85a 	bl	801e9fc <_init>
 801d948:	1b64      	subs	r4, r4, r5
 801d94a:	10a4      	asrs	r4, r4, #2
 801d94c:	2600      	movs	r6, #0
 801d94e:	42a6      	cmp	r6, r4
 801d950:	d105      	bne.n	801d95e <__libc_init_array+0x2e>
 801d952:	bd70      	pop	{r4, r5, r6, pc}
 801d954:	f855 3b04 	ldr.w	r3, [r5], #4
 801d958:	4798      	blx	r3
 801d95a:	3601      	adds	r6, #1
 801d95c:	e7ee      	b.n	801d93c <__libc_init_array+0xc>
 801d95e:	f855 3b04 	ldr.w	r3, [r5], #4
 801d962:	4798      	blx	r3
 801d964:	3601      	adds	r6, #1
 801d966:	e7f2      	b.n	801d94e <__libc_init_array+0x1e>
 801d968:	08021bdc 	.word	0x08021bdc
 801d96c:	08021bdc 	.word	0x08021bdc
 801d970:	08021bdc 	.word	0x08021bdc
 801d974:	08021bf4 	.word	0x08021bf4

0801d978 <malloc>:
 801d978:	4b02      	ldr	r3, [pc, #8]	; (801d984 <malloc+0xc>)
 801d97a:	4601      	mov	r1, r0
 801d97c:	6818      	ldr	r0, [r3, #0]
 801d97e:	f000 b88d 	b.w	801da9c <_malloc_r>
 801d982:	bf00      	nop
 801d984:	240000b4 	.word	0x240000b4

0801d988 <free>:
 801d988:	4b02      	ldr	r3, [pc, #8]	; (801d994 <free+0xc>)
 801d98a:	4601      	mov	r1, r0
 801d98c:	6818      	ldr	r0, [r3, #0]
 801d98e:	f000 b819 	b.w	801d9c4 <_free_r>
 801d992:	bf00      	nop
 801d994:	240000b4 	.word	0x240000b4

0801d998 <memcpy>:
 801d998:	440a      	add	r2, r1
 801d99a:	4291      	cmp	r1, r2
 801d99c:	f100 33ff 	add.w	r3, r0, #4294967295
 801d9a0:	d100      	bne.n	801d9a4 <memcpy+0xc>
 801d9a2:	4770      	bx	lr
 801d9a4:	b510      	push	{r4, lr}
 801d9a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d9aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d9ae:	4291      	cmp	r1, r2
 801d9b0:	d1f9      	bne.n	801d9a6 <memcpy+0xe>
 801d9b2:	bd10      	pop	{r4, pc}

0801d9b4 <memset>:
 801d9b4:	4402      	add	r2, r0
 801d9b6:	4603      	mov	r3, r0
 801d9b8:	4293      	cmp	r3, r2
 801d9ba:	d100      	bne.n	801d9be <memset+0xa>
 801d9bc:	4770      	bx	lr
 801d9be:	f803 1b01 	strb.w	r1, [r3], #1
 801d9c2:	e7f9      	b.n	801d9b8 <memset+0x4>

0801d9c4 <_free_r>:
 801d9c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d9c6:	2900      	cmp	r1, #0
 801d9c8:	d044      	beq.n	801da54 <_free_r+0x90>
 801d9ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d9ce:	9001      	str	r0, [sp, #4]
 801d9d0:	2b00      	cmp	r3, #0
 801d9d2:	f1a1 0404 	sub.w	r4, r1, #4
 801d9d6:	bfb8      	it	lt
 801d9d8:	18e4      	addlt	r4, r4, r3
 801d9da:	f000 ff57 	bl	801e88c <__malloc_lock>
 801d9de:	4a1e      	ldr	r2, [pc, #120]	; (801da58 <_free_r+0x94>)
 801d9e0:	9801      	ldr	r0, [sp, #4]
 801d9e2:	6813      	ldr	r3, [r2, #0]
 801d9e4:	b933      	cbnz	r3, 801d9f4 <_free_r+0x30>
 801d9e6:	6063      	str	r3, [r4, #4]
 801d9e8:	6014      	str	r4, [r2, #0]
 801d9ea:	b003      	add	sp, #12
 801d9ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d9f0:	f000 bf52 	b.w	801e898 <__malloc_unlock>
 801d9f4:	42a3      	cmp	r3, r4
 801d9f6:	d908      	bls.n	801da0a <_free_r+0x46>
 801d9f8:	6825      	ldr	r5, [r4, #0]
 801d9fa:	1961      	adds	r1, r4, r5
 801d9fc:	428b      	cmp	r3, r1
 801d9fe:	bf01      	itttt	eq
 801da00:	6819      	ldreq	r1, [r3, #0]
 801da02:	685b      	ldreq	r3, [r3, #4]
 801da04:	1949      	addeq	r1, r1, r5
 801da06:	6021      	streq	r1, [r4, #0]
 801da08:	e7ed      	b.n	801d9e6 <_free_r+0x22>
 801da0a:	461a      	mov	r2, r3
 801da0c:	685b      	ldr	r3, [r3, #4]
 801da0e:	b10b      	cbz	r3, 801da14 <_free_r+0x50>
 801da10:	42a3      	cmp	r3, r4
 801da12:	d9fa      	bls.n	801da0a <_free_r+0x46>
 801da14:	6811      	ldr	r1, [r2, #0]
 801da16:	1855      	adds	r5, r2, r1
 801da18:	42a5      	cmp	r5, r4
 801da1a:	d10b      	bne.n	801da34 <_free_r+0x70>
 801da1c:	6824      	ldr	r4, [r4, #0]
 801da1e:	4421      	add	r1, r4
 801da20:	1854      	adds	r4, r2, r1
 801da22:	42a3      	cmp	r3, r4
 801da24:	6011      	str	r1, [r2, #0]
 801da26:	d1e0      	bne.n	801d9ea <_free_r+0x26>
 801da28:	681c      	ldr	r4, [r3, #0]
 801da2a:	685b      	ldr	r3, [r3, #4]
 801da2c:	6053      	str	r3, [r2, #4]
 801da2e:	4421      	add	r1, r4
 801da30:	6011      	str	r1, [r2, #0]
 801da32:	e7da      	b.n	801d9ea <_free_r+0x26>
 801da34:	d902      	bls.n	801da3c <_free_r+0x78>
 801da36:	230c      	movs	r3, #12
 801da38:	6003      	str	r3, [r0, #0]
 801da3a:	e7d6      	b.n	801d9ea <_free_r+0x26>
 801da3c:	6825      	ldr	r5, [r4, #0]
 801da3e:	1961      	adds	r1, r4, r5
 801da40:	428b      	cmp	r3, r1
 801da42:	bf04      	itt	eq
 801da44:	6819      	ldreq	r1, [r3, #0]
 801da46:	685b      	ldreq	r3, [r3, #4]
 801da48:	6063      	str	r3, [r4, #4]
 801da4a:	bf04      	itt	eq
 801da4c:	1949      	addeq	r1, r1, r5
 801da4e:	6021      	streq	r1, [r4, #0]
 801da50:	6054      	str	r4, [r2, #4]
 801da52:	e7ca      	b.n	801d9ea <_free_r+0x26>
 801da54:	b003      	add	sp, #12
 801da56:	bd30      	pop	{r4, r5, pc}
 801da58:	2400e538 	.word	0x2400e538

0801da5c <sbrk_aligned>:
 801da5c:	b570      	push	{r4, r5, r6, lr}
 801da5e:	4e0e      	ldr	r6, [pc, #56]	; (801da98 <sbrk_aligned+0x3c>)
 801da60:	460c      	mov	r4, r1
 801da62:	6831      	ldr	r1, [r6, #0]
 801da64:	4605      	mov	r5, r0
 801da66:	b911      	cbnz	r1, 801da6e <sbrk_aligned+0x12>
 801da68:	f000 fb7a 	bl	801e160 <_sbrk_r>
 801da6c:	6030      	str	r0, [r6, #0]
 801da6e:	4621      	mov	r1, r4
 801da70:	4628      	mov	r0, r5
 801da72:	f000 fb75 	bl	801e160 <_sbrk_r>
 801da76:	1c43      	adds	r3, r0, #1
 801da78:	d00a      	beq.n	801da90 <sbrk_aligned+0x34>
 801da7a:	1cc4      	adds	r4, r0, #3
 801da7c:	f024 0403 	bic.w	r4, r4, #3
 801da80:	42a0      	cmp	r0, r4
 801da82:	d007      	beq.n	801da94 <sbrk_aligned+0x38>
 801da84:	1a21      	subs	r1, r4, r0
 801da86:	4628      	mov	r0, r5
 801da88:	f000 fb6a 	bl	801e160 <_sbrk_r>
 801da8c:	3001      	adds	r0, #1
 801da8e:	d101      	bne.n	801da94 <sbrk_aligned+0x38>
 801da90:	f04f 34ff 	mov.w	r4, #4294967295
 801da94:	4620      	mov	r0, r4
 801da96:	bd70      	pop	{r4, r5, r6, pc}
 801da98:	2400e53c 	.word	0x2400e53c

0801da9c <_malloc_r>:
 801da9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801daa0:	1ccd      	adds	r5, r1, #3
 801daa2:	f025 0503 	bic.w	r5, r5, #3
 801daa6:	3508      	adds	r5, #8
 801daa8:	2d0c      	cmp	r5, #12
 801daaa:	bf38      	it	cc
 801daac:	250c      	movcc	r5, #12
 801daae:	2d00      	cmp	r5, #0
 801dab0:	4607      	mov	r7, r0
 801dab2:	db01      	blt.n	801dab8 <_malloc_r+0x1c>
 801dab4:	42a9      	cmp	r1, r5
 801dab6:	d905      	bls.n	801dac4 <_malloc_r+0x28>
 801dab8:	230c      	movs	r3, #12
 801daba:	603b      	str	r3, [r7, #0]
 801dabc:	2600      	movs	r6, #0
 801dabe:	4630      	mov	r0, r6
 801dac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dac4:	4e2e      	ldr	r6, [pc, #184]	; (801db80 <_malloc_r+0xe4>)
 801dac6:	f000 fee1 	bl	801e88c <__malloc_lock>
 801daca:	6833      	ldr	r3, [r6, #0]
 801dacc:	461c      	mov	r4, r3
 801dace:	bb34      	cbnz	r4, 801db1e <_malloc_r+0x82>
 801dad0:	4629      	mov	r1, r5
 801dad2:	4638      	mov	r0, r7
 801dad4:	f7ff ffc2 	bl	801da5c <sbrk_aligned>
 801dad8:	1c43      	adds	r3, r0, #1
 801dada:	4604      	mov	r4, r0
 801dadc:	d14d      	bne.n	801db7a <_malloc_r+0xde>
 801dade:	6834      	ldr	r4, [r6, #0]
 801dae0:	4626      	mov	r6, r4
 801dae2:	2e00      	cmp	r6, #0
 801dae4:	d140      	bne.n	801db68 <_malloc_r+0xcc>
 801dae6:	6823      	ldr	r3, [r4, #0]
 801dae8:	4631      	mov	r1, r6
 801daea:	4638      	mov	r0, r7
 801daec:	eb04 0803 	add.w	r8, r4, r3
 801daf0:	f000 fb36 	bl	801e160 <_sbrk_r>
 801daf4:	4580      	cmp	r8, r0
 801daf6:	d13a      	bne.n	801db6e <_malloc_r+0xd2>
 801daf8:	6821      	ldr	r1, [r4, #0]
 801dafa:	3503      	adds	r5, #3
 801dafc:	1a6d      	subs	r5, r5, r1
 801dafe:	f025 0503 	bic.w	r5, r5, #3
 801db02:	3508      	adds	r5, #8
 801db04:	2d0c      	cmp	r5, #12
 801db06:	bf38      	it	cc
 801db08:	250c      	movcc	r5, #12
 801db0a:	4629      	mov	r1, r5
 801db0c:	4638      	mov	r0, r7
 801db0e:	f7ff ffa5 	bl	801da5c <sbrk_aligned>
 801db12:	3001      	adds	r0, #1
 801db14:	d02b      	beq.n	801db6e <_malloc_r+0xd2>
 801db16:	6823      	ldr	r3, [r4, #0]
 801db18:	442b      	add	r3, r5
 801db1a:	6023      	str	r3, [r4, #0]
 801db1c:	e00e      	b.n	801db3c <_malloc_r+0xa0>
 801db1e:	6822      	ldr	r2, [r4, #0]
 801db20:	1b52      	subs	r2, r2, r5
 801db22:	d41e      	bmi.n	801db62 <_malloc_r+0xc6>
 801db24:	2a0b      	cmp	r2, #11
 801db26:	d916      	bls.n	801db56 <_malloc_r+0xba>
 801db28:	1961      	adds	r1, r4, r5
 801db2a:	42a3      	cmp	r3, r4
 801db2c:	6025      	str	r5, [r4, #0]
 801db2e:	bf18      	it	ne
 801db30:	6059      	strne	r1, [r3, #4]
 801db32:	6863      	ldr	r3, [r4, #4]
 801db34:	bf08      	it	eq
 801db36:	6031      	streq	r1, [r6, #0]
 801db38:	5162      	str	r2, [r4, r5]
 801db3a:	604b      	str	r3, [r1, #4]
 801db3c:	4638      	mov	r0, r7
 801db3e:	f104 060b 	add.w	r6, r4, #11
 801db42:	f000 fea9 	bl	801e898 <__malloc_unlock>
 801db46:	f026 0607 	bic.w	r6, r6, #7
 801db4a:	1d23      	adds	r3, r4, #4
 801db4c:	1af2      	subs	r2, r6, r3
 801db4e:	d0b6      	beq.n	801dabe <_malloc_r+0x22>
 801db50:	1b9b      	subs	r3, r3, r6
 801db52:	50a3      	str	r3, [r4, r2]
 801db54:	e7b3      	b.n	801dabe <_malloc_r+0x22>
 801db56:	6862      	ldr	r2, [r4, #4]
 801db58:	42a3      	cmp	r3, r4
 801db5a:	bf0c      	ite	eq
 801db5c:	6032      	streq	r2, [r6, #0]
 801db5e:	605a      	strne	r2, [r3, #4]
 801db60:	e7ec      	b.n	801db3c <_malloc_r+0xa0>
 801db62:	4623      	mov	r3, r4
 801db64:	6864      	ldr	r4, [r4, #4]
 801db66:	e7b2      	b.n	801dace <_malloc_r+0x32>
 801db68:	4634      	mov	r4, r6
 801db6a:	6876      	ldr	r6, [r6, #4]
 801db6c:	e7b9      	b.n	801dae2 <_malloc_r+0x46>
 801db6e:	230c      	movs	r3, #12
 801db70:	603b      	str	r3, [r7, #0]
 801db72:	4638      	mov	r0, r7
 801db74:	f000 fe90 	bl	801e898 <__malloc_unlock>
 801db78:	e7a1      	b.n	801dabe <_malloc_r+0x22>
 801db7a:	6025      	str	r5, [r4, #0]
 801db7c:	e7de      	b.n	801db3c <_malloc_r+0xa0>
 801db7e:	bf00      	nop
 801db80:	2400e538 	.word	0x2400e538

0801db84 <__sfputc_r>:
 801db84:	6893      	ldr	r3, [r2, #8]
 801db86:	3b01      	subs	r3, #1
 801db88:	2b00      	cmp	r3, #0
 801db8a:	b410      	push	{r4}
 801db8c:	6093      	str	r3, [r2, #8]
 801db8e:	da08      	bge.n	801dba2 <__sfputc_r+0x1e>
 801db90:	6994      	ldr	r4, [r2, #24]
 801db92:	42a3      	cmp	r3, r4
 801db94:	db01      	blt.n	801db9a <__sfputc_r+0x16>
 801db96:	290a      	cmp	r1, #10
 801db98:	d103      	bne.n	801dba2 <__sfputc_r+0x1e>
 801db9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801db9e:	f000 bb33 	b.w	801e208 <__swbuf_r>
 801dba2:	6813      	ldr	r3, [r2, #0]
 801dba4:	1c58      	adds	r0, r3, #1
 801dba6:	6010      	str	r0, [r2, #0]
 801dba8:	7019      	strb	r1, [r3, #0]
 801dbaa:	4608      	mov	r0, r1
 801dbac:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dbb0:	4770      	bx	lr

0801dbb2 <__sfputs_r>:
 801dbb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dbb4:	4606      	mov	r6, r0
 801dbb6:	460f      	mov	r7, r1
 801dbb8:	4614      	mov	r4, r2
 801dbba:	18d5      	adds	r5, r2, r3
 801dbbc:	42ac      	cmp	r4, r5
 801dbbe:	d101      	bne.n	801dbc4 <__sfputs_r+0x12>
 801dbc0:	2000      	movs	r0, #0
 801dbc2:	e007      	b.n	801dbd4 <__sfputs_r+0x22>
 801dbc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dbc8:	463a      	mov	r2, r7
 801dbca:	4630      	mov	r0, r6
 801dbcc:	f7ff ffda 	bl	801db84 <__sfputc_r>
 801dbd0:	1c43      	adds	r3, r0, #1
 801dbd2:	d1f3      	bne.n	801dbbc <__sfputs_r+0xa>
 801dbd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801dbd8 <_vfiprintf_r>:
 801dbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbdc:	460d      	mov	r5, r1
 801dbde:	b09d      	sub	sp, #116	; 0x74
 801dbe0:	4614      	mov	r4, r2
 801dbe2:	4698      	mov	r8, r3
 801dbe4:	4606      	mov	r6, r0
 801dbe6:	b118      	cbz	r0, 801dbf0 <_vfiprintf_r+0x18>
 801dbe8:	6983      	ldr	r3, [r0, #24]
 801dbea:	b90b      	cbnz	r3, 801dbf0 <_vfiprintf_r+0x18>
 801dbec:	f000 fd48 	bl	801e680 <__sinit>
 801dbf0:	4b89      	ldr	r3, [pc, #548]	; (801de18 <_vfiprintf_r+0x240>)
 801dbf2:	429d      	cmp	r5, r3
 801dbf4:	d11b      	bne.n	801dc2e <_vfiprintf_r+0x56>
 801dbf6:	6875      	ldr	r5, [r6, #4]
 801dbf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dbfa:	07d9      	lsls	r1, r3, #31
 801dbfc:	d405      	bmi.n	801dc0a <_vfiprintf_r+0x32>
 801dbfe:	89ab      	ldrh	r3, [r5, #12]
 801dc00:	059a      	lsls	r2, r3, #22
 801dc02:	d402      	bmi.n	801dc0a <_vfiprintf_r+0x32>
 801dc04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801dc06:	f000 fdd9 	bl	801e7bc <__retarget_lock_acquire_recursive>
 801dc0a:	89ab      	ldrh	r3, [r5, #12]
 801dc0c:	071b      	lsls	r3, r3, #28
 801dc0e:	d501      	bpl.n	801dc14 <_vfiprintf_r+0x3c>
 801dc10:	692b      	ldr	r3, [r5, #16]
 801dc12:	b9eb      	cbnz	r3, 801dc50 <_vfiprintf_r+0x78>
 801dc14:	4629      	mov	r1, r5
 801dc16:	4630      	mov	r0, r6
 801dc18:	f000 fb48 	bl	801e2ac <__swsetup_r>
 801dc1c:	b1c0      	cbz	r0, 801dc50 <_vfiprintf_r+0x78>
 801dc1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dc20:	07dc      	lsls	r4, r3, #31
 801dc22:	d50e      	bpl.n	801dc42 <_vfiprintf_r+0x6a>
 801dc24:	f04f 30ff 	mov.w	r0, #4294967295
 801dc28:	b01d      	add	sp, #116	; 0x74
 801dc2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc2e:	4b7b      	ldr	r3, [pc, #492]	; (801de1c <_vfiprintf_r+0x244>)
 801dc30:	429d      	cmp	r5, r3
 801dc32:	d101      	bne.n	801dc38 <_vfiprintf_r+0x60>
 801dc34:	68b5      	ldr	r5, [r6, #8]
 801dc36:	e7df      	b.n	801dbf8 <_vfiprintf_r+0x20>
 801dc38:	4b79      	ldr	r3, [pc, #484]	; (801de20 <_vfiprintf_r+0x248>)
 801dc3a:	429d      	cmp	r5, r3
 801dc3c:	bf08      	it	eq
 801dc3e:	68f5      	ldreq	r5, [r6, #12]
 801dc40:	e7da      	b.n	801dbf8 <_vfiprintf_r+0x20>
 801dc42:	89ab      	ldrh	r3, [r5, #12]
 801dc44:	0598      	lsls	r0, r3, #22
 801dc46:	d4ed      	bmi.n	801dc24 <_vfiprintf_r+0x4c>
 801dc48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801dc4a:	f000 fdb9 	bl	801e7c0 <__retarget_lock_release_recursive>
 801dc4e:	e7e9      	b.n	801dc24 <_vfiprintf_r+0x4c>
 801dc50:	2300      	movs	r3, #0
 801dc52:	9309      	str	r3, [sp, #36]	; 0x24
 801dc54:	2320      	movs	r3, #32
 801dc56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801dc5a:	f8cd 800c 	str.w	r8, [sp, #12]
 801dc5e:	2330      	movs	r3, #48	; 0x30
 801dc60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801de24 <_vfiprintf_r+0x24c>
 801dc64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801dc68:	f04f 0901 	mov.w	r9, #1
 801dc6c:	4623      	mov	r3, r4
 801dc6e:	469a      	mov	sl, r3
 801dc70:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dc74:	b10a      	cbz	r2, 801dc7a <_vfiprintf_r+0xa2>
 801dc76:	2a25      	cmp	r2, #37	; 0x25
 801dc78:	d1f9      	bne.n	801dc6e <_vfiprintf_r+0x96>
 801dc7a:	ebba 0b04 	subs.w	fp, sl, r4
 801dc7e:	d00b      	beq.n	801dc98 <_vfiprintf_r+0xc0>
 801dc80:	465b      	mov	r3, fp
 801dc82:	4622      	mov	r2, r4
 801dc84:	4629      	mov	r1, r5
 801dc86:	4630      	mov	r0, r6
 801dc88:	f7ff ff93 	bl	801dbb2 <__sfputs_r>
 801dc8c:	3001      	adds	r0, #1
 801dc8e:	f000 80aa 	beq.w	801dde6 <_vfiprintf_r+0x20e>
 801dc92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dc94:	445a      	add	r2, fp
 801dc96:	9209      	str	r2, [sp, #36]	; 0x24
 801dc98:	f89a 3000 	ldrb.w	r3, [sl]
 801dc9c:	2b00      	cmp	r3, #0
 801dc9e:	f000 80a2 	beq.w	801dde6 <_vfiprintf_r+0x20e>
 801dca2:	2300      	movs	r3, #0
 801dca4:	f04f 32ff 	mov.w	r2, #4294967295
 801dca8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801dcac:	f10a 0a01 	add.w	sl, sl, #1
 801dcb0:	9304      	str	r3, [sp, #16]
 801dcb2:	9307      	str	r3, [sp, #28]
 801dcb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801dcb8:	931a      	str	r3, [sp, #104]	; 0x68
 801dcba:	4654      	mov	r4, sl
 801dcbc:	2205      	movs	r2, #5
 801dcbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dcc2:	4858      	ldr	r0, [pc, #352]	; (801de24 <_vfiprintf_r+0x24c>)
 801dcc4:	f7e2 fb0c 	bl	80002e0 <memchr>
 801dcc8:	9a04      	ldr	r2, [sp, #16]
 801dcca:	b9d8      	cbnz	r0, 801dd04 <_vfiprintf_r+0x12c>
 801dccc:	06d1      	lsls	r1, r2, #27
 801dcce:	bf44      	itt	mi
 801dcd0:	2320      	movmi	r3, #32
 801dcd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dcd6:	0713      	lsls	r3, r2, #28
 801dcd8:	bf44      	itt	mi
 801dcda:	232b      	movmi	r3, #43	; 0x2b
 801dcdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dce0:	f89a 3000 	ldrb.w	r3, [sl]
 801dce4:	2b2a      	cmp	r3, #42	; 0x2a
 801dce6:	d015      	beq.n	801dd14 <_vfiprintf_r+0x13c>
 801dce8:	9a07      	ldr	r2, [sp, #28]
 801dcea:	4654      	mov	r4, sl
 801dcec:	2000      	movs	r0, #0
 801dcee:	f04f 0c0a 	mov.w	ip, #10
 801dcf2:	4621      	mov	r1, r4
 801dcf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dcf8:	3b30      	subs	r3, #48	; 0x30
 801dcfa:	2b09      	cmp	r3, #9
 801dcfc:	d94e      	bls.n	801dd9c <_vfiprintf_r+0x1c4>
 801dcfe:	b1b0      	cbz	r0, 801dd2e <_vfiprintf_r+0x156>
 801dd00:	9207      	str	r2, [sp, #28]
 801dd02:	e014      	b.n	801dd2e <_vfiprintf_r+0x156>
 801dd04:	eba0 0308 	sub.w	r3, r0, r8
 801dd08:	fa09 f303 	lsl.w	r3, r9, r3
 801dd0c:	4313      	orrs	r3, r2
 801dd0e:	9304      	str	r3, [sp, #16]
 801dd10:	46a2      	mov	sl, r4
 801dd12:	e7d2      	b.n	801dcba <_vfiprintf_r+0xe2>
 801dd14:	9b03      	ldr	r3, [sp, #12]
 801dd16:	1d19      	adds	r1, r3, #4
 801dd18:	681b      	ldr	r3, [r3, #0]
 801dd1a:	9103      	str	r1, [sp, #12]
 801dd1c:	2b00      	cmp	r3, #0
 801dd1e:	bfbb      	ittet	lt
 801dd20:	425b      	neglt	r3, r3
 801dd22:	f042 0202 	orrlt.w	r2, r2, #2
 801dd26:	9307      	strge	r3, [sp, #28]
 801dd28:	9307      	strlt	r3, [sp, #28]
 801dd2a:	bfb8      	it	lt
 801dd2c:	9204      	strlt	r2, [sp, #16]
 801dd2e:	7823      	ldrb	r3, [r4, #0]
 801dd30:	2b2e      	cmp	r3, #46	; 0x2e
 801dd32:	d10c      	bne.n	801dd4e <_vfiprintf_r+0x176>
 801dd34:	7863      	ldrb	r3, [r4, #1]
 801dd36:	2b2a      	cmp	r3, #42	; 0x2a
 801dd38:	d135      	bne.n	801dda6 <_vfiprintf_r+0x1ce>
 801dd3a:	9b03      	ldr	r3, [sp, #12]
 801dd3c:	1d1a      	adds	r2, r3, #4
 801dd3e:	681b      	ldr	r3, [r3, #0]
 801dd40:	9203      	str	r2, [sp, #12]
 801dd42:	2b00      	cmp	r3, #0
 801dd44:	bfb8      	it	lt
 801dd46:	f04f 33ff 	movlt.w	r3, #4294967295
 801dd4a:	3402      	adds	r4, #2
 801dd4c:	9305      	str	r3, [sp, #20]
 801dd4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801de34 <_vfiprintf_r+0x25c>
 801dd52:	7821      	ldrb	r1, [r4, #0]
 801dd54:	2203      	movs	r2, #3
 801dd56:	4650      	mov	r0, sl
 801dd58:	f7e2 fac2 	bl	80002e0 <memchr>
 801dd5c:	b140      	cbz	r0, 801dd70 <_vfiprintf_r+0x198>
 801dd5e:	2340      	movs	r3, #64	; 0x40
 801dd60:	eba0 000a 	sub.w	r0, r0, sl
 801dd64:	fa03 f000 	lsl.w	r0, r3, r0
 801dd68:	9b04      	ldr	r3, [sp, #16]
 801dd6a:	4303      	orrs	r3, r0
 801dd6c:	3401      	adds	r4, #1
 801dd6e:	9304      	str	r3, [sp, #16]
 801dd70:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dd74:	482c      	ldr	r0, [pc, #176]	; (801de28 <_vfiprintf_r+0x250>)
 801dd76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801dd7a:	2206      	movs	r2, #6
 801dd7c:	f7e2 fab0 	bl	80002e0 <memchr>
 801dd80:	2800      	cmp	r0, #0
 801dd82:	d03f      	beq.n	801de04 <_vfiprintf_r+0x22c>
 801dd84:	4b29      	ldr	r3, [pc, #164]	; (801de2c <_vfiprintf_r+0x254>)
 801dd86:	bb1b      	cbnz	r3, 801ddd0 <_vfiprintf_r+0x1f8>
 801dd88:	9b03      	ldr	r3, [sp, #12]
 801dd8a:	3307      	adds	r3, #7
 801dd8c:	f023 0307 	bic.w	r3, r3, #7
 801dd90:	3308      	adds	r3, #8
 801dd92:	9303      	str	r3, [sp, #12]
 801dd94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dd96:	443b      	add	r3, r7
 801dd98:	9309      	str	r3, [sp, #36]	; 0x24
 801dd9a:	e767      	b.n	801dc6c <_vfiprintf_r+0x94>
 801dd9c:	fb0c 3202 	mla	r2, ip, r2, r3
 801dda0:	460c      	mov	r4, r1
 801dda2:	2001      	movs	r0, #1
 801dda4:	e7a5      	b.n	801dcf2 <_vfiprintf_r+0x11a>
 801dda6:	2300      	movs	r3, #0
 801dda8:	3401      	adds	r4, #1
 801ddaa:	9305      	str	r3, [sp, #20]
 801ddac:	4619      	mov	r1, r3
 801ddae:	f04f 0c0a 	mov.w	ip, #10
 801ddb2:	4620      	mov	r0, r4
 801ddb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ddb8:	3a30      	subs	r2, #48	; 0x30
 801ddba:	2a09      	cmp	r2, #9
 801ddbc:	d903      	bls.n	801ddc6 <_vfiprintf_r+0x1ee>
 801ddbe:	2b00      	cmp	r3, #0
 801ddc0:	d0c5      	beq.n	801dd4e <_vfiprintf_r+0x176>
 801ddc2:	9105      	str	r1, [sp, #20]
 801ddc4:	e7c3      	b.n	801dd4e <_vfiprintf_r+0x176>
 801ddc6:	fb0c 2101 	mla	r1, ip, r1, r2
 801ddca:	4604      	mov	r4, r0
 801ddcc:	2301      	movs	r3, #1
 801ddce:	e7f0      	b.n	801ddb2 <_vfiprintf_r+0x1da>
 801ddd0:	ab03      	add	r3, sp, #12
 801ddd2:	9300      	str	r3, [sp, #0]
 801ddd4:	462a      	mov	r2, r5
 801ddd6:	4b16      	ldr	r3, [pc, #88]	; (801de30 <_vfiprintf_r+0x258>)
 801ddd8:	a904      	add	r1, sp, #16
 801ddda:	4630      	mov	r0, r6
 801dddc:	f3af 8000 	nop.w
 801dde0:	4607      	mov	r7, r0
 801dde2:	1c78      	adds	r0, r7, #1
 801dde4:	d1d6      	bne.n	801dd94 <_vfiprintf_r+0x1bc>
 801dde6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dde8:	07d9      	lsls	r1, r3, #31
 801ddea:	d405      	bmi.n	801ddf8 <_vfiprintf_r+0x220>
 801ddec:	89ab      	ldrh	r3, [r5, #12]
 801ddee:	059a      	lsls	r2, r3, #22
 801ddf0:	d402      	bmi.n	801ddf8 <_vfiprintf_r+0x220>
 801ddf2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ddf4:	f000 fce4 	bl	801e7c0 <__retarget_lock_release_recursive>
 801ddf8:	89ab      	ldrh	r3, [r5, #12]
 801ddfa:	065b      	lsls	r3, r3, #25
 801ddfc:	f53f af12 	bmi.w	801dc24 <_vfiprintf_r+0x4c>
 801de00:	9809      	ldr	r0, [sp, #36]	; 0x24
 801de02:	e711      	b.n	801dc28 <_vfiprintf_r+0x50>
 801de04:	ab03      	add	r3, sp, #12
 801de06:	9300      	str	r3, [sp, #0]
 801de08:	462a      	mov	r2, r5
 801de0a:	4b09      	ldr	r3, [pc, #36]	; (801de30 <_vfiprintf_r+0x258>)
 801de0c:	a904      	add	r1, sp, #16
 801de0e:	4630      	mov	r0, r6
 801de10:	f000 f880 	bl	801df14 <_printf_i>
 801de14:	e7e4      	b.n	801dde0 <_vfiprintf_r+0x208>
 801de16:	bf00      	nop
 801de18:	08020d54 	.word	0x08020d54
 801de1c:	08020d74 	.word	0x08020d74
 801de20:	08020d34 	.word	0x08020d34
 801de24:	08020cfc 	.word	0x08020cfc
 801de28:	08020d06 	.word	0x08020d06
 801de2c:	00000000 	.word	0x00000000
 801de30:	0801dbb3 	.word	0x0801dbb3
 801de34:	08020d02 	.word	0x08020d02

0801de38 <_printf_common>:
 801de38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801de3c:	4616      	mov	r6, r2
 801de3e:	4699      	mov	r9, r3
 801de40:	688a      	ldr	r2, [r1, #8]
 801de42:	690b      	ldr	r3, [r1, #16]
 801de44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801de48:	4293      	cmp	r3, r2
 801de4a:	bfb8      	it	lt
 801de4c:	4613      	movlt	r3, r2
 801de4e:	6033      	str	r3, [r6, #0]
 801de50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801de54:	4607      	mov	r7, r0
 801de56:	460c      	mov	r4, r1
 801de58:	b10a      	cbz	r2, 801de5e <_printf_common+0x26>
 801de5a:	3301      	adds	r3, #1
 801de5c:	6033      	str	r3, [r6, #0]
 801de5e:	6823      	ldr	r3, [r4, #0]
 801de60:	0699      	lsls	r1, r3, #26
 801de62:	bf42      	ittt	mi
 801de64:	6833      	ldrmi	r3, [r6, #0]
 801de66:	3302      	addmi	r3, #2
 801de68:	6033      	strmi	r3, [r6, #0]
 801de6a:	6825      	ldr	r5, [r4, #0]
 801de6c:	f015 0506 	ands.w	r5, r5, #6
 801de70:	d106      	bne.n	801de80 <_printf_common+0x48>
 801de72:	f104 0a19 	add.w	sl, r4, #25
 801de76:	68e3      	ldr	r3, [r4, #12]
 801de78:	6832      	ldr	r2, [r6, #0]
 801de7a:	1a9b      	subs	r3, r3, r2
 801de7c:	42ab      	cmp	r3, r5
 801de7e:	dc26      	bgt.n	801dece <_printf_common+0x96>
 801de80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801de84:	1e13      	subs	r3, r2, #0
 801de86:	6822      	ldr	r2, [r4, #0]
 801de88:	bf18      	it	ne
 801de8a:	2301      	movne	r3, #1
 801de8c:	0692      	lsls	r2, r2, #26
 801de8e:	d42b      	bmi.n	801dee8 <_printf_common+0xb0>
 801de90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801de94:	4649      	mov	r1, r9
 801de96:	4638      	mov	r0, r7
 801de98:	47c0      	blx	r8
 801de9a:	3001      	adds	r0, #1
 801de9c:	d01e      	beq.n	801dedc <_printf_common+0xa4>
 801de9e:	6823      	ldr	r3, [r4, #0]
 801dea0:	68e5      	ldr	r5, [r4, #12]
 801dea2:	6832      	ldr	r2, [r6, #0]
 801dea4:	f003 0306 	and.w	r3, r3, #6
 801dea8:	2b04      	cmp	r3, #4
 801deaa:	bf08      	it	eq
 801deac:	1aad      	subeq	r5, r5, r2
 801deae:	68a3      	ldr	r3, [r4, #8]
 801deb0:	6922      	ldr	r2, [r4, #16]
 801deb2:	bf0c      	ite	eq
 801deb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801deb8:	2500      	movne	r5, #0
 801deba:	4293      	cmp	r3, r2
 801debc:	bfc4      	itt	gt
 801debe:	1a9b      	subgt	r3, r3, r2
 801dec0:	18ed      	addgt	r5, r5, r3
 801dec2:	2600      	movs	r6, #0
 801dec4:	341a      	adds	r4, #26
 801dec6:	42b5      	cmp	r5, r6
 801dec8:	d11a      	bne.n	801df00 <_printf_common+0xc8>
 801deca:	2000      	movs	r0, #0
 801decc:	e008      	b.n	801dee0 <_printf_common+0xa8>
 801dece:	2301      	movs	r3, #1
 801ded0:	4652      	mov	r2, sl
 801ded2:	4649      	mov	r1, r9
 801ded4:	4638      	mov	r0, r7
 801ded6:	47c0      	blx	r8
 801ded8:	3001      	adds	r0, #1
 801deda:	d103      	bne.n	801dee4 <_printf_common+0xac>
 801dedc:	f04f 30ff 	mov.w	r0, #4294967295
 801dee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dee4:	3501      	adds	r5, #1
 801dee6:	e7c6      	b.n	801de76 <_printf_common+0x3e>
 801dee8:	18e1      	adds	r1, r4, r3
 801deea:	1c5a      	adds	r2, r3, #1
 801deec:	2030      	movs	r0, #48	; 0x30
 801deee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801def2:	4422      	add	r2, r4
 801def4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801def8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801defc:	3302      	adds	r3, #2
 801defe:	e7c7      	b.n	801de90 <_printf_common+0x58>
 801df00:	2301      	movs	r3, #1
 801df02:	4622      	mov	r2, r4
 801df04:	4649      	mov	r1, r9
 801df06:	4638      	mov	r0, r7
 801df08:	47c0      	blx	r8
 801df0a:	3001      	adds	r0, #1
 801df0c:	d0e6      	beq.n	801dedc <_printf_common+0xa4>
 801df0e:	3601      	adds	r6, #1
 801df10:	e7d9      	b.n	801dec6 <_printf_common+0x8e>
	...

0801df14 <_printf_i>:
 801df14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801df18:	7e0f      	ldrb	r7, [r1, #24]
 801df1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801df1c:	2f78      	cmp	r7, #120	; 0x78
 801df1e:	4691      	mov	r9, r2
 801df20:	4680      	mov	r8, r0
 801df22:	460c      	mov	r4, r1
 801df24:	469a      	mov	sl, r3
 801df26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801df2a:	d807      	bhi.n	801df3c <_printf_i+0x28>
 801df2c:	2f62      	cmp	r7, #98	; 0x62
 801df2e:	d80a      	bhi.n	801df46 <_printf_i+0x32>
 801df30:	2f00      	cmp	r7, #0
 801df32:	f000 80d8 	beq.w	801e0e6 <_printf_i+0x1d2>
 801df36:	2f58      	cmp	r7, #88	; 0x58
 801df38:	f000 80a3 	beq.w	801e082 <_printf_i+0x16e>
 801df3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801df40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801df44:	e03a      	b.n	801dfbc <_printf_i+0xa8>
 801df46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801df4a:	2b15      	cmp	r3, #21
 801df4c:	d8f6      	bhi.n	801df3c <_printf_i+0x28>
 801df4e:	a101      	add	r1, pc, #4	; (adr r1, 801df54 <_printf_i+0x40>)
 801df50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801df54:	0801dfad 	.word	0x0801dfad
 801df58:	0801dfc1 	.word	0x0801dfc1
 801df5c:	0801df3d 	.word	0x0801df3d
 801df60:	0801df3d 	.word	0x0801df3d
 801df64:	0801df3d 	.word	0x0801df3d
 801df68:	0801df3d 	.word	0x0801df3d
 801df6c:	0801dfc1 	.word	0x0801dfc1
 801df70:	0801df3d 	.word	0x0801df3d
 801df74:	0801df3d 	.word	0x0801df3d
 801df78:	0801df3d 	.word	0x0801df3d
 801df7c:	0801df3d 	.word	0x0801df3d
 801df80:	0801e0cd 	.word	0x0801e0cd
 801df84:	0801dff1 	.word	0x0801dff1
 801df88:	0801e0af 	.word	0x0801e0af
 801df8c:	0801df3d 	.word	0x0801df3d
 801df90:	0801df3d 	.word	0x0801df3d
 801df94:	0801e0ef 	.word	0x0801e0ef
 801df98:	0801df3d 	.word	0x0801df3d
 801df9c:	0801dff1 	.word	0x0801dff1
 801dfa0:	0801df3d 	.word	0x0801df3d
 801dfa4:	0801df3d 	.word	0x0801df3d
 801dfa8:	0801e0b7 	.word	0x0801e0b7
 801dfac:	682b      	ldr	r3, [r5, #0]
 801dfae:	1d1a      	adds	r2, r3, #4
 801dfb0:	681b      	ldr	r3, [r3, #0]
 801dfb2:	602a      	str	r2, [r5, #0]
 801dfb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801dfb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801dfbc:	2301      	movs	r3, #1
 801dfbe:	e0a3      	b.n	801e108 <_printf_i+0x1f4>
 801dfc0:	6820      	ldr	r0, [r4, #0]
 801dfc2:	6829      	ldr	r1, [r5, #0]
 801dfc4:	0606      	lsls	r6, r0, #24
 801dfc6:	f101 0304 	add.w	r3, r1, #4
 801dfca:	d50a      	bpl.n	801dfe2 <_printf_i+0xce>
 801dfcc:	680e      	ldr	r6, [r1, #0]
 801dfce:	602b      	str	r3, [r5, #0]
 801dfd0:	2e00      	cmp	r6, #0
 801dfd2:	da03      	bge.n	801dfdc <_printf_i+0xc8>
 801dfd4:	232d      	movs	r3, #45	; 0x2d
 801dfd6:	4276      	negs	r6, r6
 801dfd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801dfdc:	485e      	ldr	r0, [pc, #376]	; (801e158 <_printf_i+0x244>)
 801dfde:	230a      	movs	r3, #10
 801dfe0:	e019      	b.n	801e016 <_printf_i+0x102>
 801dfe2:	680e      	ldr	r6, [r1, #0]
 801dfe4:	602b      	str	r3, [r5, #0]
 801dfe6:	f010 0f40 	tst.w	r0, #64	; 0x40
 801dfea:	bf18      	it	ne
 801dfec:	b236      	sxthne	r6, r6
 801dfee:	e7ef      	b.n	801dfd0 <_printf_i+0xbc>
 801dff0:	682b      	ldr	r3, [r5, #0]
 801dff2:	6820      	ldr	r0, [r4, #0]
 801dff4:	1d19      	adds	r1, r3, #4
 801dff6:	6029      	str	r1, [r5, #0]
 801dff8:	0601      	lsls	r1, r0, #24
 801dffa:	d501      	bpl.n	801e000 <_printf_i+0xec>
 801dffc:	681e      	ldr	r6, [r3, #0]
 801dffe:	e002      	b.n	801e006 <_printf_i+0xf2>
 801e000:	0646      	lsls	r6, r0, #25
 801e002:	d5fb      	bpl.n	801dffc <_printf_i+0xe8>
 801e004:	881e      	ldrh	r6, [r3, #0]
 801e006:	4854      	ldr	r0, [pc, #336]	; (801e158 <_printf_i+0x244>)
 801e008:	2f6f      	cmp	r7, #111	; 0x6f
 801e00a:	bf0c      	ite	eq
 801e00c:	2308      	moveq	r3, #8
 801e00e:	230a      	movne	r3, #10
 801e010:	2100      	movs	r1, #0
 801e012:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e016:	6865      	ldr	r5, [r4, #4]
 801e018:	60a5      	str	r5, [r4, #8]
 801e01a:	2d00      	cmp	r5, #0
 801e01c:	bfa2      	ittt	ge
 801e01e:	6821      	ldrge	r1, [r4, #0]
 801e020:	f021 0104 	bicge.w	r1, r1, #4
 801e024:	6021      	strge	r1, [r4, #0]
 801e026:	b90e      	cbnz	r6, 801e02c <_printf_i+0x118>
 801e028:	2d00      	cmp	r5, #0
 801e02a:	d04d      	beq.n	801e0c8 <_printf_i+0x1b4>
 801e02c:	4615      	mov	r5, r2
 801e02e:	fbb6 f1f3 	udiv	r1, r6, r3
 801e032:	fb03 6711 	mls	r7, r3, r1, r6
 801e036:	5dc7      	ldrb	r7, [r0, r7]
 801e038:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801e03c:	4637      	mov	r7, r6
 801e03e:	42bb      	cmp	r3, r7
 801e040:	460e      	mov	r6, r1
 801e042:	d9f4      	bls.n	801e02e <_printf_i+0x11a>
 801e044:	2b08      	cmp	r3, #8
 801e046:	d10b      	bne.n	801e060 <_printf_i+0x14c>
 801e048:	6823      	ldr	r3, [r4, #0]
 801e04a:	07de      	lsls	r6, r3, #31
 801e04c:	d508      	bpl.n	801e060 <_printf_i+0x14c>
 801e04e:	6923      	ldr	r3, [r4, #16]
 801e050:	6861      	ldr	r1, [r4, #4]
 801e052:	4299      	cmp	r1, r3
 801e054:	bfde      	ittt	le
 801e056:	2330      	movle	r3, #48	; 0x30
 801e058:	f805 3c01 	strble.w	r3, [r5, #-1]
 801e05c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801e060:	1b52      	subs	r2, r2, r5
 801e062:	6122      	str	r2, [r4, #16]
 801e064:	f8cd a000 	str.w	sl, [sp]
 801e068:	464b      	mov	r3, r9
 801e06a:	aa03      	add	r2, sp, #12
 801e06c:	4621      	mov	r1, r4
 801e06e:	4640      	mov	r0, r8
 801e070:	f7ff fee2 	bl	801de38 <_printf_common>
 801e074:	3001      	adds	r0, #1
 801e076:	d14c      	bne.n	801e112 <_printf_i+0x1fe>
 801e078:	f04f 30ff 	mov.w	r0, #4294967295
 801e07c:	b004      	add	sp, #16
 801e07e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e082:	4835      	ldr	r0, [pc, #212]	; (801e158 <_printf_i+0x244>)
 801e084:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801e088:	6829      	ldr	r1, [r5, #0]
 801e08a:	6823      	ldr	r3, [r4, #0]
 801e08c:	f851 6b04 	ldr.w	r6, [r1], #4
 801e090:	6029      	str	r1, [r5, #0]
 801e092:	061d      	lsls	r5, r3, #24
 801e094:	d514      	bpl.n	801e0c0 <_printf_i+0x1ac>
 801e096:	07df      	lsls	r7, r3, #31
 801e098:	bf44      	itt	mi
 801e09a:	f043 0320 	orrmi.w	r3, r3, #32
 801e09e:	6023      	strmi	r3, [r4, #0]
 801e0a0:	b91e      	cbnz	r6, 801e0aa <_printf_i+0x196>
 801e0a2:	6823      	ldr	r3, [r4, #0]
 801e0a4:	f023 0320 	bic.w	r3, r3, #32
 801e0a8:	6023      	str	r3, [r4, #0]
 801e0aa:	2310      	movs	r3, #16
 801e0ac:	e7b0      	b.n	801e010 <_printf_i+0xfc>
 801e0ae:	6823      	ldr	r3, [r4, #0]
 801e0b0:	f043 0320 	orr.w	r3, r3, #32
 801e0b4:	6023      	str	r3, [r4, #0]
 801e0b6:	2378      	movs	r3, #120	; 0x78
 801e0b8:	4828      	ldr	r0, [pc, #160]	; (801e15c <_printf_i+0x248>)
 801e0ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801e0be:	e7e3      	b.n	801e088 <_printf_i+0x174>
 801e0c0:	0659      	lsls	r1, r3, #25
 801e0c2:	bf48      	it	mi
 801e0c4:	b2b6      	uxthmi	r6, r6
 801e0c6:	e7e6      	b.n	801e096 <_printf_i+0x182>
 801e0c8:	4615      	mov	r5, r2
 801e0ca:	e7bb      	b.n	801e044 <_printf_i+0x130>
 801e0cc:	682b      	ldr	r3, [r5, #0]
 801e0ce:	6826      	ldr	r6, [r4, #0]
 801e0d0:	6961      	ldr	r1, [r4, #20]
 801e0d2:	1d18      	adds	r0, r3, #4
 801e0d4:	6028      	str	r0, [r5, #0]
 801e0d6:	0635      	lsls	r5, r6, #24
 801e0d8:	681b      	ldr	r3, [r3, #0]
 801e0da:	d501      	bpl.n	801e0e0 <_printf_i+0x1cc>
 801e0dc:	6019      	str	r1, [r3, #0]
 801e0de:	e002      	b.n	801e0e6 <_printf_i+0x1d2>
 801e0e0:	0670      	lsls	r0, r6, #25
 801e0e2:	d5fb      	bpl.n	801e0dc <_printf_i+0x1c8>
 801e0e4:	8019      	strh	r1, [r3, #0]
 801e0e6:	2300      	movs	r3, #0
 801e0e8:	6123      	str	r3, [r4, #16]
 801e0ea:	4615      	mov	r5, r2
 801e0ec:	e7ba      	b.n	801e064 <_printf_i+0x150>
 801e0ee:	682b      	ldr	r3, [r5, #0]
 801e0f0:	1d1a      	adds	r2, r3, #4
 801e0f2:	602a      	str	r2, [r5, #0]
 801e0f4:	681d      	ldr	r5, [r3, #0]
 801e0f6:	6862      	ldr	r2, [r4, #4]
 801e0f8:	2100      	movs	r1, #0
 801e0fa:	4628      	mov	r0, r5
 801e0fc:	f7e2 f8f0 	bl	80002e0 <memchr>
 801e100:	b108      	cbz	r0, 801e106 <_printf_i+0x1f2>
 801e102:	1b40      	subs	r0, r0, r5
 801e104:	6060      	str	r0, [r4, #4]
 801e106:	6863      	ldr	r3, [r4, #4]
 801e108:	6123      	str	r3, [r4, #16]
 801e10a:	2300      	movs	r3, #0
 801e10c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e110:	e7a8      	b.n	801e064 <_printf_i+0x150>
 801e112:	6923      	ldr	r3, [r4, #16]
 801e114:	462a      	mov	r2, r5
 801e116:	4649      	mov	r1, r9
 801e118:	4640      	mov	r0, r8
 801e11a:	47d0      	blx	sl
 801e11c:	3001      	adds	r0, #1
 801e11e:	d0ab      	beq.n	801e078 <_printf_i+0x164>
 801e120:	6823      	ldr	r3, [r4, #0]
 801e122:	079b      	lsls	r3, r3, #30
 801e124:	d413      	bmi.n	801e14e <_printf_i+0x23a>
 801e126:	68e0      	ldr	r0, [r4, #12]
 801e128:	9b03      	ldr	r3, [sp, #12]
 801e12a:	4298      	cmp	r0, r3
 801e12c:	bfb8      	it	lt
 801e12e:	4618      	movlt	r0, r3
 801e130:	e7a4      	b.n	801e07c <_printf_i+0x168>
 801e132:	2301      	movs	r3, #1
 801e134:	4632      	mov	r2, r6
 801e136:	4649      	mov	r1, r9
 801e138:	4640      	mov	r0, r8
 801e13a:	47d0      	blx	sl
 801e13c:	3001      	adds	r0, #1
 801e13e:	d09b      	beq.n	801e078 <_printf_i+0x164>
 801e140:	3501      	adds	r5, #1
 801e142:	68e3      	ldr	r3, [r4, #12]
 801e144:	9903      	ldr	r1, [sp, #12]
 801e146:	1a5b      	subs	r3, r3, r1
 801e148:	42ab      	cmp	r3, r5
 801e14a:	dcf2      	bgt.n	801e132 <_printf_i+0x21e>
 801e14c:	e7eb      	b.n	801e126 <_printf_i+0x212>
 801e14e:	2500      	movs	r5, #0
 801e150:	f104 0619 	add.w	r6, r4, #25
 801e154:	e7f5      	b.n	801e142 <_printf_i+0x22e>
 801e156:	bf00      	nop
 801e158:	08020d0d 	.word	0x08020d0d
 801e15c:	08020d1e 	.word	0x08020d1e

0801e160 <_sbrk_r>:
 801e160:	b538      	push	{r3, r4, r5, lr}
 801e162:	4d06      	ldr	r5, [pc, #24]	; (801e17c <_sbrk_r+0x1c>)
 801e164:	2300      	movs	r3, #0
 801e166:	4604      	mov	r4, r0
 801e168:	4608      	mov	r0, r1
 801e16a:	602b      	str	r3, [r5, #0]
 801e16c:	f7e3 f826 	bl	80011bc <_sbrk>
 801e170:	1c43      	adds	r3, r0, #1
 801e172:	d102      	bne.n	801e17a <_sbrk_r+0x1a>
 801e174:	682b      	ldr	r3, [r5, #0]
 801e176:	b103      	cbz	r3, 801e17a <_sbrk_r+0x1a>
 801e178:	6023      	str	r3, [r4, #0]
 801e17a:	bd38      	pop	{r3, r4, r5, pc}
 801e17c:	2400e6dc 	.word	0x2400e6dc

0801e180 <_raise_r>:
 801e180:	291f      	cmp	r1, #31
 801e182:	b538      	push	{r3, r4, r5, lr}
 801e184:	4604      	mov	r4, r0
 801e186:	460d      	mov	r5, r1
 801e188:	d904      	bls.n	801e194 <_raise_r+0x14>
 801e18a:	2316      	movs	r3, #22
 801e18c:	6003      	str	r3, [r0, #0]
 801e18e:	f04f 30ff 	mov.w	r0, #4294967295
 801e192:	bd38      	pop	{r3, r4, r5, pc}
 801e194:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e196:	b112      	cbz	r2, 801e19e <_raise_r+0x1e>
 801e198:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e19c:	b94b      	cbnz	r3, 801e1b2 <_raise_r+0x32>
 801e19e:	4620      	mov	r0, r4
 801e1a0:	f000 f830 	bl	801e204 <_getpid_r>
 801e1a4:	462a      	mov	r2, r5
 801e1a6:	4601      	mov	r1, r0
 801e1a8:	4620      	mov	r0, r4
 801e1aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e1ae:	f000 b817 	b.w	801e1e0 <_kill_r>
 801e1b2:	2b01      	cmp	r3, #1
 801e1b4:	d00a      	beq.n	801e1cc <_raise_r+0x4c>
 801e1b6:	1c59      	adds	r1, r3, #1
 801e1b8:	d103      	bne.n	801e1c2 <_raise_r+0x42>
 801e1ba:	2316      	movs	r3, #22
 801e1bc:	6003      	str	r3, [r0, #0]
 801e1be:	2001      	movs	r0, #1
 801e1c0:	e7e7      	b.n	801e192 <_raise_r+0x12>
 801e1c2:	2400      	movs	r4, #0
 801e1c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e1c8:	4628      	mov	r0, r5
 801e1ca:	4798      	blx	r3
 801e1cc:	2000      	movs	r0, #0
 801e1ce:	e7e0      	b.n	801e192 <_raise_r+0x12>

0801e1d0 <raise>:
 801e1d0:	4b02      	ldr	r3, [pc, #8]	; (801e1dc <raise+0xc>)
 801e1d2:	4601      	mov	r1, r0
 801e1d4:	6818      	ldr	r0, [r3, #0]
 801e1d6:	f7ff bfd3 	b.w	801e180 <_raise_r>
 801e1da:	bf00      	nop
 801e1dc:	240000b4 	.word	0x240000b4

0801e1e0 <_kill_r>:
 801e1e0:	b538      	push	{r3, r4, r5, lr}
 801e1e2:	4d07      	ldr	r5, [pc, #28]	; (801e200 <_kill_r+0x20>)
 801e1e4:	2300      	movs	r3, #0
 801e1e6:	4604      	mov	r4, r0
 801e1e8:	4608      	mov	r0, r1
 801e1ea:	4611      	mov	r1, r2
 801e1ec:	602b      	str	r3, [r5, #0]
 801e1ee:	f7e2 ffaf 	bl	8001150 <_kill>
 801e1f2:	1c43      	adds	r3, r0, #1
 801e1f4:	d102      	bne.n	801e1fc <_kill_r+0x1c>
 801e1f6:	682b      	ldr	r3, [r5, #0]
 801e1f8:	b103      	cbz	r3, 801e1fc <_kill_r+0x1c>
 801e1fa:	6023      	str	r3, [r4, #0]
 801e1fc:	bd38      	pop	{r3, r4, r5, pc}
 801e1fe:	bf00      	nop
 801e200:	2400e6dc 	.word	0x2400e6dc

0801e204 <_getpid_r>:
 801e204:	f7e2 bfa2 	b.w	800114c <_getpid>

0801e208 <__swbuf_r>:
 801e208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e20a:	460e      	mov	r6, r1
 801e20c:	4614      	mov	r4, r2
 801e20e:	4605      	mov	r5, r0
 801e210:	b118      	cbz	r0, 801e21a <__swbuf_r+0x12>
 801e212:	6983      	ldr	r3, [r0, #24]
 801e214:	b90b      	cbnz	r3, 801e21a <__swbuf_r+0x12>
 801e216:	f000 fa33 	bl	801e680 <__sinit>
 801e21a:	4b21      	ldr	r3, [pc, #132]	; (801e2a0 <__swbuf_r+0x98>)
 801e21c:	429c      	cmp	r4, r3
 801e21e:	d12b      	bne.n	801e278 <__swbuf_r+0x70>
 801e220:	686c      	ldr	r4, [r5, #4]
 801e222:	69a3      	ldr	r3, [r4, #24]
 801e224:	60a3      	str	r3, [r4, #8]
 801e226:	89a3      	ldrh	r3, [r4, #12]
 801e228:	071a      	lsls	r2, r3, #28
 801e22a:	d52f      	bpl.n	801e28c <__swbuf_r+0x84>
 801e22c:	6923      	ldr	r3, [r4, #16]
 801e22e:	b36b      	cbz	r3, 801e28c <__swbuf_r+0x84>
 801e230:	6923      	ldr	r3, [r4, #16]
 801e232:	6820      	ldr	r0, [r4, #0]
 801e234:	1ac0      	subs	r0, r0, r3
 801e236:	6963      	ldr	r3, [r4, #20]
 801e238:	b2f6      	uxtb	r6, r6
 801e23a:	4283      	cmp	r3, r0
 801e23c:	4637      	mov	r7, r6
 801e23e:	dc04      	bgt.n	801e24a <__swbuf_r+0x42>
 801e240:	4621      	mov	r1, r4
 801e242:	4628      	mov	r0, r5
 801e244:	f000 f988 	bl	801e558 <_fflush_r>
 801e248:	bb30      	cbnz	r0, 801e298 <__swbuf_r+0x90>
 801e24a:	68a3      	ldr	r3, [r4, #8]
 801e24c:	3b01      	subs	r3, #1
 801e24e:	60a3      	str	r3, [r4, #8]
 801e250:	6823      	ldr	r3, [r4, #0]
 801e252:	1c5a      	adds	r2, r3, #1
 801e254:	6022      	str	r2, [r4, #0]
 801e256:	701e      	strb	r6, [r3, #0]
 801e258:	6963      	ldr	r3, [r4, #20]
 801e25a:	3001      	adds	r0, #1
 801e25c:	4283      	cmp	r3, r0
 801e25e:	d004      	beq.n	801e26a <__swbuf_r+0x62>
 801e260:	89a3      	ldrh	r3, [r4, #12]
 801e262:	07db      	lsls	r3, r3, #31
 801e264:	d506      	bpl.n	801e274 <__swbuf_r+0x6c>
 801e266:	2e0a      	cmp	r6, #10
 801e268:	d104      	bne.n	801e274 <__swbuf_r+0x6c>
 801e26a:	4621      	mov	r1, r4
 801e26c:	4628      	mov	r0, r5
 801e26e:	f000 f973 	bl	801e558 <_fflush_r>
 801e272:	b988      	cbnz	r0, 801e298 <__swbuf_r+0x90>
 801e274:	4638      	mov	r0, r7
 801e276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e278:	4b0a      	ldr	r3, [pc, #40]	; (801e2a4 <__swbuf_r+0x9c>)
 801e27a:	429c      	cmp	r4, r3
 801e27c:	d101      	bne.n	801e282 <__swbuf_r+0x7a>
 801e27e:	68ac      	ldr	r4, [r5, #8]
 801e280:	e7cf      	b.n	801e222 <__swbuf_r+0x1a>
 801e282:	4b09      	ldr	r3, [pc, #36]	; (801e2a8 <__swbuf_r+0xa0>)
 801e284:	429c      	cmp	r4, r3
 801e286:	bf08      	it	eq
 801e288:	68ec      	ldreq	r4, [r5, #12]
 801e28a:	e7ca      	b.n	801e222 <__swbuf_r+0x1a>
 801e28c:	4621      	mov	r1, r4
 801e28e:	4628      	mov	r0, r5
 801e290:	f000 f80c 	bl	801e2ac <__swsetup_r>
 801e294:	2800      	cmp	r0, #0
 801e296:	d0cb      	beq.n	801e230 <__swbuf_r+0x28>
 801e298:	f04f 37ff 	mov.w	r7, #4294967295
 801e29c:	e7ea      	b.n	801e274 <__swbuf_r+0x6c>
 801e29e:	bf00      	nop
 801e2a0:	08020d54 	.word	0x08020d54
 801e2a4:	08020d74 	.word	0x08020d74
 801e2a8:	08020d34 	.word	0x08020d34

0801e2ac <__swsetup_r>:
 801e2ac:	4b32      	ldr	r3, [pc, #200]	; (801e378 <__swsetup_r+0xcc>)
 801e2ae:	b570      	push	{r4, r5, r6, lr}
 801e2b0:	681d      	ldr	r5, [r3, #0]
 801e2b2:	4606      	mov	r6, r0
 801e2b4:	460c      	mov	r4, r1
 801e2b6:	b125      	cbz	r5, 801e2c2 <__swsetup_r+0x16>
 801e2b8:	69ab      	ldr	r3, [r5, #24]
 801e2ba:	b913      	cbnz	r3, 801e2c2 <__swsetup_r+0x16>
 801e2bc:	4628      	mov	r0, r5
 801e2be:	f000 f9df 	bl	801e680 <__sinit>
 801e2c2:	4b2e      	ldr	r3, [pc, #184]	; (801e37c <__swsetup_r+0xd0>)
 801e2c4:	429c      	cmp	r4, r3
 801e2c6:	d10f      	bne.n	801e2e8 <__swsetup_r+0x3c>
 801e2c8:	686c      	ldr	r4, [r5, #4]
 801e2ca:	89a3      	ldrh	r3, [r4, #12]
 801e2cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e2d0:	0719      	lsls	r1, r3, #28
 801e2d2:	d42c      	bmi.n	801e32e <__swsetup_r+0x82>
 801e2d4:	06dd      	lsls	r5, r3, #27
 801e2d6:	d411      	bmi.n	801e2fc <__swsetup_r+0x50>
 801e2d8:	2309      	movs	r3, #9
 801e2da:	6033      	str	r3, [r6, #0]
 801e2dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e2e0:	81a3      	strh	r3, [r4, #12]
 801e2e2:	f04f 30ff 	mov.w	r0, #4294967295
 801e2e6:	e03e      	b.n	801e366 <__swsetup_r+0xba>
 801e2e8:	4b25      	ldr	r3, [pc, #148]	; (801e380 <__swsetup_r+0xd4>)
 801e2ea:	429c      	cmp	r4, r3
 801e2ec:	d101      	bne.n	801e2f2 <__swsetup_r+0x46>
 801e2ee:	68ac      	ldr	r4, [r5, #8]
 801e2f0:	e7eb      	b.n	801e2ca <__swsetup_r+0x1e>
 801e2f2:	4b24      	ldr	r3, [pc, #144]	; (801e384 <__swsetup_r+0xd8>)
 801e2f4:	429c      	cmp	r4, r3
 801e2f6:	bf08      	it	eq
 801e2f8:	68ec      	ldreq	r4, [r5, #12]
 801e2fa:	e7e6      	b.n	801e2ca <__swsetup_r+0x1e>
 801e2fc:	0758      	lsls	r0, r3, #29
 801e2fe:	d512      	bpl.n	801e326 <__swsetup_r+0x7a>
 801e300:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e302:	b141      	cbz	r1, 801e316 <__swsetup_r+0x6a>
 801e304:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e308:	4299      	cmp	r1, r3
 801e30a:	d002      	beq.n	801e312 <__swsetup_r+0x66>
 801e30c:	4630      	mov	r0, r6
 801e30e:	f7ff fb59 	bl	801d9c4 <_free_r>
 801e312:	2300      	movs	r3, #0
 801e314:	6363      	str	r3, [r4, #52]	; 0x34
 801e316:	89a3      	ldrh	r3, [r4, #12]
 801e318:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e31c:	81a3      	strh	r3, [r4, #12]
 801e31e:	2300      	movs	r3, #0
 801e320:	6063      	str	r3, [r4, #4]
 801e322:	6923      	ldr	r3, [r4, #16]
 801e324:	6023      	str	r3, [r4, #0]
 801e326:	89a3      	ldrh	r3, [r4, #12]
 801e328:	f043 0308 	orr.w	r3, r3, #8
 801e32c:	81a3      	strh	r3, [r4, #12]
 801e32e:	6923      	ldr	r3, [r4, #16]
 801e330:	b94b      	cbnz	r3, 801e346 <__swsetup_r+0x9a>
 801e332:	89a3      	ldrh	r3, [r4, #12]
 801e334:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e33c:	d003      	beq.n	801e346 <__swsetup_r+0x9a>
 801e33e:	4621      	mov	r1, r4
 801e340:	4630      	mov	r0, r6
 801e342:	f000 fa63 	bl	801e80c <__smakebuf_r>
 801e346:	89a0      	ldrh	r0, [r4, #12]
 801e348:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e34c:	f010 0301 	ands.w	r3, r0, #1
 801e350:	d00a      	beq.n	801e368 <__swsetup_r+0xbc>
 801e352:	2300      	movs	r3, #0
 801e354:	60a3      	str	r3, [r4, #8]
 801e356:	6963      	ldr	r3, [r4, #20]
 801e358:	425b      	negs	r3, r3
 801e35a:	61a3      	str	r3, [r4, #24]
 801e35c:	6923      	ldr	r3, [r4, #16]
 801e35e:	b943      	cbnz	r3, 801e372 <__swsetup_r+0xc6>
 801e360:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e364:	d1ba      	bne.n	801e2dc <__swsetup_r+0x30>
 801e366:	bd70      	pop	{r4, r5, r6, pc}
 801e368:	0781      	lsls	r1, r0, #30
 801e36a:	bf58      	it	pl
 801e36c:	6963      	ldrpl	r3, [r4, #20]
 801e36e:	60a3      	str	r3, [r4, #8]
 801e370:	e7f4      	b.n	801e35c <__swsetup_r+0xb0>
 801e372:	2000      	movs	r0, #0
 801e374:	e7f7      	b.n	801e366 <__swsetup_r+0xba>
 801e376:	bf00      	nop
 801e378:	240000b4 	.word	0x240000b4
 801e37c:	08020d54 	.word	0x08020d54
 801e380:	08020d74 	.word	0x08020d74
 801e384:	08020d34 	.word	0x08020d34

0801e388 <__register_exitproc>:
 801e388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e38c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801e448 <__register_exitproc+0xc0>
 801e390:	4606      	mov	r6, r0
 801e392:	f8d8 0000 	ldr.w	r0, [r8]
 801e396:	461f      	mov	r7, r3
 801e398:	460d      	mov	r5, r1
 801e39a:	4691      	mov	r9, r2
 801e39c:	f000 fa0e 	bl	801e7bc <__retarget_lock_acquire_recursive>
 801e3a0:	4b25      	ldr	r3, [pc, #148]	; (801e438 <__register_exitproc+0xb0>)
 801e3a2:	681c      	ldr	r4, [r3, #0]
 801e3a4:	b934      	cbnz	r4, 801e3b4 <__register_exitproc+0x2c>
 801e3a6:	4c25      	ldr	r4, [pc, #148]	; (801e43c <__register_exitproc+0xb4>)
 801e3a8:	601c      	str	r4, [r3, #0]
 801e3aa:	4b25      	ldr	r3, [pc, #148]	; (801e440 <__register_exitproc+0xb8>)
 801e3ac:	b113      	cbz	r3, 801e3b4 <__register_exitproc+0x2c>
 801e3ae:	681b      	ldr	r3, [r3, #0]
 801e3b0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801e3b4:	6863      	ldr	r3, [r4, #4]
 801e3b6:	2b1f      	cmp	r3, #31
 801e3b8:	dd07      	ble.n	801e3ca <__register_exitproc+0x42>
 801e3ba:	f8d8 0000 	ldr.w	r0, [r8]
 801e3be:	f000 f9ff 	bl	801e7c0 <__retarget_lock_release_recursive>
 801e3c2:	f04f 30ff 	mov.w	r0, #4294967295
 801e3c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e3ca:	b34e      	cbz	r6, 801e420 <__register_exitproc+0x98>
 801e3cc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801e3d0:	b988      	cbnz	r0, 801e3f6 <__register_exitproc+0x6e>
 801e3d2:	4b1c      	ldr	r3, [pc, #112]	; (801e444 <__register_exitproc+0xbc>)
 801e3d4:	b923      	cbnz	r3, 801e3e0 <__register_exitproc+0x58>
 801e3d6:	f8d8 0000 	ldr.w	r0, [r8]
 801e3da:	f000 f9f0 	bl	801e7be <__retarget_lock_release>
 801e3de:	e7f0      	b.n	801e3c2 <__register_exitproc+0x3a>
 801e3e0:	f44f 7084 	mov.w	r0, #264	; 0x108
 801e3e4:	f7ff fac8 	bl	801d978 <malloc>
 801e3e8:	2800      	cmp	r0, #0
 801e3ea:	d0f4      	beq.n	801e3d6 <__register_exitproc+0x4e>
 801e3ec:	2300      	movs	r3, #0
 801e3ee:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801e3f2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801e3f6:	6863      	ldr	r3, [r4, #4]
 801e3f8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801e3fc:	2201      	movs	r2, #1
 801e3fe:	409a      	lsls	r2, r3
 801e400:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801e404:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801e408:	4313      	orrs	r3, r2
 801e40a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801e40e:	2e02      	cmp	r6, #2
 801e410:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801e414:	bf02      	ittt	eq
 801e416:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801e41a:	4313      	orreq	r3, r2
 801e41c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801e420:	6863      	ldr	r3, [r4, #4]
 801e422:	f8d8 0000 	ldr.w	r0, [r8]
 801e426:	1c5a      	adds	r2, r3, #1
 801e428:	3302      	adds	r3, #2
 801e42a:	6062      	str	r2, [r4, #4]
 801e42c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801e430:	f000 f9c6 	bl	801e7c0 <__retarget_lock_release_recursive>
 801e434:	2000      	movs	r0, #0
 801e436:	e7c6      	b.n	801e3c6 <__register_exitproc+0x3e>
 801e438:	2400e6d4 	.word	0x2400e6d4
 801e43c:	2400e648 	.word	0x2400e648
 801e440:	08020d30 	.word	0x08020d30
 801e444:	0801d979 	.word	0x0801d979
 801e448:	24000118 	.word	0x24000118

0801e44c <__sflush_r>:
 801e44c:	898a      	ldrh	r2, [r1, #12]
 801e44e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e452:	4605      	mov	r5, r0
 801e454:	0710      	lsls	r0, r2, #28
 801e456:	460c      	mov	r4, r1
 801e458:	d458      	bmi.n	801e50c <__sflush_r+0xc0>
 801e45a:	684b      	ldr	r3, [r1, #4]
 801e45c:	2b00      	cmp	r3, #0
 801e45e:	dc05      	bgt.n	801e46c <__sflush_r+0x20>
 801e460:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e462:	2b00      	cmp	r3, #0
 801e464:	dc02      	bgt.n	801e46c <__sflush_r+0x20>
 801e466:	2000      	movs	r0, #0
 801e468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e46c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e46e:	2e00      	cmp	r6, #0
 801e470:	d0f9      	beq.n	801e466 <__sflush_r+0x1a>
 801e472:	2300      	movs	r3, #0
 801e474:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e478:	682f      	ldr	r7, [r5, #0]
 801e47a:	602b      	str	r3, [r5, #0]
 801e47c:	d032      	beq.n	801e4e4 <__sflush_r+0x98>
 801e47e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e480:	89a3      	ldrh	r3, [r4, #12]
 801e482:	075a      	lsls	r2, r3, #29
 801e484:	d505      	bpl.n	801e492 <__sflush_r+0x46>
 801e486:	6863      	ldr	r3, [r4, #4]
 801e488:	1ac0      	subs	r0, r0, r3
 801e48a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e48c:	b10b      	cbz	r3, 801e492 <__sflush_r+0x46>
 801e48e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e490:	1ac0      	subs	r0, r0, r3
 801e492:	2300      	movs	r3, #0
 801e494:	4602      	mov	r2, r0
 801e496:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e498:	6a21      	ldr	r1, [r4, #32]
 801e49a:	4628      	mov	r0, r5
 801e49c:	47b0      	blx	r6
 801e49e:	1c43      	adds	r3, r0, #1
 801e4a0:	89a3      	ldrh	r3, [r4, #12]
 801e4a2:	d106      	bne.n	801e4b2 <__sflush_r+0x66>
 801e4a4:	6829      	ldr	r1, [r5, #0]
 801e4a6:	291d      	cmp	r1, #29
 801e4a8:	d82c      	bhi.n	801e504 <__sflush_r+0xb8>
 801e4aa:	4a2a      	ldr	r2, [pc, #168]	; (801e554 <__sflush_r+0x108>)
 801e4ac:	40ca      	lsrs	r2, r1
 801e4ae:	07d6      	lsls	r6, r2, #31
 801e4b0:	d528      	bpl.n	801e504 <__sflush_r+0xb8>
 801e4b2:	2200      	movs	r2, #0
 801e4b4:	6062      	str	r2, [r4, #4]
 801e4b6:	04d9      	lsls	r1, r3, #19
 801e4b8:	6922      	ldr	r2, [r4, #16]
 801e4ba:	6022      	str	r2, [r4, #0]
 801e4bc:	d504      	bpl.n	801e4c8 <__sflush_r+0x7c>
 801e4be:	1c42      	adds	r2, r0, #1
 801e4c0:	d101      	bne.n	801e4c6 <__sflush_r+0x7a>
 801e4c2:	682b      	ldr	r3, [r5, #0]
 801e4c4:	b903      	cbnz	r3, 801e4c8 <__sflush_r+0x7c>
 801e4c6:	6560      	str	r0, [r4, #84]	; 0x54
 801e4c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e4ca:	602f      	str	r7, [r5, #0]
 801e4cc:	2900      	cmp	r1, #0
 801e4ce:	d0ca      	beq.n	801e466 <__sflush_r+0x1a>
 801e4d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e4d4:	4299      	cmp	r1, r3
 801e4d6:	d002      	beq.n	801e4de <__sflush_r+0x92>
 801e4d8:	4628      	mov	r0, r5
 801e4da:	f7ff fa73 	bl	801d9c4 <_free_r>
 801e4de:	2000      	movs	r0, #0
 801e4e0:	6360      	str	r0, [r4, #52]	; 0x34
 801e4e2:	e7c1      	b.n	801e468 <__sflush_r+0x1c>
 801e4e4:	6a21      	ldr	r1, [r4, #32]
 801e4e6:	2301      	movs	r3, #1
 801e4e8:	4628      	mov	r0, r5
 801e4ea:	47b0      	blx	r6
 801e4ec:	1c41      	adds	r1, r0, #1
 801e4ee:	d1c7      	bne.n	801e480 <__sflush_r+0x34>
 801e4f0:	682b      	ldr	r3, [r5, #0]
 801e4f2:	2b00      	cmp	r3, #0
 801e4f4:	d0c4      	beq.n	801e480 <__sflush_r+0x34>
 801e4f6:	2b1d      	cmp	r3, #29
 801e4f8:	d001      	beq.n	801e4fe <__sflush_r+0xb2>
 801e4fa:	2b16      	cmp	r3, #22
 801e4fc:	d101      	bne.n	801e502 <__sflush_r+0xb6>
 801e4fe:	602f      	str	r7, [r5, #0]
 801e500:	e7b1      	b.n	801e466 <__sflush_r+0x1a>
 801e502:	89a3      	ldrh	r3, [r4, #12]
 801e504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e508:	81a3      	strh	r3, [r4, #12]
 801e50a:	e7ad      	b.n	801e468 <__sflush_r+0x1c>
 801e50c:	690f      	ldr	r7, [r1, #16]
 801e50e:	2f00      	cmp	r7, #0
 801e510:	d0a9      	beq.n	801e466 <__sflush_r+0x1a>
 801e512:	0793      	lsls	r3, r2, #30
 801e514:	680e      	ldr	r6, [r1, #0]
 801e516:	bf08      	it	eq
 801e518:	694b      	ldreq	r3, [r1, #20]
 801e51a:	600f      	str	r7, [r1, #0]
 801e51c:	bf18      	it	ne
 801e51e:	2300      	movne	r3, #0
 801e520:	eba6 0807 	sub.w	r8, r6, r7
 801e524:	608b      	str	r3, [r1, #8]
 801e526:	f1b8 0f00 	cmp.w	r8, #0
 801e52a:	dd9c      	ble.n	801e466 <__sflush_r+0x1a>
 801e52c:	6a21      	ldr	r1, [r4, #32]
 801e52e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e530:	4643      	mov	r3, r8
 801e532:	463a      	mov	r2, r7
 801e534:	4628      	mov	r0, r5
 801e536:	47b0      	blx	r6
 801e538:	2800      	cmp	r0, #0
 801e53a:	dc06      	bgt.n	801e54a <__sflush_r+0xfe>
 801e53c:	89a3      	ldrh	r3, [r4, #12]
 801e53e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e542:	81a3      	strh	r3, [r4, #12]
 801e544:	f04f 30ff 	mov.w	r0, #4294967295
 801e548:	e78e      	b.n	801e468 <__sflush_r+0x1c>
 801e54a:	4407      	add	r7, r0
 801e54c:	eba8 0800 	sub.w	r8, r8, r0
 801e550:	e7e9      	b.n	801e526 <__sflush_r+0xda>
 801e552:	bf00      	nop
 801e554:	20400001 	.word	0x20400001

0801e558 <_fflush_r>:
 801e558:	b538      	push	{r3, r4, r5, lr}
 801e55a:	690b      	ldr	r3, [r1, #16]
 801e55c:	4605      	mov	r5, r0
 801e55e:	460c      	mov	r4, r1
 801e560:	b913      	cbnz	r3, 801e568 <_fflush_r+0x10>
 801e562:	2500      	movs	r5, #0
 801e564:	4628      	mov	r0, r5
 801e566:	bd38      	pop	{r3, r4, r5, pc}
 801e568:	b118      	cbz	r0, 801e572 <_fflush_r+0x1a>
 801e56a:	6983      	ldr	r3, [r0, #24]
 801e56c:	b90b      	cbnz	r3, 801e572 <_fflush_r+0x1a>
 801e56e:	f000 f887 	bl	801e680 <__sinit>
 801e572:	4b14      	ldr	r3, [pc, #80]	; (801e5c4 <_fflush_r+0x6c>)
 801e574:	429c      	cmp	r4, r3
 801e576:	d11b      	bne.n	801e5b0 <_fflush_r+0x58>
 801e578:	686c      	ldr	r4, [r5, #4]
 801e57a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e57e:	2b00      	cmp	r3, #0
 801e580:	d0ef      	beq.n	801e562 <_fflush_r+0xa>
 801e582:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e584:	07d0      	lsls	r0, r2, #31
 801e586:	d404      	bmi.n	801e592 <_fflush_r+0x3a>
 801e588:	0599      	lsls	r1, r3, #22
 801e58a:	d402      	bmi.n	801e592 <_fflush_r+0x3a>
 801e58c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e58e:	f000 f915 	bl	801e7bc <__retarget_lock_acquire_recursive>
 801e592:	4628      	mov	r0, r5
 801e594:	4621      	mov	r1, r4
 801e596:	f7ff ff59 	bl	801e44c <__sflush_r>
 801e59a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e59c:	07da      	lsls	r2, r3, #31
 801e59e:	4605      	mov	r5, r0
 801e5a0:	d4e0      	bmi.n	801e564 <_fflush_r+0xc>
 801e5a2:	89a3      	ldrh	r3, [r4, #12]
 801e5a4:	059b      	lsls	r3, r3, #22
 801e5a6:	d4dd      	bmi.n	801e564 <_fflush_r+0xc>
 801e5a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e5aa:	f000 f909 	bl	801e7c0 <__retarget_lock_release_recursive>
 801e5ae:	e7d9      	b.n	801e564 <_fflush_r+0xc>
 801e5b0:	4b05      	ldr	r3, [pc, #20]	; (801e5c8 <_fflush_r+0x70>)
 801e5b2:	429c      	cmp	r4, r3
 801e5b4:	d101      	bne.n	801e5ba <_fflush_r+0x62>
 801e5b6:	68ac      	ldr	r4, [r5, #8]
 801e5b8:	e7df      	b.n	801e57a <_fflush_r+0x22>
 801e5ba:	4b04      	ldr	r3, [pc, #16]	; (801e5cc <_fflush_r+0x74>)
 801e5bc:	429c      	cmp	r4, r3
 801e5be:	bf08      	it	eq
 801e5c0:	68ec      	ldreq	r4, [r5, #12]
 801e5c2:	e7da      	b.n	801e57a <_fflush_r+0x22>
 801e5c4:	08020d54 	.word	0x08020d54
 801e5c8:	08020d74 	.word	0x08020d74
 801e5cc:	08020d34 	.word	0x08020d34

0801e5d0 <std>:
 801e5d0:	2300      	movs	r3, #0
 801e5d2:	b510      	push	{r4, lr}
 801e5d4:	4604      	mov	r4, r0
 801e5d6:	e9c0 3300 	strd	r3, r3, [r0]
 801e5da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e5de:	6083      	str	r3, [r0, #8]
 801e5e0:	8181      	strh	r1, [r0, #12]
 801e5e2:	6643      	str	r3, [r0, #100]	; 0x64
 801e5e4:	81c2      	strh	r2, [r0, #14]
 801e5e6:	6183      	str	r3, [r0, #24]
 801e5e8:	4619      	mov	r1, r3
 801e5ea:	2208      	movs	r2, #8
 801e5ec:	305c      	adds	r0, #92	; 0x5c
 801e5ee:	f7ff f9e1 	bl	801d9b4 <memset>
 801e5f2:	4b05      	ldr	r3, [pc, #20]	; (801e608 <std+0x38>)
 801e5f4:	6263      	str	r3, [r4, #36]	; 0x24
 801e5f6:	4b05      	ldr	r3, [pc, #20]	; (801e60c <std+0x3c>)
 801e5f8:	62a3      	str	r3, [r4, #40]	; 0x28
 801e5fa:	4b05      	ldr	r3, [pc, #20]	; (801e610 <std+0x40>)
 801e5fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e5fe:	4b05      	ldr	r3, [pc, #20]	; (801e614 <std+0x44>)
 801e600:	6224      	str	r4, [r4, #32]
 801e602:	6323      	str	r3, [r4, #48]	; 0x30
 801e604:	bd10      	pop	{r4, pc}
 801e606:	bf00      	nop
 801e608:	0801e8a5 	.word	0x0801e8a5
 801e60c:	0801e8c7 	.word	0x0801e8c7
 801e610:	0801e8ff 	.word	0x0801e8ff
 801e614:	0801e923 	.word	0x0801e923

0801e618 <_cleanup_r>:
 801e618:	4901      	ldr	r1, [pc, #4]	; (801e620 <_cleanup_r+0x8>)
 801e61a:	f000 b8af 	b.w	801e77c <_fwalk_reent>
 801e61e:	bf00      	nop
 801e620:	0801e559 	.word	0x0801e559

0801e624 <__sfmoreglue>:
 801e624:	b570      	push	{r4, r5, r6, lr}
 801e626:	2268      	movs	r2, #104	; 0x68
 801e628:	1e4d      	subs	r5, r1, #1
 801e62a:	4355      	muls	r5, r2
 801e62c:	460e      	mov	r6, r1
 801e62e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e632:	f7ff fa33 	bl	801da9c <_malloc_r>
 801e636:	4604      	mov	r4, r0
 801e638:	b140      	cbz	r0, 801e64c <__sfmoreglue+0x28>
 801e63a:	2100      	movs	r1, #0
 801e63c:	e9c0 1600 	strd	r1, r6, [r0]
 801e640:	300c      	adds	r0, #12
 801e642:	60a0      	str	r0, [r4, #8]
 801e644:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e648:	f7ff f9b4 	bl	801d9b4 <memset>
 801e64c:	4620      	mov	r0, r4
 801e64e:	bd70      	pop	{r4, r5, r6, pc}

0801e650 <__sfp_lock_acquire>:
 801e650:	4801      	ldr	r0, [pc, #4]	; (801e658 <__sfp_lock_acquire+0x8>)
 801e652:	f000 b8b3 	b.w	801e7bc <__retarget_lock_acquire_recursive>
 801e656:	bf00      	nop
 801e658:	2400e6da 	.word	0x2400e6da

0801e65c <__sfp_lock_release>:
 801e65c:	4801      	ldr	r0, [pc, #4]	; (801e664 <__sfp_lock_release+0x8>)
 801e65e:	f000 b8af 	b.w	801e7c0 <__retarget_lock_release_recursive>
 801e662:	bf00      	nop
 801e664:	2400e6da 	.word	0x2400e6da

0801e668 <__sinit_lock_acquire>:
 801e668:	4801      	ldr	r0, [pc, #4]	; (801e670 <__sinit_lock_acquire+0x8>)
 801e66a:	f000 b8a7 	b.w	801e7bc <__retarget_lock_acquire_recursive>
 801e66e:	bf00      	nop
 801e670:	2400e6db 	.word	0x2400e6db

0801e674 <__sinit_lock_release>:
 801e674:	4801      	ldr	r0, [pc, #4]	; (801e67c <__sinit_lock_release+0x8>)
 801e676:	f000 b8a3 	b.w	801e7c0 <__retarget_lock_release_recursive>
 801e67a:	bf00      	nop
 801e67c:	2400e6db 	.word	0x2400e6db

0801e680 <__sinit>:
 801e680:	b510      	push	{r4, lr}
 801e682:	4604      	mov	r4, r0
 801e684:	f7ff fff0 	bl	801e668 <__sinit_lock_acquire>
 801e688:	69a3      	ldr	r3, [r4, #24]
 801e68a:	b11b      	cbz	r3, 801e694 <__sinit+0x14>
 801e68c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e690:	f7ff bff0 	b.w	801e674 <__sinit_lock_release>
 801e694:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e698:	6523      	str	r3, [r4, #80]	; 0x50
 801e69a:	4b13      	ldr	r3, [pc, #76]	; (801e6e8 <__sinit+0x68>)
 801e69c:	4a13      	ldr	r2, [pc, #76]	; (801e6ec <__sinit+0x6c>)
 801e69e:	681b      	ldr	r3, [r3, #0]
 801e6a0:	62a2      	str	r2, [r4, #40]	; 0x28
 801e6a2:	42a3      	cmp	r3, r4
 801e6a4:	bf04      	itt	eq
 801e6a6:	2301      	moveq	r3, #1
 801e6a8:	61a3      	streq	r3, [r4, #24]
 801e6aa:	4620      	mov	r0, r4
 801e6ac:	f000 f820 	bl	801e6f0 <__sfp>
 801e6b0:	6060      	str	r0, [r4, #4]
 801e6b2:	4620      	mov	r0, r4
 801e6b4:	f000 f81c 	bl	801e6f0 <__sfp>
 801e6b8:	60a0      	str	r0, [r4, #8]
 801e6ba:	4620      	mov	r0, r4
 801e6bc:	f000 f818 	bl	801e6f0 <__sfp>
 801e6c0:	2200      	movs	r2, #0
 801e6c2:	60e0      	str	r0, [r4, #12]
 801e6c4:	2104      	movs	r1, #4
 801e6c6:	6860      	ldr	r0, [r4, #4]
 801e6c8:	f7ff ff82 	bl	801e5d0 <std>
 801e6cc:	68a0      	ldr	r0, [r4, #8]
 801e6ce:	2201      	movs	r2, #1
 801e6d0:	2109      	movs	r1, #9
 801e6d2:	f7ff ff7d 	bl	801e5d0 <std>
 801e6d6:	68e0      	ldr	r0, [r4, #12]
 801e6d8:	2202      	movs	r2, #2
 801e6da:	2112      	movs	r1, #18
 801e6dc:	f7ff ff78 	bl	801e5d0 <std>
 801e6e0:	2301      	movs	r3, #1
 801e6e2:	61a3      	str	r3, [r4, #24]
 801e6e4:	e7d2      	b.n	801e68c <__sinit+0xc>
 801e6e6:	bf00      	nop
 801e6e8:	08020cf8 	.word	0x08020cf8
 801e6ec:	0801e619 	.word	0x0801e619

0801e6f0 <__sfp>:
 801e6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e6f2:	4607      	mov	r7, r0
 801e6f4:	f7ff ffac 	bl	801e650 <__sfp_lock_acquire>
 801e6f8:	4b1e      	ldr	r3, [pc, #120]	; (801e774 <__sfp+0x84>)
 801e6fa:	681e      	ldr	r6, [r3, #0]
 801e6fc:	69b3      	ldr	r3, [r6, #24]
 801e6fe:	b913      	cbnz	r3, 801e706 <__sfp+0x16>
 801e700:	4630      	mov	r0, r6
 801e702:	f7ff ffbd 	bl	801e680 <__sinit>
 801e706:	3648      	adds	r6, #72	; 0x48
 801e708:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e70c:	3b01      	subs	r3, #1
 801e70e:	d503      	bpl.n	801e718 <__sfp+0x28>
 801e710:	6833      	ldr	r3, [r6, #0]
 801e712:	b30b      	cbz	r3, 801e758 <__sfp+0x68>
 801e714:	6836      	ldr	r6, [r6, #0]
 801e716:	e7f7      	b.n	801e708 <__sfp+0x18>
 801e718:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e71c:	b9d5      	cbnz	r5, 801e754 <__sfp+0x64>
 801e71e:	4b16      	ldr	r3, [pc, #88]	; (801e778 <__sfp+0x88>)
 801e720:	60e3      	str	r3, [r4, #12]
 801e722:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e726:	6665      	str	r5, [r4, #100]	; 0x64
 801e728:	f000 f847 	bl	801e7ba <__retarget_lock_init_recursive>
 801e72c:	f7ff ff96 	bl	801e65c <__sfp_lock_release>
 801e730:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801e734:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801e738:	6025      	str	r5, [r4, #0]
 801e73a:	61a5      	str	r5, [r4, #24]
 801e73c:	2208      	movs	r2, #8
 801e73e:	4629      	mov	r1, r5
 801e740:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e744:	f7ff f936 	bl	801d9b4 <memset>
 801e748:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e74c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e750:	4620      	mov	r0, r4
 801e752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e754:	3468      	adds	r4, #104	; 0x68
 801e756:	e7d9      	b.n	801e70c <__sfp+0x1c>
 801e758:	2104      	movs	r1, #4
 801e75a:	4638      	mov	r0, r7
 801e75c:	f7ff ff62 	bl	801e624 <__sfmoreglue>
 801e760:	4604      	mov	r4, r0
 801e762:	6030      	str	r0, [r6, #0]
 801e764:	2800      	cmp	r0, #0
 801e766:	d1d5      	bne.n	801e714 <__sfp+0x24>
 801e768:	f7ff ff78 	bl	801e65c <__sfp_lock_release>
 801e76c:	230c      	movs	r3, #12
 801e76e:	603b      	str	r3, [r7, #0]
 801e770:	e7ee      	b.n	801e750 <__sfp+0x60>
 801e772:	bf00      	nop
 801e774:	08020cf8 	.word	0x08020cf8
 801e778:	ffff0001 	.word	0xffff0001

0801e77c <_fwalk_reent>:
 801e77c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e780:	4606      	mov	r6, r0
 801e782:	4688      	mov	r8, r1
 801e784:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e788:	2700      	movs	r7, #0
 801e78a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e78e:	f1b9 0901 	subs.w	r9, r9, #1
 801e792:	d505      	bpl.n	801e7a0 <_fwalk_reent+0x24>
 801e794:	6824      	ldr	r4, [r4, #0]
 801e796:	2c00      	cmp	r4, #0
 801e798:	d1f7      	bne.n	801e78a <_fwalk_reent+0xe>
 801e79a:	4638      	mov	r0, r7
 801e79c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e7a0:	89ab      	ldrh	r3, [r5, #12]
 801e7a2:	2b01      	cmp	r3, #1
 801e7a4:	d907      	bls.n	801e7b6 <_fwalk_reent+0x3a>
 801e7a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e7aa:	3301      	adds	r3, #1
 801e7ac:	d003      	beq.n	801e7b6 <_fwalk_reent+0x3a>
 801e7ae:	4629      	mov	r1, r5
 801e7b0:	4630      	mov	r0, r6
 801e7b2:	47c0      	blx	r8
 801e7b4:	4307      	orrs	r7, r0
 801e7b6:	3568      	adds	r5, #104	; 0x68
 801e7b8:	e7e9      	b.n	801e78e <_fwalk_reent+0x12>

0801e7ba <__retarget_lock_init_recursive>:
 801e7ba:	4770      	bx	lr

0801e7bc <__retarget_lock_acquire_recursive>:
 801e7bc:	4770      	bx	lr

0801e7be <__retarget_lock_release>:
 801e7be:	4770      	bx	lr

0801e7c0 <__retarget_lock_release_recursive>:
 801e7c0:	4770      	bx	lr

0801e7c2 <__swhatbuf_r>:
 801e7c2:	b570      	push	{r4, r5, r6, lr}
 801e7c4:	460e      	mov	r6, r1
 801e7c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e7ca:	2900      	cmp	r1, #0
 801e7cc:	b096      	sub	sp, #88	; 0x58
 801e7ce:	4614      	mov	r4, r2
 801e7d0:	461d      	mov	r5, r3
 801e7d2:	da08      	bge.n	801e7e6 <__swhatbuf_r+0x24>
 801e7d4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801e7d8:	2200      	movs	r2, #0
 801e7da:	602a      	str	r2, [r5, #0]
 801e7dc:	061a      	lsls	r2, r3, #24
 801e7de:	d410      	bmi.n	801e802 <__swhatbuf_r+0x40>
 801e7e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e7e4:	e00e      	b.n	801e804 <__swhatbuf_r+0x42>
 801e7e6:	466a      	mov	r2, sp
 801e7e8:	f000 f8c2 	bl	801e970 <_fstat_r>
 801e7ec:	2800      	cmp	r0, #0
 801e7ee:	dbf1      	blt.n	801e7d4 <__swhatbuf_r+0x12>
 801e7f0:	9a01      	ldr	r2, [sp, #4]
 801e7f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e7f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e7fa:	425a      	negs	r2, r3
 801e7fc:	415a      	adcs	r2, r3
 801e7fe:	602a      	str	r2, [r5, #0]
 801e800:	e7ee      	b.n	801e7e0 <__swhatbuf_r+0x1e>
 801e802:	2340      	movs	r3, #64	; 0x40
 801e804:	2000      	movs	r0, #0
 801e806:	6023      	str	r3, [r4, #0]
 801e808:	b016      	add	sp, #88	; 0x58
 801e80a:	bd70      	pop	{r4, r5, r6, pc}

0801e80c <__smakebuf_r>:
 801e80c:	898b      	ldrh	r3, [r1, #12]
 801e80e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e810:	079d      	lsls	r5, r3, #30
 801e812:	4606      	mov	r6, r0
 801e814:	460c      	mov	r4, r1
 801e816:	d507      	bpl.n	801e828 <__smakebuf_r+0x1c>
 801e818:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e81c:	6023      	str	r3, [r4, #0]
 801e81e:	6123      	str	r3, [r4, #16]
 801e820:	2301      	movs	r3, #1
 801e822:	6163      	str	r3, [r4, #20]
 801e824:	b002      	add	sp, #8
 801e826:	bd70      	pop	{r4, r5, r6, pc}
 801e828:	ab01      	add	r3, sp, #4
 801e82a:	466a      	mov	r2, sp
 801e82c:	f7ff ffc9 	bl	801e7c2 <__swhatbuf_r>
 801e830:	9900      	ldr	r1, [sp, #0]
 801e832:	4605      	mov	r5, r0
 801e834:	4630      	mov	r0, r6
 801e836:	f7ff f931 	bl	801da9c <_malloc_r>
 801e83a:	b948      	cbnz	r0, 801e850 <__smakebuf_r+0x44>
 801e83c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e840:	059a      	lsls	r2, r3, #22
 801e842:	d4ef      	bmi.n	801e824 <__smakebuf_r+0x18>
 801e844:	f023 0303 	bic.w	r3, r3, #3
 801e848:	f043 0302 	orr.w	r3, r3, #2
 801e84c:	81a3      	strh	r3, [r4, #12]
 801e84e:	e7e3      	b.n	801e818 <__smakebuf_r+0xc>
 801e850:	4b0d      	ldr	r3, [pc, #52]	; (801e888 <__smakebuf_r+0x7c>)
 801e852:	62b3      	str	r3, [r6, #40]	; 0x28
 801e854:	89a3      	ldrh	r3, [r4, #12]
 801e856:	6020      	str	r0, [r4, #0]
 801e858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e85c:	81a3      	strh	r3, [r4, #12]
 801e85e:	9b00      	ldr	r3, [sp, #0]
 801e860:	6163      	str	r3, [r4, #20]
 801e862:	9b01      	ldr	r3, [sp, #4]
 801e864:	6120      	str	r0, [r4, #16]
 801e866:	b15b      	cbz	r3, 801e880 <__smakebuf_r+0x74>
 801e868:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e86c:	4630      	mov	r0, r6
 801e86e:	f000 f891 	bl	801e994 <_isatty_r>
 801e872:	b128      	cbz	r0, 801e880 <__smakebuf_r+0x74>
 801e874:	89a3      	ldrh	r3, [r4, #12]
 801e876:	f023 0303 	bic.w	r3, r3, #3
 801e87a:	f043 0301 	orr.w	r3, r3, #1
 801e87e:	81a3      	strh	r3, [r4, #12]
 801e880:	89a0      	ldrh	r0, [r4, #12]
 801e882:	4305      	orrs	r5, r0
 801e884:	81a5      	strh	r5, [r4, #12]
 801e886:	e7cd      	b.n	801e824 <__smakebuf_r+0x18>
 801e888:	0801e619 	.word	0x0801e619

0801e88c <__malloc_lock>:
 801e88c:	4801      	ldr	r0, [pc, #4]	; (801e894 <__malloc_lock+0x8>)
 801e88e:	f7ff bf95 	b.w	801e7bc <__retarget_lock_acquire_recursive>
 801e892:	bf00      	nop
 801e894:	2400e6d9 	.word	0x2400e6d9

0801e898 <__malloc_unlock>:
 801e898:	4801      	ldr	r0, [pc, #4]	; (801e8a0 <__malloc_unlock+0x8>)
 801e89a:	f7ff bf91 	b.w	801e7c0 <__retarget_lock_release_recursive>
 801e89e:	bf00      	nop
 801e8a0:	2400e6d9 	.word	0x2400e6d9

0801e8a4 <__sread>:
 801e8a4:	b510      	push	{r4, lr}
 801e8a6:	460c      	mov	r4, r1
 801e8a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e8ac:	f000 f894 	bl	801e9d8 <_read_r>
 801e8b0:	2800      	cmp	r0, #0
 801e8b2:	bfab      	itete	ge
 801e8b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e8b6:	89a3      	ldrhlt	r3, [r4, #12]
 801e8b8:	181b      	addge	r3, r3, r0
 801e8ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e8be:	bfac      	ite	ge
 801e8c0:	6563      	strge	r3, [r4, #84]	; 0x54
 801e8c2:	81a3      	strhlt	r3, [r4, #12]
 801e8c4:	bd10      	pop	{r4, pc}

0801e8c6 <__swrite>:
 801e8c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e8ca:	461f      	mov	r7, r3
 801e8cc:	898b      	ldrh	r3, [r1, #12]
 801e8ce:	05db      	lsls	r3, r3, #23
 801e8d0:	4605      	mov	r5, r0
 801e8d2:	460c      	mov	r4, r1
 801e8d4:	4616      	mov	r6, r2
 801e8d6:	d505      	bpl.n	801e8e4 <__swrite+0x1e>
 801e8d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e8dc:	2302      	movs	r3, #2
 801e8de:	2200      	movs	r2, #0
 801e8e0:	f000 f868 	bl	801e9b4 <_lseek_r>
 801e8e4:	89a3      	ldrh	r3, [r4, #12]
 801e8e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e8ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e8ee:	81a3      	strh	r3, [r4, #12]
 801e8f0:	4632      	mov	r2, r6
 801e8f2:	463b      	mov	r3, r7
 801e8f4:	4628      	mov	r0, r5
 801e8f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e8fa:	f000 b817 	b.w	801e92c <_write_r>

0801e8fe <__sseek>:
 801e8fe:	b510      	push	{r4, lr}
 801e900:	460c      	mov	r4, r1
 801e902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e906:	f000 f855 	bl	801e9b4 <_lseek_r>
 801e90a:	1c43      	adds	r3, r0, #1
 801e90c:	89a3      	ldrh	r3, [r4, #12]
 801e90e:	bf15      	itete	ne
 801e910:	6560      	strne	r0, [r4, #84]	; 0x54
 801e912:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e916:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e91a:	81a3      	strheq	r3, [r4, #12]
 801e91c:	bf18      	it	ne
 801e91e:	81a3      	strhne	r3, [r4, #12]
 801e920:	bd10      	pop	{r4, pc}

0801e922 <__sclose>:
 801e922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e926:	f000 b813 	b.w	801e950 <_close_r>
	...

0801e92c <_write_r>:
 801e92c:	b538      	push	{r3, r4, r5, lr}
 801e92e:	4d07      	ldr	r5, [pc, #28]	; (801e94c <_write_r+0x20>)
 801e930:	4604      	mov	r4, r0
 801e932:	4608      	mov	r0, r1
 801e934:	4611      	mov	r1, r2
 801e936:	2200      	movs	r2, #0
 801e938:	602a      	str	r2, [r5, #0]
 801e93a:	461a      	mov	r2, r3
 801e93c:	f7e2 fc24 	bl	8001188 <_write>
 801e940:	1c43      	adds	r3, r0, #1
 801e942:	d102      	bne.n	801e94a <_write_r+0x1e>
 801e944:	682b      	ldr	r3, [r5, #0]
 801e946:	b103      	cbz	r3, 801e94a <_write_r+0x1e>
 801e948:	6023      	str	r3, [r4, #0]
 801e94a:	bd38      	pop	{r3, r4, r5, pc}
 801e94c:	2400e6dc 	.word	0x2400e6dc

0801e950 <_close_r>:
 801e950:	b538      	push	{r3, r4, r5, lr}
 801e952:	4d06      	ldr	r5, [pc, #24]	; (801e96c <_close_r+0x1c>)
 801e954:	2300      	movs	r3, #0
 801e956:	4604      	mov	r4, r0
 801e958:	4608      	mov	r0, r1
 801e95a:	602b      	str	r3, [r5, #0]
 801e95c:	f7e2 fc22 	bl	80011a4 <_close>
 801e960:	1c43      	adds	r3, r0, #1
 801e962:	d102      	bne.n	801e96a <_close_r+0x1a>
 801e964:	682b      	ldr	r3, [r5, #0]
 801e966:	b103      	cbz	r3, 801e96a <_close_r+0x1a>
 801e968:	6023      	str	r3, [r4, #0]
 801e96a:	bd38      	pop	{r3, r4, r5, pc}
 801e96c:	2400e6dc 	.word	0x2400e6dc

0801e970 <_fstat_r>:
 801e970:	b538      	push	{r3, r4, r5, lr}
 801e972:	4d07      	ldr	r5, [pc, #28]	; (801e990 <_fstat_r+0x20>)
 801e974:	2300      	movs	r3, #0
 801e976:	4604      	mov	r4, r0
 801e978:	4608      	mov	r0, r1
 801e97a:	4611      	mov	r1, r2
 801e97c:	602b      	str	r3, [r5, #0]
 801e97e:	f7e2 fc14 	bl	80011aa <_fstat>
 801e982:	1c43      	adds	r3, r0, #1
 801e984:	d102      	bne.n	801e98c <_fstat_r+0x1c>
 801e986:	682b      	ldr	r3, [r5, #0]
 801e988:	b103      	cbz	r3, 801e98c <_fstat_r+0x1c>
 801e98a:	6023      	str	r3, [r4, #0]
 801e98c:	bd38      	pop	{r3, r4, r5, pc}
 801e98e:	bf00      	nop
 801e990:	2400e6dc 	.word	0x2400e6dc

0801e994 <_isatty_r>:
 801e994:	b538      	push	{r3, r4, r5, lr}
 801e996:	4d06      	ldr	r5, [pc, #24]	; (801e9b0 <_isatty_r+0x1c>)
 801e998:	2300      	movs	r3, #0
 801e99a:	4604      	mov	r4, r0
 801e99c:	4608      	mov	r0, r1
 801e99e:	602b      	str	r3, [r5, #0]
 801e9a0:	f7e2 fc08 	bl	80011b4 <_isatty>
 801e9a4:	1c43      	adds	r3, r0, #1
 801e9a6:	d102      	bne.n	801e9ae <_isatty_r+0x1a>
 801e9a8:	682b      	ldr	r3, [r5, #0]
 801e9aa:	b103      	cbz	r3, 801e9ae <_isatty_r+0x1a>
 801e9ac:	6023      	str	r3, [r4, #0]
 801e9ae:	bd38      	pop	{r3, r4, r5, pc}
 801e9b0:	2400e6dc 	.word	0x2400e6dc

0801e9b4 <_lseek_r>:
 801e9b4:	b538      	push	{r3, r4, r5, lr}
 801e9b6:	4d07      	ldr	r5, [pc, #28]	; (801e9d4 <_lseek_r+0x20>)
 801e9b8:	4604      	mov	r4, r0
 801e9ba:	4608      	mov	r0, r1
 801e9bc:	4611      	mov	r1, r2
 801e9be:	2200      	movs	r2, #0
 801e9c0:	602a      	str	r2, [r5, #0]
 801e9c2:	461a      	mov	r2, r3
 801e9c4:	f7e2 fbf8 	bl	80011b8 <_lseek>
 801e9c8:	1c43      	adds	r3, r0, #1
 801e9ca:	d102      	bne.n	801e9d2 <_lseek_r+0x1e>
 801e9cc:	682b      	ldr	r3, [r5, #0]
 801e9ce:	b103      	cbz	r3, 801e9d2 <_lseek_r+0x1e>
 801e9d0:	6023      	str	r3, [r4, #0]
 801e9d2:	bd38      	pop	{r3, r4, r5, pc}
 801e9d4:	2400e6dc 	.word	0x2400e6dc

0801e9d8 <_read_r>:
 801e9d8:	b538      	push	{r3, r4, r5, lr}
 801e9da:	4d07      	ldr	r5, [pc, #28]	; (801e9f8 <_read_r+0x20>)
 801e9dc:	4604      	mov	r4, r0
 801e9de:	4608      	mov	r0, r1
 801e9e0:	4611      	mov	r1, r2
 801e9e2:	2200      	movs	r2, #0
 801e9e4:	602a      	str	r2, [r5, #0]
 801e9e6:	461a      	mov	r2, r3
 801e9e8:	f7e2 fbc0 	bl	800116c <_read>
 801e9ec:	1c43      	adds	r3, r0, #1
 801e9ee:	d102      	bne.n	801e9f6 <_read_r+0x1e>
 801e9f0:	682b      	ldr	r3, [r5, #0]
 801e9f2:	b103      	cbz	r3, 801e9f6 <_read_r+0x1e>
 801e9f4:	6023      	str	r3, [r4, #0]
 801e9f6:	bd38      	pop	{r3, r4, r5, pc}
 801e9f8:	2400e6dc 	.word	0x2400e6dc

0801e9fc <_init>:
 801e9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e9fe:	bf00      	nop
 801ea00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ea02:	bc08      	pop	{r3}
 801ea04:	469e      	mov	lr, r3
 801ea06:	4770      	bx	lr

0801ea08 <_fini>:
 801ea08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ea0a:	bf00      	nop
 801ea0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ea0e:	bc08      	pop	{r3}
 801ea10:	469e      	mov	lr, r3
 801ea12:	4770      	bx	lr
