
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023df4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024c4  08024098  08024098  00034098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00000944  0802655c  0802655c  0003655c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000068  08026ea0  08026ea0  00036ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00177000  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 0000011c  90177000  90177000  001c7000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  08026f08  08026f08  001c711c  2**0
                  CONTENTS
  8 .ARM          00000000  08026f08  08026f08  001c711c  2**0
                  CONTENTS
  9 .preinit_array 00000000  08026f08  08026f08  001c711c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000018  08026f08  08026f08  00036f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  08026f20  08026f20  00036f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000011c  24000000  08026f28  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          0000ec40  2400011c  08027044  0004011c  2**2
                  ALLOC
 14 ._user_heap_stack 00002004  2400ed5c  08027044  0004ed5c  2**0
                  ALLOC
 15 .ARM.attributes 0000002e  00000000  00000000  001c711c  2**0
                  CONTENTS, READONLY
 16 .debug_info   0010a95a  00000000  00000000  001c714a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0001728e  00000000  00000000  002d1aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003910  00000000  00000000  002e8d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 0000c388  00000000  00000000  002ec648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000512b2  00000000  00000000  002f89d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00067128  00000000  00000000  00349c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001de03d  00000000  00000000  003b0daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000cf  00000000  00000000  0058ede7  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000a7b0  00000000  00000000  0058eeb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loc    00048c2f  00000000  00000000  00599668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400011c 	.word	0x2400011c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802407c 	.word	0x0802407c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000120 	.word	0x24000120
 80002dc:	0802407c 	.word	0x0802407c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	; 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80006f8:	4901      	ldr	r1, [pc, #4]	; (8000700 <vApplicationIdleHook+0x8>)
 80006fa:	2000      	movs	r0, #0
 80006fc:	f010 b81c 	b.w	8010738 <vTaskSetApplicationTaskTag>
 8000700:	08001e29 	.word	0x08001e29

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000708:	224c      	movs	r2, #76	; 0x4c
 800070a:	2100      	movs	r1, #0
 800070c:	a809      	add	r0, sp, #36	; 0x24
 800070e:	f022 fc53 	bl	8022fb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000712:	2220      	movs	r2, #32
 8000714:	2100      	movs	r1, #0
 8000716:	a801      	add	r0, sp, #4
 8000718:	f022 fc4e 	bl	8022fb8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800071c:	2004      	movs	r0, #4
 800071e:	f00c fa5f 	bl	800cbe0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000722:	2300      	movs	r3, #0
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <SystemClock_Config+0xcc>)
 8000728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800072a:	f022 0201 	bic.w	r2, r2, #1
 800072e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	4b26      	ldr	r3, [pc, #152]	; (80007d4 <SystemClock_Config+0xd0>)
 800073a:	699a      	ldr	r2, [r3, #24]
 800073c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000740:	619a      	str	r2, [r3, #24]
 8000742:	699a      	ldr	r2, [r3, #24]
 8000744:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8000748:	9200      	str	r2, [sp, #0]
 800074a:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800074c:	699a      	ldr	r2, [r3, #24]
 800074e:	0491      	lsls	r1, r2, #18
 8000750:	d5fc      	bpl.n	800074c <SystemClock_Config+0x48>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000752:	4a21      	ldr	r2, [pc, #132]	; (80007d8 <SystemClock_Config+0xd4>)

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000754:	2703      	movs	r7, #3
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000756:	2540      	movs	r5, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000758:	2402      	movs	r4, #2
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800075a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 160;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800075c:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075e:	a809      	add	r0, sp, #36	; 0x24
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000760:	f023 0303 	bic.w	r3, r3, #3
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800076a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLN = 160;
 800076e:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000770:	9418      	str	r4, [sp, #96]	; 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000772:	e9cd 7309 	strd	r7, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000776:	2301      	movs	r3, #1
 8000778:	e9cd 350c 	strd	r3, r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 160;
 800077c:	23a0      	movs	r3, #160	; 0xa0
 800077e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000782:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000784:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000788:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800078c:	e9cd 6319 	strd	r6, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000790:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000792:	f00c fd13 	bl	800d1bc <HAL_RCC_OscConfig>
 8000796:	b108      	cbz	r0, 800079c <SystemClock_Config+0x98>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000798:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800079a:	e7fe      	b.n	800079a <SystemClock_Config+0x96>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079c:	233f      	movs	r3, #63	; 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800079e:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a0:	e9cd 3701 	strd	r3, r7, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007a8:	e9cd 0603 	strd	r0, r6, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ac:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007ae:	e9cd 5505 	strd	r5, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007b2:	e9cd 3507 	strd	r3, r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007b6:	f00d f8a3 	bl	800d900 <HAL_RCC_ClockConfig>
 80007ba:	4601      	mov	r1, r0
 80007bc:	b108      	cbz	r0, 80007c2 <SystemClock_Config+0xbe>
 80007be:	b672      	cpsid	i
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <SystemClock_Config+0xbc>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80007c2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007c6:	f00c ffad 	bl	800d724 <HAL_RCC_MCOConfig>
}
 80007ca:	b01d      	add	sp, #116	; 0x74
 80007cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ce:	bf00      	nop
 80007d0:	58000400 	.word	0x58000400
 80007d4:	58024800 	.word	0x58024800
 80007d8:	58024400 	.word	0x58024400

080007dc <main>:
{
 80007dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007e0:	b0ba      	sub	sp, #232	; 0xe8
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007e2:	2210      	movs	r2, #16
 80007e4:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007e6:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007e8:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80007ea:	2504      	movs	r5, #4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007ec:	f022 fbe4 	bl	8022fb8 <memset>
  HAL_MPU_Disable();
 80007f0:	f00a fc92 	bl	800b118 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80007f4:	f04f 4110 	mov.w	r1, #2415919104	; 0x90000000
 80007f8:	4bb7      	ldr	r3, [pc, #732]	; (8000ad8 <main+0x2fc>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007fa:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007fc:	f8ad 40b4 	strh.w	r4, [sp, #180]	; 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000800:	9430      	str	r4, [sp, #192]	; 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000802:	e9cd 132e 	strd	r1, r3, [sp, #184]	; 0xb8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000806:	f00a fca5 	bl	800b154 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 800080a:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800080c:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800080e:	f88d 40b5 	strb.w	r4, [sp, #181]	; 0xb5
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000812:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000816:	f00a fc9d 	bl	800b154 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800081a:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800081c:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800081e:	f88d 40c2 	strb.w	r4, [sp, #194]	; 0xc2
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000822:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000826:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800082a:	932e      	str	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 800082c:	2318      	movs	r3, #24
 800082e:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000832:	f00a fc8f 	bl	800b154 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000836:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000838:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 800083a:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
  MPU_InitStruct.BaseAddress = 0x24000000;
 800083e:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000842:	932e      	str	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000844:	2312      	movs	r3, #18
 8000846:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800084a:	2300      	movs	r3, #0
 800084c:	f88d 30c0 	strb.w	r3, [sp, #192]	; 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000850:	f00a fc80 	bl	800b154 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000854:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000858:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 800085a:	f88d 50b5 	strb.w	r5, [sp, #181]	; 0xb5
  MPU_InitStruct.BaseAddress = 0x10000000;
 800085e:	932e      	str	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000860:	2311      	movs	r3, #17
 8000862:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000866:	f00a fc75 	bl	800b154 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 800086a:	2305      	movs	r3, #5
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800086c:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800086e:	f88d 40c0 	strb.w	r4, [sp, #192]	; 0xc0
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000872:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
  MPU_InitStruct.BaseAddress = 0x10040000;
 8000876:	4b99      	ldr	r3, [pc, #612]	; (8000adc <main+0x300>)
 8000878:	932e      	str	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 800087a:	230e      	movs	r3, #14
 800087c:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000880:	f00a fc68 	bl	800b154 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000884:	4628      	mov	r0, r5
 8000886:	f00a fc55 	bl	800b134 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800088a:	4b95      	ldr	r3, [pc, #596]	; (8000ae0 <main+0x304>)
 800088c:	695a      	ldr	r2, [r3, #20]
 800088e:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 8000892:	d111      	bne.n	80008b8 <main+0xdc>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000894:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000898:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800089c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80008a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008a4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008a8:	695a      	ldr	r2, [r3, #20]
 80008aa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80008ae:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008b4:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008b8:	4a89      	ldr	r2, [pc, #548]	; (8000ae0 <main+0x304>)
 80008ba:	6953      	ldr	r3, [r2, #20]
 80008bc:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80008c0:	d123      	bne.n	800090a <main+0x12e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80008c2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008c6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008ca:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ce:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008d2:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008d6:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80008da:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008dc:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008e0:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008e2:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008e6:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008e8:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 80008ec:	d2f9      	bcs.n	80008e2 <main+0x106>
    } while(sets-- != 0U);
 80008ee:	3b20      	subs	r3, #32
 80008f0:	f113 0f20 	cmn.w	r3, #32
 80008f4:	d1f2      	bne.n	80008dc <main+0x100>
 80008f6:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008fa:	6953      	ldr	r3, [r2, #20]
 80008fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000900:	6153      	str	r3, [r2, #20]
 8000902:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000906:	f3bf 8f6f 	isb	sy
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800090a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800090e:	4d75      	ldr	r5, [pc, #468]	; (8000ae4 <main+0x308>)
 8000910:	682c      	ldr	r4, [r5, #0]
 8000912:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
 8000916:	f000 82b0 	beq.w	8000e7a <main+0x69e>
 800091a:	3b01      	subs	r3, #1
 800091c:	d1f8      	bne.n	8000910 <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 800091e:	b672      	cpsid	i
  while (1)
 8000920:	e7fe      	b.n	8000920 <main+0x144>
 8000922:	b672      	cpsid	i
 8000924:	e7fe      	b.n	8000924 <main+0x148>
  BSP_SDRAM_DeInit(0);
 8000926:	f00a f887 	bl	800aa38 <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 800092a:	4640      	mov	r0, r8
 800092c:	f00a f8d2 	bl	800aad4 <BSP_SDRAM_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	b108      	cbz	r0, 8000938 <main+0x15c>
 8000934:	b672      	cpsid	i
  while (1)
 8000936:	e7fe      	b.n	8000936 <main+0x15a>
  hqspi.Instance = QUADSPI;
 8000938:	486b      	ldr	r0, [pc, #428]	; (8000ae8 <main+0x30c>)
 800093a:	4a6c      	ldr	r2, [pc, #432]	; (8000aec <main+0x310>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800093c:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 800093e:	6205      	str	r5, [r0, #32]
  hqspi.Init.ClockPrescaler = 3;
 8000940:	e9c0 2700 	strd	r2, r7, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000944:	e9c0 4302 	strd	r4, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000948:	e9c0 4304 	strd	r4, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800094c:	f00c fa5c 	bl	800ce08 <HAL_QSPI_Init>
 8000950:	b108      	cbz	r0, 8000956 <main+0x17a>
 8000952:	b672      	cpsid	i
  while (1)
 8000954:	e7fe      	b.n	8000954 <main+0x178>
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000956:	a92d      	add	r1, sp, #180	; 0xb4
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000958:	f88d 70b4 	strb.w	r7, [sp, #180]	; 0xb4
  init.TransferRate= MT25TL01G_DTR_TRANSFER ;
 800095c:	f88d 40b5 	strb.w	r4, [sp, #181]	; 0xb5
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8000960:	f88d 50b6 	strb.w	r5, [sp, #182]	; 0xb6
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000964:	f009 feae 	bl	800a6c4 <BSP_QSPI_Init>
 8000968:	b108      	cbz	r0, 800096e <main+0x192>
 800096a:	b672      	cpsid	i
  while (1)
 800096c:	e7fe      	b.n	800096c <main+0x190>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 800096e:	f009 fe55 	bl	800a61c <BSP_QSPI_EnableMemoryMappedMode>
 8000972:	4603      	mov	r3, r0
 8000974:	b108      	cbz	r0, 800097a <main+0x19e>
 8000976:	b672      	cpsid	i
  while (1)
 8000978:	e7fe      	b.n	8000978 <main+0x19c>
  hdma2d.Instance = DMA2D;
 800097a:	485d      	ldr	r0, [pc, #372]	; (8000af0 <main+0x314>)
  hdma2d.Init.Mode = DMA2D_R2M;
 800097c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000980:	f8df e178 	ldr.w	lr, [pc, #376]	; 8000afc <main+0x320>
  hdma2d.Init.OutputOffset = 0;
 8000984:	e9c0 4302 	strd	r4, r3, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000988:	e9c0 e200 	strd	lr, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800098c:	f00a fc6e 	bl	800b26c <HAL_DMA2D_Init>
 8000990:	4605      	mov	r5, r0
 8000992:	b108      	cbz	r0, 8000998 <main+0x1bc>
 8000994:	b672      	cpsid	i
  while (1)
 8000996:	e7fe      	b.n	8000996 <main+0x1ba>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 8000998:	4602      	mov	r2, r0
 800099a:	4631      	mov	r1, r6
 800099c:	4855      	ldr	r0, [pc, #340]	; (8000af4 <main+0x318>)
 800099e:	f00b fb11 	bl	800bfc4 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 80009a2:	2014      	movs	r0, #20
 80009a4:	f00a fb3a 	bl	800b01c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 80009a8:	4631      	mov	r1, r6
 80009aa:	4622      	mov	r2, r4
 80009ac:	4851      	ldr	r0, [pc, #324]	; (8000af4 <main+0x318>)
 80009ae:	f00b fb09 	bl	800bfc4 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 80009b2:	200a      	movs	r0, #10
 80009b4:	f00a fb32 	bl	800b01c <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80009b8:	2224      	movs	r2, #36	; 0x24
 80009ba:	4629      	mov	r1, r5
 80009bc:	a817      	add	r0, sp, #92	; 0x5c
  DSI_PLLInitTypeDef PLLInit = {0};
 80009be:	9510      	str	r5, [sp, #64]	; 0x40
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80009c0:	f022 fafa 	bl	8022fb8 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80009c4:	2218      	movs	r2, #24
 80009c6:	4629      	mov	r1, r5
 80009c8:	a811      	add	r0, sp, #68	; 0x44
  hdsi.Instance = DSI;
 80009ca:	4e4b      	ldr	r6, [pc, #300]	; (8000af8 <main+0x31c>)
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80009cc:	f022 faf4 	bl	8022fb8 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 80009d0:	2234      	movs	r2, #52	; 0x34
 80009d2:	4629      	mov	r1, r5
 80009d4:	a82d      	add	r0, sp, #180	; 0xb4
 80009d6:	f022 faef 	bl	8022fb8 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80009da:	4629      	mov	r1, r5
 80009dc:	222c      	movs	r2, #44	; 0x2c
 80009de:	a820      	add	r0, sp, #128	; 0x80
 80009e0:	f022 faea 	bl	8022fb8 <memset>
  hdsi.Instance = DSI;
 80009e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 80009e8:	f04f 0c63 	mov.w	ip, #99	; 0x63
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80009ec:	a90e      	add	r1, sp, #56	; 0x38
 80009ee:	4630      	mov	r0, r6
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80009f0:	e9c6 3500 	strd	r3, r5, [r6]
  hdsi.Init.TXEscapeCkdiv = 4;
 80009f4:	2304      	movs	r3, #4
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80009f6:	e9c6 3402 	strd	r3, r4, [r6, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 80009fa:	2305      	movs	r3, #5
 80009fc:	e9cd c30e 	strd	ip, r3, [sp, #56]	; 0x38
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000a00:	f00a fd80 	bl	800b504 <HAL_DSI_Init>
 8000a04:	b108      	cbz	r0, 8000a0a <main+0x22e>
 8000a06:	b672      	cpsid	i
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <main+0x22c>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000a0a:	e9cd 4017 	strd	r4, r0, [sp, #92]	; 0x5c
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000a0e:	e9cd 0019 	strd	r0, r0, [sp, #100]	; 0x64
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000a12:	e9cd 001b 	strd	r0, r0, [sp, #108]	; 0x6c
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000a16:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
  HostTimeouts.BTATimeout = 0;
 8000a1a:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000a1c:	a917      	add	r1, sp, #92	; 0x5c
 8000a1e:	4630      	mov	r0, r6
 8000a20:	f00a ff9c 	bl	800b95c <HAL_DSI_ConfigHostTimeouts>
 8000a24:	b108      	cbz	r0, 8000a2a <main+0x24e>
 8000a26:	b672      	cpsid	i
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <main+0x24c>
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000a2a:	2321      	movs	r3, #33	; 0x21
 8000a2c:	261c      	movs	r6, #28
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a2e:	270f      	movs	r7, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a30:	a911      	add	r1, sp, #68	; 0x44
 8000a32:	4831      	ldr	r0, [pc, #196]	; (8000af8 <main+0x31c>)
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000a34:	e9cd 6311 	strd	r6, r3, [sp, #68]	; 0x44
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a38:	2319      	movs	r3, #25
 8000a3a:	e9cd 7313 	strd	r7, r3, [sp, #76]	; 0x4c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000a3e:	2300      	movs	r3, #0
  PhyTimings.StopWaitTime = 0;
 8000a40:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a44:	f00a ff4d 	bl	800b8e2 <HAL_DSI_ConfigPhyTimer>
 8000a48:	b108      	cbz	r0, 8000a4e <main+0x272>
 8000a4a:	b672      	cpsid	i
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <main+0x270>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000a4e:	2104      	movs	r1, #4
 8000a50:	4829      	ldr	r0, [pc, #164]	; (8000af8 <main+0x31c>)
 8000a52:	f00a ff35 	bl	800b8c0 <HAL_DSI_ConfigFlowControl>
 8000a56:	b108      	cbz	r0, 8000a5c <main+0x280>
 8000a58:	b672      	cpsid	i
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <main+0x27e>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000a5c:	f242 7110 	movw	r1, #10000	; 0x2710
 8000a60:	4825      	ldr	r0, [pc, #148]	; (8000af8 <main+0x31c>)
 8000a62:	f00b f905 	bl	800bc70 <HAL_DSI_SetLowPowerRXFilter>
 8000a66:	4601      	mov	r1, r0
 8000a68:	b108      	cbz	r0, 8000a6e <main+0x292>
 8000a6a:	b672      	cpsid	i
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <main+0x290>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000a6e:	4822      	ldr	r0, [pc, #136]	; (8000af8 <main+0x31c>)
 8000a70:	f00a fce6 	bl	800b440 <HAL_DSI_ConfigErrorMonitor>
 8000a74:	b108      	cbz	r0, 8000a7a <main+0x29e>
 8000a76:	b672      	cpsid	i
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <main+0x29c>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a7a:	f44f 7880 	mov.w	r8, #256	; 0x100
 8000a7e:	f44f 7300 	mov.w	r3, #512	; 0x200
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a82:	f44f 6280 	mov.w	r2, #1024	; 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a8a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a8e:	f44f 3400 	mov.w	r4, #131072	; 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a92:	f44f 2500 	mov.w	r5, #524288	; 0x80000
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a96:	e9cd 832d 	strd	r8, r3, [sp, #180]	; 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000a9e:	f04f 0802 	mov.w	r8, #2
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000aa2:	e9cd 232f 	strd	r2, r3, [sp, #188]	; 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000aa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000aaa:	f8cd 80e4 	str.w	r8, [sp, #228]	; 0xe4
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000aae:	e9cd 1331 	strd	r1, r3, [sp, #196]	; 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000ab2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000ab6:	a92d      	add	r1, sp, #180	; 0xb4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000ab8:	e9cd 0333 	strd	r0, r3, [sp, #204]	; 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000abc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000ac0:	480d      	ldr	r0, [pc, #52]	; (8000af8 <main+0x31c>)
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000ac2:	e9cd 4335 	strd	r4, r3, [sp, #212]	; 0xd4
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000ac6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000aca:	e9cd 5337 	strd	r5, r3, [sp, #220]	; 0xdc
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000ace:	f00a fec3 	bl	800b858 <HAL_DSI_ConfigCommand>
 8000ad2:	b1a8      	cbz	r0, 8000b00 <main+0x324>
 8000ad4:	b672      	cpsid	i
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <main+0x2fa>
 8000ad8:	0300001b 	.word	0x0300001b
 8000adc:	10040000 	.word	0x10040000
 8000ae0:	e000ed00 	.word	0xe000ed00
 8000ae4:	58024400 	.word	0x58024400
 8000ae8:	240002bc 	.word	0x240002bc
 8000aec:	52005000 	.word	0x52005000
 8000af0:	24000190 	.word	0x24000190
 8000af4:	58021800 	.word	0x58021800
 8000af8:	240001f8 	.word	0x240001f8
 8000afc:	52001000 	.word	0x52001000
  CmdCfg.CommandSize = 400;
 8000b00:	2305      	movs	r3, #5
 8000b02:	f44f 77c8 	mov.w	r7, #400	; 0x190
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000b06:	2601      	movs	r6, #1
  CmdCfg.VirtualChannelID = 0;
 8000b08:	9020      	str	r0, [sp, #128]	; 0x80
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000b0a:	9027      	str	r0, [sp, #156]	; 0x9c
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000b0c:	962a      	str	r6, [sp, #168]	; 0xa8
  CmdCfg.CommandSize = 400;
 8000b0e:	e9cd 3721 	strd	r3, r7, [sp, #132]	; 0x84
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000b12:	2310      	movs	r3, #16
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000b14:	e9cd 3023 	strd	r3, r0, [sp, #140]	; 0x8c
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000b18:	2380      	movs	r3, #128	; 0x80
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000b1a:	e9cd 0025 	strd	r0, r0, [sp, #148]	; 0x94
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000b1e:	eb0d 0103 	add.w	r1, sp, r3
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000b22:	e9cd 3028 	strd	r3, r0, [sp, #160]	; 0xa0
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000b26:	4851      	ldr	r0, [pc, #324]	; (8000c6c <main+0x490>)
 8000b28:	f00a fe24 	bl	800b774 <HAL_DSI_ConfigAdaptedCommandMode>
 8000b2c:	4601      	mov	r1, r0
 8000b2e:	b108      	cbz	r0, 8000b34 <main+0x358>
 8000b30:	b672      	cpsid	i
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <main+0x356>
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000b34:	484d      	ldr	r0, [pc, #308]	; (8000c6c <main+0x490>)
 8000b36:	f00a fe0c 	bl	800b752 <HAL_DSI_SetGenericVCID>
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	b108      	cbz	r0, 8000b42 <main+0x366>
 8000b3e:	b672      	cpsid	i
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <main+0x364>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b42:	4601      	mov	r1, r0
 8000b44:	2234      	movs	r2, #52	; 0x34
 8000b46:	a820      	add	r0, sp, #128	; 0x80
  hltdc.Instance = LTDC;
 8000b48:	4d49      	ldr	r5, [pc, #292]	; (8000c70 <main+0x494>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b4a:	f022 fa35 	bl	8022fb8 <memset>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b4e:	4849      	ldr	r0, [pc, #292]	; (8000c74 <main+0x498>)
 8000b50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  hltdc.Init.AccumulatedActiveH = 482;
 8000b54:	f44f 7cc9 	mov.w	ip, #402	; 0x192
  hltdc.Init.TotalHeigh = 483;
 8000b58:	f240 1e93 	movw	lr, #403	; 0x193
  hltdc.Init.Backcolor.Blue = 0;
 8000b5c:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.AccumulatedVBP = 2;
 8000b5e:	f8c5 8020 	str.w	r8, [r5, #32]
  hltdc.Init.Backcolor.Red = 0;
 8000b62:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b66:	e9c5 0300 	strd	r0, r3, [r5]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000b6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b6e:	4628      	mov	r0, r5
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b70:	e9c5 3402 	strd	r3, r4, [r5, #8]
  hltdc.Init.AccumulatedActiveH = 482;
 8000b74:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 8000b78:	e9c5 c309 	strd	ip, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 483;
 8000b7c:	f240 13e3 	movw	r3, #483	; 0x1e3
  hltdc.Init.HorizontalSync = 0;
 8000b80:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hltdc.Init.AccumulatedHBP = 2;
 8000b84:	e9c5 4806 	strd	r4, r8, [r5, #24]
  hltdc.Init.TotalHeigh = 483;
 8000b88:	e9c5 e30b 	strd	lr, r3, [r5, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b8c:	f00b fe64 	bl	800c858 <HAL_LTDC_Init>
 8000b90:	b108      	cbz	r0, 8000b96 <main+0x3ba>
 8000b92:	b672      	cpsid	i
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <main+0x3b8>
  pLayerCfg.Alpha = 255;
 8000b96:	22ff      	movs	r2, #255	; 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b98:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  pLayerCfg.WindowY1 = 480;
 8000b9c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  pLayerCfg.WindowY0 = 0;
 8000ba0:	9022      	str	r0, [sp, #136]	; 0x88
  pLayerCfg.Backcolor.Blue = 0;
 8000ba2:	f8ad 00b0 	strh.w	r0, [sp, #176]	; 0xb0
  pLayerCfg.Backcolor.Red = 0;
 8000ba6:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
  pLayerCfg.ImageHeight = 480;
 8000baa:	932b      	str	r3, [sp, #172]	; 0xac
  pLayerCfg.Alpha0 = 0;
 8000bac:	e9cd 2025 	strd	r2, r0, [sp, #148]	; 0x94
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000bb0:	2207      	movs	r2, #7
 8000bb2:	e9cd 1227 	strd	r1, r2, [sp, #156]	; 0x9c
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000bb6:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bba:	a920      	add	r1, sp, #128	; 0x80
  pLayerCfg.WindowX1 = 400;
 8000bbc:	e9cd 0720 	strd	r0, r7, [sp, #128]	; 0x80
  pLayerCfg.ImageWidth = 400;
 8000bc0:	e9cd 2729 	strd	r2, r7, [sp, #164]	; 0xa4
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	4628      	mov	r0, r5
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000bc8:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bcc:	f00b ff10 	bl	800c9f0 <HAL_LTDC_ConfigLayer>
 8000bd0:	4604      	mov	r4, r0
 8000bd2:	b108      	cbz	r0, 8000bd8 <main+0x3fc>
 8000bd4:	b672      	cpsid	i
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <main+0x3fa>
  __HAL_LTDC_DISABLE(&hltdc);
 8000bd8:	682a      	ldr	r2, [r5, #0]
  HAL_DSI_Start(&hdsi);
 8000bda:	4824      	ldr	r0, [pc, #144]	; (8000c6c <main+0x490>)
  __HAL_LTDC_DISABLE(&hltdc);
 8000bdc:	6993      	ldr	r3, [r2, #24]
 8000bde:	f023 0301 	bic.w	r3, r3, #1
 8000be2:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8000be4:	f00a ff20 	bl	800ba28 <HAL_DSI_Start>
  IOCtx.Address     = 0;
 8000be8:	4923      	ldr	r1, [pc, #140]	; (8000c78 <main+0x49c>)
  IOCtx.GetTick     = BSP_GetTick;
 8000bea:	4b24      	ldr	r3, [pc, #144]	; (8000c7c <main+0x4a0>)
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000bec:	4824      	ldr	r0, [pc, #144]	; (8000c80 <main+0x4a4>)
  IOCtx.GetTick     = BSP_GetTick;
 8000bee:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000bf0:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <main+0x4a8>)
  IOCtx.Address     = 0;
 8000bf2:	800c      	strh	r4, [r1, #0]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000bf4:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 8000bf6:	4b24      	ldr	r3, [pc, #144]	; (8000c88 <main+0x4ac>)
 8000bf8:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000bfa:	f009 fb03 	bl	800a204 <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8000bfe:	4632      	mov	r2, r6
 8000c00:	4621      	mov	r1, r4
 8000c02:	481f      	ldr	r0, [pc, #124]	; (8000c80 <main+0x4a4>)
 8000c04:	f008 ff5a 	bl	8009abc <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000c08:	2328      	movs	r3, #40	; 0x28
 8000c0a:	2215      	movs	r2, #21
 8000c0c:	4621      	mov	r1, r4
 8000c0e:	4817      	ldr	r0, [pc, #92]	; (8000c6c <main+0x490>)
 8000c10:	9400      	str	r4, [sp, #0]
 8000c12:	f00a ff3c 	bl	800ba8e <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000c16:	a92d      	add	r1, sp, #180	; 0xb4
 8000c18:	4814      	ldr	r0, [pc, #80]	; (8000c6c <main+0x490>)
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000c1a:	9437      	str	r4, [sp, #220]	; 0xdc
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000c1c:	e9cd 442d 	strd	r4, r4, [sp, #180]	; 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000c20:	e9cd 442f 	strd	r4, r4, [sp, #188]	; 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000c24:	e9cd 4431 	strd	r4, r4, [sp, #196]	; 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000c28:	e9cd 4433 	strd	r4, r4, [sp, #204]	; 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000c2c:	e9cd 4435 	strd	r4, r4, [sp, #212]	; 0xd4
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000c30:	f00a fe12 	bl	800b858 <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8000c34:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000c38:	4622      	mov	r2, r4
 8000c3a:	4628      	mov	r0, r5
 8000c3c:	f00b ff06 	bl	800ca4c <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8000c40:	682a      	ldr	r2, [r5, #0]
 8000c42:	6993      	ldr	r3, [r2, #24]
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6193      	str	r3, [r2, #24]
  MX_TouchGFX_Init();
 8000c4a:	f000 fcbd 	bl	80015c8 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8000c4e:	f000 fcba 	bl	80015c6 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 8000c52:	f00e f8e9 	bl	800ee28 <osKernelInitialize>
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000c56:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <main+0x4b0>)
 8000c58:	4621      	mov	r1, r4
 8000c5a:	480d      	ldr	r0, [pc, #52]	; (8000c90 <main+0x4b4>)
 8000c5c:	f00e f910 	bl	800ee80 <osThreadNew>
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <main+0x4b8>)
 8000c62:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000c64:	f00e f8f2 	bl	800ee4c <osKernelStart>
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <main+0x48c>
 8000c6a:	bf00      	nop
 8000c6c:	240001f8 	.word	0x240001f8
 8000c70:	24000214 	.word	0x24000214
 8000c74:	50001000 	.word	0x50001000
 8000c78:	24000138 	.word	0x24000138
 8000c7c:	0800a5ed 	.word	0x0800a5ed
 8000c80:	24000148 	.word	0x24000148
 8000c84:	08001b5d 	.word	0x08001b5d
 8000c88:	08001b95 	.word	0x08001b95
 8000c8c:	080240e8 	.word	0x080240e8
 8000c90:	080015d7 	.word	0x080015d7
 8000c94:	24000168 	.word	0x24000168
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	2214      	movs	r2, #20
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	a82d      	add	r0, sp, #180	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9e:	2500      	movs	r5, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f022 f98a 	bl	8022fb8 <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ca4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8000cb2:	4883      	ldr	r0, [pc, #524]	; (8000ec0 <main+0x6e4>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2703      	movs	r7, #3
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	f44f 7880 	mov.w	r8, #256	; 0x100
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cba:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000cbe:	2608      	movs	r6, #8
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cc0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cc8:	9304      	str	r3, [sp, #16]
 8000cca:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ccc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cd4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000cd8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ce0:	9305      	str	r3, [sp, #20]
 8000ce2:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ce4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000ce8:	f043 0310 	orr.w	r3, r3, #16
 8000cec:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000cf0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000cf4:	f003 0310 	and.w	r3, r3, #16
 8000cf8:	9306      	str	r3, [sp, #24]
 8000cfa:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cfc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d04:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d08:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d10:	9307      	str	r3, [sp, #28]
 8000d12:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d14:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d18:	f043 0304 	orr.w	r3, r3, #4
 8000d1c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d20:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d24:	f003 0304 	and.w	r3, r3, #4
 8000d28:	9308      	str	r3, [sp, #32]
 8000d2a:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d2c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d34:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d38:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d40:	9309      	str	r3, [sp, #36]	; 0x24
 8000d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d44:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d48:	f043 0308 	orr.w	r3, r3, #8
 8000d4c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d50:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d54:	f003 0308 	and.w	r3, r3, #8
 8000d58:	930a      	str	r3, [sp, #40]	; 0x28
 8000d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d68:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	930b      	str	r3, [sp, #44]	; 0x2c
 8000d72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d74:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d78:	f043 0320 	orr.w	r3, r3, #32
 8000d7c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d80:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d84:	f003 0320 	and.w	r3, r3, #32
 8000d88:	930c      	str	r3, [sp, #48]	; 0x30
 8000d8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d98:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9c:	2401      	movs	r4, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	930d      	str	r3, [sp, #52]	; 0x34
 8000da4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8000da6:	f00b f90d 	bl	800bfc4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2108      	movs	r1, #8
 8000dae:	4845      	ldr	r0, [pc, #276]	; (8000ec4 <main+0x6e8>)
 8000db0:	f00b f908 	bl	800bfc4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dba:	4843      	ldr	r0, [pc, #268]	; (8000ec8 <main+0x6ec>)
 8000dbc:	f00b f902 	bl	800bfc4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOJ, FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f44f 7142 	mov.w	r1, #776	; 0x308
 8000dc6:	483e      	ldr	r0, [pc, #248]	; (8000ec0 <main+0x6e4>)
 8000dc8:	f00b f8fc 	bl	800bfc4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dcc:	f241 3308 	movw	r3, #4872	; 0x1308
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000dd0:	a92d      	add	r1, sp, #180	; 0xb4
 8000dd2:	483b      	ldr	r0, [pc, #236]	; (8000ec0 <main+0x6e4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd4:	e9cd 342d 	strd	r3, r4, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	e9cd 572f 	strd	r5, r7, [sp, #188]	; 0xbc
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000ddc:	f00a ff5e 	bl	800bc9c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	a92d      	add	r1, sp, #180	; 0xb4
 8000de4:	4839      	ldr	r0, [pc, #228]	; (8000ecc <main+0x6f0>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000de6:	9531      	str	r5, [sp, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	e9cd 832d 	strd	r8, r3, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	e9cd 552f 	strd	r5, r5, [sp, #188]	; 0xbc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df0:	f00a ff54 	bl	800bc9c <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000df4:	a92d      	add	r1, sp, #180	; 0xb4
 8000df6:	4833      	ldr	r0, [pc, #204]	; (8000ec4 <main+0x6e8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df8:	e9cd 642d 	strd	r6, r4, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfc:	e9cd 472f 	strd	r4, r7, [sp, #188]	; 0xbc
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f00a ff4c 	bl	800bc9c <HAL_GPIO_Init>
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000e04:	a92d      	add	r1, sp, #180	; 0xb4
 8000e06:	4830      	ldr	r0, [pc, #192]	; (8000ec8 <main+0x6ec>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e08:	e9cd 842d 	strd	r8, r4, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0c:	e9cd 572f 	strd	r5, r7, [sp, #188]	; 0xbc
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000e10:	f00a ff44 	bl	800bc9c <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8000e14:	482e      	ldr	r0, [pc, #184]	; (8000ed0 <main+0x6f4>)
 8000e16:	4b2f      	ldr	r3, [pc, #188]	; (8000ed4 <main+0x6f8>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000e18:	8085      	strh	r5, [r0, #4]
  hcrc.Instance = CRC;
 8000e1a:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000e1c:	6204      	str	r4, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000e1e:	e9c0 5505 	strd	r5, r5, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e22:	f00a f9c3 	bl	800b1ac <HAL_CRC_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2800      	cmp	r0, #0
 8000e2a:	f47f ad7a 	bne.w	8000922 <main+0x146>
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000e2e:	492a      	ldr	r1, [pc, #168]	; (8000ed8 <main+0x6fc>)
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000e30:	2540      	movs	r5, #64	; 0x40
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e32:	482a      	ldr	r0, [pc, #168]	; (8000edc <main+0x700>)
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000e34:	680a      	ldr	r2, [r1, #0]
 8000e36:	f022 0201 	bic.w	r2, r2, #1
 8000e3a:	600a      	str	r2, [r1, #0]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e3c:	a92d      	add	r1, sp, #180	; 0xb4
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e3e:	4a28      	ldr	r2, [pc, #160]	; (8000ee0 <main+0x704>)
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000e40:	6283      	str	r3, [r0, #40]	; 0x28
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000e42:	e9c0 2300 	strd	r2, r3, [r0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000e46:	2220      	movs	r2, #32
 8000e48:	e9c0 2504 	strd	r2, r5, [r0, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000e4c:	2280      	movs	r2, #128	; 0x80
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8000e4e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000e52:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000e56:	e9c0 3308 	strd	r3, r3, [r0, #32]
  SdramTiming.LoadToActiveDelay = 16;
 8000e5a:	2310      	movs	r3, #16
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000e5c:	e9cd 332d 	strd	r3, r3, [sp, #180]	; 0xb4
  SdramTiming.RowCycleDelay = 16;
 8000e60:	e9cd 332f 	strd	r3, r3, [sp, #188]	; 0xbc
  SdramTiming.RPDelay = 16;
 8000e64:	e9cd 3331 	strd	r3, r3, [sp, #196]	; 0xc4
  SdramTiming.RCDDelay = 16;
 8000e68:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e6a:	f00d fd01 	bl	800e870 <HAL_SDRAM_Init>
 8000e6e:	4680      	mov	r8, r0
 8000e70:	2800      	cmp	r0, #0
 8000e72:	f43f ad58 	beq.w	8000926 <main+0x14a>
 8000e76:	b672      	cpsid	i
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <main+0x69c>
  HAL_Init();
 8000e7a:	f00a f88f 	bl	800af9c <HAL_Init>
  SystemClock_Config();
 8000e7e:	f7ff fc41 	bl	8000704 <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8000e82:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 8000e86:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8000e88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e8c:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8000e90:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e98:	9303      	str	r3, [sp, #12]
 8000e9a:	9b03      	ldr	r3, [sp, #12]
HAL_HSEM_FastTake(HSEM_ID_0);
 8000e9c:	f00b f8a0 	bl	800bfe0 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8000ea0:	4621      	mov	r1, r4
 8000ea2:	4620      	mov	r0, r4
 8000ea4:	f00b f8aa 	bl	800bffc <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000ea8:	4c0e      	ldr	r4, [pc, #56]	; (8000ee4 <main+0x708>)
 8000eaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eae:	6822      	ldr	r2, [r4, #0]
 8000eb0:	0412      	lsls	r2, r2, #16
 8000eb2:	f53f aef1 	bmi.w	8000c98 <main+0x4bc>
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	d1f9      	bne.n	8000eae <main+0x6d2>
 8000eba:	b672      	cpsid	i
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <main+0x6e0>
 8000ebe:	bf00      	nop
 8000ec0:	58022400 	.word	0x58022400
 8000ec4:	58021800 	.word	0x58021800
 8000ec8:	58021400 	.word	0x58021400
 8000ecc:	58020000 	.word	0x58020000
 8000ed0:	2400016c 	.word	0x2400016c
 8000ed4:	58024c00 	.word	0x58024c00
 8000ed8:	52004000 	.word	0x52004000
 8000edc:	24000308 	.word	0x24000308
 8000ee0:	52004140 	.word	0x52004140
 8000ee4:	58024400 	.word	0x58024400

08000ee8 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 8000ee8:	6802      	ldr	r2, [r0, #0]
 8000eea:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d101      	bne.n	8000ef4 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000ef0:	f00a b882 	b.w	800aff8 <HAL_IncTick>
}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	40001000 	.word	0x40001000

08000efc <Error_Handler>:
 8000efc:	b672      	cpsid	i
  while (1)
 8000efe:	e7fe      	b.n	8000efe <Error_Handler+0x2>

08000f00 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_MspInit+0x2c>)
{
 8000f02:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f04:	210f      	movs	r1, #15
 8000f06:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000f0e:	f042 0202 	orr.w	r2, r2, #2
 8000f12:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f16:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	9301      	str	r3, [sp, #4]
 8000f22:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f24:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f26:	f00a b8a3 	b.w	800b070 <HAL_NVIC_SetPriority>
 8000f2a:	bf00      	nop
 8000f2c:	58024400 	.word	0x58024400

08000f30 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000f30:	6802      	ldr	r2, [r0, #0]
{
 8000f32:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <HAL_CRC_MspInit+0x2c>)
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d10d      	bne.n	8000f56 <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f3a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000f3e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f42:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000f46:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f52:	9301      	str	r3, [sp, #4]
 8000f54:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f56:	b002      	add	sp, #8
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	58024c00 	.word	0x58024c00

08000f60 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <HAL_DMA2D_MspInit+0x40>)
{
 8000f62:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8000f64:	6802      	ldr	r2, [r0, #0]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d117      	bne.n	8000f9a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000f6c:	2107      	movs	r1, #7
 8000f6e:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f70:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000f74:	f042 0210 	orr.w	r2, r2, #16
 8000f78:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000f7c:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f7e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f82:	f003 0310 	and.w	r3, r3, #16
 8000f86:	9301      	str	r3, [sp, #4]
 8000f88:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000f8a:	f00a f871 	bl	800b070 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000f8e:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000f90:	b003      	add	sp, #12
 8000f92:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000f96:	f00a b89d 	b.w	800b0d4 <HAL_NVIC_EnableIRQ>
}
 8000f9a:	b003      	add	sp, #12
 8000f9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fa0:	52001000 	.word	0x52001000
 8000fa4:	58024400 	.word	0x58024400

08000fa8 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8000fa8:	b510      	push	{r4, lr}
 8000faa:	b0ba      	sub	sp, #232	; 0xe8
 8000fac:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fae:	2214      	movs	r2, #20
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	a803      	add	r0, sp, #12
 8000fb4:	f022 f800 	bl	8022fb8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb8:	22c8      	movs	r2, #200	; 0xc8
 8000fba:	2100      	movs	r1, #0
 8000fbc:	a808      	add	r0, sp, #32
 8000fbe:	f021 fffb 	bl	8022fb8 <memset>
  if(hdsi->Instance==DSI)
 8000fc2:	6823      	ldr	r3, [r4, #0]
 8000fc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fc8:	d138      	bne.n	800103c <HAL_DSI_MspInit+0x94>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8000fca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000fce:	2300      	movs	r3, #0
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd0:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8000fd2:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd6:	f00c ff19 	bl	800de0c <HAL_RCCEx_PeriphCLKConfig>
 8000fda:	b108      	cbz	r0, 8000fe0 <HAL_DSI_MspInit+0x38>
    {
      Error_Handler();
 8000fdc:	f7ff ff8e 	bl	8000efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8000fe0:	4b17      	ldr	r3, [pc, #92]	; (8001040 <HAL_DSI_MspInit+0x98>)
    DSI_D0N     ------> DSIHOST_D0N
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000fe4:	a903      	add	r1, sp, #12
 8000fe6:	4817      	ldr	r0, [pc, #92]	; (8001044 <HAL_DSI_MspInit+0x9c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 8000fe8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8000fec:	f042 0210 	orr.w	r2, r2, #16
 8000ff0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8000ff4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8000ff8:	f002 0210 	and.w	r2, r2, #16
 8000ffc:	9201      	str	r2, [sp, #4]
 8000ffe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001000:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001008:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800100e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001012:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001016:	9302      	str	r3, [sp, #8]
 8001018:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001020:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001026:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001028:	f00a fe38 	bl	800bc9c <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 800102c:	207b      	movs	r0, #123	; 0x7b
 800102e:	4622      	mov	r2, r4
 8001030:	2107      	movs	r1, #7
 8001032:	f00a f81d 	bl	800b070 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001036:	207b      	movs	r0, #123	; 0x7b
 8001038:	f00a f84c 	bl	800b0d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 800103c:	b03a      	add	sp, #232	; 0xe8
 800103e:	bd10      	pop	{r4, pc}
 8001040:	58024400 	.word	0x58024400
 8001044:	58022400 	.word	0x58022400

08001048 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001048:	b510      	push	{r4, lr}
 800104a:	b0b4      	sub	sp, #208	; 0xd0
 800104c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800104e:	22c8      	movs	r2, #200	; 0xc8
 8001050:	2100      	movs	r1, #0
 8001052:	a802      	add	r0, sp, #8
 8001054:	f021 ffb0 	bl	8022fb8 <memset>
  if(hltdc->Instance==LTDC)
 8001058:	6822      	ldr	r2, [r4, #0]
 800105a:	4b18      	ldr	r3, [pc, #96]	; (80010bc <HAL_LTDC_MspInit+0x74>)
 800105c:	429a      	cmp	r2, r3
 800105e:	d12b      	bne.n	80010b8 <HAL_LTDC_MspInit+0x70>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001060:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001064:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3M = 5;
    PeriphClkInitStruct.PLL3.PLL3N = 161;
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 21;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8001066:	2115      	movs	r1, #21
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001068:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800106a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 800106e:	23a1      	movs	r3, #161	; 0xa1
 8001070:	2205      	movs	r2, #5
 8001072:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001076:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001078:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 800107c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001080:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001084:	f00c fec2 	bl	800de0c <HAL_RCCEx_PeriphCLKConfig>
 8001088:	b108      	cbz	r0, 800108e <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 800108a:	f7ff ff37 	bl	8000efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <HAL_LTDC_MspInit+0x78>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001090:	2058      	movs	r0, #88	; 0x58
 8001092:	2107      	movs	r1, #7
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001094:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8001098:	f042 0208 	orr.w	r2, r2, #8
 800109c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80010a0:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 80010a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80010a6:	f003 0308 	and.w	r3, r3, #8
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80010ae:	f009 ffdf 	bl	800b070 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80010b2:	2058      	movs	r0, #88	; 0x58
 80010b4:	f00a f80e 	bl	800b0d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80010b8:	b034      	add	sp, #208	; 0xd0
 80010ba:	bd10      	pop	{r4, pc}
 80010bc:	50001000 	.word	0x50001000
 80010c0:	58024400 	.word	0x58024400

080010c4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80010c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010c6:	b0bf      	sub	sp, #252	; 0xfc
 80010c8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ca:	2214      	movs	r2, #20
 80010cc:	2100      	movs	r1, #0
 80010ce:	a807      	add	r0, sp, #28
 80010d0:	f021 ff72 	bl	8022fb8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d4:	22c8      	movs	r2, #200	; 0xc8
 80010d6:	2100      	movs	r1, #0
 80010d8:	a80c      	add	r0, sp, #48	; 0x30
 80010da:	f021 ff6d 	bl	8022fb8 <memset>
  if(hqspi->Instance==QUADSPI)
 80010de:	6822      	ldr	r2, [r4, #0]
 80010e0:	4b53      	ldr	r3, [pc, #332]	; (8001230 <HAL_QSPI_MspInit+0x16c>)
 80010e2:	429a      	cmp	r2, r3
 80010e4:	f040 80a1 	bne.w	800122a <HAL_QSPI_MspInit+0x166>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80010e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80010ec:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ee:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80010f0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f4:	f00c fe8a 	bl	800de0c <HAL_RCCEx_PeriphCLKConfig>
 80010f8:	b108      	cbz	r0, 80010fe <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 80010fa:	f7ff feff 	bl	8000efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80010fe:	4b4d      	ldr	r3, [pc, #308]	; (8001234 <HAL_QSPI_MspInit+0x170>)
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001100:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001104:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001106:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800110a:	a907      	add	r1, sp, #28
 800110c:	484a      	ldr	r0, [pc, #296]	; (8001238 <HAL_QSPI_MspInit+0x174>)

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800110e:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001110:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001114:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001118:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800111c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001120:	9201      	str	r2, [sp, #4]
 8001122:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001124:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001128:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800112c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001130:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001134:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001138:	9202      	str	r2, [sp, #8]
 800113a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800113c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001140:	f042 0220 	orr.w	r2, r2, #32
 8001144:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001148:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800114c:	f002 0220 	and.w	r2, r2, #32
 8001150:	9203      	str	r2, [sp, #12]
 8001152:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001154:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001158:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800115c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001160:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001164:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001168:	9204      	str	r2, [sp, #16]
 800116a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001170:	f042 0202 	orr.w	r2, r2, #2
 8001174:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001178:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800117c:	f002 0202 	and.w	r2, r2, #2
 8001180:	9205      	str	r2, [sp, #20]
 8001182:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001184:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001188:	f042 0208 	orr.w	r2, r2, #8
 800118c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001194:	f003 0308 	and.w	r3, r3, #8
 8001198:	9306      	str	r3, [sp, #24]
 800119a:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80011a0:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80011a8:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011aa:	f00a fd77 	bl	800bc9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011ae:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011b0:	a907      	add	r1, sp, #28
 80011b2:	4821      	ldr	r0, [pc, #132]	; (8001238 <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80011b4:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011be:	f00a fd6d 	bl	800bc9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011c2:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011c4:	a907      	add	r1, sp, #28
 80011c6:	481d      	ldr	r0, [pc, #116]	; (800123c <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80011c8:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011d2:	f00a fd63 	bl	800bc9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011d6:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011da:	a907      	add	r1, sp, #28
 80011dc:	4817      	ldr	r0, [pc, #92]	; (800123c <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80011de:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011e8:	f00a fd58 	bl	800bc9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011ec:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011ee:	a907      	add	r1, sp, #28
 80011f0:	4813      	ldr	r0, [pc, #76]	; (8001240 <HAL_QSPI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80011f2:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011fc:	f00a fd4e 	bl	800bc9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001200:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001202:	a907      	add	r1, sp, #28
 8001204:	480f      	ldr	r0, [pc, #60]	; (8001244 <HAL_QSPI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001206:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001210:	f00a fd44 	bl	800bc9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001214:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001218:	a907      	add	r1, sp, #28
 800121a:	480b      	ldr	r0, [pc, #44]	; (8001248 <HAL_QSPI_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800121c:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001226:	f00a fd39 	bl	800bc9c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800122a:	b03f      	add	sp, #252	; 0xfc
 800122c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122e:	bf00      	nop
 8001230:	52005000 	.word	0x52005000
 8001234:	58024400 	.word	0x58024400
 8001238:	58021800 	.word	0x58021800
 800123c:	58021400 	.word	0x58021400
 8001240:	58021c00 	.word	0x58021c00
 8001244:	58020400 	.word	0x58020400
 8001248:	58020c00 	.word	0x58020c00

0800124c <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800124c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124e:	b0b9      	sub	sp, #228	; 0xe4
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001250:	2100      	movs	r1, #0
 8001252:	2214      	movs	r2, #20
 8001254:	a801      	add	r0, sp, #4
 8001256:	f021 feaf 	bl	8022fb8 <memset>
  if (FMC_Initialized) {
 800125a:	4b3a      	ldr	r3, [pc, #232]	; (8001344 <HAL_SDRAM_MspInit+0xf8>)
 800125c:	6819      	ldr	r1, [r3, #0]
 800125e:	2900      	cmp	r1, #0
 8001260:	d16d      	bne.n	800133e <HAL_SDRAM_MspInit+0xf2>
  FMC_Initialized = 1;
 8001262:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001264:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 8001266:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001268:	22c0      	movs	r2, #192	; 0xc0
 800126a:	f021 fea5 	bl	8022fb8 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800126e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001272:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001274:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001276:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800127a:	f00c fdc7 	bl	800de0c <HAL_RCCEx_PeriphCLKConfig>
 800127e:	b108      	cbz	r0, 8001284 <HAL_SDRAM_MspInit+0x38>
      Error_Handler();
 8001280:	f7ff fe3c 	bl	8000efc <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 8001284:	4b30      	ldr	r3, [pc, #192]	; (8001348 <HAL_SDRAM_MspInit+0xfc>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001288:	2600      	movs	r6, #0
 800128a:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 800128c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001290:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001292:	a901      	add	r1, sp, #4
 8001294:	482d      	ldr	r0, [pc, #180]	; (800134c <HAL_SDRAM_MspInit+0x100>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001296:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800129a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800129e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012a2:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 80012a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	f240 63ff 	movw	r3, #1791	; 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b0:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80012b8:	f00a fcf0 	bl	800bc9c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 80012bc:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012c0:	a901      	add	r1, sp, #4
 80012c2:	4823      	ldr	r0, [pc, #140]	; (8001350 <HAL_SDRAM_MspInit+0x104>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012c4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ca:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012ce:	f00a fce5 	bl	800bc9c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 80012d2:	f44f 437f 	mov.w	r3, #65280	; 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012d6:	a901      	add	r1, sp, #4
 80012d8:	481e      	ldr	r0, [pc, #120]	; (8001354 <HAL_SDRAM_MspInit+0x108>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012da:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e0:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012e4:	f00a fcda 	bl	800bc9c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80012e8:	f248 1331 	movw	r3, #33073	; 0x8131
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012ec:	a901      	add	r1, sp, #4
 80012ee:	481a      	ldr	r0, [pc, #104]	; (8001358 <HAL_SDRAM_MspInit+0x10c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012f0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f6:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012fa:	f00a fccf 	bl	800bc9c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80012fe:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001302:	a901      	add	r1, sp, #4
 8001304:	4815      	ldr	r0, [pc, #84]	; (800135c <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001306:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001310:	f00a fcc4 	bl	800bc9c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001314:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001318:	a901      	add	r1, sp, #4
 800131a:	4811      	ldr	r0, [pc, #68]	; (8001360 <HAL_SDRAM_MspInit+0x114>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800131c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001322:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001326:	f00a fcb9 	bl	800bc9c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800132a:	230d      	movs	r3, #13
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132c:	a901      	add	r1, sp, #4
 800132e:	480d      	ldr	r0, [pc, #52]	; (8001364 <HAL_SDRAM_MspInit+0x118>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001330:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001336:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133a:	f00a fcaf 	bl	800bc9c <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800133e:	b039      	add	sp, #228	; 0xe4
 8001340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001342:	bf00      	nop
 8001344:	24000340 	.word	0x24000340
 8001348:	58024400 	.word	0x58024400
 800134c:	58022000 	.word	0x58022000
 8001350:	58021000 	.word	0x58021000
 8001354:	58021c00 	.word	0x58021c00
 8001358:	58021800 	.word	0x58021800
 800135c:	58020c00 	.word	0x58020c00
 8001360:	58021400 	.word	0x58021400
 8001364:	58020800 	.word	0x58020800

08001368 <HAL_SDRAM_MspDeInit>:
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 8001368:	b508      	push	{r3, lr}
  if (FMC_DeInitialized) {
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <HAL_SDRAM_MspDeInit+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	bb62      	cbnz	r2, 80013ca <HAL_SDRAM_MspDeInit+0x62>
  FMC_DeInitialized = 1;
 8001370:	2201      	movs	r2, #1
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001372:	f240 61ff 	movw	r1, #1791	; 0x6ff
 8001376:	4816      	ldr	r0, [pc, #88]	; (80013d0 <HAL_SDRAM_MspDeInit+0x68>)
  FMC_DeInitialized = 1;
 8001378:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 800137a:	4a16      	ldr	r2, [pc, #88]	; (80013d4 <HAL_SDRAM_MspDeInit+0x6c>)
 800137c:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
 8001380:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001384:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001388:	f00a fd74 	bl	800be74 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 800138c:	f64f 7183 	movw	r1, #65411	; 0xff83
 8001390:	4811      	ldr	r0, [pc, #68]	; (80013d8 <HAL_SDRAM_MspDeInit+0x70>)
 8001392:	f00a fd6f 	bl	800be74 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 8001396:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800139a:	4810      	ldr	r0, [pc, #64]	; (80013dc <HAL_SDRAM_MspDeInit+0x74>)
 800139c:	f00a fd6a 	bl	800be74 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80013a0:	f248 1131 	movw	r1, #33073	; 0x8131
 80013a4:	480e      	ldr	r0, [pc, #56]	; (80013e0 <HAL_SDRAM_MspDeInit+0x78>)
 80013a6:	f00a fd65 	bl	800be74 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80013aa:	f24c 7103 	movw	r1, #50947	; 0xc703
 80013ae:	480d      	ldr	r0, [pc, #52]	; (80013e4 <HAL_SDRAM_MspDeInit+0x7c>)
 80013b0:	f00a fd60 	bl	800be74 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80013b4:	f64f 013f 	movw	r1, #63551	; 0xf83f
 80013b8:	480b      	ldr	r0, [pc, #44]	; (80013e8 <HAL_SDRAM_MspDeInit+0x80>)
 80013ba:	f00a fd5b 	bl	800be74 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3);
 80013be:	210d      	movs	r1, #13
 80013c0:	480a      	ldr	r0, [pc, #40]	; (80013ec <HAL_SDRAM_MspDeInit+0x84>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 80013c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3);
 80013c6:	f00a bd55 	b.w	800be74 <HAL_GPIO_DeInit>
}
 80013ca:	bd08      	pop	{r3, pc}
 80013cc:	2400033c 	.word	0x2400033c
 80013d0:	58022000 	.word	0x58022000
 80013d4:	58024400 	.word	0x58024400
 80013d8:	58021000 	.word	0x58021000
 80013dc:	58021c00 	.word	0x58021c00
 80013e0:	58021800 	.word	0x58021800
 80013e4:	58020c00 	.word	0x58020c00
 80013e8:	58021400 	.word	0x58021400
 80013ec:	58020800 	.word	0x58020800

080013f0 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f0:	280f      	cmp	r0, #15
{
 80013f2:	b510      	push	{r4, lr}
 80013f4:	4604      	mov	r4, r0
 80013f6:	b08a      	sub	sp, #40	; 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f8:	d902      	bls.n	8001400 <HAL_InitTick+0x10>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 80013fa:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 80013fc:	b00a      	add	sp, #40	; 0x28
 80013fe:	bd10      	pop	{r4, pc}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001400:	4601      	mov	r1, r0
 8001402:	2200      	movs	r2, #0
 8001404:	2036      	movs	r0, #54	; 0x36
 8001406:	f009 fe33 	bl	800b070 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800140a:	2036      	movs	r0, #54	; 0x36
 800140c:	f009 fe62 	bl	800b0d4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001410:	4b18      	ldr	r3, [pc, #96]	; (8001474 <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001412:	4669      	mov	r1, sp
 8001414:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 8001416:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001418:	4b17      	ldr	r3, [pc, #92]	; (8001478 <HAL_InitTick+0x88>)
 800141a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800141e:	f042 0210 	orr.w	r2, r2, #16
 8001422:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001426:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800142a:	f003 0310 	and.w	r3, r3, #16
 800142e:	9301      	str	r3, [sp, #4]
 8001430:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001432:	f00c fbd1 	bl	800dbd8 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001436:	9b07      	ldr	r3, [sp, #28]
 8001438:	b9c3      	cbnz	r3, 800146c <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800143a:	f00c fba9 	bl	800db90 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 800143e:	4c0f      	ldr	r4, [pc, #60]	; (800147c <HAL_InitTick+0x8c>)
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <HAL_InitTick+0x90>)
 8001442:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001444:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001448:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <HAL_InitTick+0x94>)
 800144c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001450:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 8001452:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 8001454:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001456:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001458:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145a:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800145c:	f00d fc08 	bl	800ec70 <HAL_TIM_Base_Init>
 8001460:	2800      	cmp	r0, #0
 8001462:	d1ca      	bne.n	80013fa <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 8001464:	4620      	mov	r0, r4
 8001466:	f00d faab 	bl	800e9c0 <HAL_TIM_Base_Start_IT>
 800146a:	e7c7      	b.n	80013fc <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800146c:	f00c fb90 	bl	800db90 <HAL_RCC_GetPCLK1Freq>
 8001470:	0040      	lsls	r0, r0, #1
 8001472:	e7e4      	b.n	800143e <HAL_InitTick+0x4e>
 8001474:	24000054 	.word	0x24000054
 8001478:	58024400 	.word	0x58024400
 800147c:	24000344 	.word	0x24000344
 8001480:	40001000 	.word	0x40001000
 8001484:	000f4240 	.word	0x000f4240

08001488 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <NMI_Handler>

0800148a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <HardFault_Handler>

0800148c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800148c:	e7fe      	b.n	800148c <MemManage_Handler>

0800148e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <BusFault_Handler>

08001490 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <UsageFault_Handler>

08001492 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001492:	4770      	bx	lr

08001494 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001494:	4801      	ldr	r0, [pc, #4]	; (800149c <TIM6_DAC_IRQHandler+0x8>)
 8001496:	f00d bad5 	b.w	800ea44 <HAL_TIM_IRQHandler>
 800149a:	bf00      	nop
 800149c:	24000344 	.word	0x24000344

080014a0 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80014a0:	4801      	ldr	r0, [pc, #4]	; (80014a8 <LTDC_IRQHandler+0x8>)
 80014a2:	f00b ba48 	b.w	800c936 <HAL_LTDC_IRQHandler>
 80014a6:	bf00      	nop
 80014a8:	24000214 	.word	0x24000214

080014ac <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80014ac:	4801      	ldr	r0, [pc, #4]	; (80014b4 <DMA2D_IRQHandler+0x8>)
 80014ae:	f009 bf1c 	b.w	800b2ea <HAL_DMA2D_IRQHandler>
 80014b2:	bf00      	nop
 80014b4:	24000190 	.word	0x24000190

080014b8 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 80014b8:	4801      	ldr	r0, [pc, #4]	; (80014c0 <DSI_IRQHandler+0x8>)
 80014ba:	f00a b8d8 	b.w	800b66e <HAL_DSI_IRQHandler>
 80014be:	bf00      	nop
 80014c0:	240001f8 	.word	0x240001f8

080014c4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80014c4:	2001      	movs	r0, #1
 80014c6:	4770      	bx	lr

080014c8 <_kill>:

int _kill(int pid, int sig)
{
 80014c8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80014ca:	f021 fd1b 	bl	8022f04 <__errno>
 80014ce:	2316      	movs	r3, #22
 80014d0:	6003      	str	r3, [r0, #0]
	return -1;
}
 80014d2:	f04f 30ff 	mov.w	r0, #4294967295
 80014d6:	bd08      	pop	{r3, pc}

080014d8 <_exit>:

void _exit (int status)
{
 80014d8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80014da:	f021 fd13 	bl	8022f04 <__errno>
 80014de:	2316      	movs	r3, #22
 80014e0:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80014e2:	e7fe      	b.n	80014e2 <_exit+0xa>

080014e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e4:	b570      	push	{r4, r5, r6, lr}
 80014e6:	460d      	mov	r5, r1
 80014e8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ea:	460e      	mov	r6, r1
 80014ec:	1b73      	subs	r3, r6, r5
 80014ee:	429c      	cmp	r4, r3
 80014f0:	dc01      	bgt.n	80014f6 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80014f2:	4620      	mov	r0, r4
 80014f4:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80014f6:	f3af 8000 	nop.w
 80014fa:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fe:	e7f5      	b.n	80014ec <_read+0x8>

08001500 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001500:	b570      	push	{r4, r5, r6, lr}
 8001502:	460d      	mov	r5, r1
 8001504:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001506:	460e      	mov	r6, r1
 8001508:	1b73      	subs	r3, r6, r5
 800150a:	429c      	cmp	r4, r3
 800150c:	dc01      	bgt.n	8001512 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800150e:	4620      	mov	r0, r4
 8001510:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001512:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001516:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151a:	e7f5      	b.n	8001508 <_write+0x8>

0800151c <_close>:

int _close(int file)
{
	return -1;
}
 800151c:	f04f 30ff 	mov.w	r0, #4294967295
 8001520:	4770      	bx	lr

08001522 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001522:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001526:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001528:	604b      	str	r3, [r1, #4]
}
 800152a:	4770      	bx	lr

0800152c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800152c:	2001      	movs	r0, #1
 800152e:	4770      	bx	lr

08001530 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001530:	2000      	movs	r0, #0
 8001532:	4770      	bx	lr

08001534 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001534:	4a0b      	ldr	r2, [pc, #44]	; (8001564 <_sbrk+0x30>)
{
 8001536:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001538:	6811      	ldr	r1, [r2, #0]
{
 800153a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800153c:	b909      	cbnz	r1, 8001542 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800153e:	490a      	ldr	r1, [pc, #40]	; (8001568 <_sbrk+0x34>)
 8001540:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001542:	6810      	ldr	r0, [r2, #0]
 8001544:	4909      	ldr	r1, [pc, #36]	; (800156c <_sbrk+0x38>)
 8001546:	4c0a      	ldr	r4, [pc, #40]	; (8001570 <_sbrk+0x3c>)
 8001548:	4403      	add	r3, r0
 800154a:	1b09      	subs	r1, r1, r4
 800154c:	428b      	cmp	r3, r1
 800154e:	d906      	bls.n	800155e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001550:	f021 fcd8 	bl	8022f04 <__errno>
 8001554:	230c      	movs	r3, #12
 8001556:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001558:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800155c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800155e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001560:	e7fc      	b.n	800155c <_sbrk+0x28>
 8001562:	bf00      	nop
 8001564:	24000390 	.word	0x24000390
 8001568:	2400ed60 	.word	0x2400ed60
 800156c:	24080000 	.word	0x24080000
 8001570:	00001000 	.word	0x00001000

08001574 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001574:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001578:	f009 fca0 	bl	800aebc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800157c:	480c      	ldr	r0, [pc, #48]	; (80015b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800157e:	490d      	ldr	r1, [pc, #52]	; (80015b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001580:	4a0d      	ldr	r2, [pc, #52]	; (80015b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001584:	e002      	b.n	800158c <LoopCopyDataInit>

08001586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800158a:	3304      	adds	r3, #4

0800158c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800158c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800158e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001590:	d3f9      	bcc.n	8001586 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001592:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001594:	4c0a      	ldr	r4, [pc, #40]	; (80015c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001598:	e001      	b.n	800159e <LoopFillZerobss>

0800159a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800159a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800159c:	3204      	adds	r2, #4

0800159e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800159e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a0:	d3fb      	bcc.n	800159a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015a2:	f021 fcc7 	bl	8022f34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015a6:	f7ff f919 	bl	80007dc <main>
  bx  lr
 80015aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015ac:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80015b0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015b4:	2400011c 	.word	0x2400011c
  ldr r2, =_sidata
 80015b8:	08026f28 	.word	0x08026f28
  ldr r2, =_sbss
 80015bc:	2400011c 	.word	0x2400011c
  ldr r4, =_ebss
 80015c0:	2400ed5c 	.word	0x2400ed5c

080015c4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c4:	e7fe      	b.n	80015c4 <ADC3_IRQHandler>

080015c6 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 80015c6:	4770      	bx	lr

080015c8 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80015c8:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 80015ca:	f000 ff6d 	bl	80024a8 <touchgfx_components_init>
  touchgfx_init();
}
 80015ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  touchgfx_init();
 80015d2:	f000 bef5 	b.w	80023c0 <touchgfx_init>

080015d6 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80015d6:	f000 bf69 	b.w	80024ac <touchgfx_taskEntry>

080015da <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 80015da:	6840      	ldr	r0, [r0, #4]
    }
 80015dc:	4770      	bx	lr

080015de <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 80015de:	6041      	str	r1, [r0, #4]
    }
 80015e0:	4770      	bx	lr

080015e2 <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 80015e2:	1a51      	subs	r1, r2, r1
 80015e4:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 80015e8:	fbb1 f0f3 	udiv	r0, r1, r3
 80015ec:	4770      	bx	lr
	...

080015f0 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 80015f0:	4b02      	ldr	r3, [pc, #8]	; (80015fc <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0xc>)
 80015f2:	68c0      	ldr	r0, [r0, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80015f8:	4358      	muls	r0, r3
 80015fa:	4770      	bx	lr
 80015fc:	24000394 	.word	0x24000394

08001600 <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 8001600:	4770      	bx	lr
	...

08001604 <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 8001604:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001606:	4a1e      	ldr	r2, [pc, #120]	; (8001680 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
    tim.Instance = TIM2;
 8001608:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
{
 800160c:	4605      	mov	r5, r0
    tim.Init.Period = 0xFFFFFFFF;
 800160e:	f04f 30ff 	mov.w	r0, #4294967295
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001612:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800161e:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	9301      	str	r3, [sp, #4]
 8001628:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 800162a:	4b16      	ldr	r3, [pc, #88]	; (8001684 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 800162c:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162e:	2100      	movs	r1, #0
    tim.Init.Period = 0xFFFFFFFF;
 8001630:	60d8      	str	r0, [r3, #12]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001632:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001634:	6099      	str	r1, [r3, #8]
    tim.Init.Prescaler = 0;
 8001636:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 8001638:	2101      	movs	r1, #1
 800163a:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 800163c:	69d3      	ldr	r3, [r2, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163e:	2210      	movs	r2, #16
 8001640:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001644:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001648:	fab2 f282 	clz	r2, r2
 800164c:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 800164e:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 8001650:	5cd3      	ldrb	r3, [r2, r3]
 8001652:	b983      	cbnz	r3, 8001676 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x72>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 8001654:	f00c fa7a 	bl	800db4c <HAL_RCC_GetHCLKFreq>
 8001658:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 800165a:	f00c f8b1 	bl	800d7c0 <HAL_RCC_GetSysClockFreq>
 800165e:	fbb0 f0f4 	udiv	r0, r0, r4
 8001662:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 8001664:	4807      	ldr	r0, [pc, #28]	; (8001684 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001666:	f00d fb03 	bl	800ec70 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 800166a:	4806      	ldr	r0, [pc, #24]	; (8001684 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
}
 800166c:	b003      	add	sp, #12
 800166e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_TIM_Base_Start(&tim);
 8001672:	f00d b96b 	b.w	800e94c <HAL_TIM_Base_Start>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8001676:	f00c fa8b 	bl	800db90 <HAL_RCC_GetPCLK1Freq>
 800167a:	0044      	lsls	r4, r0, #1
 800167c:	e7ed      	b.n	800165a <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x56>
 800167e:	bf00      	nop
 8001680:	58024400 	.word	0x58024400
 8001684:	24000394 	.word	0x24000394
 8001688:	080256e8 	.word	0x080256e8

0800168c <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 800168c:	b510      	push	{r4, lr}
 800168e:	4604      	mov	r4, r0
 8001690:	2110      	movs	r1, #16
 8001692:	f021 faf8 	bl	8022c86 <_ZdlPvj>
 8001696:	4620      	mov	r0, r4
 8001698:	bd10      	pop	{r4, pc}

0800169a <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 800169a:	b538      	push	{r3, r4, r5, lr}
    if (active) //idle task sched out
    {
        uint32_t current_cc = cc_in;
        cc_consumed += getCPUCycles() - current_cc;
 800169c:	6803      	ldr	r3, [r0, #0]
{
 800169e:	4604      	mov	r4, r0
        cc_consumed += getCPUCycles() - current_cc;
 80016a0:	691a      	ldr	r2, [r3, #16]
    if (active) //idle task sched out
 80016a2:	b131      	cbz	r1, 80016b2 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
        uint32_t current_cc = cc_in;
 80016a4:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 80016a6:	4790      	blx	r2
 80016a8:	6863      	ldr	r3, [r4, #4]
 80016aa:	1b5b      	subs	r3, r3, r5
 80016ac:	4418      	add	r0, r3
 80016ae:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 80016b0:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 80016b2:	4790      	blx	r2
 80016b4:	60a0      	str	r0, [r4, #8]
}
 80016b6:	e7fb      	b.n	80016b0 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

080016b8 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80016b8:	4770      	bx	lr

080016ba <_ZN20STM32TouchControllerD0Ev>:
 80016ba:	b510      	push	{r4, lr}
 80016bc:	4604      	mov	r4, r0
 80016be:	2104      	movs	r1, #4
 80016c0:	f021 fae1 	bl	8022c86 <_ZdlPvj>
 80016c4:	4620      	mov	r0, r4
 80016c6:	bd10      	pop	{r4, pc}

080016c8 <_ZN20STM32TouchController4initEv>:
static bool bsp_ts_initialized = false;
TS_Init_t* hTS;
TS_State_t  TS_State = {0};

void STM32TouchController::init()
{
 80016c8:	b508      	push	{r3, lr}
    /**
     * Initialize touch controller and driver
     *
     */
    hTS->Width = 800;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <_ZN20STM32TouchController4initEv+0x3c>)
    hTS->Height = 480;
 80016cc:	f44f 7248 	mov.w	r2, #800	; 0x320
    hTS->Orientation = TS_SWAP_XY | TS_SWAP_Y;
    hTS->Accuracy = 0;
 80016d0:	2000      	movs	r0, #0
    hTS->Width = 800;
 80016d2:	6819      	ldr	r1, [r3, #0]
    hTS->Height = 480;
 80016d4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80016d8:	e9c1 2300 	strd	r2, r3, [r1]
    hTS->Accuracy = 0;
 80016dc:	230c      	movs	r3, #12
 80016de:	e9c1 3002 	strd	r3, r0, [r1, #8]

    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 80016e2:	f009 faf7 	bl	800acd4 <BSP_TS_Init>
 80016e6:	4b08      	ldr	r3, [pc, #32]	; (8001708 <_ZN20STM32TouchController4initEv+0x40>)
 80016e8:	b910      	cbnz	r0, 80016f0 <_ZN20STM32TouchController4initEv+0x28>
    {
        bsp_ts_initialized = true;
 80016ea:	2201      	movs	r2, #1
 80016ec:	701a      	strb	r2, [r3, #0]
    }

    assert(bsp_ts_initialized);
}
 80016ee:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1fb      	bne.n	80016ee <_ZN20STM32TouchController4initEv+0x26>
 80016f6:	4b05      	ldr	r3, [pc, #20]	; (800170c <_ZN20STM32TouchController4initEv+0x44>)
 80016f8:	212e      	movs	r1, #46	; 0x2e
 80016fa:	4a05      	ldr	r2, [pc, #20]	; (8001710 <_ZN20STM32TouchController4initEv+0x48>)
 80016fc:	4805      	ldr	r0, [pc, #20]	; (8001714 <_ZN20STM32TouchController4initEv+0x4c>)
 80016fe:	f021 fbcf 	bl	8022ea0 <__assert_func>
 8001702:	bf00      	nop
 8001704:	240003f0 	.word	0x240003f0
 8001708:	240003ec 	.word	0x240003ec
 800170c:	08024134 	.word	0x08024134
 8001710:	08024147 	.word	0x08024147
 8001714:	08024171 	.word	0x08024171

08001718 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 800171c:	460f      	mov	r7, r1
 800171e:	4616      	mov	r6, r2
    if (bsp_ts_initialized)
 8001720:	781d      	ldrb	r5, [r3, #0]
 8001722:	b915      	cbnz	r5, 800172a <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = TS_State.TouchX;
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
 8001724:	2500      	movs	r5, #0
}
 8001726:	4628      	mov	r0, r5
 8001728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BSP_TS_GetState(0, &TS_State);
 800172a:	4c07      	ldr	r4, [pc, #28]	; (8001748 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 800172c:	2000      	movs	r0, #0
 800172e:	4621      	mov	r1, r4
 8001730:	f009 fb64 	bl	800adfc <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 8001734:	6823      	ldr	r3, [r4, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0f4      	beq.n	8001724 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = TS_State.TouchX;
 800173a:	6863      	ldr	r3, [r4, #4]
 800173c:	603b      	str	r3, [r7, #0]
            y = TS_State.TouchY;
 800173e:	68a3      	ldr	r3, [r4, #8]
 8001740:	6033      	str	r3, [r6, #0]
            return true;
 8001742:	e7f0      	b.n	8001726 <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8001744:	240003ec 	.word	0x240003ec
 8001748:	240003e0 	.word	0x240003e0

0800174c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 800174c:	2803      	cmp	r0, #3
 800174e:	d825      	bhi.n	800179c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 8001750:	e8df f000 	tbb	[pc, r0]
 8001754:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 800175a:	2108      	movs	r1, #8
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	fab2 f282 	clz	r2, r2
 8001762:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001764:	480f      	ldr	r0, [pc, #60]	; (80017a4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001766:	f00a bc2d 	b.w	800bfc4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 800176a:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 800176c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	fab2 f282 	clz	r2, r2
 8001776:	0952      	lsrs	r2, r2, #5
 8001778:	e7f4      	b.n	8001764 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 800177c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	fab2 f282 	clz	r2, r2
 8001786:	0952      	lsrs	r2, r2, #5
 8001788:	e7ec      	b.n	8001764 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800178a:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 800178c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001790:	4805      	ldr	r0, [pc, #20]	; (80017a8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	fab2 f282 	clz	r2, r2
 8001798:	0952      	lsrs	r2, r2, #5
 800179a:	e7e4      	b.n	8001766 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	240003f4 	.word	0x240003f4
 80017a4:	58022400 	.word	0x58022400
 80017a8:	58021400 	.word	0x58021400

080017ac <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 80017ac:	2803      	cmp	r0, #3
 80017ae:	d825      	bhi.n	80017fc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 80017b0:	e8df f000 	tbb	[pc, r0]
 80017b4:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80017ba:	2108      	movs	r1, #8
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	3a00      	subs	r2, #0
 80017c0:	bf18      	it	ne
 80017c2:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 80017c4:	480f      	ldr	r0, [pc, #60]	; (8001804 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80017c6:	f00a bbfd 	b.w	800bfc4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 80017ca:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80017cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	3a00      	subs	r2, #0
 80017d4:	bf18      	it	ne
 80017d6:	2201      	movne	r2, #1
 80017d8:	e7f4      	b.n	80017c4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80017dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017e0:	689a      	ldr	r2, [r3, #8]
 80017e2:	3a00      	subs	r2, #0
 80017e4:	bf18      	it	ne
 80017e6:	2201      	movne	r2, #1
 80017e8:	e7ec      	b.n	80017c4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80017ea:	4b05      	ldr	r3, [pc, #20]	; (8001800 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80017ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017f0:	4805      	ldr	r0, [pc, #20]	; (8001808 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	3a00      	subs	r2, #0
 80017f6:	bf18      	it	ne
 80017f8:	2201      	movne	r2, #1
 80017fa:	e7e4      	b.n	80017c6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	240003f4 	.word	0x240003f4
 8001804:	58022400 	.word	0x58022400
 8001808:	58021400 	.word	0x58021400

0800180c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 800180c:	2803      	cmp	r0, #3
 800180e:	d811      	bhi.n	8001834 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 8001810:	e8df f000 	tbb	[pc, r0]
 8001814:	0c090602 	.word	0x0c090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001818:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 800181a:	4807      	ldr	r0, [pc, #28]	; (8001838 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800181c:	f00a bbd7 	b.w	800bfce <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001820:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001824:	e7f9      	b.n	800181a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001826:	f44f 7100 	mov.w	r1, #512	; 0x200
 800182a:	e7f6      	b.n	800181a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800182c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8001832:	e7f3      	b.n	800181c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	58022400 	.word	0x58022400
 800183c:	58021400 	.word	0x58021400

08001840 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001840:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001842:	2803      	cmp	r0, #3
 8001844:	d815      	bhi.n	8001872 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 8001846:	e8df f000 	tbb	[pc, r0]
 800184a:	0a02      	.short	0x0a02
 800184c:	100d      	.short	0x100d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 800184e:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001850:	4809      	ldr	r0, [pc, #36]	; (8001878 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001852:	f00a fbb1 	bl	800bfb8 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8001856:	1e43      	subs	r3, r0, #1
 8001858:	4258      	negs	r0, r3
 800185a:	4158      	adcs	r0, r3
 800185c:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 800185e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001862:	e7f5      	b.n	8001850 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001864:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001868:	e7f2      	b.n	8001850 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800186a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800186e:	4803      	ldr	r0, [pc, #12]	; (800187c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001870:	e7ef      	b.n	8001852 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8001872:	2000      	movs	r0, #0
 8001874:	e7ef      	b.n	8001856 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001876:	bf00      	nop
 8001878:	58022400 	.word	0x58022400
 800187c:	58021400 	.word	0x58021400

08001880 <_ZN8touchgfx4GPIO4initEv>:
{
 8001880:	b570      	push	{r4, r5, r6, lr}
 8001882:	4d08      	ldr	r5, [pc, #32]	; (80018a4 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001884:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001886:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001888:	b2e0      	uxtb	r0, r4
 800188a:	f7ff ffd9 	bl	8001840 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 800188e:	b118      	cbz	r0, 8001898 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001890:	682b      	ldr	r3, [r5, #0]
 8001892:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001894:	bf18      	it	ne
 8001896:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001898:	3401      	adds	r4, #1
 800189a:	3504      	adds	r5, #4
 800189c:	2c05      	cmp	r4, #5
 800189e:	d1f3      	bne.n	8001888 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 80018a0:	bd70      	pop	{r4, r5, r6, pc}
 80018a2:	bf00      	nop
 80018a4:	240003f4 	.word	0x240003f4

080018a8 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 80018a8:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 80018aa:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 80018ae:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 80018b2:	4770      	bx	lr

080018b4 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 80018b4:	2000      	movs	r0, #0
 80018b6:	4770      	bx	lr

080018b8 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80018b8:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80018ba:	3900      	subs	r1, #0
 80018bc:	4b02      	ldr	r3, [pc, #8]	; (80018c8 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 80018be:	bf18      	it	ne
 80018c0:	2101      	movne	r1, #1
 80018c2:	7019      	strb	r1, [r3, #0]
    }
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	2400eacf 	.word	0x2400eacf

080018cc <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 80018cc:	2000      	movs	r0, #0
 80018ce:	4770      	bx	lr

080018d0 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 80018d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80018d2:	b10b      	cbz	r3, 80018d8 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 80018d4:	4608      	mov	r0, r1
 80018d6:	4718      	bx	r3
        }
    }
 80018d8:	4770      	bx	lr

080018da <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 80018da:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80018de:	4770      	bx	lr

080018e0 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 80018e0:	6840      	ldr	r0, [r0, #4]
 80018e2:	6803      	ldr	r3, [r0, #0]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	4718      	bx	r3

080018e8 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 80018e8:	4b01      	ldr	r3, [pc, #4]	; (80018f0 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 80018ea:	6818      	ldr	r0, [r3, #0]
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	24000404 	.word	0x24000404

080018f4 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80018f4:	4770      	bx	lr

080018f6 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80018f6:	f000 be75 	b.w	80025e4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

080018fa <_ZN11TouchGFXHAL19configureInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 80018fa:	f000 be53 	b.w	80025a4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

080018fe <_ZN11TouchGFXHAL16enableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 80018fe:	f000 beb1 	b.w	8002664 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001902 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 8001902:	f000 bea3 	b.w	800264c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

08001906 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001906:	f000 be55 	b.w	80025b4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

0800190a <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 800190a:	b510      	push	{r4, lr}
 800190c:	4604      	mov	r4, r0
        swapFrameBuffers();
 800190e:	f010 fbcb 	bl	80120a8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001912:	6823      	ldr	r3, [r4, #0]
 8001914:	4620      	mov	r0, r4
 8001916:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
 800191a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 800191e:	4718      	bx	r3

08001920 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8001920:	f00f be28 	b.w	8011574 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001924 <_ZN11TouchGFXHALD0Ev>:
 8001924:	b510      	push	{r4, lr}
 8001926:	4604      	mov	r4, r0
 8001928:	217c      	movs	r1, #124	; 0x7c
 800192a:	f021 f9ac 	bl	8022c86 <_ZdlPvj>
 800192e:	4620      	mov	r0, r4
 8001930:	bd10      	pop	{r4, pc}
	...

08001934 <_ZN11TouchGFXHAL10beginFrameEv>:
    HAL::setFrameBufferStartAddresses(frameBuffer, doubleBuffer, animationStorage);
}

bool TouchGFXHAL::beginFrame()
{
    refreshRequested = false;
 8001934:	4b02      	ldr	r3, [pc, #8]	; (8001940 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 800193a:	f00f be57 	b.w	80115ec <_ZN8touchgfx3HAL10beginFrameEv>
 800193e:	bf00      	nop
 8001940:	2400000c 	.word	0x2400000c

08001944 <_ZN11TouchGFXHAL8endFrameEv>:
}

void TouchGFXHAL::endFrame()
{
 8001944:	b510      	push	{r4, lr}
 8001946:	4604      	mov	r4, r0
    HAL::endFrame();
 8001948:	f00f fe5c 	bl	8011604 <_ZN8touchgfx3HAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 800194c:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8001950:	b113      	cbz	r3, 8001958 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8001952:	4b02      	ldr	r3, [pc, #8]	; (800195c <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8001954:	2201      	movs	r2, #1
 8001956:	701a      	strb	r2, [r3, #0]
    }
}
 8001958:	bd10      	pop	{r4, pc}
 800195a:	bf00      	nop
 800195c:	2400000c 	.word	0x2400000c

08001960 <_ZN11TouchGFXHAL10initializeEv>:
{
 8001960:	b538      	push	{r3, r4, r5, lr}
 8001962:	4604      	mov	r4, r0
    GPIO::init();
 8001964:	f7ff ff8c 	bl	8001880 <_ZN8touchgfx4GPIO4initEv>
    mcuInstr.init();
 8001968:	4d07      	ldr	r5, [pc, #28]	; (8001988 <_ZN11TouchGFXHAL10initializeEv+0x28>)
    TouchGFXGeneratedHAL::initialize();
 800196a:	4620      	mov	r0, r4
 800196c:	f000 fe23 	bl	80025b6 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8001970:	2300      	movs	r3, #0
    mcuInstr.init();
 8001972:	4628      	mov	r0, r5
 8001974:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
 8001978:	f7ff fe44 	bl	8001604 <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        updateMCULoad = enabled;
 800197c:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 800197e:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001980:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
 8001984:	bd38      	pop	{r3, r4, r5, pc}
 8001986:	bf00      	nop
 8001988:	2400040c 	.word	0x2400040c

0800198c <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 800198c:	6803      	ldr	r3, [r0, #0]
{
 800198e:	4604      	mov	r4, r0
 8001990:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8001992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001996:	4798      	blx	r3
    enableInterrupts();
 8001998:	6823      	ldr	r3, [r4, #0]
 800199a:	4620      	mov	r0, r4
 800199c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800199e:	4798      	blx	r3
    OSWrappers::waitForVSync();
 80019a0:	f000 faa6 	bl	8001ef0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 80019a4:	6823      	ldr	r3, [r4, #0]
 80019a6:	4620      	mov	r0, r4
 80019a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019aa:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 80019ac:	2100      	movs	r1, #0
 80019ae:	2329      	movs	r3, #41	; 0x29
 80019b0:	2215      	movs	r2, #21
 80019b2:	4805      	ldr	r0, [pc, #20]	; (80019c8 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 80019b4:	9100      	str	r1, [sp, #0]
 80019b6:	f00a f86a 	bl	800ba8e <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 80019ba:	f000 fa99 	bl	8001ef0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 80019be:	6823      	ldr	r3, [r4, #0]
 80019c0:	4620      	mov	r0, r4
 80019c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c4:	4798      	blx	r3
    for (;;)
 80019c6:	e7f8      	b.n	80019ba <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 80019c8:	240001f8 	.word	0x240001f8

080019cc <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 80019cc:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 80019d0:	b11b      	cbz	r3, 80019da <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 80019d2:	6840      	ldr	r0, [r0, #4]
 80019d4:	6803      	ldr	r3, [r0, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4718      	bx	r3
    }
 80019da:	4618      	mov	r0, r3
 80019dc:	4770      	bx	lr
	...

080019e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80019e0:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 80019e4:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 80019e6:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 80019e8:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
            if (DISPLAY_ROTATION == rotate0)
 80019ec:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 80019ee:	428c      	cmp	r4, r1
 80019f0:	d009      	beq.n	8001a06 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 80019f2:	b93a      	cbnz	r2, 8001a04 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 80019f4:	490a      	ldr	r1, [pc, #40]	; (8001a20 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80019f6:	4a0b      	ldr	r2, [pc, #44]	; (8001a24 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 80019f8:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80019fa:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 80019fc:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 80019fe:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001a00:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001a02:	701a      	strb	r2, [r3, #0]
        }
    }
 8001a04:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001a06:	2a00      	cmp	r2, #0
 8001a08:	d0fc      	beq.n	8001a04 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001a0a:	4a06      	ldr	r2, [pc, #24]	; (8001a24 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001a0c:	4904      	ldr	r1, [pc, #16]	; (8001a20 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001a0e:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001a10:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001a12:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001a14:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001a16:	2200      	movs	r2, #0
 8001a18:	e7f3      	b.n	8001a02 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001a1a:	bf00      	nop
 8001a1c:	2400eac8 	.word	0x2400eac8
 8001a20:	2400eac6 	.word	0x2400eac6
 8001a24:	2400eac4 	.word	0x2400eac4

08001a28 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001a28:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	428b      	cmp	r3, r1
 8001a30:	d803      	bhi.n	8001a3a <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001a32:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d905      	bls.n	8001a46 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001a3a:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001a3c:	219e      	movs	r1, #158	; 0x9e
 8001a3e:	4a07      	ldr	r2, [pc, #28]	; (8001a5c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001a40:	4807      	ldr	r0, [pc, #28]	; (8001a60 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001a42:	f021 fa2d 	bl	8022ea0 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001a46:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001a48:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001a4a:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001a4c:	801a      	strh	r2, [r3, #0]
    }
 8001a4e:	bd08      	pop	{r3, pc}
 8001a50:	2400eac4 	.word	0x2400eac4
 8001a54:	2400eac6 	.word	0x2400eac6
 8001a58:	080241d8 	.word	0x080241d8
 8001a5c:	0802423b 	.word	0x0802423b
 8001a60:	0802427e 	.word	0x0802427e
 8001a64:	2400eaca 	.word	0x2400eaca
 8001a68:	2400eacc 	.word	0x2400eacc

08001a6c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8001a6c:	b570      	push	{r4, r5, r6, lr}
 8001a6e:	460d      	mov	r5, r1
 8001a70:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8001a72:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8001a74:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001a76:	b935      	cbnz	r5, 8001a86 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8001a78:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 8001a7a:	f240 21d2 	movw	r1, #722	; 0x2d2
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8001a80:	480a      	ldr	r0, [pc, #40]	; (8001aac <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8001a82:	f021 fa0d 	bl	8022ea0 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001a86:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001a8a:	3a00      	subs	r2, #0
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 8001a8e:	bf18      	it	ne
 8001a90:	2201      	movne	r2, #1
 8001a92:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001a94:	6803      	ldr	r3, [r0, #0]
}
 8001a96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a9e:	4718      	bx	r3
 8001aa0:	24000404 	.word	0x24000404
 8001aa4:	080242d1 	.word	0x080242d1
 8001aa8:	08024309 	.word	0x08024309
 8001aac:	0802427e 	.word	0x0802427e
 8001ab0:	2400eace 	.word	0x2400eace

08001ab4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lastRenderMethod(HARDWARE)
 8001ab4:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8001ab8:	60c3      	str	r3, [r0, #12]
 8001aba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
 8001ac4:	4a1d      	ldr	r2, [pc, #116]	; (8001b3c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x88>)
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8001ac6:	8503      	strh	r3, [r0, #40]	; 0x28
 8001ac8:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001acc:	62c3      	str	r3, [r0, #44]	; 0x2c
 8001ace:	8603      	strh	r3, [r0, #48]	; 0x30
 8001ad0:	6603      	str	r3, [r0, #96]	; 0x60
 8001ad2:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
 8001ad6:	6703      	str	r3, [r0, #112]	; 0x70
 8001ad8:	e9c0 2319 	strd	r2, r3, [r0, #100]	; 0x64
 8001adc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ae0:	6742      	str	r2, [r0, #116]	; 0x74
 8001ae2:	2201      	movs	r2, #1
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001ae4:	b570      	push	{r4, r5, r6, lr}
 8001ae6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001aea:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8001aee:	f8bd 6014 	ldrh.w	r6, [sp, #20]
              inProgress(false)
 8001af2:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8001af6:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8001afa:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
 8001afe:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8001b02:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 8001b06:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
 8001b0a:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001b0e:	42b5      	cmp	r5, r6
        instance = this;
 8001b10:	4a0b      	ldr	r2, [pc, #44]	; (8001b40 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
 8001b12:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001b14:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
 8001b16:	8015      	strh	r5, [r2, #0]
 8001b18:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 8001b1a:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001b1c:	bf28      	it	cs
 8001b1e:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001b20:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001b22:	bf38      	it	cc
 8001b24:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001b26:	8016      	strh	r6, [r2, #0]
 8001b28:	4a09      	ldr	r2, [pc, #36]	; (8001b50 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001b2a:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001b2e:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8001b30:	4a08      	ldr	r2, [pc, #32]	; (8001b54 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
 8001b32:	7013      	strb	r3, [r2, #0]
                           height)
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 8001b36:	6003      	str	r3, [r0, #0]
}
 8001b38:	bd70      	pop	{r4, r5, r6, pc}
 8001b3a:	bf00      	nop
 8001b3c:	01000001 	.word	0x01000001
 8001b40:	2400ead0 	.word	0x2400ead0
 8001b44:	2400eac4 	.word	0x2400eac4
 8001b48:	2400eaca 	.word	0x2400eaca
 8001b4c:	2400eac6 	.word	0x2400eac6
 8001b50:	2400eacc 	.word	0x2400eacc
 8001b54:	2400eac8 	.word	0x2400eac8
 8001b58:	08024360 	.word	0x08024360

08001b5c <DSI_IO_Write>:
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 8001b5c:	2b01      	cmp	r3, #1
    {
 8001b5e:	b513      	push	{r0, r1, r4, lr}
        if (Size <= 1U)
 8001b60:	d80e      	bhi.n	8001b80 <DSI_IO_Write+0x24>
        {
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8001b62:	5cd3      	ldrb	r3, [r2, r3]
 8001b64:	2215      	movs	r2, #21
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4601      	mov	r1, r0
 8001b6c:	4808      	ldr	r0, [pc, #32]	; (8001b90 <DSI_IO_Write+0x34>)
 8001b6e:	f009 ff8e 	bl	800ba8e <HAL_DSI_ShortWrite>
 8001b72:	b118      	cbz	r0, 8001b7c <DSI_IO_Write+0x20>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8001b74:	f06f 0007 	mvn.w	r0, #7
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 8001b78:	b002      	add	sp, #8
 8001b7a:	bd10      	pop	{r4, pc}
        int32_t ret = BSP_ERROR_NONE;
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	e7fb      	b.n	8001b78 <DSI_IO_Write+0x1c>
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8001b80:	e9cd 1200 	strd	r1, r2, [sp]
 8001b84:	4601      	mov	r1, r0
 8001b86:	2239      	movs	r2, #57	; 0x39
 8001b88:	4801      	ldr	r0, [pc, #4]	; (8001b90 <DSI_IO_Write+0x34>)
 8001b8a:	f009 ff91 	bl	800bab0 <HAL_DSI_LongWrite>
 8001b8e:	e7f0      	b.n	8001b72 <DSI_IO_Write+0x16>
 8001b90:	240001f8 	.word	0x240001f8

08001b94 <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 8001b94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8001b96:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8001b9a:	2106      	movs	r1, #6
 8001b9c:	9100      	str	r1, [sp, #0]
 8001b9e:	4601      	mov	r1, r0
 8001ba0:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <DSI_IO_Read+0x24>)
 8001ba2:	f009 ffe6 	bl	800bb72 <HAL_DSI_Read>
        {
            ret = BSP_ERROR_BUS_FAILURE;
 8001ba6:	2800      	cmp	r0, #0
        }

        return ret;
    }
 8001ba8:	bf14      	ite	ne
 8001baa:	f06f 0007 	mvnne.w	r0, #7
 8001bae:	2000      	moveq	r0, #0
 8001bb0:	b005      	add	sp, #20
 8001bb2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bb6:	bf00      	nop
 8001bb8:	240001f8 	.word	0x240001f8

08001bbc <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 8001bbc:	b530      	push	{r4, r5, lr}
 8001bbe:	b085      	sub	sp, #20
        uint16_t scanline = 533;

        ScanLineParams[0] = scanline >> 8;
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001bc0:	4c0c      	ldr	r4, [pc, #48]	; (8001bf4 <LCD_ReqTear+0x38>)
        ScanLineParams[0] = scanline >> 8;
 8001bc2:	2302      	movs	r3, #2
        ScanLineParams[1] = scanline & 0x00FF;
 8001bc4:	2515      	movs	r5, #21
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001bc6:	aa03      	add	r2, sp, #12
 8001bc8:	2100      	movs	r1, #0
 8001bca:	4620      	mov	r0, r4
        ScanLineParams[0] = scanline >> 8;
 8001bcc:	f88d 300c 	strb.w	r3, [sp, #12]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001bd0:	9201      	str	r2, [sp, #4]
 8001bd2:	2244      	movs	r2, #68	; 0x44
        ScanLineParams[1] = scanline & 0x00FF;
 8001bd4:	f88d 500d 	strb.w	r5, [sp, #13]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001bd8:	9200      	str	r2, [sp, #0]
 8001bda:	2239      	movs	r2, #57	; 0x39
 8001bdc:	f009 ff68 	bl	800bab0 <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 8001be0:	2100      	movs	r1, #0
 8001be2:	2335      	movs	r3, #53	; 0x35
 8001be4:	462a      	mov	r2, r5
 8001be6:	4620      	mov	r0, r4
 8001be8:	9100      	str	r1, [sp, #0]
 8001bea:	f009 ff50 	bl	800ba8e <HAL_DSI_ShortWrite>
    }
 8001bee:	b005      	add	sp, #20
 8001bf0:	bd30      	pop	{r4, r5, pc}
 8001bf2:	bf00      	nop
 8001bf4:	240001f8 	.word	0x240001f8

08001bf8 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8001bf8:	b508      	push	{r3, lr}
    LCD_ReqTear();
 8001bfa:	f7ff ffdf 	bl	8001bbc <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 8001c00:	2202      	movs	r2, #2
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 8001c0e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001c12:	f042 0201 	orr.w	r2, r2, #1
 8001c16:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 8001c1a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001c1e:	f042 0202 	orr.w	r2, r2, #2
 8001c22:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 8001c26:	2203      	movs	r2, #3
 8001c28:	4b02      	ldr	r3, [pc, #8]	; (8001c34 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 8001c2a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001c2c:	bd08      	pop	{r3, pc}
 8001c2e:	bf00      	nop
 8001c30:	240001f8 	.word	0x240001f8
 8001c34:	50001000 	.word	0x50001000

08001c38 <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 8001c38:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <LCD_ReqEnable+0x20>)
    {
 8001c3a:	b507      	push	{r0, r1, r2, lr}
        if (!firstRefreshRequested)
 8001c3c:	7819      	ldrb	r1, [r3, #0]
 8001c3e:	b939      	cbnz	r1, 8001c50 <LCD_ReqEnable+0x18>
        {
            firstRefreshRequested = true;
 8001c40:	2201      	movs	r2, #1

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 8001c42:	4806      	ldr	r0, [pc, #24]	; (8001c5c <LCD_ReqEnable+0x24>)
            firstRefreshRequested = true;
 8001c44:	701a      	strb	r2, [r3, #0]
            HAL_DSI_ShortWrite(&(hdsi),
 8001c46:	2329      	movs	r3, #41	; 0x29
 8001c48:	2215      	movs	r2, #21
 8001c4a:	9100      	str	r1, [sp, #0]
 8001c4c:	f009 ff1f 	bl	800ba8e <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 8001c50:	b003      	add	sp, #12
 8001c52:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c56:	bf00      	nop
 8001c58:	2400041c 	.word	0x2400041c
 8001c5c:	240001f8 	.word	0x240001f8

08001c60 <LCD_SetUpdateRegionLeft>:
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <LCD_SetUpdateRegionLeft+0x1c>)
    {
 8001c62:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001c64:	9301      	str	r3, [sp, #4]
 8001c66:	232a      	movs	r3, #42	; 0x2a
 8001c68:	2239      	movs	r2, #57	; 0x39
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	2304      	movs	r3, #4
 8001c70:	4803      	ldr	r0, [pc, #12]	; (8001c80 <LCD_SetUpdateRegionLeft+0x20>)
 8001c72:	f009 ff1d 	bl	800bab0 <HAL_DSI_LongWrite>
    }
 8001c76:	b003      	add	sp, #12
 8001c78:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c7c:	24000004 	.word	0x24000004
 8001c80:	240001f8 	.word	0x240001f8

08001c84 <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <LCD_SetUpdateRegionRight+0x1c>)
    {
 8001c86:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001c88:	9301      	str	r3, [sp, #4]
 8001c8a:	232a      	movs	r3, #42	; 0x2a
 8001c8c:	2239      	movs	r2, #57	; 0x39
 8001c8e:	2100      	movs	r1, #0
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	2304      	movs	r3, #4
 8001c94:	4803      	ldr	r0, [pc, #12]	; (8001ca4 <LCD_SetUpdateRegionRight+0x20>)
 8001c96:	f009 ff0b 	bl	800bab0 <HAL_DSI_LongWrite>
    }
 8001c9a:	b003      	add	sp, #12
 8001c9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ca0:	24000008 	.word	0x24000008
 8001ca4:	240001f8 	.word	0x240001f8

08001ca8 <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 8001ca8:	b538      	push	{r3, r4, r5, lr}
        return instance;
 8001caa:	4d14      	ldr	r5, [pc, #80]	; (8001cfc <HAL_DSI_TearingEffectCallback+0x54>)
 8001cac:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f7ff fd4c 	bl	800174c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8001cb4:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 8001cb6:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8001cba:	3301      	adds	r3, #1
 8001cbc:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 8001cc0:	f000 f90a 	bl	8001ed8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 8001cc4:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <HAL_DSI_TearingEffectCallback+0x58>)
        lockDMAToPorch = enableLock;
 8001cc6:	682a      	ldr	r2, [r5, #0]
 8001cc8:	7819      	ldrb	r1, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	f882 104a 	strb.w	r1, [r2, #74]	; 0x4a
 8001cd0:	b173      	cbz	r3, 8001cf0 <HAL_DSI_TearingEffectCallback+0x48>
 8001cd2:	4d0c      	ldr	r5, [pc, #48]	; (8001d04 <HAL_DSI_TearingEffectCallback+0x5c>)
 8001cd4:	782b      	ldrb	r3, [r5, #0]
 8001cd6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001cda:	b94b      	cbnz	r3, 8001cf0 <HAL_DSI_TearingEffectCallback+0x48>
        {

            // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
            updateRegion = 0;
 8001cdc:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <HAL_DSI_TearingEffectCallback+0x60>)
 8001cde:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 8001ce0:	f7ff ffbe 	bl	8001c60 <LCD_SetUpdateRegionLeft>

            // Transfer a quarter screen of pixel data.
            HAL_DSI_Refresh(hdsi);
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	f009 fec2 	bl	800ba6e <HAL_DSI_Refresh>
            displayRefreshing = true;
 8001cea:	2301      	movs	r3, #1
 8001cec:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8001cee:	bd38      	pop	{r3, r4, r5, pc}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001cf0:	2000      	movs	r0, #0
    }
 8001cf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001cf6:	f7ff bd59 	b.w	80017ac <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8001cfa:	bf00      	nop
 8001cfc:	2400ead0 	.word	0x2400ead0
 8001d00:	2400000c 	.word	0x2400000c
 8001d04:	2400041d 	.word	0x2400041d
 8001d08:	24000408 	.word	0x24000408

08001d0c <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
 8001d0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (displayRefreshing)
 8001d10:	4e3f      	ldr	r6, [pc, #252]	; (8001e10 <HAL_DSI_EndOfRefreshCallback+0x104>)
    {
 8001d12:	b085      	sub	sp, #20
 8001d14:	4604      	mov	r4, r0
        if (displayRefreshing)
 8001d16:	7833      	ldrb	r3, [r6, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d076      	beq.n	8001e0a <HAL_DSI_EndOfRefreshCallback+0xfe>
        {
            if (updateRegion == 0)
 8001d1c:	4d3d      	ldr	r5, [pc, #244]	; (8001e14 <HAL_DSI_EndOfRefreshCallback+0x108>)
 8001d1e:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8001e24 <HAL_DSI_EndOfRefreshCallback+0x118>
 8001d22:	f8d5 9000 	ldr.w	r9, [r5]
 8001d26:	4f3c      	ldr	r7, [pc, #240]	; (8001e18 <HAL_DSI_EndOfRefreshCallback+0x10c>)
 8001d28:	f1b9 0f00 	cmp.w	r9, #0
 8001d2c:	d139      	bne.n	8001da2 <HAL_DSI_EndOfRefreshCallback+0x96>
            {
                HAL_Delay(1);
 8001d2e:	2001      	movs	r0, #1
 8001d30:	f009 f974 	bl	800b01c <HAL_Delay>

                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001d34:	6823      	ldr	r3, [r4, #0]
 8001d36:	f8cd 9000 	str.w	r9, [sp]
 8001d3a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + (HAL::FRAME_BUFFER_WIDTH / 2) * 3;
 8001d3e:	f8d8 1000 	ldr.w	r1, [r8]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001d42:	f022 0208 	bic.w	r2, r2, #8
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + (HAL::FRAME_BUFFER_WIDTH / 2) * 3;
 8001d46:	6838      	ldr	r0, [r7, #0]
 8001d48:	f101 0684 	add.w	r6, r1, #132	; 0x84
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001d4c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001d50:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001d54:	f002 0208 	and.w	r2, r2, #8
 8001d58:	9200      	str	r2, [sp, #0]
 8001d5a:	9a00      	ldr	r2, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + (HAL::FRAME_BUFFER_WIDTH / 2) * 3;
 8001d5c:	4a2f      	ldr	r2, [pc, #188]	; (8001e1c <HAL_DSI_EndOfRefreshCallback+0x110>)
 8001d5e:	8812      	ldrh	r2, [r2, #0]
 8001d60:	0852      	lsrs	r2, r2, #1
 8001d62:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001d66:	4402      	add	r2, r0
 8001d68:	62b2      	str	r2, [r6, #40]	; 0x28
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001d6a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001d6c:	f042 0201 	orr.w	r2, r2, #1
 8001d70:	624a      	str	r2, [r1, #36]	; 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001d72:	f8cd 9004 	str.w	r9, [sp, #4]
 8001d76:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001d7a:	f042 0208 	orr.w	r2, r2, #8
 8001d7e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001d82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001d86:	f003 0308 	and.w	r3, r3, #8
 8001d8a:	9301      	str	r3, [sp, #4]
 8001d8c:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 400-799
 8001d8e:	f7ff ff79 	bl	8001c84 <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 8001d92:	2301      	movs	r3, #1
                HAL_DSI_Refresh(hdsi);
 8001d94:	4620      	mov	r0, r4
                updateRegion = 1;
 8001d96:	602b      	str	r3, [r5, #0]
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 8001d98:	b005      	add	sp, #20
 8001d9a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                HAL_DSI_Refresh(hdsi);
 8001d9e:	f009 be66 	b.w	800ba6e <HAL_DSI_Refresh>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001da2:	6803      	ldr	r3, [r0, #0]
 8001da4:	2500      	movs	r5, #0
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001da6:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001da8:	9502      	str	r5, [sp, #8]
 8001daa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001dae:	f022 0208 	bic.w	r2, r2, #8
 8001db2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001db6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001dba:	f002 0208 	and.w	r2, r2, #8
 8001dbe:	9202      	str	r2, [sp, #8]
 8001dc0:	9a02      	ldr	r2, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001dc2:	f8d8 2000 	ldr.w	r2, [r8]
 8001dc6:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001dca:	4628      	mov	r0, r5
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001dcc:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001dce:	f041 0101 	orr.w	r1, r1, #1
 8001dd2:	6251      	str	r1, [r2, #36]	; 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001dd4:	9503      	str	r5, [sp, #12]
 8001dd6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001dda:	f042 0208 	orr.w	r2, r2, #8
 8001dde:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001de2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	9303      	str	r3, [sp, #12]
 8001dec:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001dee:	f7ff fcdd 	bl	80017ac <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 8001df2:	f7ff ff21 	bl	8001c38 <LCD_ReqEnable>
        return instance;
 8001df6:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <HAL_DSI_EndOfRefreshCallback+0x114>)
                displayRefreshing = false;
 8001df8:	7035      	strb	r5, [r6, #0]
 8001dfa:	6818      	ldr	r0, [r3, #0]
                if (HAL::getInstance())
 8001dfc:	b128      	cbz	r0, 8001e0a <HAL_DSI_EndOfRefreshCallback+0xfe>
        allowDMATransfers();
 8001dfe:	6803      	ldr	r3, [r0, #0]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
    }
 8001e02:	b005      	add	sp, #20
 8001e04:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e08:	4718      	bx	r3
 8001e0a:	b005      	add	sp, #20
 8001e0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e10:	2400041d 	.word	0x2400041d
 8001e14:	24000408 	.word	0x24000408
 8001e18:	24000404 	.word	0x24000404
 8001e1c:	2400eaca 	.word	0x2400eaca
 8001e20:	2400ead0 	.word	0x2400ead0
 8001e24:	24000214 	.word	0x24000214

08001e28 <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 8001e28:	4601      	mov	r1, r0
 8001e2a:	b508      	push	{r3, lr}
        return instance;
 8001e2c:	4b03      	ldr	r3, [pc, #12]	; (8001e3c <IdleTaskHook+0x14>)
 8001e2e:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8001e30:	b101      	cbz	r1, 8001e34 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8001e32:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8001e34:	f010 f952 	bl	80120dc <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8001e38:	2001      	movs	r0, #1
 8001e3a:	bd08      	pop	{r3, pc}
 8001e3c:	2400ead0 	.word	0x2400ead0

08001e40 <_GLOBAL__sub_I_displayRefreshing>:
          cc_in(0)
 8001e40:	4b03      	ldr	r3, [pc, #12]	; (8001e50 <_GLOBAL__sub_I_displayRefreshing+0x10>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	4a02      	ldr	r2, [pc, #8]	; (8001e54 <_GLOBAL__sub_I_displayRefreshing+0x14>)
 8001e4a:	601a      	str	r2, [r3, #0]

}
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	2400040c 	.word	0x2400040c
 8001e54:	08024114 	.word	0x08024114

08001e58 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001e58:	2101      	movs	r1, #1
 8001e5a:	2200      	movs	r2, #0
{
 8001e5c:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001e5e:	4608      	mov	r0, r1
 8001e60:	f00d f857 	bl	800ef12 <osSemaphoreNew>
 8001e64:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001e66:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001e68:	b928      	cbnz	r0, 8001e76 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001e6c:	2128      	movs	r1, #40	; 0x28
 8001e6e:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001e70:	480a      	ldr	r0, [pc, #40]	; (8001e9c <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001e72:	f021 f815 	bl	8022ea0 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2104      	movs	r1, #4
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	f00d f8e6 	bl	800f04c <osMessageQueueNew>
 8001e80:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001e82:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001e84:	b918      	cbnz	r0, 8001e8e <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001e86:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001e88:	212c      	movs	r1, #44	; 0x2c
 8001e8a:	4a03      	ldr	r2, [pc, #12]	; (8001e98 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001e8c:	e7f0      	b.n	8001e70 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001e8e:	bd08      	pop	{r3, pc}
 8001e90:	24000424 	.word	0x24000424
 8001e94:	08024430 	.word	0x08024430
 8001e98:	08024479 	.word	0x08024479
 8001e9c:	080244a8 	.word	0x080244a8
 8001ea0:	24000420 	.word	0x24000420
 8001ea4:	080244f7 	.word	0x080244f7

08001ea8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001ea8:	4b02      	ldr	r3, [pc, #8]	; (8001eb4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001eaa:	f04f 31ff 	mov.w	r1, #4294967295
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	f00d b879 	b.w	800efa6 <osSemaphoreAcquire>
 8001eb4:	24000424 	.word	0x24000424

08001eb8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001eb8:	4b01      	ldr	r3, [pc, #4]	; (8001ec0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001eba:	6818      	ldr	r0, [r3, #0]
 8001ebc:	f00d b89e 	b.w	800effc <osSemaphoreRelease>
 8001ec0:	24000424 	.word	0x24000424

08001ec4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001ec4:	4b02      	ldr	r3, [pc, #8]	; (8001ed0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	6818      	ldr	r0, [r3, #0]
 8001eca:	f00d b86c 	b.w	800efa6 <osSemaphoreAcquire>
 8001ece:	bf00      	nop
 8001ed0:	24000424 	.word	0x24000424

08001ed4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8001ed4:	f7ff bff0 	b.w	8001eb8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001ed8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001ed8:	2300      	movs	r3, #0
 8001eda:	4803      	ldr	r0, [pc, #12]	; (8001ee8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001edc:	4903      	ldr	r1, [pc, #12]	; (8001eec <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001ede:	461a      	mov	r2, r3
 8001ee0:	6800      	ldr	r0, [r0, #0]
 8001ee2:	f00d b8ee 	b.w	800f0c2 <osMessageQueuePut>
 8001ee6:	bf00      	nop
 8001ee8:	24000420 	.word	0x24000420
 8001eec:	24000010 	.word	0x24000010

08001ef0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001ef0:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	4c07      	ldr	r4, [pc, #28]	; (8001f14 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001ef6:	a901      	add	r1, sp, #4
 8001ef8:	461a      	mov	r2, r3
 8001efa:	6820      	ldr	r0, [r4, #0]
 8001efc:	f00d f911 	bl	800f122 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001f00:	f04f 33ff 	mov.w	r3, #4294967295
 8001f04:	2200      	movs	r2, #0
 8001f06:	a901      	add	r1, sp, #4
 8001f08:	6820      	ldr	r0, [r4, #0]
 8001f0a:	f00d f90a 	bl	800f122 <osMessageQueueGet>
}
 8001f0e:	b002      	add	sp, #8
 8001f10:	bd10      	pop	{r4, pc}
 8001f12:	bf00      	nop
 8001f14:	24000420 	.word	0x24000420

08001f18 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001f18:	6803      	ldr	r3, [r0, #0]
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1c:	4718      	bx	r3

08001f1e <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001f1e:	2001      	movs	r0, #1
 8001f20:	4770      	bx	lr

08001f22 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001f22:	6803      	ldr	r3, [r0, #0]
 8001f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f26:	4718      	bx	r3

08001f28 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001f28:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8001f2c:	4770      	bx	lr
	...

08001f30 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8001f30:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f32:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f36:	6003      	str	r3, [r0, #0]
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <_ZN8STM32DMAD1Ev+0x1c>)
 8001f3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001f3e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f42:	f3bf 8f6f 	isb	sy
}
 8001f46:	4770      	bx	lr
 8001f48:	08024698 	.word	0x08024698
 8001f4c:	e000e100 	.word	0xe000e100

08001f50 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8001f50:	b510      	push	{r4, lr}
 8001f52:	4604      	mov	r4, r0
}
 8001f54:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8001f58:	f7ff ffea 	bl	8001f30 <_ZN8STM32DMAD1Ev>
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	f020 fe92 	bl	8022c86 <_ZdlPvj>
 8001f62:	4620      	mov	r0, r4
 8001f64:	bd10      	pop	{r4, pc}
	...

08001f68 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f68:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <_ZN8STM32DMA10initializeEv+0x40>)
{
 8001f6a:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f6c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001f70:	f042 0210 	orr.w	r2, r2, #16
 8001f74:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001f78:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001f7c:	f002 0210 	and.w	r2, r2, #16
 8001f80:	9201      	str	r2, [sp, #4]
 8001f82:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8001f84:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001f86:	f042 0210 	orr.w	r2, r2, #16
 8001f8a:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8001f8c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001f8e:	f022 0210 	bic.w	r2, r2, #16
 8001f92:	67da      	str	r2, [r3, #124]	; 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <_ZN8STM32DMA10initializeEv+0x44>)
 8001f96:	4a06      	ldr	r2, [pc, #24]	; (8001fb0 <_ZN8STM32DMA10initializeEv+0x48>)
 8001f98:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f9a:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <_ZN8STM32DMA10initializeEv+0x4c>)
 8001f9c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fa0:	609a      	str	r2, [r3, #8]
}
 8001fa2:	b002      	add	sp, #8
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	58024400 	.word	0x58024400
 8001fac:	24000190 	.word	0x24000190
 8001fb0:	08001fb9 	.word	0x08001fb9
 8001fb4:	e000e100 	.word	0xe000e100

08001fb8 <DMA2D_XferCpltCallback>:
 8001fb8:	4b02      	ldr	r3, [pc, #8]	; (8001fc4 <DMA2D_XferCpltCallback+0xc>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8001fbe:	6803      	ldr	r3, [r0, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	4718      	bx	r3
 8001fc4:	2400ead0 	.word	0x2400ead0

08001fc8 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8001fc8:	b570      	push	{r4, r5, r6, lr}
 8001fca:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8001fcc:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <_ZN8STM32DMAC1Ev+0x30>)
 8001fce:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8001fd0:	2600      	movs	r6, #0
 8001fd2:	4625      	mov	r5, r4
 8001fd4:	2260      	movs	r2, #96	; 0x60
 8001fd6:	6060      	str	r0, [r4, #4]
 8001fd8:	7226      	strb	r6, [r4, #8]
 8001fda:	7266      	strb	r6, [r4, #9]
 8001fdc:	f845 3b20 	str.w	r3, [r5], #32
 8001fe0:	4629      	mov	r1, r5
 8001fe2:	f010 f9cf 	bl	8012384 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8001fe6:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
        : color(0)
 8001fea:	60ee      	str	r6, [r5, #12]
 8001fec:	3524      	adds	r5, #36	; 0x24
 8001fee:	42ab      	cmp	r3, r5
 8001ff0:	d1fb      	bne.n	8001fea <_ZN8STM32DMAC1Ev+0x22>
}
 8001ff2:	4620      	mov	r0, r4
 8001ff4:	bd70      	pop	{r4, r5, r6, pc}
 8001ff6:	bf00      	nop
 8001ff8:	08024698 	.word	0x08024698

08001ffc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8001ffc:	b508      	push	{r3, lr}
    switch (format)
 8001ffe:	290b      	cmp	r1, #11
 8002000:	d80b      	bhi.n	800201a <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 8002002:	e8df f001 	tbb	[pc, r1]
 8002006:	0612      	.short	0x0612
 8002008:	0a0a0a10 	.word	0x0a0a0a10
 800200c:	0808080a 	.word	0x0808080a
 8002010:	0808      	.short	0x0808
 8002012:	2001      	movs	r0, #1
}
 8002014:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002016:	2005      	movs	r0, #5
        break;
 8002018:	e7fc      	b.n	8002014 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 800201a:	4b05      	ldr	r3, [pc, #20]	; (8002030 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 800201c:	2166      	movs	r1, #102	; 0x66
 800201e:	4a05      	ldr	r2, [pc, #20]	; (8002034 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8002020:	4805      	ldr	r0, [pc, #20]	; (8002038 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 8002022:	f020 ff3d 	bl	8022ea0 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002026:	2000      	movs	r0, #0
 8002028:	e7f4      	b.n	8002014 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800202a:	2002      	movs	r0, #2
    return dma2dColorMode;
 800202c:	e7f2      	b.n	8002014 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 800202e:	bf00      	nop
 8002030:	08024539 	.word	0x08024539
 8002034:	08024554 	.word	0x08024554
 8002038:	0802459e 	.word	0x0802459e

0800203c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 800203c:	b508      	push	{r3, lr}
    switch (format)
 800203e:	290a      	cmp	r1, #10
 8002040:	d809      	bhi.n	8002056 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 8002042:	e8df f001 	tbb	[pc, r1]
 8002046:	0610      	.short	0x0610
 8002048:	0808080e 	.word	0x0808080e
 800204c:	06060608 	.word	0x06060608
 8002050:	06          	.byte	0x06
 8002051:	00          	.byte	0x00
 8002052:	2001      	movs	r0, #1
}
 8002054:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8002056:	4b05      	ldr	r3, [pc, #20]	; (800206c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 8002058:	2187      	movs	r1, #135	; 0x87
 800205a:	4a05      	ldr	r2, [pc, #20]	; (8002070 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 800205c:	4805      	ldr	r0, [pc, #20]	; (8002074 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 800205e:	f020 ff1f 	bl	8022ea0 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002062:	2000      	movs	r0, #0
 8002064:	e7f6      	b.n	8002054 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002066:	2002      	movs	r0, #2
    return dma2dColorMode;
 8002068:	e7f4      	b.n	8002054 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 800206a:	bf00      	nop
 800206c:	08024539 	.word	0x08024539
 8002070:	080245eb 	.word	0x080245eb
 8002074:	0802459e 	.word	0x0802459e

08002078 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8002078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800207c:	7f4f      	ldrb	r7, [r1, #29]
{
 800207e:	460c      	mov	r4, r1
 8002080:	4681      	mov	r9, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002082:	4639      	mov	r1, r7
 8002084:	f7ff ffba 	bl	8001ffc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002088:	f894 801e 	ldrb.w	r8, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800208c:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800208e:	4648      	mov	r0, r9
 8002090:	4641      	mov	r1, r8
 8002092:	f7ff ffb3 	bl	8001ffc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002096:	4641      	mov	r1, r8
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002098:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800209a:	4648      	mov	r0, r9
 800209c:	f7ff ffce 	bl	800203c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80020a0:	8aa1      	ldrh	r1, [r4, #20]
 80020a2:	8b62      	ldrh	r2, [r4, #26]
 80020a4:	4b42      	ldr	r3, [pc, #264]	; (80021b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 80020a6:	1a52      	subs	r2, r2, r1
 80020a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80020aa:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80020ac:	8b22      	ldrh	r2, [r4, #24]
 80020ae:	1a52      	subs	r2, r2, r1
 80020b0:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80020b2:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80020b4:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80020b6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80020ba:	6920      	ldr	r0, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80020bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80020be:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80020c0:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80020c2:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 80020c4:	6821      	ldr	r1, [r4, #0]
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020c6:	f894 c01c 	ldrb.w	ip, [r4, #28]
    switch (blitOp.operation)
 80020ca:	2980      	cmp	r1, #128	; 0x80
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020cc:	ea4f 620c 	mov.w	r2, ip, lsl #24
    switch (blitOp.operation)
 80020d0:	d026      	beq.n	8002120 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 80020d2:	d810      	bhi.n	80020f6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7e>
 80020d4:	2920      	cmp	r1, #32
 80020d6:	ea45 0402 	orr.w	r4, r5, r2
 80020da:	d062      	beq.n	80021a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 80020dc:	2940      	cmp	r1, #64	; 0x40
 80020de:	d060      	beq.n	80021a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 80020e0:	2904      	cmp	r1, #4
 80020e2:	d05e      	beq.n	80021a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020e4:	432a      	orrs	r2, r5
 80020e6:	4b32      	ldr	r3, [pc, #200]	; (80021b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 80020e8:	4547      	cmp	r7, r8
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020ea:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80020ee:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 80020f0:	d05b      	beq.n	80021aa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80020f2:	4a30      	ldr	r2, [pc, #192]	; (80021b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 80020f4:	e040      	b.n	8002178 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 80020f6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80020fa:	d007      	beq.n	800210c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
 80020fc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002100:	d1f0      	bne.n	80020e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002102:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002106:	f042 0209 	orr.w	r2, r2, #9
 800210a:	e003      	b.n	8002114 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800210c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002110:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002114:	61da      	str	r2, [r3, #28]
        return color;
 8002116:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002118:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800211a:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800211c:	6158      	str	r0, [r3, #20]
 800211e:	e02a      	b.n	8002176 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002120:	432a      	orrs	r2, r5
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002122:	68a4      	ldr	r4, [r4, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002124:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002128:	61da      	str	r2, [r3, #28]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800212a:	1d22      	adds	r2, r4, #4
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800212c:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800212e:	6158      	str	r0, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002130:	62da      	str	r2, [r3, #44]	; 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8002132:	7822      	ldrb	r2, [r4, #0]
 8002134:	b142      	cbz	r2, 8002148 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002136:	2a01      	cmp	r2, #1
 8002138:	d021      	beq.n	800217e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 800213a:	4b1f      	ldr	r3, [pc, #124]	; (80021b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 800213c:	f240 1101 	movw	r1, #257	; 0x101
 8002140:	4a1e      	ldr	r2, [pc, #120]	; (80021bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002142:	481f      	ldr	r0, [pc, #124]	; (80021c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8002144:	f020 feac 	bl	8022ea0 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002148:	69da      	ldr	r2, [r3, #28]
            bool blend = true;
 800214a:	2001      	movs	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800214c:	8861      	ldrh	r1, [r4, #2]
 800214e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002152:	3901      	subs	r1, #1
 8002154:	f022 0210 	bic.w	r2, r2, #16
 8002158:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800215c:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800215e:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8002160:	69da      	ldr	r2, [r3, #28]
 8002162:	f042 0220 	orr.w	r2, r2, #32
 8002166:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002168:	69da      	ldr	r2, [r3, #28]
 800216a:	0692      	lsls	r2, r2, #26
 800216c:	d4fc      	bmi.n	8002168 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800216e:	2210      	movs	r2, #16
 8002170:	609a      	str	r2, [r3, #8]
            if(blend)
 8002172:	2800      	cmp	r0, #0
 8002174:	d0bd      	beq.n	80020f2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002176:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002178:	601a      	str	r2, [r3, #0]
        }

        break;
    }
}
 800217a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800217e:	8862      	ldrh	r2, [r4, #2]
                if(blitOp.alpha == 255)
 8002180:	f1bc 00ff 	subs.w	r0, ip, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002184:	69d9      	ldr	r1, [r3, #28]
 8002186:	f102 34ff 	add.w	r4, r2, #4294967295
                if(blitOp.alpha == 255)
 800218a:	bf18      	it	ne
 800218c:	2001      	movne	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800218e:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 8002192:	f022 0210 	bic.w	r2, r2, #16
 8002196:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800219a:	f042 0210 	orr.w	r2, r2, #16
 800219e:	61da      	str	r2, [r3, #28]
                break;
 80021a0:	e7dd      	b.n	800215e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80021a2:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 80021a6:	61dc      	str	r4, [r3, #28]
 80021a8:	e7b7      	b.n	800211a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80021aa:	f240 2201 	movw	r2, #513	; 0x201
 80021ae:	e7e3      	b.n	8002178 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 80021b0:	52001000 	.word	0x52001000
 80021b4:	00010201 	.word	0x00010201
 80021b8:	08024636 	.word	0x08024636
 80021bc:	08024650 	.word	0x08024650
 80021c0:	0802459e 	.word	0x0802459e
 80021c4:	00020201 	.word	0x00020201

080021c8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80021c8:	b570      	push	{r4, r5, r6, lr}
 80021ca:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80021cc:	7f89      	ldrb	r1, [r1, #30]
 80021ce:	f7ff ff35 	bl	800203c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80021d2:	4b12      	ldr	r3, [pc, #72]	; (800221c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80021d4:	8aa5      	ldrh	r5, [r4, #20]
 80021d6:	8ae1      	ldrh	r1, [r4, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021d8:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80021da:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80021de:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021e0:	1b52      	subs	r2, r2, r5
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80021e2:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80021e4:	6921      	ldr	r1, [r4, #16]
 80021e6:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021e8:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80021ea:	6826      	ldr	r6, [r4, #0]
 80021ec:	68e5      	ldr	r5, [r4, #12]
 80021ee:	2e08      	cmp	r6, #8
 80021f0:	d10d      	bne.n	800220e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021f2:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021f4:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80021f6:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 80021f8:	4a09      	ldr	r2, [pc, #36]	; (8002220 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 80021fa:	7f20      	ldrb	r0, [r4, #28]
 80021fc:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002200:	61da      	str	r2, [r3, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002202:	4a08      	ldr	r2, [pc, #32]	; (8002224 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002204:	621d      	str	r5, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002206:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002208:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800220a:	601a      	str	r2, [r3, #0]
    }
}
 800220c:	bd70      	pop	{r4, r5, r6, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 800220e:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002210:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002212:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002214:	4a04      	ldr	r2, [pc, #16]	; (8002228 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002216:	639d      	str	r5, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002218:	e7f7      	b.n	800220a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 800221a:	bf00      	nop
 800221c:	52001000 	.word	0x52001000
 8002220:	00010009 	.word	0x00010009
 8002224:	00020201 	.word	0x00020201
 8002228:	00030201 	.word	0x00030201

0800222c <_ZN8touchgfx5paint8tearDownEv>:
* @brief Waits until previous DMA drawing operation has finished
*/
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 800222c:	4b03      	ldr	r3, [pc, #12]	; (800223c <_ZN8touchgfx5paint8tearDownEv+0x10>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	07d2      	lsls	r2, r2, #31
 8002232:	d4fc      	bmi.n	800222e <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002234:	2223      	movs	r2, #35	; 0x23
 8002236:	609a      	str	r2, [r3, #8]
}
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	52001000 	.word	0x52001000

08002240 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
*
* @brief Renders Canvas Widget chunks using DMA.
* This functions will not generate an interrupt, and will not affect the DMA queue.
*/
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 8002240:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002242:	4c10      	ldr	r4, [pc, #64]	; (8002284 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x44>)
 8002244:	6825      	ldr	r5, [r4, #0]
 8002246:	07ed      	lsls	r5, r5, #31
 8002248:	d4fc      	bmi.n	8002244 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800224a:	2523      	movs	r5, #35	; 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800224c:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 800224e:	2bff      	cmp	r3, #255	; 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002250:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002252:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002256:	ea41 0105 	orr.w	r1, r1, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 800225a:	6365      	str	r5, [r4, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800225c:	6461      	str	r1, [r4, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 800225e:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (alpha < 0xFF)
 8002260:	d00c      	beq.n	800227c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002262:	4909      	ldr	r1, [pc, #36]	; (8002288 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x48>)

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002264:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002268:	6265      	str	r5, [r4, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 800226a:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 800226e:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002272:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8002274:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8002276:	60e0      	str	r0, [r4, #12]

        /* Set Output Color */
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002278:	6023      	str	r3, [r4, #0]
    }
}
 800227a:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 800227c:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 800227e:	4b04      	ldr	r3, [pc, #16]	; (8002290 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
        WRITE_REG(DMA2D->OCOLR, color);
 8002280:	63a2      	str	r2, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002282:	e7f9      	b.n	8002278 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x38>
 8002284:	52001000 	.word	0x52001000
 8002288:	00010009 	.word	0x00010009
 800228c:	00020001 	.word	0x00020001
 8002290:	00030001 	.word	0x00030001

08002294 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8002294:	2001      	movs	r0, #1
 8002296:	4770      	bx	lr

08002298 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8002298:	200c      	movs	r0, #12
 800229a:	4770      	bx	lr

0800229c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 800229c:	230c      	movs	r3, #12
 800229e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80022a2:	3008      	adds	r0, #8
 80022a4:	4770      	bx	lr

080022a6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 80022a6:	230c      	movs	r3, #12
 80022a8:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80022ac:	3008      	adds	r0, #8
 80022ae:	4770      	bx	lr

080022b0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80022b0:	2001      	movs	r0, #1
 80022b2:	4770      	bx	lr

080022b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80022b4:	f643 4068 	movw	r0, #15464	; 0x3c68
 80022b8:	4770      	bx	lr

080022ba <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80022ba:	f643 4368 	movw	r3, #15464	; 0x3c68
 80022be:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80022c2:	3008      	adds	r0, #8
 80022c4:	4770      	bx	lr

080022c6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80022c6:	f643 4368 	movw	r3, #15464	; 0x3c68
 80022ca:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80022ce:	3008      	adds	r0, #8
 80022d0:	4770      	bx	lr

080022d2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80022d2:	2001      	movs	r0, #1
 80022d4:	4770      	bx	lr

080022d6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80022d6:	2010      	movs	r0, #16
 80022d8:	4770      	bx	lr

080022da <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80022da:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80022de:	3008      	adds	r0, #8
 80022e0:	4770      	bx	lr

080022e2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80022e2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80022e6:	3008      	adds	r0, #8
 80022e8:	4770      	bx	lr

080022ea <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 80022ea:	4608      	mov	r0, r1
 80022ec:	f000 bb84 	b.w	80029f8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

080022f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 80022f0:	4b03      	ldr	r3, [pc, #12]	; (8002300 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80022f2:	b510      	push	{r4, lr}
 80022f4:	4604      	mov	r4, r0
 80022f6:	6003      	str	r3, [r0, #0]
 80022f8:	f00e fe95 	bl	8011026 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80022fc:	4620      	mov	r0, r4
 80022fe:	bd10      	pop	{r4, pc}
 8002300:	08024750 	.word	0x08024750

08002304 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002304:	b510      	push	{r4, lr}
 8002306:	4604      	mov	r4, r0
 8002308:	f7ff fff2 	bl	80022f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800230c:	2114      	movs	r1, #20
 800230e:	4620      	mov	r0, r4
 8002310:	f020 fcb9 	bl	8022c86 <_ZdlPvj>
 8002314:	4620      	mov	r0, r4
 8002316:	bd10      	pop	{r4, pc}

08002318 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002318:	4b03      	ldr	r3, [pc, #12]	; (8002328 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800231a:	b510      	push	{r4, lr}
 800231c:	4604      	mov	r4, r0
 800231e:	6003      	str	r3, [r0, #0]
 8002320:	f00e fe81 	bl	8011026 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002324:	4620      	mov	r0, r4
 8002326:	bd10      	pop	{r4, pc}
 8002328:	0802471c 	.word	0x0802471c

0800232c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800232c:	b510      	push	{r4, lr}
 800232e:	4604      	mov	r4, r0
 8002330:	f7ff fff2 	bl	8002318 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002334:	f643 4170 	movw	r1, #15472	; 0x3c70
 8002338:	4620      	mov	r0, r4
 800233a:	f020 fca4 	bl	8022c86 <_ZdlPvj>
 800233e:	4620      	mov	r0, r4
 8002340:	bd10      	pop	{r4, pc}
	...

08002344 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002346:	b510      	push	{r4, lr}
 8002348:	4604      	mov	r4, r0
 800234a:	6003      	str	r3, [r0, #0]
 800234c:	f00e fe6b 	bl	8011026 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002350:	4620      	mov	r0, r4
 8002352:	bd10      	pop	{r4, pc}
 8002354:	080246e8 	.word	0x080246e8

08002358 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002358:	b510      	push	{r4, lr}
 800235a:	4604      	mov	r4, r0
 800235c:	f7ff fff2 	bl	8002344 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002360:	2118      	movs	r1, #24
 8002362:	4620      	mov	r0, r4
 8002364:	f020 fc8f 	bl	8022c86 <_ZdlPvj>
 8002368:	4620      	mov	r0, r4
 800236a:	bd10      	pop	{r4, pc}

0800236c <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 800236c:	4b09      	ldr	r3, [pc, #36]	; (8002394 <_ZN12FrontendHeapD1Ev+0x28>)
 800236e:	b510      	push	{r4, lr}
 8002370:	4604      	mov	r4, r0
 8002372:	6003      	str	r3, [r0, #0]
 8002374:	f500 5072 	add.w	r0, r0, #15488	; 0x3c80
 8002378:	301c      	adds	r0, #28
 800237a:	f7ff ffb9 	bl	80022f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800237e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8002382:	f7ff ffc9 	bl	8002318 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002386:	f104 0014 	add.w	r0, r4, #20
 800238a:	f7ff ffdb 	bl	8002344 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800238e:	4620      	mov	r0, r4
 8002390:	bd10      	pop	{r4, pc}
 8002392:	bf00      	nop
 8002394:	08024784 	.word	0x08024784

08002398 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002398:	b508      	push	{r3, lr}
 800239a:	4802      	ldr	r0, [pc, #8]	; (80023a4 <__tcf_0+0xc>)
 800239c:	f7ff ffe6 	bl	800236c <_ZN12FrontendHeapD1Ev>
 80023a0:	bd08      	pop	{r3, pc}
 80023a2:	bf00      	nop
 80023a4:	2400042c 	.word	0x2400042c

080023a8 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 80023a8:	b510      	push	{r4, lr}
 80023aa:	4604      	mov	r4, r0
 80023ac:	f7ff ffde 	bl	800236c <_ZN12FrontendHeapD1Ev>
 80023b0:	f643 6110 	movw	r1, #15888	; 0x3e10
 80023b4:	4620      	mov	r0, r4
 80023b6:	f020 fc66 	bl	8022c86 <_ZdlPvj>
 80023ba:	4620      	mov	r0, r4
 80023bc:	bd10      	pop	{r4, pc}
	...

080023c0 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80023c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80023c4:	f000 f9a4 	bl	8002710 <_ZN14BitmapDatabase11getInstanceEv>
 80023c8:	2400      	movs	r4, #0
 80023ca:	4605      	mov	r5, r0
 80023cc:	f000 f9a4 	bl	8002718 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80023d0:	4623      	mov	r3, r4
 80023d2:	4601      	mov	r1, r0
 80023d4:	4622      	mov	r2, r4
 80023d6:	4628      	mov	r0, r5
 80023d8:	9400      	str	r4, [sp, #0]
 80023da:	f018 f843 	bl	801a464 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80023de:	4b26      	ldr	r3, [pc, #152]	; (8002478 <touchgfx_init+0xb8>)
 80023e0:	4a26      	ldr	r2, [pc, #152]	; (800247c <touchgfx_init+0xbc>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80023e2:	4620      	mov	r0, r4
        static FrontendHeap instance;
 80023e4:	4d26      	ldr	r5, [pc, #152]	; (8002480 <touchgfx_init+0xc0>)
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	f004 f99a 	bl	8006720 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80023ec:	4825      	ldr	r0, [pc, #148]	; (8002484 <touchgfx_init+0xc4>)
 80023ee:	f017 fef1 	bl	801a1d4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 80023f2:	782b      	ldrb	r3, [r5, #0]
 80023f4:	f3bf 8f5b 	dmb	ish
 80023f8:	07db      	lsls	r3, r3, #31
 80023fa:	d436      	bmi.n	800246a <touchgfx_init+0xaa>
 80023fc:	4628      	mov	r0, r5
 80023fe:	f020 fc44 	bl	8022c8a <__cxa_guard_acquire>
 8002402:	b390      	cbz	r0, 800246a <touchgfx_init+0xaa>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002404:	4c20      	ldr	r4, [pc, #128]	; (8002488 <touchgfx_init+0xc8>)
 8002406:	4f21      	ldr	r7, [pc, #132]	; (800248c <touchgfx_init+0xcc>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8002408:	4b21      	ldr	r3, [pc, #132]	; (8002490 <touchgfx_init+0xd0>)
 800240a:	f104 0014 	add.w	r0, r4, #20
 800240e:	f107 0618 	add.w	r6, r7, #24
 8002412:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8002416:	6023      	str	r3, [r4, #0]
 8002418:	6060      	str	r0, [r4, #4]
 800241a:	f8c4 8008 	str.w	r8, [r4, #8]
 800241e:	60e7      	str	r7, [r4, #12]
 8002420:	6126      	str	r6, [r4, #16]
 8002422:	f00e fe01 	bl	8011028 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002426:	4b1b      	ldr	r3, [pc, #108]	; (8002494 <touchgfx_init+0xd4>)
 8002428:	4640      	mov	r0, r8
 800242a:	6163      	str	r3, [r4, #20]
 800242c:	f00e fdfc 	bl	8011028 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002430:	4b19      	ldr	r3, [pc, #100]	; (8002498 <touchgfx_init+0xd8>)
 8002432:	4638      	mov	r0, r7
 8002434:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002436:	f00e fdf7 	bl	8011028 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800243a:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 800243e:	4a17      	ldr	r2, [pc, #92]	; (800249c <touchgfx_init+0xdc>)
 8002440:	f503 604b 	add.w	r0, r3, #3248	; 0xcb0
 8002444:	f8c3 2c9c 	str.w	r2, [r3, #3228]	; 0xc9c
 8002448:	f006 fe2a 	bl	80090a0 <_ZN5ModelC1Ev>
 800244c:	4622      	mov	r2, r4
 800244e:	f107 0114 	add.w	r1, r7, #20
 8002452:	4630      	mov	r0, r6
 8002454:	f006 fe1a 	bl	800908c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8002458:	4630      	mov	r0, r6
 800245a:	f000 facd 	bl	80029f8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 800245e:	4810      	ldr	r0, [pc, #64]	; (80024a0 <touchgfx_init+0xe0>)
 8002460:	f020 fd3c 	bl	8022edc <atexit>
 8002464:	4628      	mov	r0, r5
 8002466:	f020 fc1c 	bl	8022ca2 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800246a:	480e      	ldr	r0, [pc, #56]	; (80024a4 <touchgfx_init+0xe4>)
}
 800246c:	b002      	add	sp, #8
 800246e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8002472:	f7ff ba75 	b.w	8001960 <_ZN11TouchGFXHAL10initializeEv>
 8002476:	bf00      	nop
 8002478:	2400eb34 	.word	0x2400eb34
 800247c:	2400505c 	.word	0x2400505c
 8002480:	24000428 	.word	0x24000428
 8002484:	24000014 	.word	0x24000014
 8002488:	2400042c 	.word	0x2400042c
 800248c:	240040c8 	.word	0x240040c8
 8002490:	08024784 	.word	0x08024784
 8002494:	080246e8 	.word	0x080246e8
 8002498:	0802471c 	.word	0x0802471c
 800249c:	08024750 	.word	0x08024750
 80024a0:	08002399 	.word	0x08002399
 80024a4:	24004fe0 	.word	0x24004fe0

080024a8 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 80024a8:	4770      	bx	lr
	...

080024ac <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80024ac:	4801      	ldr	r0, [pc, #4]	; (80024b4 <touchgfx_taskEntry+0x8>)
 80024ae:	f7ff ba6d 	b.w	800198c <_ZN11TouchGFXHAL9taskEntryEv>
 80024b2:	bf00      	nop
 80024b4:	24004fe0 	.word	0x24004fe0

080024b8 <_GLOBAL__sub_I_touchgfx_init>:
}
 80024b8:	b513      	push	{r0, r1, r4, lr}
static STM32DMA dma;
 80024ba:	490c      	ldr	r1, [pc, #48]	; (80024ec <_GLOBAL__sub_I_touchgfx_init+0x34>)
{
public:

    STM32TouchController() {}
 80024bc:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <_GLOBAL__sub_I_touchgfx_init+0x38>)
 80024be:	4c0d      	ldr	r4, [pc, #52]	; (80024f4 <_GLOBAL__sub_I_touchgfx_init+0x3c>)
 80024c0:	4608      	mov	r0, r1
 80024c2:	6023      	str	r3, [r4, #0]
 80024c4:	f7ff fd80 	bl	8001fc8 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80024c8:	4a0b      	ldr	r2, [pc, #44]	; (80024f8 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80024ca:	4610      	mov	r0, r2
 80024cc:	f01a f9e4 	bl	801c898 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 80024d0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80024d4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80024d8:	4904      	ldr	r1, [pc, #16]	; (80024ec <_GLOBAL__sub_I_touchgfx_init+0x34>)
 80024da:	4808      	ldr	r0, [pc, #32]	; (80024fc <_GLOBAL__sub_I_touchgfx_init+0x44>)
 80024dc:	e9cd 3200 	strd	r3, r2, [sp]
 80024e0:	4623      	mov	r3, r4
 80024e2:	4a05      	ldr	r2, [pc, #20]	; (80024f8 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80024e4:	f7ff fae6 	bl	8001ab4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 80024e8:	b002      	add	sp, #8
 80024ea:	bd10      	pop	{r4, pc}
 80024ec:	24004240 	.word	0x24004240
 80024f0:	080241c8 	.word	0x080241c8
 80024f4:	2400423c 	.word	0x2400423c
 80024f8:	24005060 	.word	0x24005060
 80024fc:	24004fe0 	.word	0x24004fe0

08002500 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8002500:	4801      	ldr	r0, [pc, #4]	; (8002508 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8002502:	f7ff bd15 	b.w	8001f30 <_ZN8STM32DMAD1Ev>
 8002506:	bf00      	nop
 8002508:	24004240 	.word	0x24004240

0800250c <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 800250c:	2000      	movs	r0, #0
 800250e:	4770      	bx	lr

08002510 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8002510:	8081      	strh	r1, [r0, #4]
    }
 8002512:	4770      	bx	lr

08002514 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8002514:	80c1      	strh	r1, [r0, #6]
    }
 8002516:	4770      	bx	lr

08002518 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002518:	8101      	strh	r1, [r0, #8]
    }
 800251a:	4770      	bx	lr

0800251c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 800251c:	8141      	strh	r1, [r0, #10]
    }
 800251e:	4770      	bx	lr

08002520 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002520:	4770      	bx	lr

08002522 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8002522:	4770      	bx	lr

08002524 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8002524:	4770      	bx	lr

08002526 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8002526:	4770      	bx	lr

08002528 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002528:	4770      	bx	lr

0800252a <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800252a:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 800252c:	88c4      	ldrh	r4, [r0, #6]
 800252e:	6803      	ldr	r3, [r0, #0]
 8002530:	1b12      	subs	r2, r2, r4
 8002532:	8884      	ldrh	r4, [r0, #4]
 8002534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002536:	1b09      	subs	r1, r1, r4
 8002538:	b212      	sxth	r2, r2
    }
 800253a:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 800253e:	b209      	sxth	r1, r1
 8002540:	4718      	bx	r3

08002542 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8002542:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002546:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002548:	f04f 33ff 	mov.w	r3, #4294967295
 800254c:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 800254e:	6813      	ldr	r3, [r2, #0]
 8002550:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8002552:	6010      	str	r0, [r2, #0]
    }
 8002554:	4770      	bx	lr

08002556 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8002556:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800255a:	b11a      	cbz	r2, 8002564 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 800255c:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8002560:	b102      	cbz	r2, 8002564 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8002562:	6018      	str	r0, [r3, #0]
        }
    }
 8002564:	4770      	bx	lr

08002566 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 8002566:	2000      	movs	r0, #0
 8002568:	4770      	bx	lr

0800256a <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 800256a:	888b      	ldrh	r3, [r1, #4]
 800256c:	8083      	strh	r3, [r0, #4]
        return true;
    }
 800256e:	2001      	movs	r0, #1
 8002570:	4770      	bx	lr

08002572 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 8002572:	4770      	bx	lr

08002574 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8002574:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    }
 8002578:	4770      	bx	lr

0800257a <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 800257a:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 800257e:	4770      	bx	lr

08002580 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8002580:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 8002582:	b510      	push	{r4, lr}
        return rect.width;
 8002584:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 8002588:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 800258c:	8002      	strh	r2, [r0, #0]
 800258e:	8042      	strh	r2, [r0, #2]
 8002590:	8084      	strh	r4, [r0, #4]
 8002592:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 8002594:	bd10      	pop	{r4, pc}

08002596 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 8002596:	2200      	movs	r2, #0
 8002598:	8002      	strh	r2, [r0, #0]
 800259a:	8042      	strh	r2, [r0, #2]
 800259c:	8082      	strh	r2, [r0, #4]
 800259e:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 80025a0:	4770      	bx	lr
	...

080025a4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a4:	4b02      	ldr	r3, [pc, #8]	; (80025b0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 80025a6:	2290      	movs	r2, #144	; 0x90
 80025a8:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	e000e100 	.word	0xe000e100

080025b4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 80025b4:	4770      	bx	lr

080025b6 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 80025b6:	b570      	push	{r4, r5, r6, lr}
 80025b8:	4604      	mov	r4, r0
    HAL::initialize();
 80025ba:	f00f f830 	bl	801161e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80025be:	6823      	ldr	r3, [r4, #0]
 80025c0:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80025c2:	f014 fdb9 	bl	8017138 <_ZN8touchgfx11Application11getInstanceEv>
 80025c6:	4601      	mov	r1, r0
 80025c8:	4620      	mov	r0, r4
 80025ca:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0, (void*)0);
 80025cc:	6823      	ldr	r3, [r4, #0]
 80025ce:	4620      	mov	r0, r4
 80025d0:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80025d4:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 80025d8:	2300      	movs	r3, #0
 80025da:	46ac      	mov	ip, r5
 80025dc:	461a      	mov	r2, r3
}
 80025de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0, (void*)0);
 80025e2:	4760      	bx	ip

080025e4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 80025e4:	f00e bfcc 	b.w	8011580 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080025e8 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 80025e8:	f00f b927 	b.w	801183a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080025ec <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80025ec:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80025f0:	b112      	cbz	r2, 80025f8 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80025f2:	6803      	ldr	r3, [r0, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	4718      	bx	r3
    }
 80025f8:	4770      	bx	lr
	...

080025fc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80025fc:	4a12      	ldr	r2, [pc, #72]	; (8002648 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 80025fe:	6953      	ldr	r3, [r2, #20]
 8002600:	03db      	lsls	r3, r3, #15
{
 8002602:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002604:	d51e      	bpl.n	8002644 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002606:	2300      	movs	r3, #0
 8002608:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800260c:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002610:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002614:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002618:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800261c:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002620:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002622:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002626:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002628:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800262c:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800262e:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 8002632:	d2f9      	bcs.n	8002628 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 8002634:	3b20      	subs	r3, #32
 8002636:	f113 0f20 	cmn.w	r3, #32
 800263a:	d1f2      	bne.n	8002622 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 800263c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002640:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8002644:	bd70      	pop	{r4, r5, r6, pc}
 8002646:	bf00      	nop
 8002648:	e000ed00 	.word	0xe000ed00

0800264c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800264c:	4b04      	ldr	r3, [pc, #16]	; (8002660 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 800264e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002652:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002656:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800265a:	f3bf 8f6f 	isb	sy
}
 800265e:	4770      	bx	lr
 8002660:	e000e100 	.word	0xe000e100

08002664 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002664:	4b02      	ldr	r3, [pc, #8]	; (8002670 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 8002666:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800266a:	609a      	str	r2, [r3, #8]
}
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	e000e100 	.word	0xe000e100

08002674 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
        : widgetWidth(0)
 8002674:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 8002676:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002678:	4e12      	ldr	r6, [pc, #72]	; (80026c4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x50>)
 800267a:	4604      	mov	r4, r0
 800267c:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 800267e:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x54>)
 8002680:	6003      	str	r3, [r0, #0]
 8002682:	6833      	ldr	r3, [r6, #0]
 8002684:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8002688:	b10a      	cbz	r2, 800268e <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1a>
 800268a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800268c:	b900      	cbnz	r0, 8002690 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1c>
        return instance->lcdRef;
 800268e:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8002690:	6803      	ldr	r3, [r0, #0]
 8002692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002694:	4798      	blx	r3
 8002696:	1e43      	subs	r3, r0, #1
 8002698:	425d      	negs	r5, r3
 800269a:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 800269c:	6833      	ldr	r3, [r6, #0]
 800269e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 80026a0:	b130      	cbz	r0, 80026b0 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 80026a2:	6803      	ldr	r3, [r0, #0]
 80026a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a6:	4798      	blx	r3
 80026a8:	2801      	cmp	r0, #1
 80026aa:	bf08      	it	eq
 80026ac:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 80026b0:	b92d      	cbnz	r5, 80026be <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x4a>
 80026b2:	4b06      	ldr	r3, [pc, #24]	; (80026cc <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 80026b4:	2127      	movs	r1, #39	; 0x27
 80026b6:	4a06      	ldr	r2, [pc, #24]	; (80026d0 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 80026b8:	4806      	ldr	r0, [pc, #24]	; (80026d4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 80026ba:	f020 fbf1 	bl	8022ea0 <__assert_func>
    }
 80026be:	4620      	mov	r0, r4
 80026c0:	bd70      	pop	{r4, r5, r6, pc}
 80026c2:	bf00      	nop
 80026c4:	2400ead0 	.word	0x2400ead0
 80026c8:	080248a0 	.word	0x080248a0
 80026cc:	08024790 	.word	0x08024790
 80026d0:	080247ee 	.word	0x080247ee
 80026d4:	08024827 	.word	0x08024827

080026d8 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80026d8:	4770      	bx	lr

080026da <_ZN23ApplicationFontProviderD0Ev>:
 80026da:	b510      	push	{r4, lr}
 80026dc:	4604      	mov	r4, r0
 80026de:	2104      	movs	r1, #4
 80026e0:	f020 fad1 	bl	8022c86 <_ZdlPvj>
 80026e4:	4620      	mov	r0, r4
 80026e6:	bd10      	pop	{r4, pc}

080026e8 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 80026e8:	2901      	cmp	r1, #1
{
 80026ea:	b508      	push	{r3, lr}
    switch (typography)
 80026ec:	d006      	beq.n	80026fc <_ZN23ApplicationFontProvider7getFontEt+0x14>
 80026ee:	2902      	cmp	r1, #2
 80026f0:	d008      	beq.n	8002704 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 80026f2:	b959      	cbnz	r1, 800270c <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_16_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80026f4:	f004 f860 	bl	80067b8 <_ZN17TypedTextDatabase8getFontsEv>
 80026f8:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 80026fa:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80026fc:	f004 f85c 	bl	80067b8 <_ZN17TypedTextDatabase8getFontsEv>
 8002700:	6840      	ldr	r0, [r0, #4]
 8002702:	e7fa      	b.n	80026fa <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8002704:	f004 f858 	bl	80067b8 <_ZN17TypedTextDatabase8getFontsEv>
 8002708:	6880      	ldr	r0, [r0, #8]
 800270a:	e7f6      	b.n	80026fa <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 800270c:	2000      	movs	r0, #0
 800270e:	e7f4      	b.n	80026fa <_ZN23ApplicationFontProvider7getFontEt+0x12>

08002710 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8002710:	4800      	ldr	r0, [pc, #0]	; (8002714 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8002712:	4770      	bx	lr
 8002714:	080248cc 	.word	0x080248cc

08002718 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8002718:	2001      	movs	r0, #1
 800271a:	4770      	bx	lr

0800271c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800271c:	b513      	push	{r0, r1, r4, lr}
 800271e:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8002720:	b151      	cbz	r1, 8002738 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8002722:	6803      	ldr	r3, [r0, #0]
 8002724:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8002726:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8002728:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800272c:	689c      	ldr	r4, [r3, #8]
 800272e:	f10d 0303 	add.w	r3, sp, #3
 8002732:	47a0      	blx	r4
        return glyph;
    }
 8002734:	b002      	add	sp, #8
 8002736:	bd10      	pop	{r4, pc}
            return 0;
 8002738:	4608      	mov	r0, r1
 800273a:	e7fb      	b.n	8002734 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

0800273c <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 800273c:	89c0      	ldrh	r0, [r0, #14]
 800273e:	4770      	bx	lr

08002740 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8002740:	8a00      	ldrh	r0, [r0, #16]
 8002742:	4770      	bx	lr

08002744 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8002744:	88c0      	ldrh	r0, [r0, #6]
 8002746:	4770      	bx	lr

08002748 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8002748:	8880      	ldrh	r0, [r0, #4]
 800274a:	4770      	bx	lr

0800274c <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 800274c:	7a80      	ldrb	r0, [r0, #10]
    }
 800274e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8002752:	4770      	bx	lr

08002754 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8002754:	7a80      	ldrb	r0, [r0, #10]
    }
 8002756:	09c0      	lsrs	r0, r0, #7
 8002758:	4770      	bx	lr

0800275a <_ZN8touchgfx9TypedTextD1Ev>:
    }
 800275a:	4770      	bx	lr

0800275c <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800275c:	b510      	push	{r4, lr}
 800275e:	4604      	mov	r4, r0
    }
 8002760:	2108      	movs	r1, #8
 8002762:	f020 fa90 	bl	8022c86 <_ZdlPvj>
 8002766:	4620      	mov	r0, r4
 8002768:	bd10      	pop	{r4, pc}

0800276a <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 800276a:	4770      	bx	lr

0800276c <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 800276c:	4770      	bx	lr

0800276e <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 800276e:	f500 7398 	add.w	r3, r0, #304	; 0x130
 8002772:	6808      	ldr	r0, [r1, #0]
 8002774:	6849      	ldr	r1, [r1, #4]
 8002776:	c303      	stmia	r3!, {r0, r1}
    }
 8002778:	4770      	bx	lr

0800277a <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 800277a:	4770      	bx	lr

0800277c <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 800277c:	4770      	bx	lr

0800277e <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 800277e:	6041      	str	r1, [r0, #4]
    }
 8002780:	4770      	bx	lr

08002782 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8002782:	4770      	bx	lr

08002784 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002784:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8002786:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 800278a:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 800278e:	2300      	movs	r3, #0
 8002790:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8002794:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8002798:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	08002845 	.word	0x08002845

080027a4 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 80027a4:	2301      	movs	r3, #1
 80027a6:	7203      	strb	r3, [r0, #8]
    }
 80027a8:	4770      	bx	lr

080027aa <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 80027aa:	4770      	bx	lr

080027ac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 80027ac:	4770      	bx	lr

080027ae <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80027ae:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 80027b0:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 80027b2:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 80027b4:	68c2      	ldr	r2, [r0, #12]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	1054      	asrs	r4, r2, #1
 80027ba:	eb01 0062 	add.w	r0, r1, r2, asr #1
 80027be:	07d2      	lsls	r2, r2, #31
 80027c0:	bf48      	it	mi
 80027c2:	590a      	ldrmi	r2, [r1, r4]
    }
 80027c4:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 80027c8:	bf48      	it	mi
 80027ca:	58d3      	ldrmi	r3, [r2, r3]
 80027cc:	4718      	bx	r3

080027ce <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 80027ce:	6843      	ldr	r3, [r0, #4]
 80027d0:	b12b      	cbz	r3, 80027de <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 80027d2:	6883      	ldr	r3, [r0, #8]
 80027d4:	b92b      	cbnz	r3, 80027e2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 80027d6:	68c0      	ldr	r0, [r0, #12]
 80027d8:	f000 0001 	and.w	r0, r0, #1
 80027dc:	4770      	bx	lr
 80027de:	4618      	mov	r0, r3
 80027e0:	4770      	bx	lr
 80027e2:	2001      	movs	r0, #1
    }
 80027e4:	4770      	bx	lr

080027e6 <_ZN8touchgfx12NoTransitionD0Ev>:
 80027e6:	b510      	push	{r4, lr}
 80027e8:	4604      	mov	r4, r0
 80027ea:	210c      	movs	r1, #12
 80027ec:	f020 fa4b 	bl	8022c86 <_ZdlPvj>
 80027f0:	4620      	mov	r0, r4
 80027f2:	bd10      	pop	{r4, pc}

080027f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80027f4:	b510      	push	{r4, lr}
 80027f6:	4604      	mov	r4, r0
 80027f8:	2110      	movs	r1, #16
 80027fa:	f020 fa44 	bl	8022c86 <_ZdlPvj>
 80027fe:	4620      	mov	r0, r4
 8002800:	bd10      	pop	{r4, pc}

08002802 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8002802:	b510      	push	{r4, lr}
 8002804:	4604      	mov	r4, r0
 8002806:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800280a:	f020 fa3c 	bl	8022c86 <_ZdlPvj>
 800280e:	4620      	mov	r0, r4
 8002810:	bd10      	pop	{r4, pc}

08002812 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8002812:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 8002814:	f014 fc90 	bl	8017138 <_ZN8touchgfx11Application11getInstanceEv>
    }
 8002818:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
 800281c:	f015 b8d6 	b.w	80179cc <_ZN8touchgfx11Application10invalidateEv>

08002820 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002820:	b510      	push	{r4, lr}
 8002822:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002824:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 8002828:	b158      	cbz	r0, 8002842 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 800282a:	6803      	ldr	r3, [r0, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	4798      	blx	r3
 8002830:	b138      	cbz	r0, 8002842 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8002832:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
 8002836:	6803      	ldr	r3, [r0, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800283c:	2300      	movs	r3, #0
 800283e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    }
 8002842:	bd10      	pop	{r4, pc}

08002844 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8002844:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002848:	e9d0 5a55 	ldrd	r5, sl, [r0, #340]	; 0x154
{
 800284c:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800284e:	68a8      	ldr	r0, [r5, #8]
 8002850:	6803      	ldr	r3, [r0, #0]
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	4798      	blx	r3
 8002856:	f643 4367 	movw	r3, #15463	; 0x3c67
 800285a:	4298      	cmp	r0, r3
 800285c:	d805      	bhi.n	800286a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x26>
 800285e:	4b46      	ldr	r3, [pc, #280]	; (8002978 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8002860:	21a3      	movs	r1, #163	; 0xa3
 8002862:	4a46      	ldr	r2, [pc, #280]	; (800297c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002864:	4846      	ldr	r0, [pc, #280]	; (8002980 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8002866:	f020 fb1b 	bl	8022ea0 <__assert_func>
 800286a:	6868      	ldr	r0, [r5, #4]
 800286c:	6803      	ldr	r3, [r0, #0]
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	4798      	blx	r3
 8002872:	280f      	cmp	r0, #15
 8002874:	d803      	bhi.n	800287e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x3a>
 8002876:	4b43      	ldr	r3, [pc, #268]	; (8002984 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 8002878:	21a4      	movs	r1, #164	; 0xa4
 800287a:	4a40      	ldr	r2, [pc, #256]	; (800297c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 800287c:	e7f2      	b.n	8002864 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800287e:	68e8      	ldr	r0, [r5, #12]
 8002880:	6803      	ldr	r3, [r0, #0]
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	4798      	blx	r3
 8002886:	280b      	cmp	r0, #11
 8002888:	d803      	bhi.n	8002892 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4e>
 800288a:	4b3f      	ldr	r3, [pc, #252]	; (8002988 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>)
 800288c:	21a5      	movs	r1, #165	; 0xa5
 800288e:	4a3b      	ldr	r2, [pc, #236]	; (800297c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8002890:	e7e8      	b.n	8002864 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    if (*currentTrans)
 8002892:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8002990 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x14c>
    Application::getInstance()->clearAllTimerWidgets();
 8002896:	f014 fc4f 	bl	8017138 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 800289a:	3004      	adds	r0, #4
 800289c:	f014 fc71 	bl	8017182 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 80028a0:	f8d9 0000 	ldr.w	r0, [r9]
 80028a4:	b110      	cbz	r0, 80028ac <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 80028a6:	6803      	ldr	r3, [r0, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	4798      	blx	r3
    if (*currentTrans)
 80028ac:	f8d9 0000 	ldr.w	r0, [r9]
 80028b0:	b110      	cbz	r0, 80028b8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 80028b2:	6803      	ldr	r3, [r0, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4798      	blx	r3
    if (*currentScreen)
 80028b8:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8002994 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x150>
 80028bc:	f8d8 0000 	ldr.w	r0, [r8]
 80028c0:	b110      	cbz	r0, 80028c8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 80028c2:	6803      	ldr	r3, [r0, #0]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	4798      	blx	r3
    if (*currentPresenter)
 80028c8:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80028cc:	b110      	cbz	r0, 80028d4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 80028ce:	6803      	ldr	r3, [r0, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	4798      	blx	r3
    if (*currentScreen)
 80028d4:	f8d8 0000 	ldr.w	r0, [r8]
 80028d8:	b110      	cbz	r0, 80028e0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 80028da:	6803      	ldr	r3, [r0, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4798      	blx	r3
    if (*currentPresenter)
 80028e0:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80028e4:	b110      	cbz	r0, 80028ec <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 80028e6:	6803      	ldr	r3, [r0, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80028ec:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 80028ee:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 80028f0:	f04f 0b00 	mov.w	fp, #0
 80028f4:	6803      	ldr	r3, [r0, #0]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	4798      	blx	r3
 80028fa:	4b24      	ldr	r3, [pc, #144]	; (800298c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>)
 80028fc:	4604      	mov	r4, r0
 80028fe:	f8c0 b004 	str.w	fp, [r0, #4]
 8002902:	6003      	str	r3, [r0, #0]
 8002904:	4659      	mov	r1, fp
 8002906:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800290a:	68a8      	ldr	r0, [r5, #8]
 800290c:	6803      	ldr	r3, [r0, #0]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	4798      	blx	r3
 8002912:	4606      	mov	r6, r0
 8002914:	f006 fc68 	bl	80091e8 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002918:	6868      	ldr	r0, [r5, #4]
 800291a:	4659      	mov	r1, fp
 800291c:	6803      	ldr	r3, [r0, #0]
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	4798      	blx	r3
 8002922:	4605      	mov	r5, r0
 8002924:	4631      	mov	r1, r6
 8002926:	f006 fbcd 	bl	80090c4 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 800292a:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 800292e:	f8c7 513c 	str.w	r5, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 8002932:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 8002936:	b1e5      	cbz	r5, 8002972 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12e>
 8002938:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 800293a:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 800293e:	4630      	mov	r0, r6
 8002940:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8002942:	f8c5 a008 	str.w	sl, [r5, #8]
 8002946:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8002948:	63f5      	str	r5, [r6, #60]	; 0x3c
 800294a:	4798      	blx	r3
    newPresenter->activate();
 800294c:	682b      	ldr	r3, [r5, #0]
 800294e:	4628      	mov	r0, r5
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002954:	4621      	mov	r1, r4
 8002956:	4630      	mov	r0, r6
 8002958:	f016 f950 	bl	8018bfc <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800295c:	6823      	ldr	r3, [r4, #0]
 800295e:	4620      	mov	r0, r4
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	4798      	blx	r3
    newTransition->invalidate();
 8002964:	6823      	ldr	r3, [r4, #0]
 8002966:	4620      	mov	r0, r4
 8002968:	695b      	ldr	r3, [r3, #20]
}
 800296a:	b001      	add	sp, #4
 800296c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002970:	4718      	bx	r3
    model->bind(newPresenter);
 8002972:	462b      	mov	r3, r5
 8002974:	e7e1      	b.n	800293a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xf6>
 8002976:	bf00      	nop
 8002978:	080248f0 	.word	0x080248f0
 800297c:	0802497e 	.word	0x0802497e
 8002980:	08024a82 	.word	0x08024a82
 8002984:	08024ad7 	.word	0x08024ad7
 8002988:	08024b7a 	.word	0x08024b7a
 800298c:	08024c8c 	.word	0x08024c8c
 8002990:	2400eb18 	.word	0x2400eb18
 8002994:	2400eb14 	.word	0x2400eb14

08002998 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8002998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800299a:	4604      	mov	r4, r0
 800299c:	4617      	mov	r7, r2
 800299e:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 80029a0:	f014 fc90 	bl	80172c4 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 80029a4:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
          pendingScreenTransitionCallback(0)
 80029a6:	2500      	movs	r5, #0
        instance = this;
 80029a8:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80029aa:	4629      	mov	r1, r5
      model(m)
 80029ac:	4b0f      	ldr	r3, [pc, #60]	; (80029ec <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 80029ae:	e9c4 7655 	strd	r7, r6, [r4, #340]	; 0x154
        return instance;
 80029b2:	4e0f      	ldr	r6, [pc, #60]	; (80029f0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 80029b4:	6023      	str	r3, [r4, #0]
 80029b6:	6830      	ldr	r0, [r6, #0]
        : pobject(0), pmemfun(0)
 80029b8:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 80029ba:	e9c4 5553 	strd	r5, r5, [r4, #332]	; 0x14c
 80029be:	e9c4 3551 	strd	r3, r5, [r4, #324]	; 0x144
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80029c2:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 80029c4:	e9c4 554f 	strd	r5, r5, [r4, #316]	; 0x13c
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 80029cc:	4628      	mov	r0, r5
 80029ce:	f003 fea7 	bl	8006720 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80029d2:	6833      	ldr	r3, [r6, #0]
 80029d4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80029d8:	b10a      	cbz	r2, 80029de <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 80029da:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80029dc:	b900      	cbnz	r0, 80029e0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 80029de:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80029e0:	f01b f80b 	bl	801d9fa <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 80029e4:	4620      	mov	r0, r4
 80029e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029e8:	2400eb24 	.word	0x2400eb24
 80029ec:	08024c40 	.word	0x08024c40
 80029f0:	2400ead0 	.word	0x2400ead0
 80029f4:	08024c28 	.word	0x08024c28

080029f8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 80029fa:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 80029fe:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8002a02:	2300      	movs	r3, #0
 8002a04:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8002a08:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8002a0c:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	08002845 	.word	0x08002845

08002a18 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8002a18:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002a1a:	4770      	bx	lr

08002a1c <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8002a1c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002a1e:	4770      	bx	lr

08002a20 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8002a20:	4770      	bx	lr

08002a22 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8002a22:	888b      	ldrh	r3, [r1, #4]
 8002a24:	69c0      	ldr	r0, [r0, #28]
 8002a26:	0adb      	lsrs	r3, r3, #11
 8002a28:	680a      	ldr	r2, [r1, #0]
 8002a2a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8002a2e:	4410      	add	r0, r2
 8002a30:	4770      	bx	lr

08002a32 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8002a32:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 8002a34:	b1c2      	cbz	r2, 8002a68 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8002a36:	7b13      	ldrb	r3, [r2, #12]
 8002a38:	b1b3      	cbz	r3, 8002a68 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8002a3a:	7b54      	ldrb	r4, [r2, #13]
 8002a3c:	7ad2      	ldrb	r2, [r2, #11]
 8002a3e:	0224      	lsls	r4, r4, #8
 8002a40:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8002a44:	4314      	orrs	r4, r2
 8002a46:	6a02      	ldr	r2, [r0, #32]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8002a48:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8002a4a:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 8002a4e:	8813      	ldrh	r3, [r2, #0]
 8002a50:	428b      	cmp	r3, r1
 8002a52:	d102      	bne.n	8002a5a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8002a54:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 8002a58:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8002a5a:	d805      	bhi.n	8002a68 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8002a5c:	3801      	subs	r0, #1
 8002a5e:	3204      	adds	r2, #4
 8002a60:	b280      	uxth	r0, r0
 8002a62:	2800      	cmp	r0, #0
 8002a64:	d1f3      	bne.n	8002a4e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8002a66:	e7f7      	b.n	8002a58 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8002a68:	2000      	movs	r0, #0
 8002a6a:	e7f5      	b.n	8002a58 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08002a6c <_ZN8touchgfx13GeneratedFontD0Ev>:
 8002a6c:	b510      	push	{r4, lr}
 8002a6e:	4604      	mov	r4, r0
 8002a70:	212c      	movs	r1, #44	; 0x2c
 8002a72:	f020 f908 	bl	8022c86 <_ZdlPvj>
 8002a76:	4620      	mov	r0, r4
 8002a78:	bd10      	pop	{r4, pc}
	...

08002a7c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8002a7c:	b530      	push	{r4, r5, lr}
 8002a7e:	b08b      	sub	sp, #44	; 0x2c
 8002a80:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8002a82:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
 8002a86:	9508      	str	r5, [sp, #32]
 8002a88:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 8002a8c:	9507      	str	r5, [sp, #28]
 8002a8e:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8002a92:	9506      	str	r5, [sp, #24]
 8002a94:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 8002a98:	9505      	str	r5, [sp, #20]
 8002a9a:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8002a9e:	9504      	str	r5, [sp, #16]
 8002aa0:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8002aa4:	9503      	str	r5, [sp, #12]
 8002aa6:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8002aaa:	9502      	str	r5, [sp, #8]
 8002aac:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8002ab0:	9501      	str	r5, [sp, #4]
 8002ab2:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8002ab6:	9500      	str	r5, [sp, #0]
 8002ab8:	f015 fc30 	bl	801831c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8002abc:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 8002abe:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8002ac0:	6023      	str	r3, [r4, #0]
 8002ac2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002ac4:	61e3      	str	r3, [r4, #28]
 8002ac6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002ac8:	6223      	str	r3, [r4, #32]
 8002aca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002acc:	6263      	str	r3, [r4, #36]	; 0x24
 8002ace:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8002ad0:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002ad2:	b00b      	add	sp, #44	; 0x2c
 8002ad4:	bd30      	pop	{r4, r5, pc}
 8002ad6:	bf00      	nop
 8002ad8:	08024cb0 	.word	0x08024cb0

08002adc <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 8002adc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002ade:	4770      	bx	lr

08002ae0 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8002ae0:	4770      	bx	lr

08002ae2 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8002ae2:	4770      	bx	lr

08002ae4 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8002ae4:	4770      	bx	lr

08002ae6 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8002ae6:	4770      	bx	lr

08002ae8 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8002ae8:	4770      	bx	lr

08002aea <_ZN8touchgfx17AbstractDataGraph8setAlphaEh>:
     *
     * @note All graph elements have to take this alpha into consideration.
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8002aea:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    }
 8002aee:	4770      	bx	lr

08002af0 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>:
     * @param  min The minimum x value.
     * @param  max The maximum x value.
     *
     * @note The graph as well as the area above and below are automatically redrawn (invalidated).
     */
    virtual void setGraphRangeX(int min, int max)
 8002af0:	b410      	push	{r4}
    {
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8002af2:	6803      	ldr	r3, [r0, #0]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int int2scaledX(int i) const
    {
        return int2scaled(i, xScale);
 8002af4:	6b04      	ldr	r4, [r0, #48]	; 0x30
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8002af6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002afa:	4362      	muls	r2, r4
 8002afc:	4361      	muls	r1, r4
    }
 8002afe:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8002b02:	4718      	bx	r3

08002b04 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff>:
     *
     * @return The product of the two numbers, rounded to nearest integer value.
     */
    FORCE_INLINE_FUNCTION static int float2scaled(float f, int scale)
    {
        const float fs = f * (float)scale;
 8002b04:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8002b08:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8002b0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8002b0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
        const float fs = f * (float)scale;
 8002b12:	ee20 0a27 	vmul.f32	s0, s0, s15
        if (fs >= 0)
 8002b16:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1e:	db17      	blt.n	8002b50 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x4c>
        {
            return (int)(fs + 0.5f);
 8002b20:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b24:	ee30 0a07 	vadd.f32	s0, s0, s14
 8002b28:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8002b2c:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 8002b30:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 8002b34:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8002b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b3c:	db1c      	blt.n	8002b78 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x74>
            return (int)(fs + 0.5f);
 8002b3e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002b42:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8002b46:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8002b4a:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8002b4e:	4718      	bx	r3
        }
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8002b50:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8002b54:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002b58:	ee17 2a10 	vmov	r2, s14
 8002b5c:	1e51      	subs	r1, r2, #1
 8002b5e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8002b62:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8002b66:	ee30 0a26 	vadd.f32	s0, s0, s13
 8002b6a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002b6e:	ee10 2a10 	vmov	r2, s0
 8002b72:	440a      	add	r2, r1
 8002b74:	4611      	mov	r1, r2
 8002b76:	e7db      	b.n	8002b30 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x2c>
 8002b78:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8002b7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b80:	ee17 2a90 	vmov	r2, s15
 8002b84:	3a01      	subs	r2, #1
 8002b86:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8002b8a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002b8e:	ee70 0a87 	vadd.f32	s1, s1, s14
 8002b92:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8002b96:	ee10 ca90 	vmov	ip, s1
 8002b9a:	4494      	add	ip, r2
 8002b9c:	4662      	mov	r2, ip
 8002b9e:	e7d6      	b.n	8002b4e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x4a>

08002ba0 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi>:
    virtual void setGraphRangeXAuto(bool showYaxis = true, int margin = 0)
 8002ba0:	b410      	push	{r4}
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8002ba2:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 8002ba4:	6b04      	ldr	r4, [r0, #48]	; 0x30
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8002ba6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002baa:	4362      	muls	r2, r4
    }
 8002bac:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8002bb0:	4718      	bx	r3

08002bb2 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf>:
        const float fs = f * (float)scale;
 8002bb2:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8002bb6:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8002bb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8002bbc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
        const float fs = f * (float)scale;
 8002bc0:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 8002bc4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bcc:	db08      	blt.n	8002be0 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x2e>
            return (int)(fs + 0.5f);
 8002bce:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002bd2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002bd6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002bda:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8002bde:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8002be0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002be4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002be8:	ee17 2a90 	vmov	r2, s15
 8002bec:	3a01      	subs	r2, #1
 8002bee:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002bf2:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002bf6:	ee30 0a07 	vadd.f32	s0, s0, s14
 8002bfa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002bfe:	ee10 ca10 	vmov	ip, s0
 8002c02:	4494      	add	ip, r2
 8002c04:	4662      	mov	r2, ip
 8002c06:	e7ea      	b.n	8002bde <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x2c>

08002c08 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>:
    virtual void setGraphRangeY(int min, int max)
 8002c08:	b410      	push	{r4}
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8002c0a:	6803      	ldr	r3, [r0, #0]
        return int2scaled(i, yScale);
 8002c0c:	6b44      	ldr	r4, [r0, #52]	; 0x34
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8002c0e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002c12:	4362      	muls	r2, r4
 8002c14:	4361      	muls	r1, r4
    }
 8002c16:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8002c1a:	4718      	bx	r3

08002c1c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff>:
        const float fs = f * (float)scale;
 8002c1c:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8002c20:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8002c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8002c26:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
        const float fs = f * (float)scale;
 8002c2a:	ee20 0a27 	vmul.f32	s0, s0, s15
        if (fs >= 0)
 8002c2e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c36:	db17      	blt.n	8002c68 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x4c>
            return (int)(fs + 0.5f);
 8002c38:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c3c:	ee30 0a07 	vadd.f32	s0, s0, s14
 8002c40:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8002c44:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 8002c48:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 8002c4c:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8002c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c54:	db1c      	blt.n	8002c90 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x74>
            return (int)(fs + 0.5f);
 8002c56:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002c5a:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8002c5e:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8002c62:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8002c66:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8002c68:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8002c6c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002c70:	ee17 2a10 	vmov	r2, s14
 8002c74:	1e51      	subs	r1, r2, #1
 8002c76:	ee30 0a66 	vsub.f32	s0, s0, s13
 8002c7a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8002c7e:	ee30 0a26 	vadd.f32	s0, s0, s13
 8002c82:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002c86:	ee10 2a10 	vmov	r2, s0
 8002c8a:	440a      	add	r2, r1
 8002c8c:	4611      	mov	r1, r2
 8002c8e:	e7db      	b.n	8002c48 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x2c>
 8002c90:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8002c94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c98:	ee17 2a90 	vmov	r2, s15
 8002c9c:	3a01      	subs	r2, #1
 8002c9e:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8002ca2:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002ca6:	ee70 0a87 	vadd.f32	s1, s1, s14
 8002caa:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8002cae:	ee10 ca90 	vmov	ip, s1
 8002cb2:	4494      	add	ip, r2
 8002cb4:	4662      	mov	r2, ip
 8002cb6:	e7d6      	b.n	8002c66 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x4a>

08002cb8 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbi>:
    virtual void setGraphRangeYAuto(bool showXaxis = true, int margin = 0)
 8002cb8:	b410      	push	{r4}
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8002cba:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 8002cbc:	6b44      	ldr	r4, [r0, #52]	; 0x34
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8002cbe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002cc2:	4362      	muls	r2, r4
    }
 8002cc4:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8002cc8:	4718      	bx	r3

08002cca <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf>:
        const float fs = f * (float)scale;
 8002cca:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8002cce:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8002cd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8002cd4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
        const float fs = f * (float)scale;
 8002cd8:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 8002cdc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce4:	db08      	blt.n	8002cf8 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x2e>
            return (int)(fs + 0.5f);
 8002ce6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002cea:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002cee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002cf2:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8002cf6:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8002cf8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002cfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d00:	ee17 2a90 	vmov	r2, s15
 8002d04:	3a01      	subs	r2, #1
 8002d06:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002d0a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002d0e:	ee30 0a07 	vadd.f32	s0, s0, s14
 8002d12:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002d16:	ee10 ca10 	vmov	ip, s0
 8002d1a:	4494      	add	ip, r2
 8002d1c:	4662      	mov	r2, ip
 8002d1e:	e7ea      	b.n	8002cf6 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x2c>

08002d20 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>:
        return scaled2intX(graphRangeMinX);
 8002d20:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int scaled2intX(int i) const
    {
        return scaled2int(i, xScale);
 8002d24:	6b02      	ldr	r2, [r0, #48]	; 0x30
        if (i >= 0)
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	db07      	blt.n	8002d3a <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8002d2a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002d2e:	fb93 f0f2 	sdiv	r0, r3, r2
 8002d32:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002d36:	1040      	asrs	r0, r0, #1
 8002d38:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8002d3a:	f06f 0001 	mvn.w	r0, #1
 8002d3e:	fb00 2003 	mla	r0, r0, r3, r2
 8002d42:	3801      	subs	r0, #1
 8002d44:	fb90 f0f2 	sdiv	r0, r0, r2
 8002d48:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002d4c:	1040      	asrs	r0, r0, #1
 8002d4e:	4240      	negs	r0, r0
    }
 8002d50:	4770      	bx	lr

08002d52 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMinAsFloatEv>:
     *
     * @return The number divided by the scale.
     */
    FORCE_INLINE_FUNCTION static float scaled2float(int i, int scale)
    {
        return (float)i / (float)scale;
 8002d52:	edd0 7a4b 	vldr	s15, [r0, #300]	; 0x12c
 8002d56:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002d5a:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8002d5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8002d62:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8002d66:	4770      	bx	lr

08002d68 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMinScaledEv>:
    }
 8002d68:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
 8002d6c:	4770      	bx	lr

08002d6e <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>:
        return scaled2intX(graphRangeMaxX);
 8002d6e:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
        return scaled2int(i, xScale);
 8002d72:	6b02      	ldr	r2, [r0, #48]	; 0x30
        if (i >= 0)
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	db07      	blt.n	8002d88 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8002d78:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002d7c:	fb93 f0f2 	sdiv	r0, r3, r2
 8002d80:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002d84:	1040      	asrs	r0, r0, #1
 8002d86:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8002d88:	f06f 0001 	mvn.w	r0, #1
 8002d8c:	fb00 2003 	mla	r0, r0, r3, r2
 8002d90:	3801      	subs	r0, #1
 8002d92:	fb90 f0f2 	sdiv	r0, r0, r2
 8002d96:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002d9a:	1040      	asrs	r0, r0, #1
 8002d9c:	4240      	negs	r0, r0
    }
 8002d9e:	4770      	bx	lr

08002da0 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMaxAsFloatEv>:
        return (float)i / (float)scale;
 8002da0:	edd0 7a4c 	vldr	s15, [r0, #304]	; 0x130
 8002da4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002da8:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8002dac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8002db0:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8002db4:	4770      	bx	lr

08002db6 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMaxScaledEv>:
    }
 8002db6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
 8002dba:	4770      	bx	lr

08002dbc <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>:
        return scaled2intY(graphRangeMinY);
 8002dbc:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
        return scaled2int(i, yScale);
 8002dc0:	6b42      	ldr	r2, [r0, #52]	; 0x34
        if (i >= 0)
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	db07      	blt.n	8002dd6 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8002dc6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002dca:	fb93 f0f2 	sdiv	r0, r3, r2
 8002dce:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002dd2:	1040      	asrs	r0, r0, #1
 8002dd4:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8002dd6:	f06f 0001 	mvn.w	r0, #1
 8002dda:	fb00 2003 	mla	r0, r0, r3, r2
 8002dde:	3801      	subs	r0, #1
 8002de0:	fb90 f0f2 	sdiv	r0, r0, r2
 8002de4:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002de8:	1040      	asrs	r0, r0, #1
 8002dea:	4240      	negs	r0, r0
    }
 8002dec:	4770      	bx	lr

08002dee <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMinAsFloatEv>:
        return (float)i / (float)scale;
 8002dee:	edd0 7a4d 	vldr	s15, [r0, #308]	; 0x134
 8002df2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002df6:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
 8002dfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8002dfe:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8002e02:	4770      	bx	lr

08002e04 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMinScaledEv>:
    }
 8002e04:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
 8002e08:	4770      	bx	lr

08002e0a <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>:
        return scaled2intY(graphRangeMaxY);
 8002e0a:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
        return scaled2int(i, yScale);
 8002e0e:	6b42      	ldr	r2, [r0, #52]	; 0x34
        if (i >= 0)
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	db07      	blt.n	8002e24 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8002e14:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002e18:	fb93 f0f2 	sdiv	r0, r3, r2
 8002e1c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002e20:	1040      	asrs	r0, r0, #1
 8002e22:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8002e24:	f06f 0001 	mvn.w	r0, #1
 8002e28:	fb00 2003 	mla	r0, r0, r3, r2
 8002e2c:	3801      	subs	r0, #1
 8002e2e:	fb90 f0f2 	sdiv	r0, r0, r2
 8002e32:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002e36:	1040      	asrs	r0, r0, #1
 8002e38:	4240      	negs	r0, r0
    }
 8002e3a:	4770      	bx	lr

08002e3c <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMaxAsFloatEv>:
        return (float)i / (float)scale;
 8002e3c:	edd0 7a4e 	vldr	s15, [r0, #312]	; 0x138
 8002e40:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002e44:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
 8002e48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8002e4c:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8002e50:	4770      	bx	lr

08002e52 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMaxScaledEv>:
    }
 8002e52:	f8d0 0138 	ldr.w	r0, [r0, #312]	; 0x138
 8002e56:	4770      	bx	lr

08002e58 <_ZN8touchgfx16DynamicDataGraph8setScaleEib>:
     * @note The current xAxisFactor, xAxisOffet and xGraphRange values are updated to reflect the
     *       new scale being set.
     */
    virtual void setScale(int scale, bool updateData = false)
    {
        setScaleX(scale, updateData);
 8002e58:	6803      	ldr	r3, [r0, #0]
    virtual void setScale(int scale, bool updateData = false)
 8002e5a:	b570      	push	{r4, r5, r6, lr}
 8002e5c:	4604      	mov	r4, r0
        setScaleX(scale, updateData);
 8002e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    virtual void setScale(int scale, bool updateData = false)
 8002e62:	460d      	mov	r5, r1
 8002e64:	4616      	mov	r6, r2
        setScaleX(scale, updateData);
 8002e66:	4798      	blx	r3
        setScaleY(scale, updateData);
 8002e68:	6823      	ldr	r3, [r4, #0]
 8002e6a:	4632      	mov	r2, r6
 8002e6c:	4629      	mov	r1, r5
 8002e6e:	4620      	mov	r0, r4
 8002e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    }
 8002e74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setScaleY(scale, updateData);
 8002e78:	4718      	bx	r3

08002e7a <_ZNK8touchgfx16DynamicDataGraph8getScaleEv>:
     *
     * @see setScale
     */
    virtual int getScale() const
    {
        return getScaleY();
 8002e7a:	6803      	ldr	r3, [r0, #0]
 8002e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e80:	4718      	bx	r3

08002e82 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMinEv>:
     *
     * @return The minimum x coordinate .
     */
    virtual int getGraphRangeXMin() const
    {
        return getGraphRangeXMinScaled();
 8002e82:	6803      	ldr	r3, [r0, #0]
 8002e84:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002e88:	4718      	bx	r3

08002e8a <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMaxEv>:
     *
     * @return The maximum x coordinate .
     */
    virtual int getGraphRangeXMax() const
    {
        return getGraphRangeXMaxScaled();
 8002e8a:	6803      	ldr	r3, [r0, #0]
 8002e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e90:	4718      	bx	r3

08002e92 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi>:

    virtual void setGraphRangeYAutoScaled(bool showXaxis, int margin);

    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
    {
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8002e92:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
 8002e94:	2a00      	cmp	r2, #0
    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
 8002e96:	b410      	push	{r4}
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8002e98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
        return scaled2int(i, xScale);
 8002e9c:	6b04      	ldr	r4, [r0, #48]	; 0x30
        if (i >= 0)
 8002e9e:	db0e      	blt.n	8002ebe <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x2c>
            return ((i * 2 + scale) / scale) / 2;
 8002ea0:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8002ea4:	fb92 f1f4 	sdiv	r1, r2, r4
 8002ea8:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8002eac:	1049      	asrs	r1, r1, #1
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8002eae:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
    }
 8002eb2:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8002eb6:	3a01      	subs	r2, #1
 8002eb8:	440a      	add	r2, r1
 8002eba:	4249      	negs	r1, r1
 8002ebc:	4718      	bx	r3
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8002ebe:	f06f 0101 	mvn.w	r1, #1
 8002ec2:	fb01 4102 	mla	r1, r1, r2, r4
 8002ec6:	3901      	subs	r1, #1
 8002ec8:	fb91 f1f4 	sdiv	r1, r1, r4
 8002ecc:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8002ed0:	1049      	asrs	r1, r1, #1
 8002ed2:	4249      	negs	r1, r1
 8002ed4:	e7eb      	b.n	8002eae <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x1c>

08002ed6 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(int scale))
    {
        setXAxisFactor(scale);
 8002ed6:	6803      	ldr	r3, [r0, #0]
 8002ed8:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002edc:	4718      	bx	r3

08002ede <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi>:
        return i * scale;
 8002ede:	6b02      	ldr	r2, [r0, #48]	; 0x30
     *
     * @param  factor The x axis factor.
     */
    virtual void setXAxisFactor(int factor)
    {
        setXAxisFactorScaled(int2scaledX(factor));
 8002ee0:	6803      	ldr	r3, [r0, #0]
 8002ee2:	4351      	muls	r1, r2
 8002ee4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002ee8:	4718      	bx	r3

08002eea <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf>:
    }

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(float scale))
    {
        setXAxisFactor(scale);
 8002eea:	6803      	ldr	r3, [r0, #0]
 8002eec:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8002ef0:	4718      	bx	r3

08002ef2 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf>:
        const float fs = f * (float)scale;
 8002ef2:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
    /// @endcond

    /** @copydoc setXAxisFactor(int) */
    virtual void setXAxisFactor(float factor)
    {
        setXAxisFactorScaled(float2scaledX(factor));
 8002ef6:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8002ef8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisFactorScaled(float2scaledX(factor));
 8002efc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
        const float fs = f * (float)scale;
 8002f00:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 8002f04:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f0c:	db08      	blt.n	8002f20 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x2e>
            return (int)(fs + 0.5f);
 8002f0e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002f12:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002f16:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002f1a:	ee17 1a90 	vmov	r1, s15
        setXAxisFactorScaled(float2scaledX(factor));
 8002f1e:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8002f20:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002f24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f28:	ee17 2a90 	vmov	r2, s15
 8002f2c:	1e51      	subs	r1, r2, #1
 8002f2e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002f32:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002f36:	ee30 0a07 	vadd.f32	s0, s0, s14
 8002f3a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002f3e:	ee10 2a10 	vmov	r2, s0
 8002f42:	440a      	add	r2, r1
 8002f44:	4611      	mov	r1, r2
 8002f46:	e7ea      	b.n	8002f1e <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x2c>

08002f48 <_ZN8touchgfx16DynamicDataGraph20setXAxisFactorScaledEi>:
     *
     * @see setXAxisFactorScaled,setXAxisFactor
     */
    virtual void setXAxisFactorScaled(int factor)
    {
        xAxisFactor = factor;
 8002f48:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    }
 8002f4c:	4770      	bx	lr

08002f4e <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsInt()", virtual int getXAxisScaleAsInt() const)
    {
        return getXAxisFactorAsInt();
 8002f4e:	6803      	ldr	r3, [r0, #0]
 8002f50:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002f54:	4718      	bx	r3

08002f56 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv>:
     *
     * @return The x axis factor.
     */
    virtual int getXAxisFactorAsInt() const
    {
        return scaled2intX(getXAxisFactorScaled());
 8002f56:	6803      	ldr	r3, [r0, #0]
    virtual int getXAxisFactorAsInt() const
 8002f58:	b510      	push	{r4, lr}
        return scaled2intX(getXAxisFactorScaled());
 8002f5a:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
    virtual int getXAxisFactorAsInt() const
 8002f5e:	4604      	mov	r4, r0
        return scaled2intX(getXAxisFactorScaled());
 8002f60:	4798      	blx	r3
        if (i >= 0)
 8002f62:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
 8002f64:	6b23      	ldr	r3, [r4, #48]	; 0x30
        if (i >= 0)
 8002f66:	db07      	blt.n	8002f78 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x22>
            return ((i * 2 + scale) / scale) / 2;
 8002f68:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002f6c:	fb90 f0f3 	sdiv	r0, r0, r3
 8002f70:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002f74:	1040      	asrs	r0, r0, #1
    }
 8002f76:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8002f78:	f06f 0201 	mvn.w	r2, #1
 8002f7c:	fb02 3000 	mla	r0, r2, r0, r3
 8002f80:	3801      	subs	r0, #1
 8002f82:	fb90 f0f3 	sdiv	r0, r0, r3
 8002f86:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002f8a:	1040      	asrs	r0, r0, #1
 8002f8c:	4240      	negs	r0, r0
        return scaled2intX(getXAxisFactorScaled());
 8002f8e:	e7f2      	b.n	8002f76 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x20>

08002f90 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsFloat()", virtual float getXAxisScaleAsFloat() const)
    {
        return getXAxisFactorAsFloat();
 8002f90:	6803      	ldr	r3, [r0, #0]
 8002f92:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8002f96:	4718      	bx	r3

08002f98 <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv>:
    /// @endcond

    /** @copydoc getXAxisFactorAsInt() */
    virtual float getXAxisFactorAsFloat() const
    {
        return scaled2floatX(getXAxisFactorScaled());
 8002f98:	6803      	ldr	r3, [r0, #0]
    virtual float getXAxisFactorAsFloat() const
 8002f9a:	b510      	push	{r4, lr}
        return scaled2floatX(getXAxisFactorScaled());
 8002f9c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
    virtual float getXAxisFactorAsFloat() const
 8002fa0:	4604      	mov	r4, r0
        return scaled2floatX(getXAxisFactorScaled());
 8002fa2:	4798      	blx	r3
        return (float)i / (float)scale;
 8002fa4:	ee07 0a90 	vmov	s15, r0
 8002fa8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002fac:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 8002fb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8002fb4:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8002fb8:	bd10      	pop	{r4, pc}

08002fba <_ZNK8touchgfx16DynamicDataGraph20getXAxisFactorScaledEv>:
     * @see getXAxisFactorAsInt, getXAxisFactorAsFloat, setXAxisFactor
     */
    virtual int getXAxisFactorScaled() const
    {
        return xAxisFactor;
    }
 8002fba:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 8002fbe:	4770      	bx	lr

08002fc0 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi>:
        return i * scale;
 8002fc0:	6b02      	ldr	r2, [r0, #48]	; 0x30
     *
     * @param  offset The x axis offset.
     */
    virtual void setXAxisOffset(int offset)
    {
        setXAxisOffsetScaled(int2scaledX(offset));
 8002fc2:	6803      	ldr	r3, [r0, #0]
 8002fc4:	4351      	muls	r1, r2
 8002fc6:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8002fca:	4718      	bx	r3

08002fcc <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf>:
        const float fs = f * (float)scale;
 8002fcc:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
    }

    /** @copydoc setXAxisOffset(int) */
    virtual void setXAxisOffset(float offset)
    {
        setXAxisOffsetScaled(float2scaledX(offset));
 8002fd0:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8002fd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisOffsetScaled(float2scaledX(offset));
 8002fd6:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
        const float fs = f * (float)scale;
 8002fda:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 8002fde:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe6:	db08      	blt.n	8002ffa <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x2e>
            return (int)(fs + 0.5f);
 8002fe8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002fec:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002ff0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002ff4:	ee17 1a90 	vmov	r1, s15
        setXAxisOffsetScaled(float2scaledX(offset));
 8002ff8:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8002ffa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002ffe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003002:	ee17 2a90 	vmov	r2, s15
 8003006:	1e51      	subs	r1, r2, #1
 8003008:	ee30 0a47 	vsub.f32	s0, s0, s14
 800300c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003010:	ee30 0a07 	vadd.f32	s0, s0, s14
 8003014:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003018:	ee10 2a10 	vmov	r2, s0
 800301c:	440a      	add	r2, r1
 800301e:	4611      	mov	r1, r2
 8003020:	e7ea      	b.n	8002ff8 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x2c>

08003022 <_ZN8touchgfx16DynamicDataGraph20setXAxisOffsetScaledEi>:
     *
     * @see setXAxisOffset, getXAxisOffsetScaled
     */
    virtual void setXAxisOffsetScaled(int offset)
    {
        xAxisOffset = offset;
 8003022:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    }
 8003026:	4770      	bx	lr

08003028 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv>:
     *
     * @return The x axis offset.
     */
    virtual int getXAxisOffsetAsInt() const
    {
        return scaled2intX(getXAxisOffsetScaled());
 8003028:	6803      	ldr	r3, [r0, #0]
    virtual int getXAxisOffsetAsInt() const
 800302a:	b510      	push	{r4, lr}
        return scaled2intX(getXAxisOffsetScaled());
 800302c:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
    virtual int getXAxisOffsetAsInt() const
 8003030:	4604      	mov	r4, r0
        return scaled2intX(getXAxisOffsetScaled());
 8003032:	4798      	blx	r3
        if (i >= 0)
 8003034:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
 8003036:	6b23      	ldr	r3, [r4, #48]	; 0x30
        if (i >= 0)
 8003038:	db07      	blt.n	800304a <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x22>
            return ((i * 2 + scale) / scale) / 2;
 800303a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800303e:	fb90 f0f3 	sdiv	r0, r0, r3
 8003042:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8003046:	1040      	asrs	r0, r0, #1
    }
 8003048:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800304a:	f06f 0201 	mvn.w	r2, #1
 800304e:	fb02 3000 	mla	r0, r2, r0, r3
 8003052:	3801      	subs	r0, #1
 8003054:	fb90 f0f3 	sdiv	r0, r0, r3
 8003058:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800305c:	1040      	asrs	r0, r0, #1
 800305e:	4240      	negs	r0, r0
        return scaled2intX(getXAxisOffsetScaled());
 8003060:	e7f2      	b.n	8003048 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x20>

08003062 <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv>:

    /** @copydoc getXAxisOffsetAsInt() */
    virtual float getXAxisOffsetAsFloat() const
    {
        return scaled2floatX(getXAxisOffsetScaled());
 8003062:	6803      	ldr	r3, [r0, #0]
    virtual float getXAxisOffsetAsFloat() const
 8003064:	b510      	push	{r4, lr}
        return scaled2floatX(getXAxisOffsetScaled());
 8003066:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
    virtual float getXAxisOffsetAsFloat() const
 800306a:	4604      	mov	r4, r0
        return scaled2floatX(getXAxisOffsetScaled());
 800306c:	4798      	blx	r3
        return (float)i / (float)scale;
 800306e:	ee07 0a90 	vmov	s15, r0
 8003072:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003076:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 800307a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 800307e:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003082:	bd10      	pop	{r4, pc}

08003084 <_ZNK8touchgfx16DynamicDataGraph20getXAxisOffsetScaledEv>:
     * @see getXAxisOffsetAsInt, getXAxisOffsetAsFloat, setXAxisOffsetScaled, setXAxisOffset
     */
    virtual int getXAxisOffsetScaled() const
    {
        return xAxisOffset;
    }
 8003084:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 8003088:	4770      	bx	lr

0800308a <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii>:
    }

    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
    {
        // Value is also index for these types of graphs.
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 800308a:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
 800308c:	2900      	cmp	r1, #0
        return scaled2int(i, xScale);
 800308e:	6b02      	ldr	r2, [r0, #48]	; 0x30
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 8003090:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
 8003094:	b510      	push	{r4, lr}
 8003096:	4604      	mov	r4, r0
        if (i >= 0)
 8003098:	db0e      	blt.n	80030b8 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x2e>
            return ((i * 2 + scale) / scale) / 2;
 800309a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800309e:	fb91 f1f2 	sdiv	r1, r1, r2
 80030a2:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80030a6:	1049      	asrs	r1, r1, #1
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 80030a8:	b209      	sxth	r1, r1
 80030aa:	4620      	mov	r0, r4
 80030ac:	4798      	blx	r3
 80030ae:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	; 0x13c
    }
 80030b2:	fb02 3000 	mla	r0, r2, r0, r3
 80030b6:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80030b8:	f06f 0001 	mvn.w	r0, #1
 80030bc:	fb00 2101 	mla	r1, r0, r1, r2
 80030c0:	3901      	subs	r1, #1
 80030c2:	fb91 f1f2 	sdiv	r1, r1, r2
 80030c6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80030ca:	1049      	asrs	r1, r1, #1
 80030cc:	4249      	negs	r1, r1
 80030ce:	e7eb      	b.n	80030a8 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x1e>

080030d0 <_ZNK8touchgfx16DynamicDataGraph9getScaleXEv>:
    virtual void setScaleX(int scale, bool updateData = false);

    virtual int getScaleX() const
    {
        return AbstractDataGraph::getScaleX();
    }
 80030d0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80030d2:	4770      	bx	lr

080030d4 <_ZNK8touchgfx16DynamicDataGraph9getScaleYEv>:
    virtual void setScaleY(int scale, bool updateData = false);

    virtual int getScaleY() const
    {
        return AbstractDataGraph::getScaleY();
    }
 80030d4:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80030d6:	4770      	bx	lr

080030d8 <_ZN8touchgfx16DynamicDataGraph19setXAxisScaleScaledEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactorScaled()", virtual void setXAxisScaleScaled(int scale))
    {
        setXAxisFactorScaled(scale);
 80030d8:	6803      	ldr	r3, [r0, #0]
 80030da:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80030de:	4718      	bx	r3

080030e0 <_ZNK8touchgfx16DynamicDataGraph19getXAxisScaleScaledEv>:
    /// @endcond

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorScaled()", virtual int getXAxisScaleScaled() const)
    {
        return getXAxisFactorScaled();
 80030e0:	6803      	ldr	r3, [r0, #0]
 80030e2:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80030e6:	4718      	bx	r3

080030e8 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es>:
        return i * scale;
 80030e8:	6b02      	ldr	r2, [r0, #48]	; 0x30

    /// @endcond

    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
    {
        return valueToScreenXQ5(int2scaledX(index));
 80030ea:	6803      	ldr	r3, [r0, #0]
 80030ec:	4351      	muls	r1, r2
 80030ee:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80030f2:	4718      	bx	r3

080030f4 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es>:
    }

    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
    {
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 80030f4:	6803      	ldr	r3, [r0, #0]
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 80030f6:	b570      	push	{r4, r5, r6, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 80030f8:	f8d3 5118 	ldr.w	r5, [r3, #280]	; 0x118
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 80030fc:	4604      	mov	r4, r0
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 80030fe:	f8d0 6144 	ldr.w	r6, [r0, #324]	; 0x144
 8003102:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8003106:	4798      	blx	r3
 8003108:	462b      	mov	r3, r5
 800310a:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
 800310e:	4620      	mov	r0, r4
    }
 8003110:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 8003114:	4718      	bx	r3

08003116 <_ZNK8touchgfx15GraphScrollData9dataIndexEs>:

    virtual int16_t addValue(int value);

    virtual int16_t dataIndex(int16_t screenIndex) const
    {
        return usedCapacity < maxCapacity ? screenIndex : (screenIndex + current) % maxCapacity;
 8003116:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	; 0x11c
 800311a:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 800311e:	4293      	cmp	r3, r2
 8003120:	db07      	blt.n	8003132 <_ZNK8touchgfx15GraphScrollData9dataIndexEs+0x1c>
 8003122:	f9b0 314c 	ldrsh.w	r3, [r0, #332]	; 0x14c
 8003126:	4419      	add	r1, r3
 8003128:	fb91 f0f2 	sdiv	r0, r1, r2
 800312c:	fb02 1110 	mls	r1, r2, r0, r1
 8003130:	b209      	sxth	r1, r1
    }
 8003132:	4608      	mov	r0, r1
 8003134:	4770      	bx	lr

08003136 <_ZNK8touchgfx15GraphScrollData10indexToXQ5Es>:

private:
    virtual CWRUtil::Q5 indexToXQ5(int16_t index) const
    {
        return CWRUtil::toQ5(index);
    }
 8003136:	0148      	lsls	r0, r1, #5
 8003138:	4770      	bx	lr

0800313a <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>:
     *
     * @see getColor
     */
    virtual void setColor(colortype newColor)
    {
        color = newColor;
 800313a:	62c1      	str	r1, [r0, #44]	; 0x2c
    }
 800313c:	4770      	bx	lr

0800313e <_ZNK8touchgfx25AbstractGraphElementNoCWR8getColorEv>:
     * @see setColor
     */
    virtual colortype getColor() const
    {
        return color;
    }
 800313e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8003140:	4770      	bx	lr

08003142 <_ZNK8touchgfx25AbstractGraphElementNoCWR16drawCanvasWidgetERKNS_4RectE>:

    virtual bool drawCanvasWidget(const Rect&) const
    {
        return true;
    }
 8003142:	2001      	movs	r0, #1
 8003144:	4770      	bx	lr

08003146 <_ZN8touchgfx25AbstractGraphElementNoCWR10setPainterERNS_15AbstractPainterE>:
    void normalizeRect(Rect& r) const;

private:
    virtual void setPainter(AbstractPainter& /*painter*/)
    {
    }
 8003146:	4770      	bx	lr

08003148 <_ZN8touchgfx20GraphElementGridBase22invalidateGraphPointAtEs>:
        return lineWidth;
    }

    virtual void invalidateGraphPointAt(int16_t)
    {
    }
 8003148:	4770      	bx	lr

0800314a <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
     *
     * @return The correctly scaled major interval.
     */
    virtual int getCorrectlyScaledMajorInterval(const AbstractDataGraph* graph) const
    {
        return majorGrid == 0 ? 0 : majorGrid->getCorrectlyScaledGridInterval(graph);
 800314a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800314c:	b118      	cbz	r0, 8003156 <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0xc>
 800314e:	6803      	ldr	r3, [r0, #0]
 8003150:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003154:	4718      	bx	r3
    }
 8003156:	4770      	bx	lr

08003158 <_ZNK8touchgfx17GraphElementGridX13enclosingAreaEPKNS_17AbstractDataGraphE>:
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8003158:	f8b2 111a 	ldrh.w	r1, [r2, #282]	; 0x11a
    {
        return convertToGraphScaleX(graph, gridInterval, dataScale);
    }

protected:
    virtual Rect enclosingArea(const AbstractDataGraph* graph) const
 800315c:	b530      	push	{r4, r5, lr}
        return topPadding;
 800315e:	f9b2 4114 	ldrsh.w	r4, [r2, #276]	; 0x114
        return rect.width;
 8003162:	f9b2 5040 	ldrsh.w	r5, [r2, #64]	; 0x40
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8003166:	4421      	add	r1, r4
 8003168:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800316c:	8044      	strh	r4, [r0, #2]
 800316e:	1a52      	subs	r2, r2, r1
 8003170:	2100      	movs	r1, #0
 8003172:	8085      	strh	r5, [r0, #4]
 8003174:	8001      	strh	r1, [r0, #0]
 8003176:	80c2      	strh	r2, [r0, #6]
    {
        return Rect(0, graph->getGraphAreaPaddingTop(), graph->getGraphAreaWidthIncludingPadding(), graph->getGraphAreaHeight());
    }
 8003178:	bd30      	pop	{r4, r5, pc}

0800317a <_ZNK8touchgfx17GraphElementGridX8lineRectEssss>:

    virtual Rect lineRect(int16_t start, int16_t length, int16_t pos, int16_t width) const
 800317a:	b510      	push	{r4, lr}
 800317c:	8042      	strh	r2, [r0, #2]
 800317e:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 8003182:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8003186:	8004      	strh	r4, [r0, #0]
 8003188:	8082      	strh	r2, [r0, #4]
 800318a:	80c3      	strh	r3, [r0, #6]
    {
        return Rect(pos, start, width, length);
    }
 800318c:	bd10      	pop	{r4, pc}

0800318e <_ZNK8touchgfx17GraphElementGridX22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeXMinScaled();
 800318e:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
 8003190:	4608      	mov	r0, r1
        return graph->getGraphRangeXMinScaled();
 8003192:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003196:	4718      	bx	r3

08003198 <_ZNK8touchgfx17GraphElementGridX22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeXMaxScaled();
 8003198:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
 800319a:	4608      	mov	r0, r1
        return graph->getGraphRangeXMaxScaled();
 800319c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031a0:	4718      	bx	r3

080031a2 <_ZNK8touchgfx17GraphElementGridX17getGraphAreaStartEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphAreaStart(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingTop();
    }
 80031a2:	f9b1 0114 	ldrsh.w	r0, [r1, #276]	; 0x114
 80031a6:	4770      	bx	lr

080031a8 <_ZNK8touchgfx17GraphElementGridX18getGraphAreaLengthEPKNS_17AbstractDataGraphE>:
 80031a8:	f8b1 0114 	ldrh.w	r0, [r1, #276]	; 0x114
 80031ac:	f8b1 311a 	ldrh.w	r3, [r1, #282]	; 0x11a
 80031b0:	4403      	add	r3, r0
 80031b2:	f8b1 0042 	ldrh.w	r0, [r1, #66]	; 0x42
 80031b6:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaLength(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaHeight();
    }
 80031b8:	b200      	sxth	r0, r0
 80031ba:	4770      	bx	lr

080031bc <_ZNK8touchgfx17GraphElementGridX20getGraphAreaStartPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStartPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingLeft();
    }
 80031bc:	f9b1 0116 	ldrsh.w	r0, [r1, #278]	; 0x116
 80031c0:	4770      	bx	lr

080031c2 <_ZNK8touchgfx17GraphElementGridX18getGraphAreaEndPosEPKNS_17AbstractDataGraphE>:
        return graphArea.getWidth() - (leftPadding + rightPadding);
 80031c2:	f8b1 0116 	ldrh.w	r0, [r1, #278]	; 0x116
 80031c6:	f8b1 3118 	ldrh.w	r3, [r1, #280]	; 0x118
 80031ca:	4403      	add	r3, r0
 80031cc:	f8b1 0040 	ldrh.w	r0, [r1, #64]	; 0x40
 80031d0:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaEndPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaWidth();
    }
 80031d2:	b200      	sxth	r0, r0
 80031d4:	4770      	bx	lr

080031d6 <_ZNK8touchgfx17GraphElementGridX15valueToScreenQ5EPKNS_17AbstractDataGraphEi>:
        return graph->valueToScreenXQ5(x);
 80031d6:	680b      	ldr	r3, [r1, #0]

    virtual CWRUtil::Q5 valueToScreenQ5(const AbstractDataGraph* graph, int value) const
 80031d8:	4608      	mov	r0, r1
        return graph->valueToScreenXQ5(x);
 80031da:	4611      	mov	r1, r2
 80031dc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80031e0:	4718      	bx	r3

080031e2 <_ZNK8touchgfx17GraphElementGridY13enclosingAreaEPKNS_17AbstractDataGraphE>:
 80031e2:	f8b2 1118 	ldrh.w	r1, [r2, #280]	; 0x118
    {
        return convertToGraphScaleY(graph, gridInterval, dataScale);
    }

protected:
    virtual Rect enclosingArea(const AbstractDataGraph* graph) const
 80031e6:	b530      	push	{r4, r5, lr}
        return leftPadding;
 80031e8:	f9b2 5116 	ldrsh.w	r5, [r2, #278]	; 0x116
        return graphArea.getWidth() - (leftPadding + rightPadding);
 80031ec:	186c      	adds	r4, r5, r1
 80031ee:	f8b2 1040 	ldrh.w	r1, [r2, #64]	; 0x40
        return rect.height;
 80031f2:	f9b2 2042 	ldrsh.w	r2, [r2, #66]	; 0x42
 80031f6:	1b09      	subs	r1, r1, r4
 80031f8:	2400      	movs	r4, #0
 80031fa:	8005      	strh	r5, [r0, #0]
 80031fc:	8044      	strh	r4, [r0, #2]
 80031fe:	8081      	strh	r1, [r0, #4]
 8003200:	80c2      	strh	r2, [r0, #6]
    {
        return Rect(graph->getGraphAreaPaddingLeft(), 0, graph->getGraphAreaWidth(), graph->getGraphAreaHeightIncludingPadding());
    }
 8003202:	bd30      	pop	{r4, r5, pc}

08003204 <_ZNK8touchgfx17GraphElementGridY8lineRectEssss>:
 8003204:	8002      	strh	r2, [r0, #0]
 8003206:	8083      	strh	r3, [r0, #4]
 8003208:	f9bd 2000 	ldrsh.w	r2, [sp]
 800320c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8003210:	8042      	strh	r2, [r0, #2]
 8003212:	80c3      	strh	r3, [r0, #6]

    virtual Rect lineRect(int16_t start, int16_t length, int16_t pos, int16_t width) const
    {
        return Rect(start, pos, length, width);
    }
 8003214:	4770      	bx	lr

08003216 <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeYMinScaled();
 8003216:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
 8003218:	4608      	mov	r0, r1
        return graph->getGraphRangeYMinScaled();
 800321a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800321e:	4718      	bx	r3

08003220 <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeYMaxScaled();
 8003220:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
 8003222:	4608      	mov	r0, r1
        return graph->getGraphRangeYMaxScaled();
 8003224:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003228:	4718      	bx	r3

0800322a <_ZNK8touchgfx17GraphElementGridY17getGraphAreaStartEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphAreaStart(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingLeft();
    }
 800322a:	f9b1 0116 	ldrsh.w	r0, [r1, #278]	; 0x116
 800322e:	4770      	bx	lr

08003230 <_ZNK8touchgfx17GraphElementGridY18getGraphAreaLengthEPKNS_17AbstractDataGraphE>:
 8003230:	f8b1 0116 	ldrh.w	r0, [r1, #278]	; 0x116
 8003234:	f8b1 3118 	ldrh.w	r3, [r1, #280]	; 0x118
 8003238:	4403      	add	r3, r0
 800323a:	f8b1 0040 	ldrh.w	r0, [r1, #64]	; 0x40
 800323e:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaLength(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaWidth();
    }
 8003240:	b200      	sxth	r0, r0
 8003242:	4770      	bx	lr

08003244 <_ZNK8touchgfx17GraphElementGridY20getGraphAreaStartPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStartPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingTop();
    }
 8003244:	f9b1 0114 	ldrsh.w	r0, [r1, #276]	; 0x114
 8003248:	4770      	bx	lr

0800324a <_ZNK8touchgfx17GraphElementGridY18getGraphAreaEndPosEPKNS_17AbstractDataGraphE>:
        return graphArea.getHeight() - (topPadding + bottomPadding);
 800324a:	f8b1 0114 	ldrh.w	r0, [r1, #276]	; 0x114
 800324e:	f8b1 311a 	ldrh.w	r3, [r1, #282]	; 0x11a
 8003252:	4403      	add	r3, r0
 8003254:	f8b1 0042 	ldrh.w	r0, [r1, #66]	; 0x42
 8003258:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaEndPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaHeight();
    }
 800325a:	b200      	sxth	r0, r0
 800325c:	4770      	bx	lr

0800325e <_ZNK8touchgfx17GraphElementGridY15valueToScreenQ5EPKNS_17AbstractDataGraphEi>:
        return graph->valueToScreenYQ5(y);
 800325e:	680b      	ldr	r3, [r1, #0]

    virtual CWRUtil::Q5 valueToScreenQ5(const AbstractDataGraph* graph, int value) const
 8003260:	4608      	mov	r0, r1
        return graph->valueToScreenYQ5(y);
 8003262:	4611      	mov	r1, r2
 8003264:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8003268:	4718      	bx	r3

0800326a <_ZN8touchgfx11GraphScrollILs100EED1Ev>:
 * the new values added to the graph.
 *
 * @tparam CAPACITY The maximum number of data points on the graph.
 */
template <int16_t CAPACITY>
class GraphScroll : public GraphScrollData
 800326a:	4770      	bx	lr

0800326c <_ZN8touchgfx17GraphElementGridYD1Ev>:
class GraphElementGridY : public GraphElementGridBase
 800326c:	4770      	bx	lr

0800326e <_ZN8touchgfx17GraphElementGridXD1Ev>:
class GraphElementGridX : public GraphElementGridBase
 800326e:	4770      	bx	lr

08003270 <_ZN8touchgfx17GraphElementGridXD0Ev>:
 8003270:	b510      	push	{r4, lr}
 8003272:	4604      	mov	r4, r0
 8003274:	2140      	movs	r1, #64	; 0x40
 8003276:	f01f fd06 	bl	8022c86 <_ZdlPvj>
 800327a:	4620      	mov	r0, r4
 800327c:	bd10      	pop	{r4, pc}

0800327e <_ZN8touchgfx17GraphElementGridYD0Ev>:
class GraphElementGridY : public GraphElementGridBase
 800327e:	b510      	push	{r4, lr}
 8003280:	4604      	mov	r4, r0
 8003282:	2140      	movs	r1, #64	; 0x40
 8003284:	f01f fcff 	bl	8022c86 <_ZdlPvj>
 8003288:	4620      	mov	r0, r4
 800328a:	bd10      	pop	{r4, pc}

0800328c <_ZN8touchgfx11GraphScrollILs100EED0Ev>:
 800328c:	b510      	push	{r4, lr}
 800328e:	4604      	mov	r4, r0
 8003290:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8003294:	f01f fcf7 	bl	8022c86 <_ZdlPvj>
 8003298:	4620      	mov	r0, r4
 800329a:	bd10      	pop	{r4, pc}

0800329c <_ZNK8touchgfx17GraphElementGridX30getCorrectlyScaledGridIntervalEPKNS_17AbstractDataGraphE>:
    virtual int getCorrectlyScaledGridInterval(const AbstractDataGraph* graph) const
 800329c:	b513      	push	{r0, r1, r4, lr}
 800329e:	4603      	mov	r3, r0
 80032a0:	4608      	mov	r0, r1
        return convertToGraphScaleX(graph, gridInterval, dataScale);
 80032a2:	e9d3 140c 	ldrd	r1, r4, [r3, #48]	; 0x30
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 80032a6:	6803      	ldr	r3, [r0, #0]
        return convertToGraphScaleX(graph, gridInterval, dataScale);
 80032a8:	9101      	str	r1, [sp, #4]
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 80032aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032ae:	4798      	blx	r3
 80032b0:	9901      	ldr	r1, [sp, #4]
 80032b2:	4602      	mov	r2, r0
 80032b4:	4620      	mov	r0, r4
    }
 80032b6:	b002      	add	sp, #8
 80032b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 80032bc:	f00f bd56 	b.w	8012d6c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

080032c0 <_ZNK8touchgfx17GraphElementGridY30getCorrectlyScaledGridIntervalEPKNS_17AbstractDataGraphE>:
    virtual int getCorrectlyScaledGridInterval(const AbstractDataGraph* graph) const
 80032c0:	b513      	push	{r0, r1, r4, lr}
 80032c2:	4603      	mov	r3, r0
 80032c4:	4608      	mov	r0, r1
        return convertToGraphScaleY(graph, gridInterval, dataScale);
 80032c6:	e9d3 140c 	ldrd	r1, r4, [r3, #48]	; 0x30
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 80032ca:	6803      	ldr	r3, [r0, #0]
        return convertToGraphScaleY(graph, gridInterval, dataScale);
 80032cc:	9101      	str	r1, [sp, #4]
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 80032ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032d2:	4798      	blx	r3
 80032d4:	9901      	ldr	r1, [sp, #4]
 80032d6:	4602      	mov	r2, r0
 80032d8:	4620      	mov	r0, r4
    }
 80032da:	b002      	add	sp, #8
 80032dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 80032e0:	f00f bd44 	b.w	8012d6c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

080032e4 <_ZN15Screen1ViewBase11setupScreenEv>:
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void Screen1ViewBase::setupScreen()
{
    customGraph1.initialize();
 80032e4:	f500 600f 	add.w	r0, r0, #2288	; 0x8f0
 80032e8:	f005 bfb0 	b.w	800924c <_ZN11customGraph10initializeEv>

080032ec <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv>:
    virtual void invalidateContent() const
 80032ec:	b508      	push	{r3, lr}
        if (alpha > 0)
 80032ee:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80032f2:	b10b      	cbz	r3, 80032f8 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv+0xc>
            Container::invalidateContent();
 80032f4:	f7ff f97a 	bl	80025ec <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 80032f8:	bd08      	pop	{r3, pc}
	...

080032fc <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 80032fc:	1e0a      	subs	r2, r1, #0
    virtual int indexToDataPointYScaled(int16_t index) const
 80032fe:	b510      	push	{r4, lr}
        assert(index >= 0 && index < usedCapacity);
 8003300:	db03      	blt.n	800330a <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0xe>
 8003302:	f9b0 411e 	ldrsh.w	r4, [r0, #286]	; 0x11e
 8003306:	4294      	cmp	r4, r2
 8003308:	dc06      	bgt.n	8003318 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x1c>
 800330a:	4b08      	ldr	r3, [pc, #32]	; (800332c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x30>)
 800330c:	f240 6139 	movw	r1, #1593	; 0x639
 8003310:	4a07      	ldr	r2, [pc, #28]	; (8003330 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x34>)
 8003312:	4808      	ldr	r0, [pc, #32]	; (8003334 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x38>)
 8003314:	f01f fdc4 	bl	8022ea0 <__assert_func>
        return yValues[dataIndex(index)];
 8003318:	6803      	ldr	r3, [r0, #0]
 800331a:	f8d0 4144 	ldr.w	r4, [r0, #324]	; 0x144
 800331e:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8003322:	4798      	blx	r3
    }
 8003324:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8003328:	bd10      	pop	{r4, pc}
 800332a:	bf00      	nop
 800332c:	08024d08 	.word	0x08024d08
 8003330:	08024d2b 	.word	0x08024d2b
 8003334:	08024d7a 	.word	0x08024d7a

08003338 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 8003338:	1e0b      	subs	r3, r1, #0
    virtual int indexToDataPointXScaled(int16_t index) const
 800333a:	b510      	push	{r4, lr}
 800333c:	4604      	mov	r4, r0
        assert(index >= 0 && index < usedCapacity);
 800333e:	db03      	blt.n	8003348 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x10>
 8003340:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
 8003344:	429a      	cmp	r2, r3
 8003346:	dc06      	bgt.n	8003356 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x1e>
 8003348:	4b07      	ldr	r3, [pc, #28]	; (8003368 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x30>)
 800334a:	f240 6133 	movw	r1, #1587	; 0x633
 800334e:	4a07      	ldr	r2, [pc, #28]	; (800336c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x34>)
 8003350:	4807      	ldr	r0, [pc, #28]	; (8003370 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x38>)
 8003352:	f01f fda5 	bl	8022ea0 <__assert_func>
        return (indexToGlobalIndex(index) * xAxisFactor) + xAxisOffset;
 8003356:	6803      	ldr	r3, [r0, #0]
 8003358:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800335c:	4798      	blx	r3
 800335e:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	; 0x13c
    }
 8003362:	fb02 3000 	mla	r0, r2, r0, r3
 8003366:	bd10      	pop	{r4, pc}
 8003368:	08024d08 	.word	0x08024d08
 800336c:	08024de5 	.word	0x08024de5
 8003370:	08024d7a 	.word	0x08024d7a

08003374 <_ZN15Screen1ViewBaseD1Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8003374:	4b07      	ldr	r3, [pc, #28]	; (8003394 <_ZN15Screen1ViewBaseD1Ev+0x20>)
 8003376:	b510      	push	{r4, lr}
 8003378:	6003      	str	r3, [r0, #0]
 800337a:	4604      	mov	r4, r0
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 800337c:	f012 fa5e 	bl	801583c <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>

class customGraph : public customGraphBase
{
public:
    customGraph();
    virtual ~customGraph() {}
 8003380:	4b05      	ldr	r3, [pc, #20]	; (8003398 <_ZN15Screen1ViewBaseD1Ev+0x24>)
 8003382:	f504 600f 	add.w	r0, r4, #2288	; 0x8f0
 8003386:	f8c4 38f0 	str.w	r3, [r4, #2288]	; 0x8f0
 800338a:	f003 fa27 	bl	80067dc <_ZN15customGraphBaseD1Ev>
}
 800338e:	4620      	mov	r0, r4
 8003390:	bd10      	pop	{r4, pc}
 8003392:	bf00      	nop
 8003394:	080251b0 	.word	0x080251b0
 8003398:	0802550c 	.word	0x0802550c

0800339c <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 800339c:	b510      	push	{r4, lr}
 800339e:	4604      	mov	r4, r0
}
 80033a0:	f7ff ffe8 	bl	8003374 <_ZN15Screen1ViewBaseD1Ev>
 80033a4:	f643 4164 	movw	r1, #15460	; 0x3c64
 80033a8:	4620      	mov	r0, r4
 80033aa:	f01f fc6c 	bl	8022c86 <_ZdlPvj>
 80033ae:	4620      	mov	r0, r4
 80033b0:	bd10      	pop	{r4, pc}

080033b2 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 80033b2:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 80033b4:	b570      	push	{r4, r5, r6, lr}
 80033b6:	4604      	mov	r4, r0
        setX(x);
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    void setXY(int16_t x, int16_t y)
 80033ba:	4615      	mov	r5, r2
        setX(x);
 80033bc:	4798      	blx	r3
        setY(y);
 80033be:	6823      	ldr	r3, [r4, #0]
 80033c0:	4620      	mov	r0, r4
 80033c2:	4629      	mov	r1, r5
 80033c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    }
 80033c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 80033ca:	4718      	bx	r3

080033cc <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80033cc:	b570      	push	{r4, r5, r6, lr}
 80033ce:	4604      	mov	r4, r0
 80033d0:	461d      	mov	r5, r3
 80033d2:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 80033d6:	f7ff ffec 	bl	80033b2 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 80033da:	6823      	ldr	r3, [r4, #0]
 80033dc:	4629      	mov	r1, r5
 80033de:	4620      	mov	r0, r4
 80033e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e2:	4798      	blx	r3
        setHeight(height);
 80033e4:	6823      	ldr	r3, [r4, #0]
 80033e6:	4631      	mov	r1, r6
 80033e8:	4620      	mov	r0, r4
 80033ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    }
 80033ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 80033f0:	4718      	bx	r3
	...

080033f4 <_ZN8touchgfx6WidgetC1Ev>:
        : x(0), y(0), width(0), height(0)
 80033f4:	2200      	movs	r2, #0
 80033f6:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80033fa:	e9c0 2203 	strd	r2, r2, [r0, #12]
          visible(true)
 80033fe:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8003402:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8003406:	f44f 7280 	mov.w	r2, #256	; 0x100
 800340a:	8482      	strh	r2, [r0, #36]	; 0x24
class Widget : public Drawable
 800340c:	4a01      	ldr	r2, [pc, #4]	; (8003414 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800340e:	6002      	str	r2, [r0, #0]
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	08024e3c 	.word	0x08024e3c

08003418 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8003418:	b510      	push	{r4, lr}
 800341a:	4604      	mov	r4, r0
        : Widget(), alpha(255), color(0)
 800341c:	2226      	movs	r2, #38	; 0x26
 800341e:	2100      	movs	r1, #0
 8003420:	f01f fdca 	bl	8022fb8 <memset>
 8003424:	4620      	mov	r0, r4
 8003426:	f7ff ffe5 	bl	80033f4 <_ZN8touchgfx6WidgetC1Ev>
 800342a:	4b04      	ldr	r3, [pc, #16]	; (800343c <_ZN8touchgfx3BoxC1Ev+0x24>)
    {
    }
 800342c:	4620      	mov	r0, r4
        : Widget(), alpha(255), color(0)
 800342e:	6023      	str	r3, [r4, #0]
 8003430:	23ff      	movs	r3, #255	; 0xff
 8003432:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        : color(col)
 8003436:	2300      	movs	r3, #0
 8003438:	62a3      	str	r3, [r4, #40]	; 0x28
    }
 800343a:	bd10      	pop	{r4, pc}
 800343c:	08025e70 	.word	0x08025e70

08003440 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8003440:	b510      	push	{r4, lr}
 8003442:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8003444:	2226      	movs	r2, #38	; 0x26
 8003446:	2100      	movs	r1, #0
 8003448:	f01f fdb6 	bl	8022fb8 <memset>
 800344c:	4620      	mov	r0, r4
 800344e:	f7ff ffd1 	bl	80033f4 <_ZN8touchgfx6WidgetC1Ev>
 8003452:	4b0a      	ldr	r3, [pc, #40]	; (800347c <_ZN8touchgfx8TextAreaC1Ev+0x3c>)
 8003454:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    {
    }
 8003458:	4620      	mov	r0, r4
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800345a:	6023      	str	r3, [r4, #0]
        : typedTextId(id)
 800345c:	4b08      	ldr	r3, [pc, #32]	; (8003480 <_ZN8touchgfx8TextAreaC1Ev+0x40>)
 800345e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003460:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003464:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8003466:	2300      	movs	r3, #0
 8003468:	e9c4 320c 	strd	r3, r2, [r4, #48]	; 0x30
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800346c:	f04f 32ff 	mov.w	r2, #4294967295
 8003470:	8723      	strh	r3, [r4, #56]	; 0x38
 8003472:	63e3      	str	r3, [r4, #60]	; 0x3c
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 8003474:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    }
 8003478:	bd10      	pop	{r4, pc}
 800347a:	bf00      	nop
 800347c:	08025de0 	.word	0x08025de0
 8003480:	080248e8 	.word	0x080248e8

08003484 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>:
     * @param  factor2 The second factor.
     * @param  divisor The divisor.
     *
     * @return factor1 * factor2 / divisor as a Q5
     */
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 8003484:	b537      	push	{r0, r1, r2, r4, r5, lr}
    {
        int32_t remainder;
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 8003486:	ab01      	add	r3, sp, #4
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 8003488:	4615      	mov	r5, r2
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 800348a:	f015 f842 	bl	8018512 <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
 800348e:	2800      	cmp	r0, #0
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 8003490:	462a      	mov	r2, r5
 8003492:	9901      	ldr	r1, [sp, #4]
 8003494:	ea4f 1440 	mov.w	r4, r0, lsl #5
 8003498:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
 800349c:	db04      	blt.n	80034a8 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x24>
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 800349e:	f015 f857 	bl	8018550 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
 80034a2:	4420      	add	r0, r4
        {
            return toQ5(result) + muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
        }
        return toQ5(result) - muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
    }
 80034a4:	b003      	add	sp, #12
 80034a6:	bd30      	pop	{r4, r5, pc}
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 80034a8:	f015 f852 	bl	8018550 <_ZN8touchgfx6muldivElll>
            return Q5(v - q5.v);
 80034ac:	1a20      	subs	r0, r4, r0
 80034ae:	e7f9      	b.n	80034a4 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x20>

080034b0 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenYQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 80034b0:	b570      	push	{r4, r5, r6, lr}
        return graphArea.getHeight() - (topPadding + bottomPadding);
 80034b2:	f9b0 4114 	ldrsh.w	r4, [r0, #276]	; 0x114
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 80034b6:	460e      	mov	r6, r1
        return graphArea.getHeight() - (topPadding + bottomPadding);
 80034b8:	f8b0 511a 	ldrh.w	r5, [r0, #282]	; 0x11a
 80034bc:	1963      	adds	r3, r4, r5
 80034be:	f8b0 5042 	ldrh.w	r5, [r0, #66]	; 0x42
 80034c2:	1aed      	subs	r5, r5, r3
        return CWRUtil::toQ5(graphAreaHeight + topPadding - 1) - CWRUtil::muldiv_toQ5(y - graphRangeMinY, graphAreaHeight - 1, graphRangeMaxY - graphRangeMinY);
 80034c4:	b22d      	sxth	r5, r5
 80034c6:	442c      	add	r4, r5
 80034c8:	1e69      	subs	r1, r5, #1
 80034ca:	e9d0 324d 	ldrd	r3, r2, [r0, #308]	; 0x134
 80034ce:	3c01      	subs	r4, #1
 80034d0:	1ad2      	subs	r2, r2, r3
 80034d2:	1af0      	subs	r0, r6, r3
 80034d4:	f7ff ffd6 	bl	8003484 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
    }
 80034d8:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 80034dc:	bd70      	pop	{r4, r5, r6, pc}

080034de <_ZNK8touchgfx17AbstractDataGraph16valueToScreenXQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
 80034de:	b538      	push	{r3, r4, r5, lr}
 80034e0:	4604      	mov	r4, r0
 80034e2:	4608      	mov	r0, r1
        return graphArea.getWidth() - (leftPadding + rightPadding);
 80034e4:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 80034e8:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
 80034ec:	440b      	add	r3, r1
 80034ee:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 80034f2:	1ac9      	subs	r1, r1, r3
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
 80034f4:	e9d4 524b 	ldrd	r5, r2, [r4, #300]	; 0x12c
 80034f8:	b209      	sxth	r1, r1
 80034fa:	1b52      	subs	r2, r2, r5
 80034fc:	1b40      	subs	r0, r0, r5
 80034fe:	3901      	subs	r1, #1
 8003500:	f7ff ffc0 	bl	8003484 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
            return Q5(v + q5.v);
 8003504:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
    }
 8003508:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800350c:	bd38      	pop	{r3, r4, r5, pc}
	...

08003510 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
 8003510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003514:	4604      	mov	r4, r0
        : presenter(0)
 8003516:	2600      	movs	r6, #0
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8003518:	f64f 75ff 	movw	r5, #65535	; 0xffff
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 800351c:	f04f 0901 	mov.w	r9, #1
 8003520:	46a3      	mov	fp, r4
 8003522:	f104 086c 	add.w	r8, r4, #108	; 0x6c
 8003526:	f104 0a98 	add.w	sl, r4, #152	; 0x98
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 800352a:	1d27      	adds	r7, r4, #4
 800352c:	ed2d 8b10 	vpush	{d8-d15}
 8003530:	b08f      	sub	sp, #60	; 0x3c
 8003532:	f015 f9b7 	bl	80188a4 <_ZN8touchgfx6ScreenC1Ev>
 8003536:	4bf2      	ldr	r3, [pc, #968]	; (8003900 <_ZN15Screen1ViewBaseC1Ev+0x3f0>)
 8003538:	63e6      	str	r6, [r4, #60]	; 0x3c
 800353a:	f84b 3b40 	str.w	r3, [fp], #64
 800353e:	4658      	mov	r0, fp
 8003540:	f7ff ff6a 	bl	8003418 <_ZN8touchgfx3BoxC1Ev>
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
 8003544:	2226      	movs	r2, #38	; 0x26
 8003546:	4631      	mov	r1, r6
 8003548:	4640      	mov	r0, r8
 800354a:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 800354e:	f01f fd33 	bl	8022fb8 <memset>
 8003552:	4640      	mov	r0, r8
 8003554:	f7ff ff4e 	bl	80033f4 <_ZN8touchgfx6WidgetC1Ev>
 8003558:	4bea      	ldr	r3, [pc, #936]	; (8003904 <_ZN15Screen1ViewBaseC1Ev+0x3f4>)
    {
        Image::setBitmap(bmp);
 800355a:	a90c      	add	r1, sp, #48	; 0x30
 800355c:	4640      	mov	r0, r8
        : Widget(), bitmap(bmp), alpha(255)
 800355e:	66e3      	str	r3, [r4, #108]	; 0x6c
 8003560:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8003564:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
 8003568:	f204 554c 	addw	r5, r4, #1356	; 0x54c
 800356c:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
        Image::setBitmap(bmp);
 8003570:	f011 fa5e 	bl	8014a30 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003574:	4650      	mov	r0, sl
 8003576:	f7ff ff63 	bl	8003440 <_ZN8touchgfx8TextAreaC1Ev>
 800357a:	f104 03e0 	add.w	r3, r4, #224	; 0xe0
 800357e:	4618      	mov	r0, r3
 8003580:	ee08 3a10 	vmov	s16, r3
 8003584:	f7ff ff5c 	bl	8003440 <_ZN8touchgfx8TextAreaC1Ev>
 8003588:	f504 7394 	add.w	r3, r4, #296	; 0x128
 800358c:	4618      	mov	r0, r3
 800358e:	ee08 3a90 	vmov	s17, r3
 8003592:	f7ff ff55 	bl	8003440 <_ZN8touchgfx8TextAreaC1Ev>
 8003596:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 800359a:	4618      	mov	r0, r3
 800359c:	ee09 3a10 	vmov	s18, r3
 80035a0:	f7ff ff4e 	bl	8003440 <_ZN8touchgfx8TextAreaC1Ev>
 80035a4:	f504 73dc 	add.w	r3, r4, #440	; 0x1b8
 80035a8:	4618      	mov	r0, r3
 80035aa:	ee09 3a90 	vmov	s19, r3
 80035ae:	f7ff ff47 	bl	8003440 <_ZN8touchgfx8TextAreaC1Ev>
 80035b2:	f504 7300 	add.w	r3, r4, #512	; 0x200
 80035b6:	4618      	mov	r0, r3
 80035b8:	ee0a 3a10 	vmov	s20, r3
 80035bc:	f7ff ff40 	bl	8003440 <_ZN8touchgfx8TextAreaC1Ev>
 80035c0:	f504 7312 	add.w	r3, r4, #584	; 0x248
 80035c4:	4618      	mov	r0, r3
 80035c6:	ee0a 3a90 	vmov	s21, r3
 80035ca:	f7ff ff39 	bl	8003440 <_ZN8touchgfx8TextAreaC1Ev>
 80035ce:	f504 7324 	add.w	r3, r4, #656	; 0x290
 80035d2:	4618      	mov	r0, r3
 80035d4:	ee0b 3a10 	vmov	s22, r3
 80035d8:	f7ff ff32 	bl	8003440 <_ZN8touchgfx8TextAreaC1Ev>
 80035dc:	f504 7336 	add.w	r3, r4, #728	; 0x2d8
 80035e0:	4618      	mov	r0, r3
 80035e2:	ee0b 3a90 	vmov	s23, r3
 80035e6:	f7ff ff2b 	bl	8003440 <_ZN8touchgfx8TextAreaC1Ev>
 80035ea:	f504 7348 	add.w	r3, r4, #800	; 0x320
 80035ee:	4618      	mov	r0, r3
 80035f0:	ee0c 3a10 	vmov	s24, r3
 80035f4:	f7ff ff24 	bl	8003440 <_ZN8touchgfx8TextAreaC1Ev>
 80035f8:	f504 735a 	add.w	r3, r4, #872	; 0x368
 80035fc:	4618      	mov	r0, r3
 80035fe:	ee0c 3a90 	vmov	s25, r3
 8003602:	f7ff ff1d 	bl	8003440 <_ZN8touchgfx8TextAreaC1Ev>
 8003606:	f504 736c 	add.w	r3, r4, #944	; 0x3b0
 800360a:	4618      	mov	r0, r3
 800360c:	ee0d 3a10 	vmov	s26, r3
 8003610:	f7ff ff16 	bl	8003440 <_ZN8touchgfx8TextAreaC1Ev>
 8003614:	f504 737e 	add.w	r3, r4, #1016	; 0x3f8
 8003618:	4618      	mov	r0, r3
 800361a:	ee0d 3a90 	vmov	s27, r3
 800361e:	f7ff ff0f 	bl	8003440 <_ZN8touchgfx8TextAreaC1Ev>
 8003622:	f504 6388 	add.w	r3, r4, #1088	; 0x440
 8003626:	4618      	mov	r0, r3
 8003628:	ee0e 3a10 	vmov	s28, r3
 800362c:	f7ff ff08 	bl	8003440 <_ZN8touchgfx8TextAreaC1Ev>
 8003630:	f504 6391 	add.w	r3, r4, #1160	; 0x488
 8003634:	4618      	mov	r0, r3
 8003636:	ee0e 3a90 	vmov	s29, r3
 800363a:	f7ff ff01 	bl	8003440 <_ZN8touchgfx8TextAreaC1Ev>
 800363e:	f504 639a 	add.w	r3, r4, #1232	; 0x4d0
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
        : Box(), borderColor(0), borderSize(0)
 8003642:	4618      	mov	r0, r3
 8003644:	ee0f 3a90 	vmov	s31, r3
 8003648:	f7ff fee6 	bl	8003418 <_ZN8touchgfx3BoxC1Ev>
 800364c:	4bae      	ldr	r3, [pc, #696]	; (8003908 <_ZN15Screen1ViewBaseC1Ev+0x3f8>)
        : color(col)
 800364e:	f8c4 64fc 	str.w	r6, [r4, #1276]	; 0x4fc
 8003652:	f8c4 34d0 	str.w	r3, [r4, #1232]	; 0x4d0
 8003656:	f204 5304 	addw	r3, r4, #1284	; 0x504
 800365a:	f8a4 6500 	strh.w	r6, [r4, #1280]	; 0x500
 800365e:	4618      	mov	r0, r3
 8003660:	ee0f 3a10 	vmov	s30, r3
 8003664:	f7ff feec 	bl	8003440 <_ZN8touchgfx8TextAreaC1Ev>
 8003668:	2164      	movs	r1, #100	; 0x64
 800366a:	4628      	mov	r0, r5
 800366c:	f00f fb1a 	bl	8012ca4 <_ZN8touchgfx17AbstractDataGraphC1Es>
 8003670:	4ba6      	ldr	r3, [pc, #664]	; (800390c <_ZN15Screen1ViewBaseC1Ev+0x3fc>)
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 8003672:	2263      	movs	r2, #99	; 0x63
 8003674:	4631      	mov	r1, r6
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 8003676:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
{
public:
    GraphScroll()
        : GraphScrollData(CAPACITY, y)
 800367a:	f204 639c 	addw	r3, r4, #1692	; 0x69c
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 800367e:	4628      	mov	r0, r5
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 8003680:	f8c4 668c 	str.w	r6, [r4, #1676]	; 0x68c
 8003684:	f8c4 3690 	str.w	r3, [r4, #1680]	; 0x690
 8003688:	f8c4 6694 	str.w	r6, [r4, #1684]	; 0x694
 800368c:	f8c4 9688 	str.w	r9, [r4, #1672]	; 0x688
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 8003690:	f7ff fa2e 	bl	8002af0 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
 8003694:	4b9e      	ldr	r3, [pc, #632]	; (8003910 <_ZN15Screen1ViewBaseC1Ev+0x400>)
        : DynamicDataGraph(capacity, values), current(0)
 8003696:	f8a4 6698 	strh.w	r6, [r4, #1688]	; 0x698
        : GraphScrollData(CAPACITY, y)
 800369a:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
 800369e:	f604 032c 	addw	r3, r4, #2092	; 0x82c
        : CanvasWidget()
 80036a2:	4618      	mov	r0, r3
 80036a4:	9304      	str	r3, [sp, #16]
 80036a6:	f00e ff4b 	bl	8012540 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 80036aa:	230a      	movs	r3, #10
 80036ac:	f8c4 6858 	str.w	r6, [r4, #2136]	; 0x858
 80036b0:	f8c4 3860 	str.w	r3, [r4, #2144]	; 0x860
class GraphElementGridX : public GraphElementGridBase
 80036b4:	4b97      	ldr	r3, [pc, #604]	; (8003914 <_ZN15Screen1ViewBaseC1Ev+0x404>)
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 80036b6:	f8c4 6868 	str.w	r6, [r4, #2152]	; 0x868
class GraphElementGridX : public GraphElementGridBase
 80036ba:	f8c4 382c 	str.w	r3, [r4, #2092]	; 0x82c
 80036be:	f604 036c 	addw	r3, r4, #2156	; 0x86c
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 80036c2:	f8c4 985c 	str.w	r9, [r4, #2140]	; 0x85c
        : CanvasWidget()
 80036c6:	4618      	mov	r0, r3
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 80036c8:	f884 9864 	strb.w	r9, [r4, #2148]	; 0x864
 80036cc:	9305      	str	r3, [sp, #20]
        : CanvasWidget()
 80036ce:	f00e ff37 	bl	8012540 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 80036d2:	230a      	movs	r3, #10
 80036d4:	f8c4 6898 	str.w	r6, [r4, #2200]	; 0x898
 80036d8:	f8c4 68a8 	str.w	r6, [r4, #2216]	; 0x8a8
 80036dc:	f8c4 38a0 	str.w	r3, [r4, #2208]	; 0x8a0
class GraphElementGridY : public GraphElementGridBase
 80036e0:	4b8d      	ldr	r3, [pc, #564]	; (8003918 <_ZN15Screen1ViewBaseC1Ev+0x408>)
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 80036e2:	f8c4 989c 	str.w	r9, [r4, #2204]	; 0x89c
class GraphElementGridY : public GraphElementGridBase
 80036e6:	f8c4 386c 	str.w	r3, [r4, #2156]	; 0x86c
 80036ea:	f604 03ac 	addw	r3, r4, #2220	; 0x8ac
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 80036ee:	f884 98a4 	strb.w	r9, [r4, #2212]	; 0x8a4
        : CanvasWidget()
 80036f2:	4618      	mov	r0, r3
 80036f4:	9306      	str	r3, [sp, #24]
 80036f6:	f00e ff23 	bl	8012540 <_ZN8touchgfx12CanvasWidgetC1Ev>
 */
class GraphElementLine : public AbstractGraphElement
{
public:
    GraphElementLine()
        : lineWidth(2)
 80036fa:	4b88      	ldr	r3, [pc, #544]	; (800391c <_ZN15Screen1ViewBaseC1Ev+0x40c>)
 80036fc:	f8c4 38ac 	str.w	r3, [r4, #2220]	; 0x8ac
 8003700:	f04f 0302 	mov.w	r3, #2
 8003704:	f884 38d8 	strb.w	r3, [r4, #2264]	; 0x8d8
 8003708:	f604 03dc 	addw	r3, r4, #2268	; 0x8dc
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 800370c:	4618      	mov	r0, r3
 800370e:	9307      	str	r3, [sp, #28]
 8003710:	f7fe ffb0 	bl	8002674 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8003714:	4b82      	ldr	r3, [pc, #520]	; (8003920 <_ZN15Screen1ViewBaseC1Ev+0x410>)
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 8003716:	f8c4 68e8 	str.w	r6, [r4, #2280]	; 0x8e8
 800371a:	f8c4 38dc 	str.w	r3, [r4, #2268]	; 0x8dc
 800371e:	3324      	adds	r3, #36	; 0x24
 8003720:	f8c4 38e4 	str.w	r3, [r4, #2276]	; 0x8e4
 8003724:	f504 630f 	add.w	r3, r4, #2288	; 0x8f0
 8003728:	4618      	mov	r0, r3
 800372a:	9303      	str	r3, [sp, #12]
 800372c:	f005 fd84 	bl	8009238 <_ZN11customGraphC1Ev>
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8003730:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8003734:	f604 5084 	addw	r0, r4, #3460	; 0xd84
 8003738:	f012 f876 	bl	8015828 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
    __background.setPosition(0, 0, 800, 480);
 800373c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003740:	4632      	mov	r2, r6
 8003742:	4631      	mov	r1, r6
 8003744:	4658      	mov	r0, fp
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	f44f 7348 	mov.w	r3, #800	; 0x320
 800374c:	f7ff fe3e 	bl	80033cc <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8003750:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8003754:	4659      	mov	r1, fp
 8003756:	4638      	mov	r0, r7
 8003758:	66a3      	str	r3, [r4, #104]	; 0x68
 800375a:	f00d fc77 	bl	801104c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(0, 0);
 800375e:	4632      	mov	r2, r6
 8003760:	4631      	mov	r1, r6
 8003762:	4640      	mov	r0, r8
 8003764:	f7ff fe25 	bl	80033b2 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_800X480_SHATTERED_RAIN_DARK_ID));
 8003768:	4640      	mov	r0, r8
 800376a:	a90c      	add	r1, sp, #48	; 0x30
 800376c:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 8003770:	f011 f95e 	bl	8014a30 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003774:	4641      	mov	r1, r8
 8003776:	4638      	mov	r0, r7
        boundingArea = calculateBoundingArea();
 8003778:	f10d 0820 	add.w	r8, sp, #32
 800377c:	f00d fc66 	bl	801104c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea1.setXY(443, 3);
 8003780:	2203      	movs	r2, #3
 8003782:	4650      	mov	r0, sl
 8003784:	f240 11bb 	movw	r1, #443	; 0x1bb
 8003788:	f7ff fe13 	bl	80033b2 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 800378c:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003790:	4651      	mov	r1, sl
 8003792:	4640      	mov	r0, r8
        color = newColor;
 8003794:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
        linespace = space;
 8003798:	f8a4 60cc 	strh.w	r6, [r4, #204]	; 0xcc
        boundingArea = calculateBoundingArea();
 800379c:	f010 fdb0 	bl	8014300 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80037a0:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
 80037a4:	f8df b17c 	ldr.w	fp, [pc, #380]	; 8003924 <_ZN15Screen1ViewBaseC1Ev+0x414>
 80037a8:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80037ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80037b0:	2311      	movs	r3, #17
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HRIB));
 80037b2:	4650      	mov	r0, sl
 80037b4:	a90c      	add	r1, sp, #48	; 0x30
 80037b6:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80037ba:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80037be:	f011 f847 	bl	8014850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80037c2:	4651      	mov	r1, sl
 80037c4:	4638      	mov	r0, r7
        color = newColor;
 80037c6:	f8df a160 	ldr.w	sl, [pc, #352]	; 8003928 <_ZN15Screen1ViewBaseC1Ev+0x418>
 80037ca:	f00d fc3f 	bl	801104c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2.setXY(308, 242);
 80037ce:	22f2      	movs	r2, #242	; 0xf2
 80037d0:	f44f 719a 	mov.w	r1, #308	; 0x134
 80037d4:	ee18 0a10 	vmov	r0, s16
 80037d8:	f7ff fdeb 	bl	80033b2 <_ZN8touchgfx8Drawable5setXYEss>
        boundingArea = calculateBoundingArea();
 80037dc:	4640      	mov	r0, r8
 80037de:	ee18 1a10 	vmov	r1, s16
        color = newColor;
 80037e2:	f8c4 a110 	str.w	sl, [r4, #272]	; 0x110
        linespace = space;
 80037e6:	f8a4 6114 	strh.w	r6, [r4, #276]	; 0x114
        boundingArea = calculateBoundingArea();
 80037ea:	f010 fd89 	bl	8014300 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80037ee:	f504 738e 	add.w	r3, r4, #284	; 0x11c
 80037f2:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80037f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80037fa:	2310      	movs	r3, #16
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_AXIG));
 80037fc:	a90c      	add	r1, sp, #48	; 0x30
 80037fe:	ee18 0a10 	vmov	r0, s16
 8003802:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8003806:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800380a:	f011 f821 	bl	8014850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800380e:	ee18 1a10 	vmov	r1, s16
 8003812:	4638      	mov	r0, r7
 8003814:	f00d fc1a 	bl	801104c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_2.setXY(509, 82);
 8003818:	2252      	movs	r2, #82	; 0x52
 800381a:	f240 11fd 	movw	r1, #509	; 0x1fd
 800381e:	ee18 0a90 	vmov	r0, s17
 8003822:	f7ff fdc6 	bl	80033b2 <_ZN8touchgfx8Drawable5setXYEss>
 8003826:	4640      	mov	r0, r8
 8003828:	ee18 1a90 	vmov	r1, s17
        color = newColor;
 800382c:	f8c4 a158 	str.w	sl, [r4, #344]	; 0x158
        linespace = space;
 8003830:	f8a4 615c 	strh.w	r6, [r4, #348]	; 0x15c
 8003834:	f04f 0a02 	mov.w	sl, #2
        boundingArea = calculateBoundingArea();
 8003838:	f010 fd62 	bl	8014300 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 800383c:	f504 73b2 	add.w	r3, r4, #356	; 0x164
 8003840:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8003844:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003848:	2305      	movs	r3, #5
    textArea2_2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_T87L));
 800384a:	a90c      	add	r1, sp, #48	; 0x30
 800384c:	ee18 0a90 	vmov	r0, s17
 8003850:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8003854:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8003858:	f010 fffa 	bl	8014850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800385c:	ee18 1a90 	vmov	r1, s17
 8003860:	4638      	mov	r0, r7
 8003862:	f00d fbf3 	bl	801104c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1.setXY(125, 2);
 8003866:	2202      	movs	r2, #2
 8003868:	217d      	movs	r1, #125	; 0x7d
 800386a:	ee19 0a10 	vmov	r0, s18
 800386e:	f7ff fda0 	bl	80033b2 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003872:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003876:	4640      	mov	r0, r8
 8003878:	ee19 1a10 	vmov	r1, s18
        color = newColor;
 800387c:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
        linespace = space;
 8003880:	f8a4 61a4 	strh.w	r6, [r4, #420]	; 0x1a4
        boundingArea = calculateBoundingArea();
 8003884:	f010 fd3c 	bl	8014300 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003888:	f504 73d6 	add.w	r3, r4, #428	; 0x1ac
 800388c:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8003890:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003894:	230f      	movs	r3, #15
    textArea2_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9869));
 8003896:	a90c      	add	r1, sp, #48	; 0x30
 8003898:	ee19 0a10 	vmov	r0, s18
 800389c:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80038a0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80038a4:	f010 ffd4 	bl	8014850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80038a8:	ee19 1a10 	vmov	r1, s18
 80038ac:	4638      	mov	r0, r7
 80038ae:	f00d fbcd 	bl	801104c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_3.setXY(2, 109);
 80038b2:	226d      	movs	r2, #109	; 0x6d
 80038b4:	2102      	movs	r1, #2
 80038b6:	ee19 0a90 	vmov	r0, s19
 80038ba:	f7ff fd7a 	bl	80033b2 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80038be:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 80038c2:	4640      	mov	r0, r8
 80038c4:	ee19 1a90 	vmov	r1, s19
        color = newColor;
 80038c8:	f8c4 31e8 	str.w	r3, [r4, #488]	; 0x1e8
        linespace = space;
 80038cc:	f8a4 61ec 	strh.w	r6, [r4, #492]	; 0x1ec
        boundingArea = calculateBoundingArea();
 80038d0:	f010 fd16 	bl	8014300 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80038d4:	f504 73fa 	add.w	r3, r4, #500	; 0x1f4
 80038d8:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80038dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea2_1_3.setTypedText(touchgfx::TypedText(T___SINGLEUSE_5N1M));
 80038e0:	a90c      	add	r1, sp, #48	; 0x30
 80038e2:	ee19 0a90 	vmov	r0, s19
 80038e6:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
 80038ea:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80038ee:	f010 ffaf 	bl	8014850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80038f2:	ee19 1a90 	vmov	r1, s19
 80038f6:	4638      	mov	r0, r7
 80038f8:	f00d fba8 	bl	801104c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80038fc:	e016      	b.n	800392c <_ZN15Screen1ViewBaseC1Ev+0x41c>
 80038fe:	bf00      	nop
 8003900:	080251b0 	.word	0x080251b0
 8003904:	08025f40 	.word	0x08025f40
 8003908:	08025ed8 	.word	0x08025ed8
 800390c:	080258b8 	.word	0x080258b8
 8003910:	08025014 	.word	0x08025014
 8003914:	08024ea4 	.word	0x08024ea4
 8003918:	08024f5c 	.word	0x08024f5c
 800391c:	08025b80 	.word	0x08025b80
 8003920:	08025808 	.word	0x08025808
 8003924:	080248e8 	.word	0x080248e8
 8003928:	fffcfcfc 	.word	0xfffcfcfc
    textArea2_1_2.setXY(102, 101);
 800392c:	2265      	movs	r2, #101	; 0x65
 800392e:	2166      	movs	r1, #102	; 0x66
 8003930:	ee1a 0a10 	vmov	r0, s20
 8003934:	f7ff fd3d 	bl	80033b2 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003938:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 800393c:	4640      	mov	r0, r8
 800393e:	ee1a 1a10 	vmov	r1, s20
        color = newColor;
 8003942:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
        linespace = space;
 8003946:	f8a4 6234 	strh.w	r6, [r4, #564]	; 0x234
        boundingArea = calculateBoundingArea();
 800394a:	f010 fcd9 	bl	8014300 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 800394e:	f504 730f 	add.w	r3, r4, #572	; 0x23c
 8003952:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8003956:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800395a:	2303      	movs	r3, #3
    textArea2_1_2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_8RMH));
 800395c:	a90c      	add	r1, sp, #48	; 0x30
 800395e:	ee1a 0a10 	vmov	r0, s20
 8003962:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8003966:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800396a:	f010 ff71 	bl	8014850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800396e:	ee1a 1a10 	vmov	r1, s20
 8003972:	4638      	mov	r0, r7
 8003974:	f00d fb6a 	bl	801104c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_1.setXY(179, 222);
 8003978:	22de      	movs	r2, #222	; 0xde
 800397a:	21b3      	movs	r1, #179	; 0xb3
 800397c:	ee1a 0a90 	vmov	r0, s21
 8003980:	f7ff fd17 	bl	80033b2 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003984:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003988:	4640      	mov	r0, r8
 800398a:	ee1a 1a90 	vmov	r1, s21
        color = newColor;
 800398e:	f8c4 3278 	str.w	r3, [r4, #632]	; 0x278
        linespace = space;
 8003992:	f8a4 627c 	strh.w	r6, [r4, #636]	; 0x27c
        boundingArea = calculateBoundingArea();
 8003996:	f010 fcb3 	bl	8014300 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 800399a:	f504 7321 	add.w	r3, r4, #644	; 0x284
 800399e:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80039a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80039a6:	230e      	movs	r3, #14
    textArea2_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UM8B));
 80039a8:	a90c      	add	r1, sp, #48	; 0x30
 80039aa:	ee1a 0a90 	vmov	r0, s21
 80039ae:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80039b2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80039b6:	f010 ff4b 	bl	8014850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80039ba:	ee1a 1a90 	vmov	r1, s21
 80039be:	4638      	mov	r0, r7
 80039c0:	f00d fb44 	bl	801104c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_1_1.setXY(154, 171);
 80039c4:	22ab      	movs	r2, #171	; 0xab
 80039c6:	219a      	movs	r1, #154	; 0x9a
 80039c8:	ee1b 0a10 	vmov	r0, s22
 80039cc:	f7ff fcf1 	bl	80033b2 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80039d0:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 80039d4:	4640      	mov	r0, r8
 80039d6:	ee1b 1a10 	vmov	r1, s22
        color = newColor;
 80039da:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
        linespace = space;
 80039de:	f8a4 62c4 	strh.w	r6, [r4, #708]	; 0x2c4
        boundingArea = calculateBoundingArea();
 80039e2:	f010 fc8d 	bl	8014300 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80039e6:	f504 7333 	add.w	r3, r4, #716	; 0x2cc
 80039ea:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80039ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80039f2:	230d      	movs	r3, #13
    textArea2_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_MTUS));
 80039f4:	a90c      	add	r1, sp, #48	; 0x30
 80039f6:	ee1b 0a10 	vmov	r0, s22
 80039fa:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80039fe:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8003a02:	f010 ff25 	bl	8014850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003a06:	ee1b 1a10 	vmov	r1, s22
 8003a0a:	4638      	mov	r0, r7
 8003a0c:	f00d fb1e 	bl	801104c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_1_1_2.setXY(263, 222);
 8003a10:	22de      	movs	r2, #222	; 0xde
 8003a12:	f240 1107 	movw	r1, #263	; 0x107
 8003a16:	ee1b 0a90 	vmov	r0, s23
 8003a1a:	f7ff fcca 	bl	80033b2 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003a1e:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003a22:	4640      	mov	r0, r8
 8003a24:	ee1b 1a90 	vmov	r1, s23
        color = newColor;
 8003a28:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        linespace = space;
 8003a2c:	f8a4 630c 	strh.w	r6, [r4, #780]	; 0x30c
        boundingArea = calculateBoundingArea();
 8003a30:	f010 fc66 	bl	8014300 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003a34:	f504 7345 	add.w	r3, r4, #788	; 0x314
 8003a38:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8003a3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003a40:	2309      	movs	r3, #9
    textArea2_1_1_1_2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LSWL));
 8003a42:	a90c      	add	r1, sp, #48	; 0x30
 8003a44:	ee1b 0a90 	vmov	r0, s23
 8003a48:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8003a4c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8003a50:	f010 fefe 	bl	8014850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003a54:	ee1b 1a90 	vmov	r1, s23
 8003a58:	4638      	mov	r0, r7
 8003a5a:	f00d faf7 	bl	801104c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_1_1_2_1.setXY(340, 222);
 8003a5e:	22de      	movs	r2, #222	; 0xde
 8003a60:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8003a64:	ee1c 0a10 	vmov	r0, s24
 8003a68:	f7ff fca3 	bl	80033b2 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003a6c:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003a70:	4640      	mov	r0, r8
 8003a72:	ee1c 1a10 	vmov	r1, s24
        color = newColor;
 8003a76:	f8c4 3350 	str.w	r3, [r4, #848]	; 0x350
        linespace = space;
 8003a7a:	f8a4 6354 	strh.w	r6, [r4, #852]	; 0x354
        boundingArea = calculateBoundingArea();
 8003a7e:	f010 fc3f 	bl	8014300 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003a82:	f504 7357 	add.w	r3, r4, #860	; 0x35c
 8003a86:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8003a8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003a8e:	2308      	movs	r3, #8
    textArea2_1_1_1_2_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_Q0BQ));
 8003a90:	a90c      	add	r1, sp, #48	; 0x30
 8003a92:	ee1c 0a10 	vmov	r0, s24
 8003a96:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8003a9a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8003a9e:	f010 fed7 	bl	8014850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003aa2:	ee1c 1a10 	vmov	r1, s24
 8003aa6:	4638      	mov	r0, r7
 8003aa8:	f00d fad0 	bl	801104c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_1_1_2_1_1.setXY(417, 222);
 8003aac:	22de      	movs	r2, #222	; 0xde
 8003aae:	f240 11a1 	movw	r1, #417	; 0x1a1
 8003ab2:	ee1c 0a90 	vmov	r0, s25
 8003ab6:	f7ff fc7c 	bl	80033b2 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003aba:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003abe:	4640      	mov	r0, r8
 8003ac0:	ee1c 1a90 	vmov	r1, s25
        color = newColor;
 8003ac4:	f8c4 3398 	str.w	r3, [r4, #920]	; 0x398
        linespace = space;
 8003ac8:	f8a4 639c 	strh.w	r6, [r4, #924]	; 0x39c
        boundingArea = calculateBoundingArea();
 8003acc:	f010 fc18 	bl	8014300 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003ad0:	f504 7369 	add.w	r3, r4, #932	; 0x3a4
 8003ad4:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8003ad8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003adc:	2307      	movs	r3, #7
    textArea2_1_1_1_2_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_N3JM));
 8003ade:	a90c      	add	r1, sp, #48	; 0x30
 8003ae0:	ee1c 0a90 	vmov	r0, s25
 8003ae4:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8003ae8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8003aec:	f010 feb0 	bl	8014850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003af0:	ee1c 1a90 	vmov	r1, s25
 8003af4:	4638      	mov	r0, r7
 8003af6:	f00d faa9 	bl	801104c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_1_1_2_1_1_1.setXY(492, 222);
 8003afa:	22de      	movs	r2, #222	; 0xde
 8003afc:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8003b00:	ee1d 0a10 	vmov	r0, s26
 8003b04:	f7ff fc55 	bl	80033b2 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003b08:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003b0c:	4640      	mov	r0, r8
 8003b0e:	ee1d 1a10 	vmov	r1, s26
        color = newColor;
 8003b12:	f8c4 33e0 	str.w	r3, [r4, #992]	; 0x3e0
        linespace = space;
 8003b16:	f8a4 63e4 	strh.w	r6, [r4, #996]	; 0x3e4
        boundingArea = calculateBoundingArea();
 8003b1a:	f010 fbf1 	bl	8014300 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003b1e:	f504 737b 	add.w	r3, r4, #1004	; 0x3ec
 8003b22:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8003b26:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003b2a:	2306      	movs	r3, #6
    textArea2_1_1_1_2_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_F0NS));
 8003b2c:	a90c      	add	r1, sp, #48	; 0x30
 8003b2e:	ee1d 0a10 	vmov	r0, s26
 8003b32:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8003b36:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8003b3a:	f010 fe89 	bl	8014850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003b3e:	ee1d 1a10 	vmov	r1, s26
 8003b42:	4638      	mov	r0, r7
 8003b44:	f00d fa82 	bl	801104c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_1_1_1.setXY(154, 133);
 8003b48:	2285      	movs	r2, #133	; 0x85
 8003b4a:	219a      	movs	r1, #154	; 0x9a
 8003b4c:	ee1d 0a90 	vmov	r0, s27
 8003b50:	f7ff fc2f 	bl	80033b2 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003b54:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003b58:	4640      	mov	r0, r8
 8003b5a:	ee1d 1a90 	vmov	r1, s27
        color = newColor;
 8003b5e:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
        linespace = space;
 8003b62:	f8a4 642c 	strh.w	r6, [r4, #1068]	; 0x42c
        boundingArea = calculateBoundingArea();
 8003b66:	f010 fbcb 	bl	8014300 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003b6a:	f204 4334 	addw	r3, r4, #1076	; 0x434
 8003b6e:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8003b72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003b76:	230c      	movs	r3, #12
    textArea2_1_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_0NS1));
 8003b78:	a90c      	add	r1, sp, #48	; 0x30
 8003b7a:	ee1d 0a90 	vmov	r0, s27
 8003b7e:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8003b82:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8003b86:	f010 fe63 	bl	8014850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003b8a:	ee1d 1a90 	vmov	r1, s27
 8003b8e:	4638      	mov	r0, r7
 8003b90:	f00d fa5c 	bl	801104c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_1_1_1_1.setXY(154, 92);
 8003b94:	225c      	movs	r2, #92	; 0x5c
 8003b96:	219a      	movs	r1, #154	; 0x9a
 8003b98:	ee1e 0a10 	vmov	r0, s28
 8003b9c:	f7ff fc09 	bl	80033b2 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003ba0:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003ba4:	4640      	mov	r0, r8
 8003ba6:	ee1e 1a10 	vmov	r1, s28
        color = newColor;
 8003baa:	f8c4 3470 	str.w	r3, [r4, #1136]	; 0x470
        linespace = space;
 8003bae:	f8a4 6474 	strh.w	r6, [r4, #1140]	; 0x474
        boundingArea = calculateBoundingArea();
 8003bb2:	f010 fba5 	bl	8014300 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003bb6:	f204 437c 	addw	r3, r4, #1148	; 0x47c
 8003bba:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8003bbe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003bc2:	230b      	movs	r3, #11
    textArea2_1_1_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_Z325));
 8003bc4:	a90c      	add	r1, sp, #48	; 0x30
 8003bc6:	ee1e 0a10 	vmov	r0, s28
 8003bca:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8003bce:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8003bd2:	f010 fe3d 	bl	8014850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003bd6:	ee1e 1a10 	vmov	r1, s28
 8003bda:	4638      	mov	r0, r7
 8003bdc:	f00d fa36 	bl	801104c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_1_1_1_1_1.setXY(154, 52);
 8003be0:	2234      	movs	r2, #52	; 0x34
 8003be2:	219a      	movs	r1, #154	; 0x9a
 8003be4:	ee1e 0a90 	vmov	r0, s29
 8003be8:	f7ff fbe3 	bl	80033b2 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003bec:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003bf0:	4640      	mov	r0, r8
 8003bf2:	ee1e 1a90 	vmov	r1, s29
        color = newColor;
 8003bf6:	f8c4 34b8 	str.w	r3, [r4, #1208]	; 0x4b8
        linespace = space;
 8003bfa:	f8a4 64bc 	strh.w	r6, [r4, #1212]	; 0x4bc
        boundingArea = calculateBoundingArea();
 8003bfe:	f010 fb7f 	bl	8014300 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003c02:	f204 43c4 	addw	r3, r4, #1220	; 0x4c4
 8003c06:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8003c0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003c0e:	f04f 030a 	mov.w	r3, #10
    textArea2_1_1_1_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_OXJT));
 8003c12:	a90c      	add	r1, sp, #48	; 0x30
 8003c14:	ee1e 0a90 	vmov	r0, s29
 8003c18:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8003c1c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8003c20:	f010 fe16 	bl	8014850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003c24:	ee1e 1a90 	vmov	r1, s29
 8003c28:	4638      	mov	r0, r7
 8003c2a:	f00d fa0f 	bl	801104c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    boxWithBorder1.setPosition(533, 103, 48, 30);
 8003c2e:	231e      	movs	r3, #30
 8003c30:	2267      	movs	r2, #103	; 0x67
 8003c32:	f240 2115 	movw	r1, #533	; 0x215
 8003c36:	ee1f 0a90 	vmov	r0, s31
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	2330      	movs	r3, #48	; 0x30
 8003c3e:	f7ff fbc5 	bl	80033cc <_ZN8touchgfx8Drawable11setPositionEssss>
 8003c42:	f04f 33ff 	mov.w	r3, #4294967295
 8003c46:	ee1f 1a90 	vmov	r1, s31
 8003c4a:	4638      	mov	r0, r7
 8003c4c:	f8c4 34f8 	str.w	r3, [r4, #1272]	; 0x4f8
     *
     * @see setColor, getBorderColor, Color::getColorFromRGB
     */
    void setBorderColor(colortype colorBorder)
    {
        borderColor = colorBorder;
 8003c50:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
    {
        borderSize = size;
 8003c54:	f8a4 a500 	strh.w	sl, [r4, #1280]	; 0x500
        setIntervalScaled(abs(interval) * dataScale);
 8003c58:	f04f 0a0a 	mov.w	sl, #10
        borderColor = colorBorder;
 8003c5c:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
 8003c60:	f00d f9f4 	bl	801104c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_2_1.setXY(552, 108);
 8003c64:	226c      	movs	r2, #108	; 0x6c
 8003c66:	f44f 710a 	mov.w	r1, #552	; 0x228
 8003c6a:	ee1f 0a10 	vmov	r0, s30
 8003c6e:	f7ff fba0 	bl	80033b2 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003c72:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 8003c76:	4640      	mov	r0, r8
 8003c78:	ee1f 1a10 	vmov	r1, s30
        color = newColor;
 8003c7c:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
        linespace = space;
 8003c80:	f8a4 6538 	strh.w	r6, [r4, #1336]	; 0x538
        boundingArea = calculateBoundingArea();
 8003c84:	f010 fb3c 	bl	8014300 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003c88:	f504 63a8 	add.w	r3, r4, #1344	; 0x540
 8003c8c:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8003c90:	f04f 0804 	mov.w	r8, #4
 8003c94:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8003c98:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea2_2_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UAP4));
 8003c9c:	a90c      	add	r1, sp, #48	; 0x30
 8003c9e:	ee1f 0a10 	vmov	r0, s30
 8003ca2:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 8003ca6:	f010 fdd3 	bl	8014850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003caa:	ee1f 1a10 	vmov	r1, s30
 8003cae:	4638      	mov	r0, r7
 8003cb0:	f00d f9cc 	bl	801104c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    dynamicGraph1.setPosition(190, 22, 310, 200);
 8003cb4:	23c8      	movs	r3, #200	; 0xc8
 8003cb6:	2216      	movs	r2, #22
 8003cb8:	21be      	movs	r1, #190	; 0xbe
 8003cba:	4628      	mov	r0, r5
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	f44f 739b 	mov.w	r3, #310	; 0x136
 8003cc2:	f7ff fb83 	bl	80033cc <_ZN8touchgfx8Drawable11setPositionEssss>
    dynamicGraph1.setScale(1);
 8003cc6:	4632      	mov	r2, r6
 8003cc8:	4649      	mov	r1, r9
 8003cca:	4628      	mov	r0, r5
 8003ccc:	f7ff f8c4 	bl	8002e58 <_ZN8touchgfx16DynamicDataGraph8setScaleEib>
    dynamicGraph1.setGraphAreaMargin(0, 0, 0, 0);
 8003cd0:	4633      	mov	r3, r6
 8003cd2:	4632      	mov	r2, r6
 8003cd4:	4631      	mov	r1, r6
 8003cd6:	4628      	mov	r0, r5
 8003cd8:	9600      	str	r6, [sp, #0]
 8003cda:	f00e ff95 	bl	8012c08 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    dynamicGraph1.setGraphAreaPadding(0, 0, 0, 0);
 8003cde:	4633      	mov	r3, r6
 8003ce0:	4632      	mov	r2, r6
 8003ce2:	4631      	mov	r1, r6
 8003ce4:	4628      	mov	r0, r5
 8003ce6:	9600      	str	r6, [sp, #0]
 8003ce8:	f00e fe91 	bl	8012a0e <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    dynamicGraph1.setGraphRangeY(0, 100);
 8003cec:	4631      	mov	r1, r6
 8003cee:	2264      	movs	r2, #100	; 0x64
 8003cf0:	4628      	mov	r0, r5
 8003cf2:	f7fe ff89 	bl	8002c08 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>
 8003cf6:	f8d4 185c 	ldr.w	r1, [r4, #2140]	; 0x85c
        color = newColor;
 8003cfa:	4ef3      	ldr	r6, [pc, #972]	; (80040c8 <_ZN15Screen1ViewBaseC1Ev+0xbb8>)
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8003cfc:	464a      	mov	r2, r9
        setIntervalScaled(abs(interval) * dataScale);
 8003cfe:	fb0a f001 	mul.w	r0, sl, r1
        color = newColor;
 8003d02:	f8c4 6858 	str.w	r6, [r4, #2136]	; 0x858
 * @return The absolute (non-negative) value of d.
 */
template <typename T>
T abs(T d)
{
    return (d < 0) ? -d : d;
 8003d06:	2800      	cmp	r0, #0
        lineWidth = width;
 8003d08:	f884 9864 	strb.w	r9, [r4, #2148]	; 0x864
 8003d0c:	bfb8      	it	lt
 8003d0e:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 8003d10:	f8c4 0860 	str.w	r0, [r4, #2144]	; 0x860
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8003d14:	f00f f82a 	bl	8012d6c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    dynamicGraph1.addGraphElement(dynamicGraph1MajorXAxisGrid);
 8003d18:	9904      	ldr	r1, [sp, #16]
 8003d1a:	f8c4 0860 	str.w	r0, [r4, #2144]	; 0x860
 8003d1e:	4628      	mov	r0, r5
        dataScale = scale;
 8003d20:	f8c4 985c 	str.w	r9, [r4, #2140]	; 0x85c
 8003d24:	f00e fe7e 	bl	8012a24 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        setIntervalScaled(abs(interval) * dataScale);
 8003d28:	f8d4 189c 	ldr.w	r1, [r4, #2204]	; 0x89c
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8003d2c:	464a      	mov	r2, r9
        color = newColor;
 8003d2e:	f8c4 6898 	str.w	r6, [r4, #2200]	; 0x898
        setIntervalScaled(abs(interval) * dataScale);
 8003d32:	fb0a f001 	mul.w	r0, sl, r1
        lineWidth = width;
 8003d36:	f884 98a4 	strb.w	r9, [r4, #2212]	; 0x8a4
 8003d3a:	2800      	cmp	r0, #0
 8003d3c:	bfb8      	it	lt
 8003d3e:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 8003d40:	f8c4 08a0 	str.w	r0, [r4, #2208]	; 0x8a0
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8003d44:	f00f f812 	bl	8012d6c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    dynamicGraph1.addGraphElement(dynamicGraph1MajorYAxisGrid);
 8003d48:	9905      	ldr	r1, [sp, #20]
 8003d4a:	f8c4 08a0 	str.w	r0, [r4, #2208]	; 0x8a0
 8003d4e:	4628      	mov	r0, r5
        dataScale = scale;
 8003d50:	f8c4 989c 	str.w	r9, [r4, #2204]	; 0x89c
 8003d54:	f00e fe66 	bl	8012a24 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
 8003d58:	4bdc      	ldr	r3, [pc, #880]	; (80040cc <_ZN15Screen1ViewBaseC1Ev+0xbbc>)
    dynamicGraph1.addGraphElement(dynamicGraph1Line1);
 8003d5a:	9906      	ldr	r1, [sp, #24]
 8003d5c:	4628      	mov	r0, r5
 8003d5e:	f8c4 38e8 	str.w	r3, [r4, #2280]	; 0x8e8
    }

    virtual void setColor(colortype color)
    {
        AbstractPainterColor::setColor(color);
        painterRed = Color::getRed(color);
 8003d62:	f64b 13c4 	movw	r3, #47556	; 0xb9c4
     *
     * @see getLineWidth
     */
    FORCE_INLINE_FUNCTION void setLineWidth(uint8_t width)
    {
        lineWidth = width;
 8003d66:	f884 88d8 	strb.w	r8, [r4, #2264]	; 0x8d8
 8003d6a:	f8a4 38ec 	strh.w	r3, [r4, #2284]	; 0x8ec
        painterGreen = Color::getGreen(color);
        painterBlue = Color::getBlue(color);
 8003d6e:	2316      	movs	r3, #22
 8003d70:	f884 38ee 	strb.w	r3, [r4, #2286]	; 0x8ee
        canvasPainter = &painter;
 8003d74:	9b07      	ldr	r3, [sp, #28]
 8003d76:	f8c4 38d4 	str.w	r3, [r4, #2260]	; 0x8d4
 8003d7a:	f00e fe53 	bl	8012a24 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        const float fs = f * (float)scale;
 8003d7e:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8003d82:	ed9f 7ad3 	vldr	s14, [pc, #844]	; 80040d0 <_ZN15Screen1ViewBaseC1Ev+0xbc0>
 8003d86:	ee07 3a90 	vmov	s15, r3
 8003d8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d8e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8003d92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d9a:	f2c1 8360 	blt.w	800545e <_ZN15Screen1ViewBaseC1Ev+0x1f4e>
            return (int)(fs + 0.5f);
 8003d9e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003da2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003da6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003daa:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8003dae:	4628      	mov	r0, r5
 8003db0:	f00f f835 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8003db4:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8003db8:	ed9f 7ac6 	vldr	s14, [pc, #792]	; 80040d4 <_ZN15Screen1ViewBaseC1Ev+0xbc4>
 8003dbc:	ee07 3a90 	vmov	s15, r3
 8003dc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dc4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8003dc8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dd0:	f2c1 835a 	blt.w	8005488 <_ZN15Screen1ViewBaseC1Ev+0x1f78>
            return (int)(fs + 0.5f);
 8003dd4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003dd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ddc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003de0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8003de4:	4628      	mov	r0, r5
 8003de6:	f00f f81a 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8003dea:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8003dee:	ed9f 7aba 	vldr	s14, [pc, #744]	; 80040d8 <_ZN15Screen1ViewBaseC1Ev+0xbc8>
 8003df2:	ee07 3a90 	vmov	s15, r3
 8003df6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dfa:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8003dfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e06:	f2c1 8354 	blt.w	80054b2 <_ZN15Screen1ViewBaseC1Ev+0x1fa2>
            return (int)(fs + 0.5f);
 8003e0a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003e0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e16:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8003e1a:	4628      	mov	r0, r5
 8003e1c:	f00e ffff 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8003e20:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8003e24:	ed9f 7aad 	vldr	s14, [pc, #692]	; 80040dc <_ZN15Screen1ViewBaseC1Ev+0xbcc>
 8003e28:	ee07 3a90 	vmov	s15, r3
 8003e2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e30:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8003e34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e3c:	f2c1 834e 	blt.w	80054dc <_ZN15Screen1ViewBaseC1Ev+0x1fcc>
            return (int)(fs + 0.5f);
 8003e40:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003e44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e4c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8003e50:	4628      	mov	r0, r5
 8003e52:	f00e ffe4 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8003e56:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8003e5a:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 80040e0 <_ZN15Screen1ViewBaseC1Ev+0xbd0>
 8003e5e:	ee07 3a90 	vmov	s15, r3
 8003e62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e66:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8003e6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e72:	f2c1 8348 	blt.w	8005506 <_ZN15Screen1ViewBaseC1Ev+0x1ff6>
            return (int)(fs + 0.5f);
 8003e76:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003e7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e82:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8003e86:	4628      	mov	r0, r5
 8003e88:	f00e ffc9 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8003e8c:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8003e90:	ed9f 7a94 	vldr	s14, [pc, #592]	; 80040e4 <_ZN15Screen1ViewBaseC1Ev+0xbd4>
 8003e94:	ee07 3a90 	vmov	s15, r3
 8003e98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e9c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8003ea0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ea8:	f2c1 8342 	blt.w	8005530 <_ZN15Screen1ViewBaseC1Ev+0x2020>
            return (int)(fs + 0.5f);
 8003eac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003eb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003eb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003eb8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8003ebc:	4628      	mov	r0, r5
 8003ebe:	f00e ffae 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8003ec2:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8003ec6:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80040e8 <_ZN15Screen1ViewBaseC1Ev+0xbd8>
 8003eca:	ee07 3a90 	vmov	s15, r3
 8003ece:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ed2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8003ed6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ede:	f2c1 833c 	blt.w	800555a <_ZN15Screen1ViewBaseC1Ev+0x204a>
            return (int)(fs + 0.5f);
 8003ee2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003ee6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003eea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003eee:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8003ef2:	4628      	mov	r0, r5
 8003ef4:	f00e ff93 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8003ef8:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8003efc:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 80040ec <_ZN15Screen1ViewBaseC1Ev+0xbdc>
 8003f00:	ee07 3a90 	vmov	s15, r3
 8003f04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f08:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8003f0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f14:	f2c1 8336 	blt.w	8005584 <_ZN15Screen1ViewBaseC1Ev+0x2074>
            return (int)(fs + 0.5f);
 8003f18:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003f1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f24:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8003f28:	4628      	mov	r0, r5
 8003f2a:	f00e ff78 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8003f2e:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8003f32:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80040f0 <_ZN15Screen1ViewBaseC1Ev+0xbe0>
 8003f36:	ee07 3a90 	vmov	s15, r3
 8003f3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f3e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8003f42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f4a:	f2c1 8330 	blt.w	80055ae <_ZN15Screen1ViewBaseC1Ev+0x209e>
            return (int)(fs + 0.5f);
 8003f4e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003f52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f5a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8003f5e:	4628      	mov	r0, r5
 8003f60:	f00e ff5d 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8003f64:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8003f68:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80040f4 <_ZN15Screen1ViewBaseC1Ev+0xbe4>
 8003f6c:	ee07 3a90 	vmov	s15, r3
 8003f70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f74:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8003f78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f80:	f2c1 832a 	blt.w	80055d8 <_ZN15Screen1ViewBaseC1Ev+0x20c8>
            return (int)(fs + 0.5f);
 8003f84:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003f88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f90:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8003f94:	4628      	mov	r0, r5
 8003f96:	f00e ff42 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8003f9a:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8003f9e:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80040f8 <_ZN15Screen1ViewBaseC1Ev+0xbe8>
 8003fa2:	ee07 3a90 	vmov	s15, r3
 8003fa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003faa:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8003fae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fb6:	f2c1 8324 	blt.w	8005602 <_ZN15Screen1ViewBaseC1Ev+0x20f2>
            return (int)(fs + 0.5f);
 8003fba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003fbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003fc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fc6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8003fca:	4628      	mov	r0, r5
 8003fcc:	f00e ff27 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8003fd0:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8003fd4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80040fc <_ZN15Screen1ViewBaseC1Ev+0xbec>
 8003fd8:	ee07 3a90 	vmov	s15, r3
 8003fdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fe0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8003fe4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fec:	f2c1 831e 	blt.w	800562c <_ZN15Screen1ViewBaseC1Ev+0x211c>
            return (int)(fs + 0.5f);
 8003ff0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003ff4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ff8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ffc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004000:	4628      	mov	r0, r5
 8004002:	f00e ff0c 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004006:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800400a:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8004100 <_ZN15Screen1ViewBaseC1Ev+0xbf0>
 800400e:	ee07 3a90 	vmov	s15, r3
 8004012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004016:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800401a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800401e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004022:	f2c1 8318 	blt.w	8005656 <_ZN15Screen1ViewBaseC1Ev+0x2146>
            return (int)(fs + 0.5f);
 8004026:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800402a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800402e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004032:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004036:	4628      	mov	r0, r5
 8004038:	f00e fef1 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800403c:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004040:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8004104 <_ZN15Screen1ViewBaseC1Ev+0xbf4>
 8004044:	ee07 3a90 	vmov	s15, r3
 8004048:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800404c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004050:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004058:	f2c1 8312 	blt.w	8005680 <_ZN15Screen1ViewBaseC1Ev+0x2170>
            return (int)(fs + 0.5f);
 800405c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004060:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004064:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004068:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800406c:	4628      	mov	r0, r5
 800406e:	f00e fed6 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004072:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004076:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8004108 <_ZN15Screen1ViewBaseC1Ev+0xbf8>
 800407a:	ee07 3a90 	vmov	s15, r3
 800407e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004082:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004086:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800408a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800408e:	f2c1 830c 	blt.w	80056aa <_ZN15Screen1ViewBaseC1Ev+0x219a>
            return (int)(fs + 0.5f);
 8004092:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004096:	ee77 7a87 	vadd.f32	s15, s15, s14
 800409a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800409e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80040a2:	4628      	mov	r0, r5
 80040a4:	f00e febb 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80040a8:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80040ac:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800410c <_ZN15Screen1ViewBaseC1Ev+0xbfc>
 80040b0:	ee07 3a90 	vmov	s15, r3
 80040b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040b8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80040bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040c4:	e048      	b.n	8004158 <_ZN15Screen1ViewBaseC1Ev+0xc48>
 80040c6:	bf00      	nop
 80040c8:	ff1497c5 	.word	0xff1497c5
 80040cc:	ffc4b916 	.word	0xffc4b916
 80040d0:	40fdf751 	.word	0x40fdf751
 80040d4:	3fcfeea2 	.word	0x3fcfeea2
 80040d8:	40160496 	.word	0x40160496
 80040dc:	411aa4d3 	.word	0x411aa4d3
 80040e0:	41adf368 	.word	0x41adf368
 80040e4:	420f197d 	.word	0x420f197d
 80040e8:	4242b180 	.word	0x4242b180
 80040ec:	42674305 	.word	0x42674305
 80040f0:	4276a3b8 	.word	0x4276a3b8
 80040f4:	42706398 	.word	0x42706398
 80040f8:	4259c671 	.word	0x4259c671
 80040fc:	423c53c6 	.word	0x423c53c6
 8004100:	422358c3 	.word	0x422358c3
 8004104:	4218fa27 	.word	0x4218fa27
 8004108:	42238f61 	.word	0x42238f61
 800410c:	4243ee46 	.word	0x4243ee46
 8004110:	427513c3 	.word	0x427513c3
 8004114:	4296a021 	.word	0x4296a021
 8004118:	42b021ad 	.word	0x42b021ad
 800411c:	42c133eb 	.word	0x42c133eb
 8004120:	42c5a4c8 	.word	0x42c5a4c8
 8004124:	42bbf1d7 	.word	0x42bbf1d7
 8004128:	42a5ab40 	.word	0x42a5ab40
 800412c:	42871a0d 	.word	0x42871a0d
 8004130:	424c7f02 	.word	0x424c7f02
 8004134:	4212d7a0 	.word	0x4212d7a0
 8004138:	41d7103e 	.word	0x41d7103e
 800413c:	41b84d36 	.word	0x41b84d36
 8004140:	41c8c04f 	.word	0x41c8c04f
 8004144:	41fc6dac 	.word	0x41fc6dac
 8004148:	421fa1f2 	.word	0x421fa1f2
 800414c:	423d28aa 	.word	0x423d28aa
 8004150:	424cd2bd 	.word	0x424cd2bd
 8004154:	4248b54f 	.word	0x4248b54f
 8004158:	f2c1 82bc 	blt.w	80056d4 <_ZN15Screen1ViewBaseC1Ev+0x21c4>
            return (int)(fs + 0.5f);
 800415c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004160:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004164:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004168:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800416c:	4628      	mov	r0, r5
 800416e:	f00e fe56 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004172:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004176:	ed1f 7a1a 	vldr	s14, [pc, #-104]	; 8004110 <_ZN15Screen1ViewBaseC1Ev+0xc00>
 800417a:	ee07 3a90 	vmov	s15, r3
 800417e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004182:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004186:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800418a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800418e:	f2c1 82b6 	blt.w	80056fe <_ZN15Screen1ViewBaseC1Ev+0x21ee>
            return (int)(fs + 0.5f);
 8004192:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004196:	ee77 7a87 	vadd.f32	s15, s15, s14
 800419a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800419e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80041a2:	4628      	mov	r0, r5
 80041a4:	f00e fe3b 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80041a8:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80041ac:	ed1f 7a27 	vldr	s14, [pc, #-156]	; 8004114 <_ZN15Screen1ViewBaseC1Ev+0xc04>
 80041b0:	ee07 3a90 	vmov	s15, r3
 80041b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041b8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80041bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041c4:	f2c1 82b0 	blt.w	8005728 <_ZN15Screen1ViewBaseC1Ev+0x2218>
            return (int)(fs + 0.5f);
 80041c8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80041cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041d4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80041d8:	4628      	mov	r0, r5
 80041da:	f00e fe20 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80041de:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80041e2:	ed1f 7a33 	vldr	s14, [pc, #-204]	; 8004118 <_ZN15Screen1ViewBaseC1Ev+0xc08>
 80041e6:	ee07 3a90 	vmov	s15, r3
 80041ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041ee:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80041f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041fa:	f2c1 82aa 	blt.w	8005752 <_ZN15Screen1ViewBaseC1Ev+0x2242>
            return (int)(fs + 0.5f);
 80041fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004202:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004206:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800420a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800420e:	4628      	mov	r0, r5
 8004210:	f00e fe05 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004214:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004218:	ed1f 7a40 	vldr	s14, [pc, #-256]	; 800411c <_ZN15Screen1ViewBaseC1Ev+0xc0c>
 800421c:	ee07 3a90 	vmov	s15, r3
 8004220:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004224:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004228:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800422c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004230:	f2c1 82a4 	blt.w	800577c <_ZN15Screen1ViewBaseC1Ev+0x226c>
            return (int)(fs + 0.5f);
 8004234:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004238:	ee77 7a87 	vadd.f32	s15, s15, s14
 800423c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004240:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004244:	4628      	mov	r0, r5
 8004246:	f00e fdea 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800424a:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800424e:	ed1f 7a4c 	vldr	s14, [pc, #-304]	; 8004120 <_ZN15Screen1ViewBaseC1Ev+0xc10>
 8004252:	ee07 3a90 	vmov	s15, r3
 8004256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800425a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800425e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004266:	f2c1 829e 	blt.w	80057a6 <_ZN15Screen1ViewBaseC1Ev+0x2296>
            return (int)(fs + 0.5f);
 800426a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800426e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004272:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004276:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800427a:	4628      	mov	r0, r5
 800427c:	f00e fdcf 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004280:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004284:	ed1f 7a59 	vldr	s14, [pc, #-356]	; 8004124 <_ZN15Screen1ViewBaseC1Ev+0xc14>
 8004288:	ee07 3a90 	vmov	s15, r3
 800428c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004290:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004294:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800429c:	f2c1 8298 	blt.w	80057d0 <_ZN15Screen1ViewBaseC1Ev+0x22c0>
            return (int)(fs + 0.5f);
 80042a0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80042a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042ac:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80042b0:	4628      	mov	r0, r5
 80042b2:	f00e fdb4 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80042b6:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80042ba:	ed1f 7a65 	vldr	s14, [pc, #-404]	; 8004128 <_ZN15Screen1ViewBaseC1Ev+0xc18>
 80042be:	ee07 3a90 	vmov	s15, r3
 80042c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042c6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80042ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d2:	f2c1 8292 	blt.w	80057fa <_ZN15Screen1ViewBaseC1Ev+0x22ea>
            return (int)(fs + 0.5f);
 80042d6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80042da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042e2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80042e6:	4628      	mov	r0, r5
 80042e8:	f00e fd99 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80042ec:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80042f0:	ed1f 7a72 	vldr	s14, [pc, #-456]	; 800412c <_ZN15Screen1ViewBaseC1Ev+0xc1c>
 80042f4:	ee07 3a90 	vmov	s15, r3
 80042f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042fc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004300:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004308:	f2c1 828c 	blt.w	8005824 <_ZN15Screen1ViewBaseC1Ev+0x2314>
            return (int)(fs + 0.5f);
 800430c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004310:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004314:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004318:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800431c:	4628      	mov	r0, r5
 800431e:	f00e fd7e 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004322:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004326:	ed1f 7a7e 	vldr	s14, [pc, #-504]	; 8004130 <_ZN15Screen1ViewBaseC1Ev+0xc20>
 800432a:	ee07 3a90 	vmov	s15, r3
 800432e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004332:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004336:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800433a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800433e:	f2c1 8286 	blt.w	800584e <_ZN15Screen1ViewBaseC1Ev+0x233e>
            return (int)(fs + 0.5f);
 8004342:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004346:	ee77 7a87 	vadd.f32	s15, s15, s14
 800434a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800434e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004352:	4628      	mov	r0, r5
 8004354:	f00e fd63 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004358:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800435c:	ed1f 7a8b 	vldr	s14, [pc, #-556]	; 8004134 <_ZN15Screen1ViewBaseC1Ev+0xc24>
 8004360:	ee07 3a90 	vmov	s15, r3
 8004364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004368:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800436c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004374:	f2c1 8280 	blt.w	8005878 <_ZN15Screen1ViewBaseC1Ev+0x2368>
            return (int)(fs + 0.5f);
 8004378:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800437c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004380:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004384:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004388:	4628      	mov	r0, r5
 800438a:	f00e fd48 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800438e:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004392:	ed1f 7a97 	vldr	s14, [pc, #-604]	; 8004138 <_ZN15Screen1ViewBaseC1Ev+0xc28>
 8004396:	ee07 3a90 	vmov	s15, r3
 800439a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800439e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80043a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043aa:	f2c1 827a 	blt.w	80058a2 <_ZN15Screen1ViewBaseC1Ev+0x2392>
            return (int)(fs + 0.5f);
 80043ae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80043b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043ba:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80043be:	4628      	mov	r0, r5
 80043c0:	f00e fd2d 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80043c4:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80043c8:	ed1f 7aa4 	vldr	s14, [pc, #-656]	; 800413c <_ZN15Screen1ViewBaseC1Ev+0xc2c>
 80043cc:	ee07 3a90 	vmov	s15, r3
 80043d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043d4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80043d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e0:	f2c1 8274 	blt.w	80058cc <_ZN15Screen1ViewBaseC1Ev+0x23bc>
            return (int)(fs + 0.5f);
 80043e4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80043e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043f0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80043f4:	4628      	mov	r0, r5
 80043f6:	f00e fd12 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80043fa:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80043fe:	ed1f 7ab0 	vldr	s14, [pc, #-704]	; 8004140 <_ZN15Screen1ViewBaseC1Ev+0xc30>
 8004402:	ee07 3a90 	vmov	s15, r3
 8004406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800440a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800440e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004416:	f2c1 826e 	blt.w	80058f6 <_ZN15Screen1ViewBaseC1Ev+0x23e6>
            return (int)(fs + 0.5f);
 800441a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800441e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004422:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004426:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800442a:	4628      	mov	r0, r5
 800442c:	f00e fcf7 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004430:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004434:	ed1f 7abd 	vldr	s14, [pc, #-756]	; 8004144 <_ZN15Screen1ViewBaseC1Ev+0xc34>
 8004438:	ee07 3a90 	vmov	s15, r3
 800443c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004440:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004444:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800444c:	f2c1 8268 	blt.w	8005920 <_ZN15Screen1ViewBaseC1Ev+0x2410>
            return (int)(fs + 0.5f);
 8004450:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004454:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004458:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800445c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004460:	4628      	mov	r0, r5
 8004462:	f00e fcdc 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004466:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800446a:	ed1f 7ac9 	vldr	s14, [pc, #-804]	; 8004148 <_ZN15Screen1ViewBaseC1Ev+0xc38>
 800446e:	ee07 3a90 	vmov	s15, r3
 8004472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004476:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800447a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800447e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004482:	f2c1 8262 	blt.w	800594a <_ZN15Screen1ViewBaseC1Ev+0x243a>
            return (int)(fs + 0.5f);
 8004486:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800448a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800448e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004492:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004496:	4628      	mov	r0, r5
 8004498:	f00e fcc1 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800449c:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80044a0:	ed1f 7ad6 	vldr	s14, [pc, #-856]	; 800414c <_ZN15Screen1ViewBaseC1Ev+0xc3c>
 80044a4:	ee07 3a90 	vmov	s15, r3
 80044a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044ac:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80044b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b8:	f2c1 825c 	blt.w	8005974 <_ZN15Screen1ViewBaseC1Ev+0x2464>
            return (int)(fs + 0.5f);
 80044bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80044c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044c8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80044cc:	4628      	mov	r0, r5
 80044ce:	f00e fca6 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80044d2:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80044d6:	ed1f 7ae2 	vldr	s14, [pc, #-904]	; 8004150 <_ZN15Screen1ViewBaseC1Ev+0xc40>
 80044da:	ee07 3a90 	vmov	s15, r3
 80044de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044e2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80044e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ee:	f2c1 8256 	blt.w	800599e <_ZN15Screen1ViewBaseC1Ev+0x248e>
            return (int)(fs + 0.5f);
 80044f2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80044f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044fe:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004502:	4628      	mov	r0, r5
 8004504:	f00e fc8b 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004508:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800450c:	ed1f 7aef 	vldr	s14, [pc, #-956]	; 8004154 <_ZN15Screen1ViewBaseC1Ev+0xc44>
 8004510:	ee07 3a90 	vmov	s15, r3
 8004514:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004518:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800451c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004524:	f2c1 8250 	blt.w	80059c8 <_ZN15Screen1ViewBaseC1Ev+0x24b8>
            return (int)(fs + 0.5f);
 8004528:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800452c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004530:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004534:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004538:	4628      	mov	r0, r5
 800453a:	f00e fc70 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800453e:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004542:	ed9f 7af5 	vldr	s14, [pc, #980]	; 8004918 <_ZN15Screen1ViewBaseC1Ev+0x1408>
 8004546:	ee07 3a90 	vmov	s15, r3
 800454a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800454e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004552:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800455a:	f2c1 824a 	blt.w	80059f2 <_ZN15Screen1ViewBaseC1Ev+0x24e2>
            return (int)(fs + 0.5f);
 800455e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004562:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004566:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800456a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800456e:	4628      	mov	r0, r5
 8004570:	f00e fc55 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004574:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004578:	ed9f 7ae8 	vldr	s14, [pc, #928]	; 800491c <_ZN15Screen1ViewBaseC1Ev+0x140c>
 800457c:	ee07 3a90 	vmov	s15, r3
 8004580:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004584:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004588:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800458c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004590:	f2c1 8244 	blt.w	8005a1c <_ZN15Screen1ViewBaseC1Ev+0x250c>
            return (int)(fs + 0.5f);
 8004594:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004598:	ee77 7a87 	vadd.f32	s15, s15, s14
 800459c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045a0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80045a4:	4628      	mov	r0, r5
 80045a6:	f00e fc3a 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80045aa:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80045ae:	ed9f 7adc 	vldr	s14, [pc, #880]	; 8004920 <_ZN15Screen1ViewBaseC1Ev+0x1410>
 80045b2:	ee07 3a90 	vmov	s15, r3
 80045b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045ba:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80045be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c6:	f2c1 823e 	blt.w	8005a46 <_ZN15Screen1ViewBaseC1Ev+0x2536>
            return (int)(fs + 0.5f);
 80045ca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80045ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045d6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80045da:	4628      	mov	r0, r5
 80045dc:	f00e fc1f 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80045e0:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80045e4:	ed9f 7acf 	vldr	s14, [pc, #828]	; 8004924 <_ZN15Screen1ViewBaseC1Ev+0x1414>
 80045e8:	ee07 3a90 	vmov	s15, r3
 80045ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045f0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80045f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045fc:	f2c1 8238 	blt.w	8005a70 <_ZN15Screen1ViewBaseC1Ev+0x2560>
            return (int)(fs + 0.5f);
 8004600:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004604:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004608:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800460c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004610:	4628      	mov	r0, r5
 8004612:	f00e fc04 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004616:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800461a:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 8004928 <_ZN15Screen1ViewBaseC1Ev+0x1418>
 800461e:	ee07 3a90 	vmov	s15, r3
 8004622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004626:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800462a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800462e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004632:	f2c1 8232 	blt.w	8005a9a <_ZN15Screen1ViewBaseC1Ev+0x258a>
            return (int)(fs + 0.5f);
 8004636:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800463a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800463e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004642:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004646:	4628      	mov	r0, r5
 8004648:	f00e fbe9 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800464c:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004650:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 800492c <_ZN15Screen1ViewBaseC1Ev+0x141c>
 8004654:	ee07 3a90 	vmov	s15, r3
 8004658:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800465c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004660:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004668:	f2c1 822c 	blt.w	8005ac4 <_ZN15Screen1ViewBaseC1Ev+0x25b4>
            return (int)(fs + 0.5f);
 800466c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004670:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004674:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004678:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800467c:	4628      	mov	r0, r5
 800467e:	f00e fbce 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004682:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004686:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8004930 <_ZN15Screen1ViewBaseC1Ev+0x1420>
 800468a:	ee07 3a90 	vmov	s15, r3
 800468e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004692:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004696:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800469a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800469e:	f2c1 8226 	blt.w	8005aee <_ZN15Screen1ViewBaseC1Ev+0x25de>
            return (int)(fs + 0.5f);
 80046a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80046a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046ae:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80046b2:	4628      	mov	r0, r5
 80046b4:	f00e fbb3 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80046b8:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80046bc:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8004934 <_ZN15Screen1ViewBaseC1Ev+0x1424>
 80046c0:	ee07 3a90 	vmov	s15, r3
 80046c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046c8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80046cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d4:	f2c1 8220 	blt.w	8005b18 <_ZN15Screen1ViewBaseC1Ev+0x2608>
            return (int)(fs + 0.5f);
 80046d8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80046dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046e4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80046e8:	4628      	mov	r0, r5
 80046ea:	f00e fb98 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80046ee:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80046f2:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8004938 <_ZN15Screen1ViewBaseC1Ev+0x1428>
 80046f6:	ee07 3a90 	vmov	s15, r3
 80046fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046fe:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004702:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800470a:	f2c1 821a 	blt.w	8005b42 <_ZN15Screen1ViewBaseC1Ev+0x2632>
            return (int)(fs + 0.5f);
 800470e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004712:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004716:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800471a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800471e:	4628      	mov	r0, r5
 8004720:	f00e fb7d 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004724:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004728:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800493c <_ZN15Screen1ViewBaseC1Ev+0x142c>
 800472c:	ee07 3a90 	vmov	s15, r3
 8004730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004734:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004738:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800473c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004740:	f2c1 8214 	blt.w	8005b6c <_ZN15Screen1ViewBaseC1Ev+0x265c>
            return (int)(fs + 0.5f);
 8004744:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004748:	ee77 7a87 	vadd.f32	s15, s15, s14
 800474c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004750:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004754:	4628      	mov	r0, r5
 8004756:	f00e fb62 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800475a:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800475e:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8004940 <_ZN15Screen1ViewBaseC1Ev+0x1430>
 8004762:	ee07 3a90 	vmov	s15, r3
 8004766:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800476a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800476e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004776:	f2c1 820e 	blt.w	8005b96 <_ZN15Screen1ViewBaseC1Ev+0x2686>
            return (int)(fs + 0.5f);
 800477a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800477e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004782:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004786:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800478a:	4628      	mov	r0, r5
 800478c:	f00e fb47 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004790:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004794:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8004944 <_ZN15Screen1ViewBaseC1Ev+0x1434>
 8004798:	ee07 3a90 	vmov	s15, r3
 800479c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047a0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80047a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ac:	f2c1 8208 	blt.w	8005bc0 <_ZN15Screen1ViewBaseC1Ev+0x26b0>
            return (int)(fs + 0.5f);
 80047b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80047b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047bc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80047c0:	4628      	mov	r0, r5
 80047c2:	f00e fb2c 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80047c6:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80047ca:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8004948 <_ZN15Screen1ViewBaseC1Ev+0x1438>
 80047ce:	ee07 3a90 	vmov	s15, r3
 80047d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047d6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80047da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e2:	f2c1 8202 	blt.w	8005bea <_ZN15Screen1ViewBaseC1Ev+0x26da>
            return (int)(fs + 0.5f);
 80047e6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80047ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047f2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80047f6:	4628      	mov	r0, r5
 80047f8:	f00e fb11 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80047fc:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004800:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800494c <_ZN15Screen1ViewBaseC1Ev+0x143c>
 8004804:	ee07 3a90 	vmov	s15, r3
 8004808:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800480c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004810:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004818:	f2c1 81fc 	blt.w	8005c14 <_ZN15Screen1ViewBaseC1Ev+0x2704>
            return (int)(fs + 0.5f);
 800481c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004820:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004824:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004828:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800482c:	4628      	mov	r0, r5
 800482e:	f00e faf6 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004832:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004836:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8004950 <_ZN15Screen1ViewBaseC1Ev+0x1440>
 800483a:	ee07 3a90 	vmov	s15, r3
 800483e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004842:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004846:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800484a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800484e:	f2c1 81f6 	blt.w	8005c3e <_ZN15Screen1ViewBaseC1Ev+0x272e>
            return (int)(fs + 0.5f);
 8004852:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004856:	ee77 7a87 	vadd.f32	s15, s15, s14
 800485a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800485e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004862:	4628      	mov	r0, r5
 8004864:	f00e fadb 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004868:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800486c:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8004954 <_ZN15Screen1ViewBaseC1Ev+0x1444>
 8004870:	ee07 3a90 	vmov	s15, r3
 8004874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004878:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800487c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004884:	f2c1 81f0 	blt.w	8005c68 <_ZN15Screen1ViewBaseC1Ev+0x2758>
            return (int)(fs + 0.5f);
 8004888:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800488c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004890:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004894:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004898:	4628      	mov	r0, r5
 800489a:	f00e fac0 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800489e:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80048a2:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8004958 <_ZN15Screen1ViewBaseC1Ev+0x1448>
 80048a6:	ee07 3a90 	vmov	s15, r3
 80048aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048ae:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80048b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ba:	f2c1 81ea 	blt.w	8005c92 <_ZN15Screen1ViewBaseC1Ev+0x2782>
            return (int)(fs + 0.5f);
 80048be:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80048c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80048c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048ca:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80048ce:	4628      	mov	r0, r5
 80048d0:	f00e faa5 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80048d4:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80048d8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800495c <_ZN15Screen1ViewBaseC1Ev+0x144c>
 80048dc:	ee07 3a90 	vmov	s15, r3
 80048e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048e4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80048e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048f0:	f2c1 81e4 	blt.w	8005cbc <_ZN15Screen1ViewBaseC1Ev+0x27ac>
            return (int)(fs + 0.5f);
 80048f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80048f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80048fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004900:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004904:	4628      	mov	r0, r5
 8004906:	f00e fa8a 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800490a:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800490e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004960 <_ZN15Screen1ViewBaseC1Ev+0x1450>
 8004912:	ee07 3a90 	vmov	s15, r3
 8004916:	e049      	b.n	80049ac <_ZN15Screen1ViewBaseC1Ev+0x149c>
 8004918:	42307b0b 	.word	0x42307b0b
 800491c:	420986bd 	.word	0x420986bd
 8004920:	41bb4e8a 	.word	0x41bb4e8a
 8004924:	4162b886 	.word	0x4162b886
 8004928:	4115feb0 	.word	0x4115feb0
 800492c:	412d5677 	.word	0x412d5677
 8004930:	4197c0dc 	.word	0x4197c0dc
 8004934:	4202bd8b 	.word	0x4202bd8b
 8004938:	424665b4 	.word	0x424665b4
 800493c:	42852d25 	.word	0x42852d25
 8004940:	42a10577 	.word	0x42a10577
 8004944:	42b1dfb4 	.word	0x42b1dfb4
 8004948:	42b56873 	.word	0x42b56873
 800494c:	42ac5462 	.word	0x42ac5462
 8004950:	429a2405 	.word	0x429a2405
 8004954:	42843b27 	.word	0x42843b27
 8004958:	42610aed 	.word	0x42610aed
 800495c:	4247fb84 	.word	0x4247fb84
 8004960:	4242e892 	.word	0x4242e892
 8004964:	4251c1f2 	.word	0x4251c1f2
 8004968:	426ed828 	.word	0x426ed828
 800496c:	42882ad4 	.word	0x42882ad4
 8004970:	42956170 	.word	0x42956170
 8004974:	4299fb29 	.word	0x4299fb29
 8004978:	4292db9d 	.word	0x4292db9d
 800497c:	427f6be9 	.word	0x427f6be9
 8004980:	4246694a 	.word	0x4246694a
 8004984:	4204cdd3 	.word	0x4204cdd3
 8004988:	418e5d1f 	.word	0x418e5d1f
 800498c:	40cd3001 	.word	0x40cd3001
 8004990:	3f9f7cee 	.word	0x3f9f7cee
 8004994:	404972c5 	.word	0x404972c5
 8004998:	4136e61d 	.word	0x4136e61d
 800499c:	41c068c7 	.word	0x41c068c7
 80049a0:	42186a82 	.word	0x42186a82
 80049a4:	424a2037 	.word	0x424a2037
 80049a8:	426b6aa4 	.word	0x426b6aa4
 80049ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049b0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80049b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049bc:	f2c1 8193 	blt.w	8005ce6 <_ZN15Screen1ViewBaseC1Ev+0x27d6>
            return (int)(fs + 0.5f);
 80049c0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80049c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80049c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049cc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80049d0:	4628      	mov	r0, r5
 80049d2:	f00e fa24 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80049d6:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80049da:	ed1f 7a1e 	vldr	s14, [pc, #-120]	; 8004964 <_ZN15Screen1ViewBaseC1Ev+0x1454>
 80049de:	ee07 3a90 	vmov	s15, r3
 80049e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049e6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80049ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049f2:	f2c1 818d 	blt.w	8005d10 <_ZN15Screen1ViewBaseC1Ev+0x2800>
            return (int)(fs + 0.5f);
 80049f6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80049fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80049fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a02:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004a06:	4628      	mov	r0, r5
 8004a08:	f00e fa09 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004a0c:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004a10:	ed1f 7a2b 	vldr	s14, [pc, #-172]	; 8004968 <_ZN15Screen1ViewBaseC1Ev+0x1458>
 8004a14:	ee07 3a90 	vmov	s15, r3
 8004a18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a1c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004a20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a28:	f2c1 8187 	blt.w	8005d3a <_ZN15Screen1ViewBaseC1Ev+0x282a>
            return (int)(fs + 0.5f);
 8004a2c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004a30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a38:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004a3c:	4628      	mov	r0, r5
 8004a3e:	f00e f9ee 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004a42:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004a46:	ed1f 7a37 	vldr	s14, [pc, #-220]	; 800496c <_ZN15Screen1ViewBaseC1Ev+0x145c>
 8004a4a:	ee07 3a90 	vmov	s15, r3
 8004a4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a52:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004a56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a5e:	f2c1 8181 	blt.w	8005d64 <_ZN15Screen1ViewBaseC1Ev+0x2854>
            return (int)(fs + 0.5f);
 8004a62:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004a66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a6e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004a72:	4628      	mov	r0, r5
 8004a74:	f00e f9d3 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004a78:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004a7c:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8004970 <_ZN15Screen1ViewBaseC1Ev+0x1460>
 8004a80:	ee07 3a90 	vmov	s15, r3
 8004a84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a88:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004a8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a94:	f2c1 817b 	blt.w	8005d8e <_ZN15Screen1ViewBaseC1Ev+0x287e>
            return (int)(fs + 0.5f);
 8004a98:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004a9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004aa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004aa4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	f00e f9b8 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004aae:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004ab2:	ed1f 7a50 	vldr	s14, [pc, #-320]	; 8004974 <_ZN15Screen1ViewBaseC1Ev+0x1464>
 8004ab6:	ee07 3a90 	vmov	s15, r3
 8004aba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004abe:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004ac2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aca:	f2c1 8175 	blt.w	8005db8 <_ZN15Screen1ViewBaseC1Ev+0x28a8>
            return (int)(fs + 0.5f);
 8004ace:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004ad2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ad6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ada:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004ade:	4628      	mov	r0, r5
 8004ae0:	f00e f99d 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004ae4:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004ae8:	ed1f 7a5d 	vldr	s14, [pc, #-372]	; 8004978 <_ZN15Screen1ViewBaseC1Ev+0x1468>
 8004aec:	ee07 3a90 	vmov	s15, r3
 8004af0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004af4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004af8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b00:	f2c1 816f 	blt.w	8005de2 <_ZN15Screen1ViewBaseC1Ev+0x28d2>
            return (int)(fs + 0.5f);
 8004b04:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004b08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b10:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004b14:	4628      	mov	r0, r5
 8004b16:	f00e f982 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004b1a:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004b1e:	ed1f 7a69 	vldr	s14, [pc, #-420]	; 800497c <_ZN15Screen1ViewBaseC1Ev+0x146c>
 8004b22:	ee07 3a90 	vmov	s15, r3
 8004b26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b2a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004b2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b36:	f2c1 8169 	blt.w	8005e0c <_ZN15Screen1ViewBaseC1Ev+0x28fc>
            return (int)(fs + 0.5f);
 8004b3a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004b3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b46:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	f00e f967 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004b50:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004b54:	ed1f 7a76 	vldr	s14, [pc, #-472]	; 8004980 <_ZN15Screen1ViewBaseC1Ev+0x1470>
 8004b58:	ee07 3a90 	vmov	s15, r3
 8004b5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b60:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004b64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b6c:	f2c1 8163 	blt.w	8005e36 <_ZN15Screen1ViewBaseC1Ev+0x2926>
            return (int)(fs + 0.5f);
 8004b70:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004b74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b7c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004b80:	4628      	mov	r0, r5
 8004b82:	f00e f94c 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004b86:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004b8a:	ed1f 7a82 	vldr	s14, [pc, #-520]	; 8004984 <_ZN15Screen1ViewBaseC1Ev+0x1474>
 8004b8e:	ee07 3a90 	vmov	s15, r3
 8004b92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b96:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004b9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ba2:	f2c1 815d 	blt.w	8005e60 <_ZN15Screen1ViewBaseC1Ev+0x2950>
            return (int)(fs + 0.5f);
 8004ba6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004baa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004bae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bb2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004bb6:	4628      	mov	r0, r5
 8004bb8:	f00e f931 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004bbc:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004bc0:	ed1f 7a8f 	vldr	s14, [pc, #-572]	; 8004988 <_ZN15Screen1ViewBaseC1Ev+0x1478>
 8004bc4:	ee07 3a90 	vmov	s15, r3
 8004bc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bcc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004bd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bd8:	f2c1 8157 	blt.w	8005e8a <_ZN15Screen1ViewBaseC1Ev+0x297a>
            return (int)(fs + 0.5f);
 8004bdc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004be0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004be4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004be8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004bec:	4628      	mov	r0, r5
 8004bee:	f00e f916 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004bf2:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004bf6:	ed1f 7a9b 	vldr	s14, [pc, #-620]	; 800498c <_ZN15Screen1ViewBaseC1Ev+0x147c>
 8004bfa:	ee07 3a90 	vmov	s15, r3
 8004bfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c02:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004c06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c0e:	f2c1 8151 	blt.w	8005eb4 <_ZN15Screen1ViewBaseC1Ev+0x29a4>
            return (int)(fs + 0.5f);
 8004c12:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004c16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c1e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004c22:	4628      	mov	r0, r5
 8004c24:	f00e f8fb 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004c28:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004c2c:	ed1f 7aa8 	vldr	s14, [pc, #-672]	; 8004990 <_ZN15Screen1ViewBaseC1Ev+0x1480>
 8004c30:	ee07 3a90 	vmov	s15, r3
 8004c34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c38:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004c3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c44:	f2c1 814b 	blt.w	8005ede <_ZN15Screen1ViewBaseC1Ev+0x29ce>
            return (int)(fs + 0.5f);
 8004c48:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004c4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c54:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004c58:	4628      	mov	r0, r5
 8004c5a:	f00e f8e0 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004c5e:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004c62:	ed1f 7ab4 	vldr	s14, [pc, #-720]	; 8004994 <_ZN15Screen1ViewBaseC1Ev+0x1484>
 8004c66:	ee07 3a90 	vmov	s15, r3
 8004c6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c6e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004c72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c7a:	f2c1 8145 	blt.w	8005f08 <_ZN15Screen1ViewBaseC1Ev+0x29f8>
            return (int)(fs + 0.5f);
 8004c7e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004c82:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c8a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004c8e:	4628      	mov	r0, r5
 8004c90:	f00e f8c5 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004c94:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004c98:	ed1f 7ac1 	vldr	s14, [pc, #-772]	; 8004998 <_ZN15Screen1ViewBaseC1Ev+0x1488>
 8004c9c:	ee07 3a90 	vmov	s15, r3
 8004ca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ca4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004ca8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cb0:	f2c1 813f 	blt.w	8005f32 <_ZN15Screen1ViewBaseC1Ev+0x2a22>
            return (int)(fs + 0.5f);
 8004cb4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004cb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004cbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004cc0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004cc4:	4628      	mov	r0, r5
 8004cc6:	f00e f8aa 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004cca:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004cce:	ed1f 7acd 	vldr	s14, [pc, #-820]	; 800499c <_ZN15Screen1ViewBaseC1Ev+0x148c>
 8004cd2:	ee07 3a90 	vmov	s15, r3
 8004cd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cda:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004cde:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce6:	f2c1 8139 	blt.w	8005f5c <_ZN15Screen1ViewBaseC1Ev+0x2a4c>
            return (int)(fs + 0.5f);
 8004cea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004cee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004cf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004cf6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	f00e f88f 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004d00:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004d04:	ed1f 7ada 	vldr	s14, [pc, #-872]	; 80049a0 <_ZN15Screen1ViewBaseC1Ev+0x1490>
 8004d08:	ee07 3a90 	vmov	s15, r3
 8004d0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d10:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004d14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d1c:	f2c1 8133 	blt.w	8005f86 <_ZN15Screen1ViewBaseC1Ev+0x2a76>
            return (int)(fs + 0.5f);
 8004d20:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004d24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d2c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004d30:	4628      	mov	r0, r5
 8004d32:	f00e f874 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004d36:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004d3a:	ed1f 7ae6 	vldr	s14, [pc, #-920]	; 80049a4 <_ZN15Screen1ViewBaseC1Ev+0x1494>
 8004d3e:	ee07 3a90 	vmov	s15, r3
 8004d42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d46:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004d4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d52:	f2c1 812d 	blt.w	8005fb0 <_ZN15Screen1ViewBaseC1Ev+0x2aa0>
            return (int)(fs + 0.5f);
 8004d56:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004d5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d62:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004d66:	4628      	mov	r0, r5
 8004d68:	f00e f859 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004d6c:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004d70:	ed1f 7af3 	vldr	s14, [pc, #-972]	; 80049a8 <_ZN15Screen1ViewBaseC1Ev+0x1498>
 8004d74:	ee07 3a90 	vmov	s15, r3
 8004d78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d7c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004d80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d88:	f2c1 8127 	blt.w	8005fda <_ZN15Screen1ViewBaseC1Ev+0x2aca>
            return (int)(fs + 0.5f);
 8004d8c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004d90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d98:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	f00e f83e 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004da2:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004da6:	ed9f 7af5 	vldr	s14, [pc, #980]	; 800517c <_ZN15Screen1ViewBaseC1Ev+0x1c6c>
 8004daa:	ee07 3a90 	vmov	s15, r3
 8004dae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004db2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004db6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dbe:	f2c1 8121 	blt.w	8006004 <_ZN15Screen1ViewBaseC1Ev+0x2af4>
            return (int)(fs + 0.5f);
 8004dc2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004dc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004dca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004dce:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	f00e f823 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004dd8:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004ddc:	ed9f 7ae8 	vldr	s14, [pc, #928]	; 8005180 <_ZN15Screen1ViewBaseC1Ev+0x1c70>
 8004de0:	ee07 3a90 	vmov	s15, r3
 8004de4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004de8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004dec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004df4:	f2c1 811b 	blt.w	800602e <_ZN15Screen1ViewBaseC1Ev+0x2b1e>
            return (int)(fs + 0.5f);
 8004df8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004dfc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e04:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004e08:	4628      	mov	r0, r5
 8004e0a:	f00e f808 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004e0e:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004e12:	ed9f 7adc 	vldr	s14, [pc, #880]	; 8005184 <_ZN15Screen1ViewBaseC1Ev+0x1c74>
 8004e16:	ee07 3a90 	vmov	s15, r3
 8004e1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e1e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004e22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e2a:	f2c1 8115 	blt.w	8006058 <_ZN15Screen1ViewBaseC1Ev+0x2b48>
            return (int)(fs + 0.5f);
 8004e2e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004e32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e3a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004e3e:	4628      	mov	r0, r5
 8004e40:	f00d ffed 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004e44:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004e48:	ed9f 7acf 	vldr	s14, [pc, #828]	; 8005188 <_ZN15Screen1ViewBaseC1Ev+0x1c78>
 8004e4c:	ee07 3a90 	vmov	s15, r3
 8004e50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e54:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004e58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e60:	f2c1 810f 	blt.w	8006082 <_ZN15Screen1ViewBaseC1Ev+0x2b72>
            return (int)(fs + 0.5f);
 8004e64:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004e68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e70:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004e74:	4628      	mov	r0, r5
 8004e76:	f00d ffd2 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004e7a:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004e7e:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 800518c <_ZN15Screen1ViewBaseC1Ev+0x1c7c>
 8004e82:	ee07 3a90 	vmov	s15, r3
 8004e86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e8a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004e8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e96:	f2c1 8109 	blt.w	80060ac <_ZN15Screen1ViewBaseC1Ev+0x2b9c>
            return (int)(fs + 0.5f);
 8004e9a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004e9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ea2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ea6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004eaa:	4628      	mov	r0, r5
 8004eac:	f00d ffb7 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004eb0:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004eb4:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8005190 <_ZN15Screen1ViewBaseC1Ev+0x1c80>
 8004eb8:	ee07 3a90 	vmov	s15, r3
 8004ebc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ec0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004ec4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ecc:	f2c1 8103 	blt.w	80060d6 <_ZN15Screen1ViewBaseC1Ev+0x2bc6>
            return (int)(fs + 0.5f);
 8004ed0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004ed4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ed8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004edc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004ee0:	4628      	mov	r0, r5
 8004ee2:	f00d ff9c 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004ee6:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004eea:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8005194 <_ZN15Screen1ViewBaseC1Ev+0x1c84>
 8004eee:	ee07 3a90 	vmov	s15, r3
 8004ef2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ef6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004efa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f02:	f2c1 80fd 	blt.w	8006100 <_ZN15Screen1ViewBaseC1Ev+0x2bf0>
            return (int)(fs + 0.5f);
 8004f06:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004f0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f12:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004f16:	4628      	mov	r0, r5
 8004f18:	f00d ff81 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004f1c:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004f20:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8005198 <_ZN15Screen1ViewBaseC1Ev+0x1c88>
 8004f24:	ee07 3a90 	vmov	s15, r3
 8004f28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f2c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004f30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f38:	f2c1 80f7 	blt.w	800612a <_ZN15Screen1ViewBaseC1Ev+0x2c1a>
            return (int)(fs + 0.5f);
 8004f3c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004f40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f48:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004f4c:	4628      	mov	r0, r5
 8004f4e:	f00d ff66 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004f52:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004f56:	ed9f 7a91 	vldr	s14, [pc, #580]	; 800519c <_ZN15Screen1ViewBaseC1Ev+0x1c8c>
 8004f5a:	ee07 3a90 	vmov	s15, r3
 8004f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f62:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004f66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f6e:	f2c1 80f1 	blt.w	8006154 <_ZN15Screen1ViewBaseC1Ev+0x2c44>
            return (int)(fs + 0.5f);
 8004f72:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004f76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f7e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004f82:	4628      	mov	r0, r5
 8004f84:	f00d ff4b 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004f88:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004f8c:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80051a0 <_ZN15Screen1ViewBaseC1Ev+0x1c90>
 8004f90:	ee07 3a90 	vmov	s15, r3
 8004f94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f98:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004f9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fa4:	f2c1 80eb 	blt.w	800617e <_ZN15Screen1ViewBaseC1Ev+0x2c6e>
            return (int)(fs + 0.5f);
 8004fa8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004fac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004fb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fb4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004fb8:	4628      	mov	r0, r5
 8004fba:	f00d ff30 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004fbe:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004fc2:	ed9f 7a78 	vldr	s14, [pc, #480]	; 80051a4 <_ZN15Screen1ViewBaseC1Ev+0x1c94>
 8004fc6:	ee07 3a90 	vmov	s15, r3
 8004fca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fce:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004fd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fda:	f2c1 80e5 	blt.w	80061a8 <_ZN15Screen1ViewBaseC1Ev+0x2c98>
            return (int)(fs + 0.5f);
 8004fde:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004fe2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004fe6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fea:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004fee:	4628      	mov	r0, r5
 8004ff0:	f00d ff15 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004ff4:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004ff8:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80051a8 <_ZN15Screen1ViewBaseC1Ev+0x1c98>
 8004ffc:	ee07 3a90 	vmov	s15, r3
 8005000:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005004:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005008:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800500c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005010:	f2c1 80df 	blt.w	80061d2 <_ZN15Screen1ViewBaseC1Ev+0x2cc2>
            return (int)(fs + 0.5f);
 8005014:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005018:	ee77 7a87 	vadd.f32	s15, s15, s14
 800501c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005020:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005024:	4628      	mov	r0, r5
 8005026:	f00d fefa 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800502a:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800502e:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80051ac <_ZN15Screen1ViewBaseC1Ev+0x1c9c>
 8005032:	ee07 3a90 	vmov	s15, r3
 8005036:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800503a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800503e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005046:	f2c1 80d9 	blt.w	80061fc <_ZN15Screen1ViewBaseC1Ev+0x2cec>
            return (int)(fs + 0.5f);
 800504a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800504e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005052:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005056:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800505a:	4628      	mov	r0, r5
 800505c:	f00d fedf 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005060:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005064:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80051b0 <_ZN15Screen1ViewBaseC1Ev+0x1ca0>
 8005068:	ee07 3a90 	vmov	s15, r3
 800506c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005070:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005074:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800507c:	f2c1 80d3 	blt.w	8006226 <_ZN15Screen1ViewBaseC1Ev+0x2d16>
            return (int)(fs + 0.5f);
 8005080:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005084:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005088:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800508c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005090:	4628      	mov	r0, r5
 8005092:	f00d fec4 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005096:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800509a:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80051b4 <_ZN15Screen1ViewBaseC1Ev+0x1ca4>
 800509e:	ee07 3a90 	vmov	s15, r3
 80050a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050a6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80050aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80050ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b2:	f2c1 80cd 	blt.w	8006250 <_ZN15Screen1ViewBaseC1Ev+0x2d40>
            return (int)(fs + 0.5f);
 80050b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80050ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80050be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050c2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80050c6:	4628      	mov	r0, r5
 80050c8:	f00d fea9 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80050cc:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80050d0:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80051b8 <_ZN15Screen1ViewBaseC1Ev+0x1ca8>
 80050d4:	ee07 3a90 	vmov	s15, r3
 80050d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050dc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80050e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80050e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050e8:	f2c1 80c7 	blt.w	800627a <_ZN15Screen1ViewBaseC1Ev+0x2d6a>
            return (int)(fs + 0.5f);
 80050ec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80050f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80050f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050f8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80050fc:	4628      	mov	r0, r5
 80050fe:	f00d fe8e 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005102:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005106:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80051bc <_ZN15Screen1ViewBaseC1Ev+0x1cac>
 800510a:	ee07 3a90 	vmov	s15, r3
 800510e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005112:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005116:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800511a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800511e:	f2c1 80c1 	blt.w	80062a4 <_ZN15Screen1ViewBaseC1Ev+0x2d94>
            return (int)(fs + 0.5f);
 8005122:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005126:	ee77 7a87 	vadd.f32	s15, s15, s14
 800512a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800512e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005132:	4628      	mov	r0, r5
 8005134:	f00d fe73 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005138:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800513c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80051c0 <_ZN15Screen1ViewBaseC1Ev+0x1cb0>
 8005140:	ee07 3a90 	vmov	s15, r3
 8005144:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005148:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800514c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005154:	f2c1 80bb 	blt.w	80062ce <_ZN15Screen1ViewBaseC1Ev+0x2dbe>
            return (int)(fs + 0.5f);
 8005158:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800515c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005160:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005164:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005168:	4628      	mov	r0, r5
 800516a:	f00d fe58 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800516e:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005172:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80051c4 <_ZN15Screen1ViewBaseC1Ev+0x1cb4>
 8005176:	ee07 3a90 	vmov	s15, r3
 800517a:	e039      	b.n	80051f0 <_ZN15Screen1ViewBaseC1Ev+0x1ce0>
 800517c:	42770644 	.word	0x42770644
 8005180:	426d8366 	.word	0x426d8366
 8005184:	42550015 	.word	0x42550015
 8005188:	42378204 	.word	0x42378204
 800518c:	42205953 	.word	0x42205953
 8005190:	421931ba 	.word	0x421931ba
 8005194:	42278b9a 	.word	0x42278b9a
 8005198:	424b3cd6 	.word	0x424b3cd6
 800519c:	427e5902 	.word	0x427e5902
 80051a0:	429b43f0 	.word	0x429b43f0
 80051a4:	42b3bbd9 	.word	0x42b3bbd9
 80051a8:	42c2e952 	.word	0x42c2e952
 80051ac:	42c4ff5a 	.word	0x42c4ff5a
 80051b0:	42b8fdf1 	.word	0x42b8fdf1
 80051b4:	42a0f5c4 	.word	0x42a0f5c4
 80051b8:	42818fa4 	.word	0x42818fa4
 80051bc:	4241ea06 	.word	0x4241ea06
 80051c0:	420aba88 	.word	0x420aba88
 80051c4:	41ce68b7 	.word	0x41ce68b7
 80051c8:	41b7f63b 	.word	0x41b7f63b
 80051cc:	41cf726c 	.word	0x41cf726c
 80051d0:	42039d1a 	.word	0x42039d1a
 80051d4:	42252ce4 	.word	0x42252ce4
 80051d8:	4240fc41 	.word	0x4240fc41
 80051dc:	424d990c 	.word	0x424d990c
 80051e0:	4245f650 	.word	0x4245f650
 80051e4:	422abce3 	.word	0x422abce3
 80051e8:	42022e5b 	.word	0x42022e5b
 80051ec:	41ad425b 	.word	0x41ad425b
 80051f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051f4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80051f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005200:	f2c1 807a 	blt.w	80062f8 <_ZN15Screen1ViewBaseC1Ev+0x2de8>
            return (int)(fs + 0.5f);
 8005204:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005208:	ee77 7a87 	vadd.f32	s15, s15, s14
 800520c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005210:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005214:	4628      	mov	r0, r5
 8005216:	f00d fe02 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800521a:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800521e:	ed1f 7a16 	vldr	s14, [pc, #-88]	; 80051c8 <_ZN15Screen1ViewBaseC1Ev+0x1cb8>
 8005222:	ee07 3a90 	vmov	s15, r3
 8005226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800522a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800522e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005236:	f2c1 8074 	blt.w	8006322 <_ZN15Screen1ViewBaseC1Ev+0x2e12>
            return (int)(fs + 0.5f);
 800523a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800523e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005242:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005246:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800524a:	4628      	mov	r0, r5
 800524c:	f00d fde7 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005250:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005254:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 80051cc <_ZN15Screen1ViewBaseC1Ev+0x1cbc>
 8005258:	ee07 3a90 	vmov	s15, r3
 800525c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005260:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005264:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800526c:	f2c1 806e 	blt.w	800634c <_ZN15Screen1ViewBaseC1Ev+0x2e3c>
            return (int)(fs + 0.5f);
 8005270:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005274:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005278:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800527c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005280:	4628      	mov	r0, r5
 8005282:	f00d fdcc 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005286:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800528a:	ed1f 7a2f 	vldr	s14, [pc, #-188]	; 80051d0 <_ZN15Screen1ViewBaseC1Ev+0x1cc0>
 800528e:	ee07 3a90 	vmov	s15, r3
 8005292:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005296:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800529a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800529e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052a2:	f2c1 8068 	blt.w	8006376 <_ZN15Screen1ViewBaseC1Ev+0x2e66>
            return (int)(fs + 0.5f);
 80052a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80052aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80052ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052b2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80052b6:	4628      	mov	r0, r5
 80052b8:	f00d fdb1 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80052bc:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80052c0:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 80051d4 <_ZN15Screen1ViewBaseC1Ev+0x1cc4>
 80052c4:	ee07 3a90 	vmov	s15, r3
 80052c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052cc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80052d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80052d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052d8:	f2c1 8062 	blt.w	80063a0 <_ZN15Screen1ViewBaseC1Ev+0x2e90>
            return (int)(fs + 0.5f);
 80052dc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80052e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80052e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052e8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80052ec:	4628      	mov	r0, r5
 80052ee:	f00d fd96 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80052f2:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80052f6:	ed1f 7a48 	vldr	s14, [pc, #-288]	; 80051d8 <_ZN15Screen1ViewBaseC1Ev+0x1cc8>
 80052fa:	ee07 3a90 	vmov	s15, r3
 80052fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005302:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005306:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800530a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800530e:	f2c1 805c 	blt.w	80063ca <_ZN15Screen1ViewBaseC1Ev+0x2eba>
            return (int)(fs + 0.5f);
 8005312:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005316:	ee77 7a87 	vadd.f32	s15, s15, s14
 800531a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800531e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005322:	4628      	mov	r0, r5
 8005324:	f00d fd7b 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005328:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800532c:	ed1f 7a55 	vldr	s14, [pc, #-340]	; 80051dc <_ZN15Screen1ViewBaseC1Ev+0x1ccc>
 8005330:	ee07 3a90 	vmov	s15, r3
 8005334:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005338:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800533c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005344:	f2c1 8056 	blt.w	80063f4 <_ZN15Screen1ViewBaseC1Ev+0x2ee4>
            return (int)(fs + 0.5f);
 8005348:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800534c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005350:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005354:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005358:	4628      	mov	r0, r5
 800535a:	f00d fd60 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800535e:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005362:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 80051e0 <_ZN15Screen1ViewBaseC1Ev+0x1cd0>
 8005366:	ee07 3a90 	vmov	s15, r3
 800536a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800536e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005372:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800537a:	f2c1 8050 	blt.w	800641e <_ZN15Screen1ViewBaseC1Ev+0x2f0e>
            return (int)(fs + 0.5f);
 800537e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005382:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005386:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800538a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800538e:	4628      	mov	r0, r5
 8005390:	f00d fd45 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005394:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005398:	ed1f 7a6e 	vldr	s14, [pc, #-440]	; 80051e4 <_ZN15Screen1ViewBaseC1Ev+0x1cd4>
 800539c:	ee07 3a90 	vmov	s15, r3
 80053a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053a4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80053a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053b0:	f2c1 804a 	blt.w	8006448 <_ZN15Screen1ViewBaseC1Ev+0x2f38>
            return (int)(fs + 0.5f);
 80053b4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80053b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80053bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053c0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80053c4:	4628      	mov	r0, r5
 80053c6:	f00d fd2a 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80053ca:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80053ce:	ed1f 7a7a 	vldr	s14, [pc, #-488]	; 80051e8 <_ZN15Screen1ViewBaseC1Ev+0x1cd8>
 80053d2:	ee07 3a90 	vmov	s15, r3
 80053d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053da:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80053de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053e6:	f2c1 8044 	blt.w	8006472 <_ZN15Screen1ViewBaseC1Ev+0x2f62>
            return (int)(fs + 0.5f);
 80053ea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80053ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80053f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053f6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80053fa:	4628      	mov	r0, r5
 80053fc:	f00d fd0f 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005400:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005404:	ed1f 7a87 	vldr	s14, [pc, #-540]	; 80051ec <_ZN15Screen1ViewBaseC1Ev+0x1cdc>
 8005408:	ee07 3a90 	vmov	s15, r3
 800540c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005410:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005414:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800541c:	f2c1 803e 	blt.w	800649c <_ZN15Screen1ViewBaseC1Ev+0x2f8c>
            return (int)(fs + 0.5f);
 8005420:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005424:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005428:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800542c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005430:	4628      	mov	r0, r5
 8005432:	f00d fcf4 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 8005436:	4629      	mov	r1, r5
 8005438:	4638      	mov	r0, r7
 800543a:	f00b fe07 	bl	801104c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    customGraph1.setXY(480, 254);
 800543e:	22fe      	movs	r2, #254	; 0xfe
 8005440:	9803      	ldr	r0, [sp, #12]
 8005442:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8005446:	f7fd ffb4 	bl	80033b2 <_ZN8touchgfx8Drawable5setXYEss>
 800544a:	4638      	mov	r0, r7
 800544c:	9903      	ldr	r1, [sp, #12]
 800544e:	f00b fdfd 	bl	801104c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8005452:	4620      	mov	r0, r4
 8005454:	b00f      	add	sp, #60	; 0x3c
 8005456:	ecbd 8b10 	vpop	{d8-d15}
 800545a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800545e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005462:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005466:	ee17 3a10 	vmov	r3, s14
 800546a:	1e59      	subs	r1, r3, #1
 800546c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005470:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005474:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005478:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800547c:	ee17 3a90 	vmov	r3, s15
 8005480:	440b      	add	r3, r1
 8005482:	4619      	mov	r1, r3
 8005484:	f7fe bc93 	b.w	8003dae <_ZN15Screen1ViewBaseC1Ev+0x89e>
 8005488:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800548c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005490:	ee17 3a10 	vmov	r3, s14
 8005494:	1e59      	subs	r1, r3, #1
 8005496:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800549a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800549e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054a6:	ee17 3a90 	vmov	r3, s15
 80054aa:	440b      	add	r3, r1
 80054ac:	4619      	mov	r1, r3
 80054ae:	f7fe bc99 	b.w	8003de4 <_ZN15Screen1ViewBaseC1Ev+0x8d4>
 80054b2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80054b6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80054ba:	ee17 3a10 	vmov	r3, s14
 80054be:	1e59      	subs	r1, r3, #1
 80054c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80054c4:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80054c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054d0:	ee17 3a90 	vmov	r3, s15
 80054d4:	440b      	add	r3, r1
 80054d6:	4619      	mov	r1, r3
 80054d8:	f7fe bc9f 	b.w	8003e1a <_ZN15Screen1ViewBaseC1Ev+0x90a>
 80054dc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80054e0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80054e4:	ee17 3a10 	vmov	r3, s14
 80054e8:	1e59      	subs	r1, r3, #1
 80054ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80054ee:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80054f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054fa:	ee17 3a90 	vmov	r3, s15
 80054fe:	440b      	add	r3, r1
 8005500:	4619      	mov	r1, r3
 8005502:	f7fe bca5 	b.w	8003e50 <_ZN15Screen1ViewBaseC1Ev+0x940>
 8005506:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800550a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800550e:	ee17 3a10 	vmov	r3, s14
 8005512:	1e59      	subs	r1, r3, #1
 8005514:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005518:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800551c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005520:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005524:	ee17 3a90 	vmov	r3, s15
 8005528:	440b      	add	r3, r1
 800552a:	4619      	mov	r1, r3
 800552c:	f7fe bcab 	b.w	8003e86 <_ZN15Screen1ViewBaseC1Ev+0x976>
 8005530:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005534:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005538:	ee17 3a10 	vmov	r3, s14
 800553c:	1e59      	subs	r1, r3, #1
 800553e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005542:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800554a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800554e:	ee17 3a90 	vmov	r3, s15
 8005552:	440b      	add	r3, r1
 8005554:	4619      	mov	r1, r3
 8005556:	f7fe bcb1 	b.w	8003ebc <_ZN15Screen1ViewBaseC1Ev+0x9ac>
 800555a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800555e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005562:	ee17 3a10 	vmov	r3, s14
 8005566:	1e59      	subs	r1, r3, #1
 8005568:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800556c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005570:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005574:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005578:	ee17 3a90 	vmov	r3, s15
 800557c:	440b      	add	r3, r1
 800557e:	4619      	mov	r1, r3
 8005580:	f7fe bcb7 	b.w	8003ef2 <_ZN15Screen1ViewBaseC1Ev+0x9e2>
 8005584:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005588:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800558c:	ee17 3a10 	vmov	r3, s14
 8005590:	1e59      	subs	r1, r3, #1
 8005592:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005596:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800559a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800559e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055a2:	ee17 3a90 	vmov	r3, s15
 80055a6:	440b      	add	r3, r1
 80055a8:	4619      	mov	r1, r3
 80055aa:	f7fe bcbd 	b.w	8003f28 <_ZN15Screen1ViewBaseC1Ev+0xa18>
 80055ae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80055b2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80055b6:	ee17 3a10 	vmov	r3, s14
 80055ba:	1e59      	subs	r1, r3, #1
 80055bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80055c0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80055c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055cc:	ee17 3a90 	vmov	r3, s15
 80055d0:	440b      	add	r3, r1
 80055d2:	4619      	mov	r1, r3
 80055d4:	f7fe bcc3 	b.w	8003f5e <_ZN15Screen1ViewBaseC1Ev+0xa4e>
 80055d8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80055dc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80055e0:	ee17 3a10 	vmov	r3, s14
 80055e4:	1e59      	subs	r1, r3, #1
 80055e6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80055ea:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80055ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055f6:	ee17 3a90 	vmov	r3, s15
 80055fa:	440b      	add	r3, r1
 80055fc:	4619      	mov	r1, r3
 80055fe:	f7fe bcc9 	b.w	8003f94 <_ZN15Screen1ViewBaseC1Ev+0xa84>
 8005602:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005606:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800560a:	ee17 3a10 	vmov	r3, s14
 800560e:	1e59      	subs	r1, r3, #1
 8005610:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005614:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005618:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800561c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005620:	ee17 3a90 	vmov	r3, s15
 8005624:	440b      	add	r3, r1
 8005626:	4619      	mov	r1, r3
 8005628:	f7fe bccf 	b.w	8003fca <_ZN15Screen1ViewBaseC1Ev+0xaba>
 800562c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005630:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005634:	ee17 3a10 	vmov	r3, s14
 8005638:	1e59      	subs	r1, r3, #1
 800563a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800563e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005646:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800564a:	ee17 3a90 	vmov	r3, s15
 800564e:	440b      	add	r3, r1
 8005650:	4619      	mov	r1, r3
 8005652:	f7fe bcd5 	b.w	8004000 <_ZN15Screen1ViewBaseC1Ev+0xaf0>
 8005656:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800565a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800565e:	ee17 3a10 	vmov	r3, s14
 8005662:	1e59      	subs	r1, r3, #1
 8005664:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005668:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800566c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005670:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005674:	ee17 3a90 	vmov	r3, s15
 8005678:	440b      	add	r3, r1
 800567a:	4619      	mov	r1, r3
 800567c:	f7fe bcdb 	b.w	8004036 <_ZN15Screen1ViewBaseC1Ev+0xb26>
 8005680:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005684:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005688:	ee17 3a10 	vmov	r3, s14
 800568c:	1e59      	subs	r1, r3, #1
 800568e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005692:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800569a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800569e:	ee17 3a90 	vmov	r3, s15
 80056a2:	440b      	add	r3, r1
 80056a4:	4619      	mov	r1, r3
 80056a6:	f7fe bce1 	b.w	800406c <_ZN15Screen1ViewBaseC1Ev+0xb5c>
 80056aa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80056ae:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80056b2:	ee17 3a10 	vmov	r3, s14
 80056b6:	1e59      	subs	r1, r3, #1
 80056b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80056bc:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80056c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056c8:	ee17 3a90 	vmov	r3, s15
 80056cc:	440b      	add	r3, r1
 80056ce:	4619      	mov	r1, r3
 80056d0:	f7fe bce7 	b.w	80040a2 <_ZN15Screen1ViewBaseC1Ev+0xb92>
 80056d4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80056d8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80056dc:	ee17 3a10 	vmov	r3, s14
 80056e0:	1e59      	subs	r1, r3, #1
 80056e2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80056e6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80056ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056f2:	ee17 3a90 	vmov	r3, s15
 80056f6:	440b      	add	r3, r1
 80056f8:	4619      	mov	r1, r3
 80056fa:	f7fe bd37 	b.w	800416c <_ZN15Screen1ViewBaseC1Ev+0xc5c>
 80056fe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005702:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005706:	ee17 3a10 	vmov	r3, s14
 800570a:	1e59      	subs	r1, r3, #1
 800570c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005710:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005714:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005718:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800571c:	ee17 3a90 	vmov	r3, s15
 8005720:	440b      	add	r3, r1
 8005722:	4619      	mov	r1, r3
 8005724:	f7fe bd3d 	b.w	80041a2 <_ZN15Screen1ViewBaseC1Ev+0xc92>
 8005728:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800572c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005730:	ee17 3a10 	vmov	r3, s14
 8005734:	1e59      	subs	r1, r3, #1
 8005736:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800573a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800573e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005742:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005746:	ee17 3a90 	vmov	r3, s15
 800574a:	440b      	add	r3, r1
 800574c:	4619      	mov	r1, r3
 800574e:	f7fe bd43 	b.w	80041d8 <_ZN15Screen1ViewBaseC1Ev+0xcc8>
 8005752:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005756:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800575a:	ee17 3a10 	vmov	r3, s14
 800575e:	1e59      	subs	r1, r3, #1
 8005760:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005764:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005768:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800576c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005770:	ee17 3a90 	vmov	r3, s15
 8005774:	440b      	add	r3, r1
 8005776:	4619      	mov	r1, r3
 8005778:	f7fe bd49 	b.w	800420e <_ZN15Screen1ViewBaseC1Ev+0xcfe>
 800577c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005780:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005784:	ee17 3a10 	vmov	r3, s14
 8005788:	1e59      	subs	r1, r3, #1
 800578a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800578e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005796:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800579a:	ee17 3a90 	vmov	r3, s15
 800579e:	440b      	add	r3, r1
 80057a0:	4619      	mov	r1, r3
 80057a2:	f7fe bd4f 	b.w	8004244 <_ZN15Screen1ViewBaseC1Ev+0xd34>
 80057a6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80057aa:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80057ae:	ee17 3a10 	vmov	r3, s14
 80057b2:	1e59      	subs	r1, r3, #1
 80057b4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80057b8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80057bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057c4:	ee17 3a90 	vmov	r3, s15
 80057c8:	440b      	add	r3, r1
 80057ca:	4619      	mov	r1, r3
 80057cc:	f7fe bd55 	b.w	800427a <_ZN15Screen1ViewBaseC1Ev+0xd6a>
 80057d0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80057d4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80057d8:	ee17 3a10 	vmov	r3, s14
 80057dc:	1e59      	subs	r1, r3, #1
 80057de:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80057e2:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80057e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057ee:	ee17 3a90 	vmov	r3, s15
 80057f2:	440b      	add	r3, r1
 80057f4:	4619      	mov	r1, r3
 80057f6:	f7fe bd5b 	b.w	80042b0 <_ZN15Screen1ViewBaseC1Ev+0xda0>
 80057fa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80057fe:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005802:	ee17 3a10 	vmov	r3, s14
 8005806:	1e59      	subs	r1, r3, #1
 8005808:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800580c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005810:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005814:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005818:	ee17 3a90 	vmov	r3, s15
 800581c:	440b      	add	r3, r1
 800581e:	4619      	mov	r1, r3
 8005820:	f7fe bd61 	b.w	80042e6 <_ZN15Screen1ViewBaseC1Ev+0xdd6>
 8005824:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005828:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800582c:	ee17 3a10 	vmov	r3, s14
 8005830:	1e59      	subs	r1, r3, #1
 8005832:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005836:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800583a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800583e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005842:	ee17 3a90 	vmov	r3, s15
 8005846:	440b      	add	r3, r1
 8005848:	4619      	mov	r1, r3
 800584a:	f7fe bd67 	b.w	800431c <_ZN15Screen1ViewBaseC1Ev+0xe0c>
 800584e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005852:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005856:	ee17 3a10 	vmov	r3, s14
 800585a:	1e59      	subs	r1, r3, #1
 800585c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005860:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005864:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005868:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800586c:	ee17 3a90 	vmov	r3, s15
 8005870:	440b      	add	r3, r1
 8005872:	4619      	mov	r1, r3
 8005874:	f7fe bd6d 	b.w	8004352 <_ZN15Screen1ViewBaseC1Ev+0xe42>
 8005878:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800587c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005880:	ee17 3a10 	vmov	r3, s14
 8005884:	1e59      	subs	r1, r3, #1
 8005886:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800588a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800588e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005892:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005896:	ee17 3a90 	vmov	r3, s15
 800589a:	440b      	add	r3, r1
 800589c:	4619      	mov	r1, r3
 800589e:	f7fe bd73 	b.w	8004388 <_ZN15Screen1ViewBaseC1Ev+0xe78>
 80058a2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80058a6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80058aa:	ee17 3a10 	vmov	r3, s14
 80058ae:	1e59      	subs	r1, r3, #1
 80058b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80058b4:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80058b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058c0:	ee17 3a90 	vmov	r3, s15
 80058c4:	440b      	add	r3, r1
 80058c6:	4619      	mov	r1, r3
 80058c8:	f7fe bd79 	b.w	80043be <_ZN15Screen1ViewBaseC1Ev+0xeae>
 80058cc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80058d0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80058d4:	ee17 3a10 	vmov	r3, s14
 80058d8:	1e59      	subs	r1, r3, #1
 80058da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80058de:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80058e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058ea:	ee17 3a90 	vmov	r3, s15
 80058ee:	440b      	add	r3, r1
 80058f0:	4619      	mov	r1, r3
 80058f2:	f7fe bd7f 	b.w	80043f4 <_ZN15Screen1ViewBaseC1Ev+0xee4>
 80058f6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80058fa:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80058fe:	ee17 3a10 	vmov	r3, s14
 8005902:	1e59      	subs	r1, r3, #1
 8005904:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005908:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800590c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005910:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005914:	ee17 3a90 	vmov	r3, s15
 8005918:	440b      	add	r3, r1
 800591a:	4619      	mov	r1, r3
 800591c:	f7fe bd85 	b.w	800442a <_ZN15Screen1ViewBaseC1Ev+0xf1a>
 8005920:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005924:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005928:	ee17 3a10 	vmov	r3, s14
 800592c:	1e59      	subs	r1, r3, #1
 800592e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005932:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800593a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800593e:	ee17 3a90 	vmov	r3, s15
 8005942:	440b      	add	r3, r1
 8005944:	4619      	mov	r1, r3
 8005946:	f7fe bd8b 	b.w	8004460 <_ZN15Screen1ViewBaseC1Ev+0xf50>
 800594a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800594e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005952:	ee17 3a10 	vmov	r3, s14
 8005956:	1e59      	subs	r1, r3, #1
 8005958:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800595c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005960:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005964:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005968:	ee17 3a90 	vmov	r3, s15
 800596c:	440b      	add	r3, r1
 800596e:	4619      	mov	r1, r3
 8005970:	f7fe bd91 	b.w	8004496 <_ZN15Screen1ViewBaseC1Ev+0xf86>
 8005974:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005978:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800597c:	ee17 3a10 	vmov	r3, s14
 8005980:	1e59      	subs	r1, r3, #1
 8005982:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005986:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800598a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800598e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005992:	ee17 3a90 	vmov	r3, s15
 8005996:	440b      	add	r3, r1
 8005998:	4619      	mov	r1, r3
 800599a:	f7fe bd97 	b.w	80044cc <_ZN15Screen1ViewBaseC1Ev+0xfbc>
 800599e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80059a2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80059a6:	ee17 3a10 	vmov	r3, s14
 80059aa:	1e59      	subs	r1, r3, #1
 80059ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80059b0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80059b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059bc:	ee17 3a90 	vmov	r3, s15
 80059c0:	440b      	add	r3, r1
 80059c2:	4619      	mov	r1, r3
 80059c4:	f7fe bd9d 	b.w	8004502 <_ZN15Screen1ViewBaseC1Ev+0xff2>
 80059c8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80059cc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80059d0:	ee17 3a10 	vmov	r3, s14
 80059d4:	1e59      	subs	r1, r3, #1
 80059d6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80059da:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80059de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059e6:	ee17 3a90 	vmov	r3, s15
 80059ea:	440b      	add	r3, r1
 80059ec:	4619      	mov	r1, r3
 80059ee:	f7fe bda3 	b.w	8004538 <_ZN15Screen1ViewBaseC1Ev+0x1028>
 80059f2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80059f6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80059fa:	ee17 3a10 	vmov	r3, s14
 80059fe:	1e59      	subs	r1, r3, #1
 8005a00:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005a04:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005a08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a10:	ee17 3a90 	vmov	r3, s15
 8005a14:	440b      	add	r3, r1
 8005a16:	4619      	mov	r1, r3
 8005a18:	f7fe bda9 	b.w	800456e <_ZN15Screen1ViewBaseC1Ev+0x105e>
 8005a1c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005a20:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005a24:	ee17 3a10 	vmov	r3, s14
 8005a28:	1e59      	subs	r1, r3, #1
 8005a2a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005a2e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a3a:	ee17 3a90 	vmov	r3, s15
 8005a3e:	440b      	add	r3, r1
 8005a40:	4619      	mov	r1, r3
 8005a42:	f7fe bdaf 	b.w	80045a4 <_ZN15Screen1ViewBaseC1Ev+0x1094>
 8005a46:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005a4a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005a4e:	ee17 3a10 	vmov	r3, s14
 8005a52:	1e59      	subs	r1, r3, #1
 8005a54:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005a58:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005a5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a64:	ee17 3a90 	vmov	r3, s15
 8005a68:	440b      	add	r3, r1
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	f7fe bdb5 	b.w	80045da <_ZN15Screen1ViewBaseC1Ev+0x10ca>
 8005a70:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005a74:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005a78:	ee17 3a10 	vmov	r3, s14
 8005a7c:	1e59      	subs	r1, r3, #1
 8005a7e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005a82:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a8e:	ee17 3a90 	vmov	r3, s15
 8005a92:	440b      	add	r3, r1
 8005a94:	4619      	mov	r1, r3
 8005a96:	f7fe bdbb 	b.w	8004610 <_ZN15Screen1ViewBaseC1Ev+0x1100>
 8005a9a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005a9e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005aa2:	ee17 3a10 	vmov	r3, s14
 8005aa6:	1e59      	subs	r1, r3, #1
 8005aa8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005aac:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005ab0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ab4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ab8:	ee17 3a90 	vmov	r3, s15
 8005abc:	440b      	add	r3, r1
 8005abe:	4619      	mov	r1, r3
 8005ac0:	f7fe bdc1 	b.w	8004646 <_ZN15Screen1ViewBaseC1Ev+0x1136>
 8005ac4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005ac8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005acc:	ee17 3a10 	vmov	r3, s14
 8005ad0:	1e59      	subs	r1, r3, #1
 8005ad2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005ad6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ade:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ae2:	ee17 3a90 	vmov	r3, s15
 8005ae6:	440b      	add	r3, r1
 8005ae8:	4619      	mov	r1, r3
 8005aea:	f7fe bdc7 	b.w	800467c <_ZN15Screen1ViewBaseC1Ev+0x116c>
 8005aee:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005af2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005af6:	ee17 3a10 	vmov	r3, s14
 8005afa:	1e59      	subs	r1, r3, #1
 8005afc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005b00:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005b04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b0c:	ee17 3a90 	vmov	r3, s15
 8005b10:	440b      	add	r3, r1
 8005b12:	4619      	mov	r1, r3
 8005b14:	f7fe bdcd 	b.w	80046b2 <_ZN15Screen1ViewBaseC1Ev+0x11a2>
 8005b18:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005b1c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005b20:	ee17 3a10 	vmov	r3, s14
 8005b24:	1e59      	subs	r1, r3, #1
 8005b26:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005b2a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b36:	ee17 3a90 	vmov	r3, s15
 8005b3a:	440b      	add	r3, r1
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	f7fe bdd3 	b.w	80046e8 <_ZN15Screen1ViewBaseC1Ev+0x11d8>
 8005b42:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005b46:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005b4a:	ee17 3a10 	vmov	r3, s14
 8005b4e:	1e59      	subs	r1, r3, #1
 8005b50:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005b54:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005b58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b60:	ee17 3a90 	vmov	r3, s15
 8005b64:	440b      	add	r3, r1
 8005b66:	4619      	mov	r1, r3
 8005b68:	f7fe bdd9 	b.w	800471e <_ZN15Screen1ViewBaseC1Ev+0x120e>
 8005b6c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005b70:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005b74:	ee17 3a10 	vmov	r3, s14
 8005b78:	1e59      	subs	r1, r3, #1
 8005b7a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005b7e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b8a:	ee17 3a90 	vmov	r3, s15
 8005b8e:	440b      	add	r3, r1
 8005b90:	4619      	mov	r1, r3
 8005b92:	f7fe bddf 	b.w	8004754 <_ZN15Screen1ViewBaseC1Ev+0x1244>
 8005b96:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005b9a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005b9e:	ee17 3a10 	vmov	r3, s14
 8005ba2:	1e59      	subs	r1, r3, #1
 8005ba4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005ba8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005bac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005bb4:	ee17 3a90 	vmov	r3, s15
 8005bb8:	440b      	add	r3, r1
 8005bba:	4619      	mov	r1, r3
 8005bbc:	f7fe bde5 	b.w	800478a <_ZN15Screen1ViewBaseC1Ev+0x127a>
 8005bc0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005bc4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005bc8:	ee17 3a10 	vmov	r3, s14
 8005bcc:	1e59      	subs	r1, r3, #1
 8005bce:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005bd2:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005bde:	ee17 3a90 	vmov	r3, s15
 8005be2:	440b      	add	r3, r1
 8005be4:	4619      	mov	r1, r3
 8005be6:	f7fe bdeb 	b.w	80047c0 <_ZN15Screen1ViewBaseC1Ev+0x12b0>
 8005bea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005bee:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005bf2:	ee17 3a10 	vmov	r3, s14
 8005bf6:	1e59      	subs	r1, r3, #1
 8005bf8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005bfc:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005c00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c08:	ee17 3a90 	vmov	r3, s15
 8005c0c:	440b      	add	r3, r1
 8005c0e:	4619      	mov	r1, r3
 8005c10:	f7fe bdf1 	b.w	80047f6 <_ZN15Screen1ViewBaseC1Ev+0x12e6>
 8005c14:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005c18:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005c1c:	ee17 3a10 	vmov	r3, s14
 8005c20:	1e59      	subs	r1, r3, #1
 8005c22:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005c26:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c32:	ee17 3a90 	vmov	r3, s15
 8005c36:	440b      	add	r3, r1
 8005c38:	4619      	mov	r1, r3
 8005c3a:	f7fe bdf7 	b.w	800482c <_ZN15Screen1ViewBaseC1Ev+0x131c>
 8005c3e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005c42:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005c46:	ee17 3a10 	vmov	r3, s14
 8005c4a:	1e59      	subs	r1, r3, #1
 8005c4c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005c50:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005c54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c5c:	ee17 3a90 	vmov	r3, s15
 8005c60:	440b      	add	r3, r1
 8005c62:	4619      	mov	r1, r3
 8005c64:	f7fe bdfd 	b.w	8004862 <_ZN15Screen1ViewBaseC1Ev+0x1352>
 8005c68:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005c6c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005c70:	ee17 3a10 	vmov	r3, s14
 8005c74:	1e59      	subs	r1, r3, #1
 8005c76:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005c7a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c86:	ee17 3a90 	vmov	r3, s15
 8005c8a:	440b      	add	r3, r1
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	f7fe be03 	b.w	8004898 <_ZN15Screen1ViewBaseC1Ev+0x1388>
 8005c92:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005c96:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005c9a:	ee17 3a10 	vmov	r3, s14
 8005c9e:	1e59      	subs	r1, r3, #1
 8005ca0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005ca4:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005ca8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cb0:	ee17 3a90 	vmov	r3, s15
 8005cb4:	440b      	add	r3, r1
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	f7fe be09 	b.w	80048ce <_ZN15Screen1ViewBaseC1Ev+0x13be>
 8005cbc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005cc0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005cc4:	ee17 3a10 	vmov	r3, s14
 8005cc8:	1e59      	subs	r1, r3, #1
 8005cca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005cce:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cda:	ee17 3a90 	vmov	r3, s15
 8005cde:	440b      	add	r3, r1
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	f7fe be0f 	b.w	8004904 <_ZN15Screen1ViewBaseC1Ev+0x13f4>
 8005ce6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005cea:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005cee:	ee17 3a10 	vmov	r3, s14
 8005cf2:	1e59      	subs	r1, r3, #1
 8005cf4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005cf8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005cfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d04:	ee17 3a90 	vmov	r3, s15
 8005d08:	440b      	add	r3, r1
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	f7fe be60 	b.w	80049d0 <_ZN15Screen1ViewBaseC1Ev+0x14c0>
 8005d10:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005d14:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005d18:	ee17 3a10 	vmov	r3, s14
 8005d1c:	1e59      	subs	r1, r3, #1
 8005d1e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005d22:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d2e:	ee17 3a90 	vmov	r3, s15
 8005d32:	440b      	add	r3, r1
 8005d34:	4619      	mov	r1, r3
 8005d36:	f7fe be66 	b.w	8004a06 <_ZN15Screen1ViewBaseC1Ev+0x14f6>
 8005d3a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005d3e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005d42:	ee17 3a10 	vmov	r3, s14
 8005d46:	1e59      	subs	r1, r3, #1
 8005d48:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005d4c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005d50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d58:	ee17 3a90 	vmov	r3, s15
 8005d5c:	440b      	add	r3, r1
 8005d5e:	4619      	mov	r1, r3
 8005d60:	f7fe be6c 	b.w	8004a3c <_ZN15Screen1ViewBaseC1Ev+0x152c>
 8005d64:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005d68:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005d6c:	ee17 3a10 	vmov	r3, s14
 8005d70:	1e59      	subs	r1, r3, #1
 8005d72:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005d76:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d82:	ee17 3a90 	vmov	r3, s15
 8005d86:	440b      	add	r3, r1
 8005d88:	4619      	mov	r1, r3
 8005d8a:	f7fe be72 	b.w	8004a72 <_ZN15Screen1ViewBaseC1Ev+0x1562>
 8005d8e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005d92:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005d96:	ee17 3a10 	vmov	r3, s14
 8005d9a:	1e59      	subs	r1, r3, #1
 8005d9c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005da0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005da4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005da8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005dac:	ee17 3a90 	vmov	r3, s15
 8005db0:	440b      	add	r3, r1
 8005db2:	4619      	mov	r1, r3
 8005db4:	f7fe be78 	b.w	8004aa8 <_ZN15Screen1ViewBaseC1Ev+0x1598>
 8005db8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005dbc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005dc0:	ee17 3a10 	vmov	r3, s14
 8005dc4:	1e59      	subs	r1, r3, #1
 8005dc6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005dca:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005dd6:	ee17 3a90 	vmov	r3, s15
 8005dda:	440b      	add	r3, r1
 8005ddc:	4619      	mov	r1, r3
 8005dde:	f7fe be7e 	b.w	8004ade <_ZN15Screen1ViewBaseC1Ev+0x15ce>
 8005de2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005de6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005dea:	ee17 3a10 	vmov	r3, s14
 8005dee:	1e59      	subs	r1, r3, #1
 8005df0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005df4:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005df8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e00:	ee17 3a90 	vmov	r3, s15
 8005e04:	440b      	add	r3, r1
 8005e06:	4619      	mov	r1, r3
 8005e08:	f7fe be84 	b.w	8004b14 <_ZN15Screen1ViewBaseC1Ev+0x1604>
 8005e0c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005e10:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005e14:	ee17 3a10 	vmov	r3, s14
 8005e18:	1e59      	subs	r1, r3, #1
 8005e1a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005e1e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e2a:	ee17 3a90 	vmov	r3, s15
 8005e2e:	440b      	add	r3, r1
 8005e30:	4619      	mov	r1, r3
 8005e32:	f7fe be8a 	b.w	8004b4a <_ZN15Screen1ViewBaseC1Ev+0x163a>
 8005e36:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005e3a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005e3e:	ee17 3a10 	vmov	r3, s14
 8005e42:	1e59      	subs	r1, r3, #1
 8005e44:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005e48:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005e4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e54:	ee17 3a90 	vmov	r3, s15
 8005e58:	440b      	add	r3, r1
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	f7fe be90 	b.w	8004b80 <_ZN15Screen1ViewBaseC1Ev+0x1670>
 8005e60:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005e64:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005e68:	ee17 3a10 	vmov	r3, s14
 8005e6c:	1e59      	subs	r1, r3, #1
 8005e6e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005e72:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e7e:	ee17 3a90 	vmov	r3, s15
 8005e82:	440b      	add	r3, r1
 8005e84:	4619      	mov	r1, r3
 8005e86:	f7fe be96 	b.w	8004bb6 <_ZN15Screen1ViewBaseC1Ev+0x16a6>
 8005e8a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005e8e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005e92:	ee17 3a10 	vmov	r3, s14
 8005e96:	1e59      	subs	r1, r3, #1
 8005e98:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005e9c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005ea0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ea4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ea8:	ee17 3a90 	vmov	r3, s15
 8005eac:	440b      	add	r3, r1
 8005eae:	4619      	mov	r1, r3
 8005eb0:	f7fe be9c 	b.w	8004bec <_ZN15Screen1ViewBaseC1Ev+0x16dc>
 8005eb4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005eb8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005ebc:	ee17 3a10 	vmov	r3, s14
 8005ec0:	1e59      	subs	r1, r3, #1
 8005ec2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005ec6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ece:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ed2:	ee17 3a90 	vmov	r3, s15
 8005ed6:	440b      	add	r3, r1
 8005ed8:	4619      	mov	r1, r3
 8005eda:	f7fe bea2 	b.w	8004c22 <_ZN15Screen1ViewBaseC1Ev+0x1712>
 8005ede:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005ee2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005ee6:	ee17 3a10 	vmov	r3, s14
 8005eea:	1e59      	subs	r1, r3, #1
 8005eec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005ef0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005ef4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ef8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005efc:	ee17 3a90 	vmov	r3, s15
 8005f00:	440b      	add	r3, r1
 8005f02:	4619      	mov	r1, r3
 8005f04:	f7fe bea8 	b.w	8004c58 <_ZN15Screen1ViewBaseC1Ev+0x1748>
 8005f08:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005f0c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005f10:	ee17 3a10 	vmov	r3, s14
 8005f14:	1e59      	subs	r1, r3, #1
 8005f16:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005f1a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f26:	ee17 3a90 	vmov	r3, s15
 8005f2a:	440b      	add	r3, r1
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	f7fe beae 	b.w	8004c8e <_ZN15Screen1ViewBaseC1Ev+0x177e>
 8005f32:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005f36:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005f3a:	ee17 3a10 	vmov	r3, s14
 8005f3e:	1e59      	subs	r1, r3, #1
 8005f40:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005f44:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005f48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f50:	ee17 3a90 	vmov	r3, s15
 8005f54:	440b      	add	r3, r1
 8005f56:	4619      	mov	r1, r3
 8005f58:	f7fe beb4 	b.w	8004cc4 <_ZN15Screen1ViewBaseC1Ev+0x17b4>
 8005f5c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005f60:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005f64:	ee17 3a10 	vmov	r3, s14
 8005f68:	1e59      	subs	r1, r3, #1
 8005f6a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005f6e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f7a:	ee17 3a90 	vmov	r3, s15
 8005f7e:	440b      	add	r3, r1
 8005f80:	4619      	mov	r1, r3
 8005f82:	f7fe beba 	b.w	8004cfa <_ZN15Screen1ViewBaseC1Ev+0x17ea>
 8005f86:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005f8a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005f8e:	ee17 3a10 	vmov	r3, s14
 8005f92:	1e59      	subs	r1, r3, #1
 8005f94:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005f98:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005f9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005fa4:	ee17 3a90 	vmov	r3, s15
 8005fa8:	440b      	add	r3, r1
 8005faa:	4619      	mov	r1, r3
 8005fac:	f7fe bec0 	b.w	8004d30 <_ZN15Screen1ViewBaseC1Ev+0x1820>
 8005fb0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005fb4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005fb8:	ee17 3a10 	vmov	r3, s14
 8005fbc:	1e59      	subs	r1, r3, #1
 8005fbe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005fc2:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005fce:	ee17 3a90 	vmov	r3, s15
 8005fd2:	440b      	add	r3, r1
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	f7fe bec6 	b.w	8004d66 <_ZN15Screen1ViewBaseC1Ev+0x1856>
 8005fda:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005fde:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005fe2:	ee17 3a10 	vmov	r3, s14
 8005fe6:	1e59      	subs	r1, r3, #1
 8005fe8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005fec:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005ff0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ff4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ff8:	ee17 3a90 	vmov	r3, s15
 8005ffc:	440b      	add	r3, r1
 8005ffe:	4619      	mov	r1, r3
 8006000:	f7fe becc 	b.w	8004d9c <_ZN15Screen1ViewBaseC1Ev+0x188c>
 8006004:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006008:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800600c:	ee17 3a10 	vmov	r3, s14
 8006010:	1e59      	subs	r1, r3, #1
 8006012:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006016:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800601a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800601e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006022:	ee17 3a90 	vmov	r3, s15
 8006026:	440b      	add	r3, r1
 8006028:	4619      	mov	r1, r3
 800602a:	f7fe bed2 	b.w	8004dd2 <_ZN15Screen1ViewBaseC1Ev+0x18c2>
 800602e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006032:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006036:	ee17 3a10 	vmov	r3, s14
 800603a:	1e59      	subs	r1, r3, #1
 800603c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006040:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006044:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006048:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800604c:	ee17 3a90 	vmov	r3, s15
 8006050:	440b      	add	r3, r1
 8006052:	4619      	mov	r1, r3
 8006054:	f7fe bed8 	b.w	8004e08 <_ZN15Screen1ViewBaseC1Ev+0x18f8>
 8006058:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800605c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006060:	ee17 3a10 	vmov	r3, s14
 8006064:	1e59      	subs	r1, r3, #1
 8006066:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800606a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800606e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006072:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006076:	ee17 3a90 	vmov	r3, s15
 800607a:	440b      	add	r3, r1
 800607c:	4619      	mov	r1, r3
 800607e:	f7fe bede 	b.w	8004e3e <_ZN15Screen1ViewBaseC1Ev+0x192e>
 8006082:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006086:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800608a:	ee17 3a10 	vmov	r3, s14
 800608e:	1e59      	subs	r1, r3, #1
 8006090:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006094:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006098:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800609c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060a0:	ee17 3a90 	vmov	r3, s15
 80060a4:	440b      	add	r3, r1
 80060a6:	4619      	mov	r1, r3
 80060a8:	f7fe bee4 	b.w	8004e74 <_ZN15Screen1ViewBaseC1Ev+0x1964>
 80060ac:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80060b0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80060b4:	ee17 3a10 	vmov	r3, s14
 80060b8:	1e59      	subs	r1, r3, #1
 80060ba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80060be:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80060c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060ca:	ee17 3a90 	vmov	r3, s15
 80060ce:	440b      	add	r3, r1
 80060d0:	4619      	mov	r1, r3
 80060d2:	f7fe beea 	b.w	8004eaa <_ZN15Screen1ViewBaseC1Ev+0x199a>
 80060d6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80060da:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80060de:	ee17 3a10 	vmov	r3, s14
 80060e2:	1e59      	subs	r1, r3, #1
 80060e4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80060e8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80060ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060f4:	ee17 3a90 	vmov	r3, s15
 80060f8:	440b      	add	r3, r1
 80060fa:	4619      	mov	r1, r3
 80060fc:	f7fe bef0 	b.w	8004ee0 <_ZN15Screen1ViewBaseC1Ev+0x19d0>
 8006100:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006104:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006108:	ee17 3a10 	vmov	r3, s14
 800610c:	1e59      	subs	r1, r3, #1
 800610e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006112:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800611a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800611e:	ee17 3a90 	vmov	r3, s15
 8006122:	440b      	add	r3, r1
 8006124:	4619      	mov	r1, r3
 8006126:	f7fe bef6 	b.w	8004f16 <_ZN15Screen1ViewBaseC1Ev+0x1a06>
 800612a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800612e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006132:	ee17 3a10 	vmov	r3, s14
 8006136:	1e59      	subs	r1, r3, #1
 8006138:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800613c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006140:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006144:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006148:	ee17 3a90 	vmov	r3, s15
 800614c:	440b      	add	r3, r1
 800614e:	4619      	mov	r1, r3
 8006150:	f7fe befc 	b.w	8004f4c <_ZN15Screen1ViewBaseC1Ev+0x1a3c>
 8006154:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006158:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800615c:	ee17 3a10 	vmov	r3, s14
 8006160:	1e59      	subs	r1, r3, #1
 8006162:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006166:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800616a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800616e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006172:	ee17 3a90 	vmov	r3, s15
 8006176:	440b      	add	r3, r1
 8006178:	4619      	mov	r1, r3
 800617a:	f7fe bf02 	b.w	8004f82 <_ZN15Screen1ViewBaseC1Ev+0x1a72>
 800617e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006182:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006186:	ee17 3a10 	vmov	r3, s14
 800618a:	1e59      	subs	r1, r3, #1
 800618c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006190:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006194:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006198:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800619c:	ee17 3a90 	vmov	r3, s15
 80061a0:	440b      	add	r3, r1
 80061a2:	4619      	mov	r1, r3
 80061a4:	f7fe bf08 	b.w	8004fb8 <_ZN15Screen1ViewBaseC1Ev+0x1aa8>
 80061a8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80061ac:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80061b0:	ee17 3a10 	vmov	r3, s14
 80061b4:	1e59      	subs	r1, r3, #1
 80061b6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80061ba:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80061be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061c6:	ee17 3a90 	vmov	r3, s15
 80061ca:	440b      	add	r3, r1
 80061cc:	4619      	mov	r1, r3
 80061ce:	f7fe bf0e 	b.w	8004fee <_ZN15Screen1ViewBaseC1Ev+0x1ade>
 80061d2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80061d6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80061da:	ee17 3a10 	vmov	r3, s14
 80061de:	1e59      	subs	r1, r3, #1
 80061e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80061e4:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80061e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061f0:	ee17 3a90 	vmov	r3, s15
 80061f4:	440b      	add	r3, r1
 80061f6:	4619      	mov	r1, r3
 80061f8:	f7fe bf14 	b.w	8005024 <_ZN15Screen1ViewBaseC1Ev+0x1b14>
 80061fc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006200:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006204:	ee17 3a10 	vmov	r3, s14
 8006208:	1e59      	subs	r1, r3, #1
 800620a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800620e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006216:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800621a:	ee17 3a90 	vmov	r3, s15
 800621e:	440b      	add	r3, r1
 8006220:	4619      	mov	r1, r3
 8006222:	f7fe bf1a 	b.w	800505a <_ZN15Screen1ViewBaseC1Ev+0x1b4a>
 8006226:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800622a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800622e:	ee17 3a10 	vmov	r3, s14
 8006232:	1e59      	subs	r1, r3, #1
 8006234:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006238:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800623c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006240:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006244:	ee17 3a90 	vmov	r3, s15
 8006248:	440b      	add	r3, r1
 800624a:	4619      	mov	r1, r3
 800624c:	f7fe bf20 	b.w	8005090 <_ZN15Screen1ViewBaseC1Ev+0x1b80>
 8006250:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006254:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006258:	ee17 3a10 	vmov	r3, s14
 800625c:	1e59      	subs	r1, r3, #1
 800625e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006262:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800626a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800626e:	ee17 3a90 	vmov	r3, s15
 8006272:	440b      	add	r3, r1
 8006274:	4619      	mov	r1, r3
 8006276:	f7fe bf26 	b.w	80050c6 <_ZN15Screen1ViewBaseC1Ev+0x1bb6>
 800627a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800627e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006282:	ee17 3a10 	vmov	r3, s14
 8006286:	1e59      	subs	r1, r3, #1
 8006288:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800628c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006290:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006294:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006298:	ee17 3a90 	vmov	r3, s15
 800629c:	440b      	add	r3, r1
 800629e:	4619      	mov	r1, r3
 80062a0:	f7fe bf2c 	b.w	80050fc <_ZN15Screen1ViewBaseC1Ev+0x1bec>
 80062a4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80062a8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80062ac:	ee17 3a10 	vmov	r3, s14
 80062b0:	1e59      	subs	r1, r3, #1
 80062b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80062b6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80062ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062c2:	ee17 3a90 	vmov	r3, s15
 80062c6:	440b      	add	r3, r1
 80062c8:	4619      	mov	r1, r3
 80062ca:	f7fe bf32 	b.w	8005132 <_ZN15Screen1ViewBaseC1Ev+0x1c22>
 80062ce:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80062d2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80062d6:	ee17 3a10 	vmov	r3, s14
 80062da:	1e59      	subs	r1, r3, #1
 80062dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80062e0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80062e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062ec:	ee17 3a90 	vmov	r3, s15
 80062f0:	440b      	add	r3, r1
 80062f2:	4619      	mov	r1, r3
 80062f4:	f7fe bf38 	b.w	8005168 <_ZN15Screen1ViewBaseC1Ev+0x1c58>
 80062f8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80062fc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006300:	ee17 3a10 	vmov	r3, s14
 8006304:	1e59      	subs	r1, r3, #1
 8006306:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800630a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800630e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006312:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006316:	ee17 3a90 	vmov	r3, s15
 800631a:	440b      	add	r3, r1
 800631c:	4619      	mov	r1, r3
 800631e:	f7fe bf79 	b.w	8005214 <_ZN15Screen1ViewBaseC1Ev+0x1d04>
 8006322:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006326:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800632a:	ee17 3a10 	vmov	r3, s14
 800632e:	1e59      	subs	r1, r3, #1
 8006330:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006334:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006338:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800633c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006340:	ee17 3a90 	vmov	r3, s15
 8006344:	440b      	add	r3, r1
 8006346:	4619      	mov	r1, r3
 8006348:	f7fe bf7f 	b.w	800524a <_ZN15Screen1ViewBaseC1Ev+0x1d3a>
 800634c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006350:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006354:	ee17 3a10 	vmov	r3, s14
 8006358:	1e59      	subs	r1, r3, #1
 800635a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800635e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006366:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800636a:	ee17 3a90 	vmov	r3, s15
 800636e:	440b      	add	r3, r1
 8006370:	4619      	mov	r1, r3
 8006372:	f7fe bf85 	b.w	8005280 <_ZN15Screen1ViewBaseC1Ev+0x1d70>
 8006376:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800637a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800637e:	ee17 3a10 	vmov	r3, s14
 8006382:	1e59      	subs	r1, r3, #1
 8006384:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006388:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800638c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006390:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006394:	ee17 3a90 	vmov	r3, s15
 8006398:	440b      	add	r3, r1
 800639a:	4619      	mov	r1, r3
 800639c:	f7fe bf8b 	b.w	80052b6 <_ZN15Screen1ViewBaseC1Ev+0x1da6>
 80063a0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80063a4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80063a8:	ee17 3a10 	vmov	r3, s14
 80063ac:	1e59      	subs	r1, r3, #1
 80063ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80063b2:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80063b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063be:	ee17 3a90 	vmov	r3, s15
 80063c2:	440b      	add	r3, r1
 80063c4:	4619      	mov	r1, r3
 80063c6:	f7fe bf91 	b.w	80052ec <_ZN15Screen1ViewBaseC1Ev+0x1ddc>
 80063ca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80063ce:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80063d2:	ee17 3a10 	vmov	r3, s14
 80063d6:	1e59      	subs	r1, r3, #1
 80063d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80063dc:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80063e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063e8:	ee17 3a90 	vmov	r3, s15
 80063ec:	440b      	add	r3, r1
 80063ee:	4619      	mov	r1, r3
 80063f0:	f7fe bf97 	b.w	8005322 <_ZN15Screen1ViewBaseC1Ev+0x1e12>
 80063f4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80063f8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80063fc:	ee17 3a10 	vmov	r3, s14
 8006400:	1e59      	subs	r1, r3, #1
 8006402:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006406:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800640a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800640e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006412:	ee17 3a90 	vmov	r3, s15
 8006416:	440b      	add	r3, r1
 8006418:	4619      	mov	r1, r3
 800641a:	f7fe bf9d 	b.w	8005358 <_ZN15Screen1ViewBaseC1Ev+0x1e48>
 800641e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006422:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006426:	ee17 3a10 	vmov	r3, s14
 800642a:	1e59      	subs	r1, r3, #1
 800642c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006430:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006434:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006438:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800643c:	ee17 3a90 	vmov	r3, s15
 8006440:	440b      	add	r3, r1
 8006442:	4619      	mov	r1, r3
 8006444:	f7fe bfa3 	b.w	800538e <_ZN15Screen1ViewBaseC1Ev+0x1e7e>
 8006448:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800644c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006450:	ee17 3a10 	vmov	r3, s14
 8006454:	1e59      	subs	r1, r3, #1
 8006456:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800645a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800645e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006462:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006466:	ee17 3a90 	vmov	r3, s15
 800646a:	440b      	add	r3, r1
 800646c:	4619      	mov	r1, r3
 800646e:	f7fe bfa9 	b.w	80053c4 <_ZN15Screen1ViewBaseC1Ev+0x1eb4>
 8006472:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006476:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800647a:	ee17 3a10 	vmov	r3, s14
 800647e:	1e59      	subs	r1, r3, #1
 8006480:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006484:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006488:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800648c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006490:	ee17 3a90 	vmov	r3, s15
 8006494:	440b      	add	r3, r1
 8006496:	4619      	mov	r1, r3
 8006498:	f7fe bfaf 	b.w	80053fa <_ZN15Screen1ViewBaseC1Ev+0x1eea>
 800649c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80064a0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80064a4:	ee17 3a10 	vmov	r3, s14
 80064a8:	1e59      	subs	r1, r3, #1
 80064aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80064ae:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80064b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064ba:	ee17 3a90 	vmov	r3, s15
 80064be:	440b      	add	r3, r1
 80064c0:	4619      	mov	r1, r3
 80064c2:	f7fe bfb5 	b.w	8005430 <_ZN15Screen1ViewBaseC1Ev+0x1f20>
 80064c6:	bf00      	nop

080064c8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80064c8:	4770      	bx	lr
	...

080064cc <_Z23getFont_verdana_10_4bppv>:
{
 80064cc:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80064ce:	4d16      	ldr	r5, [pc, #88]	; (8006528 <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 80064d0:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80064d2:	782c      	ldrb	r4, [r5, #0]
 80064d4:	f3bf 8f5b 	dmb	ish
 80064d8:	f014 0401 	ands.w	r4, r4, #1
 80064dc:	d120      	bne.n	8006520 <_Z23getFont_verdana_10_4bppv+0x54>
 80064de:	4628      	mov	r0, r5
 80064e0:	f01c fbd3 	bl	8022c8a <__cxa_guard_acquire>
 80064e4:	b1e0      	cbz	r0, 8006520 <_Z23getFont_verdana_10_4bppv+0x54>
 80064e6:	233f      	movs	r3, #63	; 0x3f
 80064e8:	2201      	movs	r2, #1
 80064ea:	4910      	ldr	r1, [pc, #64]	; (800652c <_Z23getFont_verdana_10_4bppv+0x60>)
 80064ec:	9309      	str	r3, [sp, #36]	; 0x24
 80064ee:	4b10      	ldr	r3, [pc, #64]	; (8006530 <_Z23getFont_verdana_10_4bppv+0x64>)
 80064f0:	4810      	ldr	r0, [pc, #64]	; (8006534 <_Z23getFont_verdana_10_4bppv+0x68>)
 80064f2:	9308      	str	r3, [sp, #32]
 80064f4:	4b10      	ldr	r3, [pc, #64]	; (8006538 <_Z23getFont_verdana_10_4bppv+0x6c>)
 80064f6:	940a      	str	r4, [sp, #40]	; 0x28
 80064f8:	9405      	str	r4, [sp, #20]
 80064fa:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80064fe:	2304      	movs	r3, #4
 8006500:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8006504:	230a      	movs	r3, #10
 8006506:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8006510:	f7fc fab4 	bl	8002a7c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8006514:	4809      	ldr	r0, [pc, #36]	; (800653c <_Z23getFont_verdana_10_4bppv+0x70>)
 8006516:	f01c fce1 	bl	8022edc <atexit>
 800651a:	4628      	mov	r0, r5
 800651c:	f01c fbc1 	bl	8022ca2 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8006520:	4804      	ldr	r0, [pc, #16]	; (8006534 <_Z23getFont_verdana_10_4bppv+0x68>)
 8006522:	b00f      	add	sp, #60	; 0x3c
 8006524:	bd30      	pop	{r4, r5, pc}
 8006526:	bf00      	nop
 8006528:	240050b8 	.word	0x240050b8
 800652c:	08026c7c 	.word	0x08026c7c
 8006530:	08026ea0 	.word	0x08026ea0
 8006534:	240050bc 	.word	0x240050bc
 8006538:	08026efc 	.word	0x08026efc
 800653c:	080064c9 	.word	0x080064c9

08006540 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_16_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_16_4bpp();

touchgfx::GeneratedFont& getFont_verdana_16_4bpp()
{
    static touchgfx::GeneratedFont verdana_16_4bpp(glyphs_verdana_16_4bpp, 36, 19, 16, 0, 0, 4, 1, 0, 1, unicodes_verdana_16_4bpp, kerning_verdana_16_4bpp, 63, 0, 0, 0);
 8006540:	4770      	bx	lr
	...

08006544 <_Z23getFont_verdana_16_4bppv>:
{
 8006544:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_16_4bpp(glyphs_verdana_16_4bpp, 36, 19, 16, 0, 0, 4, 1, 0, 1, unicodes_verdana_16_4bpp, kerning_verdana_16_4bpp, 63, 0, 0, 0);
 8006546:	4d17      	ldr	r5, [pc, #92]	; (80065a4 <_Z23getFont_verdana_16_4bppv+0x60>)
{
 8006548:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_16_4bpp(glyphs_verdana_16_4bpp, 36, 19, 16, 0, 0, 4, 1, 0, 1, unicodes_verdana_16_4bpp, kerning_verdana_16_4bpp, 63, 0, 0, 0);
 800654a:	782c      	ldrb	r4, [r5, #0]
 800654c:	f3bf 8f5b 	dmb	ish
 8006550:	f014 0401 	ands.w	r4, r4, #1
 8006554:	d122      	bne.n	800659c <_Z23getFont_verdana_16_4bppv+0x58>
 8006556:	4628      	mov	r0, r5
 8006558:	f01c fb97 	bl	8022c8a <__cxa_guard_acquire>
 800655c:	b1f0      	cbz	r0, 800659c <_Z23getFont_verdana_16_4bppv+0x58>
 800655e:	233f      	movs	r3, #63	; 0x3f
 8006560:	2224      	movs	r2, #36	; 0x24
 8006562:	4911      	ldr	r1, [pc, #68]	; (80065a8 <_Z23getFont_verdana_16_4bppv+0x64>)
 8006564:	9309      	str	r3, [sp, #36]	; 0x24
 8006566:	4b11      	ldr	r3, [pc, #68]	; (80065ac <_Z23getFont_verdana_16_4bppv+0x68>)
 8006568:	4811      	ldr	r0, [pc, #68]	; (80065b0 <_Z23getFont_verdana_16_4bppv+0x6c>)
 800656a:	9308      	str	r3, [sp, #32]
 800656c:	4b11      	ldr	r3, [pc, #68]	; (80065b4 <_Z23getFont_verdana_16_4bppv+0x70>)
 800656e:	940a      	str	r4, [sp, #40]	; 0x28
 8006570:	9307      	str	r3, [sp, #28]
 8006572:	2301      	movs	r3, #1
 8006574:	9401      	str	r4, [sp, #4]
 8006576:	9304      	str	r3, [sp, #16]
 8006578:	e9cd 4305 	strd	r4, r3, [sp, #20]
 800657c:	2304      	movs	r3, #4
 800657e:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8006582:	2310      	movs	r3, #16
 8006584:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	2313      	movs	r3, #19
 800658c:	f7fc fa76 	bl	8002a7c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8006590:	4809      	ldr	r0, [pc, #36]	; (80065b8 <_Z23getFont_verdana_16_4bppv+0x74>)
 8006592:	f01c fca3 	bl	8022edc <atexit>
 8006596:	4628      	mov	r0, r5
 8006598:	f01c fb83 	bl	8022ca2 <__cxa_guard_release>
    return verdana_16_4bpp;
}
 800659c:	4804      	ldr	r0, [pc, #16]	; (80065b0 <_Z23getFont_verdana_16_4bppv+0x6c>)
 800659e:	b00f      	add	sp, #60	; 0x3c
 80065a0:	bd30      	pop	{r4, r5, pc}
 80065a2:	bf00      	nop
 80065a4:	240050e8 	.word	0x240050e8
 80065a8:	08026c8c 	.word	0x08026c8c
 80065ac:	08026ea4 	.word	0x08026ea4
 80065b0:	240050ec 	.word	0x240050ec
 80065b4:	08026f00 	.word	0x08026f00
 80065b8:	08006541 	.word	0x08006541

080065bc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 2, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80065bc:	4770      	bx	lr
	...

080065c0 <_Z23getFont_verdana_40_4bppv>:
{
 80065c0:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 2, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80065c2:	4d16      	ldr	r5, [pc, #88]	; (800661c <_Z23getFont_verdana_40_4bppv+0x5c>)
{
 80065c4:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 2, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80065c6:	782c      	ldrb	r4, [r5, #0]
 80065c8:	f3bf 8f5b 	dmb	ish
 80065cc:	f014 0401 	ands.w	r4, r4, #1
 80065d0:	d121      	bne.n	8006616 <_Z23getFont_verdana_40_4bppv+0x56>
 80065d2:	4628      	mov	r0, r5
 80065d4:	f01c fb59 	bl	8022c8a <__cxa_guard_acquire>
 80065d8:	b1e8      	cbz	r0, 8006616 <_Z23getFont_verdana_40_4bppv+0x56>
 80065da:	233f      	movs	r3, #63	; 0x3f
 80065dc:	2201      	movs	r2, #1
 80065de:	4910      	ldr	r1, [pc, #64]	; (8006620 <_Z23getFont_verdana_40_4bppv+0x60>)
 80065e0:	9309      	str	r3, [sp, #36]	; 0x24
 80065e2:	4b10      	ldr	r3, [pc, #64]	; (8006624 <_Z23getFont_verdana_40_4bppv+0x64>)
 80065e4:	4810      	ldr	r0, [pc, #64]	; (8006628 <_Z23getFont_verdana_40_4bppv+0x68>)
 80065e6:	9308      	str	r3, [sp, #32]
 80065e8:	4b10      	ldr	r3, [pc, #64]	; (800662c <_Z23getFont_verdana_40_4bppv+0x6c>)
 80065ea:	940a      	str	r4, [sp, #40]	; 0x28
 80065ec:	9405      	str	r4, [sp, #20]
 80065ee:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80065f2:	2304      	movs	r3, #4
 80065f4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80065f8:	2328      	movs	r3, #40	; 0x28
 80065fa:	2202      	movs	r2, #2
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8006602:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8006606:	f7fc fa39 	bl	8002a7c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800660a:	4809      	ldr	r0, [pc, #36]	; (8006630 <_Z23getFont_verdana_40_4bppv+0x70>)
 800660c:	f01c fc66 	bl	8022edc <atexit>
 8006610:	4628      	mov	r0, r5
 8006612:	f01c fb46 	bl	8022ca2 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8006616:	4804      	ldr	r0, [pc, #16]	; (8006628 <_Z23getFont_verdana_40_4bppv+0x68>)
 8006618:	b00f      	add	sp, #60	; 0x3c
 800661a:	bd30      	pop	{r4, r5, pc}
 800661c:	24005118 	.word	0x24005118
 8006620:	08026e84 	.word	0x08026e84
 8006624:	08026ef8 	.word	0x08026ef8
 8006628:	2400511c 	.word	0x2400511c
 800662c:	08026f04 	.word	0x08026f04
 8006630:	080065bd 	.word	0x080065bd

08006634 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8006634:	2000      	movs	r0, #0
 8006636:	4770      	bx	lr

08006638 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 8006638:	2000      	movs	r0, #0
 800663a:	4770      	bx	lr

0800663c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800663c:	b40e      	push	{r1, r2, r3}
 800663e:	b503      	push	{r0, r1, lr}
 8006640:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8006642:	2100      	movs	r1, #0
{
 8006644:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8006648:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800664a:	f011 fc8f 	bl	8017f6c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 800664e:	b002      	add	sp, #8
 8006650:	f85d eb04 	ldr.w	lr, [sp], #4
 8006654:	b003      	add	sp, #12
 8006656:	4770      	bx	lr

08006658 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8006658:	b40c      	push	{r2, r3}
 800665a:	b507      	push	{r0, r1, r2, lr}
 800665c:	ab04      	add	r3, sp, #16
 800665e:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8006662:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8006664:	f011 fc82 	bl	8017f6c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8006668:	b003      	add	sp, #12
 800666a:	f85d eb04 	ldr.w	lr, [sp], #4
 800666e:	b002      	add	sp, #8
 8006670:	4770      	bx	lr
	...

08006674 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8006674:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8006676:	b510      	push	{r4, lr}
 8006678:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 800667a:	b373      	cbz	r3, 80066da <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800667c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 800667e:	b92b      	cbnz	r3, 800668c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8006680:	4b18      	ldr	r3, [pc, #96]	; (80066e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8006682:	21c5      	movs	r1, #197	; 0xc5
 8006684:	4a18      	ldr	r2, [pc, #96]	; (80066e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8006686:	4819      	ldr	r0, [pc, #100]	; (80066ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8006688:	f01c fc0a 	bl	8022ea0 <__assert_func>
            return buffer[pos];
 800668c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800668e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8006692:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8006694:	b30b      	cbz	r3, 80066da <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8006696:	f012 ffe1 	bl	801965c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 800669a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800669c:	2b01      	cmp	r3, #1
 800669e:	d803      	bhi.n	80066a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 80066a0:	4b13      	ldr	r3, [pc, #76]	; (80066f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 80066a2:	21cb      	movs	r1, #203	; 0xcb
 80066a4:	4a13      	ldr	r2, [pc, #76]	; (80066f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 80066a6:	e7ee      	b.n	8006686 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 80066a8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 80066aa:	f640 103f 	movw	r0, #2367	; 0x93f
 80066ae:	1c53      	adds	r3, r2, #1
 80066b0:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 80066b2:	2b09      	cmp	r3, #9
 80066b4:	4619      	mov	r1, r3
 80066b6:	bf88      	it	hi
 80066b8:	f1a3 010a 	subhi.w	r1, r3, #10
 80066bc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80066c0:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 80066c2:	4281      	cmp	r1, r0
 80066c4:	d109      	bne.n	80066da <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 80066c6:	2b0a      	cmp	r3, #10
 80066c8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80066cc:	bf28      	it	cs
 80066ce:	2300      	movcs	r3, #0
            return buffer[pos];
 80066d0:	8c50      	ldrh	r0, [r2, #34]	; 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 80066d2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80066d6:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 80066d8:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 80066da:	4620      	mov	r0, r4
}
 80066dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 80066e0:	f012 bebe 	b.w	8019460 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80066e4:	080251dc 	.word	0x080251dc
 80066e8:	080251e5 	.word	0x080251e5
 80066ec:	08025290 	.word	0x08025290
 80066f0:	080252e8 	.word	0x080252e8
 80066f4:	080252f6 	.word	0x080252f6

080066f8 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 80066f8:	f012 be7b 	b.w	80193f2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080066fc <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80066fc:	b510      	push	{r4, lr}
 80066fe:	b086      	sub	sp, #24
 8006700:	ac02      	add	r4, sp, #8
 8006702:	e884 0006 	stmia.w	r4, {r1, r2}
 8006706:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8006708:	ab0a      	add	r3, sp, #40	; 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800670a:	4621      	mov	r1, r4
    va_start(pArg, format);
 800670c:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800670e:	9301      	str	r3, [sp, #4]
 8006710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006712:	9300      	str	r3, [sp, #0]
 8006714:	9b08      	ldr	r3, [sp, #32]
 8006716:	f010 f913 	bl	8016940 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800671a:	b006      	add	sp, #24
 800671c:	bd10      	pop	{r4, pc}
	...

08006720 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8006720:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8006722:	bb18      	cbnz	r0, 800676c <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8006724:	4b12      	ldr	r3, [pc, #72]	; (8006770 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8006726:	4813      	ldr	r0, [pc, #76]	; (8006774 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4913      	ldr	r1, [pc, #76]	; (8006778 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 800672c:	b1b3      	cbz	r3, 800675c <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800672e:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8006730:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8006732:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8006734:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8006736:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8006738:	685a      	ldr	r2, [r3, #4]
 800673a:	441a      	add	r2, r3
 800673c:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 800673e:	4b0f      	ldr	r3, [pc, #60]	; (800677c <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8006740:	2200      	movs	r2, #0
 8006742:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8006744:	f000 f838 	bl	80067b8 <_ZN17TypedTextDatabase8getFontsEv>
 8006748:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800674a:	f000 f833 	bl	80067b4 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 800674e:	4b0c      	ldr	r3, [pc, #48]	; (8006780 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8006750:	601c      	str	r4, [r3, #0]
        fonts = f;
 8006752:	4b0c      	ldr	r3, [pc, #48]	; (8006784 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8006754:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8006756:	4b0c      	ldr	r3, [pc, #48]	; (8006788 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8006758:	8018      	strh	r0, [r3, #0]
    }
}
 800675a:	e007      	b.n	800676c <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 800675c:	4b0b      	ldr	r3, [pc, #44]	; (800678c <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 800675e:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8006760:	4b0b      	ldr	r3, [pc, #44]	; (8006790 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8006762:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8006764:	4b0b      	ldr	r3, [pc, #44]	; (8006794 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8006766:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8006768:	2c00      	cmp	r4, #0
 800676a:	d1e8      	bne.n	800673e <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 800676c:	bd38      	pop	{r3, r4, r5, pc}
 800676e:	bf00      	nop
 8006770:	24005148 	.word	0x24005148
 8006774:	2400514c 	.word	0x2400514c
 8006778:	24005150 	.word	0x24005150
 800677c:	24005154 	.word	0x24005154
 8006780:	2400eb28 	.word	0x2400eb28
 8006784:	2400eb30 	.word	0x2400eb30
 8006788:	2400eb2c 	.word	0x2400eb2c
 800678c:	90177048 	.word	0x90177048
 8006790:	90177000 	.word	0x90177000
 8006794:	90177118 	.word	0x90177118

08006798 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8006798:	4b04      	ldr	r3, [pc, #16]	; (80067ac <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80067a0:	4b03      	ldr	r3, [pc, #12]	; (80067b0 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 80067a2:	681b      	ldr	r3, [r3, #0]
}
 80067a4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	24005150 	.word	0x24005150
 80067b0:	2400514c 	.word	0x2400514c

080067b4 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 80067b4:	2012      	movs	r0, #18
 80067b6:	4770      	bx	lr

080067b8 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 80067b8:	4800      	ldr	r0, [pc, #0]	; (80067bc <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 80067ba:	4770      	bx	lr
 80067bc:	24005158 	.word	0x24005158

080067c0 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80067c0:	b510      	push	{r4, lr}
};
 80067c2:	4c05      	ldr	r4, [pc, #20]	; (80067d8 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_16_4bpp()),
 80067c4:	f7ff febe 	bl	8006544 <_Z23getFont_verdana_16_4bppv>
};
 80067c8:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 80067ca:	f7ff fef9 	bl	80065c0 <_Z23getFont_verdana_40_4bppv>
};
 80067ce:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 80067d0:	f7ff fe7c 	bl	80064cc <_Z23getFont_verdana_10_4bppv>
};
 80067d4:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 80067d6:	bd10      	pop	{r4, pc}
 80067d8:	24005158 	.word	0x24005158

080067dc <_ZN15customGraphBaseD1Ev>:
}

customGraphBase::~customGraphBase()
{

}
 80067dc:	4770      	bx	lr

080067de <_ZN15customGraphBase10initializeEv>:

void customGraphBase::initialize()
{

}
 80067de:	4770      	bx	lr

080067e0 <_ZN15customGraphBaseD0Ev>:
customGraphBase::~customGraphBase()
 80067e0:	b510      	push	{r4, lr}
 80067e2:	4604      	mov	r4, r0
}
 80067e4:	f240 4194 	movw	r1, #1172	; 0x494
 80067e8:	f01c fa4d 	bl	8022c86 <_ZdlPvj>
 80067ec:	4620      	mov	r0, r4
 80067ee:	bd10      	pop	{r4, pc}

080067f0 <_ZN8touchgfx15GraphLabelsBaseC1Ev>:
 * @see GraphLabelsX, GraphLabelsY
 */
class GraphLabelsBase : public AbstractGraphDecoration
{
public:
    GraphLabelsBase()
 80067f0:	b510      	push	{r4, lr}
 80067f2:	4604      	mov	r4, r0
        : CanvasWidget()
 80067f4:	f00b fea4 	bl	8012540 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : AbstractGraphDecoration(),
          dataScale(1), labelInterval(0), labelTypedText(TYPED_TEXT_INVALID), labelRotation(TEXT_ROTATE_0), labelDecimals(0), labelDecimalPoint('.'), majorLabel(0)
 80067f8:	4a0a      	ldr	r2, [pc, #40]	; (8006824 <_ZN8touchgfx15GraphLabelsBaseC1Ev+0x34>)
 80067fa:	2300      	movs	r3, #0
    {
    }
 80067fc:	4620      	mov	r0, r4
          dataScale(1), labelInterval(0), labelTypedText(TYPED_TEXT_INVALID), labelRotation(TEXT_ROTATE_0), labelDecimals(0), labelDecimalPoint('.'), majorLabel(0)
 80067fe:	6022      	str	r2, [r4, #0]
 8006800:	2201      	movs	r2, #1
 8006802:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006804:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006808:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 800680c:	64a3      	str	r3, [r4, #72]	; 0x48
 800680e:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
        : typedTextId(id)
 8006812:	4a05      	ldr	r2, [pc, #20]	; (8006828 <_ZN8touchgfx15GraphLabelsBaseC1Ev+0x38>)
 8006814:	63a2      	str	r2, [r4, #56]	; 0x38
 8006816:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800681a:	87a2      	strh	r2, [r4, #60]	; 0x3c
 800681c:	222e      	movs	r2, #46	; 0x2e
 800681e:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
    }
 8006822:	bd10      	pop	{r4, pc}
 8006824:	08025d40 	.word	0x08025d40
 8006828:	080248e8 	.word	0x080248e8

0800682c <_ZN15customGraphBaseC1Ev>:
customGraphBase::customGraphBase()
 800682c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006830:	f44f 7380 	mov.w	r3, #256	; 0x100
        : x(0), y(0), width(0), height(0)
 8006834:	2600      	movs	r6, #0
 8006836:	4680      	mov	r8, r0
 8006838:	4aea      	ldr	r2, [pc, #936]	; (8006be4 <_ZN15customGraphBaseC1Ev+0x3b8>)
 800683a:	f100 0558 	add.w	r5, r0, #88	; 0x58
 800683e:	4604      	mov	r4, r0
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 8006840:	2164      	movs	r1, #100	; 0x64
 8006842:	2701      	movs	r7, #1
 8006844:	f504 7a4e 	add.w	sl, r4, #824	; 0x338
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 8006848:	f04f 090a 	mov.w	r9, #10
 800684c:	f504 6b8a 	add.w	fp, r4, #1104	; 0x450
 8006850:	ed2d 8b04 	vpush	{d8-d9}
 8006854:	8483      	strh	r3, [r0, #36]	; 0x24
 8006856:	b085      	sub	sp, #20
          firstChild(0)
 8006858:	6286      	str	r6, [r0, #40]	; 0x28
 800685a:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800685e:	e9c0 6603 	strd	r6, r6, [r0, #12]
 8006862:	e9c0 6605 	strd	r6, r6, [r0, #20]
 8006866:	e9c0 6607 	strd	r6, r6, [r0, #28]
 800686a:	f848 2b2c 	str.w	r2, [r8], #44
        : Widget(), alpha(255), color(0)
 800686e:	4ade      	ldr	r2, [pc, #888]	; (8006be8 <_ZN15customGraphBaseC1Ev+0x3bc>)
 8006870:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 8006874:	23ff      	movs	r3, #255	; 0xff
 8006876:	64c6      	str	r6, [r0, #76]	; 0x4c
 8006878:	f880 3052 	strb.w	r3, [r0, #82]	; 0x52
        : color(col)
 800687c:	6546      	str	r6, [r0, #84]	; 0x54
        : x(0), y(0), width(0), height(0)
 800687e:	e9c0 260b 	strd	r2, r6, [r0, #44]	; 0x2c
 8006882:	e9c0 660d 	strd	r6, r6, [r0, #52]	; 0x34
 8006886:	e9c0 660f 	strd	r6, r6, [r0, #60]	; 0x3c
 800688a:	e9c0 6611 	strd	r6, r6, [r0, #68]	; 0x44
 800688e:	4628      	mov	r0, r5
 8006890:	f00c fa08 	bl	8012ca4 <_ZN8touchgfx17AbstractDataGraphC1Es>
 8006894:	4bd5      	ldr	r3, [pc, #852]	; (8006bec <_ZN15customGraphBaseC1Ev+0x3c0>)
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 8006896:	2263      	movs	r2, #99	; 0x63
 8006898:	4631      	mov	r1, r6
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 800689a:	65a3      	str	r3, [r4, #88]	; 0x58
 800689c:	f504 73d4 	add.w	r3, r4, #424	; 0x1a8
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 80068a0:	4628      	mov	r0, r5
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 80068a2:	e9c4 3667 	strd	r3, r6, [r4, #412]	; 0x19c
 80068a6:	e9c4 7665 	strd	r7, r6, [r4, #404]	; 0x194
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 80068aa:	f7fc f921 	bl	8002af0 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
 80068ae:	4bd0      	ldr	r3, [pc, #832]	; (8006bf0 <_ZN15customGraphBaseC1Ev+0x3c4>)
        : CanvasWidget()
 80068b0:	4650      	mov	r0, sl
        : DynamicDataGraph(capacity, values), current(0)
 80068b2:	f8a4 61a4 	strh.w	r6, [r4, #420]	; 0x1a4
        : GraphScrollData(CAPACITY, y)
 80068b6:	65a3      	str	r3, [r4, #88]	; 0x58
 80068b8:	f00b fe42 	bl	8012540 <_ZN8touchgfx12CanvasWidgetC1Ev>
class GraphElementGridX : public GraphElementGridBase
 80068bc:	4bcd      	ldr	r3, [pc, #820]	; (8006bf4 <_ZN15customGraphBaseC1Ev+0x3c8>)
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 80068be:	f8c4 936c 	str.w	r9, [r4, #876]	; 0x36c
class GraphElementGridX : public GraphElementGridBase
 80068c2:	f8c4 3338 	str.w	r3, [r4, #824]	; 0x338
 80068c6:	f504 735e 	add.w	r3, r4, #888	; 0x378
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 80068ca:	f884 7370 	strb.w	r7, [r4, #880]	; 0x370
        : CanvasWidget()
 80068ce:	4618      	mov	r0, r3
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 80068d0:	f8c4 6374 	str.w	r6, [r4, #884]	; 0x374
 80068d4:	ee08 3a10 	vmov	s16, r3
 80068d8:	e9c4 67d9 	strd	r6, r7, [r4, #868]	; 0x364
        : CanvasWidget()
 80068dc:	f00b fe30 	bl	8012540 <_ZN8touchgfx12CanvasWidgetC1Ev>
class GraphElementGridY : public GraphElementGridBase
 80068e0:	4bc5      	ldr	r3, [pc, #788]	; (8006bf8 <_ZN15customGraphBaseC1Ev+0x3cc>)
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 80068e2:	f8c4 93ac 	str.w	r9, [r4, #940]	; 0x3ac
class GraphElementGridY : public GraphElementGridBase
 80068e6:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
 80068ea:	f504 736e 	add.w	r3, r4, #952	; 0x3b8
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 80068ee:	f884 73b0 	strb.w	r7, [r4, #944]	; 0x3b0

/**
 * GraphLabelsX will draw labels along the X axis at given intervals. By combining two
 * GraphLabelsX it is possible to have different appearance for major and minor y offsets.
 */
class GraphLabelsX : public GraphLabelsBase
 80068f2:	4618      	mov	r0, r3
 80068f4:	f8c4 63b4 	str.w	r6, [r4, #948]	; 0x3b4
 80068f8:	ee08 3a90 	vmov	s17, r3
 80068fc:	e9c4 67e9 	strd	r6, r7, [r4, #932]	; 0x3a4
 8006900:	f7ff ff76 	bl	80067f0 <_ZN8touchgfx15GraphLabelsBaseC1Ev>
 8006904:	4bbd      	ldr	r3, [pc, #756]	; (8006bfc <_ZN15customGraphBaseC1Ev+0x3d0>)
 8006906:	f8c4 33b8 	str.w	r3, [r4, #952]	; 0x3b8
 800690a:	f204 4304 	addw	r3, r4, #1028	; 0x404

/**
 * GraphLabelsY will draw labels along the Y axis at given intervals. By combining two
 * GraphLabelsY it is possible to have different appearance for major and minor y offsets.
 */
class GraphLabelsY : public GraphLabelsBase
 800690e:	4618      	mov	r0, r3
 8006910:	ee09 3a10 	vmov	s18, r3
 8006914:	f7ff ff6c 	bl	80067f0 <_ZN8touchgfx15GraphLabelsBaseC1Ev>
 8006918:	4bb9      	ldr	r3, [pc, #740]	; (8006c00 <_ZN15customGraphBaseC1Ev+0x3d4>)
        : CanvasWidget()
 800691a:	4658      	mov	r0, fp
 800691c:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
 8006920:	f00b fe0e 	bl	8012540 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : lineWidth(2)
 8006924:	4bb7      	ldr	r3, [pc, #732]	; (8006c04 <_ZN15customGraphBaseC1Ev+0x3d8>)
 8006926:	f8c4 3450 	str.w	r3, [r4, #1104]	; 0x450
 800692a:	2302      	movs	r3, #2
 800692c:	f884 347c 	strb.w	r3, [r4, #1148]	; 0x47c
 8006930:	f504 6390 	add.w	r3, r4, #1152	; 0x480
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 8006934:	4618      	mov	r0, r3
 8006936:	9303      	str	r3, [sp, #12]
 8006938:	f7fb fe9c 	bl	8002674 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 800693c:	4bb2      	ldr	r3, [pc, #712]	; (8006c08 <_ZN15customGraphBaseC1Ev+0x3dc>)
    box1.setPosition(0, 0, 310, 200);
 800693e:	4632      	mov	r2, r6
 8006940:	4640      	mov	r0, r8
 8006942:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
 8006946:	3324      	adds	r3, #36	; 0x24
 8006948:	4631      	mov	r1, r6
 800694a:	f8c4 648c 	str.w	r6, [r4, #1164]	; 0x48c
 800694e:	f8c4 3488 	str.w	r3, [r4, #1160]	; 0x488
        rect.width = width;
 8006952:	4bae      	ldr	r3, [pc, #696]	; (8006c0c <_ZN15customGraphBaseC1Ev+0x3e0>)
 8006954:	60a3      	str	r3, [r4, #8]
 8006956:	23c8      	movs	r3, #200	; 0xc8
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	f44f 739b 	mov.w	r3, #310	; 0x136
 800695e:	f7fc fd35 	bl	80033cc <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8006962:	f04f 33ff 	mov.w	r3, #4294967295
    add(box1);
 8006966:	4641      	mov	r1, r8
 8006968:	4620      	mov	r0, r4
 800696a:	6563      	str	r3, [r4, #84]	; 0x54
        color = newColor;
 800696c:	f04f 487f 	mov.w	r8, #4278190080	; 0xff000000
 8006970:	f00a fb6c 	bl	801104c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    dynamicGraph1.setPosition(0, 0, 310, 200);
 8006974:	23c8      	movs	r3, #200	; 0xc8
 8006976:	4632      	mov	r2, r6
 8006978:	4631      	mov	r1, r6
 800697a:	4628      	mov	r0, r5
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	f44f 739b 	mov.w	r3, #310	; 0x136
 8006982:	f7fc fd23 	bl	80033cc <_ZN8touchgfx8Drawable11setPositionEssss>
    dynamicGraph1.setScale(1);
 8006986:	4632      	mov	r2, r6
 8006988:	4639      	mov	r1, r7
 800698a:	4628      	mov	r0, r5
 800698c:	f7fc fa64 	bl	8002e58 <_ZN8touchgfx16DynamicDataGraph8setScaleEib>
    dynamicGraph1.setGraphAreaMargin(11, 32, 0, 20);
 8006990:	2314      	movs	r3, #20
 8006992:	2220      	movs	r2, #32
 8006994:	210b      	movs	r1, #11
 8006996:	4628      	mov	r0, r5
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	4633      	mov	r3, r6
 800699c:	f00c f934 	bl	8012c08 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    dynamicGraph1.setGraphAreaPadding(0, 0, 0, 0);
 80069a0:	4633      	mov	r3, r6
 80069a2:	4632      	mov	r2, r6
 80069a4:	4631      	mov	r1, r6
 80069a6:	4628      	mov	r0, r5
 80069a8:	9600      	str	r6, [sp, #0]
 80069aa:	f00c f830 	bl	8012a0e <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    dynamicGraph1.setGraphRangeY(0, 100);
 80069ae:	2264      	movs	r2, #100	; 0x64
 80069b0:	4631      	mov	r1, r6
 80069b2:	4628      	mov	r0, r5
 80069b4:	f7fc f928 	bl	8002c08 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>
        setIntervalScaled(abs(interval) * dataScale);
 80069b8:	f8d4 1368 	ldr.w	r1, [r4, #872]	; 0x368
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 80069bc:	463a      	mov	r2, r7
        color = newColor;
 80069be:	f8c4 8364 	str.w	r8, [r4, #868]	; 0x364
        setIntervalScaled(abs(interval) * dataScale);
 80069c2:	fb09 f001 	mul.w	r0, r9, r1
        lineWidth = width;
 80069c6:	f884 7370 	strb.w	r7, [r4, #880]	; 0x370
 80069ca:	2800      	cmp	r0, #0
 80069cc:	bfb8      	it	lt
 80069ce:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 80069d0:	f8c4 036c 	str.w	r0, [r4, #876]	; 0x36c
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 80069d4:	f00c f9ca 	bl	8012d6c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    dynamicGraph1.addGraphElement(dynamicGraph1MajorXAxisGrid);
 80069d8:	4651      	mov	r1, sl
        dataScale = scale;
 80069da:	e9c4 70da 	strd	r7, r0, [r4, #872]	; 0x368
 80069de:	4628      	mov	r0, r5
 80069e0:	f00c f820 	bl	8012a24 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        setIntervalScaled(abs(interval) * dataScale);
 80069e4:	f8d4 13a8 	ldr.w	r1, [r4, #936]	; 0x3a8
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 80069e8:	463a      	mov	r2, r7
        color = newColor;
 80069ea:	f8c4 83a4 	str.w	r8, [r4, #932]	; 0x3a4
        setIntervalScaled(abs(interval) * dataScale);
 80069ee:	fb09 f001 	mul.w	r0, r9, r1
        lineWidth = width;
 80069f2:	f884 73b0 	strb.w	r7, [r4, #944]	; 0x3b0
 80069f6:	2800      	cmp	r0, #0
 80069f8:	bfb8      	it	lt
 80069fa:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 80069fc:	f8c4 03ac 	str.w	r0, [r4, #940]	; 0x3ac
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8006a00:	f00c f9b4 	bl	8012d6c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    dynamicGraph1.addGraphElement(dynamicGraph1MajorYAxisGrid);
 8006a04:	ee18 1a10 	vmov	r1, s16
        dataScale = scale;
 8006a08:	e9c4 70ea 	strd	r7, r0, [r4, #936]	; 0x3a8
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	f00c f809 	bl	8012a24 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        setIntervalScaled(AbstractDataGraph::int2scaled(interval, dataScale));
 8006a12:	f8d4 13e8 	ldr.w	r1, [r4, #1000]	; 0x3e8
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8006a16:	463a      	mov	r2, r7
class TypedText
 8006a18:	f8a4 73f4 	strh.w	r7, [r4, #1012]	; 0x3f4
        return i * scale;
 8006a1c:	fb09 f001 	mul.w	r0, r9, r1
        color = newColor;
 8006a20:	f8c4 83e4 	str.w	r8, [r4, #996]	; 0x3e4
 8006a24:	2800      	cmp	r0, #0
 8006a26:	bfb8      	it	lt
 8006a28:	4240      	neglt	r0, r0
        labelInterval = abs(interval);
 8006a2a:	f8c4 03ec 	str.w	r0, [r4, #1004]	; 0x3ec
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8006a2e:	f00c f99d 	bl	8012d6c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    dynamicGraph1.addBottomElement(dynamicGraph1MajorXAxisLabel);
 8006a32:	ee18 1a90 	vmov	r1, s17
        dataScale = scale;
 8006a36:	e9c4 70fa 	strd	r7, r0, [r4, #1000]	; 0x3e8
 8006a3a:	4628      	mov	r0, r5
 8006a3c:	f00c f816 	bl	8012a6c <_ZN8touchgfx17AbstractDataGraph16addBottomElementERNS_23AbstractGraphDecorationE>
        setIntervalScaled(AbstractDataGraph::int2scaled(interval, dataScale));
 8006a40:	f8d4 1434 	ldr.w	r1, [r4, #1076]	; 0x434
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8006a44:	463a      	mov	r2, r7
 8006a46:	f8a4 6440 	strh.w	r6, [r4, #1088]	; 0x440
 8006a4a:	fb09 f001 	mul.w	r0, r9, r1
 8006a4e:	f8c4 8430 	str.w	r8, [r4, #1072]	; 0x430
 8006a52:	2800      	cmp	r0, #0
 8006a54:	bfb8      	it	lt
 8006a56:	4240      	neglt	r0, r0
        labelInterval = abs(interval);
 8006a58:	f8c4 0438 	str.w	r0, [r4, #1080]	; 0x438
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8006a5c:	f00c f986 	bl	8012d6c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    dynamicGraph1.addLeftElement(dynamicGraph1MajorYAxisLabel);
 8006a60:	ee19 1a10 	vmov	r1, s18
 8006a64:	f8c4 0438 	str.w	r0, [r4, #1080]	; 0x438
 8006a68:	4628      	mov	r0, r5
        dataScale = scale;
 8006a6a:	f8c4 7434 	str.w	r7, [r4, #1076]	; 0x434
 8006a6e:	f00b ffeb 	bl	8012a48 <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>
 8006a72:	4b67      	ldr	r3, [pc, #412]	; (8006c10 <_ZN15customGraphBaseC1Ev+0x3e4>)
    dynamicGraph1.addGraphElement(dynamicGraph1Line1);
 8006a74:	4659      	mov	r1, fp
 8006a76:	4628      	mov	r0, r5
 8006a78:	f8c4 348c 	str.w	r3, [r4, #1164]	; 0x48c
        painterRed = Color::getRed(color);
 8006a7c:	f249 7314 	movw	r3, #38676	; 0x9714
 8006a80:	f8a4 3490 	strh.w	r3, [r4, #1168]	; 0x490
        painterBlue = Color::getBlue(color);
 8006a84:	23c5      	movs	r3, #197	; 0xc5
 8006a86:	f884 3492 	strb.w	r3, [r4, #1170]	; 0x492
 8006a8a:	9b03      	ldr	r3, [sp, #12]
 8006a8c:	f8c4 3478 	str.w	r3, [r4, #1144]	; 0x478
        lineWidth = width;
 8006a90:	2304      	movs	r3, #4
 8006a92:	f884 347c 	strb.w	r3, [r4, #1148]	; 0x47c
 8006a96:	f00b ffc5 	bl	8012a24 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        const float fs = f * (float)scale;
 8006a9a:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006a9e:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8006c14 <_ZN15customGraphBaseC1Ev+0x3e8>
 8006aa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006aa6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006aaa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ab2:	f2c1 82a3 	blt.w	8007ffc <_ZN15customGraphBaseC1Ev+0x17d0>
            return (int)(fs + 0.5f);
 8006ab6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006aba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006abe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ac2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	f00c f9a9 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006acc:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006ad0:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8006c18 <_ZN15customGraphBaseC1Ev+0x3ec>
 8006ad4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ad8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006adc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ae4:	f2c1 829f 	blt.w	8008026 <_ZN15customGraphBaseC1Ev+0x17fa>
            return (int)(fs + 0.5f);
 8006ae8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006aec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006af0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006af4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006af8:	4628      	mov	r0, r5
 8006afa:	f00c f990 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006afe:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006b02:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8006c1c <_ZN15customGraphBaseC1Ev+0x3f0>
 8006b06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b0a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006b0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b16:	f2c1 829b 	blt.w	8008050 <_ZN15customGraphBaseC1Ev+0x1824>
            return (int)(fs + 0.5f);
 8006b1a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006b1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006b22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b26:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	f00c f977 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006b30:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006b34:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8006c20 <_ZN15customGraphBaseC1Ev+0x3f4>
 8006b38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b3c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006b40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b48:	f2c1 8297 	blt.w	800807a <_ZN15customGraphBaseC1Ev+0x184e>
            return (int)(fs + 0.5f);
 8006b4c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006b50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006b54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b58:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006b5c:	4628      	mov	r0, r5
 8006b5e:	f00c f95e 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006b62:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006b66:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8006c24 <_ZN15customGraphBaseC1Ev+0x3f8>
 8006b6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b6e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006b72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b7a:	f2c1 8293 	blt.w	80080a4 <_ZN15customGraphBaseC1Ev+0x1878>
            return (int)(fs + 0.5f);
 8006b7e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006b82:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006b86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b8a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006b8e:	4628      	mov	r0, r5
 8006b90:	f00c f945 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006b94:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006b98:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8006c28 <_ZN15customGraphBaseC1Ev+0x3fc>
 8006b9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ba0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006ba4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bac:	f2c1 828f 	blt.w	80080ce <_ZN15customGraphBaseC1Ev+0x18a2>
            return (int)(fs + 0.5f);
 8006bb0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006bb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006bb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006bbc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006bc0:	4628      	mov	r0, r5
 8006bc2:	f00c f92c 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006bc6:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006bca:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006c2c <_ZN15customGraphBaseC1Ev+0x400>
 8006bce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006bd2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006bd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bde:	f2c1 828b 	blt.w	80080f8 <_ZN15customGraphBaseC1Ev+0x18cc>
 8006be2:	e04b      	b.n	8006c7c <_ZN15customGraphBaseC1Ev+0x450>
 8006be4:	080253d0 	.word	0x080253d0
 8006be8:	08025e70 	.word	0x08025e70
 8006bec:	080258b8 	.word	0x080258b8
 8006bf0:	08025014 	.word	0x08025014
 8006bf4:	08024ea4 	.word	0x08024ea4
 8006bf8:	08024f5c 	.word	0x08024f5c
 8006bfc:	08025c00 	.word	0x08025c00
 8006c00:	08025ca0 	.word	0x08025ca0
 8006c04:	08025b80 	.word	0x08025b80
 8006c08:	08025808 	.word	0x08025808
 8006c0c:	00c80136 	.word	0x00c80136
 8006c10:	ff1497c5 	.word	0xff1497c5
 8006c14:	42103f72 	.word	0x42103f72
 8006c18:	41a20851 	.word	0x41a20851
 8006c1c:	40ff87e8 	.word	0x40ff87e8
 8006c20:	3fd1ce5b 	.word	0x3fd1ce5b
 8006c24:	4014a5ce 	.word	0x4014a5ce
 8006c28:	4119d215 	.word	0x4119d215
 8006c2c:	41ad65d4 	.word	0x41ad65d4
 8006c30:	420ed09c 	.word	0x420ed09c
 8006c34:	42427609 	.word	0x42427609
 8006c38:	42672051 	.word	0x42672051
 8006c3c:	42769e40 	.word	0x42769e40
 8006c40:	42707810 	.word	0x42707810
 8006c44:	4259eac3 	.word	0x4259eac3
 8006c48:	423c79c1 	.word	0x423c79c1
 8006c4c:	422371c4 	.word	0x422371c4
 8006c50:	4218fae9 	.word	0x4218fae9
 8006c54:	422372f7 	.word	0x422372f7
 8006c58:	4243b77b 	.word	0x4243b77b
 8006c5c:	4274cc96 	.word	0x4274cc96
 8006c60:	42967bcc 	.word	0x42967bcc
 8006c64:	42b004ba 	.word	0x42b004ba
 8006c68:	42c12531 	.word	0x42c12531
 8006c6c:	42c5a82b 	.word	0x42c5a82b
 8006c70:	42bc0752 	.word	0x42bc0752
 8006c74:	42a5cedd 	.word	0x42a5cedd
 8006c78:	428744d1 	.word	0x428744d1
            return (int)(fs + 0.5f);
 8006c7c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006c80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006c84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c88:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	f00c f8c6 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006c92:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006c96:	ed1f 7a1a 	vldr	s14, [pc, #-104]	; 8006c30 <_ZN15customGraphBaseC1Ev+0x404>
 8006c9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c9e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006ca2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006caa:	f2c1 823a 	blt.w	8008122 <_ZN15customGraphBaseC1Ev+0x18f6>
            return (int)(fs + 0.5f);
 8006cae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006cb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006cb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006cba:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	f00c f8ad 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006cc4:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006cc8:	ed1f 7a26 	vldr	s14, [pc, #-152]	; 8006c34 <_ZN15customGraphBaseC1Ev+0x408>
 8006ccc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006cd0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006cd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cdc:	f2c1 8236 	blt.w	800814c <_ZN15customGraphBaseC1Ev+0x1920>
            return (int)(fs + 0.5f);
 8006ce0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006ce4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006ce8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006cec:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	f00c f894 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006cf6:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006cfa:	ed1f 7a31 	vldr	s14, [pc, #-196]	; 8006c38 <_ZN15customGraphBaseC1Ev+0x40c>
 8006cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d02:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006d06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d0e:	f2c1 8232 	blt.w	8008176 <_ZN15customGraphBaseC1Ev+0x194a>
            return (int)(fs + 0.5f);
 8006d12:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006d16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006d1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d1e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006d22:	4628      	mov	r0, r5
 8006d24:	f00c f87b 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006d28:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006d2c:	ed1f 7a3d 	vldr	s14, [pc, #-244]	; 8006c3c <_ZN15customGraphBaseC1Ev+0x410>
 8006d30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d34:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006d38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d40:	f2c1 822e 	blt.w	80081a0 <_ZN15customGraphBaseC1Ev+0x1974>
            return (int)(fs + 0.5f);
 8006d44:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006d48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006d4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d50:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006d54:	4628      	mov	r0, r5
 8006d56:	f00c f862 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006d5a:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006d5e:	ed1f 7a48 	vldr	s14, [pc, #-288]	; 8006c40 <_ZN15customGraphBaseC1Ev+0x414>
 8006d62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d66:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006d6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d72:	f2c1 822a 	blt.w	80081ca <_ZN15customGraphBaseC1Ev+0x199e>
            return (int)(fs + 0.5f);
 8006d76:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006d7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006d7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d82:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006d86:	4628      	mov	r0, r5
 8006d88:	f00c f849 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006d8c:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006d90:	ed1f 7a54 	vldr	s14, [pc, #-336]	; 8006c44 <_ZN15customGraphBaseC1Ev+0x418>
 8006d94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d98:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006d9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006da4:	f2c1 8226 	blt.w	80081f4 <_ZN15customGraphBaseC1Ev+0x19c8>
            return (int)(fs + 0.5f);
 8006da8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006dac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006db0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006db4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006db8:	4628      	mov	r0, r5
 8006dba:	f00c f830 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006dbe:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006dc2:	ed1f 7a5f 	vldr	s14, [pc, #-380]	; 8006c48 <_ZN15customGraphBaseC1Ev+0x41c>
 8006dc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006dca:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006dce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dd6:	f2c1 8222 	blt.w	800821e <_ZN15customGraphBaseC1Ev+0x19f2>
            return (int)(fs + 0.5f);
 8006dda:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006dde:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006de2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006de6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006dea:	4628      	mov	r0, r5
 8006dec:	f00c f817 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006df0:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006df4:	ed1f 7a6b 	vldr	s14, [pc, #-428]	; 8006c4c <_ZN15customGraphBaseC1Ev+0x420>
 8006df8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006dfc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006e00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e08:	f2c1 821e 	blt.w	8008248 <_ZN15customGraphBaseC1Ev+0x1a1c>
            return (int)(fs + 0.5f);
 8006e0c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006e10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e18:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	f00b fffe 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006e22:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006e26:	ed1f 7a76 	vldr	s14, [pc, #-472]	; 8006c50 <_ZN15customGraphBaseC1Ev+0x424>
 8006e2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e2e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006e32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e3a:	f2c1 821a 	blt.w	8008272 <_ZN15customGraphBaseC1Ev+0x1a46>
            return (int)(fs + 0.5f);
 8006e3e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006e42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e4a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006e4e:	4628      	mov	r0, r5
 8006e50:	f00b ffe5 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006e54:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006e58:	ed1f 7a82 	vldr	s14, [pc, #-520]	; 8006c54 <_ZN15customGraphBaseC1Ev+0x428>
 8006e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e60:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006e64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e6c:	f2c1 8216 	blt.w	800829c <_ZN15customGraphBaseC1Ev+0x1a70>
            return (int)(fs + 0.5f);
 8006e70:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006e74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e7c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006e80:	4628      	mov	r0, r5
 8006e82:	f00b ffcc 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006e86:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006e8a:	ed1f 7a8d 	vldr	s14, [pc, #-564]	; 8006c58 <_ZN15customGraphBaseC1Ev+0x42c>
 8006e8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e92:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006e96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e9e:	f2c1 8212 	blt.w	80082c6 <_ZN15customGraphBaseC1Ev+0x1a9a>
            return (int)(fs + 0.5f);
 8006ea2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006ea6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006eaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006eae:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006eb2:	4628      	mov	r0, r5
 8006eb4:	f00b ffb3 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006eb8:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006ebc:	ed1f 7a99 	vldr	s14, [pc, #-612]	; 8006c5c <_ZN15customGraphBaseC1Ev+0x430>
 8006ec0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ec4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006ec8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ed0:	f2c1 820e 	blt.w	80082f0 <_ZN15customGraphBaseC1Ev+0x1ac4>
            return (int)(fs + 0.5f);
 8006ed4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006ed8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006edc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ee0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	f00b ff9a 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006eea:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006eee:	ed1f 7aa4 	vldr	s14, [pc, #-656]	; 8006c60 <_ZN15customGraphBaseC1Ev+0x434>
 8006ef2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ef6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006efa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f02:	f2c1 820a 	blt.w	800831a <_ZN15customGraphBaseC1Ev+0x1aee>
            return (int)(fs + 0.5f);
 8006f06:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006f0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f12:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006f16:	4628      	mov	r0, r5
 8006f18:	f00b ff81 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006f1c:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006f20:	ed1f 7ab0 	vldr	s14, [pc, #-704]	; 8006c64 <_ZN15customGraphBaseC1Ev+0x438>
 8006f24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f28:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006f2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f34:	f2c1 8206 	blt.w	8008344 <_ZN15customGraphBaseC1Ev+0x1b18>
            return (int)(fs + 0.5f);
 8006f38:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006f3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f44:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006f48:	4628      	mov	r0, r5
 8006f4a:	f00b ff68 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006f4e:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006f52:	ed1f 7abb 	vldr	s14, [pc, #-748]	; 8006c68 <_ZN15customGraphBaseC1Ev+0x43c>
 8006f56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f5a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006f5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f66:	f2c1 8202 	blt.w	800836e <_ZN15customGraphBaseC1Ev+0x1b42>
            return (int)(fs + 0.5f);
 8006f6a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006f6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f76:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	f00b ff4f 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006f80:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006f84:	ed1f 7ac7 	vldr	s14, [pc, #-796]	; 8006c6c <_ZN15customGraphBaseC1Ev+0x440>
 8006f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f8c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006f90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f98:	f2c1 81fe 	blt.w	8008398 <_ZN15customGraphBaseC1Ev+0x1b6c>
            return (int)(fs + 0.5f);
 8006f9c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006fa0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006fa4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fa8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006fac:	4628      	mov	r0, r5
 8006fae:	f00b ff36 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006fb2:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006fb6:	ed1f 7ad2 	vldr	s14, [pc, #-840]	; 8006c70 <_ZN15customGraphBaseC1Ev+0x444>
 8006fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fbe:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006fc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fca:	f2c1 81fa 	blt.w	80083c2 <_ZN15customGraphBaseC1Ev+0x1b96>
            return (int)(fs + 0.5f);
 8006fce:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006fd2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006fd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fda:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006fde:	4628      	mov	r0, r5
 8006fe0:	f00b ff1d 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006fe4:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006fe8:	ed1f 7ade 	vldr	s14, [pc, #-888]	; 8006c74 <_ZN15customGraphBaseC1Ev+0x448>
 8006fec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ff0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006ff4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ffc:	f2c1 81f6 	blt.w	80083ec <_ZN15customGraphBaseC1Ev+0x1bc0>
            return (int)(fs + 0.5f);
 8007000:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007004:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007008:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800700c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007010:	4628      	mov	r0, r5
 8007012:	f00b ff04 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007016:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 800701a:	ed1f 7ae9 	vldr	s14, [pc, #-932]	; 8006c78 <_ZN15customGraphBaseC1Ev+0x44c>
 800701e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007022:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007026:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800702a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800702e:	f2c1 81f2 	blt.w	8008416 <_ZN15customGraphBaseC1Ev+0x1bea>
            return (int)(fs + 0.5f);
 8007032:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007036:	ee77 7a87 	vadd.f32	s15, s15, s14
 800703a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800703e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007042:	4628      	mov	r0, r5
 8007044:	f00b feeb 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007048:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 800704c:	ed9f 7af3 	vldr	s14, [pc, #972]	; 800741c <_ZN15customGraphBaseC1Ev+0xbf0>
 8007050:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007054:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007058:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800705c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007060:	f2c1 81ee 	blt.w	8008440 <_ZN15customGraphBaseC1Ev+0x1c14>
            return (int)(fs + 0.5f);
 8007064:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007068:	ee77 7a87 	vadd.f32	s15, s15, s14
 800706c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007070:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007074:	4628      	mov	r0, r5
 8007076:	f00b fed2 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800707a:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 800707e:	ed9f 7ae8 	vldr	s14, [pc, #928]	; 8007420 <_ZN15customGraphBaseC1Ev+0xbf4>
 8007082:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007086:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800708a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800708e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007092:	f2c1 81ea 	blt.w	800846a <_ZN15customGraphBaseC1Ev+0x1c3e>
            return (int)(fs + 0.5f);
 8007096:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800709a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800709e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070a2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80070a6:	4628      	mov	r0, r5
 80070a8:	f00b feb9 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80070ac:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80070b0:	ed9f 7adc 	vldr	s14, [pc, #880]	; 8007424 <_ZN15customGraphBaseC1Ev+0xbf8>
 80070b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070b8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80070bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80070c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070c4:	f2c1 81e6 	blt.w	8008494 <_ZN15customGraphBaseC1Ev+0x1c68>
            return (int)(fs + 0.5f);
 80070c8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80070cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80070d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070d4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80070d8:	4628      	mov	r0, r5
 80070da:	f00b fea0 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80070de:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80070e2:	ed9f 7ad1 	vldr	s14, [pc, #836]	; 8007428 <_ZN15customGraphBaseC1Ev+0xbfc>
 80070e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070ea:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80070ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80070f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070f6:	f2c1 81e2 	blt.w	80084be <_ZN15customGraphBaseC1Ev+0x1c92>
            return (int)(fs + 0.5f);
 80070fa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80070fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007102:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007106:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800710a:	4628      	mov	r0, r5
 800710c:	f00b fe87 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007110:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007114:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 800742c <_ZN15customGraphBaseC1Ev+0xc00>
 8007118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800711c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007120:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007128:	f2c1 81de 	blt.w	80084e8 <_ZN15customGraphBaseC1Ev+0x1cbc>
            return (int)(fs + 0.5f);
 800712c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007130:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007134:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007138:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800713c:	4628      	mov	r0, r5
 800713e:	f00b fe6e 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007142:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007146:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8007430 <_ZN15customGraphBaseC1Ev+0xc04>
 800714a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800714e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007152:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800715a:	f2c1 81da 	blt.w	8008512 <_ZN15customGraphBaseC1Ev+0x1ce6>
            return (int)(fs + 0.5f);
 800715e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007162:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007166:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800716a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800716e:	4628      	mov	r0, r5
 8007170:	f00b fe55 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007174:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007178:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8007434 <_ZN15customGraphBaseC1Ev+0xc08>
 800717c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007180:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007184:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800718c:	f2c1 81d6 	blt.w	800853c <_ZN15customGraphBaseC1Ev+0x1d10>
            return (int)(fs + 0.5f);
 8007190:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007194:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007198:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800719c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80071a0:	4628      	mov	r0, r5
 80071a2:	f00b fe3c 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80071a6:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80071aa:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8007438 <_ZN15customGraphBaseC1Ev+0xc0c>
 80071ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071b2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80071b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80071ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071be:	f2c1 81d2 	blt.w	8008566 <_ZN15customGraphBaseC1Ev+0x1d3a>
            return (int)(fs + 0.5f);
 80071c2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80071c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80071ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071ce:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80071d2:	4628      	mov	r0, r5
 80071d4:	f00b fe23 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80071d8:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80071dc:	ed9f 7a97 	vldr	s14, [pc, #604]	; 800743c <_ZN15customGraphBaseC1Ev+0xc10>
 80071e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071e4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80071e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80071ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071f0:	f2c1 81ce 	blt.w	8008590 <_ZN15customGraphBaseC1Ev+0x1d64>
            return (int)(fs + 0.5f);
 80071f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80071f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80071fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007200:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007204:	4628      	mov	r0, r5
 8007206:	f00b fe0a 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800720a:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 800720e:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8007440 <_ZN15customGraphBaseC1Ev+0xc14>
 8007212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007216:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800721a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800721e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007222:	f2c1 81ca 	blt.w	80085ba <_ZN15customGraphBaseC1Ev+0x1d8e>
            return (int)(fs + 0.5f);
 8007226:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800722a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800722e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007232:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007236:	4628      	mov	r0, r5
 8007238:	f00b fdf1 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800723c:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007240:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8007444 <_ZN15customGraphBaseC1Ev+0xc18>
 8007244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007248:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800724c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007254:	f2c1 81c6 	blt.w	80085e4 <_ZN15customGraphBaseC1Ev+0x1db8>
            return (int)(fs + 0.5f);
 8007258:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800725c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007260:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007264:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007268:	4628      	mov	r0, r5
 800726a:	f00b fdd8 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800726e:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007272:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8007448 <_ZN15customGraphBaseC1Ev+0xc1c>
 8007276:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800727a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800727e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007286:	f2c1 81c2 	blt.w	800860e <_ZN15customGraphBaseC1Ev+0x1de2>
            return (int)(fs + 0.5f);
 800728a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800728e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007292:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007296:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800729a:	4628      	mov	r0, r5
 800729c:	f00b fdbf 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80072a0:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80072a4:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800744c <_ZN15customGraphBaseC1Ev+0xc20>
 80072a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072ac:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80072b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80072b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072b8:	f2c1 81be 	blt.w	8008638 <_ZN15customGraphBaseC1Ev+0x1e0c>
            return (int)(fs + 0.5f);
 80072bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80072c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80072c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072c8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80072cc:	4628      	mov	r0, r5
 80072ce:	f00b fda6 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80072d2:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80072d6:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8007450 <_ZN15customGraphBaseC1Ev+0xc24>
 80072da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072de:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80072e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80072e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ea:	f2c1 81ba 	blt.w	8008662 <_ZN15customGraphBaseC1Ev+0x1e36>
            return (int)(fs + 0.5f);
 80072ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80072f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80072f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072fa:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80072fe:	4628      	mov	r0, r5
 8007300:	f00b fd8d 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007304:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007308:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8007454 <_ZN15customGraphBaseC1Ev+0xc28>
 800730c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007310:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007314:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800731c:	f2c1 81b6 	blt.w	800868c <_ZN15customGraphBaseC1Ev+0x1e60>
            return (int)(fs + 0.5f);
 8007320:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007324:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007328:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800732c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007330:	4628      	mov	r0, r5
 8007332:	f00b fd74 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007336:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 800733a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8007458 <_ZN15customGraphBaseC1Ev+0xc2c>
 800733e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007342:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007346:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800734a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800734e:	f2c1 81b2 	blt.w	80086b6 <_ZN15customGraphBaseC1Ev+0x1e8a>
            return (int)(fs + 0.5f);
 8007352:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007356:	ee77 7a87 	vadd.f32	s15, s15, s14
 800735a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800735e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007362:	4628      	mov	r0, r5
 8007364:	f00b fd5b 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007368:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 800736c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800745c <_ZN15customGraphBaseC1Ev+0xc30>
 8007370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007374:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007378:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800737c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007380:	f2c1 81ae 	blt.w	80086e0 <_ZN15customGraphBaseC1Ev+0x1eb4>
            return (int)(fs + 0.5f);
 8007384:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007388:	ee77 7a87 	vadd.f32	s15, s15, s14
 800738c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007390:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007394:	4628      	mov	r0, r5
 8007396:	f00b fd42 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800739a:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 800739e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8007460 <_ZN15customGraphBaseC1Ev+0xc34>
 80073a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073a6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80073aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80073ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073b2:	f2c1 81aa 	blt.w	800870a <_ZN15customGraphBaseC1Ev+0x1ede>
            return (int)(fs + 0.5f);
 80073b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80073ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80073be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073c2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80073c6:	4628      	mov	r0, r5
 80073c8:	f00b fd29 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80073cc:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80073d0:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8007464 <_ZN15customGraphBaseC1Ev+0xc38>
 80073d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073d8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80073dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80073e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073e4:	f2c1 81a6 	blt.w	8008734 <_ZN15customGraphBaseC1Ev+0x1f08>
            return (int)(fs + 0.5f);
 80073e8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80073ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80073f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073f4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80073f8:	4628      	mov	r0, r5
 80073fa:	f00b fd10 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80073fe:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007402:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8007468 <_ZN15customGraphBaseC1Ev+0xc3c>
 8007406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800740a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800740e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007416:	f2c1 81a2 	blt.w	800875e <_ZN15customGraphBaseC1Ev+0x1f32>
 800741a:	e04d      	b.n	80074b8 <_ZN15customGraphBaseC1Ev+0xc8c>
 800741c:	424cd21d 	.word	0x424cd21d
 8007420:	421318bd 	.word	0x421318bd
 8007424:	41d758f2 	.word	0x41d758f2
 8007428:	41b85542 	.word	0x41b85542
 800742c:	41c8904d 	.word	0x41c8904d
 8007430:	41fc1b81 	.word	0x41fc1b81
 8007434:	421f766a 	.word	0x421f766a
 8007438:	423d0952 	.word	0x423d0952
 800743c:	424cca6a 	.word	0x424cca6a
 8007440:	4248c84b 	.word	0x4248c84b
 8007444:	4230a5f0 	.word	0x4230a5f0
 8007448:	4209bf36 	.word	0x4209bf36
 800744c:	41bbbd41 	.word	0x41bbbd41
 8007450:	41635399 	.word	0x41635399
 8007454:	411625ee 	.word	0x411625ee
 8007458:	412cf180 	.word	0x412cf180
 800745c:	41974bd1 	.word	0x41974bd1
 8007460:	42026b29 	.word	0x42026b29
 8007464:	42460a65 	.word	0x42460a65
 8007468:	42850387 	.word	0x42850387
 800746c:	42a0e774 	.word	0x42a0e774
 8007470:	42b1d22e 	.word	0x42b1d22e
 8007474:	42b56c82 	.word	0x42b56c82
 8007478:	42ac6728 	.word	0x42ac6728
 800747c:	429a3f75 	.word	0x429a3f75
 8007480:	4284578d 	.word	0x4284578d
 8007484:	426136d1 	.word	0x426136d1
 8007488:	42480fdf 	.word	0x42480fdf
 800748c:	4242e199 	.word	0x4242e199
 8007490:	4251a38e 	.word	0x4251a38e
 8007494:	426eacea 	.word	0x426eacea
 8007498:	42881609 	.word	0x42881609
 800749c:	429554d9 	.word	0x429554d9
 80074a0:	4299fc60 	.word	0x4299fc60
 80074a4:	4292ecf8 	.word	0x4292ecf8
 80074a8:	427fabc7 	.word	0x427fabc7
 80074ac:	4246bbd2 	.word	0x4246bbd2
 80074b0:	420523a3 	.word	0x420523a3
 80074b4:	418eedcb 	.word	0x418eedcb
            return (int)(fs + 0.5f);
 80074b8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80074bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80074c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074c4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80074c8:	4628      	mov	r0, r5
 80074ca:	f00b fca8 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80074ce:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80074d2:	ed1f 7a1a 	vldr	s14, [pc, #-104]	; 800746c <_ZN15customGraphBaseC1Ev+0xc40>
 80074d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074da:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80074de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80074e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074e6:	f2c1 814f 	blt.w	8008788 <_ZN15customGraphBaseC1Ev+0x1f5c>
            return (int)(fs + 0.5f);
 80074ea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80074ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80074f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074f6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80074fa:	4628      	mov	r0, r5
 80074fc:	f00b fc8f 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007500:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007504:	ed1f 7a26 	vldr	s14, [pc, #-152]	; 8007470 <_ZN15customGraphBaseC1Ev+0xc44>
 8007508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800750c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007510:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007518:	f2c1 814b 	blt.w	80087b2 <_ZN15customGraphBaseC1Ev+0x1f86>
            return (int)(fs + 0.5f);
 800751c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007520:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007524:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007528:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800752c:	4628      	mov	r0, r5
 800752e:	f00b fc76 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007532:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007536:	ed1f 7a31 	vldr	s14, [pc, #-196]	; 8007474 <_ZN15customGraphBaseC1Ev+0xc48>
 800753a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800753e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007542:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800754a:	f2c1 8147 	blt.w	80087dc <_ZN15customGraphBaseC1Ev+0x1fb0>
            return (int)(fs + 0.5f);
 800754e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007552:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007556:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800755a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800755e:	4628      	mov	r0, r5
 8007560:	f00b fc5d 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007564:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007568:	ed1f 7a3d 	vldr	s14, [pc, #-244]	; 8007478 <_ZN15customGraphBaseC1Ev+0xc4c>
 800756c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007570:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007574:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800757c:	f2c1 8143 	blt.w	8008806 <_ZN15customGraphBaseC1Ev+0x1fda>
            return (int)(fs + 0.5f);
 8007580:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007584:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007588:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800758c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007590:	4628      	mov	r0, r5
 8007592:	f00b fc44 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007596:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 800759a:	ed1f 7a48 	vldr	s14, [pc, #-288]	; 800747c <_ZN15customGraphBaseC1Ev+0xc50>
 800759e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075a2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80075a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80075aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ae:	f2c1 813f 	blt.w	8008830 <_ZN15customGraphBaseC1Ev+0x2004>
            return (int)(fs + 0.5f);
 80075b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80075b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80075ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075be:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80075c2:	4628      	mov	r0, r5
 80075c4:	f00b fc2b 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80075c8:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80075cc:	ed1f 7a54 	vldr	s14, [pc, #-336]	; 8007480 <_ZN15customGraphBaseC1Ev+0xc54>
 80075d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075d4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80075d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80075dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075e0:	f2c1 813b 	blt.w	800885a <_ZN15customGraphBaseC1Ev+0x202e>
            return (int)(fs + 0.5f);
 80075e4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80075e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80075ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075f0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80075f4:	4628      	mov	r0, r5
 80075f6:	f00b fc12 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80075fa:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80075fe:	ed1f 7a5f 	vldr	s14, [pc, #-380]	; 8007484 <_ZN15customGraphBaseC1Ev+0xc58>
 8007602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007606:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800760a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800760e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007612:	f2c1 8137 	blt.w	8008884 <_ZN15customGraphBaseC1Ev+0x2058>
            return (int)(fs + 0.5f);
 8007616:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800761a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800761e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007622:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007626:	4628      	mov	r0, r5
 8007628:	f00b fbf9 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800762c:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007630:	ed1f 7a6b 	vldr	s14, [pc, #-428]	; 8007488 <_ZN15customGraphBaseC1Ev+0xc5c>
 8007634:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007638:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800763c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007644:	f2c1 8133 	blt.w	80088ae <_ZN15customGraphBaseC1Ev+0x2082>
            return (int)(fs + 0.5f);
 8007648:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800764c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007650:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007654:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007658:	4628      	mov	r0, r5
 800765a:	f00b fbe0 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800765e:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007662:	ed1f 7a76 	vldr	s14, [pc, #-472]	; 800748c <_ZN15customGraphBaseC1Ev+0xc60>
 8007666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800766a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800766e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007676:	f2c1 812f 	blt.w	80088d8 <_ZN15customGraphBaseC1Ev+0x20ac>
            return (int)(fs + 0.5f);
 800767a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800767e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007682:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007686:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800768a:	4628      	mov	r0, r5
 800768c:	f00b fbc7 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007690:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007694:	ed1f 7a82 	vldr	s14, [pc, #-520]	; 8007490 <_ZN15customGraphBaseC1Ev+0xc64>
 8007698:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800769c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80076a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80076a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076a8:	f2c1 812b 	blt.w	8008902 <_ZN15customGraphBaseC1Ev+0x20d6>
            return (int)(fs + 0.5f);
 80076ac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80076b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80076b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076b8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80076bc:	4628      	mov	r0, r5
 80076be:	f00b fbae 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80076c2:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80076c6:	ed1f 7a8d 	vldr	s14, [pc, #-564]	; 8007494 <_ZN15customGraphBaseC1Ev+0xc68>
 80076ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076ce:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80076d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80076d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076da:	f2c1 8127 	blt.w	800892c <_ZN15customGraphBaseC1Ev+0x2100>
            return (int)(fs + 0.5f);
 80076de:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80076e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80076e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076ea:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80076ee:	4628      	mov	r0, r5
 80076f0:	f00b fb95 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80076f4:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80076f8:	ed1f 7a99 	vldr	s14, [pc, #-612]	; 8007498 <_ZN15customGraphBaseC1Ev+0xc6c>
 80076fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007700:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007704:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800770c:	f2c1 8123 	blt.w	8008956 <_ZN15customGraphBaseC1Ev+0x212a>
            return (int)(fs + 0.5f);
 8007710:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007714:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007718:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800771c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007720:	4628      	mov	r0, r5
 8007722:	f00b fb7c 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007726:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 800772a:	ed1f 7aa4 	vldr	s14, [pc, #-656]	; 800749c <_ZN15customGraphBaseC1Ev+0xc70>
 800772e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007732:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007736:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800773a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800773e:	f2c1 811f 	blt.w	8008980 <_ZN15customGraphBaseC1Ev+0x2154>
            return (int)(fs + 0.5f);
 8007742:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007746:	ee77 7a87 	vadd.f32	s15, s15, s14
 800774a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800774e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007752:	4628      	mov	r0, r5
 8007754:	f00b fb63 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007758:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 800775c:	ed1f 7ab0 	vldr	s14, [pc, #-704]	; 80074a0 <_ZN15customGraphBaseC1Ev+0xc74>
 8007760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007764:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007768:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800776c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007770:	f2c1 811b 	blt.w	80089aa <_ZN15customGraphBaseC1Ev+0x217e>
            return (int)(fs + 0.5f);
 8007774:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007778:	ee77 7a87 	vadd.f32	s15, s15, s14
 800777c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007780:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007784:	4628      	mov	r0, r5
 8007786:	f00b fb4a 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800778a:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 800778e:	ed1f 7abb 	vldr	s14, [pc, #-748]	; 80074a4 <_ZN15customGraphBaseC1Ev+0xc78>
 8007792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007796:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800779a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800779e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077a2:	f2c1 8117 	blt.w	80089d4 <_ZN15customGraphBaseC1Ev+0x21a8>
            return (int)(fs + 0.5f);
 80077a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80077aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80077ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077b2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80077b6:	4628      	mov	r0, r5
 80077b8:	f00b fb31 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80077bc:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80077c0:	ed1f 7ac7 	vldr	s14, [pc, #-796]	; 80074a8 <_ZN15customGraphBaseC1Ev+0xc7c>
 80077c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077c8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80077cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80077d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077d4:	f2c1 8113 	blt.w	80089fe <_ZN15customGraphBaseC1Ev+0x21d2>
            return (int)(fs + 0.5f);
 80077d8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80077dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80077e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077e4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80077e8:	4628      	mov	r0, r5
 80077ea:	f00b fb18 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80077ee:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80077f2:	ed1f 7ad2 	vldr	s14, [pc, #-840]	; 80074ac <_ZN15customGraphBaseC1Ev+0xc80>
 80077f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077fa:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80077fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007806:	f2c1 810f 	blt.w	8008a28 <_ZN15customGraphBaseC1Ev+0x21fc>
            return (int)(fs + 0.5f);
 800780a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800780e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007812:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007816:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800781a:	4628      	mov	r0, r5
 800781c:	f00b faff 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007820:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007824:	ed1f 7ade 	vldr	s14, [pc, #-888]	; 80074b0 <_ZN15customGraphBaseC1Ev+0xc84>
 8007828:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800782c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007830:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007838:	f2c1 810b 	blt.w	8008a52 <_ZN15customGraphBaseC1Ev+0x2226>
            return (int)(fs + 0.5f);
 800783c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007840:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007844:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007848:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800784c:	4628      	mov	r0, r5
 800784e:	f00b fae6 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007852:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007856:	ed1f 7ae9 	vldr	s14, [pc, #-932]	; 80074b4 <_ZN15customGraphBaseC1Ev+0xc88>
 800785a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800785e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007862:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800786a:	f2c1 8107 	blt.w	8008a7c <_ZN15customGraphBaseC1Ev+0x2250>
            return (int)(fs + 0.5f);
 800786e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007872:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007876:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800787a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800787e:	4628      	mov	r0, r5
 8007880:	f00b facd 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007884:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007888:	ed9f 7af3 	vldr	s14, [pc, #972]	; 8007c58 <_ZN15customGraphBaseC1Ev+0x142c>
 800788c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007890:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007894:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800789c:	f2c1 8103 	blt.w	8008aa6 <_ZN15customGraphBaseC1Ev+0x227a>
            return (int)(fs + 0.5f);
 80078a0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80078a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80078a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078ac:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80078b0:	4628      	mov	r0, r5
 80078b2:	f00b fab4 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80078b6:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80078ba:	ed9f 7ae8 	vldr	s14, [pc, #928]	; 8007c5c <_ZN15customGraphBaseC1Ev+0x1430>
 80078be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078c2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80078c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80078ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078ce:	f2c1 80ff 	blt.w	8008ad0 <_ZN15customGraphBaseC1Ev+0x22a4>
            return (int)(fs + 0.5f);
 80078d2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80078d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80078da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078de:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80078e2:	4628      	mov	r0, r5
 80078e4:	f00b fa9b 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80078e8:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80078ec:	ed9f 7adc 	vldr	s14, [pc, #880]	; 8007c60 <_ZN15customGraphBaseC1Ev+0x1434>
 80078f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078f4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80078f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80078fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007900:	f2c1 80fb 	blt.w	8008afa <_ZN15customGraphBaseC1Ev+0x22ce>
            return (int)(fs + 0.5f);
 8007904:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007908:	ee77 7a87 	vadd.f32	s15, s15, s14
 800790c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007910:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007914:	4628      	mov	r0, r5
 8007916:	f00b fa82 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800791a:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 800791e:	ed9f 7ad1 	vldr	s14, [pc, #836]	; 8007c64 <_ZN15customGraphBaseC1Ev+0x1438>
 8007922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007926:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800792a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800792e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007932:	f2c1 80f7 	blt.w	8008b24 <_ZN15customGraphBaseC1Ev+0x22f8>
            return (int)(fs + 0.5f);
 8007936:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800793a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800793e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007942:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007946:	4628      	mov	r0, r5
 8007948:	f00b fa69 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800794c:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007950:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 8007c68 <_ZN15customGraphBaseC1Ev+0x143c>
 8007954:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007958:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800795c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007964:	f2c1 80f3 	blt.w	8008b4e <_ZN15customGraphBaseC1Ev+0x2322>
            return (int)(fs + 0.5f);
 8007968:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800796c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007970:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007974:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007978:	4628      	mov	r0, r5
 800797a:	f00b fa50 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800797e:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007982:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8007c6c <_ZN15customGraphBaseC1Ev+0x1440>
 8007986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800798a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800798e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007996:	f2c1 80ef 	blt.w	8008b78 <_ZN15customGraphBaseC1Ev+0x234c>
            return (int)(fs + 0.5f);
 800799a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800799e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80079a6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80079aa:	4628      	mov	r0, r5
 80079ac:	f00b fa37 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80079b0:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80079b4:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8007c70 <_ZN15customGraphBaseC1Ev+0x1444>
 80079b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80079bc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80079c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80079c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079c8:	f2c1 80eb 	blt.w	8008ba2 <_ZN15customGraphBaseC1Ev+0x2376>
            return (int)(fs + 0.5f);
 80079cc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80079d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80079d8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80079dc:	4628      	mov	r0, r5
 80079de:	f00b fa1e 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80079e2:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80079e6:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8007c74 <_ZN15customGraphBaseC1Ev+0x1448>
 80079ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80079ee:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80079f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80079f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079fa:	f2c1 80e7 	blt.w	8008bcc <_ZN15customGraphBaseC1Ev+0x23a0>
            return (int)(fs + 0.5f);
 80079fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007a02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a0a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007a0e:	4628      	mov	r0, r5
 8007a10:	f00b fa05 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007a14:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007a18:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8007c78 <_ZN15customGraphBaseC1Ev+0x144c>
 8007a1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a20:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007a24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a2c:	f2c1 80e3 	blt.w	8008bf6 <_ZN15customGraphBaseC1Ev+0x23ca>
            return (int)(fs + 0.5f);
 8007a30:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007a34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a3c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007a40:	4628      	mov	r0, r5
 8007a42:	f00b f9ec 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007a46:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007a4a:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8007c7c <_ZN15customGraphBaseC1Ev+0x1450>
 8007a4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a52:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007a56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a5e:	f2c1 80df 	blt.w	8008c20 <_ZN15customGraphBaseC1Ev+0x23f4>
            return (int)(fs + 0.5f);
 8007a62:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007a66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a6e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007a72:	4628      	mov	r0, r5
 8007a74:	f00b f9d3 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007a78:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007a7c:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8007c80 <_ZN15customGraphBaseC1Ev+0x1454>
 8007a80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a84:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007a88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a90:	f2c1 80db 	blt.w	8008c4a <_ZN15customGraphBaseC1Ev+0x241e>
            return (int)(fs + 0.5f);
 8007a94:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007a98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007aa0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007aa4:	4628      	mov	r0, r5
 8007aa6:	f00b f9ba 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007aaa:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007aae:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8007c84 <_ZN15customGraphBaseC1Ev+0x1458>
 8007ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ab6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007aba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ac2:	f2c1 80d7 	blt.w	8008c74 <_ZN15customGraphBaseC1Ev+0x2448>
            return (int)(fs + 0.5f);
 8007ac6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007aca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ace:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ad2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007ad6:	4628      	mov	r0, r5
 8007ad8:	f00b f9a1 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007adc:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007ae0:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8007c88 <_ZN15customGraphBaseC1Ev+0x145c>
 8007ae4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ae8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007aec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007af4:	f2c1 80d3 	blt.w	8008c9e <_ZN15customGraphBaseC1Ev+0x2472>
            return (int)(fs + 0.5f);
 8007af8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007afc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b04:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007b08:	4628      	mov	r0, r5
 8007b0a:	f00b f988 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007b0e:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007b12:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8007c8c <_ZN15customGraphBaseC1Ev+0x1460>
 8007b16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b1a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007b1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b26:	f2c1 80cf 	blt.w	8008cc8 <_ZN15customGraphBaseC1Ev+0x249c>
            return (int)(fs + 0.5f);
 8007b2a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007b2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b36:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007b3a:	4628      	mov	r0, r5
 8007b3c:	f00b f96f 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007b40:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007b44:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8007c90 <_ZN15customGraphBaseC1Ev+0x1464>
 8007b48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b4c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007b50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b58:	f2c1 80cb 	blt.w	8008cf2 <_ZN15customGraphBaseC1Ev+0x24c6>
            return (int)(fs + 0.5f);
 8007b5c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007b60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b68:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007b6c:	4628      	mov	r0, r5
 8007b6e:	f00b f956 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007b72:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007b76:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8007c94 <_ZN15customGraphBaseC1Ev+0x1468>
 8007b7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b7e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007b82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b8a:	f2c1 80c7 	blt.w	8008d1c <_ZN15customGraphBaseC1Ev+0x24f0>
            return (int)(fs + 0.5f);
 8007b8e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007b92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b9a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	f00b f93d 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007ba4:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007ba8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8007c98 <_ZN15customGraphBaseC1Ev+0x146c>
 8007bac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007bb0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007bb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bbc:	f2c1 80c3 	blt.w	8008d46 <_ZN15customGraphBaseC1Ev+0x251a>
            return (int)(fs + 0.5f);
 8007bc0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007bc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007bc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007bcc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	f00b f924 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007bd6:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007bda:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8007c9c <_ZN15customGraphBaseC1Ev+0x1470>
 8007bde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007be2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007be6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bee:	f2c1 80bf 	blt.w	8008d70 <_ZN15customGraphBaseC1Ev+0x2544>
            return (int)(fs + 0.5f);
 8007bf2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007bf6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007bfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007bfe:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007c02:	4628      	mov	r0, r5
 8007c04:	f00b f90b 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007c08:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007c0c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8007ca0 <_ZN15customGraphBaseC1Ev+0x1474>
 8007c10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c14:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007c18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c20:	f2c1 80bb 	blt.w	8008d9a <_ZN15customGraphBaseC1Ev+0x256e>
            return (int)(fs + 0.5f);
 8007c24:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007c28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007c2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c30:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007c34:	4628      	mov	r0, r5
 8007c36:	f00b f8f2 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007c3a:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007c3e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8007ca4 <_ZN15customGraphBaseC1Ev+0x1478>
 8007c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c46:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007c4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c52:	f2c1 80b7 	blt.w	8008dc4 <_ZN15customGraphBaseC1Ev+0x2598>
 8007c56:	e045      	b.n	8007ce4 <_ZN15customGraphBaseC1Ev+0x14b8>
 8007c58:	40ce952d 	.word	0x40ce952d
 8007c5c:	3fa092cd 	.word	0x3fa092cd
 8007c60:	4047b717 	.word	0x4047b717
 8007c64:	4136031d 	.word	0x4136031d
 8007c68:	41bfd830 	.word	0x41bfd830
 8007c6c:	421822de 	.word	0x421822de
 8007c70:	4249e849 	.word	0x4249e849
 8007c74:	426b4cc0 	.word	0x426b4cc0
 8007c78:	42770597 	.word	0x42770597
 8007c7c:	426d9b64 	.word	0x426d9b64
 8007c80:	425525bc 	.word	0x425525bc
 8007c84:	4237a6ca 	.word	0x4237a6ca
 8007c88:	42206ee4 	.word	0x42206ee4
 8007c8c:	42192db9 	.word	0x42192db9
 8007c90:	42276a58 	.word	0x42276a58
 8007c94:	424b026b 	.word	0x424b026b
 8007c98:	427e1072 	.word	0x427e1072
 8007c9c:	429b204b 	.word	0x429b204b
 8007ca0:	42b3a0e0 	.word	0x42b3a0e0
 8007ca4:	42c2dd76 	.word	0x42c2dd76
 8007ca8:	42c505e5 	.word	0x42c505e5
 8007cac:	42b9162d 	.word	0x42b9162d
 8007cb0:	42a11b20 	.word	0x42a11b20
 8007cb4:	4281bacc 	.word	0x4281bacc
 8007cb8:	42423b18 	.word	0x42423b18
 8007cbc:	420af763 	.word	0x420af763
 8007cc0:	41cea69b 	.word	0x41cea69b
 8007cc4:	41b7f3d6 	.word	0x41b7f3d6
 8007cc8:	41cf3adc 	.word	0x41cf3adc
 8007ccc:	42037286 	.word	0x42037286
 8007cd0:	42250275 	.word	0x42250275
 8007cd4:	4240e02d 	.word	0x4240e02d
 8007cd8:	424d953a 	.word	0x424d953a
 8007cdc:	42460dc6 	.word	0x42460dc6
 8007ce0:	422aeaf2 	.word	0x422aeaf2
            return (int)(fs + 0.5f);
 8007ce4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007ce8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007cec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007cf0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	f00b f892 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007cfa:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007cfe:	ed1f 7a16 	vldr	s14, [pc, #-88]	; 8007ca8 <_ZN15customGraphBaseC1Ev+0x147c>
 8007d02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d06:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007d0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d12:	f2c1 806c 	blt.w	8008dee <_ZN15customGraphBaseC1Ev+0x25c2>
            return (int)(fs + 0.5f);
 8007d16:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007d1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d22:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007d26:	4628      	mov	r0, r5
 8007d28:	f00b f879 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007d2c:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007d30:	ed1f 7a22 	vldr	s14, [pc, #-136]	; 8007cac <_ZN15customGraphBaseC1Ev+0x1480>
 8007d34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d38:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007d3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d44:	f2c1 8068 	blt.w	8008e18 <_ZN15customGraphBaseC1Ev+0x25ec>
            return (int)(fs + 0.5f);
 8007d48:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007d4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d54:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007d58:	4628      	mov	r0, r5
 8007d5a:	f00b f860 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007d5e:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007d62:	ed1f 7a2d 	vldr	s14, [pc, #-180]	; 8007cb0 <_ZN15customGraphBaseC1Ev+0x1484>
 8007d66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d6a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007d6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d76:	f2c1 8064 	blt.w	8008e42 <_ZN15customGraphBaseC1Ev+0x2616>
            return (int)(fs + 0.5f);
 8007d7a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007d7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d86:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	f00b f847 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007d90:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007d94:	ed1f 7a39 	vldr	s14, [pc, #-228]	; 8007cb4 <_ZN15customGraphBaseC1Ev+0x1488>
 8007d98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d9c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007da0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007da8:	f2c1 8060 	blt.w	8008e6c <_ZN15customGraphBaseC1Ev+0x2640>
            return (int)(fs + 0.5f);
 8007dac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007db0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007db4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007db8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	f00b f82e 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007dc2:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007dc6:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8007cb8 <_ZN15customGraphBaseC1Ev+0x148c>
 8007dca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007dce:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007dd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dda:	f2c1 805c 	blt.w	8008e96 <_ZN15customGraphBaseC1Ev+0x266a>
            return (int)(fs + 0.5f);
 8007dde:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007de2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007de6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007dea:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007dee:	4628      	mov	r0, r5
 8007df0:	f00b f815 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007df4:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007df8:	ed1f 7a50 	vldr	s14, [pc, #-320]	; 8007cbc <_ZN15customGraphBaseC1Ev+0x1490>
 8007dfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e00:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007e04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e0c:	f2c1 8058 	blt.w	8008ec0 <_ZN15customGraphBaseC1Ev+0x2694>
            return (int)(fs + 0.5f);
 8007e10:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007e14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007e18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e1c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007e20:	4628      	mov	r0, r5
 8007e22:	f00a fffc 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007e26:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007e2a:	ed1f 7a5b 	vldr	s14, [pc, #-364]	; 8007cc0 <_ZN15customGraphBaseC1Ev+0x1494>
 8007e2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e32:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007e36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e3e:	f2c1 8054 	blt.w	8008eea <_ZN15customGraphBaseC1Ev+0x26be>
            return (int)(fs + 0.5f);
 8007e42:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007e46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007e4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e4e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007e52:	4628      	mov	r0, r5
 8007e54:	f00a ffe3 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007e58:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007e5c:	ed1f 7a67 	vldr	s14, [pc, #-412]	; 8007cc4 <_ZN15customGraphBaseC1Ev+0x1498>
 8007e60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e64:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007e68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e70:	f2c1 8050 	blt.w	8008f14 <_ZN15customGraphBaseC1Ev+0x26e8>
            return (int)(fs + 0.5f);
 8007e74:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007e78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007e7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e80:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007e84:	4628      	mov	r0, r5
 8007e86:	f00a ffca 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007e8a:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007e8e:	ed1f 7a72 	vldr	s14, [pc, #-456]	; 8007cc8 <_ZN15customGraphBaseC1Ev+0x149c>
 8007e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e96:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007e9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ea2:	f2c1 804c 	blt.w	8008f3e <_ZN15customGraphBaseC1Ev+0x2712>
            return (int)(fs + 0.5f);
 8007ea6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007eaa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007eae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007eb2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	f00a ffb1 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007ebc:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007ec0:	ed1f 7a7e 	vldr	s14, [pc, #-504]	; 8007ccc <_ZN15customGraphBaseC1Ev+0x14a0>
 8007ec4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ec8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007ecc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ed4:	f2c1 8048 	blt.w	8008f68 <_ZN15customGraphBaseC1Ev+0x273c>
            return (int)(fs + 0.5f);
 8007ed8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007edc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ee0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ee4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007ee8:	4628      	mov	r0, r5
 8007eea:	f00a ff98 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007eee:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007ef2:	ed1f 7a89 	vldr	s14, [pc, #-548]	; 8007cd0 <_ZN15customGraphBaseC1Ev+0x14a4>
 8007ef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007efa:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007efe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f06:	f2c1 8044 	blt.w	8008f92 <_ZN15customGraphBaseC1Ev+0x2766>
            return (int)(fs + 0.5f);
 8007f0a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007f0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f16:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	f00a ff7f 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007f20:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007f24:	ed1f 7a95 	vldr	s14, [pc, #-596]	; 8007cd4 <_ZN15customGraphBaseC1Ev+0x14a8>
 8007f28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f2c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007f30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f38:	f2c1 8040 	blt.w	8008fbc <_ZN15customGraphBaseC1Ev+0x2790>
            return (int)(fs + 0.5f);
 8007f3c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007f40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f48:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007f4c:	4628      	mov	r0, r5
 8007f4e:	f00a ff66 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007f52:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007f56:	ed1f 7aa0 	vldr	s14, [pc, #-640]	; 8007cd8 <_ZN15customGraphBaseC1Ev+0x14ac>
 8007f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f5e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007f62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f6a:	f2c1 803c 	blt.w	8008fe6 <_ZN15customGraphBaseC1Ev+0x27ba>
            return (int)(fs + 0.5f);
 8007f6e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007f72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f7a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007f7e:	4628      	mov	r0, r5
 8007f80:	f00a ff4d 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007f84:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007f88:	ed1f 7aac 	vldr	s14, [pc, #-688]	; 8007cdc <_ZN15customGraphBaseC1Ev+0x14b0>
 8007f8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f90:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007f94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f9c:	f2c1 8038 	blt.w	8009010 <_ZN15customGraphBaseC1Ev+0x27e4>
            return (int)(fs + 0.5f);
 8007fa0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007fa4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007fa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007fac:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	f00a ff34 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007fb6:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007fba:	ed1f 7ab7 	vldr	s14, [pc, #-732]	; 8007ce0 <_ZN15customGraphBaseC1Ev+0x14b4>
 8007fbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007fc2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007fc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fce:	f2c1 8034 	blt.w	800903a <_ZN15customGraphBaseC1Ev+0x280e>
            return (int)(fs + 0.5f);
 8007fd2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007fd6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007fda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007fde:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	f00a ff1b 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
    add(dynamicGraph1);
 8007fe8:	4620      	mov	r0, r4
 8007fea:	4629      	mov	r1, r5
 8007fec:	f009 f82e 	bl	801104c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	b005      	add	sp, #20
 8007ff4:	ecbd 8b04 	vpop	{d8-d9}
 8007ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8007ffc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008000:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008004:	ee17 3a10 	vmov	r3, s14
 8008008:	1e59      	subs	r1, r3, #1
 800800a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800800e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008016:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800801a:	ee17 3a90 	vmov	r3, s15
 800801e:	440b      	add	r3, r1
 8008020:	4619      	mov	r1, r3
 8008022:	f7fe bd50 	b.w	8006ac6 <_ZN15customGraphBaseC1Ev+0x29a>
 8008026:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800802a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800802e:	ee17 3a10 	vmov	r3, s14
 8008032:	1e59      	subs	r1, r3, #1
 8008034:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008038:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800803c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008040:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008044:	ee17 3a90 	vmov	r3, s15
 8008048:	440b      	add	r3, r1
 800804a:	4619      	mov	r1, r3
 800804c:	f7fe bd54 	b.w	8006af8 <_ZN15customGraphBaseC1Ev+0x2cc>
 8008050:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008054:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008058:	ee17 3a10 	vmov	r3, s14
 800805c:	1e59      	subs	r1, r3, #1
 800805e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008062:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800806a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800806e:	ee17 3a90 	vmov	r3, s15
 8008072:	440b      	add	r3, r1
 8008074:	4619      	mov	r1, r3
 8008076:	f7fe bd58 	b.w	8006b2a <_ZN15customGraphBaseC1Ev+0x2fe>
 800807a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800807e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008082:	ee17 3a10 	vmov	r3, s14
 8008086:	1e59      	subs	r1, r3, #1
 8008088:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800808c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008090:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008094:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008098:	ee17 3a90 	vmov	r3, s15
 800809c:	440b      	add	r3, r1
 800809e:	4619      	mov	r1, r3
 80080a0:	f7fe bd5c 	b.w	8006b5c <_ZN15customGraphBaseC1Ev+0x330>
 80080a4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80080a8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80080ac:	ee17 3a10 	vmov	r3, s14
 80080b0:	1e59      	subs	r1, r3, #1
 80080b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80080b6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80080ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80080c2:	ee17 3a90 	vmov	r3, s15
 80080c6:	440b      	add	r3, r1
 80080c8:	4619      	mov	r1, r3
 80080ca:	f7fe bd60 	b.w	8006b8e <_ZN15customGraphBaseC1Ev+0x362>
 80080ce:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80080d2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80080d6:	ee17 3a10 	vmov	r3, s14
 80080da:	1e59      	subs	r1, r3, #1
 80080dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80080e0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80080e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80080ec:	ee17 3a90 	vmov	r3, s15
 80080f0:	440b      	add	r3, r1
 80080f2:	4619      	mov	r1, r3
 80080f4:	f7fe bd64 	b.w	8006bc0 <_ZN15customGraphBaseC1Ev+0x394>
 80080f8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80080fc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008100:	ee17 3a10 	vmov	r3, s14
 8008104:	1e59      	subs	r1, r3, #1
 8008106:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800810a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800810e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008112:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008116:	ee17 3a90 	vmov	r3, s15
 800811a:	440b      	add	r3, r1
 800811c:	4619      	mov	r1, r3
 800811e:	f7fe bdb5 	b.w	8006c8c <_ZN15customGraphBaseC1Ev+0x460>
 8008122:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008126:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800812a:	ee17 3a10 	vmov	r3, s14
 800812e:	1e59      	subs	r1, r3, #1
 8008130:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008134:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008138:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800813c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008140:	ee17 3a90 	vmov	r3, s15
 8008144:	440b      	add	r3, r1
 8008146:	4619      	mov	r1, r3
 8008148:	f7fe bdb9 	b.w	8006cbe <_ZN15customGraphBaseC1Ev+0x492>
 800814c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008150:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008154:	ee17 3a10 	vmov	r3, s14
 8008158:	1e59      	subs	r1, r3, #1
 800815a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800815e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008166:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800816a:	ee17 3a90 	vmov	r3, s15
 800816e:	440b      	add	r3, r1
 8008170:	4619      	mov	r1, r3
 8008172:	f7fe bdbd 	b.w	8006cf0 <_ZN15customGraphBaseC1Ev+0x4c4>
 8008176:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800817a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800817e:	ee17 3a10 	vmov	r3, s14
 8008182:	1e59      	subs	r1, r3, #1
 8008184:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008188:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800818c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008190:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008194:	ee17 3a90 	vmov	r3, s15
 8008198:	440b      	add	r3, r1
 800819a:	4619      	mov	r1, r3
 800819c:	f7fe bdc1 	b.w	8006d22 <_ZN15customGraphBaseC1Ev+0x4f6>
 80081a0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80081a4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80081a8:	ee17 3a10 	vmov	r3, s14
 80081ac:	1e59      	subs	r1, r3, #1
 80081ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80081b2:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80081b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80081be:	ee17 3a90 	vmov	r3, s15
 80081c2:	440b      	add	r3, r1
 80081c4:	4619      	mov	r1, r3
 80081c6:	f7fe bdc5 	b.w	8006d54 <_ZN15customGraphBaseC1Ev+0x528>
 80081ca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80081ce:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80081d2:	ee17 3a10 	vmov	r3, s14
 80081d6:	1e59      	subs	r1, r3, #1
 80081d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80081dc:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80081e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80081e8:	ee17 3a90 	vmov	r3, s15
 80081ec:	440b      	add	r3, r1
 80081ee:	4619      	mov	r1, r3
 80081f0:	f7fe bdc9 	b.w	8006d86 <_ZN15customGraphBaseC1Ev+0x55a>
 80081f4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80081f8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80081fc:	ee17 3a10 	vmov	r3, s14
 8008200:	1e59      	subs	r1, r3, #1
 8008202:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008206:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800820a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800820e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008212:	ee17 3a90 	vmov	r3, s15
 8008216:	440b      	add	r3, r1
 8008218:	4619      	mov	r1, r3
 800821a:	f7fe bdcd 	b.w	8006db8 <_ZN15customGraphBaseC1Ev+0x58c>
 800821e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008222:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008226:	ee17 3a10 	vmov	r3, s14
 800822a:	1e59      	subs	r1, r3, #1
 800822c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008230:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008234:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008238:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800823c:	ee17 3a90 	vmov	r3, s15
 8008240:	440b      	add	r3, r1
 8008242:	4619      	mov	r1, r3
 8008244:	f7fe bdd1 	b.w	8006dea <_ZN15customGraphBaseC1Ev+0x5be>
 8008248:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800824c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008250:	ee17 3a10 	vmov	r3, s14
 8008254:	1e59      	subs	r1, r3, #1
 8008256:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800825a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800825e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008262:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008266:	ee17 3a90 	vmov	r3, s15
 800826a:	440b      	add	r3, r1
 800826c:	4619      	mov	r1, r3
 800826e:	f7fe bdd5 	b.w	8006e1c <_ZN15customGraphBaseC1Ev+0x5f0>
 8008272:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008276:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800827a:	ee17 3a10 	vmov	r3, s14
 800827e:	1e59      	subs	r1, r3, #1
 8008280:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008284:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008288:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800828c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008290:	ee17 3a90 	vmov	r3, s15
 8008294:	440b      	add	r3, r1
 8008296:	4619      	mov	r1, r3
 8008298:	f7fe bdd9 	b.w	8006e4e <_ZN15customGraphBaseC1Ev+0x622>
 800829c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80082a0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80082a4:	ee17 3a10 	vmov	r3, s14
 80082a8:	1e59      	subs	r1, r3, #1
 80082aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80082ae:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80082b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80082ba:	ee17 3a90 	vmov	r3, s15
 80082be:	440b      	add	r3, r1
 80082c0:	4619      	mov	r1, r3
 80082c2:	f7fe bddd 	b.w	8006e80 <_ZN15customGraphBaseC1Ev+0x654>
 80082c6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80082ca:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80082ce:	ee17 3a10 	vmov	r3, s14
 80082d2:	1e59      	subs	r1, r3, #1
 80082d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80082d8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80082dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80082e4:	ee17 3a90 	vmov	r3, s15
 80082e8:	440b      	add	r3, r1
 80082ea:	4619      	mov	r1, r3
 80082ec:	f7fe bde1 	b.w	8006eb2 <_ZN15customGraphBaseC1Ev+0x686>
 80082f0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80082f4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80082f8:	ee17 3a10 	vmov	r3, s14
 80082fc:	1e59      	subs	r1, r3, #1
 80082fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008302:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800830a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800830e:	ee17 3a90 	vmov	r3, s15
 8008312:	440b      	add	r3, r1
 8008314:	4619      	mov	r1, r3
 8008316:	f7fe bde5 	b.w	8006ee4 <_ZN15customGraphBaseC1Ev+0x6b8>
 800831a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800831e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008322:	ee17 3a10 	vmov	r3, s14
 8008326:	1e59      	subs	r1, r3, #1
 8008328:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800832c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008330:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008334:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008338:	ee17 3a90 	vmov	r3, s15
 800833c:	440b      	add	r3, r1
 800833e:	4619      	mov	r1, r3
 8008340:	f7fe bde9 	b.w	8006f16 <_ZN15customGraphBaseC1Ev+0x6ea>
 8008344:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008348:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800834c:	ee17 3a10 	vmov	r3, s14
 8008350:	1e59      	subs	r1, r3, #1
 8008352:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008356:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800835a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800835e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008362:	ee17 3a90 	vmov	r3, s15
 8008366:	440b      	add	r3, r1
 8008368:	4619      	mov	r1, r3
 800836a:	f7fe bded 	b.w	8006f48 <_ZN15customGraphBaseC1Ev+0x71c>
 800836e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008372:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008376:	ee17 3a10 	vmov	r3, s14
 800837a:	1e59      	subs	r1, r3, #1
 800837c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008380:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008384:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008388:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800838c:	ee17 3a90 	vmov	r3, s15
 8008390:	440b      	add	r3, r1
 8008392:	4619      	mov	r1, r3
 8008394:	f7fe bdf1 	b.w	8006f7a <_ZN15customGraphBaseC1Ev+0x74e>
 8008398:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800839c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80083a0:	ee17 3a10 	vmov	r3, s14
 80083a4:	1e59      	subs	r1, r3, #1
 80083a6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80083aa:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80083ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083b6:	ee17 3a90 	vmov	r3, s15
 80083ba:	440b      	add	r3, r1
 80083bc:	4619      	mov	r1, r3
 80083be:	f7fe bdf5 	b.w	8006fac <_ZN15customGraphBaseC1Ev+0x780>
 80083c2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80083c6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80083ca:	ee17 3a10 	vmov	r3, s14
 80083ce:	1e59      	subs	r1, r3, #1
 80083d0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80083d4:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80083d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083e0:	ee17 3a90 	vmov	r3, s15
 80083e4:	440b      	add	r3, r1
 80083e6:	4619      	mov	r1, r3
 80083e8:	f7fe bdf9 	b.w	8006fde <_ZN15customGraphBaseC1Ev+0x7b2>
 80083ec:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80083f0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80083f4:	ee17 3a10 	vmov	r3, s14
 80083f8:	1e59      	subs	r1, r3, #1
 80083fa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80083fe:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008406:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800840a:	ee17 3a90 	vmov	r3, s15
 800840e:	440b      	add	r3, r1
 8008410:	4619      	mov	r1, r3
 8008412:	f7fe bdfd 	b.w	8007010 <_ZN15customGraphBaseC1Ev+0x7e4>
 8008416:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800841a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800841e:	ee17 3a10 	vmov	r3, s14
 8008422:	1e59      	subs	r1, r3, #1
 8008424:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008428:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800842c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008430:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008434:	ee17 3a90 	vmov	r3, s15
 8008438:	440b      	add	r3, r1
 800843a:	4619      	mov	r1, r3
 800843c:	f7fe be01 	b.w	8007042 <_ZN15customGraphBaseC1Ev+0x816>
 8008440:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008444:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008448:	ee17 3a10 	vmov	r3, s14
 800844c:	1e59      	subs	r1, r3, #1
 800844e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008452:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800845a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800845e:	ee17 3a90 	vmov	r3, s15
 8008462:	440b      	add	r3, r1
 8008464:	4619      	mov	r1, r3
 8008466:	f7fe be05 	b.w	8007074 <_ZN15customGraphBaseC1Ev+0x848>
 800846a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800846e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008472:	ee17 3a10 	vmov	r3, s14
 8008476:	1e59      	subs	r1, r3, #1
 8008478:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800847c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008480:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008484:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008488:	ee17 3a90 	vmov	r3, s15
 800848c:	440b      	add	r3, r1
 800848e:	4619      	mov	r1, r3
 8008490:	f7fe be09 	b.w	80070a6 <_ZN15customGraphBaseC1Ev+0x87a>
 8008494:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008498:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800849c:	ee17 3a10 	vmov	r3, s14
 80084a0:	1e59      	subs	r1, r3, #1
 80084a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80084a6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80084aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084b2:	ee17 3a90 	vmov	r3, s15
 80084b6:	440b      	add	r3, r1
 80084b8:	4619      	mov	r1, r3
 80084ba:	f7fe be0d 	b.w	80070d8 <_ZN15customGraphBaseC1Ev+0x8ac>
 80084be:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80084c2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80084c6:	ee17 3a10 	vmov	r3, s14
 80084ca:	1e59      	subs	r1, r3, #1
 80084cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80084d0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80084d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084dc:	ee17 3a90 	vmov	r3, s15
 80084e0:	440b      	add	r3, r1
 80084e2:	4619      	mov	r1, r3
 80084e4:	f7fe be11 	b.w	800710a <_ZN15customGraphBaseC1Ev+0x8de>
 80084e8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80084ec:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80084f0:	ee17 3a10 	vmov	r3, s14
 80084f4:	1e59      	subs	r1, r3, #1
 80084f6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80084fa:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80084fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008502:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008506:	ee17 3a90 	vmov	r3, s15
 800850a:	440b      	add	r3, r1
 800850c:	4619      	mov	r1, r3
 800850e:	f7fe be15 	b.w	800713c <_ZN15customGraphBaseC1Ev+0x910>
 8008512:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008516:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800851a:	ee17 3a10 	vmov	r3, s14
 800851e:	1e59      	subs	r1, r3, #1
 8008520:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008524:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008528:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800852c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008530:	ee17 3a90 	vmov	r3, s15
 8008534:	440b      	add	r3, r1
 8008536:	4619      	mov	r1, r3
 8008538:	f7fe be19 	b.w	800716e <_ZN15customGraphBaseC1Ev+0x942>
 800853c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008540:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008544:	ee17 3a10 	vmov	r3, s14
 8008548:	1e59      	subs	r1, r3, #1
 800854a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800854e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008556:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800855a:	ee17 3a90 	vmov	r3, s15
 800855e:	440b      	add	r3, r1
 8008560:	4619      	mov	r1, r3
 8008562:	f7fe be1d 	b.w	80071a0 <_ZN15customGraphBaseC1Ev+0x974>
 8008566:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800856a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800856e:	ee17 3a10 	vmov	r3, s14
 8008572:	1e59      	subs	r1, r3, #1
 8008574:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008578:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800857c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008580:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008584:	ee17 3a90 	vmov	r3, s15
 8008588:	440b      	add	r3, r1
 800858a:	4619      	mov	r1, r3
 800858c:	f7fe be21 	b.w	80071d2 <_ZN15customGraphBaseC1Ev+0x9a6>
 8008590:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008594:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008598:	ee17 3a10 	vmov	r3, s14
 800859c:	1e59      	subs	r1, r3, #1
 800859e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80085a2:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80085a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085ae:	ee17 3a90 	vmov	r3, s15
 80085b2:	440b      	add	r3, r1
 80085b4:	4619      	mov	r1, r3
 80085b6:	f7fe be25 	b.w	8007204 <_ZN15customGraphBaseC1Ev+0x9d8>
 80085ba:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80085be:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80085c2:	ee17 3a10 	vmov	r3, s14
 80085c6:	1e59      	subs	r1, r3, #1
 80085c8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80085cc:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80085d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085d8:	ee17 3a90 	vmov	r3, s15
 80085dc:	440b      	add	r3, r1
 80085de:	4619      	mov	r1, r3
 80085e0:	f7fe be29 	b.w	8007236 <_ZN15customGraphBaseC1Ev+0xa0a>
 80085e4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80085e8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80085ec:	ee17 3a10 	vmov	r3, s14
 80085f0:	1e59      	subs	r1, r3, #1
 80085f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80085f6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80085fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008602:	ee17 3a90 	vmov	r3, s15
 8008606:	440b      	add	r3, r1
 8008608:	4619      	mov	r1, r3
 800860a:	f7fe be2d 	b.w	8007268 <_ZN15customGraphBaseC1Ev+0xa3c>
 800860e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008612:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008616:	ee17 3a10 	vmov	r3, s14
 800861a:	1e59      	subs	r1, r3, #1
 800861c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008620:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008624:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008628:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800862c:	ee17 3a90 	vmov	r3, s15
 8008630:	440b      	add	r3, r1
 8008632:	4619      	mov	r1, r3
 8008634:	f7fe be31 	b.w	800729a <_ZN15customGraphBaseC1Ev+0xa6e>
 8008638:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800863c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008640:	ee17 3a10 	vmov	r3, s14
 8008644:	1e59      	subs	r1, r3, #1
 8008646:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800864a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800864e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008652:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008656:	ee17 3a90 	vmov	r3, s15
 800865a:	440b      	add	r3, r1
 800865c:	4619      	mov	r1, r3
 800865e:	f7fe be35 	b.w	80072cc <_ZN15customGraphBaseC1Ev+0xaa0>
 8008662:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008666:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800866a:	ee17 3a10 	vmov	r3, s14
 800866e:	1e59      	subs	r1, r3, #1
 8008670:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008674:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008678:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800867c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008680:	ee17 3a90 	vmov	r3, s15
 8008684:	440b      	add	r3, r1
 8008686:	4619      	mov	r1, r3
 8008688:	f7fe be39 	b.w	80072fe <_ZN15customGraphBaseC1Ev+0xad2>
 800868c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008690:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008694:	ee17 3a10 	vmov	r3, s14
 8008698:	1e59      	subs	r1, r3, #1
 800869a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800869e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80086a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086aa:	ee17 3a90 	vmov	r3, s15
 80086ae:	440b      	add	r3, r1
 80086b0:	4619      	mov	r1, r3
 80086b2:	f7fe be3d 	b.w	8007330 <_ZN15customGraphBaseC1Ev+0xb04>
 80086b6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80086ba:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80086be:	ee17 3a10 	vmov	r3, s14
 80086c2:	1e59      	subs	r1, r3, #1
 80086c4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80086c8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80086cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086d4:	ee17 3a90 	vmov	r3, s15
 80086d8:	440b      	add	r3, r1
 80086da:	4619      	mov	r1, r3
 80086dc:	f7fe be41 	b.w	8007362 <_ZN15customGraphBaseC1Ev+0xb36>
 80086e0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80086e4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80086e8:	ee17 3a10 	vmov	r3, s14
 80086ec:	1e59      	subs	r1, r3, #1
 80086ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80086f2:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80086f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086fe:	ee17 3a90 	vmov	r3, s15
 8008702:	440b      	add	r3, r1
 8008704:	4619      	mov	r1, r3
 8008706:	f7fe be45 	b.w	8007394 <_ZN15customGraphBaseC1Ev+0xb68>
 800870a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800870e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008712:	ee17 3a10 	vmov	r3, s14
 8008716:	1e59      	subs	r1, r3, #1
 8008718:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800871c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008720:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008724:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008728:	ee17 3a90 	vmov	r3, s15
 800872c:	440b      	add	r3, r1
 800872e:	4619      	mov	r1, r3
 8008730:	f7fe be49 	b.w	80073c6 <_ZN15customGraphBaseC1Ev+0xb9a>
 8008734:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008738:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800873c:	ee17 3a10 	vmov	r3, s14
 8008740:	1e59      	subs	r1, r3, #1
 8008742:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008746:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800874a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800874e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008752:	ee17 3a90 	vmov	r3, s15
 8008756:	440b      	add	r3, r1
 8008758:	4619      	mov	r1, r3
 800875a:	f7fe be4d 	b.w	80073f8 <_ZN15customGraphBaseC1Ev+0xbcc>
 800875e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008762:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008766:	ee17 3a10 	vmov	r3, s14
 800876a:	1e59      	subs	r1, r3, #1
 800876c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008770:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008774:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008778:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800877c:	ee17 3a90 	vmov	r3, s15
 8008780:	440b      	add	r3, r1
 8008782:	4619      	mov	r1, r3
 8008784:	f7fe bea0 	b.w	80074c8 <_ZN15customGraphBaseC1Ev+0xc9c>
 8008788:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800878c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008790:	ee17 3a10 	vmov	r3, s14
 8008794:	1e59      	subs	r1, r3, #1
 8008796:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800879a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800879e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80087a6:	ee17 3a90 	vmov	r3, s15
 80087aa:	440b      	add	r3, r1
 80087ac:	4619      	mov	r1, r3
 80087ae:	f7fe bea4 	b.w	80074fa <_ZN15customGraphBaseC1Ev+0xcce>
 80087b2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80087b6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80087ba:	ee17 3a10 	vmov	r3, s14
 80087be:	1e59      	subs	r1, r3, #1
 80087c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80087c4:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80087c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80087d0:	ee17 3a90 	vmov	r3, s15
 80087d4:	440b      	add	r3, r1
 80087d6:	4619      	mov	r1, r3
 80087d8:	f7fe bea8 	b.w	800752c <_ZN15customGraphBaseC1Ev+0xd00>
 80087dc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80087e0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80087e4:	ee17 3a10 	vmov	r3, s14
 80087e8:	1e59      	subs	r1, r3, #1
 80087ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80087ee:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80087f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80087fa:	ee17 3a90 	vmov	r3, s15
 80087fe:	440b      	add	r3, r1
 8008800:	4619      	mov	r1, r3
 8008802:	f7fe beac 	b.w	800755e <_ZN15customGraphBaseC1Ev+0xd32>
 8008806:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800880a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800880e:	ee17 3a10 	vmov	r3, s14
 8008812:	1e59      	subs	r1, r3, #1
 8008814:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008818:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800881c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008820:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008824:	ee17 3a90 	vmov	r3, s15
 8008828:	440b      	add	r3, r1
 800882a:	4619      	mov	r1, r3
 800882c:	f7fe beb0 	b.w	8007590 <_ZN15customGraphBaseC1Ev+0xd64>
 8008830:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008834:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008838:	ee17 3a10 	vmov	r3, s14
 800883c:	1e59      	subs	r1, r3, #1
 800883e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008842:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800884a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800884e:	ee17 3a90 	vmov	r3, s15
 8008852:	440b      	add	r3, r1
 8008854:	4619      	mov	r1, r3
 8008856:	f7fe beb4 	b.w	80075c2 <_ZN15customGraphBaseC1Ev+0xd96>
 800885a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800885e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008862:	ee17 3a10 	vmov	r3, s14
 8008866:	1e59      	subs	r1, r3, #1
 8008868:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800886c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008870:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008874:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008878:	ee17 3a90 	vmov	r3, s15
 800887c:	440b      	add	r3, r1
 800887e:	4619      	mov	r1, r3
 8008880:	f7fe beb8 	b.w	80075f4 <_ZN15customGraphBaseC1Ev+0xdc8>
 8008884:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008888:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800888c:	ee17 3a10 	vmov	r3, s14
 8008890:	1e59      	subs	r1, r3, #1
 8008892:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008896:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800889a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800889e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088a2:	ee17 3a90 	vmov	r3, s15
 80088a6:	440b      	add	r3, r1
 80088a8:	4619      	mov	r1, r3
 80088aa:	f7fe bebc 	b.w	8007626 <_ZN15customGraphBaseC1Ev+0xdfa>
 80088ae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80088b2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80088b6:	ee17 3a10 	vmov	r3, s14
 80088ba:	1e59      	subs	r1, r3, #1
 80088bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80088c0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80088c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088cc:	ee17 3a90 	vmov	r3, s15
 80088d0:	440b      	add	r3, r1
 80088d2:	4619      	mov	r1, r3
 80088d4:	f7fe bec0 	b.w	8007658 <_ZN15customGraphBaseC1Ev+0xe2c>
 80088d8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80088dc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80088e0:	ee17 3a10 	vmov	r3, s14
 80088e4:	1e59      	subs	r1, r3, #1
 80088e6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80088ea:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80088ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088f6:	ee17 3a90 	vmov	r3, s15
 80088fa:	440b      	add	r3, r1
 80088fc:	4619      	mov	r1, r3
 80088fe:	f7fe bec4 	b.w	800768a <_ZN15customGraphBaseC1Ev+0xe5e>
 8008902:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008906:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800890a:	ee17 3a10 	vmov	r3, s14
 800890e:	1e59      	subs	r1, r3, #1
 8008910:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008914:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008918:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800891c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008920:	ee17 3a90 	vmov	r3, s15
 8008924:	440b      	add	r3, r1
 8008926:	4619      	mov	r1, r3
 8008928:	f7fe bec8 	b.w	80076bc <_ZN15customGraphBaseC1Ev+0xe90>
 800892c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008930:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008934:	ee17 3a10 	vmov	r3, s14
 8008938:	1e59      	subs	r1, r3, #1
 800893a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800893e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008946:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800894a:	ee17 3a90 	vmov	r3, s15
 800894e:	440b      	add	r3, r1
 8008950:	4619      	mov	r1, r3
 8008952:	f7fe becc 	b.w	80076ee <_ZN15customGraphBaseC1Ev+0xec2>
 8008956:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800895a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800895e:	ee17 3a10 	vmov	r3, s14
 8008962:	1e59      	subs	r1, r3, #1
 8008964:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008968:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800896c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008970:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008974:	ee17 3a90 	vmov	r3, s15
 8008978:	440b      	add	r3, r1
 800897a:	4619      	mov	r1, r3
 800897c:	f7fe bed0 	b.w	8007720 <_ZN15customGraphBaseC1Ev+0xef4>
 8008980:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008984:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008988:	ee17 3a10 	vmov	r3, s14
 800898c:	1e59      	subs	r1, r3, #1
 800898e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008992:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800899a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800899e:	ee17 3a90 	vmov	r3, s15
 80089a2:	440b      	add	r3, r1
 80089a4:	4619      	mov	r1, r3
 80089a6:	f7fe bed4 	b.w	8007752 <_ZN15customGraphBaseC1Ev+0xf26>
 80089aa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80089ae:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80089b2:	ee17 3a10 	vmov	r3, s14
 80089b6:	1e59      	subs	r1, r3, #1
 80089b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80089bc:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80089c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80089c8:	ee17 3a90 	vmov	r3, s15
 80089cc:	440b      	add	r3, r1
 80089ce:	4619      	mov	r1, r3
 80089d0:	f7fe bed8 	b.w	8007784 <_ZN15customGraphBaseC1Ev+0xf58>
 80089d4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80089d8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80089dc:	ee17 3a10 	vmov	r3, s14
 80089e0:	1e59      	subs	r1, r3, #1
 80089e2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80089e6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80089ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80089f2:	ee17 3a90 	vmov	r3, s15
 80089f6:	440b      	add	r3, r1
 80089f8:	4619      	mov	r1, r3
 80089fa:	f7fe bedc 	b.w	80077b6 <_ZN15customGraphBaseC1Ev+0xf8a>
 80089fe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008a02:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008a06:	ee17 3a10 	vmov	r3, s14
 8008a0a:	1e59      	subs	r1, r3, #1
 8008a0c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008a10:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008a14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a1c:	ee17 3a90 	vmov	r3, s15
 8008a20:	440b      	add	r3, r1
 8008a22:	4619      	mov	r1, r3
 8008a24:	f7fe bee0 	b.w	80077e8 <_ZN15customGraphBaseC1Ev+0xfbc>
 8008a28:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008a2c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008a30:	ee17 3a10 	vmov	r3, s14
 8008a34:	1e59      	subs	r1, r3, #1
 8008a36:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008a3a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a46:	ee17 3a90 	vmov	r3, s15
 8008a4a:	440b      	add	r3, r1
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	f7fe bee4 	b.w	800781a <_ZN15customGraphBaseC1Ev+0xfee>
 8008a52:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008a56:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008a5a:	ee17 3a10 	vmov	r3, s14
 8008a5e:	1e59      	subs	r1, r3, #1
 8008a60:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008a64:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008a68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a70:	ee17 3a90 	vmov	r3, s15
 8008a74:	440b      	add	r3, r1
 8008a76:	4619      	mov	r1, r3
 8008a78:	f7fe bee8 	b.w	800784c <_ZN15customGraphBaseC1Ev+0x1020>
 8008a7c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008a80:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008a84:	ee17 3a10 	vmov	r3, s14
 8008a88:	1e59      	subs	r1, r3, #1
 8008a8a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008a8e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a9a:	ee17 3a90 	vmov	r3, s15
 8008a9e:	440b      	add	r3, r1
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	f7fe beec 	b.w	800787e <_ZN15customGraphBaseC1Ev+0x1052>
 8008aa6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008aaa:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008aae:	ee17 3a10 	vmov	r3, s14
 8008ab2:	1e59      	subs	r1, r3, #1
 8008ab4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008ab8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008abc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ac0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ac4:	ee17 3a90 	vmov	r3, s15
 8008ac8:	440b      	add	r3, r1
 8008aca:	4619      	mov	r1, r3
 8008acc:	f7fe bef0 	b.w	80078b0 <_ZN15customGraphBaseC1Ev+0x1084>
 8008ad0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008ad4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008ad8:	ee17 3a10 	vmov	r3, s14
 8008adc:	1e59      	subs	r1, r3, #1
 8008ade:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008ae2:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008aee:	ee17 3a90 	vmov	r3, s15
 8008af2:	440b      	add	r3, r1
 8008af4:	4619      	mov	r1, r3
 8008af6:	f7fe bef4 	b.w	80078e2 <_ZN15customGraphBaseC1Ev+0x10b6>
 8008afa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008afe:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008b02:	ee17 3a10 	vmov	r3, s14
 8008b06:	1e59      	subs	r1, r3, #1
 8008b08:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008b0c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008b10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b18:	ee17 3a90 	vmov	r3, s15
 8008b1c:	440b      	add	r3, r1
 8008b1e:	4619      	mov	r1, r3
 8008b20:	f7fe bef8 	b.w	8007914 <_ZN15customGraphBaseC1Ev+0x10e8>
 8008b24:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008b28:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008b2c:	ee17 3a10 	vmov	r3, s14
 8008b30:	1e59      	subs	r1, r3, #1
 8008b32:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008b36:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b42:	ee17 3a90 	vmov	r3, s15
 8008b46:	440b      	add	r3, r1
 8008b48:	4619      	mov	r1, r3
 8008b4a:	f7fe befc 	b.w	8007946 <_ZN15customGraphBaseC1Ev+0x111a>
 8008b4e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008b52:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008b56:	ee17 3a10 	vmov	r3, s14
 8008b5a:	1e59      	subs	r1, r3, #1
 8008b5c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008b60:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008b64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b6c:	ee17 3a90 	vmov	r3, s15
 8008b70:	440b      	add	r3, r1
 8008b72:	4619      	mov	r1, r3
 8008b74:	f7fe bf00 	b.w	8007978 <_ZN15customGraphBaseC1Ev+0x114c>
 8008b78:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008b7c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008b80:	ee17 3a10 	vmov	r3, s14
 8008b84:	1e59      	subs	r1, r3, #1
 8008b86:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008b8a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b96:	ee17 3a90 	vmov	r3, s15
 8008b9a:	440b      	add	r3, r1
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	f7fe bf04 	b.w	80079aa <_ZN15customGraphBaseC1Ev+0x117e>
 8008ba2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008ba6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008baa:	ee17 3a10 	vmov	r3, s14
 8008bae:	1e59      	subs	r1, r3, #1
 8008bb0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008bb4:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008bb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008bc0:	ee17 3a90 	vmov	r3, s15
 8008bc4:	440b      	add	r3, r1
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	f7fe bf08 	b.w	80079dc <_ZN15customGraphBaseC1Ev+0x11b0>
 8008bcc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008bd0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008bd4:	ee17 3a10 	vmov	r3, s14
 8008bd8:	1e59      	subs	r1, r3, #1
 8008bda:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008bde:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008be6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008bea:	ee17 3a90 	vmov	r3, s15
 8008bee:	440b      	add	r3, r1
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	f7fe bf0c 	b.w	8007a0e <_ZN15customGraphBaseC1Ev+0x11e2>
 8008bf6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008bfa:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008bfe:	ee17 3a10 	vmov	r3, s14
 8008c02:	1e59      	subs	r1, r3, #1
 8008c04:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008c08:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008c0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008c14:	ee17 3a90 	vmov	r3, s15
 8008c18:	440b      	add	r3, r1
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	f7fe bf10 	b.w	8007a40 <_ZN15customGraphBaseC1Ev+0x1214>
 8008c20:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008c24:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008c28:	ee17 3a10 	vmov	r3, s14
 8008c2c:	1e59      	subs	r1, r3, #1
 8008c2e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008c32:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008c3e:	ee17 3a90 	vmov	r3, s15
 8008c42:	440b      	add	r3, r1
 8008c44:	4619      	mov	r1, r3
 8008c46:	f7fe bf14 	b.w	8007a72 <_ZN15customGraphBaseC1Ev+0x1246>
 8008c4a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008c4e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008c52:	ee17 3a10 	vmov	r3, s14
 8008c56:	1e59      	subs	r1, r3, #1
 8008c58:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008c5c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008c60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008c68:	ee17 3a90 	vmov	r3, s15
 8008c6c:	440b      	add	r3, r1
 8008c6e:	4619      	mov	r1, r3
 8008c70:	f7fe bf18 	b.w	8007aa4 <_ZN15customGraphBaseC1Ev+0x1278>
 8008c74:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008c78:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008c7c:	ee17 3a10 	vmov	r3, s14
 8008c80:	1e59      	subs	r1, r3, #1
 8008c82:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008c86:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008c92:	ee17 3a90 	vmov	r3, s15
 8008c96:	440b      	add	r3, r1
 8008c98:	4619      	mov	r1, r3
 8008c9a:	f7fe bf1c 	b.w	8007ad6 <_ZN15customGraphBaseC1Ev+0x12aa>
 8008c9e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008ca2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008ca6:	ee17 3a10 	vmov	r3, s14
 8008caa:	1e59      	subs	r1, r3, #1
 8008cac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008cb0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008cb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008cbc:	ee17 3a90 	vmov	r3, s15
 8008cc0:	440b      	add	r3, r1
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	f7fe bf20 	b.w	8007b08 <_ZN15customGraphBaseC1Ev+0x12dc>
 8008cc8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008ccc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008cd0:	ee17 3a10 	vmov	r3, s14
 8008cd4:	1e59      	subs	r1, r3, #1
 8008cd6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008cda:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ce2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ce6:	ee17 3a90 	vmov	r3, s15
 8008cea:	440b      	add	r3, r1
 8008cec:	4619      	mov	r1, r3
 8008cee:	f7fe bf24 	b.w	8007b3a <_ZN15customGraphBaseC1Ev+0x130e>
 8008cf2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008cf6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008cfa:	ee17 3a10 	vmov	r3, s14
 8008cfe:	1e59      	subs	r1, r3, #1
 8008d00:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008d04:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008d08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d10:	ee17 3a90 	vmov	r3, s15
 8008d14:	440b      	add	r3, r1
 8008d16:	4619      	mov	r1, r3
 8008d18:	f7fe bf28 	b.w	8007b6c <_ZN15customGraphBaseC1Ev+0x1340>
 8008d1c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008d20:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008d24:	ee17 3a10 	vmov	r3, s14
 8008d28:	1e59      	subs	r1, r3, #1
 8008d2a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008d2e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d3a:	ee17 3a90 	vmov	r3, s15
 8008d3e:	440b      	add	r3, r1
 8008d40:	4619      	mov	r1, r3
 8008d42:	f7fe bf2c 	b.w	8007b9e <_ZN15customGraphBaseC1Ev+0x1372>
 8008d46:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008d4a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008d4e:	ee17 3a10 	vmov	r3, s14
 8008d52:	1e59      	subs	r1, r3, #1
 8008d54:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008d58:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008d5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d64:	ee17 3a90 	vmov	r3, s15
 8008d68:	440b      	add	r3, r1
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	f7fe bf30 	b.w	8007bd0 <_ZN15customGraphBaseC1Ev+0x13a4>
 8008d70:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008d74:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008d78:	ee17 3a10 	vmov	r3, s14
 8008d7c:	1e59      	subs	r1, r3, #1
 8008d7e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008d82:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d8e:	ee17 3a90 	vmov	r3, s15
 8008d92:	440b      	add	r3, r1
 8008d94:	4619      	mov	r1, r3
 8008d96:	f7fe bf34 	b.w	8007c02 <_ZN15customGraphBaseC1Ev+0x13d6>
 8008d9a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008d9e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008da2:	ee17 3a10 	vmov	r3, s14
 8008da6:	1e59      	subs	r1, r3, #1
 8008da8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008dac:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008db0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008db4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008db8:	ee17 3a90 	vmov	r3, s15
 8008dbc:	440b      	add	r3, r1
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	f7fe bf38 	b.w	8007c34 <_ZN15customGraphBaseC1Ev+0x1408>
 8008dc4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008dc8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008dcc:	ee17 3a10 	vmov	r3, s14
 8008dd0:	1e59      	subs	r1, r3, #1
 8008dd2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008dd6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008de2:	ee17 3a90 	vmov	r3, s15
 8008de6:	440b      	add	r3, r1
 8008de8:	4619      	mov	r1, r3
 8008dea:	f7fe bf83 	b.w	8007cf4 <_ZN15customGraphBaseC1Ev+0x14c8>
 8008dee:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008df2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008df6:	ee17 3a10 	vmov	r3, s14
 8008dfa:	1e59      	subs	r1, r3, #1
 8008dfc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008e00:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008e04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e0c:	ee17 3a90 	vmov	r3, s15
 8008e10:	440b      	add	r3, r1
 8008e12:	4619      	mov	r1, r3
 8008e14:	f7fe bf87 	b.w	8007d26 <_ZN15customGraphBaseC1Ev+0x14fa>
 8008e18:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008e1c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008e20:	ee17 3a10 	vmov	r3, s14
 8008e24:	1e59      	subs	r1, r3, #1
 8008e26:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008e2a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e36:	ee17 3a90 	vmov	r3, s15
 8008e3a:	440b      	add	r3, r1
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	f7fe bf8b 	b.w	8007d58 <_ZN15customGraphBaseC1Ev+0x152c>
 8008e42:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008e46:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008e4a:	ee17 3a10 	vmov	r3, s14
 8008e4e:	1e59      	subs	r1, r3, #1
 8008e50:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008e54:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008e58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e60:	ee17 3a90 	vmov	r3, s15
 8008e64:	440b      	add	r3, r1
 8008e66:	4619      	mov	r1, r3
 8008e68:	f7fe bf8f 	b.w	8007d8a <_ZN15customGraphBaseC1Ev+0x155e>
 8008e6c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008e70:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008e74:	ee17 3a10 	vmov	r3, s14
 8008e78:	1e59      	subs	r1, r3, #1
 8008e7a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008e7e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e8a:	ee17 3a90 	vmov	r3, s15
 8008e8e:	440b      	add	r3, r1
 8008e90:	4619      	mov	r1, r3
 8008e92:	f7fe bf93 	b.w	8007dbc <_ZN15customGraphBaseC1Ev+0x1590>
 8008e96:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008e9a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008e9e:	ee17 3a10 	vmov	r3, s14
 8008ea2:	1e59      	subs	r1, r3, #1
 8008ea4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008ea8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008eac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008eb4:	ee17 3a90 	vmov	r3, s15
 8008eb8:	440b      	add	r3, r1
 8008eba:	4619      	mov	r1, r3
 8008ebc:	f7fe bf97 	b.w	8007dee <_ZN15customGraphBaseC1Ev+0x15c2>
 8008ec0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008ec4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008ec8:	ee17 3a10 	vmov	r3, s14
 8008ecc:	1e59      	subs	r1, r3, #1
 8008ece:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008ed2:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ede:	ee17 3a90 	vmov	r3, s15
 8008ee2:	440b      	add	r3, r1
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	f7fe bf9b 	b.w	8007e20 <_ZN15customGraphBaseC1Ev+0x15f4>
 8008eea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008eee:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008ef2:	ee17 3a10 	vmov	r3, s14
 8008ef6:	1e59      	subs	r1, r3, #1
 8008ef8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008efc:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008f00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f08:	ee17 3a90 	vmov	r3, s15
 8008f0c:	440b      	add	r3, r1
 8008f0e:	4619      	mov	r1, r3
 8008f10:	f7fe bf9f 	b.w	8007e52 <_ZN15customGraphBaseC1Ev+0x1626>
 8008f14:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008f18:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008f1c:	ee17 3a10 	vmov	r3, s14
 8008f20:	1e59      	subs	r1, r3, #1
 8008f22:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008f26:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f32:	ee17 3a90 	vmov	r3, s15
 8008f36:	440b      	add	r3, r1
 8008f38:	4619      	mov	r1, r3
 8008f3a:	f7fe bfa3 	b.w	8007e84 <_ZN15customGraphBaseC1Ev+0x1658>
 8008f3e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008f42:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008f46:	ee17 3a10 	vmov	r3, s14
 8008f4a:	1e59      	subs	r1, r3, #1
 8008f4c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008f50:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008f54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f5c:	ee17 3a90 	vmov	r3, s15
 8008f60:	440b      	add	r3, r1
 8008f62:	4619      	mov	r1, r3
 8008f64:	f7fe bfa7 	b.w	8007eb6 <_ZN15customGraphBaseC1Ev+0x168a>
 8008f68:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008f6c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008f70:	ee17 3a10 	vmov	r3, s14
 8008f74:	1e59      	subs	r1, r3, #1
 8008f76:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008f7a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f86:	ee17 3a90 	vmov	r3, s15
 8008f8a:	440b      	add	r3, r1
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	f7fe bfab 	b.w	8007ee8 <_ZN15customGraphBaseC1Ev+0x16bc>
 8008f92:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008f96:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008f9a:	ee17 3a10 	vmov	r3, s14
 8008f9e:	1e59      	subs	r1, r3, #1
 8008fa0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008fa4:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008fa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008fb0:	ee17 3a90 	vmov	r3, s15
 8008fb4:	440b      	add	r3, r1
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	f7fe bfaf 	b.w	8007f1a <_ZN15customGraphBaseC1Ev+0x16ee>
 8008fbc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008fc0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008fc4:	ee17 3a10 	vmov	r3, s14
 8008fc8:	1e59      	subs	r1, r3, #1
 8008fca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008fce:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008fda:	ee17 3a90 	vmov	r3, s15
 8008fde:	440b      	add	r3, r1
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	f7fe bfb3 	b.w	8007f4c <_ZN15customGraphBaseC1Ev+0x1720>
 8008fe6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008fea:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008fee:	ee17 3a10 	vmov	r3, s14
 8008ff2:	1e59      	subs	r1, r3, #1
 8008ff4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008ff8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008ffc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009000:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009004:	ee17 3a90 	vmov	r3, s15
 8009008:	440b      	add	r3, r1
 800900a:	4619      	mov	r1, r3
 800900c:	f7fe bfb7 	b.w	8007f7e <_ZN15customGraphBaseC1Ev+0x1752>
 8009010:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009014:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8009018:	ee17 3a10 	vmov	r3, s14
 800901c:	1e59      	subs	r1, r3, #1
 800901e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009022:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8009026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800902a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800902e:	ee17 3a90 	vmov	r3, s15
 8009032:	440b      	add	r3, r1
 8009034:	4619      	mov	r1, r3
 8009036:	f7fe bfbb 	b.w	8007fb0 <_ZN15customGraphBaseC1Ev+0x1784>
 800903a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800903e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8009042:	ee17 3a10 	vmov	r3, s14
 8009046:	1e59      	subs	r1, r3, #1
 8009048:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800904c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8009050:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009054:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009058:	ee17 3a90 	vmov	r3, s15
 800905c:	440b      	add	r3, r1
 800905e:	4619      	mov	r1, r3
 8009060:	f7fe bfbf 	b.w	8007fe2 <_ZN15customGraphBaseC1Ev+0x17b6>

08009064 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8009064:	4770      	bx	lr

08009066 <_ZN19FrontendApplicationD0Ev>:
 8009066:	b510      	push	{r4, lr}
 8009068:	4604      	mov	r4, r0
 800906a:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800906e:	f019 fe0a 	bl	8022c86 <_ZdlPvj>
 8009072:	4620      	mov	r0, r4
 8009074:	bd10      	pop	{r4, pc}

08009076 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8009076:	b510      	push	{r4, lr}
 8009078:	4604      	mov	r4, r0
    {
        model.tick();
 800907a:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 800907e:	f000 f812 	bl	80090a6 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8009082:	4620      	mov	r0, r4
    }
 8009084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8009088:	f00e b8d8 	b.w	801723c <_ZN8touchgfx11Application15handleTickEventEv>

0800908c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800908c:	b510      	push	{r4, lr}
 800908e:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8009090:	f7f9 fc82 	bl	8002998 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8009094:	4b01      	ldr	r3, [pc, #4]	; (800909c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8009096:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8009098:	6023      	str	r3, [r4, #0]
}
 800909a:	bd10      	pop	{r4, pc}
 800909c:	08025464 	.word	0x08025464

080090a0 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 80090a0:	2200      	movs	r2, #0
 80090a2:	6002      	str	r2, [r0, #0]
{

}
 80090a4:	4770      	bx	lr

080090a6 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 80090a6:	4770      	bx	lr

080090a8 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 80090a8:	4770      	bx	lr

080090aa <_ZThn4_N16Screen1PresenterD1Ev>:
 80090aa:	3804      	subs	r0, #4
 80090ac:	4770      	bx	lr

080090ae <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 80090ae:	4770      	bx	lr

080090b0 <_ZN16Screen1PresenterD0Ev>:
 80090b0:	b510      	push	{r4, lr}
 80090b2:	4604      	mov	r4, r0
 80090b4:	2110      	movs	r1, #16
 80090b6:	f019 fde6 	bl	8022c86 <_ZdlPvj>
 80090ba:	4620      	mov	r0, r4
 80090bc:	bd10      	pop	{r4, pc}

080090be <_ZThn4_N16Screen1PresenterD0Ev>:
 80090be:	f1a0 0004 	sub.w	r0, r0, #4
 80090c2:	e7f5      	b.n	80090b0 <_ZN16Screen1PresenterD0Ev>

080090c4 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 80090c4:	2200      	movs	r2, #0
    : view(v)
 80090c6:	60c1      	str	r1, [r0, #12]
 80090c8:	6082      	str	r2, [r0, #8]
 80090ca:	4a04      	ldr	r2, [pc, #16]	; (80090dc <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
Screen1Presenter::Screen1Presenter(Screen1View& v)
 80090cc:	b510      	push	{r4, lr}
    : view(v)
 80090ce:	f102 0408 	add.w	r4, r2, #8
 80090d2:	3220      	adds	r2, #32
 80090d4:	6004      	str	r4, [r0, #0]
 80090d6:	6042      	str	r2, [r0, #4]
}
 80090d8:	bd10      	pop	{r4, pc}
 80090da:	bf00      	nop
 80090dc:	080254a8 	.word	0x080254a8

080090e0 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 80090e0:	4770      	bx	lr
 80090e2:	0000      	movs	r0, r0
 80090e4:	0000      	movs	r0, r0
	...

080090e8 <_ZN11Screen1View15handleTickEventEv>:

void Screen1View::handleTickEvent()
{
 80090e8:	b570      	push	{r4, r5, r6, lr}
	tickCounter++;
 80090ea:	f500 5540 	add.w	r5, r0, #12288	; 0x3000
 80090ee:	2203      	movs	r2, #3
{
 80090f0:	4604      	mov	r4, r0
	tickCounter++;
 80090f2:	f8d5 3c64 	ldr.w	r3, [r5, #3172]	; 0xc64
 80090f6:	3301      	adds	r3, #1
 80090f8:	fb93 f2f2 	sdiv	r2, r3, r2
 80090fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	if(tickCounter % 3 == 0)
 8009100:	4293      	cmp	r3, r2
{
 8009102:	ed2d 8b04 	vpush	{d8-d9}
	tickCounter++;
 8009106:	f8c5 3c64 	str.w	r3, [r5, #3172]	; 0xc64
	if(tickCounter % 3 == 0)
 800910a:	d14c      	bne.n	80091a6 <_ZN11Screen1View15handleTickEventEv+0xbe>
	{
		dynamicGraph1.addDataPoint((int)(sinf(tickCounter * 0.07) + 1) * 40 + rand() % 10);
 800910c:	ee07 3a90 	vmov	s15, r3
 8009110:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8009114:	260a      	movs	r6, #10
 8009116:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800911a:	ed9f 9b25 	vldr	d9, [pc, #148]	; 80091b0 <_ZN11Screen1View15handleTickEventEv+0xc8>
 800911e:	ee20 0b09 	vmul.f64	d0, d0, d9
 8009122:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8009126:	f019 fe1b 	bl	8022d60 <sinf>
 800912a:	eeb0 8a40 	vmov.f32	s16, s0
 800912e:	f01a fb19 	bl	8023764 <rand>
 8009132:	ee38 0a28 	vadd.f32	s0, s16, s17
 8009136:	fb90 f1f6 	sdiv	r1, r0, r6
 800913a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800913e:	fb01 0016 	mls	r0, r1, r6, r0
 8009142:	2128      	movs	r1, #40	; 0x28
 8009144:	ee10 3a10 	vmov	r3, s0
 8009148:	fb01 0003 	mla	r0, r1, r3, r0
        return i * scale;
 800914c:	f8d4 1580 	ldr.w	r1, [r4, #1408]	; 0x580
        return addDataPointScaled(int2scaledY(y));
 8009150:	4341      	muls	r1, r0
 8009152:	f204 504c 	addw	r0, r4, #1356	; 0x54c
 8009156:	f009 fe62 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
		customGraph1.addPoint((sinf(tickCounter * 0.07) + 1) * 40 + rand() % 10);
 800915a:	f605 4364 	addw	r3, r5, #3172	; 0xc64
 800915e:	ed93 0a00 	vldr	s0, [r3]
 8009162:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8009166:	ee20 0b09 	vmul.f64	d0, d0, d9
 800916a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800916e:	f019 fdf7 	bl	8022d60 <sinf>
 8009172:	eeb0 8a40 	vmov.f32	s16, s0
 8009176:	f01a faf5 	bl	8023764 <rand>
 800917a:	fb90 f3f6 	sdiv	r3, r0, r6
 800917e:	fb03 0016 	mls	r0, r3, r6, r0
 8009182:	ee78 7a28 	vadd.f32	s15, s16, s17
 8009186:	ee07 0a10 	vmov	s14, r0
 800918a:	f504 600f 	add.w	r0, r4, #2288	; 0x8f0
 800918e:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 8009192:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80091b8 <_ZN11Screen1View15handleTickEventEv+0xd0>
	}
}
 8009196:	ecbd 8b04 	vpop	{d8-d9}
		customGraph1.addPoint((sinf(tickCounter * 0.07) + 1) * 40 + rand() % 10);
 800919a:	eea7 0a87 	vfma.f32	s0, s15, s14
}
 800919e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		customGraph1.addPoint((sinf(tickCounter * 0.07) + 1) * 40 + rand() % 10);
 80091a2:	f000 b855 	b.w	8009250 <_ZN11customGraph8addPointEf>
}
 80091a6:	ecbd 8b04 	vpop	{d8-d9}
 80091aa:	bd70      	pop	{r4, r5, r6, pc}
 80091ac:	f3af 8000 	nop.w
 80091b0:	1eb851ec 	.word	0x1eb851ec
 80091b4:	3fb1eb85 	.word	0x3fb1eb85
 80091b8:	42200000 	.word	0x42200000

080091bc <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 80091bc:	4b03      	ldr	r3, [pc, #12]	; (80091cc <_ZN11Screen1ViewD1Ev+0x10>)
 80091be:	b510      	push	{r4, lr}
 80091c0:	4604      	mov	r4, r0
 80091c2:	6003      	str	r3, [r0, #0]
 80091c4:	f7fa f8d6 	bl	8003374 <_ZN15Screen1ViewBaseD1Ev>
 80091c8:	4620      	mov	r0, r4
 80091ca:	bd10      	pop	{r4, pc}
 80091cc:	080254d8 	.word	0x080254d8

080091d0 <_ZN11Screen1ViewD0Ev>:
 80091d0:	b510      	push	{r4, lr}
 80091d2:	4604      	mov	r4, r0
 80091d4:	f7ff fff2 	bl	80091bc <_ZN11Screen1ViewD1Ev>
 80091d8:	f643 4168 	movw	r1, #15464	; 0x3c68
 80091dc:	4620      	mov	r0, r4
 80091de:	f019 fd52 	bl	8022c86 <_ZdlPvj>
 80091e2:	4620      	mov	r0, r4
 80091e4:	bd10      	pop	{r4, pc}
	...

080091e8 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 80091e8:	b510      	push	{r4, lr}
 80091ea:	4604      	mov	r4, r0
 80091ec:	f7fa f990 	bl	8003510 <_ZN15Screen1ViewBaseC1Ev>
 80091f0:	4b04      	ldr	r3, [pc, #16]	; (8009204 <_ZN11Screen1ViewC1Ev+0x1c>)
	tickCounter = 0;
 80091f2:	2200      	movs	r2, #0
}
 80091f4:	4620      	mov	r0, r4
Screen1View::Screen1View()
 80091f6:	6023      	str	r3, [r4, #0]
	tickCounter = 0;
 80091f8:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 80091fc:	f8c3 2c64 	str.w	r2, [r3, #3172]	; 0xc64
}
 8009200:	bd10      	pop	{r4, pc}
 8009202:	bf00      	nop
 8009204:	080254d8 	.word	0x080254d8

08009208 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8009208:	f7fa b86c 	b.w	80032e4 <_ZN15Screen1ViewBase11setupScreenEv>

0800920c <_ZN11customGraphD1Ev>:
 800920c:	4b03      	ldr	r3, [pc, #12]	; (800921c <_ZN11customGraphD1Ev+0x10>)
 800920e:	b510      	push	{r4, lr}
 8009210:	4604      	mov	r4, r0
 8009212:	6003      	str	r3, [r0, #0]
 8009214:	f7fd fae2 	bl	80067dc <_ZN15customGraphBaseD1Ev>
 8009218:	4620      	mov	r0, r4
 800921a:	bd10      	pop	{r4, pc}
 800921c:	0802550c 	.word	0x0802550c

08009220 <_ZN11customGraphD0Ev>:
 8009220:	b510      	push	{r4, lr}
 8009222:	4604      	mov	r4, r0
 8009224:	f7ff fff2 	bl	800920c <_ZN11customGraphD1Ev>
 8009228:	f240 4194 	movw	r1, #1172	; 0x494
 800922c:	4620      	mov	r0, r4
 800922e:	f019 fd2a 	bl	8022c86 <_ZdlPvj>
 8009232:	4620      	mov	r0, r4
 8009234:	bd10      	pop	{r4, pc}
	...

08009238 <_ZN11customGraphC1Ev>:
#include <gui/containers/customGraph.hpp>

customGraph::customGraph()
 8009238:	b510      	push	{r4, lr}
 800923a:	4604      	mov	r4, r0
 800923c:	f7fd faf6 	bl	800682c <_ZN15customGraphBaseC1Ev>
 8009240:	4b01      	ldr	r3, [pc, #4]	; (8009248 <_ZN11customGraphC1Ev+0x10>)
{

}
 8009242:	4620      	mov	r0, r4
customGraph::customGraph()
 8009244:	6023      	str	r3, [r4, #0]
}
 8009246:	bd10      	pop	{r4, pc}
 8009248:	0802550c 	.word	0x0802550c

0800924c <_ZN11customGraph10initializeEv>:

void customGraph::initialize()
{
    customGraphBase::initialize();
 800924c:	f7fd bac7 	b.w	80067de <_ZN15customGraphBase10initializeEv>

08009250 <_ZN11customGraph8addPointEf>:
        const float fs = f * (float)scale;
 8009250:	edd0 7a23 	vldr	s15, [r0, #140]	; 0x8c
 8009254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}


void customGraph::addPoint(float y)
{
 8009258:	b538      	push	{r3, r4, r5, lr}
 800925a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800925e:	4604      	mov	r4, r0
    customGraphBase::dynamicGraph1.addDataPoint(y);
 8009260:	f100 0558 	add.w	r5, r0, #88	; 0x58
        if (fs >= 0)
 8009264:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800926c:	db14      	blt.n	8009298 <_ZN11customGraph8addPointEf+0x48>
            return (int)(fs + 0.5f);
 800926e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009272:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009276:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800927a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800927e:	4628      	mov	r0, r5
 8009280:	f009 fdcd 	bl	8012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        return i * scale;
 8009284:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8009288:	4628      	mov	r0, r5
 800928a:	2101      	movs	r1, #1
 800928c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    customGraphBase::dynamicGraph1.setGraphRangeYAuto(true,5);
}
 8009290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009294:	f009 b9ef 	b.w	8012676 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8009298:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800929c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80092a0:	ee17 3a90 	vmov	r3, s15
 80092a4:	1e59      	subs	r1, r3, #1
 80092a6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80092aa:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80092ae:	ee30 0a07 	vadd.f32	s0, s0, s14
 80092b2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80092b6:	ee10 3a10 	vmov	r3, s0
 80092ba:	440b      	add	r3, r1
 80092bc:	4619      	mov	r1, r3
 80092be:	e7de      	b.n	800927e <_ZN11customGraph8addPointEf+0x2e>

080092c0 <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 80092c0:	2301      	movs	r3, #1
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 80092c2:	f44f 7248 	mov.w	r2, #800	; 0x320
  
  return FT6X06_OK;
}
 80092c6:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 80092c8:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 80092ca:	2302      	movs	r3, #2
 80092cc:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 80092ce:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80092d2:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 80092d6:	4770      	bx	lr

080092d8 <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 80092d8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80092dc:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 80092de:	bf04      	itt	eq
 80092e0:	2300      	moveq	r3, #0
 80092e2:	f880 3024 	strbeq.w	r3, [r0, #36]	; 0x24
  }
  
  return FT6X06_OK;
}
 80092e6:	2000      	movs	r0, #0
 80092e8:	4770      	bx	lr

080092ea <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 80092ea:	2000      	movs	r0, #0
 80092ec:	4770      	bx	lr

080092ee <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80092ee:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80092f0:	6904      	ldr	r4, [r0, #16]
 80092f2:	8900      	ldrh	r0, [r0, #8]
 80092f4:	46a4      	mov	ip, r4
}
 80092f6:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80092fa:	4760      	bx	ip

080092fc <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80092fc:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80092fe:	68c4      	ldr	r4, [r0, #12]
 8009300:	8900      	ldrh	r0, [r0, #8]
 8009302:	46a4      	mov	ip, r4
}
 8009304:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8009308:	4760      	bx	ip

0800930a <FT6X06_GestureConfig>:
{
 800930a:	e92d 4320 	stmdb	sp!, {r5, r8, r9, lr}
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 800930e:	f100 0818 	add.w	r8, r0, #24
{
 8009312:	4689      	mov	r9, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8009314:	7809      	ldrb	r1, [r1, #0]
 8009316:	4640      	mov	r0, r8
 8009318:	f000 f918 	bl	800954c <ft6x06_radian_value>
 800931c:	4605      	mov	r5, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 800931e:	f899 1004 	ldrb.w	r1, [r9, #4]
 8009322:	4640      	mov	r0, r8
 8009324:	f000 f91e 	bl	8009564 <ft6x06_offset_left_right>
 8009328:	4405      	add	r5, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800932a:	f899 1008 	ldrb.w	r1, [r9, #8]
 800932e:	4640      	mov	r0, r8
 8009330:	f000 f924 	bl	800957c <ft6x06_offset_up_down>
 8009334:	4405      	add	r5, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8009336:	f899 100c 	ldrb.w	r1, [r9, #12]
 800933a:	4640      	mov	r0, r8
 800933c:	f000 f92a 	bl	8009594 <ft6x06_disatnce_left_right>
 8009340:	4405      	add	r5, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8009342:	f899 1010 	ldrb.w	r1, [r9, #16]
 8009346:	4640      	mov	r0, r8
 8009348:	f000 f930 	bl	80095ac <ft6x06_distance_up_down>
 800934c:	4405      	add	r5, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800934e:	f899 1014 	ldrb.w	r1, [r9, #20]
 8009352:	4640      	mov	r0, r8
 8009354:	f000 f936 	bl	80095c4 <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 8009358:	42c5      	cmn	r5, r0
}
 800935a:	bf14      	ite	ne
 800935c:	f04f 30ff 	movne.w	r0, #4294967295
 8009360:	2000      	moveq	r0, #0
 8009362:	e8bd 8320 	ldmia.w	sp!, {r5, r8, r9, pc}

08009366 <FT6X06_ReadID>:
{
 8009366:	b513      	push	{r0, r1, r4, lr}
 8009368:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 800936a:	3018      	adds	r0, #24
 800936c:	f10d 0107 	add.w	r1, sp, #7
 8009370:	f000 f940 	bl	80095f4 <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 8009374:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009378:	6023      	str	r3, [r4, #0]
}
 800937a:	b002      	add	sp, #8
 800937c:	bd10      	pop	{r4, pc}

0800937e <FT6X06_GetState>:
{
 800937e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8009380:	f100 0518 	add.w	r5, r0, #24
{
 8009384:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8009386:	a901      	add	r1, sp, #4
 8009388:	4628      	mov	r0, r5
 800938a:	f000 f8d2 	bl	8009532 <ft6x06_td_status>
 800938e:	bb08      	cbnz	r0, 80093d4 <FT6X06_GetState+0x56>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8009390:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8009394:	2b02      	cmp	r3, #2
 8009396:	bf98      	it	ls
 8009398:	4618      	movls	r0, r3
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 800939a:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 800939c:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 800939e:	2103      	movs	r1, #3
 80093a0:	4628      	mov	r0, r5
 80093a2:	eb0d 0203 	add.w	r2, sp, r3
 80093a6:	f000 f8b1 	bl	800950c <ft6x06_read_reg>
 80093aa:	b9b0      	cbnz	r0, 80093da <FT6X06_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80093ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80093b0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80093b4:	021b      	lsls	r3, r3, #8
 80093b6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80093ba:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80093bc:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80093c0:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80093c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80093c6:	021b      	lsls	r3, r3, #8
 80093c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80093cc:	4313      	orrs	r3, r2
 80093ce:	60a3      	str	r3, [r4, #8]
}
 80093d0:	b003      	add	sp, #12
 80093d2:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 80093d4:	f04f 30ff 	mov.w	r0, #4294967295
 80093d8:	e7df      	b.n	800939a <FT6X06_GetState+0x1c>
    ret = FT6X06_ERROR;
 80093da:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80093de:	e7f7      	b.n	80093d0 <FT6X06_GetState+0x52>

080093e0 <FT6X06_GetGesture>:
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 80093e0:	3018      	adds	r0, #24
 80093e2:	f000 b8a1 	b.w	8009528 <ft6x06_gest_id>

080093e6 <FT6X06_EnableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 80093e6:	2101      	movs	r1, #1
 80093e8:	3018      	adds	r0, #24
 80093ea:	f000 b8f7 	b.w	80095dc <ft6x06_g_mode>

080093ee <FT6X06_DisableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 80093ee:	2100      	movs	r1, #0
 80093f0:	3018      	adds	r0, #24
 80093f2:	f000 b8f3 	b.w	80095dc <ft6x06_g_mode>

080093f6 <FT6X06_Init>:
{
 80093f6:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 80093f8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 80093fc:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 80093fe:	b96b      	cbnz	r3, 800941c <FT6X06_Init+0x26>
    pObj->IO.Init();
 8009400:	6803      	ldr	r3, [r0, #0]
 8009402:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 8009404:	4620      	mov	r0, r4
 8009406:	f7ff fff2 	bl	80093ee <FT6X06_DisableIT>
  if(ret != FT6X06_OK)
 800940a:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 800940c:	f04f 0301 	mov.w	r3, #1
  if(ret != FT6X06_OK)
 8009410:	bf18      	it	ne
 8009412:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 8009414:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if(ret != FT6X06_OK)
 8009418:	4240      	negs	r0, r0
}
 800941a:	bd10      	pop	{r4, pc}
  int32_t ret = FT6X06_OK;
 800941c:	2000      	movs	r0, #0
  return ret;
 800941e:	e7fc      	b.n	800941a <FT6X06_Init+0x24>

08009420 <FT6X06_ClearIT>:
 8009420:	2000      	movs	r0, #0
 8009422:	4770      	bx	lr

08009424 <FT6X06_GetMultiTouchState>:
{
 8009424:	b530      	push	{r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8009426:	f100 0518 	add.w	r5, r0, #24
{
 800942a:	b085      	sub	sp, #20
 800942c:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 800942e:	4628      	mov	r0, r5
 8009430:	a901      	add	r1, sp, #4
 8009432:	f000 f87e 	bl	8009532 <ft6x06_td_status>
 8009436:	2800      	cmp	r0, #0
 8009438:	d145      	bne.n	80094c6 <FT6X06_GetMultiTouchState+0xa2>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 800943a:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 800943e:	2b02      	cmp	r3, #2
 8009440:	bf98      	it	ls
 8009442:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8009444:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8009446:	230c      	movs	r3, #12
 8009448:	aa01      	add	r2, sp, #4
 800944a:	2103      	movs	r1, #3
 800944c:	4628      	mov	r0, r5
 800944e:	f000 f85d 	bl	800950c <ft6x06_read_reg>
 8009452:	2800      	cmp	r0, #0
 8009454:	d13a      	bne.n	80094cc <FT6X06_GetMultiTouchState+0xa8>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8009456:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800945a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800945e:	0213      	lsls	r3, r2, #8
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8009460:	0992      	lsrs	r2, r2, #6
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8009462:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8009466:	61e2      	str	r2, [r4, #28]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8009468:	430b      	orrs	r3, r1
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800946a:	f89d 1007 	ldrb.w	r1, [sp, #7]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800946e:	f89d 200a 	ldrb.w	r2, [sp, #10]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8009472:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8009474:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009478:	021b      	lsls	r3, r3, #8
 800947a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800947e:	430b      	orrs	r3, r1
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8009480:	f89d 100b 	ldrb.w	r1, [sp, #11]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8009484:	60e3      	str	r3, [r4, #12]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 8009486:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800948a:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 800948c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8009490:	091b      	lsrs	r3, r3, #4
 8009492:	6263      	str	r3, [r4, #36]	; 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8009494:	0213      	lsls	r3, r2, #8
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8009496:	0992      	lsrs	r2, r2, #6
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8009498:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 800949c:	6222      	str	r2, [r4, #32]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800949e:	430b      	orrs	r3, r1
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 80094a0:	f89d 100d 	ldrb.w	r1, [sp, #13]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80094a4:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 80094a6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80094aa:	021b      	lsls	r3, r3, #8
 80094ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80094b0:	430b      	orrs	r3, r1
 80094b2:	6123      	str	r3, [r4, #16]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 80094b4:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80094b8:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 80094ba:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80094be:	091b      	lsrs	r3, r3, #4
 80094c0:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80094c2:	b005      	add	sp, #20
 80094c4:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 80094c6:	f04f 30ff 	mov.w	r0, #4294967295
 80094ca:	e7bb      	b.n	8009444 <FT6X06_GetMultiTouchState+0x20>
    ret = FT6X06_ERROR;
 80094cc:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 80094d0:	e7f7      	b.n	80094c2 <FT6X06_GetMultiTouchState+0x9e>
	...

080094d4 <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 80094d4:	b190      	cbz	r0, 80094fc <FT6X06_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 80094d6:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 80094d8:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80094da:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 80094dc:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 80094de:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 80094e0:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80094e2:	68ca      	ldr	r2, [r1, #12]
 80094e4:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80094e6:	690a      	ldr	r2, [r1, #16]
 80094e8:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80094ea:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 80094ec:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 80094ee:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 80094f0:	4a04      	ldr	r2, [pc, #16]	; (8009504 <FT6X06_RegisterBusIO+0x30>)
 80094f2:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 80094f4:	4a04      	ldr	r2, [pc, #16]	; (8009508 <FT6X06_RegisterBusIO+0x34>)
 80094f6:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 80094f8:	b103      	cbz	r3, 80094fc <FT6X06_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 80094fa:	4718      	bx	r3
}
 80094fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	080092ef 	.word	0x080092ef
 8009508:	080092fd 	.word	0x080092fd

0800950c <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 800950c:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800950e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8009512:	46a4      	mov	ip, r4
}
 8009514:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8009518:	4760      	bx	ip

0800951a <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 800951a:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800951c:	6804      	ldr	r4, [r0, #0]
 800951e:	6880      	ldr	r0, [r0, #8]
 8009520:	46a4      	mov	ip, r4
}
 8009522:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8009526:	4760      	bx	ip

08009528 <ft6x06_gest_id>:
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8009528:	2301      	movs	r3, #1
{
 800952a:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 800952c:	4619      	mov	r1, r3
 800952e:	f7ff bfed 	b.w	800950c <ft6x06_read_reg>

08009532 <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8009532:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8009534:	460a      	mov	r2, r1
{
 8009536:	460c      	mov	r4, r1
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8009538:	2301      	movs	r3, #1
 800953a:	2102      	movs	r1, #2
 800953c:	f7ff ffe6 	bl	800950c <ft6x06_read_reg>
  
  if(ret == 0)
 8009540:	b918      	cbnz	r0, 800954a <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 8009542:	7823      	ldrb	r3, [r4, #0]
 8009544:	f003 030f 	and.w	r3, r3, #15
 8009548:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 800954a:	bd10      	pop	{r4, pc}

0800954c <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 800954c:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 800954e:	2301      	movs	r3, #1
{
 8009550:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8009554:	f10d 0207 	add.w	r2, sp, #7
 8009558:	2191      	movs	r1, #145	; 0x91
 800955a:	f7ff ffde 	bl	800951a <ft6x06_write_reg>
}
 800955e:	b003      	add	sp, #12
 8009560:	f85d fb04 	ldr.w	pc, [sp], #4

08009564 <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8009564:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8009566:	2301      	movs	r3, #1
{
 8009568:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 800956c:	f10d 0207 	add.w	r2, sp, #7
 8009570:	2192      	movs	r1, #146	; 0x92
 8009572:	f7ff ffd2 	bl	800951a <ft6x06_write_reg>
}
 8009576:	b003      	add	sp, #12
 8009578:	f85d fb04 	ldr.w	pc, [sp], #4

0800957c <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 800957c:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 800957e:	2301      	movs	r3, #1
{
 8009580:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8009584:	f10d 0207 	add.w	r2, sp, #7
 8009588:	2193      	movs	r1, #147	; 0x93
 800958a:	f7ff ffc6 	bl	800951a <ft6x06_write_reg>
}
 800958e:	b003      	add	sp, #12
 8009590:	f85d fb04 	ldr.w	pc, [sp], #4

08009594 <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8009594:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8009596:	2301      	movs	r3, #1
{
 8009598:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 800959c:	f10d 0207 	add.w	r2, sp, #7
 80095a0:	2194      	movs	r1, #148	; 0x94
 80095a2:	f7ff ffba 	bl	800951a <ft6x06_write_reg>
}
 80095a6:	b003      	add	sp, #12
 80095a8:	f85d fb04 	ldr.w	pc, [sp], #4

080095ac <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 80095ac:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 80095ae:	2301      	movs	r3, #1
{
 80095b0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 80095b4:	f10d 0207 	add.w	r2, sp, #7
 80095b8:	2195      	movs	r1, #149	; 0x95
 80095ba:	f7ff ffae 	bl	800951a <ft6x06_write_reg>
}
 80095be:	b003      	add	sp, #12
 80095c0:	f85d fb04 	ldr.w	pc, [sp], #4

080095c4 <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 80095c4:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 80095c6:	2301      	movs	r3, #1
{
 80095c8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 80095cc:	f10d 0207 	add.w	r2, sp, #7
 80095d0:	2196      	movs	r1, #150	; 0x96
 80095d2:	f7ff ffa2 	bl	800951a <ft6x06_write_reg>
}
 80095d6:	b003      	add	sp, #12
 80095d8:	f85d fb04 	ldr.w	pc, [sp], #4

080095dc <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 80095dc:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 80095de:	2301      	movs	r3, #1
{
 80095e0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 80095e4:	f10d 0207 	add.w	r2, sp, #7
 80095e8:	21a4      	movs	r1, #164	; 0xa4
 80095ea:	f7ff ff96 	bl	800951a <ft6x06_write_reg>
}
 80095ee:	b003      	add	sp, #12
 80095f0:	f85d fb04 	ldr.w	pc, [sp], #4

080095f4 <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 80095f4:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 80095f6:	2301      	movs	r3, #1
 80095f8:	21a8      	movs	r1, #168	; 0xa8
 80095fa:	f7ff bf87 	b.w	800950c <ft6x06_read_reg>
	...

08009600 <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8009600:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8009602:	2201      	movs	r2, #1
 8009604:	4b07      	ldr	r3, [pc, #28]	; (8009624 <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 8009606:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 800960a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800960c:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800960e:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 8009610:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8009612:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009616:	f005 f961 	bl	800e8dc <HAL_SDRAM_SendCommand>
 800961a:	3800      	subs	r0, #0
 800961c:	bf18      	it	ne
 800961e:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8009620:	4240      	negs	r0, r0
 8009622:	bd08      	pop	{r3, pc}
 8009624:	24005164 	.word	0x24005164

08009628 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8009628:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 800962a:	2202      	movs	r2, #2
 800962c:	4b08      	ldr	r3, [pc, #32]	; (8009650 <IS42S32800J_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 800962e:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 8009632:	2101      	movs	r1, #1
 8009634:	2200      	movs	r2, #0
 8009636:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800963a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800963e:	4619      	mov	r1, r3
 8009640:	f005 f94c 	bl	800e8dc <HAL_SDRAM_SendCommand>
 8009644:	3800      	subs	r0, #0
 8009646:	bf18      	it	ne
 8009648:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 800964a:	4240      	negs	r0, r0
 800964c:	bd08      	pop	{r3, pc}
 800964e:	bf00      	nop
 8009650:	24005164 	.word	0x24005164

08009654 <IS42S32800J_ModeRegConfig>:
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8009654:	e9d1 3203 	ldrd	r3, r2, [r1, #12]
{
 8009658:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800965a:	4313      	orrs	r3, r2
                     pRegMode->BurstType     |\
 800965c:	694a      	ldr	r2, [r1, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 800965e:	4c0b      	ldr	r4, [pc, #44]	; (800968c <IS42S32800J_ModeRegConfig+0x38>)
                     pRegMode->BurstType     |\
 8009660:	4313      	orrs	r3, r2
                     pRegMode->CASLatency    |\
 8009662:	698a      	ldr	r2, [r1, #24]
 8009664:	4313      	orrs	r3, r2
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8009666:	69ca      	ldr	r2, [r1, #28]
 8009668:	4313      	orrs	r3, r2
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 800966a:	2204      	movs	r2, #4
 800966c:	6022      	str	r2, [r4, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 800966e:	680a      	ldr	r2, [r1, #0]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8009670:	4621      	mov	r1, r4
  Command.CommandTarget          = pRegMode->TargetBank;
 8009672:	6062      	str	r2, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8009674:	2201      	movs	r2, #1
  Command.ModeRegisterDefinition = tmpmrd;
 8009676:	e9c4 2302 	strd	r2, r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800967a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800967e:	f005 f92d 	bl	800e8dc <HAL_SDRAM_SendCommand>
 8009682:	3800      	subs	r0, #0
 8009684:	bf18      	it	ne
 8009686:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8009688:	4240      	negs	r0, r0
 800968a:	bd10      	pop	{r4, pc}
 800968c:	24005164 	.word	0x24005164

08009690 <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8009690:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 8009692:	4b08      	ldr	r3, [pc, #32]	; (80096b4 <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 8009694:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 8009698:	2108      	movs	r1, #8
 800969a:	2200      	movs	r2, #0
 800969c:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80096a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80096a4:	4619      	mov	r1, r3
 80096a6:	f005 f919 	bl	800e8dc <HAL_SDRAM_SendCommand>
 80096aa:	3800      	subs	r0, #0
 80096ac:	bf18      	it	ne
 80096ae:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80096b0:	4240      	negs	r0, r0
 80096b2:	bd08      	pop	{r3, pc}
 80096b4:	24005164 	.word	0x24005164

080096b8 <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 80096b8:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 80096ba:	f005 f92e 	bl	800e91a <HAL_SDRAM_ProgramRefreshRate>
 80096be:	3800      	subs	r0, #0
 80096c0:	bf18      	it	ne
 80096c2:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80096c4:	4240      	negs	r0, r0
 80096c6:	bd08      	pop	{r3, pc}

080096c8 <IS42S32800J_Init>:
{
 80096c8:	b570      	push	{r4, r5, r6, lr}
 80096ca:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80096cc:	6809      	ldr	r1, [r1, #0]
{
 80096ce:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80096d0:	f7ff ff96 	bl	8009600 <IS42S32800J_ClockEnable>
 80096d4:	b110      	cbz	r0, 80096dc <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 80096d6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80096da:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 80096dc:	f001 fc98 	bl	800b010 <HAL_GetTick>
 80096e0:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80096e2:	f001 fc95 	bl	800b010 <HAL_GetTick>
 80096e6:	4286      	cmp	r6, r0
 80096e8:	d0fb      	beq.n	80096e2 <IS42S32800J_Init+0x1a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80096ea:	6821      	ldr	r1, [r4, #0]
 80096ec:	4628      	mov	r0, r5
 80096ee:	f7ff ff9b 	bl	8009628 <IS42S32800J_Precharge>
 80096f2:	2800      	cmp	r0, #0
 80096f4:	d1ef      	bne.n	80096d6 <IS42S32800J_Init+0xe>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 80096f6:	4628      	mov	r0, r5
 80096f8:	e9d4 1200 	ldrd	r1, r2, [r4]
 80096fc:	f7ff ffc8 	bl	8009690 <IS42S32800J_RefreshMode>
 8009700:	2800      	cmp	r0, #0
 8009702:	d1e8      	bne.n	80096d6 <IS42S32800J_Init+0xe>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8009704:	4621      	mov	r1, r4
 8009706:	4628      	mov	r0, r5
 8009708:	f7ff ffa4 	bl	8009654 <IS42S32800J_ModeRegConfig>
 800970c:	2800      	cmp	r0, #0
 800970e:	d1e2      	bne.n	80096d6 <IS42S32800J_Init+0xe>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 8009710:	68a1      	ldr	r1, [r4, #8]
 8009712:	4628      	mov	r0, r5
 8009714:	f7ff ffd0 	bl	80096b8 <IS42S32800J_RefreshRate>
 8009718:	3800      	subs	r0, #0
 800971a:	bf18      	it	ne
 800971c:	2001      	movne	r0, #1
 800971e:	4240      	negs	r0, r0
  return ret;
 8009720:	e7db      	b.n	80096da <IS42S32800J_Init+0x12>

08009722 <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8009722:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009726:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 800972a:	f44f 7180 	mov.w	r1, #256	; 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 800972e:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8009732:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009736:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 800973a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800973e:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 8009740:	2000      	movs	r0, #0
 8009742:	4770      	bx	lr

08009744 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8009744:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8009746:	f44f 7340 	mov.w	r3, #768	; 0x300
{
 800974a:	b095      	sub	sp, #84	; 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800974c:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8009750:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8009752:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8009754:	920f      	str	r2, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 2;
 8009756:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8009758:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800975a:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 800975c:	920b      	str	r2, [sp, #44]	; 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800975e:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009760:	9313      	str	r3, [sp, #76]	; 0x4c
  s_config.Match           = 0;
 8009762:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8009764:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 8009766:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009768:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800976a:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800976e:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  s_config.Interval        = 0x10;
 8009772:	2310      	movs	r3, #16
 8009774:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8009776:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800977a:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 800977c:	f240 1301 	movw	r3, #257	; 0x101
 8009780:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009782:	f241 3388 	movw	r3, #5000	; 0x1388
 8009786:	f003 fc88 	bl	800d09a <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800978a:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;

}
 800978c:	bf14      	ite	ne
 800978e:	f06f 0004 	mvnne.w	r0, #4
 8009792:	2000      	moveq	r0, #0
 8009794:	b015      	add	sp, #84	; 0x54
 8009796:	f85d fb04 	ldr.w	pc, [sp], #4

0800979a <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800979a:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800979c:	f241 3288 	movw	r2, #5000	; 0x1388
{
 80097a0:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80097a2:	bf08      	it	eq
 80097a4:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 80097a8:	b095      	sub	sp, #84	; 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80097aa:	bf18      	it	ne
 80097ac:	f44f 7380 	movne.w	r3, #256	; 0x100
{
 80097b0:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80097b2:	a906      	add	r1, sp, #24
{
 80097b4:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80097b6:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 80097b8:	2306      	movs	r3, #6
 80097ba:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80097bc:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80097be:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 80097c2:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 80097c4:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80097c6:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80097c8:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80097cc:	f003 fb6a 	bl	800cea4 <HAL_QSPI_Command>
 80097d0:	bb20      	cbnz	r0, 800981c <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 80097d2:	f240 2302 	movw	r3, #514	; 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 80097d6:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 80097d8:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 80097da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80097de:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80097e0:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 80097e2:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 80097e6:	f04f 0310 	mov.w	r3, #16
 80097ea:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 80097ee:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80097f2:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 80097f4:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 80097f8:	bf0c      	ite	eq
 80097fa:	f04f 7340 	moveq.w	r3, #50331648	; 0x3000000
 80097fe:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009802:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8009804:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009806:	f241 3388 	movw	r3, #5000	; 0x1388
 800980a:	f003 fc46 	bl	800d09a <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800980e:	2800      	cmp	r0, #0
 8009810:	bf0c      	ite	eq
 8009812:	2000      	moveq	r0, #0
 8009814:	f06f 0004 	mvnne.w	r0, #4
  }

  return MT25TL01G_OK;
}
 8009818:	b015      	add	sp, #84	; 0x54
 800981a:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 800981c:	f06f 0001 	mvn.w	r0, #1
 8009820:	e7fa      	b.n	8009818 <MT25TL01G_WriteEnable+0x7e>

08009822 <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009822:	2903      	cmp	r1, #3
{
 8009824:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009826:	bf08      	it	eq
 8009828:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 800982c:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800982e:	bf18      	it	ne
 8009830:	f44f 7380 	movne.w	r3, #256	; 0x100
{
 8009834:	4604      	mov	r4, r0
 8009836:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009838:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 800983a:	23b7      	movs	r3, #183	; 0xb7
 800983c:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800983e:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009840:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8009844:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 8009846:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009848:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800984a:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 800984e:	f7ff ffa4 	bl	800979a <MT25TL01G_WriteEnable>
 8009852:	b958      	cbnz	r0, 800986c <MT25TL01G_Enter4BytesAddressMode+0x4a>
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009854:	f241 3288 	movw	r2, #5000	; 0x1388
 8009858:	4669      	mov	r1, sp
 800985a:	4620      	mov	r0, r4
 800985c:	f003 fb22 	bl	800cea4 <HAL_QSPI_Command>
 8009860:	b920      	cbnz	r0, 800986c <MT25TL01G_Enter4BytesAddressMode+0x4a>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8009862:	4629      	mov	r1, r5
 8009864:	4620      	mov	r0, r4
 8009866:	f7ff ff6d 	bl	8009744 <MT25TL01G_AutoPollingMemReady>
 800986a:	b108      	cbz	r0, 8009870 <MT25TL01G_Enter4BytesAddressMode+0x4e>
    return MT25TL01G_ERROR_COMMAND;
 800986c:	f06f 0001 	mvn.w	r0, #1
}
 8009870:	b00f      	add	sp, #60	; 0x3c
 8009872:	bd30      	pop	{r4, r5, pc}

08009874 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8009874:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009876:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800987a:	b08f      	sub	sp, #60	; 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800987c:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009880:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8009882:	2335      	movs	r3, #53	; 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009884:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8009886:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8009888:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800988a:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 800988e:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 8009890:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009892:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009894:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009898:	f003 fb04 	bl	800cea4 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 800989c:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 800989e:	bf14      	ite	ne
 80098a0:	f06f 0001 	mvnne.w	r0, #1
 80098a4:	2000      	moveq	r0, #0
 80098a6:	b00f      	add	sp, #60	; 0x3c
 80098a8:	f85d fb04 	ldr.w	pc, [sp], #4

080098ac <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 80098ac:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80098ae:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 80098b2:	b08f      	sub	sp, #60	; 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80098b4:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80098b8:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 80098ba:	23f5      	movs	r3, #245	; 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80098bc:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 80098be:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80098c0:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80098c2:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80098c6:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 80098c8:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80098ca:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80098cc:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80098d0:	f003 fae8 	bl	800cea4 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 80098d4:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 80098d6:	bf14      	ite	ne
 80098d8:	f06f 0001 	mvnne.w	r0, #1
 80098dc:	2000      	moveq	r0, #0
 80098de:	b00f      	add	sp, #60	; 0x3c
 80098e0:	f85d fb04 	ldr.w	pc, [sp], #4

080098e4 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80098e4:	b500      	push	{lr}
 80098e6:	b091      	sub	sp, #68	; 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 80098e8:	2903      	cmp	r1, #3
 80098ea:	d80e      	bhi.n	800990a <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 80098ec:	e8df f001 	tbb	[pc, r1]
 80098f0:	3f342902 	.word	0x3f342902
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80098f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098f8:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 80098fa:	230e      	movs	r3, #14
 80098fc:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 80098fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009902:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8009904:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8009908:	930b      	str	r3, [sp, #44]	; 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 800990a:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800990c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8009910:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8009914:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8009916:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8009918:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800991c:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800991e:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8009920:	e9cd c20d 	strd	ip, r2, [sp, #52]	; 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8009924:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009926:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009928:	930f      	str	r3, [sp, #60]	; 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800992a:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800992e:	f003 fc04 	bl	800d13a <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 8009932:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 8009934:	bf14      	ite	ne
 8009936:	f06f 0005 	mvnne.w	r0, #5
 800993a:	2000      	moveq	r0, #0
 800993c:	b011      	add	sp, #68	; 0x44
 800993e:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009942:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009946:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8009948:	233d      	movs	r3, #61	; 0x3d
 800994a:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800994c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009950:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8009952:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009956:	e7d7      	b.n	8009908 <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009958:	f44f 7380 	mov.w	r3, #256	; 0x100
 800995c:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 800995e:	23ee      	movs	r3, #238	; 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8009960:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8009962:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009966:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8009968:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800996c:	e7cc      	b.n	8009908 <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800996e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009972:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8009974:	23ed      	movs	r3, #237	; 0xed
 8009976:	e7f3      	b.n	8009960 <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

08009978 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8009978:	b500      	push	{lr}
 800997a:	b091      	sub	sp, #68	; 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800997c:	2903      	cmp	r1, #3
 800997e:	d80e      	bhi.n	800999e <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 8009980:	e8df f001 	tbb	[pc, r1]
 8009984:	3b302502 	.word	0x3b302502
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009988:	f44f 7380 	mov.w	r3, #256	; 0x100
 800998c:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 800998e:	230c      	movs	r3, #12
 8009990:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8009992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009996:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8009998:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800999c:	930b      	str	r3, [sp, #44]	; 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 800999e:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80099a0:	466a      	mov	r2, sp
 80099a2:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 80099a4:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 80099a6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80099aa:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80099ac:	2300      	movs	r3, #0
 80099ae:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80099b0:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80099b2:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80099b6:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80099ba:	f003 fbbe 	bl	800d13a <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 80099be:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 80099c0:	bf14      	ite	ne
 80099c2:	f06f 0005 	mvnne.w	r0, #5
 80099c6:	2000      	moveq	r0, #0
 80099c8:	b011      	add	sp, #68	; 0x44
 80099ca:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80099ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099d2:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 80099d4:	23bc      	movs	r3, #188	; 0xbc
 80099d6:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 80099d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80099dc:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 80099de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80099e2:	e7db      	b.n	800999c <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80099e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099e8:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 80099ea:	23ec      	movs	r3, #236	; 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 80099ec:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80099ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80099f2:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80099f4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80099f8:	e7d0      	b.n	800999c <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80099fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80099fe:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8009a00:	23eb      	movs	r3, #235	; 0xeb
 8009a02:	e7f3      	b.n	80099ec <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

08009a04 <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009a04:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009a06:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8009a0a:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009a0c:	bf08      	it	eq
 8009a0e:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 8009a12:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009a14:	bf18      	it	ne
 8009a16:	f44f 7380 	movne.w	r3, #256	; 0x100
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009a1a:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009a1c:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 8009a1e:	2366      	movs	r3, #102	; 0x66
 8009a20:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8009a22:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009a24:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8009a28:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 8009a2a:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009a2c:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009a2e:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009a32:	f003 fa37 	bl	800cea4 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 8009a36:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 8009a38:	bf14      	ite	ne
 8009a3a:	f06f 0001 	mvnne.w	r0, #1
 8009a3e:	2000      	moveq	r0, #0
 8009a40:	b00f      	add	sp, #60	; 0x3c
 8009a42:	f85d fb04 	ldr.w	pc, [sp], #4

08009a46 <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009a46:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009a48:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8009a4c:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009a4e:	bf08      	it	eq
 8009a50:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 8009a54:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009a56:	bf18      	it	ne
 8009a58:	f44f 7380 	movne.w	r3, #256	; 0x100
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009a5c:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009a5e:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8009a60:	2399      	movs	r3, #153	; 0x99
 8009a62:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8009a64:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009a66:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8009a6a:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 8009a6c:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009a6e:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009a70:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009a74:	f003 fa16 	bl	800cea4 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 8009a78:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 8009a7a:	bf14      	ite	ne
 8009a7c:	f06f 0001 	mvnne.w	r0, #1
 8009a80:	2000      	moveq	r0, #0
 8009a82:	b00f      	add	sp, #60	; 0x3c
 8009a84:	f85d fb04 	ldr.w	pc, [sp], #4

08009a88 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8009a88:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8009a8a:	6884      	ldr	r4, [r0, #8]
 8009a8c:	8800      	ldrh	r0, [r0, #0]
 8009a8e:	46a4      	mov	ip, r4
}
 8009a90:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8009a94:	4760      	bx	ip

08009a96 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8009a96:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8009a98:	6844      	ldr	r4, [r0, #4]
 8009a9a:	8800      	ldrh	r0, [r0, #0]
 8009a9c:	46a4      	mov	ip, r4
}
 8009a9e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8009aa2:	4760      	bx	ip

08009aa4 <OTM8009A_IO_Delay.isra.0>:

/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8009aa4:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8009aa6:	68c3      	ldr	r3, [r0, #12]
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8009aa8:	4604      	mov	r4, r0
 8009aaa:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 8009aac:	4798      	blx	r3
 8009aae:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8009ab0:	68e3      	ldr	r3, [r4, #12]
 8009ab2:	4798      	blx	r3
 8009ab4:	1b83      	subs	r3, r0, r6
 8009ab6:	42ab      	cmp	r3, r5
 8009ab8:	d3fa      	bcc.n	8009ab0 <OTM8009A_IO_Delay.isra.0+0xc>
  {
  }
  return OTM8009A_OK;
}
 8009aba:	bd70      	pop	{r4, r5, r6, pc}

08009abc <OTM8009A_Init>:
{
 8009abc:	e92d 4f37 	stmdb	sp!, {r0, r1, r2, r4, r5, r8, r9, sl, fp, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	f100 0810 	add.w	r8, r0, #16
{
 8009ac6:	4682      	mov	sl, r0
 8009ac8:	4689      	mov	r9, r1
 8009aca:	4693      	mov	fp, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009acc:	4619      	mov	r1, r3
 8009ace:	4add      	ldr	r2, [pc, #884]	; (8009e44 <OTM8009A_Init+0x388>)
 8009ad0:	4640      	mov	r0, r8
 8009ad2:	f000 fbad 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8009ad6:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009ad8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8009ada:	4adb      	ldr	r2, [pc, #876]	; (8009e48 <OTM8009A_Init+0x38c>)
 8009adc:	21ff      	movs	r1, #255	; 0xff
 8009ade:	4640      	mov	r0, r8
 8009ae0:	f000 fba6 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009ae4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8009ae6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009ae8:	4ad8      	ldr	r2, [pc, #864]	; (8009e4c <OTM8009A_Init+0x390>)
 8009aea:	4619      	mov	r1, r3
 8009aec:	4640      	mov	r0, r8
 8009aee:	f000 fb9f 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8009af2:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009af4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8009af6:	4ad6      	ldr	r2, [pc, #856]	; (8009e50 <OTM8009A_Init+0x394>)
 8009af8:	21ff      	movs	r1, #255	; 0xff
 8009afa:	4640      	mov	r0, r8
 8009afc:	f000 fb98 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009b00:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8009b02:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009b04:	4ad1      	ldr	r2, [pc, #836]	; (8009e4c <OTM8009A_Init+0x390>)
 8009b06:	4619      	mov	r1, r3
 8009b08:	4640      	mov	r0, r8
 8009b0a:	f000 fb91 	bl	800a230 <otm8009a_write_reg>
 8009b0e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8009b10:	2300      	movs	r3, #0
 8009b12:	4ad0      	ldr	r2, [pc, #832]	; (8009e54 <OTM8009A_Init+0x398>)
 8009b14:	21c4      	movs	r1, #196	; 0xc4
 8009b16:	4640      	mov	r0, r8
 8009b18:	f000 fb8a 	bl	800a230 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8009b1c:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8009b1e:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8009b20:	4650      	mov	r0, sl
 8009b22:	f7ff ffbf 	bl	8009aa4 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8009b26:	2300      	movs	r3, #0
 8009b28:	4acb      	ldr	r2, [pc, #812]	; (8009e58 <OTM8009A_Init+0x39c>)
 8009b2a:	4640      	mov	r0, r8
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	4dcb      	ldr	r5, [pc, #812]	; (8009e5c <OTM8009A_Init+0x3a0>)
 8009b30:	f000 fb7e 	bl	800a230 <otm8009a_write_reg>
 8009b34:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8009b36:	2300      	movs	r3, #0
 8009b38:	4ac9      	ldr	r2, [pc, #804]	; (8009e60 <OTM8009A_Init+0x3a4>)
 8009b3a:	21c4      	movs	r1, #196	; 0xc4
 8009b3c:	4640      	mov	r0, r8
 8009b3e:	f000 fb77 	bl	800a230 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8009b42:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8009b44:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8009b46:	4650      	mov	r0, sl
 8009b48:	f7ff ffac 	bl	8009aa4 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	4ac5      	ldr	r2, [pc, #788]	; (8009e64 <OTM8009A_Init+0x3a8>)
 8009b50:	4640      	mov	r0, r8
 8009b52:	4619      	mov	r1, r3
 8009b54:	f000 fb6c 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8009b58:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8009b5a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8009b5c:	4ac2      	ldr	r2, [pc, #776]	; (8009e68 <OTM8009A_Init+0x3ac>)
 8009b5e:	21c5      	movs	r1, #197	; 0xc5
 8009b60:	4640      	mov	r0, r8
 8009b62:	f000 fb65 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8009b66:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8009b68:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8009b6a:	4ac0      	ldr	r2, [pc, #768]	; (8009e6c <OTM8009A_Init+0x3b0>)
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	4640      	mov	r0, r8
 8009b70:	f000 fb5e 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8009b74:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8009b76:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8009b78:	4abd      	ldr	r2, [pc, #756]	; (8009e70 <OTM8009A_Init+0x3b4>)
 8009b7a:	21c5      	movs	r1, #197	; 0xc5
 8009b7c:	4640      	mov	r0, r8
 8009b7e:	f000 fb57 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8009b82:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8009b84:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8009b86:	4abb      	ldr	r2, [pc, #748]	; (8009e74 <OTM8009A_Init+0x3b8>)
 8009b88:	4619      	mov	r1, r3
 8009b8a:	4640      	mov	r0, r8
 8009b8c:	f000 fb50 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8009b90:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8009b92:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8009b94:	4ab8      	ldr	r2, [pc, #736]	; (8009e78 <OTM8009A_Init+0x3bc>)
 8009b96:	21c0      	movs	r1, #192	; 0xc0
 8009b98:	4640      	mov	r0, r8
 8009b9a:	f000 fb49 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009b9e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8009ba0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009ba2:	4aa8      	ldr	r2, [pc, #672]	; (8009e44 <OTM8009A_Init+0x388>)
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	4640      	mov	r0, r8
 8009ba8:	f000 fb42 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8009bac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009bae:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8009bb0:	4ab2      	ldr	r2, [pc, #712]	; (8009e7c <OTM8009A_Init+0x3c0>)
 8009bb2:	21d9      	movs	r1, #217	; 0xd9
 8009bb4:	4640      	mov	r0, r8
 8009bb6:	f000 fb3b 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8009bba:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8009bbc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8009bbe:	4ab0      	ldr	r2, [pc, #704]	; (8009e80 <OTM8009A_Init+0x3c4>)
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	4640      	mov	r0, r8
 8009bc4:	f000 fb34 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8009bc8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8009bca:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8009bcc:	4aad      	ldr	r2, [pc, #692]	; (8009e84 <OTM8009A_Init+0x3c8>)
 8009bce:	21c1      	movs	r1, #193	; 0xc1
 8009bd0:	4640      	mov	r0, r8
 8009bd2:	f000 fb2d 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8009bd6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8009bd8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8009bda:	4aab      	ldr	r2, [pc, #684]	; (8009e88 <OTM8009A_Init+0x3cc>)
 8009bdc:	4619      	mov	r1, r3
 8009bde:	4640      	mov	r0, r8
 8009be0:	f000 fb26 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8009be4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8009be6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8009be8:	4aa8      	ldr	r2, [pc, #672]	; (8009e8c <OTM8009A_Init+0x3d0>)
 8009bea:	21c1      	movs	r1, #193	; 0xc1
 8009bec:	4640      	mov	r0, r8
 8009bee:	f000 fb1f 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8009bf2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8009bf4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8009bf6:	4aa6      	ldr	r2, [pc, #664]	; (8009e90 <OTM8009A_Init+0x3d4>)
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	4640      	mov	r0, r8
 8009bfc:	f000 fb18 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8009c00:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8009c02:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8009c04:	4aa3      	ldr	r2, [pc, #652]	; (8009e94 <OTM8009A_Init+0x3d8>)
 8009c06:	21c5      	movs	r1, #197	; 0xc5
 8009c08:	4640      	mov	r0, r8
 8009c0a:	f000 fb11 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8009c0e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8009c10:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8009c12:	4aa1      	ldr	r2, [pc, #644]	; (8009e98 <OTM8009A_Init+0x3dc>)
 8009c14:	4619      	mov	r1, r3
 8009c16:	4640      	mov	r0, r8
 8009c18:	f000 fb0a 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8009c1c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8009c1e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8009c20:	4a93      	ldr	r2, [pc, #588]	; (8009e70 <OTM8009A_Init+0x3b4>)
 8009c22:	21c5      	movs	r1, #197	; 0xc5
 8009c24:	4640      	mov	r0, r8
 8009c26:	f000 fb03 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009c2a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8009c2c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009c2e:	4a85      	ldr	r2, [pc, #532]	; (8009e44 <OTM8009A_Init+0x388>)
 8009c30:	4619      	mov	r1, r3
 8009c32:	4640      	mov	r0, r8
 8009c34:	f000 fafc 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8009c38:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009c3a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8009c3c:	4a97      	ldr	r2, [pc, #604]	; (8009e9c <OTM8009A_Init+0x3e0>)
 8009c3e:	21d8      	movs	r1, #216	; 0xd8
 8009c40:	4640      	mov	r0, r8
 8009c42:	f000 faf5 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8009c46:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8009c48:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8009c4a:	4a95      	ldr	r2, [pc, #596]	; (8009ea0 <OTM8009A_Init+0x3e4>)
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	4640      	mov	r0, r8
 8009c50:	f000 faee 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8009c54:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8009c56:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8009c58:	4a92      	ldr	r2, [pc, #584]	; (8009ea4 <OTM8009A_Init+0x3e8>)
 8009c5a:	21c5      	movs	r1, #197	; 0xc5
 8009c5c:	4640      	mov	r0, r8
 8009c5e:	f000 fae7 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8009c62:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8009c64:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8009c66:	4a90      	ldr	r2, [pc, #576]	; (8009ea8 <OTM8009A_Init+0x3ec>)
 8009c68:	4619      	mov	r1, r3
 8009c6a:	4640      	mov	r0, r8
 8009c6c:	f000 fae0 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8009c70:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8009c72:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8009c74:	4a8d      	ldr	r2, [pc, #564]	; (8009eac <OTM8009A_Init+0x3f0>)
 8009c76:	21c0      	movs	r1, #192	; 0xc0
 8009c78:	4640      	mov	r0, r8
 8009c7a:	f000 fad9 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8009c7e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8009c80:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8009c82:	4a8b      	ldr	r2, [pc, #556]	; (8009eb0 <OTM8009A_Init+0x3f4>)
 8009c84:	4619      	mov	r1, r3
 8009c86:	4640      	mov	r0, r8
 8009c88:	f000 fad2 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8009c8c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8009c8e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8009c90:	4a88      	ldr	r2, [pc, #544]	; (8009eb4 <OTM8009A_Init+0x3f8>)
 8009c92:	21c5      	movs	r1, #197	; 0xc5
 8009c94:	4640      	mov	r0, r8
 8009c96:	f000 facb 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8009c9a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8009c9c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8009c9e:	4a78      	ldr	r2, [pc, #480]	; (8009e80 <OTM8009A_Init+0x3c4>)
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	4640      	mov	r0, r8
 8009ca4:	f000 fac4 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8009ca8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8009caa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8009cac:	4a82      	ldr	r2, [pc, #520]	; (8009eb8 <OTM8009A_Init+0x3fc>)
 8009cae:	21c4      	movs	r1, #196	; 0xc4
 8009cb0:	4640      	mov	r0, r8
 8009cb2:	f000 fabd 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8009cb6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8009cb8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8009cba:	4a73      	ldr	r2, [pc, #460]	; (8009e88 <OTM8009A_Init+0x3cc>)
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	4640      	mov	r0, r8
 8009cc0:	f000 fab6 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8009cc4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8009cc6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8009cc8:	4a7c      	ldr	r2, [pc, #496]	; (8009ebc <OTM8009A_Init+0x400>)
 8009cca:	21c1      	movs	r1, #193	; 0xc1
 8009ccc:	4640      	mov	r0, r8
 8009cce:	f000 faaf 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8009cd2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8009cd4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8009cd6:	4a7a      	ldr	r2, [pc, #488]	; (8009ec0 <OTM8009A_Init+0x404>)
 8009cd8:	4619      	mov	r1, r3
 8009cda:	4640      	mov	r0, r8
 8009cdc:	f000 faa8 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8009ce0:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8009ce2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8009ce4:	4a77      	ldr	r2, [pc, #476]	; (8009ec4 <OTM8009A_Init+0x408>)
 8009ce6:	21b3      	movs	r1, #179	; 0xb3
 8009ce8:	4640      	mov	r0, r8
 8009cea:	f000 faa1 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009cee:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8009cf0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009cf2:	4a56      	ldr	r2, [pc, #344]	; (8009e4c <OTM8009A_Init+0x390>)
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	4640      	mov	r0, r8
 8009cf8:	f000 fa9a 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8009cfc:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009cfe:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8009d00:	4a71      	ldr	r2, [pc, #452]	; (8009ec8 <OTM8009A_Init+0x40c>)
 8009d02:	21ce      	movs	r1, #206	; 0xce
 8009d04:	4640      	mov	r0, r8
 8009d06:	f000 fa93 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8009d0a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8009d0c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8009d0e:	4a6f      	ldr	r2, [pc, #444]	; (8009ecc <OTM8009A_Init+0x410>)
 8009d10:	4619      	mov	r1, r3
 8009d12:	4640      	mov	r0, r8
 8009d14:	f000 fa8c 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8009d18:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8009d1a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8009d1c:	4a6c      	ldr	r2, [pc, #432]	; (8009ed0 <OTM8009A_Init+0x414>)
 8009d1e:	21ce      	movs	r1, #206	; 0xce
 8009d20:	4640      	mov	r0, r8
 8009d22:	f000 fa85 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8009d26:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8009d28:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8009d2a:	4a6a      	ldr	r2, [pc, #424]	; (8009ed4 <OTM8009A_Init+0x418>)
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	4640      	mov	r0, r8
 8009d30:	f000 fa7e 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8009d34:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8009d36:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8009d38:	4a67      	ldr	r2, [pc, #412]	; (8009ed8 <OTM8009A_Init+0x41c>)
 8009d3a:	21ce      	movs	r1, #206	; 0xce
 8009d3c:	4640      	mov	r0, r8
 8009d3e:	f000 fa77 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8009d42:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8009d44:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8009d46:	4a65      	ldr	r2, [pc, #404]	; (8009edc <OTM8009A_Init+0x420>)
 8009d48:	4619      	mov	r1, r3
 8009d4a:	4640      	mov	r0, r8
 8009d4c:	f000 fa70 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8009d50:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8009d52:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8009d54:	4a62      	ldr	r2, [pc, #392]	; (8009ee0 <OTM8009A_Init+0x424>)
 8009d56:	21cf      	movs	r1, #207	; 0xcf
 8009d58:	4640      	mov	r0, r8
 8009d5a:	f000 fa69 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8009d5e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8009d60:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8009d62:	4a60      	ldr	r2, [pc, #384]	; (8009ee4 <OTM8009A_Init+0x428>)
 8009d64:	4619      	mov	r1, r3
 8009d66:	4640      	mov	r0, r8
 8009d68:	f000 fa62 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8009d6c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8009d6e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8009d70:	4a5d      	ldr	r2, [pc, #372]	; (8009ee8 <OTM8009A_Init+0x42c>)
 8009d72:	21cf      	movs	r1, #207	; 0xcf
 8009d74:	4640      	mov	r0, r8
 8009d76:	f000 fa5b 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009d7a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8009d7c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009d7e:	4a33      	ldr	r2, [pc, #204]	; (8009e4c <OTM8009A_Init+0x390>)
 8009d80:	4619      	mov	r1, r3
 8009d82:	4640      	mov	r0, r8
 8009d84:	f000 fa54 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8009d88:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009d8a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8009d8c:	4a57      	ldr	r2, [pc, #348]	; (8009eec <OTM8009A_Init+0x430>)
 8009d8e:	21cb      	movs	r1, #203	; 0xcb
 8009d90:	4640      	mov	r0, r8
 8009d92:	f000 fa4d 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8009d96:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8009d98:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8009d9a:	4a55      	ldr	r2, [pc, #340]	; (8009ef0 <OTM8009A_Init+0x434>)
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	4640      	mov	r0, r8
 8009da0:	f000 fa46 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8009da4:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8009da6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8009da8:	4a52      	ldr	r2, [pc, #328]	; (8009ef4 <OTM8009A_Init+0x438>)
 8009daa:	21cb      	movs	r1, #203	; 0xcb
 8009dac:	4640      	mov	r0, r8
 8009dae:	f000 fa3f 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8009db2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8009db4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8009db6:	4a45      	ldr	r2, [pc, #276]	; (8009ecc <OTM8009A_Init+0x410>)
 8009db8:	4619      	mov	r1, r3
 8009dba:	4640      	mov	r0, r8
 8009dbc:	f000 fa38 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8009dc0:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8009dc2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8009dc4:	4a4c      	ldr	r2, [pc, #304]	; (8009ef8 <OTM8009A_Init+0x43c>)
 8009dc6:	21cb      	movs	r1, #203	; 0xcb
 8009dc8:	4640      	mov	r0, r8
 8009dca:	f000 fa31 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8009dce:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8009dd0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8009dd2:	4a40      	ldr	r2, [pc, #256]	; (8009ed4 <OTM8009A_Init+0x418>)
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	4640      	mov	r0, r8
 8009dd8:	f000 fa2a 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8009ddc:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8009dde:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8009de0:	4a46      	ldr	r2, [pc, #280]	; (8009efc <OTM8009A_Init+0x440>)
 8009de2:	21cb      	movs	r1, #203	; 0xcb
 8009de4:	4640      	mov	r0, r8
 8009de6:	f000 fa23 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8009dea:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8009dec:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8009dee:	4a3b      	ldr	r2, [pc, #236]	; (8009edc <OTM8009A_Init+0x420>)
 8009df0:	4619      	mov	r1, r3
 8009df2:	4640      	mov	r0, r8
 8009df4:	f000 fa1c 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8009df8:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8009dfa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8009dfc:	4a40      	ldr	r2, [pc, #256]	; (8009f00 <OTM8009A_Init+0x444>)
 8009dfe:	21cb      	movs	r1, #203	; 0xcb
 8009e00:	4640      	mov	r0, r8
 8009e02:	f000 fa15 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8009e06:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8009e08:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8009e0a:	4a36      	ldr	r2, [pc, #216]	; (8009ee4 <OTM8009A_Init+0x428>)
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	4640      	mov	r0, r8
 8009e10:	f000 fa0e 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8009e14:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8009e16:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8009e18:	4a3a      	ldr	r2, [pc, #232]	; (8009f04 <OTM8009A_Init+0x448>)
 8009e1a:	21cb      	movs	r1, #203	; 0xcb
 8009e1c:	4640      	mov	r0, r8
 8009e1e:	f000 fa07 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8009e22:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8009e24:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8009e26:	4a38      	ldr	r2, [pc, #224]	; (8009f08 <OTM8009A_Init+0x44c>)
 8009e28:	4619      	mov	r1, r3
 8009e2a:	4640      	mov	r0, r8
 8009e2c:	f000 fa00 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8009e30:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8009e32:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8009e34:	4a35      	ldr	r2, [pc, #212]	; (8009f0c <OTM8009A_Init+0x450>)
 8009e36:	21cb      	movs	r1, #203	; 0xcb
 8009e38:	4640      	mov	r0, r8
 8009e3a:	f000 f9f9 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8009e3e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8009e40:	4404      	add	r4, r0
 8009e42:	e065      	b.n	8009f10 <OTM8009A_Init+0x454>
 8009e44:	080256ad 	.word	0x080256ad
 8009e48:	080255a0 	.word	0x080255a0
 8009e4c:	080256ae 	.word	0x080256ae
 8009e50:	0802561b 	.word	0x0802561b
 8009e54:	080256af 	.word	0x080256af
 8009e58:	080256b0 	.word	0x080256b0
 8009e5c:	24005174 	.word	0x24005174
 8009e60:	080256b1 	.word	0x080256b1
 8009e64:	080256b2 	.word	0x080256b2
 8009e68:	080256b3 	.word	0x080256b3
 8009e6c:	080256b4 	.word	0x080256b4
 8009e70:	080256b5 	.word	0x080256b5
 8009e74:	080256b6 	.word	0x080256b6
 8009e78:	080256b7 	.word	0x080256b7
 8009e7c:	080256b8 	.word	0x080256b8
 8009e80:	080256b9 	.word	0x080256b9
 8009e84:	080256ba 	.word	0x080256ba
 8009e88:	080256bb 	.word	0x080256bb
 8009e8c:	080256bc 	.word	0x080256bc
 8009e90:	080256bd 	.word	0x080256bd
 8009e94:	080256be 	.word	0x080256be
 8009e98:	080256bf 	.word	0x080256bf
 8009e9c:	08025686 	.word	0x08025686
 8009ea0:	080256c0 	.word	0x080256c0
 8009ea4:	080256c1 	.word	0x080256c1
 8009ea8:	080256c2 	.word	0x080256c2
 8009eac:	080256c3 	.word	0x080256c3
 8009eb0:	080256c4 	.word	0x080256c4
 8009eb4:	080256c5 	.word	0x080256c5
 8009eb8:	080256c6 	.word	0x080256c6
 8009ebc:	080256c7 	.word	0x080256c7
 8009ec0:	080256c8 	.word	0x080256c8
 8009ec4:	08025688 	.word	0x08025688
 8009ec8:	0802568a 	.word	0x0802568a
 8009ecc:	080256c9 	.word	0x080256c9
 8009ed0:	08025690 	.word	0x08025690
 8009ed4:	080256ca 	.word	0x080256ca
 8009ed8:	0802569e 	.word	0x0802569e
 8009edc:	080256cb 	.word	0x080256cb
 8009ee0:	080255a3 	.word	0x080255a3
 8009ee4:	080256cc 	.word	0x080256cc
 8009ee8:	080256d9 	.word	0x080256d9
 8009eec:	080255ad 	.word	0x080255ad
 8009ef0:	080256cd 	.word	0x080256cd
 8009ef4:	080255b7 	.word	0x080255b7
 8009ef8:	080255c6 	.word	0x080255c6
 8009efc:	080255d5 	.word	0x080255d5
 8009f00:	080255df 	.word	0x080255df
 8009f04:	080255ee 	.word	0x080255ee
 8009f08:	080256ce 	.word	0x080256ce
 8009f0c:	080255fd 	.word	0x080255fd
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8009f10:	4a99      	ldr	r2, [pc, #612]	; (800a178 <OTM8009A_Init+0x6bc>)
 8009f12:	4619      	mov	r1, r3
 8009f14:	4640      	mov	r0, r8
 8009f16:	f000 f98b 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8009f1a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8009f1c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8009f1e:	4a97      	ldr	r2, [pc, #604]	; (800a17c <OTM8009A_Init+0x6c0>)
 8009f20:	21cb      	movs	r1, #203	; 0xcb
 8009f22:	4640      	mov	r0, r8
 8009f24:	f000 f984 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009f28:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8009f2a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009f2c:	4a94      	ldr	r2, [pc, #592]	; (800a180 <OTM8009A_Init+0x6c4>)
 8009f2e:	4619      	mov	r1, r3
 8009f30:	4640      	mov	r0, r8
 8009f32:	f000 f97d 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8009f36:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009f38:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8009f3a:	4a92      	ldr	r2, [pc, #584]	; (800a184 <OTM8009A_Init+0x6c8>)
 8009f3c:	21cc      	movs	r1, #204	; 0xcc
 8009f3e:	4640      	mov	r0, r8
 8009f40:	f000 f976 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8009f44:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8009f46:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8009f48:	4a8f      	ldr	r2, [pc, #572]	; (800a188 <OTM8009A_Init+0x6cc>)
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	4640      	mov	r0, r8
 8009f4e:	f000 f96f 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8009f52:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8009f54:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8009f56:	4a8d      	ldr	r2, [pc, #564]	; (800a18c <OTM8009A_Init+0x6d0>)
 8009f58:	21cc      	movs	r1, #204	; 0xcc
 8009f5a:	4640      	mov	r0, r8
 8009f5c:	f000 f968 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8009f60:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8009f62:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8009f64:	4a8a      	ldr	r2, [pc, #552]	; (800a190 <OTM8009A_Init+0x6d4>)
 8009f66:	4619      	mov	r1, r3
 8009f68:	4640      	mov	r0, r8
 8009f6a:	f000 f961 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8009f6e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8009f70:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8009f72:	4a88      	ldr	r2, [pc, #544]	; (800a194 <OTM8009A_Init+0x6d8>)
 8009f74:	21cc      	movs	r1, #204	; 0xcc
 8009f76:	4640      	mov	r0, r8
 8009f78:	f000 f95a 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8009f7c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8009f7e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8009f80:	4a85      	ldr	r2, [pc, #532]	; (800a198 <OTM8009A_Init+0x6dc>)
 8009f82:	4619      	mov	r1, r3
 8009f84:	4640      	mov	r0, r8
 8009f86:	f000 f953 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8009f8a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8009f8c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8009f8e:	4a83      	ldr	r2, [pc, #524]	; (800a19c <OTM8009A_Init+0x6e0>)
 8009f90:	21cc      	movs	r1, #204	; 0xcc
 8009f92:	4640      	mov	r0, r8
 8009f94:	f000 f94c 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8009f98:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8009f9a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8009f9c:	4a80      	ldr	r2, [pc, #512]	; (800a1a0 <OTM8009A_Init+0x6e4>)
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	4640      	mov	r0, r8
 8009fa2:	f000 f945 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8009fa6:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8009fa8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8009faa:	4a7e      	ldr	r2, [pc, #504]	; (800a1a4 <OTM8009A_Init+0x6e8>)
 8009fac:	21cc      	movs	r1, #204	; 0xcc
 8009fae:	4640      	mov	r0, r8
 8009fb0:	f000 f93e 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8009fb4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8009fb6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8009fb8:	4a7b      	ldr	r2, [pc, #492]	; (800a1a8 <OTM8009A_Init+0x6ec>)
 8009fba:	4619      	mov	r1, r3
 8009fbc:	4640      	mov	r0, r8
 8009fbe:	f000 f937 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8009fc2:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8009fc4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8009fc6:	4a79      	ldr	r2, [pc, #484]	; (800a1ac <OTM8009A_Init+0x6f0>)
 8009fc8:	21cc      	movs	r1, #204	; 0xcc
 8009fca:	4640      	mov	r0, r8
 8009fcc:	f000 f930 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8009fd0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8009fd2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8009fd4:	4a76      	ldr	r2, [pc, #472]	; (800a1b0 <OTM8009A_Init+0x6f4>)
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	4640      	mov	r0, r8
 8009fda:	f000 f929 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8009fde:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8009fe0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8009fe2:	4a74      	ldr	r2, [pc, #464]	; (800a1b4 <OTM8009A_Init+0x6f8>)
 8009fe4:	21c5      	movs	r1, #197	; 0xc5
 8009fe6:	4640      	mov	r0, r8
 8009fe8:	f000 f922 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8009fec:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8009fee:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8009ff0:	4a71      	ldr	r2, [pc, #452]	; (800a1b8 <OTM8009A_Init+0x6fc>)
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	4640      	mov	r0, r8
 8009ff6:	f000 f91b 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8009ffa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8009ffc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8009ffe:	4a6f      	ldr	r2, [pc, #444]	; (800a1bc <OTM8009A_Init+0x700>)
 800a000:	21f5      	movs	r1, #245	; 0xf5
 800a002:	4640      	mov	r0, r8
 800a004:	f000 f914 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800a008:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 800a00a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800a00c:	4a6c      	ldr	r2, [pc, #432]	; (800a1c0 <OTM8009A_Init+0x704>)
 800a00e:	4619      	mov	r1, r3
 800a010:	4640      	mov	r0, r8
 800a012:	f000 f90d 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800a016:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800a018:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800a01a:	4a6a      	ldr	r2, [pc, #424]	; (800a1c4 <OTM8009A_Init+0x708>)
 800a01c:	21c6      	movs	r1, #198	; 0xc6
 800a01e:	4640      	mov	r0, r8
 800a020:	f000 f906 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800a024:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800a026:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800a028:	4a67      	ldr	r2, [pc, #412]	; (800a1c8 <OTM8009A_Init+0x70c>)
 800a02a:	4619      	mov	r1, r3
 800a02c:	4640      	mov	r0, r8
 800a02e:	f000 f8ff 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800a032:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800a034:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800a036:	4a65      	ldr	r2, [pc, #404]	; (800a1cc <OTM8009A_Init+0x710>)
 800a038:	21ff      	movs	r1, #255	; 0xff
 800a03a:	4640      	mov	r0, r8
 800a03c:	f000 f8f8 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800a040:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800a042:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800a044:	4a60      	ldr	r2, [pc, #384]	; (800a1c8 <OTM8009A_Init+0x70c>)
 800a046:	4619      	mov	r1, r3
 800a048:	4640      	mov	r0, r8
 800a04a:	f000 f8f1 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800a04e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800a050:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800a052:	4a5d      	ldr	r2, [pc, #372]	; (800a1c8 <OTM8009A_Init+0x70c>)
 800a054:	4619      	mov	r1, r3
 800a056:	4640      	mov	r0, r8
 800a058:	f000 f8ea 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 800a05c:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800a05e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 800a060:	4a5b      	ldr	r2, [pc, #364]	; (800a1d0 <OTM8009A_Init+0x714>)
 800a062:	21e1      	movs	r1, #225	; 0xe1
 800a064:	4640      	mov	r0, r8
 800a066:	f000 f8e3 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800a06a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 800a06c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800a06e:	4a56      	ldr	r2, [pc, #344]	; (800a1c8 <OTM8009A_Init+0x70c>)
 800a070:	4619      	mov	r1, r3
 800a072:	4640      	mov	r0, r8
 800a074:	f000 f8dc 	bl	800a230 <otm8009a_write_reg>
 800a078:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 800a07a:	2310      	movs	r3, #16
 800a07c:	4a55      	ldr	r2, [pc, #340]	; (800a1d4 <OTM8009A_Init+0x718>)
 800a07e:	21e2      	movs	r1, #226	; 0xe2
 800a080:	4640      	mov	r0, r8
 800a082:	f000 f8d5 	bl	800a230 <otm8009a_write_reg>
 800a086:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 800a088:	2300      	movs	r3, #0
 800a08a:	4a53      	ldr	r2, [pc, #332]	; (800a1d8 <OTM8009A_Init+0x71c>)
 800a08c:	2111      	movs	r1, #17
 800a08e:	4640      	mov	r0, r8
 800a090:	f000 f8ce 	bl	800a230 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 120);
 800a094:	2178      	movs	r1, #120	; 0x78
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 800a096:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 800a098:	4650      	mov	r0, sl
 800a09a:	f7ff fd03 	bl	8009aa4 <OTM8009A_IO_Delay.isra.0>
  switch(ColorCoding)
 800a09e:	f1b9 0f00 	cmp.w	r9, #0
 800a0a2:	d062      	beq.n	800a16a <OTM8009A_Init+0x6ae>
 800a0a4:	f1b9 0f02 	cmp.w	r9, #2
 800a0a8:	d108      	bne.n	800a0bc <OTM8009A_Init+0x600>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	4a4b      	ldr	r2, [pc, #300]	; (800a1dc <OTM8009A_Init+0x720>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 800a0ae:	213a      	movs	r1, #58	; 0x3a
 800a0b0:	4640      	mov	r0, r8
 800a0b2:	f000 f8bd 	bl	800a230 <otm8009a_write_reg>
 800a0b6:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 800a0b8:	f8c5 9004 	str.w	r9, [r5, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800a0bc:	f1bb 0f01 	cmp.w	fp, #1
 800a0c0:	d156      	bne.n	800a170 <OTM8009A_Init+0x6b4>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 800a0c2:	2360      	movs	r3, #96	; 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 800a0c4:	f10d 0207 	add.w	r2, sp, #7
 800a0c8:	2136      	movs	r1, #54	; 0x36
 800a0ca:	4640      	mov	r0, r8
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 800a0cc:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	f000 f8ad 	bl	800a230 <otm8009a_write_reg>
 800a0d6:	4404      	add	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800a0d8:	2304      	movs	r3, #4
 800a0da:	4a41      	ldr	r2, [pc, #260]	; (800a1e0 <OTM8009A_Init+0x724>)
 800a0dc:	212a      	movs	r1, #42	; 0x2a
 800a0de:	4640      	mov	r0, r8
 800a0e0:	f000 f8a6 	bl	800a230 <otm8009a_write_reg>
 800a0e4:	4404      	add	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 800a0e6:	2304      	movs	r3, #4
 800a0e8:	4a3e      	ldr	r2, [pc, #248]	; (800a1e4 <OTM8009A_Init+0x728>)
 800a0ea:	212b      	movs	r1, #43	; 0x2b
 800a0ec:	4640      	mov	r0, r8
 800a0ee:	f000 f89f 	bl	800a230 <otm8009a_write_reg>
 800a0f2:	4404      	add	r4, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 800a0f4:	f8c5 b000 	str.w	fp, [r5]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	4a3b      	ldr	r2, [pc, #236]	; (800a1e8 <OTM8009A_Init+0x72c>)
 800a0fc:	2151      	movs	r1, #81	; 0x51
 800a0fe:	4640      	mov	r0, r8
 800a100:	f000 f896 	bl	800a230 <otm8009a_write_reg>
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 800a104:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 800a106:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 800a108:	4a38      	ldr	r2, [pc, #224]	; (800a1ec <OTM8009A_Init+0x730>)
 800a10a:	2153      	movs	r1, #83	; 0x53
 800a10c:	4640      	mov	r0, r8
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 800a10e:	60ab      	str	r3, [r5, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 800a110:	f000 f88e 	bl	800a230 <otm8009a_write_reg>
 800a114:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 800a116:	2300      	movs	r3, #0
 800a118:	4a35      	ldr	r2, [pc, #212]	; (800a1f0 <OTM8009A_Init+0x734>)
 800a11a:	2155      	movs	r1, #85	; 0x55
 800a11c:	4640      	mov	r0, r8
 800a11e:	f000 f887 	bl	800a230 <otm8009a_write_reg>
 800a122:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 800a124:	2300      	movs	r3, #0
 800a126:	4a33      	ldr	r2, [pc, #204]	; (800a1f4 <OTM8009A_Init+0x738>)
 800a128:	215e      	movs	r1, #94	; 0x5e
 800a12a:	4640      	mov	r0, r8
 800a12c:	f000 f880 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 800a130:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 800a132:	1825      	adds	r5, r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 800a134:	4a30      	ldr	r2, [pc, #192]	; (800a1f8 <OTM8009A_Init+0x73c>)
 800a136:	2129      	movs	r1, #41	; 0x29
 800a138:	4640      	mov	r0, r8
 800a13a:	f000 f879 	bl	800a230 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800a13e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 800a140:	4405      	add	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800a142:	4a21      	ldr	r2, [pc, #132]	; (800a1c8 <OTM8009A_Init+0x70c>)
 800a144:	4619      	mov	r1, r3
 800a146:	4640      	mov	r0, r8
 800a148:	f000 f872 	bl	800a230 <otm8009a_write_reg>
 800a14c:	4405      	add	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 800a14e:	2300      	movs	r3, #0
 800a150:	4a2a      	ldr	r2, [pc, #168]	; (800a1fc <OTM8009A_Init+0x740>)
 800a152:	212c      	movs	r1, #44	; 0x2c
 800a154:	4640      	mov	r0, r8
 800a156:	f000 f86b 	bl	800a230 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 800a15a:	42c5      	cmn	r5, r0
}
 800a15c:	bf14      	ite	ne
 800a15e:	f04f 30ff 	movne.w	r0, #4294967295
 800a162:	2000      	moveq	r0, #0
 800a164:	b003      	add	sp, #12
 800a166:	e8bd 8f30 	ldmia.w	sp!, {r4, r5, r8, r9, sl, fp, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 800a16a:	464b      	mov	r3, r9
 800a16c:	4a24      	ldr	r2, [pc, #144]	; (800a200 <OTM8009A_Init+0x744>)
 800a16e:	e79e      	b.n	800a0ae <OTM8009A_Init+0x5f2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 800a170:	2300      	movs	r3, #0
 800a172:	602b      	str	r3, [r5, #0]
 800a174:	e7c0      	b.n	800a0f8 <OTM8009A_Init+0x63c>
 800a176:	bf00      	nop
 800a178:	080256cf 	.word	0x080256cf
 800a17c:	08025607 	.word	0x08025607
 800a180:	080256ae 	.word	0x080256ae
 800a184:	08025611 	.word	0x08025611
 800a188:	080256cd 	.word	0x080256cd
 800a18c:	0802561d 	.word	0x0802561d
 800a190:	080256c9 	.word	0x080256c9
 800a194:	0802562c 	.word	0x0802562c
 800a198:	080256ca 	.word	0x080256ca
 800a19c:	0802563b 	.word	0x0802563b
 800a1a0:	080256cb 	.word	0x080256cb
 800a1a4:	08025645 	.word	0x08025645
 800a1a8:	080256cc 	.word	0x080256cc
 800a1ac:	08025654 	.word	0x08025654
 800a1b0:	080256b9 	.word	0x080256b9
 800a1b4:	080256da 	.word	0x080256da
 800a1b8:	080256db 	.word	0x080256db
 800a1bc:	080256dc 	.word	0x080256dc
 800a1c0:	080256dd 	.word	0x080256dd
 800a1c4:	080256de 	.word	0x080256de
 800a1c8:	080256ad 	.word	0x080256ad
 800a1cc:	08025663 	.word	0x08025663
 800a1d0:	08025666 	.word	0x08025666
 800a1d4:	08025676 	.word	0x08025676
 800a1d8:	080256d0 	.word	0x080256d0
 800a1dc:	080256d1 	.word	0x080256d1
 800a1e0:	08025598 	.word	0x08025598
 800a1e4:	0802559c 	.word	0x0802559c
 800a1e8:	080256d3 	.word	0x080256d3
 800a1ec:	080256d4 	.word	0x080256d4
 800a1f0:	080256d5 	.word	0x080256d5
 800a1f4:	080256d6 	.word	0x080256d6
 800a1f8:	080256d7 	.word	0x080256d7
 800a1fc:	080256d8 	.word	0x080256d8
 800a200:	080256d2 	.word	0x080256d2

0800a204 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 800a204:	b160      	cbz	r0, 800a220 <OTM8009A_RegisterBusIO+0x1c>
    pObj->IO.WriteReg  = pIO->WriteReg;
 800a206:	684b      	ldr	r3, [r1, #4]
 800a208:	6043      	str	r3, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800a20a:	688b      	ldr	r3, [r1, #8]
 800a20c:	6083      	str	r3, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 800a20e:	68cb      	ldr	r3, [r1, #12]
    pObj->Ctx.handle   = pObj;
 800a210:	6180      	str	r0, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 800a212:	60c3      	str	r3, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 800a214:	4b04      	ldr	r3, [pc, #16]	; (800a228 <OTM8009A_RegisterBusIO+0x24>)
 800a216:	6143      	str	r3, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 800a218:	4b04      	ldr	r3, [pc, #16]	; (800a22c <OTM8009A_RegisterBusIO+0x28>)
 800a21a:	6103      	str	r3, [r0, #16]
  int32_t ret = OTM8009A_OK;
 800a21c:	2000      	movs	r0, #0
 800a21e:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 800a220:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a224:	4770      	bx	lr
 800a226:	bf00      	nop
 800a228:	08009a89 	.word	0x08009a89
 800a22c:	08009a97 	.word	0x08009a97

0800a230 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 800a230:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 800a232:	6804      	ldr	r4, [r0, #0]
 800a234:	6880      	ldr	r0, [r0, #8]
 800a236:	46a4      	mov	ip, r4
}
 800a238:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 800a23c:	4760      	bx	ip
	...

0800a240 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 800a240:	4a10      	ldr	r2, [pc, #64]	; (800a284 <BSP_I2C4_DeInit+0x44>)
{
 800a242:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 800a244:	6813      	ldr	r3, [r2, #0]
 800a246:	3b01      	subs	r3, #1
 800a248:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 800a24a:	b10b      	cbz	r3, 800a250 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 800a24c:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 800a24e:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800a250:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a254:	480c      	ldr	r0, [pc, #48]	; (800a288 <BSP_I2C4_DeInit+0x48>)
 800a256:	f001 fe0d 	bl	800be74 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800a25a:	480b      	ldr	r0, [pc, #44]	; (800a288 <BSP_I2C4_DeInit+0x48>)
 800a25c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a260:	f001 fe08 	bl	800be74 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800a264:	4a09      	ldr	r2, [pc, #36]	; (800a28c <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800a266:	480a      	ldr	r0, [pc, #40]	; (800a290 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 800a268:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
 800a26c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a270:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800a274:	f002 f849 	bl	800c30a <HAL_I2C_DeInit>
 800a278:	2800      	cmp	r0, #0
 800a27a:	d0e7      	beq.n	800a24c <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 800a27c:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800a280:	e7e5      	b.n	800a24e <BSP_I2C4_DeInit+0xe>
 800a282:	bf00      	nop
 800a284:	24005180 	.word	0x24005180
 800a288:	58020c00 	.word	0x58020c00
 800a28c:	58024400 	.word	0x58024400
 800a290:	24005b88 	.word	0x24005b88

0800a294 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800a294:	2300      	movs	r3, #0
 800a296:	2201      	movs	r2, #1
{
 800a298:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 800a29a:	6041      	str	r1, [r0, #4]
{
 800a29c:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800a29e:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800a2a0:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 800a2a4:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800a2a8:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800a2ac:	f001 ffdb 	bl	800c266 <HAL_I2C_Init>
 800a2b0:	4601      	mov	r1, r0
 800a2b2:	b108      	cbz	r0, 800a2b8 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 800a2b4:	2001      	movs	r0, #1
}
 800a2b6:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800a2b8:	4620      	mov	r0, r4
 800a2ba:	f002 f9fc 	bl	800c6b6 <HAL_I2CEx_ConfigAnalogFilter>
 800a2be:	4601      	mov	r1, r0
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	d1f7      	bne.n	800a2b4 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	f002 fa1c 	bl	800c702 <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
 800a2ca:	3800      	subs	r0, #0
 800a2cc:	bf18      	it	ne
 800a2ce:	2001      	movne	r0, #1
 800a2d0:	e7f1      	b.n	800a2b6 <MX_I2C4_Init+0x22>
	...

0800a2d4 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 800a2d4:	4ba3      	ldr	r3, [pc, #652]	; (800a564 <BSP_I2C4_Init+0x290>)
 800a2d6:	48a4      	ldr	r0, [pc, #656]	; (800a568 <BSP_I2C4_Init+0x294>)
{
 800a2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 800a2dc:	6003      	str	r3, [r0, #0]
{
 800a2de:	b093      	sub	sp, #76	; 0x4c
  if (I2c4InitCounter == 0U)
 800a2e0:	4ba2      	ldr	r3, [pc, #648]	; (800a56c <BSP_I2C4_Init+0x298>)
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	9200      	str	r2, [sp, #0]
 800a2e6:	2a00      	cmp	r2, #0
 800a2e8:	f040 80cf 	bne.w	800a48a <BSP_I2C4_Init+0x1b6>
    I2c4InitCounter++;
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800a2f0:	f002 f9dc 	bl	800c6ac <HAL_I2C_GetState>
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	f040 80c8 	bne.w	800a48a <BSP_I2C4_Init+0x1b6>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800a2fa:	4d9d      	ldr	r5, [pc, #628]	; (800a570 <BSP_I2C4_Init+0x29c>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800a2fc:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800a300:	2702      	movs	r7, #2
 800a302:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800a304:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800a308:	a90d      	add	r1, sp, #52	; 0x34
 800a30a:	489a      	ldr	r0, [pc, #616]	; (800a574 <BSP_I2C4_Init+0x2a0>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800a30c:	f043 0308 	orr.w	r3, r3, #8
 800a310:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800a314:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800a318:	f003 0308 	and.w	r3, r3, #8
 800a31c:	930a      	str	r3, [sp, #40]	; 0x28
 800a31e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800a320:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800a324:	f043 0308 	orr.w	r3, r3, #8
 800a328:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800a32c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800a330:	f003 0308 	and.w	r3, r3, #8
 800a334:	930b      	str	r3, [sp, #44]	; 0x2c
 800a336:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800a338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a33c:	e9cd 380d 	strd	r3, r8, [sp, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800a340:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800a342:	e9cd 7610 	strd	r7, r6, [sp, #64]	; 0x40
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800a346:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800a348:	f001 fca8 	bl	800bc9c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800a34c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800a350:	a90d      	add	r1, sp, #52	; 0x34
 800a352:	4888      	ldr	r0, [pc, #544]	; (800a574 <BSP_I2C4_Init+0x2a0>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800a354:	9611      	str	r6, [sp, #68]	; 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800a356:	e9cd 380d 	strd	r3, r8, [sp, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800a35a:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800a35c:	e9cd 370f 	strd	r3, r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800a360:	f001 fc9c 	bl	800bc9c <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 800a364:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 800a368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a36c:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 800a370:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 800a374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a378:	930c      	str	r3, [sp, #48]	; 0x30
 800a37a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  BUS_I2C4_FORCE_RESET();
 800a37c:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 800a380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a384:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
 800a388:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 800a38c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a390:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800a394:	f003 fc0e 	bl	800dbb4 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800a398:	2800      	cmp	r0, #0
 800a39a:	d070      	beq.n	800a47e <BSP_I2C4_Init+0x1aa>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800a39c:	4b76      	ldr	r3, [pc, #472]	; (800a578 <BSP_I2C4_Init+0x2a4>)
  uint32_t prev_presc = I2C_PRESC_MAX;
 800a39e:	f04f 0810 	mov.w	r8, #16
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800a3a2:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 800a580 <BSP_I2C4_Init+0x2ac>
 800a3a6:	f04f 0a14 	mov.w	sl, #20
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800a3aa:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 800a3ae:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800a3b2:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800a3b6:	f640 13f6 	movw	r3, #2550	; 0x9f6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800a3ba:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800a3bc:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800a3c0:	eba3 0380 	sub.w	r3, r3, r0, lsl #2
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800a3c4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a3c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a3cc:	32e2      	adds	r2, #226	; 0xe2
  if (tsdadel_min <= 0)
 800a3ce:	9302      	str	r3, [sp, #8]
 800a3d0:	4b6a      	ldr	r3, [pc, #424]	; (800a57c <BSP_I2C4_Init+0x2a8>)
 800a3d2:	ea22 7be2 	bic.w	fp, r2, r2, asr #31
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800a3d6:	9a00      	ldr	r2, [sp, #0]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4696      	mov	lr, r2
{
 800a3dc:	468c      	mov	ip, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800a3de:	2600      	movs	r6, #0
      if (tscldel >= (uint32_t)tscldel_min)
 800a3e0:	f240 3479 	movw	r4, #889	; 0x379
 800a3e4:	9601      	str	r6, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800a3e6:	3601      	adds	r6, #1
      if (tscldel >= (uint32_t)tscldel_min)
 800a3e8:	45a4      	cmp	ip, r4
 800a3ea:	d959      	bls.n	800a4a0 <BSP_I2C4_Init+0x1cc>
 800a3ec:	2500      	movs	r5, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800a3ee:	462f      	mov	r7, r5
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800a3f0:	45ab      	cmp	fp, r5
 800a3f2:	d851      	bhi.n	800a498 <BSP_I2C4_Init+0x1c4>
 800a3f4:	9c02      	ldr	r4, [sp, #8]
 800a3f6:	42ac      	cmp	r4, r5
 800a3f8:	d34e      	bcc.n	800a498 <BSP_I2C4_Init+0x1c4>
            if(presc != prev_presc)
 800a3fa:	4590      	cmp	r8, r2
 800a3fc:	d04c      	beq.n	800a498 <BSP_I2C4_Init+0x1c4>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800a3fe:	fb0a f803 	mul.w	r8, sl, r3
              I2c_valid_timing_nbr ++;
 800a402:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800a404:	9c01      	ldr	r4, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800a406:	eb09 0e08 	add.w	lr, r9, r8
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800a40a:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800a40c:	f849 2008 	str.w	r2, [r9, r8]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800a410:	e9ce 4701 	strd	r4, r7, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800a414:	d93d      	bls.n	800a492 <BSP_I2C4_Init+0x1be>
 800a416:	4a59      	ldr	r2, [pc, #356]	; (800a57c <BSP_I2C4_Init+0x2a8>)
 800a418:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800a41a:	4b58      	ldr	r3, [pc, #352]	; (800a57c <BSP_I2C4_Init+0x2a8>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800a41c:	f242 7210 	movw	r2, #10000	; 0x2710
 800a420:	4957      	ldr	r1, [pc, #348]	; (800a580 <BSP_I2C4_Init+0x2ac>)
 800a422:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800a424:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800a426:	9203      	str	r2, [sp, #12]
 800a428:	f04f 32ff 	mov.w	r2, #4294967295
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800a42c:	9305      	str	r3, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800a42e:	0043      	lsls	r3, r0, #1
 800a430:	f103 0432 	add.w	r4, r3, #50	; 0x32
 800a434:	f5c3 5b90 	rsb	fp, r3, #4608	; 0x1200
 800a438:	f5a3 5311 	sub.w	r3, r3, #9280	; 0x2440
 800a43c:	f10b 0b0c 	add.w	fp, fp, #12
 800a440:	9409      	str	r4, [sp, #36]	; 0x24
 800a442:	3b0a      	subs	r3, #10
 800a444:	9302      	str	r3, [sp, #8]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800a446:	9b05      	ldr	r3, [sp, #20]
 800a448:	429f      	cmp	r7, r3
 800a44a:	d134      	bne.n	800a4b6 <BSP_I2C4_Init+0x1e2>
        if (idx < I2C_VALID_TIMING_NBR)
 800a44c:	2a7f      	cmp	r2, #127	; 0x7f
 800a44e:	d816      	bhi.n	800a47e <BSP_I2C4_Init+0x1aa>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800a450:	2314      	movs	r3, #20
 800a452:	435a      	muls	r2, r3
 800a454:	4b4a      	ldr	r3, [pc, #296]	; (800a580 <BSP_I2C4_Init+0x2ac>)
 800a456:	1899      	adds	r1, r3, r2
 800a458:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800a45a:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800a45c:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800a460:	684b      	ldr	r3, [r1, #4]
 800a462:	051b      	lsls	r3, r3, #20
 800a464:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800a468:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800a46a:	688b      	ldr	r3, [r1, #8]
 800a46c:	041b      	lsls	r3, r3, #16
 800a46e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800a472:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800a474:	68cb      	ldr	r3, [r1, #12]
 800a476:	021b      	lsls	r3, r3, #8
 800a478:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800a47a:	4323      	orrs	r3, r4
 800a47c:	9300      	str	r3, [sp, #0]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800a47e:	9900      	ldr	r1, [sp, #0]
 800a480:	4839      	ldr	r0, [pc, #228]	; (800a568 <BSP_I2C4_Init+0x294>)
 800a482:	f7ff ff07 	bl	800a294 <MX_I2C4_Init>
 800a486:	2800      	cmp	r0, #0
 800a488:	d169      	bne.n	800a55e <BSP_I2C4_Init+0x28a>
  int32_t ret = BSP_ERROR_NONE;
 800a48a:	2000      	movs	r0, #0
}
 800a48c:	b013      	add	sp, #76	; 0x4c
 800a48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a492:	4690      	mov	r8, r2
 800a494:	f04f 0e01 	mov.w	lr, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800a498:	3701      	adds	r7, #1
 800a49a:	440d      	add	r5, r1
 800a49c:	2f10      	cmp	r7, #16
 800a49e:	d1a7      	bne.n	800a3f0 <BSP_I2C4_Init+0x11c>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800a4a0:	2e10      	cmp	r6, #16
 800a4a2:	448c      	add	ip, r1
 800a4a4:	d19c      	bne.n	800a3e0 <BSP_I2C4_Init+0x10c>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800a4a6:	3201      	adds	r2, #1
 800a4a8:	4401      	add	r1, r0
 800a4aa:	2a10      	cmp	r2, #16
 800a4ac:	d196      	bne.n	800a3dc <BSP_I2C4_Init+0x108>
 800a4ae:	f1be 0f00 	cmp.w	lr, #0
 800a4b2:	d1b0      	bne.n	800a416 <BSP_I2C4_Init+0x142>
 800a4b4:	e7b1      	b.n	800a41a <BSP_I2C4_Init+0x146>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800a4b6:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800a4b8:	f04f 0c00 	mov.w	ip, #0
 800a4bc:	9c09      	ldr	r4, [sp, #36]	; 0x24
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800a4be:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800a4c2:	441c      	add	r4, r3
 800a4c4:	ebab 0503 	sub.w	r5, fp, r3
 800a4c8:	9404      	str	r4, [sp, #16]
 800a4ca:	006c      	lsls	r4, r5, #1
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800a4cc:	9d04      	ldr	r5, [sp, #16]
 800a4ce:	9401      	str	r4, [sp, #4]
 800a4d0:	9c02      	ldr	r4, [sp, #8]
 800a4d2:	441c      	add	r4, r3
 800a4d4:	9408      	str	r4, [sp, #32]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800a4d6:	f241 245c 	movw	r4, #4700	; 0x125c
 800a4da:	f8cd c018 	str.w	ip, [sp, #24]
 800a4de:	f1a5 0632 	sub.w	r6, r5, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800a4e2:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800a4e6:	42a5      	cmp	r5, r4
 800a4e8:	d92e      	bls.n	800a548 <BSP_I2C4_Init+0x274>
 800a4ea:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 800a4ee:	d22b      	bcs.n	800a548 <BSP_I2C4_Init+0x274>
 800a4f0:	9c08      	ldr	r4, [sp, #32]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800a4f2:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800a4f6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a4fa:	1966      	adds	r6, r4, r5
 800a4fc:	f8dd 9004 	ldr.w	r9, [sp, #4]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800a500:	f206 6a83 	addw	sl, r6, #1667	; 0x683
 800a504:	f241 0447 	movw	r4, #4167	; 0x1047
 800a508:	f8cd e01c 	str.w	lr, [sp, #28]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800a50c:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800a510:	45a2      	cmp	sl, r4
 800a512:	d812      	bhi.n	800a53a <BSP_I2C4_Init+0x266>
 800a514:	f5b8 6f7a 	cmp.w	r8, #4000	; 0xfa0
 800a518:	d30f      	bcc.n	800a53a <BSP_I2C4_Init+0x266>
 800a51a:	4540      	cmp	r0, r8
 800a51c:	d20d      	bcs.n	800a53a <BSP_I2C4_Init+0x266>
              error = -error;
 800a51e:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 800a522:	bf28      	it	cs
 800a524:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 800a526:	9c03      	ldr	r4, [sp, #12]
 800a528:	45a2      	cmp	sl, r4
 800a52a:	d206      	bcs.n	800a53a <BSP_I2C4_Init+0x266>
              I2c_valid_timing[count].scll = scll;
 800a52c:	9a06      	ldr	r2, [sp, #24]
              I2c_valid_timing[count].sclh = sclh;
 800a52e:	f8cd a00c 	str.w	sl, [sp, #12]
              I2c_valid_timing[count].scll = scll;
 800a532:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 800a534:	9a07      	ldr	r2, [sp, #28]
 800a536:	60ca      	str	r2, [r1, #12]
 800a538:	463a      	mov	r2, r7
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800a53a:	f5be 7f80 	cmp.w	lr, #256	; 0x100
 800a53e:	eba9 0903 	sub.w	r9, r9, r3
 800a542:	441e      	add	r6, r3
 800a544:	4498      	add	r8, r3
 800a546:	d1db      	bne.n	800a500 <BSP_I2C4_Init+0x22c>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800a548:	9c01      	ldr	r4, [sp, #4]
 800a54a:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 800a54e:	441d      	add	r5, r3
 800a550:	eba4 0403 	sub.w	r4, r4, r3
 800a554:	9401      	str	r4, [sp, #4]
 800a556:	d1be      	bne.n	800a4d6 <BSP_I2C4_Init+0x202>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800a558:	3701      	adds	r7, #1
 800a55a:	3114      	adds	r1, #20
 800a55c:	e773      	b.n	800a446 <BSP_I2C4_Init+0x172>
          ret = BSP_ERROR_BUS_FAILURE;
 800a55e:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800a562:	e793      	b.n	800a48c <BSP_I2C4_Init+0x1b8>
 800a564:	58001c00 	.word	0x58001c00
 800a568:	24005b88 	.word	0x24005b88
 800a56c:	24005180 	.word	0x24005180
 800a570:	58024400 	.word	0x58024400
 800a574:	58020c00 	.word	0x58020c00
 800a578:	3b9aca00 	.word	0x3b9aca00
 800a57c:	24005b84 	.word	0x24005b84
 800a580:	24005184 	.word	0x24005184

0800a584 <BSP_I2C4_WriteReg>:
{
 800a584:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800a586:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800a58a:	9200      	str	r2, [sp, #0]
 800a58c:	460a      	mov	r2, r1
 800a58e:	4601      	mov	r1, r0
 800a590:	4808      	ldr	r0, [pc, #32]	; (800a5b4 <BSP_I2C4_WriteReg+0x30>)
 800a592:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a596:	2301      	movs	r3, #1
 800a598:	f001 fed0 	bl	800c33c <HAL_I2C_Mem_Write>
 800a59c:	b140      	cbz	r0, 800a5b0 <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800a59e:	4805      	ldr	r0, [pc, #20]	; (800a5b4 <BSP_I2C4_WriteReg+0x30>)
 800a5a0:	f002 f887 	bl	800c6b2 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800a5a4:	2804      	cmp	r0, #4
 800a5a6:	bf0c      	ite	eq
 800a5a8:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 800a5ac:	f06f 0003 	mvnne.w	r0, #3
}
 800a5b0:	b004      	add	sp, #16
 800a5b2:	bd10      	pop	{r4, pc}
 800a5b4:	24005b88 	.word	0x24005b88

0800a5b8 <BSP_I2C4_ReadReg>:
{
 800a5b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800a5ba:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800a5be:	9200      	str	r2, [sp, #0]
 800a5c0:	460a      	mov	r2, r1
 800a5c2:	4601      	mov	r1, r0
 800a5c4:	4808      	ldr	r0, [pc, #32]	; (800a5e8 <BSP_I2C4_ReadReg+0x30>)
 800a5c6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	f001 ff90 	bl	800c4f0 <HAL_I2C_Mem_Read>
 800a5d0:	b140      	cbz	r0, 800a5e4 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800a5d2:	4805      	ldr	r0, [pc, #20]	; (800a5e8 <BSP_I2C4_ReadReg+0x30>)
 800a5d4:	f002 f86d 	bl	800c6b2 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800a5d8:	2804      	cmp	r0, #4
 800a5da:	bf0c      	ite	eq
 800a5dc:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 800a5e0:	f06f 0003 	mvnne.w	r0, #3
}
 800a5e4:	b004      	add	sp, #16
 800a5e6:	bd10      	pop	{r4, pc}
 800a5e8:	24005b88 	.word	0x24005b88

0800a5ec <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 800a5ec:	f000 bd10 	b.w	800b010 <HAL_GetTick>

0800a5f0 <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 800a5f0:	4a09      	ldr	r2, [pc, #36]	; (800a618 <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800a5f2:	f44f 7c40 	mov.w	ip, #768	; 0x300
  hQspi->Instance                = QUADSPI;
 800a5f6:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800a5f8:	684a      	ldr	r2, [r1, #4]
 800a5fa:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 800a600:	688a      	ldr	r2, [r1, #8]
 800a602:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 800a604:	680a      	ldr	r2, [r1, #0]
 800a606:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800a608:	2200      	movs	r2, #0
 800a60a:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 800a60e:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 800a610:	68ca      	ldr	r2, [r1, #12]
 800a612:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 800a614:	f002 bbf8 	b.w	800ce08 <HAL_QSPI_Init>
 800a618:	52005000 	.word	0x52005000

0800a61c <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 800a61c:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800a61e:	b988      	cbnz	r0, 800a644 <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a620:	4c0a      	ldr	r4, [pc, #40]	; (800a64c <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 800a622:	480b      	ldr	r0, [pc, #44]	; (800a650 <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800a624:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a626:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800a628:	b94b      	cbnz	r3, 800a63e <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a62a:	f7ff f9a5 	bl	8009978 <MT25TL01G_EnableMemoryMappedModeSTR>
 800a62e:	b110      	cbz	r0, 800a636 <BSP_QSPI_EnableMemoryMappedMode+0x1a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a630:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 800a634:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800a636:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 800a638:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800a63a:	7023      	strb	r3, [r4, #0]
 800a63c:	e7fa      	b.n	800a634 <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a63e:	f7ff f951 	bl	80098e4 <MT25TL01G_EnableMemoryMappedModeDTR>
 800a642:	e7f4      	b.n	800a62e <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 800a644:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800a648:	e7f4      	b.n	800a634 <BSP_QSPI_EnableMemoryMappedMode+0x18>
 800a64a:	bf00      	nop
 800a64c:	24005bdc 	.word	0x24005bdc
 800a650:	240002bc 	.word	0x240002bc

0800a654 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 800a654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a656:	460c      	mov	r4, r1
 800a658:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800a65a:	bb28      	cbnz	r0, 800a6a8 <BSP_QSPI_ConfigFlash+0x54>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 800a65c:	4d17      	ldr	r5, [pc, #92]	; (800a6bc <BSP_QSPI_ConfigFlash+0x68>)
 800a65e:	782b      	ldrb	r3, [r5, #0]
 800a660:	2b02      	cmp	r3, #2
 800a662:	d024      	beq.n	800a6ae <BSP_QSPI_ConfigFlash+0x5a>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800a664:	2a00      	cmp	r2, #0
 800a666:	4e16      	ldr	r6, [pc, #88]	; (800a6c0 <BSP_QSPI_ConfigFlash+0x6c>)
 800a668:	bf08      	it	eq
 800a66a:	2010      	moveq	r0, #16
 800a66c:	60f0      	str	r0, [r6, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 800a66e:	4630      	mov	r0, r6
 800a670:	f002 fbca 	bl	800ce08 <HAL_QSPI_Init>
 800a674:	b9f0      	cbnz	r0, 800a6b4 <BSP_QSPI_ConfigFlash+0x60>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 800a676:	786b      	ldrb	r3, [r5, #1]
 800a678:	2b03      	cmp	r3, #3
 800a67a:	d10f      	bne.n	800a69c <BSP_QSPI_ConfigFlash+0x48>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 800a67c:	2c03      	cmp	r4, #3
 800a67e:	d105      	bne.n	800a68c <BSP_QSPI_ConfigFlash+0x38>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 800a680:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 800a682:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 800a684:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 800a686:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 800a688:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 800a68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 800a68c:	4630      	mov	r0, r6
 800a68e:	f7ff f90d 	bl	80098ac <MT25TL01G_ExitQPIMode>
 800a692:	2800      	cmp	r0, #0
 800a694:	d0f4      	beq.n	800a680 <BSP_QSPI_ConfigFlash+0x2c>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800a696:	f06f 0004 	mvn.w	r0, #4
 800a69a:	e7f6      	b.n	800a68a <BSP_QSPI_ConfigFlash+0x36>
          if(Mode == MT25TL01G_QPI_MODE)
 800a69c:	2c03      	cmp	r4, #3
 800a69e:	d1ef      	bne.n	800a680 <BSP_QSPI_ConfigFlash+0x2c>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 800a6a0:	4630      	mov	r0, r6
 800a6a2:	f7ff f8e7 	bl	8009874 <MT25TL01G_EnterQPIMode>
 800a6a6:	e7f4      	b.n	800a692 <BSP_QSPI_ConfigFlash+0x3e>
    ret = BSP_ERROR_WRONG_PARAM;
 800a6a8:	f06f 0001 	mvn.w	r0, #1
 800a6ac:	e7ed      	b.n	800a68a <BSP_QSPI_ConfigFlash+0x36>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 800a6ae:	f06f 0019 	mvn.w	r0, #25
 800a6b2:	e7ea      	b.n	800a68a <BSP_QSPI_ConfigFlash+0x36>
        ret = BSP_ERROR_PERIPH_FAILURE;
 800a6b4:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800a6b8:	e7e7      	b.n	800a68a <BSP_QSPI_ConfigFlash+0x36>
 800a6ba:	bf00      	nop
 800a6bc:	24005bdc 	.word	0x24005bdc
 800a6c0:	240002bc 	.word	0x240002bc

0800a6c4 <BSP_QSPI_Init>:
{
 800a6c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c8:	460d      	mov	r5, r1
 800a6ca:	b0a4      	sub	sp, #144	; 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800a6cc:	4604      	mov	r4, r0
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	f040 81ac 	bne.w	800aa2c <BSP_QSPI_Init+0x368>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 800a6d4:	4e03      	ldr	r6, [pc, #12]	; (800a6e4 <BSP_QSPI_Init+0x20>)
 800a6d6:	7833      	ldrb	r3, [r6, #0]
 800a6d8:	b133      	cbz	r3, 800a6e8 <BSP_QSPI_Init+0x24>
  int32_t ret = BSP_ERROR_NONE;
 800a6da:	2000      	movs	r0, #0
}
 800a6dc:	b024      	add	sp, #144	; 0x90
 800a6de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6e2:	bf00      	nop
 800a6e4:	24005bdc 	.word	0x24005bdc
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 800a6e8:	4bc2      	ldr	r3, [pc, #776]	; (800a9f4 <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800a6ea:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800a6ee:	2709      	movs	r7, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800a6f0:	a916      	add	r1, sp, #88	; 0x58
  QSPI_CLK_ENABLE();
 800a6f2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800a6f6:	f04f 0840 	mov.w	r8, #64	; 0x40
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800a6fa:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 800a6fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a702:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800a706:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800a70a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800a70e:	9201      	str	r2, [sp, #4]
 800a710:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 800a712:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800a714:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a718:	67da      	str	r2, [r3, #124]	; 0x7c
  QSPI_RELEASE_RESET();
 800a71a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800a71c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a720:	67da      	str	r2, [r3, #124]	; 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 800a722:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a726:	f042 0202 	orr.w	r2, r2, #2
 800a72a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a72e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a732:	f002 0202 	and.w	r2, r2, #2
 800a736:	9202      	str	r2, [sp, #8]
 800a738:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 800a73a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a73e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a742:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a746:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a74a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800a74e:	9203      	str	r2, [sp, #12]
 800a750:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 800a752:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a756:	f042 0208 	orr.w	r2, r2, #8
 800a75a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a75e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a762:	f002 0208 	and.w	r2, r2, #8
 800a766:	9204      	str	r2, [sp, #16]
 800a768:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 800a76a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a76e:	f042 0220 	orr.w	r2, r2, #32
 800a772:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a776:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a77a:	f002 0220 	and.w	r2, r2, #32
 800a77e:	9205      	str	r2, [sp, #20]
 800a780:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 800a782:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a786:	f042 0220 	orr.w	r2, r2, #32
 800a78a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a78e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a792:	f002 0220 	and.w	r2, r2, #32
 800a796:	9206      	str	r2, [sp, #24]
 800a798:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 800a79a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a79e:	f042 0220 	orr.w	r2, r2, #32
 800a7a2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a7a6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a7aa:	f002 0220 	and.w	r2, r2, #32
 800a7ae:	9207      	str	r2, [sp, #28]
 800a7b0:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 800a7b2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a7b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7ba:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a7be:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a7c2:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800a7c6:	9208      	str	r2, [sp, #32]
 800a7c8:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 800a7ca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a7ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a7d2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a7d6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a7da:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800a7de:	9209      	str	r2, [sp, #36]	; 0x24
 800a7e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 800a7e2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a7e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a7ea:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a7ee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a7f2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800a7f6:	920a      	str	r2, [sp, #40]	; 0x28
 800a7f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 800a7fa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a7fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a802:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a806:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a80a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800a80e:	920b      	str	r2, [sp, #44]	; 0x2c
 800a810:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 800a812:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a816:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a81a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a81e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a826:	930c      	str	r3, [sp, #48]	; 0x30
 800a828:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800a82a:	2302      	movs	r3, #2
 800a82c:	e9cd 9316 	strd	r9, r3, [sp, #88]	; 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800a830:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800a832:	971a      	str	r7, [sp, #104]	; 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800a834:	e9cd 0318 	strd	r0, r3, [sp, #96]	; 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800a838:	486f      	ldr	r0, [pc, #444]	; (800a9f8 <BSP_QSPI_Init+0x334>)
 800a83a:	f001 fa2f 	bl	800bc9c <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800a83e:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 800a840:	a916      	add	r1, sp, #88	; 0x58
 800a842:	486e      	ldr	r0, [pc, #440]	; (800a9fc <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800a844:	9318      	str	r3, [sp, #96]	; 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800a846:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800a84a:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 800a84e:	f001 fa25 	bl	800bc9c <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800a852:	f44f 6300 	mov.w	r3, #2048	; 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 800a856:	a916      	add	r1, sp, #88	; 0x58
 800a858:	4869      	ldr	r0, [pc, #420]	; (800aa00 <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800a85a:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800a85c:	9418      	str	r4, [sp, #96]	; 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800a85e:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 800a860:	f001 fa1c 	bl	800bc9c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800a864:	a916      	add	r1, sp, #88	; 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 800a866:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800a86a:	4866      	ldr	r0, [pc, #408]	; (800aa04 <BSP_QSPI_Init+0x340>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800a86c:	f44f 7900 	mov.w	r9, #512	; 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800a870:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800a872:	f001 fa13 	bl	800bc9c <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800a876:	a916      	add	r1, sp, #88	; 0x58
 800a878:	4863      	ldr	r0, [pc, #396]	; (800aa08 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800a87a:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800a87e:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800a882:	f001 fa0b 	bl	800bc9c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 800a886:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 800a888:	a916      	add	r1, sp, #88	; 0x58
 800a88a:	485e      	ldr	r0, [pc, #376]	; (800aa04 <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 800a88c:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800a88e:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 800a890:	f001 fa04 	bl	800bc9c <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800a894:	2380      	movs	r3, #128	; 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800a896:	a916      	add	r1, sp, #88	; 0x58
 800a898:	485b      	ldr	r0, [pc, #364]	; (800aa08 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800a89a:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800a89c:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800a89e:	f001 f9fd 	bl	800bc9c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800a8a2:	a916      	add	r1, sp, #88	; 0x58
 800a8a4:	4855      	ldr	r0, [pc, #340]	; (800a9fc <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 800a8a6:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800a8aa:	f001 f9f7 	bl	800bc9c <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800a8ae:	a916      	add	r1, sp, #88	; 0x58
 800a8b0:	4855      	ldr	r0, [pc, #340]	; (800aa08 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 800a8b2:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800a8b6:	f001 f9f1 	bl	800bc9c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800a8ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800a8be:	a916      	add	r1, sp, #88	; 0x58
 800a8c0:	484e      	ldr	r0, [pc, #312]	; (800a9fc <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800a8c2:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800a8c4:	f001 f9ea 	bl	800bc9c <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 800a8c8:	4622      	mov	r2, r4
 800a8ca:	210f      	movs	r1, #15
 800a8cc:	205c      	movs	r0, #92	; 0x5c
 800a8ce:	f000 fbcf 	bl	800b070 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800a8d2:	205c      	movs	r0, #92	; 0x5c
 800a8d4:	f000 fbfe 	bl	800b0d4 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 800a8d8:	a811      	add	r0, sp, #68	; 0x44
 800a8da:	f7fe ff22 	bl	8009722 <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800a8de:	786a      	ldrb	r2, [r5, #1]
 800a8e0:	4b4a      	ldr	r3, [pc, #296]	; (800aa0c <BSP_QSPI_Init+0x348>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 800a8e2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800a8e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ea:	930e      	str	r3, [sp, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a8ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a8ee:	fa93 f3a3 	rbit	r3, r3
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800a8f2:	2a00      	cmp	r2, #0
  return __builtin_clz(value);
 800a8f4:	fab3 f383 	clz	r3, r3
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800a8f8:	a90d      	add	r1, sp, #52	; 0x34
 800a8fa:	4845      	ldr	r0, [pc, #276]	; (800aa10 <BSP_QSPI_Init+0x34c>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800a8fc:	bf08      	it	eq
 800a8fe:	2410      	moveq	r4, #16
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800a900:	3b01      	subs	r3, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800a902:	940f      	str	r4, [sp, #60]	; 0x3c
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800a904:	930d      	str	r3, [sp, #52]	; 0x34
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800a906:	f7ff fe73 	bl	800a5f0 <MX_QSPI_Init>
 800a90a:	2800      	cmp	r0, #0
 800a90c:	f040 8091 	bne.w	800aa32 <BSP_QSPI_Init+0x36e>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800a910:	2103      	movs	r1, #3
 800a912:	483f      	ldr	r0, [pc, #252]	; (800aa10 <BSP_QSPI_Init+0x34c>)
 800a914:	f7ff f876 	bl	8009a04 <MT25TL01G_ResetEnable>
 800a918:	2800      	cmp	r0, #0
 800a91a:	d17c      	bne.n	800aa16 <BSP_QSPI_Init+0x352>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800a91c:	2103      	movs	r1, #3
 800a91e:	483c      	ldr	r0, [pc, #240]	; (800aa10 <BSP_QSPI_Init+0x34c>)
 800a920:	f7ff f891 	bl	8009a46 <MT25TL01G_ResetMemory>
 800a924:	2800      	cmp	r0, #0
 800a926:	d176      	bne.n	800aa16 <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a928:	7871      	ldrb	r1, [r6, #1]
 800a92a:	4839      	ldr	r0, [pc, #228]	; (800aa10 <BSP_QSPI_Init+0x34c>)
 800a92c:	f7fe ff0a 	bl	8009744 <MT25TL01G_AutoPollingMemReady>
 800a930:	4601      	mov	r1, r0
 800a932:	2800      	cmp	r0, #0
 800a934:	d16f      	bne.n	800aa16 <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800a936:	4836      	ldr	r0, [pc, #216]	; (800aa10 <BSP_QSPI_Init+0x34c>)
 800a938:	f7ff f864 	bl	8009a04 <MT25TL01G_ResetEnable>
 800a93c:	4601      	mov	r1, r0
 800a93e:	2800      	cmp	r0, #0
 800a940:	d169      	bne.n	800aa16 <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800a942:	4833      	ldr	r0, [pc, #204]	; (800aa10 <BSP_QSPI_Init+0x34c>)
 800a944:	f7ff f87f 	bl	8009a46 <MT25TL01G_ResetMemory>
 800a948:	4601      	mov	r1, r0
 800a94a:	2800      	cmp	r0, #0
 800a94c:	d163      	bne.n	800aa16 <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 800a94e:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 800a950:	70b0      	strb	r0, [r6, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a952:	482f      	ldr	r0, [pc, #188]	; (800aa10 <BSP_QSPI_Init+0x34c>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 800a954:	8033      	strh	r3, [r6, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a956:	f7fe fef5 	bl	8009744 <MT25TL01G_AutoPollingMemReady>
 800a95a:	2800      	cmp	r0, #0
 800a95c:	d15b      	bne.n	800aa16 <BSP_QSPI_Init+0x352>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a95e:	7871      	ldrb	r1, [r6, #1]
 800a960:	482b      	ldr	r0, [pc, #172]	; (800aa10 <BSP_QSPI_Init+0x34c>)
 800a962:	f7fe ff5e 	bl	8009822 <MT25TL01G_Enter4BytesAddressMode>
 800a966:	2800      	cmp	r0, #0
 800a968:	d155      	bne.n	800aa16 <BSP_QSPI_Init+0x352>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800a96a:	f44f 7340 	mov.w	r3, #768	; 0x300
  uint16_t reg=0;
 800a96e:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 800a972:	901b      	str	r0, [sp, #108]	; 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a974:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800a978:	931c      	str	r3, [sp, #112]	; 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800a97a:	2385      	movs	r3, #133	; 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a97c:	a916      	add	r1, sp, #88	; 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800a97e:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800a980:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800a984:	931f      	str	r3, [sp, #124]	; 0x7c
  s_command.NbData            = 2;
 800a986:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800a988:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800a98c:	e9cd 3020 	strd	r3, r0, [sp, #128]	; 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800a990:	e9cd 0022 	strd	r0, r0, [sp, #136]	; 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a994:	481e      	ldr	r0, [pc, #120]	; (800aa10 <BSP_QSPI_Init+0x34c>)
 800a996:	f002 fa85 	bl	800cea4 <HAL_QSPI_Command>
 800a99a:	2800      	cmp	r0, #0
 800a99c:	d13b      	bne.n	800aa16 <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a99e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9a2:	f10d 0102 	add.w	r1, sp, #2
 800a9a6:	481a      	ldr	r0, [pc, #104]	; (800aa10 <BSP_QSPI_Init+0x34c>)
 800a9a8:	f002 fb18 	bl	800cfdc <HAL_QSPI_Receive>
 800a9ac:	bb98      	cbnz	r0, 800aa16 <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a9ae:	7871      	ldrb	r1, [r6, #1]
 800a9b0:	4817      	ldr	r0, [pc, #92]	; (800aa10 <BSP_QSPI_Init+0x34c>)
 800a9b2:	f7fe fef2 	bl	800979a <MT25TL01G_WriteEnable>
 800a9b6:	bb70      	cbnz	r0, 800aa16 <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800a9b8:	2381      	movs	r3, #129	; 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a9ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9be:	a916      	add	r1, sp, #88	; 0x58
 800a9c0:	4813      	ldr	r0, [pc, #76]	; (800aa10 <BSP_QSPI_Init+0x34c>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800a9c2:	9316      	str	r3, [sp, #88]	; 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 800a9c4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800a9c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a9cc:	051b      	lsls	r3, r3, #20
 800a9ce:	0d1b      	lsrs	r3, r3, #20
 800a9d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9d8:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a9dc:	f002 fa62 	bl	800cea4 <HAL_QSPI_Command>
 800a9e0:	b9c8      	cbnz	r0, 800aa16 <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a9e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9e6:	f10d 0102 	add.w	r1, sp, #2
 800a9ea:	4809      	ldr	r0, [pc, #36]	; (800aa10 <BSP_QSPI_Init+0x34c>)
 800a9ec:	f002 fa9d 	bl	800cf2a <HAL_QSPI_Transmit>
 800a9f0:	e010      	b.n	800aa14 <BSP_QSPI_Init+0x350>
 800a9f2:	bf00      	nop
 800a9f4:	58024400 	.word	0x58024400
 800a9f8:	58020400 	.word	0x58020400
 800a9fc:	58021800 	.word	0x58021800
 800aa00:	58020c00 	.word	0x58020c00
 800aa04:	58021c00 	.word	0x58021c00
 800aa08:	58021400 	.word	0x58021400
 800aa0c:	080256e0 	.word	0x080256e0
 800aa10:	240002bc 	.word	0x240002bc
 800aa14:	b110      	cbz	r0, 800aa1c <BSP_QSPI_Init+0x358>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800aa16:	f06f 0004 	mvn.w	r0, #4
 800aa1a:	e65f      	b.n	800a6dc <BSP_QSPI_Init+0x18>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800aa1c:	786a      	ldrb	r2, [r5, #1]
 800aa1e:	7829      	ldrb	r1, [r5, #0]
 800aa20:	f7ff fe18 	bl	800a654 <BSP_QSPI_ConfigFlash>
 800aa24:	2800      	cmp	r0, #0
 800aa26:	f43f ae58 	beq.w	800a6da <BSP_QSPI_Init+0x16>
 800aa2a:	e7f4      	b.n	800aa16 <BSP_QSPI_Init+0x352>
    ret = BSP_ERROR_WRONG_PARAM;
 800aa2c:	f06f 0001 	mvn.w	r0, #1
 800aa30:	e654      	b.n	800a6dc <BSP_QSPI_Init+0x18>
          ret = BSP_ERROR_PERIPH_FAILURE;
 800aa32:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800aa36:	e651      	b.n	800a6dc <BSP_QSPI_Init+0x18>

0800aa38 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 800aa38:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 800aa3a:	4604      	mov	r4, r0
 800aa3c:	b970      	cbnz	r0, 800aa5c <BSP_SDRAM_DeInit+0x24>
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 800aa3e:	4b09      	ldr	r3, [pc, #36]	; (800aa64 <BSP_SDRAM_DeInit+0x2c>)
 800aa40:	4809      	ldr	r0, [pc, #36]	; (800aa68 <BSP_SDRAM_DeInit+0x30>)
 800aa42:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 800aa44:	f003 ff3c 	bl	800e8c0 <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 800aa48:	207a      	movs	r0, #122	; 0x7a
 800aa4a:	f000 fb51 	bl	800b0f0 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800aa4e:	4807      	ldr	r0, [pc, #28]	; (800aa6c <BSP_SDRAM_DeInit+0x34>)
 800aa50:	4b07      	ldr	r3, [pc, #28]	; (800aa70 <BSP_SDRAM_DeInit+0x38>)
 800aa52:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800aa54:	f002 f8a5 	bl	800cba2 <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 800aa58:	4620      	mov	r0, r4
}
 800aa5a:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 800aa5c:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800aa60:	e7fb      	b.n	800aa5a <BSP_SDRAM_DeInit+0x22>
 800aa62:	bf00      	nop
 800aa64:	52004140 	.word	0x52004140
 800aa68:	24005be8 	.word	0x24005be8
 800aa6c:	24005c1c 	.word	0x24005c1c
 800aa70:	52000040 	.word	0x52000040

0800aa74 <MX_SDRAM_Init>:
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800aa74:	2201      	movs	r2, #1
 800aa76:	4915      	ldr	r1, [pc, #84]	; (800aacc <MX_SDRAM_Init+0x58>)
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800aa78:	4b15      	ldr	r3, [pc, #84]	; (800aad0 <MX_SDRAM_Init+0x5c>)
{
 800aa7a:	b510      	push	{r4, lr}
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800aa7c:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800aa80:	6082      	str	r2, [r0, #8]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800aa82:	2104      	movs	r1, #4
 800aa84:	2220      	movs	r2, #32
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800aa86:	2440      	movs	r4, #64	; 0x40
{
 800aa88:	b088      	sub	sp, #32
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800aa8a:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800aa8e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800aa92:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 800aa96:	2200      	movs	r2, #0
 800aa98:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800aa9c:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800aaa0:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 800aaa4:	6244      	str	r4, [r0, #36]	; 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800aaa6:	629a      	str	r2, [r3, #40]	; 0x28
  sdram_timing.ExitSelfRefreshDelay = 7;
 800aaa8:	2207      	movs	r2, #7
 800aaaa:	2302      	movs	r3, #2
  sdram_timing.RowCycleDelay        = 7;
 800aaac:	e9cd 1203 	strd	r1, r2, [sp, #12]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800aab0:	4469      	add	r1, sp
  sdram_timing.RCDDelay             = 2;
 800aab2:	9307      	str	r3, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 800aab4:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 800aab8:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800aabc:	f003 fed8 	bl	800e870 <HAL_SDRAM_Init>
}
 800aac0:	3800      	subs	r0, #0
 800aac2:	bf18      	it	ne
 800aac4:	2001      	movne	r0, #1
 800aac6:	b008      	add	sp, #32
 800aac8:	bd10      	pop	{r4, pc}
 800aaca:	bf00      	nop
 800aacc:	52004140 	.word	0x52004140
 800aad0:	24005be8 	.word	0x24005be8

0800aad4 <BSP_SDRAM_Init>:
{
 800aad4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 800aad6:	4605      	mov	r5, r0
{
 800aad8:	b08f      	sub	sp, #60	; 0x3c
  if(Instance >=SDRAM_INSTANCES_NBR)
 800aada:	2800      	cmp	r0, #0
 800aadc:	f040 80dd 	bne.w	800ac9a <BSP_SDRAM_Init+0x1c6>
  __HAL_RCC_FMC_CLK_ENABLE();
 800aae0:	4b71      	ldr	r3, [pc, #452]	; (800aca8 <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800aae2:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800aae4:	a909      	add	r1, sp, #36	; 0x24
 800aae6:	4871      	ldr	r0, [pc, #452]	; (800acac <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800aae8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 800aaec:	4c70      	ldr	r4, [pc, #448]	; (800acb0 <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800aaee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800aaf2:	4e70      	ldr	r6, [pc, #448]	; (800acb4 <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800aaf4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800aaf8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800aafc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800ab00:	9201      	str	r2, [sp, #4]
 800ab02:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 800ab04:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800ab08:	f042 0201 	orr.w	r2, r2, #1
 800ab0c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800ab10:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800ab14:	f002 0201 	and.w	r2, r2, #1
 800ab18:	9202      	str	r2, [sp, #8]
 800ab1a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800ab1c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800ab20:	f042 0208 	orr.w	r2, r2, #8
 800ab24:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800ab28:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800ab2c:	f002 0208 	and.w	r2, r2, #8
 800ab30:	9203      	str	r2, [sp, #12]
 800ab32:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800ab34:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800ab38:	f042 0210 	orr.w	r2, r2, #16
 800ab3c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800ab40:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800ab44:	f002 0210 	and.w	r2, r2, #16
 800ab48:	9204      	str	r2, [sp, #16]
 800ab4a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800ab4c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800ab50:	f042 0220 	orr.w	r2, r2, #32
 800ab54:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800ab58:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800ab5c:	f002 0220 	and.w	r2, r2, #32
 800ab60:	9205      	str	r2, [sp, #20]
 800ab62:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800ab64:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800ab68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab6c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800ab70:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800ab74:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800ab78:	9206      	str	r2, [sp, #24]
 800ab7a:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ab7c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800ab80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ab84:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800ab88:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800ab8c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800ab90:	9207      	str	r2, [sp, #28]
 800ab92:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800ab94:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800ab98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab9c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800aba0:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800aba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abaa:	9308      	str	r3, [sp, #32]
 800abac:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800abae:	2301      	movs	r3, #1
 800abb0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800abb4:	230c      	movs	r3, #12
 800abb6:	e9cd 730c 	strd	r7, r3, [sp, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800abba:	f24c 7303 	movw	r3, #50947	; 0xc703
 800abbe:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800abc0:	f001 f86c 	bl	800bc9c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800abc4:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800abc8:	a909      	add	r1, sp, #36	; 0x24
 800abca:	483b      	ldr	r0, [pc, #236]	; (800acb8 <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800abcc:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800abce:	f001 f865 	bl	800bc9c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800abd2:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800abd6:	a909      	add	r1, sp, #36	; 0x24
 800abd8:	4838      	ldr	r0, [pc, #224]	; (800acbc <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800abda:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800abdc:	f001 f85e 	bl	800bc9c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 800abe0:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800abe4:	a909      	add	r1, sp, #36	; 0x24
 800abe6:	4836      	ldr	r0, [pc, #216]	; (800acc0 <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 800abe8:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800abea:	f001 f857 	bl	800bc9c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800abee:	f64f 73e0 	movw	r3, #65504	; 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800abf2:	a909      	add	r1, sp, #36	; 0x24
 800abf4:	4833      	ldr	r0, [pc, #204]	; (800acc4 <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800abf6:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800abf8:	f001 f850 	bl	800bc9c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800abfc:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800ac00:	a909      	add	r1, sp, #36	; 0x24
 800ac02:	4831      	ldr	r0, [pc, #196]	; (800acc8 <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800ac04:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800ac06:	f001 f849 	bl	800bc9c <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 800ac0a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800ac0e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800ac12:	f240 2002 	movw	r0, #514	; 0x202
 800ac16:	f640 0208 	movw	r2, #2056	; 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800ac1a:	6334      	str	r4, [r6, #48]	; 0x30
 800ac1c:	6426      	str	r6, [r4, #64]	; 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 800ac1e:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800ac22:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 800ac26:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 800ac28:	2220      	movs	r2, #32
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800ac2a:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 800ac2c:	62a3      	str	r3, [r4, #40]	; 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 800ac2e:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800ac32:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 800ac36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 800ac3a:	4b24      	ldr	r3, [pc, #144]	; (800accc <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 800ac3c:	6262      	str	r2, [r4, #36]	; 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 800ac3e:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 800ac40:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 800ac44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800ac48:	f001 ffab 	bl	800cba2 <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	f001 ff39 	bl	800cac4 <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 800ac52:	462a      	mov	r2, r5
 800ac54:	210f      	movs	r1, #15
 800ac56:	207a      	movs	r0, #122	; 0x7a
 800ac58:	f000 fa0a 	bl	800b070 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 800ac5c:	207a      	movs	r0, #122	; 0x7a
 800ac5e:	f000 fa39 	bl	800b0d4 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 800ac62:	4630      	mov	r0, r6
 800ac64:	f7ff ff06 	bl	800aa74 <MX_SDRAM_Init>
 800ac68:	b9d0      	cbnz	r0, 800aca0 <BSP_SDRAM_Init+0x1cc>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 800ac6a:	4919      	ldr	r1, [pc, #100]	; (800acd0 <BSP_SDRAM_Init+0x1fc>)
 800ac6c:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 800ac6e:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800ac72:	f240 6303 	movw	r3, #1539	; 0x603
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 800ac76:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 800ac78:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 800ac7c:	2330      	movs	r3, #48	; 0x30
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 800ac7e:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 800ac82:	f44f 7300 	mov.w	r3, #512	; 0x200
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 800ac86:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 800ac88:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 800ac8a:	f7fe fd1d 	bl	80096c8 <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	bf18      	it	ne
 800ac92:	f06f 0004 	mvnne.w	r0, #4
}
 800ac96:	b00f      	add	sp, #60	; 0x3c
 800ac98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 800ac9a:	f06f 0001 	mvn.w	r0, #1
 800ac9e:	e7fa      	b.n	800ac96 <BSP_SDRAM_Init+0x1c2>
      ret = BSP_ERROR_NO_INIT;
 800aca0:	f04f 30ff 	mov.w	r0, #4294967295
 800aca4:	e7f7      	b.n	800ac96 <BSP_SDRAM_Init+0x1c2>
 800aca6:	bf00      	nop
 800aca8:	58024400 	.word	0x58024400
 800acac:	58020c00 	.word	0x58020c00
 800acb0:	24005c88 	.word	0x24005c88
 800acb4:	24005be8 	.word	0x24005be8
 800acb8:	58021000 	.word	0x58021000
 800acbc:	58021400 	.word	0x58021400
 800acc0:	58021800 	.word	0x58021800
 800acc4:	58021c00 	.word	0x58021c00
 800acc8:	58022000 	.word	0x58022000
 800accc:	52000040 	.word	0x52000040
 800acd0:	24005cf4 	.word	0x24005cf4

0800acd4 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800acd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acd8:	460c      	mov	r4, r1
 800acda:	b08c      	sub	sp, #48	; 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800acdc:	4606      	mov	r6, r0
 800acde:	2800      	cmp	r0, #0
 800ace0:	d171      	bne.n	800adc6 <BSP_TS_Init+0xf2>
 800ace2:	680b      	ldr	r3, [r1, #0]
 800ace4:	1e5a      	subs	r2, r3, #1
 800ace6:	f5b2 7f48 	cmp.w	r2, #800	; 0x320
 800acea:	d26c      	bcs.n	800adc6 <BSP_TS_Init+0xf2>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800acec:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800acee:	1e51      	subs	r1, r2, #1
 800acf0:	f5b1 7ff0 	cmp.w	r1, #480	; 0x1e0
 800acf4:	d267      	bcs.n	800adc6 <BSP_TS_Init+0xf2>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800acf6:	4293      	cmp	r3, r2
 800acf8:	bf28      	it	cs
 800acfa:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800acfc:	68e2      	ldr	r2, [r4, #12]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d861      	bhi.n	800adc6 <BSP_TS_Init+0xf2>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 800ad02:	2370      	movs	r3, #112	; 0x70
 800ad04:	2254      	movs	r2, #84	; 0x54
 800ad06:	f10d 0a04 	add.w	sl, sp, #4

  for(i = 0; i < 2UL; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 800ad0a:	4f32      	ldr	r7, [pc, #200]	; (800add4 <BSP_TS_Init+0x100>)
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
      Ts_CompObj[Instance] = &FT6X06Obj;
 800ad0c:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 800adf4 <BSP_TS_Init+0x120>
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 800ad10:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 800adf8 <BSP_TS_Init+0x124>
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 800ad14:	e9cd 2301 	strd	r2, r3, [sp, #4]
  IOCtx.Init        = BSP_I2C4_Init;
 800ad18:	4b2f      	ldr	r3, [pc, #188]	; (800add8 <BSP_TS_Init+0x104>)
 800ad1a:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800ad1c:	4b2f      	ldr	r3, [pc, #188]	; (800addc <BSP_TS_Init+0x108>)
 800ad1e:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800ad20:	4b2f      	ldr	r3, [pc, #188]	; (800ade0 <BSP_TS_Init+0x10c>)
 800ad22:	930a      	str	r3, [sp, #40]	; 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800ad24:	4b2f      	ldr	r3, [pc, #188]	; (800ade4 <BSP_TS_Init+0x110>)
 800ad26:	9309      	str	r3, [sp, #36]	; 0x24
  IOCtx.GetTick     = BSP_GetTick;
 800ad28:	4b2f      	ldr	r3, [pc, #188]	; (800ade8 <BSP_TS_Init+0x114>)
 800ad2a:	930b      	str	r3, [sp, #44]	; 0x2c
    IOCtx.Address     = (uint16_t)i2c_address[i];
 800ad2c:	f85a 3b04 	ldr.w	r3, [sl], #4
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 800ad30:	a906      	add	r1, sp, #24
 800ad32:	4828      	ldr	r0, [pc, #160]	; (800add4 <BSP_TS_Init+0x100>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 800ad34:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 800ad38:	f7fe fbcc 	bl	80094d4 <FT6X06_RegisterBusIO>
 800ad3c:	b118      	cbz	r0, 800ad46 <BSP_TS_Init+0x72>
  for(i = 0; i < 2UL; i++)
 800ad3e:	2e01      	cmp	r6, #1
 800ad40:	d044      	beq.n	800adcc <BSP_TS_Init+0xf8>
 800ad42:	2601      	movs	r6, #1
 800ad44:	e7f2      	b.n	800ad2c <BSP_TS_Init+0x58>
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 800ad46:	4669      	mov	r1, sp
 800ad48:	4638      	mov	r0, r7
 800ad4a:	f7fe fb0c 	bl	8009366 <FT6X06_ReadID>
 800ad4e:	2800      	cmp	r0, #0
 800ad50:	d1f5      	bne.n	800ad3e <BSP_TS_Init+0x6a>
    else if(id != FT6X06_ID)
 800ad52:	9b00      	ldr	r3, [sp, #0]
 800ad54:	2b11      	cmp	r3, #17
 800ad56:	d1f2      	bne.n	800ad3e <BSP_TS_Init+0x6a>
      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 800ad58:	a903      	add	r1, sp, #12
 800ad5a:	4638      	mov	r0, r7
 800ad5c:	f7fe fab0 	bl	80092c0 <FT6X06_GetCapabilities>
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 800ad60:	4b22      	ldr	r3, [pc, #136]	; (800adec <BSP_TS_Init+0x118>)

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 800ad62:	4638      	mov	r0, r7
      Ts_CompObj[Instance] = &FT6X06Obj;
 800ad64:	f8c8 7000 	str.w	r7, [r8]
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 800ad68:	f8c9 3000 	str.w	r3, [r9]
      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4798      	blx	r3
 800ad70:	4605      	mov	r5, r0
 800ad72:	2800      	cmp	r0, #0
 800ad74:	d1e3      	bne.n	800ad3e <BSP_TS_Init+0x6a>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800ad76:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800ad78:	a906      	add	r1, sp, #24
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800ad7a:	4e1d      	ldr	r6, [pc, #116]	; (800adf0 <BSP_TS_Init+0x11c>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800ad7c:	f8d8 0000 	ldr.w	r0, [r8]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800ad80:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 800ad82:	6863      	ldr	r3, [r4, #4]
 800ad84:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 800ad86:	68a3      	ldr	r3, [r4, #8]
 800ad88:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 800ad8a:	68e3      	ldr	r3, [r4, #12]
 800ad8c:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800ad8e:	f8d9 3000 	ldr.w	r3, [r9]
 800ad92:	69db      	ldr	r3, [r3, #28]
 800ad94:	4798      	blx	r3
 800ad96:	2800      	cmp	r0, #0
 800ad98:	da02      	bge.n	800ada0 <BSP_TS_Init+0xcc>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ad9a:	f06f 0504 	mvn.w	r5, #4
 800ad9e:	e00e      	b.n	800adbe <BSP_TS_Init+0xea>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800ada0:	9b07      	ldr	r3, [sp, #28]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800ada2:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800ada4:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800ada6:	9b08      	ldr	r3, [sp, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800ada8:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800adaa:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800adac:	68e3      	ldr	r3, [r4, #12]
 800adae:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800adb0:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800adb2:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800adb4:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800adb6:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800adb8:	6273      	str	r3, [r6, #36]	; 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800adba:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 800adbe:	4628      	mov	r0, r5
 800adc0:	b00c      	add	sp, #48	; 0x30
 800adc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800adc6:	f06f 0501 	mvn.w	r5, #1
  return ret;
 800adca:	e7f8      	b.n	800adbe <BSP_TS_Init+0xea>
      ret = BSP_ERROR_NO_INIT;
 800adcc:	f04f 35ff 	mov.w	r5, #4294967295
 800add0:	e7f5      	b.n	800adbe <BSP_TS_Init+0xea>
 800add2:	bf00      	nop
 800add4:	24005d14 	.word	0x24005d14
 800add8:	0800a2d5 	.word	0x0800a2d5
 800addc:	0800a241 	.word	0x0800a241
 800ade0:	0800a5b9 	.word	0x0800a5b9
 800ade4:	0800a585 	.word	0x0800a585
 800ade8:	0800a5ed 	.word	0x0800a5ed
 800adec:	24000018 	.word	0x24000018
 800adf0:	24005d40 	.word	0x24005d40
 800adf4:	24005d3c 	.word	0x24005d3c
 800adf8:	24005d68 	.word	0x24005d68

0800adfc <BSP_TS_GetState>:
{
 800adfc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800ae00:	460e      	mov	r6, r1
  if(Instance >= TS_INSTANCES_NBR)
 800ae02:	2800      	cmp	r0, #0
 800ae04:	d151      	bne.n	800aeaa <BSP_TS_GetState+0xae>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800ae06:	4b2a      	ldr	r3, [pc, #168]	; (800aeb0 <BSP_TS_GetState+0xb4>)
 800ae08:	a901      	add	r1, sp, #4
 800ae0a:	4a2a      	ldr	r2, [pc, #168]	; (800aeb4 <BSP_TS_GetState+0xb8>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	6810      	ldr	r0, [r2, #0]
 800ae10:	691b      	ldr	r3, [r3, #16]
 800ae12:	4798      	blx	r3
 800ae14:	2800      	cmp	r0, #0
 800ae16:	db45      	blt.n	800aea4 <BSP_TS_GetState+0xa8>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800ae18:	4927      	ldr	r1, [pc, #156]	; (800aeb8 <BSP_TS_GetState+0xbc>)
    else if(state.TouchDetected != 0U)
 800ae1a:	9801      	ldr	r0, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800ae1c:	f8d1 c018 	ldr.w	ip, [r1, #24]
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800ae20:	6a0f      	ldr	r7, [r1, #32]
    else if(state.TouchDetected != 0U)
 800ae22:	2800      	cmp	r0, #0
 800ae24:	d03a      	beq.n	800ae9c <BSP_TS_GetState+0xa0>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800ae26:	688b      	ldr	r3, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 800ae28:	f8d1 8010 	ldr.w	r8, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800ae2c:	071c      	lsls	r4, r3, #28
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 800ae2e:	f8d1 e014 	ldr.w	lr, [r1, #20]
      y_oriented = state.TouchY;
 800ae32:	e9dd 5202 	ldrd	r5, r2, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800ae36:	bf42      	ittt	mi
 800ae38:	462c      	movmi	r4, r5
        x_oriented = state.TouchY;
 800ae3a:	4615      	movmi	r5, r2
        y_oriented = state.TouchX;
 800ae3c:	4622      	movmi	r2, r4
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800ae3e:	079c      	lsls	r4, r3, #30
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 800ae40:	bf44      	itt	mi
 800ae42:	f108 34ff 	addmi.w	r4, r8, #4294967295
 800ae46:	1b65      	submi	r5, r4, r5
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800ae48:	075b      	lsls	r3, r3, #29
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800ae4a:	680c      	ldr	r4, [r1, #0]
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 800ae4c:	bf48      	it	mi
 800ae4e:	f10e 33ff 	addmi.w	r3, lr, #4294967295
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800ae52:	fb05 f404 	mul.w	r4, r5, r4
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 800ae56:	bf48      	it	mi
 800ae58:	1a9a      	submi	r2, r3, r2
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800ae5a:	684b      	ldr	r3, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 800ae5c:	6030      	str	r0, [r6, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800ae5e:	4353      	muls	r3, r2
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800ae60:	68c8      	ldr	r0, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800ae62:	fbb4 f4f8 	udiv	r4, r4, r8
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800ae66:	fbb3 f3fe 	udiv	r3, r3, lr
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800ae6a:	4564      	cmp	r4, ip
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800ae6c:	6074      	str	r4, [r6, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800ae6e:	60b3      	str	r3, [r6, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800ae70:	bf8c      	ite	hi
 800ae72:	eba4 050c 	subhi.w	r5, r4, ip
 800ae76:	ebac 0504 	subls.w	r5, ip, r4
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800ae7a:	42bb      	cmp	r3, r7
 800ae7c:	bf8c      	ite	hi
 800ae7e:	1bda      	subhi	r2, r3, r7
 800ae80:	1afa      	subls	r2, r7, r3
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800ae82:	42a8      	cmp	r0, r5
 800ae84:	d301      	bcc.n	800ae8a <BSP_TS_GetState+0x8e>
 800ae86:	4290      	cmp	r0, r2
 800ae88:	d205      	bcs.n	800ae96 <BSP_TS_GetState+0x9a>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800ae8a:	618c      	str	r4, [r1, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800ae8c:	620b      	str	r3, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 800ae8e:	2000      	movs	r0, #0
}
 800ae90:	b004      	add	sp, #16
 800ae92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800ae96:	e9c6 c701 	strd	ip, r7, [r6, #4]
 800ae9a:	e7f8      	b.n	800ae8e <BSP_TS_GetState+0x92>
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800ae9c:	e9c6 0c00 	strd	r0, ip, [r6]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800aea0:	60b7      	str	r7, [r6, #8]
 800aea2:	e7f5      	b.n	800ae90 <BSP_TS_GetState+0x94>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800aea4:	f06f 0004 	mvn.w	r0, #4
 800aea8:	e7f2      	b.n	800ae90 <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 800aeaa:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800aeae:	e7ef      	b.n	800ae90 <BSP_TS_GetState+0x94>
 800aeb0:	24005d68 	.word	0x24005d68
 800aeb4:	24005d3c 	.word	0x24005d3c
 800aeb8:	24005d40 	.word	0x24005d40

0800aebc <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800aebc:	4b2d      	ldr	r3, [pc, #180]	; (800af74 <SystemInit+0xb8>)
 800aebe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800aec2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800aec6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800aeca:	691a      	ldr	r2, [r3, #16]
 800aecc:	f042 0210 	orr.w	r2, r2, #16
 800aed0:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800aed2:	4a29      	ldr	r2, [pc, #164]	; (800af78 <SystemInit+0xbc>)
 800aed4:	6813      	ldr	r3, [r2, #0]
 800aed6:	f003 030f 	and.w	r3, r3, #15
 800aeda:	2b06      	cmp	r3, #6
 800aedc:	d805      	bhi.n	800aeea <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800aede:	6813      	ldr	r3, [r2, #0]
 800aee0:	f023 030f 	bic.w	r3, r3, #15
 800aee4:	f043 0307 	orr.w	r3, r3, #7
 800aee8:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800aeea:	4b24      	ldr	r3, [pc, #144]	; (800af7c <SystemInit+0xc0>)
 800aeec:	681a      	ldr	r2, [r3, #0]
 800aeee:	f042 0201 	orr.w	r2, r2, #1
 800aef2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800aef4:	2200      	movs	r2, #0
 800aef6:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800aef8:	4a21      	ldr	r2, [pc, #132]	; (800af80 <SystemInit+0xc4>)
 800aefa:	6819      	ldr	r1, [r3, #0]
 800aefc:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800aefe:	491e      	ldr	r1, [pc, #120]	; (800af78 <SystemInit+0xbc>)
  RCC->CR &= 0xEAF6ED7FU;
 800af00:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800af02:	680a      	ldr	r2, [r1, #0]
 800af04:	0712      	lsls	r2, r2, #28
 800af06:	d505      	bpl.n	800af14 <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800af08:	680a      	ldr	r2, [r1, #0]
 800af0a:	f022 020f 	bic.w	r2, r2, #15
 800af0e:	f042 0207 	orr.w	r2, r2, #7
 800af12:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800af14:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800af16:	491b      	ldr	r1, [pc, #108]	; (800af84 <SystemInit+0xc8>)
  RCC->D1CFGR = 0x00000000;
 800af18:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800af1a:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 800af1c:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800af1e:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800af20:	4919      	ldr	r1, [pc, #100]	; (800af88 <SystemInit+0xcc>)
 800af22:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800af24:	4919      	ldr	r1, [pc, #100]	; (800af8c <SystemInit+0xd0>)
 800af26:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800af28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800af2a:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800af2c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800af2e:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800af30:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800af32:	6819      	ldr	r1, [r3, #0]
 800af34:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800af38:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800af3a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800af3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800af40:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 800af44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800af48:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800af4c:	4b10      	ldr	r3, [pc, #64]	; (800af90 <SystemInit+0xd4>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	0c1b      	lsrs	r3, r3, #16
 800af52:	041b      	lsls	r3, r3, #16
 800af54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af58:	d203      	bcs.n	800af62 <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800af5a:	4b0e      	ldr	r3, [pc, #56]	; (800af94 <SystemInit+0xd8>)
 800af5c:	2201      	movs	r2, #1
 800af5e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800af62:	4b0d      	ldr	r3, [pc, #52]	; (800af98 <SystemInit+0xdc>)
 800af64:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800af68:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800af6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800af6e:	4b01      	ldr	r3, [pc, #4]	; (800af74 <SystemInit+0xb8>)
 800af70:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800af72:	4770      	bx	lr
 800af74:	e000ed00 	.word	0xe000ed00
 800af78:	52002000 	.word	0x52002000
 800af7c:	58024400 	.word	0x58024400
 800af80:	eaf6ed7f 	.word	0xeaf6ed7f
 800af84:	02020200 	.word	0x02020200
 800af88:	01ff0000 	.word	0x01ff0000
 800af8c:	01010280 	.word	0x01010280
 800af90:	5c001000 	.word	0x5c001000
 800af94:	51008000 	.word	0x51008000
 800af98:	52004000 	.word	0x52004000

0800af9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800af9c:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800af9e:	2003      	movs	r0, #3
 800afa0:	f000 f854 	bl	800b04c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800afa4:	f002 fc0c 	bl	800d7c0 <HAL_RCC_GetSysClockFreq>
 800afa8:	490f      	ldr	r1, [pc, #60]	; (800afe8 <HAL_Init+0x4c>)
 800afaa:	4a10      	ldr	r2, [pc, #64]	; (800afec <HAL_Init+0x50>)
 800afac:	698b      	ldr	r3, [r1, #24]
 800afae:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800afb2:	5cd3      	ldrb	r3, [r2, r3]
 800afb4:	f003 031f 	and.w	r3, r3, #31
 800afb8:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800afba:	698b      	ldr	r3, [r1, #24]
 800afbc:	f003 030f 	and.w	r3, r3, #15
 800afc0:	5cd3      	ldrb	r3, [r2, r3]
 800afc2:	4a0b      	ldr	r2, [pc, #44]	; (800aff0 <HAL_Init+0x54>)
 800afc4:	f003 031f 	and.w	r3, r3, #31
 800afc8:	fa20 f303 	lsr.w	r3, r0, r3
 800afcc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800afce:	4b09      	ldr	r3, [pc, #36]	; (800aff4 <HAL_Init+0x58>)
 800afd0:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800afd2:	2000      	movs	r0, #0
 800afd4:	f7f6 fa0c 	bl	80013f0 <HAL_InitTick>
 800afd8:	4604      	mov	r4, r0
 800afda:	b918      	cbnz	r0, 800afe4 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800afdc:	f7f5 ff90 	bl	8000f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800afe0:	4620      	mov	r0, r4
 800afe2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800afe4:	2401      	movs	r4, #1
 800afe6:	e7fb      	b.n	800afe0 <HAL_Init+0x44>
 800afe8:	58024400 	.word	0x58024400
 800afec:	080256e8 	.word	0x080256e8
 800aff0:	2400004c 	.word	0x2400004c
 800aff4:	24000048 	.word	0x24000048

0800aff8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800aff8:	4a03      	ldr	r2, [pc, #12]	; (800b008 <HAL_IncTick+0x10>)
 800affa:	4b04      	ldr	r3, [pc, #16]	; (800b00c <HAL_IncTick+0x14>)
 800affc:	6811      	ldr	r1, [r2, #0]
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	440b      	add	r3, r1
 800b002:	6013      	str	r3, [r2, #0]
}
 800b004:	4770      	bx	lr
 800b006:	bf00      	nop
 800b008:	24005d6c 	.word	0x24005d6c
 800b00c:	24000050 	.word	0x24000050

0800b010 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800b010:	4b01      	ldr	r3, [pc, #4]	; (800b018 <HAL_GetTick+0x8>)
 800b012:	6818      	ldr	r0, [r3, #0]
}
 800b014:	4770      	bx	lr
 800b016:	bf00      	nop
 800b018:	24005d6c 	.word	0x24005d6c

0800b01c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b01c:	b538      	push	{r3, r4, r5, lr}
 800b01e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800b020:	f7ff fff6 	bl	800b010 <HAL_GetTick>
 800b024:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b026:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800b028:	bf1e      	ittt	ne
 800b02a:	4b04      	ldrne	r3, [pc, #16]	; (800b03c <HAL_Delay+0x20>)
 800b02c:	781b      	ldrbne	r3, [r3, #0]
 800b02e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b030:	f7ff ffee 	bl	800b010 <HAL_GetTick>
 800b034:	1b43      	subs	r3, r0, r5
 800b036:	42a3      	cmp	r3, r4
 800b038:	d3fa      	bcc.n	800b030 <HAL_Delay+0x14>
  {
  }
}
 800b03a:	bd38      	pop	{r3, r4, r5, pc}
 800b03c:	24000050 	.word	0x24000050

0800b040 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800b040:	4b01      	ldr	r3, [pc, #4]	; (800b048 <HAL_GetREVID+0x8>)
 800b042:	6818      	ldr	r0, [r3, #0]
}
 800b044:	0c00      	lsrs	r0, r0, #16
 800b046:	4770      	bx	lr
 800b048:	5c001000 	.word	0x5c001000

0800b04c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b04c:	4907      	ldr	r1, [pc, #28]	; (800b06c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b04e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b050:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b052:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b056:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b05a:	0412      	lsls	r2, r2, #16
 800b05c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b05e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b060:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800b068:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800b06a:	4770      	bx	lr
 800b06c:	e000ed00 	.word	0xe000ed00

0800b070 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b070:	4b16      	ldr	r3, [pc, #88]	; (800b0cc <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b072:	b530      	push	{r4, r5, lr}
 800b074:	68dc      	ldr	r4, [r3, #12]
 800b076:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b07a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b07e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b080:	2d04      	cmp	r5, #4
 800b082:	bf28      	it	cs
 800b084:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b086:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b088:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b08c:	bf8c      	ite	hi
 800b08e:	3c03      	subhi	r4, #3
 800b090:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b092:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 800b096:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b098:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b09c:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b0a0:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b0a4:	fa01 f104 	lsl.w	r1, r1, r4
 800b0a8:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b0ac:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800b0b0:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800b0b2:	db06      	blt.n	800b0c2 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b0b4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800b0b8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800b0bc:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800b0c0:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b0c2:	f000 000f 	and.w	r0, r0, #15
 800b0c6:	4a02      	ldr	r2, [pc, #8]	; (800b0d0 <HAL_NVIC_SetPriority+0x60>)
 800b0c8:	5413      	strb	r3, [r2, r0]
 800b0ca:	e7f9      	b.n	800b0c0 <HAL_NVIC_SetPriority+0x50>
 800b0cc:	e000ed00 	.word	0xe000ed00
 800b0d0:	e000ed14 	.word	0xe000ed14

0800b0d4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	db08      	blt.n	800b0ea <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b0d8:	2301      	movs	r3, #1
 800b0da:	0942      	lsrs	r2, r0, #5
 800b0dc:	f000 001f 	and.w	r0, r0, #31
 800b0e0:	fa03 f000 	lsl.w	r0, r3, r0
 800b0e4:	4b01      	ldr	r3, [pc, #4]	; (800b0ec <HAL_NVIC_EnableIRQ+0x18>)
 800b0e6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800b0ea:	4770      	bx	lr
 800b0ec:	e000e100 	.word	0xe000e100

0800b0f0 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800b0f0:	2800      	cmp	r0, #0
 800b0f2:	db0d      	blt.n	800b110 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b0f4:	0943      	lsrs	r3, r0, #5
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	f000 001f 	and.w	r0, r0, #31
 800b0fc:	3320      	adds	r3, #32
 800b0fe:	fa02 f000 	lsl.w	r0, r2, r0
 800b102:	4a04      	ldr	r2, [pc, #16]	; (800b114 <HAL_NVIC_DisableIRQ+0x24>)
 800b104:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800b108:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800b10c:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800b110:	4770      	bx	lr
 800b112:	bf00      	nop
 800b114:	e000e100 	.word	0xe000e100

0800b118 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800b118:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800b11c:	4b04      	ldr	r3, [pc, #16]	; (800b130 <HAL_MPU_Disable+0x18>)
 800b11e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b120:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b124:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800b126:	2200      	movs	r2, #0
 800b128:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 800b12c:	4770      	bx	lr
 800b12e:	bf00      	nop
 800b130:	e000ed00 	.word	0xe000ed00

0800b134 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800b134:	4b06      	ldr	r3, [pc, #24]	; (800b150 <HAL_MPU_Enable+0x1c>)
 800b136:	f040 0001 	orr.w	r0, r0, #1
 800b13a:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800b13e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b140:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b144:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800b146:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800b14a:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800b14e:	4770      	bx	lr
 800b150:	e000ed00 	.word	0xe000ed00

0800b154 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800b154:	7843      	ldrb	r3, [r0, #1]
 800b156:	4a14      	ldr	r2, [pc, #80]	; (800b1a8 <HAL_MPU_ConfigRegion+0x54>)
{
 800b158:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 800b15a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 800b15e:	7801      	ldrb	r1, [r0, #0]
 800b160:	b1e9      	cbz	r1, 800b19e <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800b162:	6843      	ldr	r3, [r0, #4]
 800b164:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b168:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b16a:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b16c:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b16e:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b172:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800b174:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b176:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800b17a:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b17c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800b180:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b182:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800b186:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b188:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800b18c:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b18e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b192:	7a01      	ldrb	r1, [r0, #8]
 800b194:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b198:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800b19c:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 800b19e:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 800b1a2:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 800b1a6:	e7f9      	b.n	800b19c <HAL_MPU_ConfigRegion+0x48>
 800b1a8:	e000ed00 	.word	0xe000ed00

0800b1ac <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800b1ac:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800b1ae:	4604      	mov	r4, r0
 800b1b0:	b908      	cbnz	r0, 800b1b6 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800b1b2:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800b1b4:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800b1b6:	7f43      	ldrb	r3, [r0, #29]
 800b1b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b1bc:	b913      	cbnz	r3, 800b1c4 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800b1be:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800b1c0:	f7f5 feb6 	bl	8000f30 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800b1c4:	2302      	movs	r3, #2
 800b1c6:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800b1c8:	7923      	ldrb	r3, [r4, #4]
 800b1ca:	b9e3      	cbnz	r3, 800b206 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800b1cc:	6823      	ldr	r3, [r4, #0]
 800b1ce:	4a13      	ldr	r2, [pc, #76]	; (800b21c <HAL_CRC_Init+0x70>)
 800b1d0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800b1d2:	689a      	ldr	r2, [r3, #8]
 800b1d4:	f022 0218 	bic.w	r2, r2, #24
 800b1d8:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800b1da:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800b1dc:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800b1de:	b9d2      	cbnz	r2, 800b216 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800b1e0:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800b1e4:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 800b1e6:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800b1e8:	689a      	ldr	r2, [r3, #8]
 800b1ea:	6961      	ldr	r1, [r4, #20]
 800b1ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b1f0:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800b1f2:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800b1f4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800b1f6:	689a      	ldr	r2, [r3, #8]
 800b1f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b1fc:	430a      	orrs	r2, r1
 800b1fe:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800b200:	2301      	movs	r3, #1
 800b202:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 800b204:	e7d6      	b.n	800b1b4 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800b206:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800b20a:	4620      	mov	r0, r4
 800b20c:	f000 f808 	bl	800b220 <HAL_CRCEx_Polynomial_Set>
 800b210:	2800      	cmp	r0, #0
 800b212:	d0e2      	beq.n	800b1da <HAL_CRC_Init+0x2e>
 800b214:	e7cd      	b.n	800b1b2 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800b216:	6922      	ldr	r2, [r4, #16]
 800b218:	e7e4      	b.n	800b1e4 <HAL_CRC_Init+0x38>
 800b21a:	bf00      	nop
 800b21c:	04c11db7 	.word	0x04c11db7

0800b220 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800b220:	07cb      	lsls	r3, r1, #31
{
 800b222:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800b224:	d50c      	bpl.n	800b240 <HAL_CRCEx_Polynomial_Set+0x20>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800b226:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800b228:	3b01      	subs	r3, #1
 800b22a:	d31c      	bcc.n	800b266 <HAL_CRCEx_Polynomial_Set+0x46>
 800b22c:	fa21 f403 	lsr.w	r4, r1, r3
 800b230:	07e4      	lsls	r4, r4, #31
 800b232:	d5f9      	bpl.n	800b228 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 800b234:	2a10      	cmp	r2, #16
 800b236:	d012      	beq.n	800b25e <HAL_CRCEx_Polynomial_Set+0x3e>
 800b238:	d804      	bhi.n	800b244 <HAL_CRCEx_Polynomial_Set+0x24>
 800b23a:	b13a      	cbz	r2, 800b24c <HAL_CRCEx_Polynomial_Set+0x2c>
 800b23c:	2a08      	cmp	r2, #8
 800b23e:	d010      	beq.n	800b262 <HAL_CRCEx_Polynomial_Set+0x42>
        }
        break;
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
        {
          status =   HAL_ERROR;
 800b240:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 800b242:	e00b      	b.n	800b25c <HAL_CRCEx_Polynomial_Set+0x3c>
    switch (PolyLength)
 800b244:	2a18      	cmp	r2, #24
 800b246:	d1fb      	bne.n	800b240 <HAL_CRCEx_Polynomial_Set+0x20>
        if (msb >= HAL_CRC_LENGTH_7B)
 800b248:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 800b24a:	d8f9      	bhi.n	800b240 <HAL_CRCEx_Polynomial_Set+0x20>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800b24c:	6800      	ldr	r0, [r0, #0]
 800b24e:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800b250:	6883      	ldr	r3, [r0, #8]
 800b252:	f023 0318 	bic.w	r3, r3, #24
 800b256:	431a      	orrs	r2, r3
 800b258:	6082      	str	r2, [r0, #8]
 800b25a:	2000      	movs	r0, #0
}
 800b25c:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 800b25e:	2b07      	cmp	r3, #7
 800b260:	e7f3      	b.n	800b24a <HAL_CRCEx_Polynomial_Set+0x2a>
        if (msb >= HAL_CRC_LENGTH_16B)
 800b262:	2b0f      	cmp	r3, #15
 800b264:	e7f1      	b.n	800b24a <HAL_CRCEx_Polynomial_Set+0x2a>
    switch (PolyLength)
 800b266:	2a00      	cmp	r2, #0
 800b268:	d1ea      	bne.n	800b240 <HAL_CRCEx_Polynomial_Set+0x20>
 800b26a:	e7ef      	b.n	800b24c <HAL_CRCEx_Polynomial_Set+0x2c>

0800b26c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800b26c:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800b26e:	4604      	mov	r4, r0
 800b270:	2800      	cmp	r0, #0
 800b272:	d036      	beq.n	800b2e2 <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800b274:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 800b278:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b27c:	b91b      	cbnz	r3, 800b286 <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800b27e:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800b282:	f7f5 fe6d 	bl	8000f60 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800b286:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800b288:	69e0      	ldr	r0, [r4, #28]
 800b28a:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800b28c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800b290:	6823      	ldr	r3, [r4, #0]
 800b292:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800b294:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800b296:	6819      	ldr	r1, [r3, #0]
 800b298:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 800b29c:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800b2a0:	430a      	orrs	r2, r1
 800b2a2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800b2a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b2a6:	68a2      	ldr	r2, [r4, #8]
 800b2a8:	f421 7183 	bic.w	r1, r1, #262	; 0x106
 800b2ac:	4302      	orrs	r2, r0
 800b2ae:	f021 0101 	bic.w	r1, r1, #1
 800b2b2:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800b2b4:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800b2b6:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800b2b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b2ba:	0c12      	lsrs	r2, r2, #16
 800b2bc:	0412      	lsls	r2, r2, #16
 800b2be:	430a      	orrs	r2, r1
 800b2c0:	641a      	str	r2, [r3, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800b2c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b2c4:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800b2c8:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800b2cc:	0552      	lsls	r2, r2, #21
 800b2ce:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800b2d2:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800b2d4:	430a      	orrs	r2, r1
 800b2d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800b2d8:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800b2da:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800b2dc:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
 800b2e0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800b2e2:	2001      	movs	r0, #1
 800b2e4:	e7fc      	b.n	800b2e0 <HAL_DMA2D_Init+0x74>

0800b2e6 <HAL_DMA2D_LineEventCallback>:
 800b2e6:	4770      	bx	lr

0800b2e8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 800b2e8:	4770      	bx	lr

0800b2ea <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800b2ea:	6803      	ldr	r3, [r0, #0]
{
 800b2ec:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800b2ee:	685e      	ldr	r6, [r3, #4]
{
 800b2f0:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800b2f2:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800b2f4:	07f2      	lsls	r2, r6, #31
 800b2f6:	d514      	bpl.n	800b322 <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800b2f8:	05e9      	lsls	r1, r5, #23
 800b2fa:	d512      	bpl.n	800b322 <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800b2fc:	681a      	ldr	r2, [r3, #0]
 800b2fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b302:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800b304:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800b306:	f042 0201 	orr.w	r2, r2, #1
 800b30a:	6642      	str	r2, [r0, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800b30c:	2201      	movs	r2, #1
 800b30e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800b310:	2304      	movs	r3, #4
 800b312:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800b316:	2300      	movs	r3, #0
 800b318:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800b31c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b31e:	b103      	cbz	r3, 800b322 <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800b320:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800b322:	06b2      	lsls	r2, r6, #26
 800b324:	d516      	bpl.n	800b354 <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800b326:	04ab      	lsls	r3, r5, #18
 800b328:	d514      	bpl.n	800b354 <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800b32a:	6823      	ldr	r3, [r4, #0]
 800b32c:	681a      	ldr	r2, [r3, #0]
 800b32e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b332:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800b334:	2220      	movs	r2, #32
 800b336:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800b338:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b33a:	f043 0302 	orr.w	r3, r3, #2
 800b33e:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800b340:	2304      	movs	r3, #4
 800b342:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800b346:	2300      	movs	r3, #0
 800b348:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800b34c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b34e:	b10b      	cbz	r3, 800b354 <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800b350:	4620      	mov	r0, r4
 800b352:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800b354:	0730      	lsls	r0, r6, #28
 800b356:	d516      	bpl.n	800b386 <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800b358:	0529      	lsls	r1, r5, #20
 800b35a:	d514      	bpl.n	800b386 <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800b35c:	6823      	ldr	r3, [r4, #0]
 800b35e:	681a      	ldr	r2, [r3, #0]
 800b360:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b364:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800b366:	2208      	movs	r2, #8
 800b368:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800b36a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b36c:	f043 0304 	orr.w	r3, r3, #4
 800b370:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800b372:	2304      	movs	r3, #4
 800b374:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800b378:	2300      	movs	r3, #0
 800b37a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800b37e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b380:	b10b      	cbz	r3, 800b386 <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800b382:	4620      	mov	r0, r4
 800b384:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800b386:	0772      	lsls	r2, r6, #29
 800b388:	d50b      	bpl.n	800b3a2 <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800b38a:	056b      	lsls	r3, r5, #21
 800b38c:	d509      	bpl.n	800b3a2 <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800b38e:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800b390:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800b392:	681a      	ldr	r2, [r3, #0]
 800b394:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b398:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800b39a:	2204      	movs	r2, #4
 800b39c:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800b39e:	f7ff ffa2 	bl	800b2e6 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800b3a2:	07b0      	lsls	r0, r6, #30
 800b3a4:	d514      	bpl.n	800b3d0 <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800b3a6:	05a9      	lsls	r1, r5, #22
 800b3a8:	d512      	bpl.n	800b3d0 <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800b3aa:	6823      	ldr	r3, [r4, #0]
 800b3ac:	681a      	ldr	r2, [r3, #0]
 800b3ae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b3b2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800b3b4:	2202      	movs	r2, #2
 800b3b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800b3b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b3ba:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 800b3c8:	6a23      	ldr	r3, [r4, #32]
 800b3ca:	b10b      	cbz	r3, 800b3d0 <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800b3cc:	4620      	mov	r0, r4
 800b3ce:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800b3d0:	06f2      	lsls	r2, r6, #27
 800b3d2:	d513      	bpl.n	800b3fc <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800b3d4:	04eb      	lsls	r3, r5, #19
 800b3d6:	d511      	bpl.n	800b3fc <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800b3d8:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800b3da:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800b3dc:	681a      	ldr	r2, [r3, #0]
 800b3de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b3e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800b3e4:	2210      	movs	r2, #16
 800b3e6:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800b3e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b3ea:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800b3f8:	f7ff ff76 	bl	800b2e8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800b3fc:	bd70      	pop	{r4, r5, r6, pc}

0800b3fe <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 800b3fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b402:	4607      	mov	r7, r0
 800b404:	460d      	mov	r5, r1
 800b406:	4614      	mov	r4, r2
 800b408:	461e      	mov	r6, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800b40a:	f7ff fe01 	bl	800b010 <HAL_GetTick>
 800b40e:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800b414:	07d2      	lsls	r2, r2, #31
 800b416:	d50a      	bpl.n	800b42e <DSI_ShortWrite+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800b418:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 800b41c:	9906      	ldr	r1, [sp, #24]

  return HAL_OK;
 800b41e:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800b420:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800b424:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800b428:	66dc      	str	r4, [r3, #108]	; 0x6c
}
 800b42a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800b42e:	f7ff fdef 	bl	800b010 <HAL_GetTick>
 800b432:	eba0 0008 	sub.w	r0, r0, r8
 800b436:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b43a:	d9e9      	bls.n	800b410 <DSI_ShortWrite+0x12>
      return HAL_TIMEOUT;
 800b43c:	2003      	movs	r0, #3
 800b43e:	e7f4      	b.n	800b42a <DSI_ShortWrite+0x2c>

0800b440 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b440:	7c03      	ldrb	r3, [r0, #16]
 800b442:	2b01      	cmp	r3, #1
 800b444:	d05c      	beq.n	800b500 <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 800b446:	2200      	movs	r2, #0
 800b448:	6803      	ldr	r3, [r0, #0]
 800b44a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800b44e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800b452:	07ca      	lsls	r2, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 800b454:	6181      	str	r1, [r0, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800b456:	d507      	bpl.n	800b468 <HAL_DSI_ConfigErrorMonitor+0x28>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 800b458:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800b45c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 800b460:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 800b464:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800b468:	078a      	lsls	r2, r1, #30
 800b46a:	d505      	bpl.n	800b478 <HAL_DSI_ConfigErrorMonitor+0x38>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 800b46c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800b470:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 800b474:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800b478:	074a      	lsls	r2, r1, #29
 800b47a:	d505      	bpl.n	800b488 <HAL_DSI_ConfigErrorMonitor+0x48>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 800b47c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800b480:	f042 0201 	orr.w	r2, r2, #1
 800b484:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 800b488:	070a      	lsls	r2, r1, #28
 800b48a:	d505      	bpl.n	800b498 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 800b48c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800b490:	f042 0202 	orr.w	r2, r2, #2
 800b494:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 800b498:	06ca      	lsls	r2, r1, #27
 800b49a:	d505      	bpl.n	800b4a8 <HAL_DSI_ConfigErrorMonitor+0x68>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 800b49c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800b4a0:	f042 020c 	orr.w	r2, r2, #12
 800b4a4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 800b4a8:	068a      	lsls	r2, r1, #26
 800b4aa:	d505      	bpl.n	800b4b8 <HAL_DSI_ConfigErrorMonitor+0x78>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800b4ac:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800b4b0:	f042 0210 	orr.w	r2, r2, #16
 800b4b4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 800b4b8:	064a      	lsls	r2, r1, #25
 800b4ba:	d505      	bpl.n	800b4c8 <HAL_DSI_ConfigErrorMonitor+0x88>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800b4bc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800b4c0:	f042 0220 	orr.w	r2, r2, #32
 800b4c4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800b4c8:	060a      	lsls	r2, r1, #24
 800b4ca:	d505      	bpl.n	800b4d8 <HAL_DSI_ConfigErrorMonitor+0x98>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800b4cc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800b4d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4d4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800b4d8:	05ca      	lsls	r2, r1, #23
 800b4da:	d505      	bpl.n	800b4e8 <HAL_DSI_ConfigErrorMonitor+0xa8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800b4dc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800b4e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b4e4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800b4e8:	058a      	lsls	r2, r1, #22
 800b4ea:	d505      	bpl.n	800b4f8 <HAL_DSI_ConfigErrorMonitor+0xb8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 800b4ec:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800b4f0:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 800b4f4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800b500:	2002      	movs	r0, #2
}
 800b502:	4770      	bx	lr

0800b504 <HAL_DSI_Init>:
{
 800b504:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b506:	460d      	mov	r5, r1
  if (hdsi == NULL)
 800b508:	4604      	mov	r4, r0
 800b50a:	2800      	cmp	r0, #0
 800b50c:	f000 80a9 	beq.w	800b662 <HAL_DSI_Init+0x15e>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800b510:	7c43      	ldrb	r3, [r0, #17]
 800b512:	b90b      	cbnz	r3, 800b518 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 800b514:	f7f5 fd48 	bl	8000fa8 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 800b518:	2303      	movs	r3, #3
 800b51a:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 800b51c:	2300      	movs	r3, #0
 800b51e:	9300      	str	r3, [sp, #0]
 800b520:	6823      	ldr	r3, [r4, #0]
 800b522:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800b526:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800b52a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800b52e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800b532:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b536:	9300      	str	r3, [sp, #0]
 800b538:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800b53a:	f7ff fd69 	bl	800b010 <HAL_GetTick>
 800b53e:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800b540:	6822      	ldr	r2, [r4, #0]
 800b542:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 800b546:	04d9      	lsls	r1, r3, #19
 800b548:	d57a      	bpl.n	800b640 <HAL_DSI_Init+0x13c>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800b54a:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 800b54e:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 800b552:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 800b556:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800b55a:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800b55e:	e9d5 0300 	ldrd	r0, r3, [r5]
 800b562:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800b564:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 800b568:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800b56a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 800b56e:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800b570:	430b      	orrs	r3, r1
 800b572:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 800b576:	2300      	movs	r3, #0
 800b578:	9301      	str	r3, [sp, #4]
 800b57a:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 800b57e:	f043 0301 	orr.w	r3, r3, #1
 800b582:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 800b586:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 800b58a:	f003 0301 	and.w	r3, r3, #1
 800b58e:	9301      	str	r3, [sp, #4]
 800b590:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 800b592:	f7ff fd43 	bl	800b01c <HAL_Delay>
  tickstart = HAL_GetTick();
 800b596:	f7ff fd3b 	bl	800b010 <HAL_GetTick>
 800b59a:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800b59c:	6823      	ldr	r3, [r4, #0]
 800b59e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800b5a2:	05d2      	lsls	r2, r2, #23
 800b5a4:	d556      	bpl.n	800b654 <HAL_DSI_Init+0x150>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800b5a6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800b5aa:	f246 10a8 	movw	r0, #25000	; 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800b5ae:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800b5b0:	f042 0206 	orr.w	r2, r2, #6
 800b5b4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800b5b8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800b5bc:	f022 0203 	bic.w	r2, r2, #3
 800b5c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800b5c4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800b5c8:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800b5ca:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800b5cc:	f042 0201 	orr.w	r2, r2, #1
 800b5d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800b5d4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800b5d8:	f022 0203 	bic.w	r2, r2, #3
 800b5dc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800b5e0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800b5e4:	430a      	orrs	r2, r1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800b5e6:	68a1      	ldr	r1, [r4, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800b5e8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800b5ec:	689a      	ldr	r2, [r3, #8]
 800b5ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b5f2:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800b5f4:	689a      	ldr	r2, [r3, #8]
 800b5f6:	430a      	orrs	r2, r1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800b5f8:	491b      	ldr	r1, [pc, #108]	; (800b668 <HAL_DSI_Init+0x164>)
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800b5fa:	609a      	str	r2, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800b5fc:	686a      	ldr	r2, [r5, #4]
 800b5fe:	2a01      	cmp	r2, #1
 800b600:	bf38      	it	cc
 800b602:	2201      	movcc	r2, #1
 800b604:	434a      	muls	r2, r1
 800b606:	68a9      	ldr	r1, [r5, #8]
 800b608:	f001 0103 	and.w	r1, r1, #3
 800b60c:	408a      	lsls	r2, r1
 800b60e:	6829      	ldr	r1, [r5, #0]
 800b610:	4341      	muls	r1, r0
  hdsi->Instance->IER[0U] = 0U;
 800b612:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800b614:	fbb2 f2f1 	udiv	r2, r2, r1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800b618:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 800b61c:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800b620:	f8c3 1418 	str.w	r1, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800b624:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 800b628:	430a      	orrs	r2, r1
 800b62a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 800b62e:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800b632:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  hdsi->State = HAL_DSI_STATE_READY;
 800b636:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800b638:	6160      	str	r0, [r4, #20]
  hdsi->ErrorMsk = 0U;
 800b63a:	61a0      	str	r0, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 800b63c:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 800b63e:	e007      	b.n	800b650 <HAL_DSI_Init+0x14c>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800b640:	f7ff fce6 	bl	800b010 <HAL_GetTick>
 800b644:	1b80      	subs	r0, r0, r6
 800b646:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b64a:	f67f af79 	bls.w	800b540 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 800b64e:	2003      	movs	r0, #3
}
 800b650:	b002      	add	sp, #8
 800b652:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800b654:	f7ff fcdc 	bl	800b010 <HAL_GetTick>
 800b658:	1b80      	subs	r0, r0, r6
 800b65a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b65e:	d99d      	bls.n	800b59c <HAL_DSI_Init+0x98>
 800b660:	e7f5      	b.n	800b64e <HAL_DSI_Init+0x14a>
    return HAL_ERROR;
 800b662:	2001      	movs	r0, #1
 800b664:	e7f4      	b.n	800b650 <HAL_DSI_Init+0x14c>
 800b666:	bf00      	nop
 800b668:	003d0900 	.word	0x003d0900

0800b66c <HAL_DSI_ErrorCallback>:
 800b66c:	4770      	bx	lr

0800b66e <HAL_DSI_IRQHandler>:
{
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800b66e:	6803      	ldr	r3, [r0, #0]
 800b670:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800b674:	07d1      	lsls	r1, r2, #31
{
 800b676:	b510      	push	{r4, lr}
 800b678:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800b67a:	d508      	bpl.n	800b68e <HAL_DSI_IRQHandler+0x20>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 800b67c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800b680:	07d2      	lsls	r2, r2, #31
 800b682:	d504      	bpl.n	800b68e <HAL_DSI_IRQHandler+0x20>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 800b684:	2201      	movs	r2, #1
 800b686:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 800b68a:	f7f6 fb0d 	bl	8001ca8 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800b68e:	6823      	ldr	r3, [r4, #0]
 800b690:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800b694:	0791      	lsls	r1, r2, #30
 800b696:	d509      	bpl.n	800b6ac <HAL_DSI_IRQHandler+0x3e>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 800b698:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800b69c:	0792      	lsls	r2, r2, #30
 800b69e:	d505      	bpl.n	800b6ac <HAL_DSI_IRQHandler+0x3e>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800b6a0:	2202      	movs	r2, #2
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800b6a2:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800b6a4:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800b6a8:	f7f6 fb30 	bl	8001d0c <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 800b6ac:	69a3      	ldr	r3, [r4, #24]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d04e      	beq.n	800b750 <HAL_DSI_IRQHandler+0xe2>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800b6b2:	6821      	ldr	r1, [r4, #0]
 800b6b4:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800b6b8:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800b6bc:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800b6c0:	401a      	ands	r2, r3
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800b6c2:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800b6c6:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800b6c8:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800b6ca:	b119      	cbz	r1, 800b6d4 <HAL_DSI_IRQHandler+0x66>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800b6cc:	6961      	ldr	r1, [r4, #20]
 800b6ce:	f041 0101 	orr.w	r1, r1, #1
 800b6d2:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800b6d4:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 800b6d8:	d003      	beq.n	800b6e2 <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800b6da:	6962      	ldr	r2, [r4, #20]
 800b6dc:	f042 0202 	orr.w	r2, r2, #2
 800b6e0:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800b6e2:	07d8      	lsls	r0, r3, #31
 800b6e4:	d503      	bpl.n	800b6ee <HAL_DSI_IRQHandler+0x80>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800b6e6:	6962      	ldr	r2, [r4, #20]
 800b6e8:	f042 0204 	orr.w	r2, r2, #4
 800b6ec:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800b6ee:	0799      	lsls	r1, r3, #30
 800b6f0:	d503      	bpl.n	800b6fa <HAL_DSI_IRQHandler+0x8c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800b6f2:	6962      	ldr	r2, [r4, #20]
 800b6f4:	f042 0208 	orr.w	r2, r2, #8
 800b6f8:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800b6fa:	f013 0f0c 	tst.w	r3, #12
 800b6fe:	d003      	beq.n	800b708 <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800b700:	6962      	ldr	r2, [r4, #20]
 800b702:	f042 0210 	orr.w	r2, r2, #16
 800b706:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800b708:	06da      	lsls	r2, r3, #27
 800b70a:	d503      	bpl.n	800b714 <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 800b70c:	6962      	ldr	r2, [r4, #20]
 800b70e:	f042 0220 	orr.w	r2, r2, #32
 800b712:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 800b714:	0698      	lsls	r0, r3, #26
 800b716:	d503      	bpl.n	800b720 <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800b718:	6962      	ldr	r2, [r4, #20]
 800b71a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b71e:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800b720:	0659      	lsls	r1, r3, #25
 800b722:	d503      	bpl.n	800b72c <HAL_DSI_IRQHandler+0xbe>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 800b724:	6962      	ldr	r2, [r4, #20]
 800b726:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b72a:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800b72c:	061a      	lsls	r2, r3, #24
 800b72e:	d503      	bpl.n	800b738 <HAL_DSI_IRQHandler+0xca>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800b730:	6962      	ldr	r2, [r4, #20]
 800b732:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b736:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800b738:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 800b73c:	d003      	beq.n	800b746 <HAL_DSI_IRQHandler+0xd8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800b73e:	6963      	ldr	r3, [r4, #20]
 800b740:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b744:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800b746:	6963      	ldr	r3, [r4, #20]
 800b748:	b113      	cbz	r3, 800b750 <HAL_DSI_IRQHandler+0xe2>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 800b74a:	4620      	mov	r0, r4
 800b74c:	f7ff ff8e 	bl	800b66c <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 800b750:	bd10      	pop	{r4, pc}

0800b752 <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b752:	7c03      	ldrb	r3, [r0, #16]
 800b754:	2b01      	cmp	r3, #1
 800b756:	d00b      	beq.n	800b770 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 800b758:	6803      	ldr	r3, [r0, #0]
 800b75a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b75c:	f022 0203 	bic.w	r2, r2, #3
 800b760:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 800b762:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b764:	4311      	orrs	r1, r2
 800b766:	6319      	str	r1, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b768:	2300      	movs	r3, #0
 800b76a:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800b76c:	4618      	mov	r0, r3
 800b76e:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800b770:	2002      	movs	r0, #2
}
 800b772:	4770      	bx	lr

0800b774 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 800b774:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b776:	7c03      	ldrb	r3, [r0, #16]
 800b778:	2b01      	cmp	r3, #1
 800b77a:	d06a      	beq.n	800b852 <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800b77c:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800b77e:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800b780:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b782:	f042 0201 	orr.w	r2, r2, #1
 800b786:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800b788:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800b78c:	f022 0201 	bic.w	r2, r2, #1
 800b790:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 800b794:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800b798:	f042 0201 	orr.w	r2, r2, #1
 800b79c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800b7a0:	68da      	ldr	r2, [r3, #12]
 800b7a2:	f022 0203 	bic.w	r2, r2, #3
 800b7a6:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800b7a8:	68da      	ldr	r2, [r3, #12]
 800b7aa:	4322      	orrs	r2, r4
 800b7ac:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800b7ae:	695a      	ldr	r2, [r3, #20]
 800b7b0:	f022 0207 	bic.w	r2, r2, #7
 800b7b4:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800b7b6:	695c      	ldr	r4, [r3, #20]
 800b7b8:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 800b7bc:	432a      	orrs	r2, r5
 800b7be:	694d      	ldr	r5, [r1, #20]
 800b7c0:	432a      	orrs	r2, r5

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800b7c2:	684d      	ldr	r5, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800b7c4:	4322      	orrs	r2, r4
 800b7c6:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800b7c8:	691a      	ldr	r2, [r3, #16]
 800b7ca:	f022 020f 	bic.w	r2, r2, #15
 800b7ce:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800b7d0:	691c      	ldr	r4, [r3, #16]
 800b7d2:	432c      	orrs	r4, r5
 800b7d4:	611c      	str	r4, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800b7d6:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 800b7da:	f024 040e 	bic.w	r4, r4, #14
 800b7de:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800b7e2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800b7e6:	688c      	ldr	r4, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800b7e8:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 800b7ec:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 800b7f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b7f2:	0c12      	lsrs	r2, r2, #16
 800b7f4:	0412      	lsls	r2, r2, #16
 800b7f6:	665a      	str	r2, [r3, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800b7f8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b7fa:	4322      	orrs	r2, r4
 800b7fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 800b7fe:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800b802:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800b806:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800b80a:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 800b80e:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 800b812:	432a      	orrs	r2, r5
 800b814:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800b816:	432a      	orrs	r2, r5
 800b818:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800b81a:	6a89      	ldr	r1, [r1, #40]	; 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800b81c:	432a      	orrs	r2, r5
 800b81e:	4322      	orrs	r2, r4
 800b820:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 800b824:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b826:	f022 0201 	bic.w	r2, r2, #1
 800b82a:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800b82c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b82e:	430a      	orrs	r2, r1
 800b830:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800b832:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800b836:	f042 0201 	orr.w	r2, r2, #1
 800b83a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 800b83e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800b842:	f042 0202 	orr.w	r2, r2, #2
 800b846:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b84a:	2300      	movs	r3, #0
 800b84c:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800b84e:	4618      	mov	r0, r3
}
 800b850:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800b852:	2002      	movs	r0, #2
 800b854:	e7fc      	b.n	800b850 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

0800b858 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 800b858:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b85a:	7c03      	ldrb	r3, [r0, #16]
 800b85c:	2b01      	cmp	r3, #1
 800b85e:	d02a      	beq.n	800b8b6 <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 800b860:	6802      	ldr	r2, [r0, #0]
 800b862:	4b16      	ldr	r3, [pc, #88]	; (800b8bc <HAL_DSI_ConfigCommand+0x64>)
 800b864:	6e94      	ldr	r4, [r2, #104]	; 0x68
 800b866:	4023      	ands	r3, r4
 800b868:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800b86a:	6e94      	ldr	r4, [r2, #104]	; 0x68
 800b86c:	e9d1 3500 	ldrd	r3, r5, [r1]
 800b870:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 800b872:	688d      	ldr	r5, [r1, #8]
 800b874:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 800b876:	68cd      	ldr	r5, [r1, #12]
 800b878:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 800b87a:	690d      	ldr	r5, [r1, #16]
 800b87c:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 800b87e:	694d      	ldr	r5, [r1, #20]
 800b880:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 800b882:	698d      	ldr	r5, [r1, #24]
 800b884:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 800b886:	69cd      	ldr	r5, [r1, #28]
 800b888:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 800b88a:	6a0d      	ldr	r5, [r1, #32]
 800b88c:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 800b88e:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800b890:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 800b892:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800b894:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 800b896:	6acd      	ldr	r5, [r1, #44]	; 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800b898:	6b09      	ldr	r1, [r1, #48]	; 0x30
                           LPCmd->LPDcsLongWrite      | \
 800b89a:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800b89c:	4323      	orrs	r3, r4
 800b89e:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 800b8a0:	6e93      	ldr	r3, [r2, #104]	; 0x68
 800b8a2:	f023 0302 	bic.w	r3, r3, #2
 800b8a6:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800b8a8:	6e93      	ldr	r3, [r2, #104]	; 0x68
 800b8aa:	430b      	orrs	r3, r1
 800b8ac:	6693      	str	r3, [r2, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800b8b2:	4618      	mov	r0, r3
}
 800b8b4:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800b8b6:	2002      	movs	r0, #2
 800b8b8:	e7fc      	b.n	800b8b4 <HAL_DSI_ConfigCommand+0x5c>
 800b8ba:	bf00      	nop
 800b8bc:	fef080ff 	.word	0xfef080ff

0800b8c0 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b8c0:	7c03      	ldrb	r3, [r0, #16]
 800b8c2:	2b01      	cmp	r3, #1
 800b8c4:	d00b      	beq.n	800b8de <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800b8c6:	6803      	ldr	r3, [r0, #0]
 800b8c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8ca:	f022 021f 	bic.w	r2, r2, #31
 800b8ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800b8d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8d2:	4311      	orrs	r1, r2
 800b8d4:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800b8da:	4618      	mov	r0, r3
 800b8dc:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800b8de:	2002      	movs	r0, #2
}
 800b8e0:	4770      	bx	lr

0800b8e2 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 800b8e2:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b8e4:	7c03      	ldrb	r3, [r0, #16]
 800b8e6:	2b01      	cmp	r3, #1
 800b8e8:	d035      	beq.n	800b956 <HAL_DSI_ConfigPhyTimer+0x74>
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800b8ea:	6803      	ldr	r3, [r0, #0]
  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800b8ec:	e9d1 2400 	ldrd	r2, r4, [r1]
 800b8f0:	4294      	cmp	r4, r2
 800b8f2:	bf38      	it	cc
 800b8f4:	4614      	movcc	r4, r2
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800b8f6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b8fa:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 800b8fe:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800b902:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b906:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b90a:	4322      	orrs	r2, r4
 800b90c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800b910:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800b914:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800b918:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800b91c:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800b920:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800b924:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800b926:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800b92a:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800b92c:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800b92e:	432a      	orrs	r2, r5
 800b930:	4322      	orrs	r2, r4
 800b932:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800b936:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800b93a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800b93e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800b942:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800b946:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800b94a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b94e:	2300      	movs	r3, #0
 800b950:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800b952:	4618      	mov	r0, r3
}
 800b954:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800b956:	2002      	movs	r0, #2
 800b958:	e7fc      	b.n	800b954 <HAL_DSI_ConfigPhyTimer+0x72>
	...

0800b95c <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 800b95c:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b95e:	7c03      	ldrb	r3, [r0, #16]
 800b960:	2b01      	cmp	r3, #1
 800b962:	d05c      	beq.n	800ba1e <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800b964:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800b966:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800b968:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800b96a:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800b96c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800b970:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800b972:	689a      	ldr	r2, [r3, #8]
 800b974:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800b978:	684c      	ldr	r4, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800b97a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 800b97c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800b97e:	b292      	uxth	r2, r2
 800b980:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800b982:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800b984:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b988:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800b98a:	4a26      	ldr	r2, [pc, #152]	; (800ba24 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 800b98c:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800b98e:	4014      	ands	r4, r2
 800b990:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800b992:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800b994:	432c      	orrs	r4, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800b996:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800b998:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 800b99a:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800b99c:	4014      	ands	r4, r2
 800b99e:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800b9a0:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800b9a2:	432c      	orrs	r4, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800b9a4:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800b9a6:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800b9a8:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800b9ac:	4014      	ands	r4, r2
 800b9ae:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800b9b2:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800b9b6:	432c      	orrs	r4, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800b9b8:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800b9ba:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 800b9be:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b9c2:	4014      	ands	r4, r2
 800b9c4:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800b9c8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b9cc:	432c      	orrs	r4, r5
 800b9ce:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800b9d2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b9d6:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 800b9da:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800b9de:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b9e2:	698d      	ldr	r5, [r1, #24]
 800b9e4:	432c      	orrs	r4, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800b9e6:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800b9e8:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800b9ea:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 800b9ee:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 800b9f2:	4014      	ands	r4, r2
 800b9f4:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800b9f8:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 800b9fc:	432c      	orrs	r4, r5
 800b9fe:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800ba02:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 800ba06:	4022      	ands	r2, r4
 800ba08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800ba0c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800ba10:	430a      	orrs	r2, r1
 800ba12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800ba16:	2300      	movs	r3, #0
 800ba18:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800ba1a:	4618      	mov	r0, r3
}
 800ba1c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800ba1e:	2002      	movs	r0, #2
 800ba20:	e7fc      	b.n	800ba1c <HAL_DSI_ConfigHostTimeouts+0xc0>
 800ba22:	bf00      	nop
 800ba24:	ffff0000 	.word	0xffff0000

0800ba28 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800ba28:	7c03      	ldrb	r3, [r0, #16]
{
 800ba2a:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d01c      	beq.n	800ba6a <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800ba30:	6802      	ldr	r2, [r0, #0]
 800ba32:	2300      	movs	r3, #0
 800ba34:	9300      	str	r3, [sp, #0]
 800ba36:	6851      	ldr	r1, [r2, #4]
 800ba38:	f041 0101 	orr.w	r1, r1, #1
 800ba3c:	6051      	str	r1, [r2, #4]
 800ba3e:	6851      	ldr	r1, [r2, #4]
 800ba40:	f001 0101 	and.w	r1, r1, #1
 800ba44:	9100      	str	r1, [sp, #0]
 800ba46:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800ba48:	9301      	str	r3, [sp, #4]
 800ba4a:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 800ba4e:	f041 0108 	orr.w	r1, r1, #8
 800ba52:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 800ba56:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800ba5a:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800ba5c:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800ba5e:	f002 0208 	and.w	r2, r2, #8
 800ba62:	9201      	str	r2, [sp, #4]
 800ba64:	9a01      	ldr	r2, [sp, #4]
}
 800ba66:	b002      	add	sp, #8
 800ba68:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800ba6a:	2002      	movs	r0, #2
 800ba6c:	e7fb      	b.n	800ba66 <HAL_DSI_Start+0x3e>

0800ba6e <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800ba6e:	7c03      	ldrb	r3, [r0, #16]
 800ba70:	2b01      	cmp	r3, #1
 800ba72:	d00a      	beq.n	800ba8a <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 800ba74:	6802      	ldr	r2, [r0, #0]
 800ba76:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 800ba7a:	f043 0304 	orr.w	r3, r3, #4
 800ba7e:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800ba82:	2300      	movs	r3, #0
 800ba84:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800ba86:	4618      	mov	r0, r3
 800ba88:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800ba8a:	2002      	movs	r0, #2
}
 800ba8c:	4770      	bx	lr

0800ba8e <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800ba8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800ba90:	7c05      	ldrb	r5, [r0, #16]
{
 800ba92:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800ba94:	2d01      	cmp	r5, #1
 800ba96:	d009      	beq.n	800baac <HAL_DSI_ShortWrite+0x1e>
 800ba98:	2501      	movs	r5, #1
 800ba9a:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800ba9c:	9d06      	ldr	r5, [sp, #24]
 800ba9e:	9500      	str	r5, [sp, #0]
 800baa0:	f7ff fcad 	bl	800b3fe <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800baa4:	2300      	movs	r3, #0
 800baa6:	7423      	strb	r3, [r4, #16]

  return status;
}
 800baa8:	b003      	add	sp, #12
 800baaa:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800baac:	2002      	movs	r0, #2
 800baae:	e7fb      	b.n	800baa8 <HAL_DSI_ShortWrite+0x1a>

0800bab0 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 800bab0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab4:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800bab6:	7c03      	ldrb	r3, [r0, #16]
{
 800bab8:	4606      	mov	r6, r0
 800baba:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 800babc:	2b01      	cmp	r3, #1
{
 800babe:	4615      	mov	r5, r2
 800bac0:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
  __HAL_LOCK(hdsi);
 800bac4:	d053      	beq.n	800bb6e <HAL_DSI_LongWrite+0xbe>
 800bac6:	2301      	movs	r3, #1
 800bac8:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800baca:	f7ff faa1 	bl	800b010 <HAL_GetTick>
 800bace:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800bad0:	6831      	ldr	r1, [r6, #0]
 800bad2:	6f4b      	ldr	r3, [r1, #116]	; 0x74
 800bad4:	f013 0a01 	ands.w	sl, r3, #1
 800bad8:	d01a      	beq.n	800bb10 <HAL_DSI_LongWrite+0x60>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800bada:	2c03      	cmp	r4, #3
 800badc:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 800bade:	f04f 0200 	mov.w	r2, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800bae2:	bf28      	it	cs
 800bae4:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 800bae6:	4282      	cmp	r2, r0
 800bae8:	d11e      	bne.n	800bb28 <HAL_DSI_LongWrite+0x78>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 800baea:	1aa3      	subs	r3, r4, r2
  pparams += nbBytes;
 800baec:	4442      	add	r2, r8
  hdsi->Instance->GPDR = fifoword;
 800baee:	f8c1 9070 	str.w	r9, [r1, #112]	; 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800baf2:	bb1b      	cbnz	r3, 800bb3c <HAL_DSI_LongWrite+0x8c>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800baf4:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800baf6:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 800bafa:	4618      	mov	r0, r3
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800bafc:	0222      	lsls	r2, r4, #8
 800bafe:	0224      	lsls	r4, r4, #8
 800bb00:	b292      	uxth	r2, r2
 800bb02:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 800bb06:	4315      	orrs	r5, r2
 800bb08:	432c      	orrs	r4, r5
 800bb0a:	66cc      	str	r4, [r1, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 800bb0c:	7433      	strb	r3, [r6, #16]
  return HAL_OK;
 800bb0e:	e009      	b.n	800bb24 <HAL_DSI_LongWrite+0x74>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800bb10:	f7ff fa7e 	bl	800b010 <HAL_GetTick>
 800bb14:	eba0 000b 	sub.w	r0, r0, fp
 800bb18:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800bb1c:	d9d8      	bls.n	800bad0 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 800bb1e:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800bb20:	f886 a010 	strb.w	sl, [r6, #16]
}
 800bb24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800bb28:	f818 3002 	ldrb.w	r3, [r8, r2]
 800bb2c:	3201      	adds	r2, #1
 800bb2e:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 800bb32:	fa03 f30c 	lsl.w	r3, r3, ip
 800bb36:	ea49 0903 	orr.w	r9, r9, r3
  for (count = 0U; count < nbBytes; count++)
 800bb3a:	e7d4      	b.n	800bae6 <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800bb3c:	2b04      	cmp	r3, #4
    fifoword = 0U;
 800bb3e:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800bb42:	469e      	mov	lr, r3
    for (count = 0U; count < nbBytes; count++)
 800bb44:	4660      	mov	r0, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800bb46:	bf28      	it	cs
 800bb48:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800bb4c:	f812 8000 	ldrb.w	r8, [r2, r0]
 800bb50:	ea4f 09c0 	mov.w	r9, r0, lsl #3
    for (count = 0U; count < nbBytes; count++)
 800bb54:	3001      	adds	r0, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800bb56:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 800bb5a:	4586      	cmp	lr, r0
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800bb5c:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 800bb60:	d1f4      	bne.n	800bb4c <HAL_DSI_LongWrite+0x9c>
    uicounter -= nbBytes;
 800bb62:	eba3 030e 	sub.w	r3, r3, lr
    pparams += nbBytes;
 800bb66:	4472      	add	r2, lr
    hdsi->Instance->GPDR = fifoword;
 800bb68:	f8c1 c070 	str.w	ip, [r1, #112]	; 0x70
    pparams += nbBytes;
 800bb6c:	e7c1      	b.n	800baf2 <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 800bb6e:	2002      	movs	r0, #2
 800bb70:	e7d8      	b.n	800bb24 <HAL_DSI_LongWrite+0x74>

0800bb72 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 800bb72:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bb76:	461e      	mov	r6, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800bb78:	7c03      	ldrb	r3, [r0, #16]
{
 800bb7a:	4605      	mov	r5, r0
 800bb7c:	460c      	mov	r4, r1
  __HAL_LOCK(hdsi);
 800bb7e:	2b01      	cmp	r3, #1
{
 800bb80:	4617      	mov	r7, r2
 800bb82:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800bb86:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  __HAL_LOCK(hdsi);
 800bb8a:	d06f      	beq.n	800bc6c <HAL_DSI_Read+0xfa>
 800bb8c:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 800bb8e:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 800bb90:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 800bb92:	d90d      	bls.n	800bbb0 <HAL_DSI_Read+0x3e>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 800bb94:	f3c6 2307 	ubfx	r3, r6, #8, #8
 800bb98:	2237      	movs	r2, #55	; 0x37
 800bb9a:	9300      	str	r3, [sp, #0]
 800bb9c:	b2f3      	uxtb	r3, r6
 800bb9e:	f7ff fc2e 	bl	800b3fe <DSI_ShortWrite>
 800bba2:	b128      	cbz	r0, 800bbb0 <HAL_DSI_Read+0x3e>
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800bba4:	2300      	movs	r3, #0

      return HAL_ERROR;
 800bba6:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 800bba8:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 800bbaa:	b003      	add	sp, #12
 800bbac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800bbb0:	f1b9 0f06 	cmp.w	r9, #6
 800bbb4:	d10f      	bne.n	800bbd6 <HAL_DSI_Read+0x64>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800bbb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 800bbb8:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800bbba:	021b      	lsls	r3, r3, #8
 800bbbc:	ea43 1484 	orr.w	r4, r3, r4, lsl #6
 800bbc0:	f044 0406 	orr.w	r4, r4, #6
 800bbc4:	66d4      	str	r4, [r2, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800bbc6:	f7ff fa23 	bl	800b010 <HAL_GetTick>
 800bbca:	4604      	mov	r4, r0
  while (((int32_t)(datasize)) > 0)
 800bbcc:	2e00      	cmp	r6, #0
 800bbce:	dc27      	bgt.n	800bc20 <HAL_DSI_Read+0xae>
  __HAL_UNLOCK(hdsi);
 800bbd0:	2000      	movs	r0, #0
 800bbd2:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 800bbd4:	e7e9      	b.n	800bbaa <HAL_DSI_Read+0x38>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 800bbd6:	f1b9 0f04 	cmp.w	r9, #4
 800bbda:	d105      	bne.n	800bbe8 <HAL_DSI_Read+0x76>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800bbdc:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 800bbde:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800bbe0:	f044 0404 	orr.w	r4, r4, #4
 800bbe4:	66dc      	str	r4, [r3, #108]	; 0x6c
}
 800bbe6:	e7ee      	b.n	800bbc6 <HAL_DSI_Read+0x54>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 800bbe8:	f1b9 0f14 	cmp.w	r9, #20
 800bbec:	d108      	bne.n	800bc00 <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800bbee:	f898 1000 	ldrb.w	r1, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800bbf2:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800bbf4:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800bbf6:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
 800bbfa:	f044 0414 	orr.w	r4, r4, #20
 800bbfe:	e7f1      	b.n	800bbe4 <HAL_DSI_Read+0x72>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 800bc00:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
 800bc04:	d1ce      	bne.n	800bba4 <HAL_DSI_Read+0x32>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800bc06:	f898 1001 	ldrb.w	r1, [r8, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800bc0a:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800bc0c:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800bc10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800bc14:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800bc16:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 800bc1a:	f044 0424 	orr.w	r4, r4, #36	; 0x24
 800bc1e:	e7e1      	b.n	800bbe4 <HAL_DSI_Read+0x72>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 800bc20:	682a      	ldr	r2, [r5, #0]
 800bc22:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800bc24:	f013 0310 	ands.w	r3, r3, #16
 800bc28:	d10d      	bne.n	800bc46 <HAL_DSI_Read+0xd4>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800bc2a:	2e04      	cmp	r6, #4
      fifoword = hdsi->Instance->GPDR;
 800bc2c:	6f10      	ldr	r0, [r2, #112]	; 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800bc2e:	4632      	mov	r2, r6
 800bc30:	bf28      	it	cs
 800bc32:	2204      	movcs	r2, #4
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800bc34:	00d9      	lsls	r1, r3, #3
 800bc36:	fa20 f101 	lsr.w	r1, r0, r1
 800bc3a:	54f9      	strb	r1, [r7, r3]
      for (count = 0U; count < nbbytes; count++)
 800bc3c:	3301      	adds	r3, #1
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d1f8      	bne.n	800bc34 <HAL_DSI_Read+0xc2>
        pdata++;
 800bc42:	4417      	add	r7, r2
        datasize--;
 800bc44:	1ab6      	subs	r6, r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800bc46:	f7ff f9e3 	bl	800b010 <HAL_GetTick>
 800bc4a:	1b00      	subs	r0, r0, r4
 800bc4c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800bc50:	d903      	bls.n	800bc5a <HAL_DSI_Read+0xe8>
      __HAL_UNLOCK(hdsi);
 800bc52:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800bc54:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800bc56:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 800bc58:	e7a7      	b.n	800bbaa <HAL_DSI_Read+0x38>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 800bc5a:	682b      	ldr	r3, [r5, #0]
 800bc5c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800bc5e:	0652      	lsls	r2, r2, #25
 800bc60:	d4b4      	bmi.n	800bbcc <HAL_DSI_Read+0x5a>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 800bc62:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800bc66:	069b      	lsls	r3, r3, #26
 800bc68:	d49c      	bmi.n	800bba4 <HAL_DSI_Read+0x32>
 800bc6a:	e7af      	b.n	800bbcc <HAL_DSI_Read+0x5a>
  __HAL_LOCK(hdsi);
 800bc6c:	2002      	movs	r0, #2
 800bc6e:	e79c      	b.n	800bbaa <HAL_DSI_Read+0x38>

0800bc70 <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800bc70:	7c03      	ldrb	r3, [r0, #16]
 800bc72:	2b01      	cmp	r3, #1
 800bc74:	d010      	beq.n	800bc98 <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 800bc76:	6803      	ldr	r3, [r0, #0]
 800bc78:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800bc7c:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 800bc80:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800bc84:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800bc88:	ea42 6141 	orr.w	r1, r2, r1, lsl #25
 800bc8c:	f8c3 141c 	str.w	r1, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800bc90:	2300      	movs	r3, #0
 800bc92:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800bc94:	4618      	mov	r0, r3
 800bc96:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800bc98:	2002      	movs	r0, #2
}
 800bc9a:	4770      	bx	lr

0800bc9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bc9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 800bca0:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bca2:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 800be70 <HAL_GPIO_Init+0x1d4>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800bca6:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800bcaa:	680a      	ldr	r2, [r1, #0]
 800bcac:	fa32 f503 	lsrs.w	r5, r2, r3
 800bcb0:	d102      	bne.n	800bcb8 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 800bcb2:	b003      	add	sp, #12
 800bcb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800bcb8:	f04f 0e01 	mov.w	lr, #1
 800bcbc:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00U)
 800bcc0:	ea1e 0202 	ands.w	r2, lr, r2
 800bcc4:	f000 80bd 	beq.w	800be42 <HAL_GPIO_Init+0x1a6>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800bcc8:	684e      	ldr	r6, [r1, #4]
 800bcca:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800bcce:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800bcd2:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800bcd6:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800bcda:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800bcdc:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800bce0:	2f01      	cmp	r7, #1
 800bce2:	d834      	bhi.n	800bd4e <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 800bce4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800bce6:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bcea:	68cf      	ldr	r7, [r1, #12]
 800bcec:	fa07 f708 	lsl.w	r7, r7, r8
 800bcf0:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800bcf4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800bcf6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800bcf8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bcfc:	f3c6 1700 	ubfx	r7, r6, #4, #1
 800bd00:	409f      	lsls	r7, r3
 800bd02:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800bd06:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800bd08:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bd0a:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800bd0c:	ea07 0e0c 	and.w	lr, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bd10:	688f      	ldr	r7, [r1, #8]
 800bd12:	fa07 f708 	lsl.w	r7, r7, r8
 800bd16:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->PUPDR = temp;
 800bd1a:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bd1c:	d119      	bne.n	800bd52 <HAL_GPIO_Init+0xb6>
        temp = GPIOx->AFR[position >> 3U];
 800bd1e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800bd22:	f003 0b07 	and.w	fp, r3, #7
 800bd26:	f04f 0e0f 	mov.w	lr, #15
 800bd2a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800bd2e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 800bd32:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800bd36:	fa0e fe0b 	lsl.w	lr, lr, fp
 800bd3a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800bd3e:	690f      	ldr	r7, [r1, #16]
 800bd40:	fa07 f70b 	lsl.w	r7, r7, fp
 800bd44:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 800bd48:	f8ca 7020 	str.w	r7, [sl, #32]
 800bd4c:	e001      	b.n	800bd52 <HAL_GPIO_Init+0xb6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bd4e:	2d03      	cmp	r5, #3
 800bd50:	d1da      	bne.n	800bd08 <HAL_GPIO_Init+0x6c>
      temp = GPIOx->MODER;
 800bd52:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800bd54:	fa05 f508 	lsl.w	r5, r5, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800bd58:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800bd5c:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800bd60:	ea47 0705 	orr.w	r7, r7, r5
      GPIOx->MODER = temp;
 800bd64:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800bd66:	d06c      	beq.n	800be42 <HAL_GPIO_Init+0x1a6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bd68:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 800bd6c:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800bd70:	f003 0c03 	and.w	ip, r3, #3
 800bd74:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bd78:	f045 0502 	orr.w	r5, r5, #2
 800bd7c:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800bd80:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bd84:	f8c9 50f4 	str.w	r5, [r9, #244]	; 0xf4
 800bd88:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800bd8c:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 800bd90:	f005 0502 	and.w	r5, r5, #2
 800bd94:	9501      	str	r5, [sp, #4]
 800bd96:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800bd98:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2U];
 800bd9c:	f8d7 8008 	ldr.w	r8, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800bda0:	ea28 0e05 	bic.w	lr, r8, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800bda4:	4d31      	ldr	r5, [pc, #196]	; (800be6c <HAL_GPIO_Init+0x1d0>)
 800bda6:	42a8      	cmp	r0, r5
 800bda8:	d04d      	beq.n	800be46 <HAL_GPIO_Init+0x1aa>
 800bdaa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800bdae:	42a8      	cmp	r0, r5
 800bdb0:	d04b      	beq.n	800be4a <HAL_GPIO_Init+0x1ae>
 800bdb2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800bdb6:	42a8      	cmp	r0, r5
 800bdb8:	d049      	beq.n	800be4e <HAL_GPIO_Init+0x1b2>
 800bdba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800bdbe:	42a8      	cmp	r0, r5
 800bdc0:	d047      	beq.n	800be52 <HAL_GPIO_Init+0x1b6>
 800bdc2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800bdc6:	42a8      	cmp	r0, r5
 800bdc8:	d045      	beq.n	800be56 <HAL_GPIO_Init+0x1ba>
 800bdca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800bdce:	42a8      	cmp	r0, r5
 800bdd0:	d043      	beq.n	800be5a <HAL_GPIO_Init+0x1be>
 800bdd2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800bdd6:	42a8      	cmp	r0, r5
 800bdd8:	d041      	beq.n	800be5e <HAL_GPIO_Init+0x1c2>
 800bdda:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800bdde:	42a8      	cmp	r0, r5
 800bde0:	d03f      	beq.n	800be62 <HAL_GPIO_Init+0x1c6>
 800bde2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800bde6:	42a8      	cmp	r0, r5
 800bde8:	d03d      	beq.n	800be66 <HAL_GPIO_Init+0x1ca>
 800bdea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800bdee:	42a8      	cmp	r0, r5
 800bdf0:	bf0c      	ite	eq
 800bdf2:	2509      	moveq	r5, #9
 800bdf4:	250a      	movne	r5, #10
 800bdf6:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800bdfa:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800bdfe:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800be02:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 800be04:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 800be08:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800be0a:	bf0c      	ite	eq
 800be0c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800be0e:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800be10:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 800be14:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 800be16:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 800be18:	bf0c      	ite	eq
 800be1a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800be1c:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800be1e:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 800be22:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 800be24:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
        temp &= ~(iocurrent);
 800be28:	bf0c      	ite	eq
 800be2a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800be2c:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800be2e:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 800be30:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800be34:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        temp &= ~(iocurrent);
 800be38:	bf54      	ite	pl
 800be3a:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800be3c:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800be3e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    position++;
 800be42:	3301      	adds	r3, #1
 800be44:	e731      	b.n	800bcaa <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800be46:	2500      	movs	r5, #0
 800be48:	e7d5      	b.n	800bdf6 <HAL_GPIO_Init+0x15a>
 800be4a:	2501      	movs	r5, #1
 800be4c:	e7d3      	b.n	800bdf6 <HAL_GPIO_Init+0x15a>
 800be4e:	2502      	movs	r5, #2
 800be50:	e7d1      	b.n	800bdf6 <HAL_GPIO_Init+0x15a>
 800be52:	2503      	movs	r5, #3
 800be54:	e7cf      	b.n	800bdf6 <HAL_GPIO_Init+0x15a>
 800be56:	2504      	movs	r5, #4
 800be58:	e7cd      	b.n	800bdf6 <HAL_GPIO_Init+0x15a>
 800be5a:	2505      	movs	r5, #5
 800be5c:	e7cb      	b.n	800bdf6 <HAL_GPIO_Init+0x15a>
 800be5e:	2506      	movs	r5, #6
 800be60:	e7c9      	b.n	800bdf6 <HAL_GPIO_Init+0x15a>
 800be62:	2507      	movs	r5, #7
 800be64:	e7c7      	b.n	800bdf6 <HAL_GPIO_Init+0x15a>
 800be66:	2508      	movs	r5, #8
 800be68:	e7c5      	b.n	800bdf6 <HAL_GPIO_Init+0x15a>
 800be6a:	bf00      	nop
 800be6c:	58020000 	.word	0x58020000
 800be70:	58024400 	.word	0x58024400

0800be74 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800be74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 800be78:	2200      	movs	r2, #0
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800be7a:	f8df 812c 	ldr.w	r8, [pc, #300]	; 800bfa8 <HAL_GPIO_DeInit+0x134>
 800be7e:	f8df 912c 	ldr.w	r9, [pc, #300]	; 800bfac <HAL_GPIO_DeInit+0x138>
 800be82:	f8df a12c 	ldr.w	sl, [pc, #300]	; 800bfb0 <HAL_GPIO_DeInit+0x13c>
 800be86:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800bfb4 <HAL_GPIO_DeInit+0x140>
  while ((GPIO_Pin >> position) != 0x00U)
 800be8a:	fa31 f302 	lsrs.w	r3, r1, r2
 800be8e:	d101      	bne.n	800be94 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 800be90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 800be94:	2301      	movs	r3, #1
 800be96:	fa03 fc02 	lsl.w	ip, r3, r2
    if (iocurrent != 0x00U)
 800be9a:	ea1c 0601 	ands.w	r6, ip, r1
 800be9e:	d06d      	beq.n	800bf7c <HAL_GPIO_DeInit+0x108>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800bea0:	f022 0403 	bic.w	r4, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800bea4:	f002 0703 	and.w	r7, r2, #3
 800bea8:	250f      	movs	r5, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800beaa:	4b3e      	ldr	r3, [pc, #248]	; (800bfa4 <HAL_GPIO_DeInit+0x130>)
 800beac:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800beb0:	00bf      	lsls	r7, r7, #2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800beb2:	4298      	cmp	r0, r3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800beb4:	fa05 f507 	lsl.w	r5, r5, r7
      tmp = SYSCFG->EXTICR[position >> 2U];
 800beb8:	f8d4 e408 	ldr.w	lr, [r4, #1032]	; 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800bebc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800bec0:	ea05 0e0e 	and.w	lr, r5, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800bec4:	d05c      	beq.n	800bf80 <HAL_GPIO_DeInit+0x10c>
 800bec6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800beca:	4298      	cmp	r0, r3
 800becc:	d05a      	beq.n	800bf84 <HAL_GPIO_DeInit+0x110>
 800bece:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bed2:	4298      	cmp	r0, r3
 800bed4:	d058      	beq.n	800bf88 <HAL_GPIO_DeInit+0x114>
 800bed6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800beda:	4298      	cmp	r0, r3
 800bedc:	d056      	beq.n	800bf8c <HAL_GPIO_DeInit+0x118>
 800bede:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bee2:	4298      	cmp	r0, r3
 800bee4:	d054      	beq.n	800bf90 <HAL_GPIO_DeInit+0x11c>
 800bee6:	4540      	cmp	r0, r8
 800bee8:	d054      	beq.n	800bf94 <HAL_GPIO_DeInit+0x120>
 800beea:	4548      	cmp	r0, r9
 800beec:	d054      	beq.n	800bf98 <HAL_GPIO_DeInit+0x124>
 800beee:	4550      	cmp	r0, sl
 800bef0:	d054      	beq.n	800bf9c <HAL_GPIO_DeInit+0x128>
 800bef2:	4558      	cmp	r0, fp
 800bef4:	d054      	beq.n	800bfa0 <HAL_GPIO_DeInit+0x12c>
 800bef6:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800befa:	4298      	cmp	r0, r3
 800befc:	bf0c      	ite	eq
 800befe:	2309      	moveq	r3, #9
 800bf00:	230a      	movne	r3, #10
 800bf02:	40bb      	lsls	r3, r7
 800bf04:	4573      	cmp	r3, lr
 800bf06:	d119      	bne.n	800bf3c <HAL_GPIO_DeInit+0xc8>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800bf08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bf0c:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
 800bf10:	ea27 0706 	bic.w	r7, r7, r6
 800bf14:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800bf18:	f8d3 7084 	ldr.w	r7, [r3, #132]	; 0x84
 800bf1c:	ea27 0706 	bic.w	r7, r7, r6
 800bf20:	f8c3 7084 	str.w	r7, [r3, #132]	; 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 800bf24:	685f      	ldr	r7, [r3, #4]
 800bf26:	ea27 0706 	bic.w	r7, r7, r6
 800bf2a:	605f      	str	r7, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800bf2c:	681f      	ldr	r7, [r3, #0]
 800bf2e:	ea27 0606 	bic.w	r6, r7, r6
 800bf32:	601e      	str	r6, [r3, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800bf34:	68a3      	ldr	r3, [r4, #8]
 800bf36:	ea23 0305 	bic.w	r3, r3, r5
 800bf3a:	60a3      	str	r3, [r4, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800bf3c:	2503      	movs	r5, #3
 800bf3e:	0053      	lsls	r3, r2, #1
 800bf40:	6804      	ldr	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800bf42:	f002 0707 	and.w	r7, r2, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800bf46:	fa05 f303 	lsl.w	r3, r5, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800bf4a:	260f      	movs	r6, #15
 800bf4c:	00bf      	lsls	r7, r7, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800bf4e:	431c      	orrs	r4, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800bf50:	40be      	lsls	r6, r7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800bf52:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800bf54:	fa22 f405 	lsr.w	r4, r2, r5
 800bf58:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800bf5c:	6a25      	ldr	r5, [r4, #32]
 800bf5e:	ea25 0606 	bic.w	r6, r5, r6
 800bf62:	6226      	str	r6, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800bf64:	68c4      	ldr	r4, [r0, #12]
 800bf66:	ea24 0403 	bic.w	r4, r4, r3
 800bf6a:	60c4      	str	r4, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800bf6c:	6844      	ldr	r4, [r0, #4]
 800bf6e:	ea24 040c 	bic.w	r4, r4, ip
 800bf72:	6044      	str	r4, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800bf74:	6884      	ldr	r4, [r0, #8]
 800bf76:	ea24 0303 	bic.w	r3, r4, r3
 800bf7a:	6083      	str	r3, [r0, #8]
    position++;
 800bf7c:	3201      	adds	r2, #1
 800bf7e:	e784      	b.n	800be8a <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800bf80:	2300      	movs	r3, #0
 800bf82:	e7be      	b.n	800bf02 <HAL_GPIO_DeInit+0x8e>
 800bf84:	2301      	movs	r3, #1
 800bf86:	e7bc      	b.n	800bf02 <HAL_GPIO_DeInit+0x8e>
 800bf88:	2302      	movs	r3, #2
 800bf8a:	e7ba      	b.n	800bf02 <HAL_GPIO_DeInit+0x8e>
 800bf8c:	2303      	movs	r3, #3
 800bf8e:	e7b8      	b.n	800bf02 <HAL_GPIO_DeInit+0x8e>
 800bf90:	2304      	movs	r3, #4
 800bf92:	e7b6      	b.n	800bf02 <HAL_GPIO_DeInit+0x8e>
 800bf94:	2305      	movs	r3, #5
 800bf96:	e7b4      	b.n	800bf02 <HAL_GPIO_DeInit+0x8e>
 800bf98:	2306      	movs	r3, #6
 800bf9a:	e7b2      	b.n	800bf02 <HAL_GPIO_DeInit+0x8e>
 800bf9c:	2307      	movs	r3, #7
 800bf9e:	e7b0      	b.n	800bf02 <HAL_GPIO_DeInit+0x8e>
 800bfa0:	2308      	movs	r3, #8
 800bfa2:	e7ae      	b.n	800bf02 <HAL_GPIO_DeInit+0x8e>
 800bfa4:	58020000 	.word	0x58020000
 800bfa8:	58021400 	.word	0x58021400
 800bfac:	58021800 	.word	0x58021800
 800bfb0:	58021c00 	.word	0x58021c00
 800bfb4:	58022000 	.word	0x58022000

0800bfb8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800bfb8:	6903      	ldr	r3, [r0, #16]
 800bfba:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800bfbc:	bf14      	ite	ne
 800bfbe:	2001      	movne	r0, #1
 800bfc0:	2000      	moveq	r0, #0
 800bfc2:	4770      	bx	lr

0800bfc4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800bfc4:	b10a      	cbz	r2, 800bfca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800bfc6:	6181      	str	r1, [r0, #24]
  }
}
 800bfc8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800bfca:	0409      	lsls	r1, r1, #16
 800bfcc:	e7fb      	b.n	800bfc6 <HAL_GPIO_WritePin+0x2>

0800bfce <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800bfce:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800bfd0:	ea01 0203 	and.w	r2, r1, r3
 800bfd4:	ea21 0103 	bic.w	r1, r1, r3
 800bfd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bfdc:	6181      	str	r1, [r0, #24]
}
 800bfde:	4770      	bx	lr

0800bfe0 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800bfe0:	4b04      	ldr	r3, [pc, #16]	; (800bff4 <HAL_HSEM_FastTake+0x14>)
 800bfe2:	3020      	adds	r0, #32
 800bfe4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 800bfe8:	4b03      	ldr	r3, [pc, #12]	; (800bff8 <HAL_HSEM_FastTake+0x18>)
 800bfea:	1ac0      	subs	r0, r0, r3
 800bfec:	bf18      	it	ne
 800bfee:	2001      	movne	r0, #1
 800bff0:	4770      	bx	lr
 800bff2:	bf00      	nop
 800bff4:	58026400 	.word	0x58026400
 800bff8:	80000300 	.word	0x80000300

0800bffc <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800bffc:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 800c000:	4b01      	ldr	r3, [pc, #4]	; (800c008 <HAL_HSEM_Release+0xc>)
 800c002:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 800c006:	4770      	bx	lr
 800c008:	58026400 	.word	0x58026400

0800c00c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c00c:	6803      	ldr	r3, [r0, #0]
 800c00e:	699a      	ldr	r2, [r3, #24]
 800c010:	0791      	lsls	r1, r2, #30
 800c012:	d501      	bpl.n	800c018 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c014:	2200      	movs	r2, #0
 800c016:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c018:	699a      	ldr	r2, [r3, #24]
 800c01a:	07d2      	lsls	r2, r2, #31
 800c01c:	d403      	bmi.n	800c026 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c01e:	699a      	ldr	r2, [r3, #24]
 800c020:	f042 0201 	orr.w	r2, r2, #1
 800c024:	619a      	str	r2, [r3, #24]
  }
}
 800c026:	4770      	bx	lr

0800c028 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c028:	b530      	push	{r4, r5, lr}
 800c02a:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c02c:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800c030:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c032:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 800c034:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c036:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800c03a:	4a05      	ldr	r2, [pc, #20]	; (800c050 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c03c:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800c03e:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c042:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800c046:	ea20 0002 	bic.w	r0, r0, r2
 800c04a:	4303      	orrs	r3, r0
 800c04c:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800c04e:	bd30      	pop	{r4, r5, pc}
 800c050:	03ff63ff 	.word	0x03ff63ff

0800c054 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 800c054:	6803      	ldr	r3, [r0, #0]
{
 800c056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800c05a:	699c      	ldr	r4, [r3, #24]
{
 800c05c:	4605      	mov	r5, r0
 800c05e:	460f      	mov	r7, r1
 800c060:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800c062:	f014 0410 	ands.w	r4, r4, #16
 800c066:	d070      	beq.n	800c14a <I2C_IsErrorOccurred+0xf6>
  uint32_t error_code = 0;
 800c068:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c06a:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 800c06c:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c06e:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c070:	682b      	ldr	r3, [r5, #0]
 800c072:	699a      	ldr	r2, [r3, #24]
 800c074:	0692      	lsls	r2, r2, #26
 800c076:	d462      	bmi.n	800c13e <I2C_IsErrorOccurred+0xea>
 800c078:	f1b8 0f00 	cmp.w	r8, #0
 800c07c:	d036      	beq.n	800c0ec <I2C_IsErrorOccurred+0x98>
    error_code |= HAL_I2C_ERROR_AF;
 800c07e:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 800c082:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 800c084:	682b      	ldr	r3, [r5, #0]
 800c086:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800c088:	05d6      	lsls	r6, r2, #23
 800c08a:	d505      	bpl.n	800c098 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c08c:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 800c090:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 800c094:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c096:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800c098:	0551      	lsls	r1, r2, #21
 800c09a:	d505      	bpl.n	800c0a8 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c09c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800c0a0:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 800c0a4:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c0a6:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800c0a8:	0592      	lsls	r2, r2, #22
 800c0aa:	d550      	bpl.n	800c14e <I2C_IsErrorOccurred+0xfa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c0ac:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800c0b0:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c0b4:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800c0b6:	4628      	mov	r0, r5
 800c0b8:	f7ff ffa8 	bl	800c00c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800c0bc:	682a      	ldr	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 800c0be:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800c0c0:	6853      	ldr	r3, [r2, #4]
 800c0c2:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800c0c6:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800c0ca:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800c0ce:	f023 0301 	bic.w	r3, r3, #1
 800c0d2:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 800c0d4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800c0d6:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 800c0d8:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 800c0da:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c0dc:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800c0e6:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 800c0ea:	e032      	b.n	800c152 <I2C_IsErrorOccurred+0xfe>
      if (Timeout != HAL_MAX_DELAY)
 800c0ec:	1c7a      	adds	r2, r7, #1
 800c0ee:	d0c0      	beq.n	800c072 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c0f0:	f7fe ff8e 	bl	800b010 <HAL_GetTick>
 800c0f4:	1b80      	subs	r0, r0, r6
 800c0f6:	42b8      	cmp	r0, r7
 800c0f8:	d801      	bhi.n	800c0fe <I2C_IsErrorOccurred+0xaa>
 800c0fa:	2f00      	cmp	r7, #0
 800c0fc:	d1b8      	bne.n	800c070 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800c0fe:	682b      	ldr	r3, [r5, #0]
 800c100:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 800c102:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800c106:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 800c108:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800c10a:	0400      	lsls	r0, r0, #16
 800c10c:	d50a      	bpl.n	800c124 <I2C_IsErrorOccurred+0xd0>
 800c10e:	0448      	lsls	r0, r1, #17
 800c110:	d408      	bmi.n	800c124 <I2C_IsErrorOccurred+0xd0>
              (tmp1 != I2C_CR2_STOP) && \
 800c112:	2a20      	cmp	r2, #32
 800c114:	d006      	beq.n	800c124 <I2C_IsErrorOccurred+0xd0>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c116:	685a      	ldr	r2, [r3, #4]
 800c118:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c11c:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800c11e:	f7fe ff77 	bl	800b010 <HAL_GetTick>
 800c122:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c124:	682b      	ldr	r3, [r5, #0]
 800c126:	699b      	ldr	r3, [r3, #24]
 800c128:	0699      	lsls	r1, r3, #26
 800c12a:	d4a1      	bmi.n	800c070 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800c12c:	f7fe ff70 	bl	800b010 <HAL_GetTick>
 800c130:	1b80      	subs	r0, r0, r6
 800c132:	2819      	cmp	r0, #25
 800c134:	d9f6      	bls.n	800c124 <I2C_IsErrorOccurred+0xd0>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800c136:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800c138:	f04f 0801 	mov.w	r8, #1
 800c13c:	e798      	b.n	800c070 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 800c13e:	f1b8 0f00 	cmp.w	r8, #0
 800c142:	d19c      	bne.n	800c07e <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c144:	2220      	movs	r2, #32
 800c146:	61da      	str	r2, [r3, #28]
 800c148:	e799      	b.n	800c07e <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 800c14a:	4620      	mov	r0, r4
 800c14c:	e79a      	b.n	800c084 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 800c14e:	2800      	cmp	r0, #0
 800c150:	d1b1      	bne.n	800c0b6 <I2C_IsErrorOccurred+0x62>
}
 800c152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c156 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800c156:	b570      	push	{r4, r5, r6, lr}
 800c158:	4604      	mov	r4, r0
 800c15a:	460d      	mov	r5, r1
 800c15c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c15e:	6823      	ldr	r3, [r4, #0]
 800c160:	699b      	ldr	r3, [r3, #24]
 800c162:	079b      	lsls	r3, r3, #30
 800c164:	d501      	bpl.n	800c16a <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800c166:	2000      	movs	r0, #0
}
 800c168:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c16a:	4632      	mov	r2, r6
 800c16c:	4629      	mov	r1, r5
 800c16e:	4620      	mov	r0, r4
 800c170:	f7ff ff70 	bl	800c054 <I2C_IsErrorOccurred>
 800c174:	b9c0      	cbnz	r0, 800c1a8 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800c176:	1c6a      	adds	r2, r5, #1
 800c178:	d0f1      	beq.n	800c15e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c17a:	f7fe ff49 	bl	800b010 <HAL_GetTick>
 800c17e:	1b80      	subs	r0, r0, r6
 800c180:	42a8      	cmp	r0, r5
 800c182:	d801      	bhi.n	800c188 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800c184:	2d00      	cmp	r5, #0
 800c186:	d1ea      	bne.n	800c15e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800c188:	6823      	ldr	r3, [r4, #0]
 800c18a:	699b      	ldr	r3, [r3, #24]
 800c18c:	f013 0302 	ands.w	r3, r3, #2
 800c190:	d1e5      	bne.n	800c15e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c192:	6c62      	ldr	r2, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 800c194:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c198:	f042 0220 	orr.w	r2, r2, #32
 800c19c:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c19e:	2220      	movs	r2, #32
 800c1a0:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c1a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_ERROR;
 800c1a8:	2001      	movs	r0, #1
 800c1aa:	e7dd      	b.n	800c168 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

0800c1ac <I2C_WaitOnFlagUntilTimeout>:
{
 800c1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1b0:	9f06      	ldr	r7, [sp, #24]
 800c1b2:	4604      	mov	r4, r0
 800c1b4:	4688      	mov	r8, r1
 800c1b6:	4616      	mov	r6, r2
 800c1b8:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c1ba:	6822      	ldr	r2, [r4, #0]
 800c1bc:	6993      	ldr	r3, [r2, #24]
 800c1be:	ea38 0303 	bics.w	r3, r8, r3
 800c1c2:	bf0c      	ite	eq
 800c1c4:	2301      	moveq	r3, #1
 800c1c6:	2300      	movne	r3, #0
 800c1c8:	42b3      	cmp	r3, r6
 800c1ca:	d001      	beq.n	800c1d0 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800c1cc:	2000      	movs	r0, #0
 800c1ce:	e01e      	b.n	800c20e <I2C_WaitOnFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 800c1d0:	1c6b      	adds	r3, r5, #1
 800c1d2:	d0f3      	beq.n	800c1bc <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1d4:	f7fe ff1c 	bl	800b010 <HAL_GetTick>
 800c1d8:	1bc0      	subs	r0, r0, r7
 800c1da:	42a8      	cmp	r0, r5
 800c1dc:	d801      	bhi.n	800c1e2 <I2C_WaitOnFlagUntilTimeout+0x36>
 800c1de:	2d00      	cmp	r5, #0
 800c1e0:	d1eb      	bne.n	800c1ba <I2C_WaitOnFlagUntilTimeout+0xe>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800c1e2:	6823      	ldr	r3, [r4, #0]
 800c1e4:	699b      	ldr	r3, [r3, #24]
 800c1e6:	ea38 0303 	bics.w	r3, r8, r3
 800c1ea:	bf0c      	ite	eq
 800c1ec:	2301      	moveq	r3, #1
 800c1ee:	2300      	movne	r3, #0
 800c1f0:	42b3      	cmp	r3, r6
 800c1f2:	d1e2      	bne.n	800c1ba <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c1f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 800c1f6:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c1f8:	f043 0320 	orr.w	r3, r3, #32
 800c1fc:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c1fe:	2320      	movs	r3, #32
 800c200:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c204:	2300      	movs	r3, #0
 800c206:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 800c20a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800c20e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c212 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800c212:	b570      	push	{r4, r5, r6, lr}
 800c214:	4604      	mov	r4, r0
 800c216:	460d      	mov	r5, r1
 800c218:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c21a:	6823      	ldr	r3, [r4, #0]
 800c21c:	699b      	ldr	r3, [r3, #24]
 800c21e:	069b      	lsls	r3, r3, #26
 800c220:	d501      	bpl.n	800c226 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800c222:	2000      	movs	r0, #0
}
 800c224:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c226:	4632      	mov	r2, r6
 800c228:	4629      	mov	r1, r5
 800c22a:	4620      	mov	r0, r4
 800c22c:	f7ff ff12 	bl	800c054 <I2C_IsErrorOccurred>
 800c230:	b9b0      	cbnz	r0, 800c260 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c232:	f7fe feed 	bl	800b010 <HAL_GetTick>
 800c236:	1b80      	subs	r0, r0, r6
 800c238:	42a8      	cmp	r0, r5
 800c23a:	d801      	bhi.n	800c240 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800c23c:	2d00      	cmp	r5, #0
 800c23e:	d1ec      	bne.n	800c21a <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800c240:	6823      	ldr	r3, [r4, #0]
 800c242:	699b      	ldr	r3, [r3, #24]
 800c244:	f013 0320 	ands.w	r3, r3, #32
 800c248:	d1e7      	bne.n	800c21a <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c24a:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800c24c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c250:	f042 0220 	orr.w	r2, r2, #32
 800c254:	6462      	str	r2, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c256:	2220      	movs	r2, #32
 800c258:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c25c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_ERROR;
 800c260:	2001      	movs	r0, #1
 800c262:	e7df      	b.n	800c224 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

0800c264 <HAL_I2C_MspInit>:
}
 800c264:	4770      	bx	lr

0800c266 <HAL_I2C_Init>:
{
 800c266:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800c268:	4604      	mov	r4, r0
 800c26a:	2800      	cmp	r0, #0
 800c26c:	d04a      	beq.n	800c304 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c26e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800c272:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c276:	b91b      	cbnz	r3, 800c280 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800c278:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800c27c:	f7ff fff2 	bl	800c264 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800c280:	2324      	movs	r3, #36	; 0x24
 800c282:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800c286:	6823      	ldr	r3, [r4, #0]
 800c288:	681a      	ldr	r2, [r3, #0]
 800c28a:	f022 0201 	bic.w	r2, r2, #1
 800c28e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c290:	6862      	ldr	r2, [r4, #4]
 800c292:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c296:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800c298:	689a      	ldr	r2, [r3, #8]
 800c29a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c29e:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c2a0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c2a4:	2901      	cmp	r1, #1
 800c2a6:	d124      	bne.n	800c2f2 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c2a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c2ac:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c2ae:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c2b0:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c2b2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800c2b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c2ba:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800c2bc:	68da      	ldr	r2, [r3, #12]
 800c2be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c2c2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c2c4:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800c2c8:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800c2ca:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c2cc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c2d0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800c2d2:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800c2d6:	430a      	orrs	r2, r1
 800c2d8:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	f042 0201 	orr.w	r2, r2, #1
 800c2e0:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800c2e2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c2e4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800c2e6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c2ea:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c2ec:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800c2f0:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c2f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c2f6:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c2f8:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c2fa:	d1d8      	bne.n	800c2ae <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800c2fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c300:	605a      	str	r2, [r3, #4]
 800c302:	e7d4      	b.n	800c2ae <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800c304:	2001      	movs	r0, #1
 800c306:	e7f3      	b.n	800c2f0 <HAL_I2C_Init+0x8a>

0800c308 <HAL_I2C_MspDeInit>:
 800c308:	4770      	bx	lr

0800c30a <HAL_I2C_DeInit>:
{
 800c30a:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800c30c:	4604      	mov	r4, r0
 800c30e:	b198      	cbz	r0, 800c338 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 800c310:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800c312:	2324      	movs	r3, #36	; 0x24
 800c314:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800c318:	6813      	ldr	r3, [r2, #0]
 800c31a:	f023 0301 	bic.w	r3, r3, #1
 800c31e:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800c320:	f7ff fff2 	bl	800c308 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c324:	2000      	movs	r0, #0
 800c326:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 800c328:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 800c32c:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c330:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c332:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800c336:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800c338:	2001      	movs	r0, #1
 800c33a:	e7fc      	b.n	800c336 <HAL_I2C_DeInit+0x2c>

0800c33c <HAL_I2C_Mem_Write>:
{
 800c33c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c340:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c342:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800c346:	4604      	mov	r4, r0
 800c348:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c34a:	2b20      	cmp	r3, #32
{
 800c34c:	4616      	mov	r6, r2
 800c34e:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800c352:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c356:	f040 80c6 	bne.w	800c4e6 <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 800c35a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c35c:	b113      	cbz	r3, 800c364 <HAL_I2C_Mem_Write+0x28>
 800c35e:	f1ba 0f00 	cmp.w	sl, #0
 800c362:	d106      	bne.n	800c372 <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c364:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c368:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800c36a:	2001      	movs	r0, #1
}
 800c36c:	b003      	add	sp, #12
 800c36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800c372:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800c376:	2b01      	cmp	r3, #1
 800c378:	f000 80b5 	beq.w	800c4e6 <HAL_I2C_Mem_Write+0x1aa>
 800c37c:	f04f 0b01 	mov.w	fp, #1
 800c380:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800c384:	f7fe fe44 	bl	800b010 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c388:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800c38a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c38c:	9000      	str	r0, [sp, #0]
 800c38e:	465a      	mov	r2, fp
 800c390:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c394:	4620      	mov	r0, r4
 800c396:	f7ff ff09 	bl	800c1ac <I2C_WaitOnFlagUntilTimeout>
 800c39a:	2800      	cmp	r0, #0
 800c39c:	d1e5      	bne.n	800c36a <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c39e:	2321      	movs	r3, #33	; 0x21
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800c3a0:	fa5f f289 	uxtb.w	r2, r9
 800c3a4:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 800c3a6:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c3a8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c3ac:	2340      	movs	r3, #64	; 0x40
 800c3ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800c3b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c3b4:	6460      	str	r0, [r4, #68]	; 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800c3b6:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800c3b8:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800c3ba:	4b4c      	ldr	r3, [pc, #304]	; (800c4ec <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 800c3bc:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800c3c0:	9300      	str	r3, [sp, #0]
 800c3c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c3c6:	f7ff fe2f 	bl	800c028 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c3ca:	462a      	mov	r2, r5
 800c3cc:	4641      	mov	r1, r8
 800c3ce:	4620      	mov	r0, r4
 800c3d0:	f7ff fec1 	bl	800c156 <I2C_WaitOnTXISFlagUntilTimeout>
 800c3d4:	bb18      	cbnz	r0, 800c41e <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c3d6:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c3da:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c3dc:	d115      	bne.n	800c40a <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c3de:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	2180      	movs	r1, #128	; 0x80
 800c3e4:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c3e6:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800c3e8:	4643      	mov	r3, r8
 800c3ea:	9500      	str	r5, [sp, #0]
 800c3ec:	f7ff fede 	bl	800c1ac <I2C_WaitOnFlagUntilTimeout>
 800c3f0:	b9a8      	cbnz	r0, 800c41e <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c3f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c3f4:	b29b      	uxth	r3, r3
 800c3f6:	2bff      	cmp	r3, #255	; 0xff
 800c3f8:	d815      	bhi.n	800c426 <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800c3fa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c3fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c400:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800c402:	b292      	uxth	r2, r2
 800c404:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c406:	b2d2      	uxtb	r2, r2
 800c408:	e012      	b.n	800c430 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c40a:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c40c:	4641      	mov	r1, r8
 800c40e:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c410:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c412:	462a      	mov	r2, r5
 800c414:	f7ff fe9f 	bl	800c156 <I2C_WaitOnTXISFlagUntilTimeout>
 800c418:	b908      	cbnz	r0, 800c41e <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c41a:	6823      	ldr	r3, [r4, #0]
 800c41c:	e7df      	b.n	800c3de <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 800c41e:	2300      	movs	r3, #0
 800c420:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800c424:	e7a1      	b.n	800c36a <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c426:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c428:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c42c:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c42e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c430:	4639      	mov	r1, r7
 800c432:	4620      	mov	r0, r4
 800c434:	f7ff fdf8 	bl	800c028 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c438:	462a      	mov	r2, r5
 800c43a:	4641      	mov	r1, r8
 800c43c:	4620      	mov	r0, r4
 800c43e:	f7ff fe8a 	bl	800c156 <I2C_WaitOnTXISFlagUntilTimeout>
 800c442:	2800      	cmp	r0, #0
 800c444:	d191      	bne.n	800c36a <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c446:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c448:	6822      	ldr	r2, [r4, #0]
 800c44a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800c44e:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800c450:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800c452:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800c454:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800c456:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800c458:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800c45a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800c45c:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800c45e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c460:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800c462:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c464:	b29b      	uxth	r3, r3
 800c466:	b1b3      	cbz	r3, 800c496 <HAL_I2C_Mem_Write+0x15a>
 800c468:	b9aa      	cbnz	r2, 800c496 <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c46a:	4643      	mov	r3, r8
 800c46c:	2180      	movs	r1, #128	; 0x80
 800c46e:	4620      	mov	r0, r4
 800c470:	9500      	str	r5, [sp, #0]
 800c472:	f7ff fe9b 	bl	800c1ac <I2C_WaitOnFlagUntilTimeout>
 800c476:	2800      	cmp	r0, #0
 800c478:	f47f af77 	bne.w	800c36a <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c47c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c47e:	b29b      	uxth	r3, r3
 800c480:	2bff      	cmp	r3, #255	; 0xff
 800c482:	d928      	bls.n	800c4d6 <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c484:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c486:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c48a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c48c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c48e:	4639      	mov	r1, r7
 800c490:	4620      	mov	r0, r4
 800c492:	f7ff fdc9 	bl	800c028 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800c496:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c498:	b29b      	uxth	r3, r3
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d1cc      	bne.n	800c438 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c49e:	462a      	mov	r2, r5
 800c4a0:	4641      	mov	r1, r8
 800c4a2:	4620      	mov	r0, r4
 800c4a4:	f7ff feb5 	bl	800c212 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c4a8:	2800      	cmp	r0, #0
 800c4aa:	f47f af5e 	bne.w	800c36a <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c4ae:	6823      	ldr	r3, [r4, #0]
 800c4b0:	2120      	movs	r1, #32
 800c4b2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800c4b4:	685a      	ldr	r2, [r3, #4]
 800c4b6:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800c4ba:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800c4be:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800c4c2:	f022 0201 	bic.w	r2, r2, #1
 800c4c6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c4c8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c4cc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c4d0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800c4d4:	e74a      	b.n	800c36c <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800c4d6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c4d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c4dc:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800c4de:	b292      	uxth	r2, r2
 800c4e0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c4e2:	b2d2      	uxtb	r2, r2
 800c4e4:	e7d3      	b.n	800c48e <HAL_I2C_Mem_Write+0x152>
    return HAL_BUSY;
 800c4e6:	2002      	movs	r0, #2
 800c4e8:	e740      	b.n	800c36c <HAL_I2C_Mem_Write+0x30>
 800c4ea:	bf00      	nop
 800c4ec:	80002000 	.word	0x80002000

0800c4f0 <HAL_I2C_Mem_Read>:
{
 800c4f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4f4:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c4f6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800c4fa:	4604      	mov	r4, r0
 800c4fc:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c4fe:	2b20      	cmp	r3, #32
{
 800c500:	4616      	mov	r6, r2
 800c502:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800c506:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c50a:	f040 80c9 	bne.w	800c6a0 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 800c50e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c510:	b113      	cbz	r3, 800c518 <HAL_I2C_Mem_Read+0x28>
 800c512:	f1ba 0f00 	cmp.w	sl, #0
 800c516:	d106      	bne.n	800c526 <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c518:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c51c:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800c51e:	2001      	movs	r0, #1
}
 800c520:	b003      	add	sp, #12
 800c522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800c526:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800c52a:	2b01      	cmp	r3, #1
 800c52c:	f000 80b8 	beq.w	800c6a0 <HAL_I2C_Mem_Read+0x1b0>
 800c530:	f04f 0b01 	mov.w	fp, #1
 800c534:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800c538:	f7fe fd6a 	bl	800b010 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c53c:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800c53e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c540:	9000      	str	r0, [sp, #0]
 800c542:	465a      	mov	r2, fp
 800c544:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c548:	4620      	mov	r0, r4
 800c54a:	f7ff fe2f 	bl	800c1ac <I2C_WaitOnFlagUntilTimeout>
 800c54e:	2800      	cmp	r0, #0
 800c550:	d1e5      	bne.n	800c51e <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c552:	2322      	movs	r3, #34	; 0x22
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c554:	fa5f f289 	uxtb.w	r2, r9
 800c558:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 800c55a:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c55c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c560:	2340      	movs	r3, #64	; 0x40
 800c562:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800c566:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c568:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800c56a:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c56c:	4b4d      	ldr	r3, [pc, #308]	; (800c6a4 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 800c56e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c572:	9300      	str	r3, [sp, #0]
 800c574:	4603      	mov	r3, r0
 800c576:	4620      	mov	r0, r4
 800c578:	f7ff fd56 	bl	800c028 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c57c:	462a      	mov	r2, r5
 800c57e:	4641      	mov	r1, r8
 800c580:	4620      	mov	r0, r4
 800c582:	f7ff fde8 	bl	800c156 <I2C_WaitOnTXISFlagUntilTimeout>
 800c586:	bb20      	cbnz	r0, 800c5d2 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c588:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c58c:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c58e:	d116      	bne.n	800c5be <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c590:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800c592:	2200      	movs	r2, #0
 800c594:	2140      	movs	r1, #64	; 0x40
 800c596:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c598:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800c59a:	4643      	mov	r3, r8
 800c59c:	9500      	str	r5, [sp, #0]
 800c59e:	f7ff fe05 	bl	800c1ac <I2C_WaitOnFlagUntilTimeout>
 800c5a2:	b9b0      	cbnz	r0, 800c5d2 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c5a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c5a6:	b29b      	uxth	r3, r3
 800c5a8:	2bff      	cmp	r3, #255	; 0xff
 800c5aa:	4b3f      	ldr	r3, [pc, #252]	; (800c6a8 <HAL_I2C_Mem_Read+0x1b8>)
 800c5ac:	d815      	bhi.n	800c5da <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800c5ae:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c5b0:	9300      	str	r3, [sp, #0]
 800c5b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 800c5b6:	b292      	uxth	r2, r2
 800c5b8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c5ba:	b2d2      	uxtb	r2, r2
 800c5bc:	e012      	b.n	800c5e4 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c5be:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c5c0:	4641      	mov	r1, r8
 800c5c2:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c5c4:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c5c6:	462a      	mov	r2, r5
 800c5c8:	f7ff fdc5 	bl	800c156 <I2C_WaitOnTXISFlagUntilTimeout>
 800c5cc:	b908      	cbnz	r0, 800c5d2 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c5ce:	6823      	ldr	r3, [r4, #0]
 800c5d0:	e7de      	b.n	800c590 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800c5d8:	e7a1      	b.n	800c51e <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c5da:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c5dc:	9300      	str	r3, [sp, #0]
 800c5de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c5e2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c5e4:	4639      	mov	r1, r7
 800c5e6:	4620      	mov	r0, r4
 800c5e8:	f7ff fd1e 	bl	800c028 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800c5ec:	4643      	mov	r3, r8
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	2104      	movs	r1, #4
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	9500      	str	r5, [sp, #0]
 800c5f6:	f7ff fdd9 	bl	800c1ac <I2C_WaitOnFlagUntilTimeout>
 800c5fa:	2800      	cmp	r0, #0
 800c5fc:	d18f      	bne.n	800c51e <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c5fe:	6823      	ldr	r3, [r4, #0]
 800c600:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c602:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c604:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800c606:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800c608:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800c60a:	3301      	adds	r3, #1
      hi2c->XferSize--;
 800c60c:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800c60e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800c610:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800c612:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800c614:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800c616:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800c618:	b29b      	uxth	r3, r3
 800c61a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c61c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c61e:	b29b      	uxth	r3, r3
 800c620:	b1b3      	cbz	r3, 800c650 <HAL_I2C_Mem_Read+0x160>
 800c622:	b9aa      	cbnz	r2, 800c650 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c624:	4643      	mov	r3, r8
 800c626:	2180      	movs	r1, #128	; 0x80
 800c628:	4620      	mov	r0, r4
 800c62a:	9500      	str	r5, [sp, #0]
 800c62c:	f7ff fdbe 	bl	800c1ac <I2C_WaitOnFlagUntilTimeout>
 800c630:	2800      	cmp	r0, #0
 800c632:	f47f af74 	bne.w	800c51e <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c636:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c638:	b29b      	uxth	r3, r3
 800c63a:	2bff      	cmp	r3, #255	; 0xff
 800c63c:	d928      	bls.n	800c690 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c63e:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800c640:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c644:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c646:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c648:	4639      	mov	r1, r7
 800c64a:	4620      	mov	r0, r4
 800c64c:	f7ff fcec 	bl	800c028 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800c650:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c652:	b29b      	uxth	r3, r3
 800c654:	2b00      	cmp	r3, #0
 800c656:	d1c9      	bne.n	800c5ec <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c658:	462a      	mov	r2, r5
 800c65a:	4641      	mov	r1, r8
 800c65c:	4620      	mov	r0, r4
 800c65e:	f7ff fdd8 	bl	800c212 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c662:	2800      	cmp	r0, #0
 800c664:	f47f af5b 	bne.w	800c51e <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c668:	6823      	ldr	r3, [r4, #0]
 800c66a:	2120      	movs	r1, #32
 800c66c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800c66e:	685a      	ldr	r2, [r3, #4]
 800c670:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800c674:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800c678:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800c67c:	f022 0201 	bic.w	r2, r2, #1
 800c680:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c682:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c686:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c68a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800c68e:	e747      	b.n	800c520 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800c690:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c692:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c696:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800c698:	b292      	uxth	r2, r2
 800c69a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c69c:	b2d2      	uxtb	r2, r2
 800c69e:	e7d3      	b.n	800c648 <HAL_I2C_Mem_Read+0x158>
    return HAL_BUSY;
 800c6a0:	2002      	movs	r0, #2
 800c6a2:	e73d      	b.n	800c520 <HAL_I2C_Mem_Read+0x30>
 800c6a4:	80002000 	.word	0x80002000
 800c6a8:	80002400 	.word	0x80002400

0800c6ac <HAL_I2C_GetState>:
  return hi2c->State;
 800c6ac:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 800c6b0:	4770      	bx	lr

0800c6b2 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800c6b2:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 800c6b4:	4770      	bx	lr

0800c6b6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c6b6:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c6b8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800c6bc:	2b20      	cmp	r3, #32
 800c6be:	b2dc      	uxtb	r4, r3
 800c6c0:	d11d      	bne.n	800c6fe <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c6c2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800c6c6:	2b01      	cmp	r3, #1
 800c6c8:	d019      	beq.n	800c6fe <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c6ca:	2324      	movs	r3, #36	; 0x24
 800c6cc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c6d0:	6803      	ldr	r3, [r0, #0]
 800c6d2:	681a      	ldr	r2, [r3, #0]
 800c6d4:	f022 0201 	bic.w	r2, r2, #1
 800c6d8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c6da:	681a      	ldr	r2, [r3, #0]
 800c6dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c6e0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c6e2:	681a      	ldr	r2, [r3, #0]
 800c6e4:	4311      	orrs	r1, r2
 800c6e6:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c6e8:	681a      	ldr	r2, [r3, #0]
 800c6ea:	f042 0201 	orr.w	r2, r2, #1
 800c6ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c6f0:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800c6f2:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c6f6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800c6fa:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800c6fc:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800c6fe:	2002      	movs	r0, #2
 800c700:	e7fc      	b.n	800c6fc <HAL_I2CEx_ConfigAnalogFilter+0x46>

0800c702 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c702:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c704:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800c708:	2b20      	cmp	r3, #32
 800c70a:	b2dc      	uxtb	r4, r3
 800c70c:	d11c      	bne.n	800c748 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c70e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800c712:	2b01      	cmp	r3, #1
 800c714:	d018      	beq.n	800c748 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c716:	2324      	movs	r3, #36	; 0x24
 800c718:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c71c:	6803      	ldr	r3, [r0, #0]
 800c71e:	681a      	ldr	r2, [r3, #0]
 800c720:	f022 0201 	bic.w	r2, r2, #1
 800c724:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c726:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c728:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c72c:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c730:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c732:	681a      	ldr	r2, [r3, #0]
 800c734:	f042 0201 	orr.w	r2, r2, #1
 800c738:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c73a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800c73c:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c740:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800c744:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800c746:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800c748:	2002      	movs	r0, #2
 800c74a:	e7fc      	b.n	800c746 <HAL_I2CEx_ConfigDigitalFilter+0x44>

0800c74c <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c74c:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c74e:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c750:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c754:	3284      	adds	r2, #132	; 0x84
 800c756:	1883      	adds	r3, r0, r2
{
 800c758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c75c:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c75e:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c762:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800c764:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c768:	684c      	ldr	r4, [r1, #4]
 800c76a:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c76e:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800c772:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c776:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c778:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c77a:	68c5      	ldr	r5, [r0, #12]
 800c77c:	f3c5 450b 	ubfx	r5, r5, #16, #12
 800c780:	443d      	add	r5, r7
 800c782:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800c786:	68ce      	ldr	r6, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c788:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800c78a:	68c5      	ldr	r5, [r0, #12]
 800c78c:	f3c5 050a 	ubfx	r5, r5, #0, #11
 800c790:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800c792:	689d      	ldr	r5, [r3, #8]
 800c794:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 800c798:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800c79a:	688d      	ldr	r5, [r1, #8]
 800c79c:	68c7      	ldr	r7, [r0, #12]
 800c79e:	3501      	adds	r5, #1
 800c7a0:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800c7a4:	443d      	add	r5, r7
 800c7a6:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800c7aa:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800c7ac:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800c7ae:	691d      	ldr	r5, [r3, #16]
 800c7b0:	f025 0507 	bic.w	r5, r5, #7
 800c7b4:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800c7b6:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800c7b8:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800c7ba:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800c7be:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800c7c2:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800c7c6:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 800c7ca:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800c7ce:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800c7d2:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 800c7d6:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800c7d8:	695d      	ldr	r5, [r3, #20]
 800c7da:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800c7de:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800c7e0:	694d      	ldr	r5, [r1, #20]
 800c7e2:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800c7e4:	69dd      	ldr	r5, [r3, #28]
 800c7e6:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 800c7ea:	f025 0507 	bic.w	r5, r5, #7
 800c7ee:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800c7f0:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 800c7f4:	433d      	orrs	r5, r7
 800c7f6:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800c7f8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800c7fa:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800c7fc:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800c800:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c802:	b31e      	cbz	r6, 800c84c <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800c804:	2e01      	cmp	r6, #1
 800c806:	d023      	beq.n	800c850 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800c808:	1eb5      	subs	r5, r6, #2
 800c80a:	2d02      	cmp	r5, #2
 800c80c:	d922      	bls.n	800c854 <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 800c80e:	2e07      	cmp	r6, #7
 800c810:	bf0c      	ite	eq
 800c812:	2502      	moveq	r5, #2
 800c814:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800c816:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800c818:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800c81c:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800c820:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800c822:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800c824:	3407      	adds	r4, #7
 800c826:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800c828:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800c82a:	436e      	muls	r6, r5
 800c82c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800c830:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800c832:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800c834:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 800c838:	f024 0407 	bic.w	r4, r4, #7
 800c83c:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800c83e:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800c840:	5883      	ldr	r3, [r0, r2]
 800c842:	f043 0301 	orr.w	r3, r3, #1
 800c846:	5083      	str	r3, [r0, r2]
}
 800c848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800c84c:	2504      	movs	r5, #4
 800c84e:	e7e2      	b.n	800c816 <LTDC_SetConfig+0xca>
    tmp = 3U;
 800c850:	2503      	movs	r5, #3
 800c852:	e7e0      	b.n	800c816 <LTDC_SetConfig+0xca>
    tmp = 2U;
 800c854:	2502      	movs	r5, #2
 800c856:	e7de      	b.n	800c816 <LTDC_SetConfig+0xca>

0800c858 <HAL_LTDC_Init>:
{
 800c858:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800c85a:	4604      	mov	r4, r0
 800c85c:	2800      	cmp	r0, #0
 800c85e:	d063      	beq.n	800c928 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800c860:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800c864:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c868:	b91b      	cbnz	r3, 800c872 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800c86a:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800c86e:	f7f4 fbeb 	bl	8001048 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c872:	2302      	movs	r3, #2
 800c874:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800c878:	6823      	ldr	r3, [r4, #0]
 800c87a:	699a      	ldr	r2, [r3, #24]
 800c87c:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800c880:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c882:	6999      	ldr	r1, [r3, #24]
 800c884:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800c888:	4302      	orrs	r2, r0
 800c88a:	68e0      	ldr	r0, [r4, #12]
 800c88c:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800c88e:	6920      	ldr	r0, [r4, #16]
 800c890:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800c892:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c894:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800c896:	4925      	ldr	r1, [pc, #148]	; (800c92c <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c898:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800c89a:	689a      	ldr	r2, [r3, #8]
 800c89c:	400a      	ands	r2, r1
 800c89e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800c8a0:	689a      	ldr	r2, [r3, #8]
 800c8a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800c8a6:	69a0      	ldr	r0, [r4, #24]
 800c8a8:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800c8aa:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800c8ac:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800c8ae:	68da      	ldr	r2, [r3, #12]
 800c8b0:	400a      	ands	r2, r1
 800c8b2:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800c8b4:	68da      	ldr	r2, [r3, #12]
 800c8b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800c8ba:	6a20      	ldr	r0, [r4, #32]
 800c8bc:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800c8be:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800c8c0:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800c8c2:	691a      	ldr	r2, [r3, #16]
 800c8c4:	400a      	ands	r2, r1
 800c8c6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800c8c8:	691a      	ldr	r2, [r3, #16]
 800c8ca:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800c8ce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800c8d0:	4302      	orrs	r2, r0
 800c8d2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800c8d4:	695a      	ldr	r2, [r3, #20]
 800c8d6:	4011      	ands	r1, r2
 800c8d8:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800c8da:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800c8dc:	695a      	ldr	r2, [r3, #20]
 800c8de:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c8e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c8e4:	430a      	orrs	r2, r1
 800c8e6:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800c8e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800c8ea:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800c8ee:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800c8f2:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800c8f6:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800c8f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c8fa:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800c8fe:	430a      	orrs	r2, r1
 800c900:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800c904:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800c908:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800c90a:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800c90c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c90e:	f042 0206 	orr.w	r2, r2, #6
 800c912:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800c914:	699a      	ldr	r2, [r3, #24]
 800c916:	f042 0201 	orr.w	r2, r2, #1
 800c91a:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800c91c:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800c91e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800c922:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 800c926:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c928:	2001      	movs	r0, #1
 800c92a:	e7fc      	b.n	800c926 <HAL_LTDC_Init+0xce>
 800c92c:	f000f800 	.word	0xf000f800

0800c930 <HAL_LTDC_ErrorCallback>:
 800c930:	4770      	bx	lr

0800c932 <HAL_LTDC_LineEventCallback>:
 800c932:	4770      	bx	lr

0800c934 <HAL_LTDC_ReloadEventCallback>:
 800c934:	4770      	bx	lr

0800c936 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800c936:	6803      	ldr	r3, [r0, #0]
{
 800c938:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800c93a:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 800c93c:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800c93e:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800c940:	0772      	lsls	r2, r6, #29
 800c942:	d514      	bpl.n	800c96e <HAL_LTDC_IRQHandler+0x38>
 800c944:	0769      	lsls	r1, r5, #29
 800c946:	d512      	bpl.n	800c96e <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800c948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c94a:	f022 0204 	bic.w	r2, r2, #4
 800c94e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800c950:	2204      	movs	r2, #4
 800c952:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800c954:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800c958:	f043 0301 	orr.w	r3, r3, #1
 800c95c:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 800c960:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800c962:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800c966:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800c96a:	f7ff ffe1 	bl	800c930 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800c96e:	07b2      	lsls	r2, r6, #30
 800c970:	d516      	bpl.n	800c9a0 <HAL_LTDC_IRQHandler+0x6a>
 800c972:	07ab      	lsls	r3, r5, #30
 800c974:	d514      	bpl.n	800c9a0 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800c976:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800c978:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800c97a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c97c:	f022 0202 	bic.w	r2, r2, #2
 800c980:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800c982:	2202      	movs	r2, #2
 800c984:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800c986:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800c98a:	4313      	orrs	r3, r2
 800c98c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800c990:	2304      	movs	r3, #4
 800c992:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800c996:	2300      	movs	r3, #0
 800c998:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800c99c:	f7ff ffc8 	bl	800c930 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800c9a0:	07f0      	lsls	r0, r6, #31
 800c9a2:	d510      	bpl.n	800c9c6 <HAL_LTDC_IRQHandler+0x90>
 800c9a4:	07e9      	lsls	r1, r5, #31
 800c9a6:	d50e      	bpl.n	800c9c6 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800c9a8:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800c9aa:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800c9ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c9ae:	f022 0201 	bic.w	r2, r2, #1
 800c9b2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800c9b4:	2201      	movs	r2, #1
 800c9b6:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 800c9b8:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800c9ba:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800c9be:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800c9c2:	f7ff ffb6 	bl	800c932 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800c9c6:	0732      	lsls	r2, r6, #28
 800c9c8:	d511      	bpl.n	800c9ee <HAL_LTDC_IRQHandler+0xb8>
 800c9ca:	072b      	lsls	r3, r5, #28
 800c9cc:	d50f      	bpl.n	800c9ee <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800c9ce:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 800c9d0:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800c9d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c9d4:	f022 0208 	bic.w	r2, r2, #8
 800c9d8:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800c9da:	2208      	movs	r2, #8
 800c9dc:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800c9de:	2301      	movs	r3, #1
 800c9e0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800c9ea:	f7ff ffa3 	bl	800c934 <HAL_LTDC_ReloadEventCallback>
}
 800c9ee:	bd70      	pop	{r4, r5, r6, pc}

0800c9f0 <HAL_LTDC_ConfigLayer>:
{
 800c9f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800c9f4:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 800c9f8:	4606      	mov	r6, r0
 800c9fa:	460f      	mov	r7, r1
 800c9fc:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800c9fe:	2b01      	cmp	r3, #1
 800ca00:	f04f 0002 	mov.w	r0, #2
 800ca04:	d01f      	beq.n	800ca46 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800ca06:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 800ca08:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800ca0c:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ca0e:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800ca12:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800ca16:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800ca1a:	3438      	adds	r4, #56	; 0x38
 800ca1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ca1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ca22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ca26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca28:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800ca2a:	4630      	mov	r0, r6
 800ca2c:	4662      	mov	r2, ip
 800ca2e:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800ca30:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800ca32:	f7ff fe8b 	bl	800c74c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800ca36:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800ca38:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800ca3a:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800ca3e:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800ca42:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 800ca46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800ca4c <HAL_LTDC_SetPitch>:
{
 800ca4c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 800ca4e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800ca52:	2b01      	cmp	r3, #1
 800ca54:	f04f 0302 	mov.w	r3, #2
 800ca58:	d02c      	beq.n	800cab4 <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800ca5a:	2434      	movs	r4, #52	; 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ca5c:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800ca60:	fb04 0402 	mla	r4, r4, r2, r0
 800ca64:	6ca4      	ldr	r4, [r4, #72]	; 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800ca66:	b33c      	cbz	r4, 800cab8 <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800ca68:	2c01      	cmp	r4, #1
 800ca6a:	d027      	beq.n	800cabc <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800ca6c:	1ea5      	subs	r5, r4, #2
 800ca6e:	429d      	cmp	r5, r3
 800ca70:	d902      	bls.n	800ca78 <HAL_LTDC_SetPitch+0x2c>
    tmp = 1U;
 800ca72:	2c07      	cmp	r4, #7
 800ca74:	bf18      	it	ne
 800ca76:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800ca78:	01d2      	lsls	r2, r2, #7
 800ca7a:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 800ca7c:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800ca7e:	3284      	adds	r2, #132	; 0x84
 800ca80:	4422      	add	r2, r4
 800ca82:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800ca84:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800ca88:	f424 14f8 	bic.w	r4, r4, #2031616	; 0x1f0000
 800ca8c:	62d4      	str	r4, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800ca8e:	4c0c      	ldr	r4, [pc, #48]	; (800cac0 <HAL_LTDC_SetPitch+0x74>)
 800ca90:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ca92:	f045 0501 	orr.w	r5, r5, #1
 800ca96:	6265      	str	r5, [r4, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 800ca98:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 800ca9a:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800ca9e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800caa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800caa2:	f043 0301 	orr.w	r3, r3, #1
 800caa6:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800caa8:	2301      	movs	r3, #1
 800caaa:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800caae:	2300      	movs	r3, #0
 800cab0:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 800cab8:	2304      	movs	r3, #4
 800caba:	e7dd      	b.n	800ca78 <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 800cabc:	2303      	movs	r3, #3
 800cabe:	e7db      	b.n	800ca78 <HAL_LTDC_SetPitch+0x2c>
 800cac0:	50001000 	.word	0x50001000

0800cac4 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800cac4:	b538      	push	{r3, r4, r5, lr}
 800cac6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800cac8:	f7fe faa2 	bl	800b010 <HAL_GetTick>
 800cacc:	4605      	mov	r5, r0

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800cace:	2c00      	cmp	r4, #0
 800cad0:	d061      	beq.n	800cb96 <HAL_MDMA_Init+0xd2>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800cad2:	2300      	movs	r3, #0

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800cad4:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 800cad6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800cada:	2302      	movs	r3, #2
 800cadc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 800cae0:	68d3      	ldr	r3, [r2, #12]
 800cae2:	f023 0301 	bic.w	r3, r3, #1
 800cae6:	60d3      	str	r3, [r2, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800cae8:	6823      	ldr	r3, [r4, #0]
 800caea:	68da      	ldr	r2, [r3, #12]
 800caec:	07d2      	lsls	r2, r2, #31
 800caee:	d448      	bmi.n	800cb82 <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800caf0:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800caf4:	430a      	orrs	r2, r1
 800caf6:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800caf8:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 800cafc:	430a      	orrs	r2, r1
 800cafe:	69e1      	ldr	r1, [r4, #28]
 800cb00:	430a      	orrs	r2, r1
 800cb02:	6a21      	ldr	r1, [r4, #32]
 800cb04:	430a      	orrs	r2, r1
 800cb06:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cb08:	430a      	orrs	r2, r1
 800cb0a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800cb0c:	430a      	orrs	r2, r1
 800cb0e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800cb10:	430a      	orrs	r2, r1
 800cb12:	68a1      	ldr	r1, [r4, #8]
 800cb14:	430a      	orrs	r2, r1
 800cb16:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800cb18:	3901      	subs	r1, #1
 800cb1a:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800cb1e:	6861      	ldr	r1, [r4, #4]
 800cb20:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800cb24:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800cb26:	d103      	bne.n	800cb30 <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800cb28:	691a      	ldr	r2, [r3, #16]
 800cb2a:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800cb2e:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800cb30:	2200      	movs	r2, #0
 800cb32:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800cb34:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800cb36:	2a00      	cmp	r2, #0
 800cb38:	da04      	bge.n	800cb44 <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800cb3a:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800cb3c:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800cb3e:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 800cb42:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800cb44:	b292      	uxth	r2, r2
 800cb46:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800cb48:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800cb4a:	2a00      	cmp	r2, #0
 800cb4c:	da25      	bge.n	800cb9a <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800cb4e:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800cb50:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800cb52:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 800cb56:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800cb58:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800cb5a:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800cb5e:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800cb62:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800cb64:	f04f 0200 	mov.w	r2, #0
 800cb68:	d019      	beq.n	800cb9e <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800cb6a:	b2c9      	uxtb	r1, r1
 800cb6c:	6299      	str	r1, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800cb6e:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 800cb70:	2000      	movs	r0, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 800cb72:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800cb74:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800cb76:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800cb78:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 800cb7c:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 800cb80:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800cb82:	f7fe fa45 	bl	800b010 <HAL_GetTick>
 800cb86:	1b40      	subs	r0, r0, r5
 800cb88:	2805      	cmp	r0, #5
 800cb8a:	d9ad      	bls.n	800cae8 <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800cb8c:	2340      	movs	r3, #64	; 0x40
 800cb8e:	66a3      	str	r3, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800cb90:	2303      	movs	r3, #3
 800cb92:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_ERROR;
 800cb96:	2001      	movs	r0, #1
 800cb98:	e7f2      	b.n	800cb80 <HAL_MDMA_Init+0xbc>
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800cb9a:	6a18      	ldr	r0, [r3, #32]
 800cb9c:	e7dd      	b.n	800cb5a <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 800cb9e:	629a      	str	r2, [r3, #40]	; 0x28
 800cba0:	e7e5      	b.n	800cb6e <HAL_MDMA_Init+0xaa>

0800cba2 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 800cba2:	b1d8      	cbz	r0, 800cbdc <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 800cba4:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800cba6:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 800cba8:	68d3      	ldr	r3, [r2, #12]
 800cbaa:	f023 0301 	bic.w	r3, r3, #1
 800cbae:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 800cbb4:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 800cbb6:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 800cbb8:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 800cbba:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 800cbbc:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 800cbbe:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 800cbc0:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 800cbc2:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 800cbc4:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800cbc6:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800cbc8:	6683      	str	r3, [r0, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800cbca:	6643      	str	r3, [r0, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 800cbcc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
 800cbd0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 800cbd4:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
  return HAL_OK;
 800cbd8:	4618      	mov	r0, r3
 800cbda:	4770      	bx	lr
    return HAL_ERROR;
 800cbdc:	2001      	movs	r0, #1
}
 800cbde:	4770      	bx	lr

0800cbe0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800cbe0:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800cbe2:	4d1c      	ldr	r5, [pc, #112]	; (800cc54 <HAL_PWREx_ConfigSupply+0x74>)
{
 800cbe4:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800cbe6:	68eb      	ldr	r3, [r5, #12]
 800cbe8:	f003 0307 	and.w	r3, r3, #7
 800cbec:	2b06      	cmp	r3, #6
 800cbee:	d006      	beq.n	800cbfe <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800cbf0:	68e8      	ldr	r0, [r5, #12]
 800cbf2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800cbf6:	1b00      	subs	r0, r0, r4
 800cbf8:	bf18      	it	ne
 800cbfa:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800cbfc:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800cbfe:	68eb      	ldr	r3, [r5, #12]
 800cc00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800cc04:	4303      	orrs	r3, r0
 800cc06:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 800cc08:	f7fe fa02 	bl	800b010 <HAL_GetTick>
 800cc0c:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800cc0e:	686b      	ldr	r3, [r5, #4]
 800cc10:	049a      	lsls	r2, r3, #18
 800cc12:	d508      	bpl.n	800cc26 <HAL_PWREx_ConfigSupply+0x46>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800cc14:	f1a4 031d 	sub.w	r3, r4, #29
 800cc18:	2b01      	cmp	r3, #1
 800cc1a:	d90c      	bls.n	800cc36 <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800cc1c:	3c2d      	subs	r4, #45	; 0x2d
 800cc1e:	2c01      	cmp	r4, #1
 800cc20:	d909      	bls.n	800cc36 <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 800cc22:	2000      	movs	r0, #0
 800cc24:	e7ea      	b.n	800cbfc <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800cc26:	f7fe f9f3 	bl	800b010 <HAL_GetTick>
 800cc2a:	1b80      	subs	r0, r0, r6
 800cc2c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800cc30:	d9ed      	bls.n	800cc0e <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 800cc32:	2001      	movs	r0, #1
 800cc34:	e7e2      	b.n	800cbfc <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 800cc36:	f7fe f9eb 	bl	800b010 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800cc3a:	4d06      	ldr	r5, [pc, #24]	; (800cc54 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 800cc3c:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800cc3e:	68eb      	ldr	r3, [r5, #12]
 800cc40:	03db      	lsls	r3, r3, #15
 800cc42:	d4ee      	bmi.n	800cc22 <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800cc44:	f7fe f9e4 	bl	800b010 <HAL_GetTick>
 800cc48:	1b00      	subs	r0, r0, r4
 800cc4a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800cc4e:	d9f6      	bls.n	800cc3e <HAL_PWREx_ConfigSupply+0x5e>
 800cc50:	e7ef      	b.n	800cc32 <HAL_PWREx_ConfigSupply+0x52>
 800cc52:	bf00      	nop
 800cc54:	58024800 	.word	0x58024800

0800cc58 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800cc58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800cc5c:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 800cc5e:	b136      	cbz	r6, 800cc6e <QSPI_Config+0x16>
 800cc60:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 800cc64:	d003      	beq.n	800cc6e <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800cc66:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800cc68:	6804      	ldr	r4, [r0, #0]
 800cc6a:	3b01      	subs	r3, #1
 800cc6c:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800cc6e:	f8d1 9018 	ldr.w	r9, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800cc72:	e9d1 7507 	ldrd	r7, r5, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800cc76:	f1b9 0f00 	cmp.w	r9, #0
 800cc7a:	d04f      	beq.n	800cd1c <QSPI_Config+0xc4>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cc7c:	694b      	ldr	r3, [r1, #20]
 800cc7e:	ea46 0909 	orr.w	r9, r6, r9
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800cc82:	6800      	ldr	r0, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cc84:	f8d1 a000 	ldr.w	sl, [r1]
 800cc88:	ea4f 4c83 	mov.w	ip, r3, lsl #18
 800cc8c:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
 800cc90:	ea49 0902 	orr.w	r9, r9, r2
 800cc94:	e9d1 480b 	ldrd	r4, r8, [r1, #44]	; 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800cc98:	b335      	cbz	r5, 800cce8 <QSPI_Config+0x90>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800cc9a:	688b      	ldr	r3, [r1, #8]
 800cc9c:	ea49 0505 	orr.w	r5, r9, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cca0:	690e      	ldr	r6, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800cca2:	61c3      	str	r3, [r0, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800cca4:	b19f      	cbz	r7, 800ccce <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cca6:	ea4a 0307 	orr.w	r3, sl, r7
 800ccaa:	4323      	orrs	r3, r4
 800ccac:	68cc      	ldr	r4, [r1, #12]
 800ccae:	ea43 0308 	orr.w	r3, r3, r8
 800ccb2:	ea43 030e 	orr.w	r3, r3, lr
 800ccb6:	4333      	orrs	r3, r6
 800ccb8:	4323      	orrs	r3, r4
 800ccba:	ea43 030c 	orr.w	r3, r3, ip
 800ccbe:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize |
                                         cmd->AddressMode | cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ccc0:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ccc4:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ccc6:	d00d      	beq.n	800cce4 <QSPI_Config+0x8c>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800ccc8:	684b      	ldr	r3, [r1, #4]
 800ccca:	6183      	str	r3, [r0, #24]
 800cccc:	e00a      	b.n	800cce4 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ccce:	ea4a 0304 	orr.w	r3, sl, r4
 800ccd2:	ea43 0308 	orr.w	r3, r3, r8
 800ccd6:	ea43 030e 	orr.w	r3, r3, lr
 800ccda:	4333      	orrs	r3, r6
 800ccdc:	ea43 030c 	orr.w	r3, r3, ip
 800cce0:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cce2:	6143      	str	r3, [r0, #20]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800cce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800cce8:	b16f      	cbz	r7, 800cd06 <QSPI_Config+0xae>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ccea:	ea4a 0307 	orr.w	r3, sl, r7
 800ccee:	4323      	orrs	r3, r4
 800ccf0:	68cc      	ldr	r4, [r1, #12]
 800ccf2:	ea43 0308 	orr.w	r3, r3, r8
 800ccf6:	ea43 030e 	orr.w	r3, r3, lr
 800ccfa:	4323      	orrs	r3, r4
 800ccfc:	ea43 030c 	orr.w	r3, r3, ip
 800cd00:	ea43 0309 	orr.w	r3, r3, r9
 800cd04:	e7dc      	b.n	800ccc0 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cd06:	ea4a 0304 	orr.w	r3, sl, r4
 800cd0a:	ea43 0308 	orr.w	r3, r3, r8
 800cd0e:	ea43 030e 	orr.w	r3, r3, lr
 800cd12:	ea43 030c 	orr.w	r3, r3, ip
 800cd16:	ea43 0309 	orr.w	r3, r3, r9
 800cd1a:	e7e2      	b.n	800cce2 <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800cd1c:	b365      	cbz	r5, 800cd78 <QSPI_Config+0x120>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800cd1e:	6804      	ldr	r4, [r0, #0]
 800cd20:	688b      	ldr	r3, [r1, #8]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cd22:	6908      	ldr	r0, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800cd24:	61e3      	str	r3, [r4, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800cd26:	ea46 0305 	orr.w	r3, r6, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cd2a:	694e      	ldr	r6, [r1, #20]
 800cd2c:	ea43 0502 	orr.w	r5, r3, r2
 800cd30:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 800cd34:	04b6      	lsls	r6, r6, #18
 800cd36:	e9d1 830b 	ldrd	r8, r3, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800cd3a:	b1a7      	cbz	r7, 800cd66 <QSPI_Config+0x10e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cd3c:	4338      	orrs	r0, r7
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800cd3e:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cd42:	ea40 0008 	orr.w	r0, r0, r8
 800cd46:	ea43 0300 	orr.w	r3, r3, r0
 800cd4a:	68c8      	ldr	r0, [r1, #12]
 800cd4c:	ea43 030c 	orr.w	r3, r3, ip
 800cd50:	ea43 0300 	orr.w	r3, r3, r0
 800cd54:	ea43 0306 	orr.w	r3, r3, r6
 800cd58:	ea43 0305 	orr.w	r3, r3, r5
 800cd5c:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800cd5e:	d0c1      	beq.n	800cce4 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800cd60:	684b      	ldr	r3, [r1, #4]
 800cd62:	61a3      	str	r3, [r4, #24]
 800cd64:	e7be      	b.n	800cce4 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cd66:	ea40 0008 	orr.w	r0, r0, r8
 800cd6a:	4303      	orrs	r3, r0
 800cd6c:	ea43 030c 	orr.w	r3, r3, ip
 800cd70:	4333      	orrs	r3, r6
 800cd72:	432b      	orrs	r3, r5
 800cd74:	6163      	str	r3, [r4, #20]
 800cd76:	e7b5      	b.n	800cce4 <QSPI_Config+0x8c>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800cd78:	b17f      	cbz	r7, 800cd9a <QSPI_Config+0x142>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cd7a:	ea46 0307 	orr.w	r3, r6, r7
 800cd7e:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800cd80:	6800      	ldr	r0, [r0, #0]
 800cd82:	4313      	orrs	r3, r2
 800cd84:	4323      	orrs	r3, r4
 800cd86:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 800cd88:	4323      	orrs	r3, r4
 800cd8a:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800cd8c:	4323      	orrs	r3, r4
 800cd8e:	68cc      	ldr	r4, [r1, #12]
 800cd90:	4323      	orrs	r3, r4
 800cd92:	694c      	ldr	r4, [r1, #20]
 800cd94:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800cd98:	e792      	b.n	800ccc0 <QSPI_Config+0x68>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800cd9a:	2e00      	cmp	r6, #0
 800cd9c:	d0a2      	beq.n	800cce4 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cd9e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800cda0:	6800      	ldr	r0, [r0, #0]
 800cda2:	4333      	orrs	r3, r6
 800cda4:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 800cda6:	431a      	orrs	r2, r3
 800cda8:	694b      	ldr	r3, [r1, #20]
 800cdaa:	4332      	orrs	r2, r6
 800cdac:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 800cdae:	4332      	orrs	r2, r6
 800cdb0:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 800cdb4:	6142      	str	r2, [r0, #20]
}
 800cdb6:	e795      	b.n	800cce4 <QSPI_Config+0x8c>

0800cdb8 <QSPI_WaitFlagStateUntilTimeout>:
{
 800cdb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdbc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800cdc0:	4604      	mov	r4, r0
 800cdc2:	460e      	mov	r6, r1
 800cdc4:	4615      	mov	r5, r2
 800cdc6:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800cdc8:	6822      	ldr	r2, [r4, #0]
 800cdca:	6893      	ldr	r3, [r2, #8]
 800cdcc:	4233      	tst	r3, r6
 800cdce:	bf14      	ite	ne
 800cdd0:	2301      	movne	r3, #1
 800cdd2:	2300      	moveq	r3, #0
 800cdd4:	42ab      	cmp	r3, r5
 800cdd6:	d101      	bne.n	800cddc <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 800cdd8:	2000      	movs	r0, #0
 800cdda:	e012      	b.n	800ce02 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800cddc:	f1b8 3fff 	cmp.w	r8, #4294967295
 800cde0:	d0f3      	beq.n	800cdca <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cde2:	f7fe f915 	bl	800b010 <HAL_GetTick>
 800cde6:	1bc0      	subs	r0, r0, r7
 800cde8:	4540      	cmp	r0, r8
 800cdea:	d802      	bhi.n	800cdf2 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 800cdec:	f1b8 0f00 	cmp.w	r8, #0
 800cdf0:	d1ea      	bne.n	800cdc8 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800cdf2:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800cdf4:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800cdf6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800cdfa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800cdfc:	f043 0301 	orr.w	r3, r3, #1
 800ce00:	6463      	str	r3, [r4, #68]	; 0x44
}
 800ce02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800ce08 <HAL_QSPI_Init>:
{
 800ce08:	b530      	push	{r4, r5, lr}
 800ce0a:	4604      	mov	r4, r0
 800ce0c:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 800ce0e:	f7fe f8ff 	bl	800b010 <HAL_GetTick>
 800ce12:	4603      	mov	r3, r0
  if(hqspi == NULL)
 800ce14:	2c00      	cmp	r4, #0
 800ce16:	d040      	beq.n	800ce9a <HAL_QSPI_Init+0x92>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800ce18:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800ce1c:	b93a      	cbnz	r2, 800ce2e <HAL_QSPI_Init+0x26>
 800ce1e:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 800ce20:	4620      	mov	r0, r4
 800ce22:	f7f4 f94f 	bl	80010c4 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800ce26:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce2a:	9b03      	ldr	r3, [sp, #12]
 800ce2c:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800ce2e:	6820      	ldr	r0, [r4, #0]
 800ce30:	68a1      	ldr	r1, [r4, #8]
 800ce32:	6802      	ldr	r2, [r0, #0]
 800ce34:	3901      	subs	r1, #1
 800ce36:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800ce3a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800ce3e:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800ce40:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800ce42:	4620      	mov	r0, r4
 800ce44:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800ce46:	9200      	str	r2, [sp, #0]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	f7ff ffb5 	bl	800cdb8 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800ce4e:	bb10      	cbnz	r0, 800ce96 <HAL_QSPI_Init+0x8e>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800ce50:	6822      	ldr	r2, [r4, #0]
 800ce52:	69e5      	ldr	r5, [r4, #28]
 800ce54:	68e3      	ldr	r3, [r4, #12]
 800ce56:	6811      	ldr	r1, [r2, #0]
 800ce58:	432b      	orrs	r3, r5
 800ce5a:	6a25      	ldr	r5, [r4, #32]
 800ce5c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800ce60:	432b      	orrs	r3, r5
 800ce62:	6865      	ldr	r5, [r4, #4]
 800ce64:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 800ce68:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800ce6c:	430b      	orrs	r3, r1
 800ce6e:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800ce70:	6855      	ldr	r5, [r2, #4]
 800ce72:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800ce76:	430b      	orrs	r3, r1
 800ce78:	6921      	ldr	r1, [r4, #16]
 800ce7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800ce7e:	4908      	ldr	r1, [pc, #32]	; (800cea0 <HAL_QSPI_Init+0x98>)
 800ce80:	4029      	ands	r1, r5
 800ce82:	430b      	orrs	r3, r1
 800ce84:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800ce86:	6813      	ldr	r3, [r2, #0]
 800ce88:	f043 0301 	orr.w	r3, r3, #1
 800ce8c:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800ce8e:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ce90:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800ce92:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 800ce96:	b005      	add	sp, #20
 800ce98:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800ce9a:	2001      	movs	r0, #1
 800ce9c:	e7fb      	b.n	800ce96 <HAL_QSPI_Init+0x8e>
 800ce9e:	bf00      	nop
 800cea0:	ffe0f8fe 	.word	0xffe0f8fe

0800cea4 <HAL_QSPI_Command>:
{
 800cea4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cea8:	4604      	mov	r4, r0
 800ceaa:	b085      	sub	sp, #20
 800ceac:	4617      	mov	r7, r2
 800ceae:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 800ceb0:	f7fe f8ae 	bl	800b010 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800ceb4:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800ceb8:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800ceba:	2a01      	cmp	r2, #1
 800cebc:	d033      	beq.n	800cf26 <HAL_QSPI_Command+0x82>
 800cebe:	2201      	movs	r2, #1
 800cec0:	2602      	movs	r6, #2
 800cec2:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800cec6:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800ceca:	2a01      	cmp	r2, #1
 800cecc:	fa5f f882 	uxtb.w	r8, r2
 800ced0:	d127      	bne.n	800cf22 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ced2:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800ced4:	9003      	str	r0, [sp, #12]
 800ced6:	2120      	movs	r1, #32
 800ced8:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ceda:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800cedc:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800cede:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800cee2:	f7ff ff69 	bl	800cdb8 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800cee6:	4605      	mov	r5, r0
 800cee8:	b9a0      	cbnz	r0, 800cf14 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800ceea:	4602      	mov	r2, r0
 800ceec:	4649      	mov	r1, r9
 800ceee:	4620      	mov	r0, r4
 800cef0:	f7ff feb2 	bl	800cc58 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800cef4:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 800cef8:	9b03      	ldr	r3, [sp, #12]
 800cefa:	b94a      	cbnz	r2, 800cf10 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800cefc:	4642      	mov	r2, r8
 800cefe:	4631      	mov	r1, r6
 800cf00:	4620      	mov	r0, r4
 800cf02:	9700      	str	r7, [sp, #0]
 800cf04:	f7ff ff58 	bl	800cdb8 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800cf08:	4605      	mov	r5, r0
 800cf0a:	b918      	cbnz	r0, 800cf14 <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800cf0c:	6823      	ldr	r3, [r4, #0]
 800cf0e:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800cf10:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800cf14:	2300      	movs	r3, #0
 800cf16:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800cf1a:	4628      	mov	r0, r5
 800cf1c:	b005      	add	sp, #20
 800cf1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800cf22:	4635      	mov	r5, r6
 800cf24:	e7f6      	b.n	800cf14 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 800cf26:	2502      	movs	r5, #2
 800cf28:	e7f7      	b.n	800cf1a <HAL_QSPI_Command+0x76>

0800cf2a <HAL_QSPI_Transmit>:
{
 800cf2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf2c:	4604      	mov	r4, r0
 800cf2e:	b085      	sub	sp, #20
 800cf30:	4616      	mov	r6, r2
 800cf32:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800cf34:	f7fe f86c 	bl	800b010 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800cf38:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800cf3c:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800cf3e:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 800cf40:	2a01      	cmp	r2, #1
 800cf42:	d049      	beq.n	800cfd8 <HAL_QSPI_Transmit+0xae>
 800cf44:	2201      	movs	r2, #1
 800cf46:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800cf4a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800cf4e:	2a01      	cmp	r2, #1
 800cf50:	b2d0      	uxtb	r0, r2
 800cf52:	d13f      	bne.n	800cfd4 <HAL_QSPI_Transmit+0xaa>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800cf54:	2200      	movs	r2, #0
 800cf56:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 800cf58:	2f00      	cmp	r7, #0
 800cf5a:	d036      	beq.n	800cfca <HAL_QSPI_Transmit+0xa0>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800cf5c:	2212      	movs	r2, #18
 800cf5e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800cf62:	692a      	ldr	r2, [r5, #16]
 800cf64:	3201      	adds	r2, #1
 800cf66:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800cf68:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 800cf6a:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800cf6c:	3201      	adds	r2, #1
 800cf6e:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800cf70:	696a      	ldr	r2, [r5, #20]
 800cf72:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800cf76:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 800cf78:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800cf7a:	b98a      	cbnz	r2, 800cfa0 <HAL_QSPI_Transmit+0x76>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800cf7c:	2201      	movs	r2, #1
 800cf7e:	2102      	movs	r1, #2
 800cf80:	4620      	mov	r0, r4
 800cf82:	9600      	str	r6, [sp, #0]
 800cf84:	f7ff ff18 	bl	800cdb8 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800cf88:	b910      	cbnz	r0, 800cf90 <HAL_QSPI_Transmit+0x66>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800cf8a:	6823      	ldr	r3, [r4, #0]
 800cf8c:	2202      	movs	r2, #2
 800cf8e:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800cf90:	2301      	movs	r3, #1
 800cf92:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800cf96:	2300      	movs	r3, #0
 800cf98:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800cf9c:	b005      	add	sp, #20
 800cf9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800cfa0:	2201      	movs	r2, #1
 800cfa2:	2104      	movs	r1, #4
 800cfa4:	4620      	mov	r0, r4
 800cfa6:	9600      	str	r6, [sp, #0]
 800cfa8:	9303      	str	r3, [sp, #12]
 800cfaa:	f7ff ff05 	bl	800cdb8 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800cfae:	2800      	cmp	r0, #0
 800cfb0:	d1ee      	bne.n	800cf90 <HAL_QSPI_Transmit+0x66>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800cfb2:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 800cfb4:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800cfb6:	7812      	ldrb	r2, [r2, #0]
 800cfb8:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 800cfbc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800cfbe:	3201      	adds	r2, #1
 800cfc0:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 800cfc2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800cfc4:	3a01      	subs	r2, #1
 800cfc6:	62e2      	str	r2, [r4, #44]	; 0x2c
 800cfc8:	e7d6      	b.n	800cf78 <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800cfca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800cfcc:	f043 0308 	orr.w	r3, r3, #8
 800cfd0:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 800cfd2:	e7e0      	b.n	800cf96 <HAL_QSPI_Transmit+0x6c>
    status = HAL_BUSY;
 800cfd4:	2002      	movs	r0, #2
 800cfd6:	e7de      	b.n	800cf96 <HAL_QSPI_Transmit+0x6c>
  __HAL_LOCK(hqspi);
 800cfd8:	2002      	movs	r0, #2
 800cfda:	e7df      	b.n	800cf9c <HAL_QSPI_Transmit+0x72>

0800cfdc <HAL_QSPI_Receive>:
{
 800cfdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfde:	4604      	mov	r4, r0
 800cfe0:	b085      	sub	sp, #20
 800cfe2:	4616      	mov	r6, r2
 800cfe4:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800cfe6:	f7fe f813 	bl	800b010 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800cfea:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800cfec:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800cfee:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 800cff2:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800cff6:	2a01      	cmp	r2, #1
 800cff8:	d04d      	beq.n	800d096 <HAL_QSPI_Receive+0xba>
 800cffa:	2201      	movs	r2, #1
 800cffc:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800d000:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800d004:	2a01      	cmp	r2, #1
 800d006:	b2d0      	uxtb	r0, r2
 800d008:	d143      	bne.n	800d092 <HAL_QSPI_Receive+0xb6>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d00a:	2200      	movs	r2, #0
 800d00c:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 800d00e:	2f00      	cmp	r7, #0
 800d010:	d03a      	beq.n	800d088 <HAL_QSPI_Receive+0xac>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800d012:	2222      	movs	r2, #34	; 0x22
 800d014:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800d018:	692a      	ldr	r2, [r5, #16]
 800d01a:	3201      	adds	r2, #1
 800d01c:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800d01e:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800d020:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800d022:	3201      	adds	r2, #1
 800d024:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800d026:	6969      	ldr	r1, [r5, #20]
 800d028:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 800d02c:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 800d030:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800d032:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800d036:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800d038:	b98a      	cbnz	r2, 800d05e <HAL_QSPI_Receive+0x82>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800d03a:	2201      	movs	r2, #1
 800d03c:	2102      	movs	r1, #2
 800d03e:	4620      	mov	r0, r4
 800d040:	9600      	str	r6, [sp, #0]
 800d042:	f7ff feb9 	bl	800cdb8 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800d046:	b910      	cbnz	r0, 800d04e <HAL_QSPI_Receive+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800d048:	6823      	ldr	r3, [r4, #0]
 800d04a:	2202      	movs	r2, #2
 800d04c:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800d04e:	2301      	movs	r3, #1
 800d050:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800d054:	2300      	movs	r3, #0
 800d056:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800d05a:	b005      	add	sp, #20
 800d05c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800d05e:	2201      	movs	r2, #1
 800d060:	2106      	movs	r1, #6
 800d062:	4620      	mov	r0, r4
 800d064:	9600      	str	r6, [sp, #0]
 800d066:	9303      	str	r3, [sp, #12]
 800d068:	f7ff fea6 	bl	800cdb8 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800d06c:	2800      	cmp	r0, #0
 800d06e:	d1ee      	bne.n	800d04e <HAL_QSPI_Receive+0x72>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800d070:	f895 1020 	ldrb.w	r1, [r5, #32]
 800d074:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 800d076:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800d078:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 800d07a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d07c:	3201      	adds	r2, #1
 800d07e:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 800d080:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800d082:	3a01      	subs	r2, #1
 800d084:	63a2      	str	r2, [r4, #56]	; 0x38
 800d086:	e7d6      	b.n	800d036 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800d088:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d08a:	f043 0308 	orr.w	r3, r3, #8
 800d08e:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 800d090:	e7e0      	b.n	800d054 <HAL_QSPI_Receive+0x78>
    status = HAL_BUSY;
 800d092:	2002      	movs	r0, #2
 800d094:	e7de      	b.n	800d054 <HAL_QSPI_Receive+0x78>
  __HAL_LOCK(hqspi);
 800d096:	2002      	movs	r0, #2
 800d098:	e7df      	b.n	800d05a <HAL_QSPI_Receive+0x7e>

0800d09a <HAL_QSPI_AutoPolling>:
{
 800d09a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800d09e:	4604      	mov	r4, r0
 800d0a0:	4615      	mov	r5, r2
 800d0a2:	461e      	mov	r6, r3
 800d0a4:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800d0a6:	f7fd ffb3 	bl	800b010 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800d0aa:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800d0ae:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800d0b0:	2a01      	cmp	r2, #1
 800d0b2:	d040      	beq.n	800d136 <HAL_QSPI_AutoPolling+0x9c>
 800d0b4:	2201      	movs	r2, #1
 800d0b6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800d0ba:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800d0be:	2a01      	cmp	r2, #1
 800d0c0:	b2d7      	uxtb	r7, r2
 800d0c2:	d136      	bne.n	800d132 <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800d0c4:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d0c6:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800d0c8:	9003      	str	r0, [sp, #12]
 800d0ca:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d0cc:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800d0ce:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800d0d0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800d0d4:	2120      	movs	r1, #32
 800d0d6:	f7ff fe6f 	bl	800cdb8 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800d0da:	bb20      	cbnz	r0, 800d126 <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800d0dc:	6821      	ldr	r1, [r4, #0]
 800d0de:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800d0e0:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800d0e2:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800d0e4:	686a      	ldr	r2, [r5, #4]
 800d0e6:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800d0e8:	68aa      	ldr	r2, [r5, #8]
 800d0ea:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800d0ec:	680a      	ldr	r2, [r1, #0]
 800d0ee:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800d0f2:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800d0f4:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800d0f6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800d0fa:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800d0fc:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 800d0fe:	68ea      	ldr	r2, [r5, #12]
 800d100:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800d104:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d108:	f7ff fda6 	bl	800cc58 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800d10c:	9b03      	ldr	r3, [sp, #12]
 800d10e:	463a      	mov	r2, r7
 800d110:	2108      	movs	r1, #8
 800d112:	4620      	mov	r0, r4
 800d114:	9600      	str	r6, [sp, #0]
 800d116:	f7ff fe4f 	bl	800cdb8 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800d11a:	b920      	cbnz	r0, 800d126 <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800d11c:	6823      	ldr	r3, [r4, #0]
 800d11e:	2208      	movs	r2, #8
 800d120:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800d122:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800d126:	2300      	movs	r3, #0
 800d128:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800d12c:	b004      	add	sp, #16
 800d12e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 800d132:	2002      	movs	r0, #2
 800d134:	e7f7      	b.n	800d126 <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 800d136:	2002      	movs	r0, #2
 800d138:	e7f8      	b.n	800d12c <HAL_QSPI_AutoPolling+0x92>

0800d13a <HAL_QSPI_MemoryMapped>:
{
 800d13a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d13c:	4604      	mov	r4, r0
 800d13e:	4616      	mov	r6, r2
 800d140:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800d142:	f7fd ff65 	bl	800b010 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800d146:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800d14a:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800d14c:	2a01      	cmp	r2, #1
 800d14e:	d033      	beq.n	800d1b8 <HAL_QSPI_MemoryMapped+0x7e>
 800d150:	2201      	movs	r2, #1
 800d152:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800d156:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800d15a:	2a01      	cmp	r2, #1
 800d15c:	d12a      	bne.n	800d1b4 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d15e:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800d160:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800d162:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d164:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800d166:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800d16a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d16c:	9100      	str	r1, [sp, #0]
 800d16e:	2120      	movs	r1, #32
 800d170:	f7ff fe22 	bl	800cdb8 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800d174:	4605      	mov	r5, r0
 800d176:	b9b8      	cbnz	r0, 800d1a8 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800d178:	6823      	ldr	r3, [r4, #0]
 800d17a:	6872      	ldr	r2, [r6, #4]
 800d17c:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800d17e:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800d180:	f020 0008 	bic.w	r0, r0, #8
 800d184:	ea40 0002 	orr.w	r0, r0, r2
 800d188:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800d18a:	d107      	bne.n	800d19c <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800d18c:	6832      	ldr	r2, [r6, #0]
 800d18e:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800d190:	2210      	movs	r2, #16
 800d192:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800d194:	681a      	ldr	r2, [r3, #0]
 800d196:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d19a:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800d19c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800d1a0:	4639      	mov	r1, r7
 800d1a2:	4620      	mov	r0, r4
 800d1a4:	f7ff fd58 	bl	800cc58 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800d1ae:	4628      	mov	r0, r5
 800d1b0:	b003      	add	sp, #12
 800d1b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 800d1b4:	2502      	movs	r5, #2
 800d1b6:	e7f7      	b.n	800d1a8 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800d1b8:	2502      	movs	r5, #2
 800d1ba:	e7f8      	b.n	800d1ae <HAL_QSPI_MemoryMapped+0x74>

0800d1bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d1be:	4604      	mov	r4, r0
 800d1c0:	b908      	cbnz	r0, 800d1c6 <HAL_RCC_OscConfig+0xa>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 800d1c2:	2001      	movs	r0, #1
 800d1c4:	e08b      	b.n	800d2de <HAL_RCC_OscConfig+0x122>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d1c6:	6803      	ldr	r3, [r0, #0]
 800d1c8:	07df      	lsls	r7, r3, #31
 800d1ca:	d45e      	bmi.n	800d28a <HAL_RCC_OscConfig+0xce>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d1cc:	6823      	ldr	r3, [r4, #0]
 800d1ce:	079e      	lsls	r6, r3, #30
 800d1d0:	f100 80af 	bmi.w	800d332 <HAL_RCC_OscConfig+0x176>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800d1d4:	6823      	ldr	r3, [r4, #0]
 800d1d6:	06da      	lsls	r2, r3, #27
 800d1d8:	d527      	bpl.n	800d22a <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d1da:	4b9e      	ldr	r3, [pc, #632]	; (800d454 <HAL_RCC_OscConfig+0x298>)
 800d1dc:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d1de:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d1e0:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800d1e4:	2a08      	cmp	r2, #8
 800d1e6:	d007      	beq.n	800d1f8 <HAL_RCC_OscConfig+0x3c>
 800d1e8:	2a18      	cmp	r2, #24
 800d1ea:	f040 8107 	bne.w	800d3fc <HAL_RCC_OscConfig+0x240>
 800d1ee:	f001 0203 	and.w	r2, r1, #3
 800d1f2:	2a01      	cmp	r2, #1
 800d1f4:	f040 8102 	bne.w	800d3fc <HAL_RCC_OscConfig+0x240>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	05db      	lsls	r3, r3, #23
 800d1fc:	d502      	bpl.n	800d204 <HAL_RCC_OscConfig+0x48>
 800d1fe:	69e3      	ldr	r3, [r4, #28]
 800d200:	2b80      	cmp	r3, #128	; 0x80
 800d202:	d1de      	bne.n	800d1c2 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d204:	f7fd ff1c 	bl	800b040 <HAL_GetREVID>
 800d208:	f241 0303 	movw	r3, #4099	; 0x1003
 800d20c:	6a21      	ldr	r1, [r4, #32]
 800d20e:	4298      	cmp	r0, r3
 800d210:	4b90      	ldr	r3, [pc, #576]	; (800d454 <HAL_RCC_OscConfig+0x298>)
 800d212:	f200 80ec 	bhi.w	800d3ee <HAL_RCC_OscConfig+0x232>
 800d216:	685a      	ldr	r2, [r3, #4]
 800d218:	2920      	cmp	r1, #32
 800d21a:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 800d21e:	bf0c      	ite	eq
 800d220:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 800d224:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 800d228:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d22a:	6823      	ldr	r3, [r4, #0]
 800d22c:	0719      	lsls	r1, r3, #28
 800d22e:	f100 8127 	bmi.w	800d480 <HAL_RCC_OscConfig+0x2c4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d232:	6823      	ldr	r3, [r4, #0]
 800d234:	069a      	lsls	r2, r3, #26
 800d236:	f100 8148 	bmi.w	800d4ca <HAL_RCC_OscConfig+0x30e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d23a:	6823      	ldr	r3, [r4, #0]
 800d23c:	075d      	lsls	r5, r3, #29
 800d23e:	d51e      	bpl.n	800d27e <HAL_RCC_OscConfig+0xc2>
    PWR->CR1 |= PWR_CR1_DBP;
 800d240:	4d85      	ldr	r5, [pc, #532]	; (800d458 <HAL_RCC_OscConfig+0x29c>)
 800d242:	682b      	ldr	r3, [r5, #0]
 800d244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d248:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800d24a:	f7fd fee1 	bl	800b010 <HAL_GetTick>
 800d24e:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d250:	682b      	ldr	r3, [r5, #0]
 800d252:	05da      	lsls	r2, r3, #23
 800d254:	f140 815e 	bpl.w	800d514 <HAL_RCC_OscConfig+0x358>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d258:	68a3      	ldr	r3, [r4, #8]
 800d25a:	4d7e      	ldr	r5, [pc, #504]	; (800d454 <HAL_RCC_OscConfig+0x298>)
 800d25c:	2b01      	cmp	r3, #1
 800d25e:	f040 8160 	bne.w	800d522 <HAL_RCC_OscConfig+0x366>
 800d262:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800d264:	f043 0301 	orr.w	r3, r3, #1
 800d268:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d26a:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800d26e:	f7fd fecf 	bl	800b010 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d272:	4e78      	ldr	r6, [pc, #480]	; (800d454 <HAL_RCC_OscConfig+0x298>)
      tickstart = HAL_GetTick();
 800d274:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d276:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800d278:	079b      	lsls	r3, r3, #30
 800d27a:	f140 8178 	bpl.w	800d56e <HAL_RCC_OscConfig+0x3b2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d27e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d280:	2800      	cmp	r0, #0
 800d282:	f040 817b 	bne.w	800d57c <HAL_RCC_OscConfig+0x3c0>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 800d286:	2000      	movs	r0, #0
 800d288:	e029      	b.n	800d2de <HAL_RCC_OscConfig+0x122>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d28a:	4b72      	ldr	r3, [pc, #456]	; (800d454 <HAL_RCC_OscConfig+0x298>)
 800d28c:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d28e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d290:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800d294:	2a10      	cmp	r2, #16
 800d296:	d005      	beq.n	800d2a4 <HAL_RCC_OscConfig+0xe8>
 800d298:	2a18      	cmp	r2, #24
 800d29a:	d10a      	bne.n	800d2b2 <HAL_RCC_OscConfig+0xf6>
 800d29c:	f001 0203 	and.w	r2, r1, #3
 800d2a0:	2a02      	cmp	r2, #2
 800d2a2:	d106      	bne.n	800d2b2 <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	039d      	lsls	r5, r3, #14
 800d2a8:	d590      	bpl.n	800d1cc <HAL_RCC_OscConfig+0x10>
 800d2aa:	6863      	ldr	r3, [r4, #4]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d18d      	bne.n	800d1cc <HAL_RCC_OscConfig+0x10>
 800d2b0:	e787      	b.n	800d1c2 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d2b2:	6862      	ldr	r2, [r4, #4]
 800d2b4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800d2b8:	d112      	bne.n	800d2e0 <HAL_RCC_OscConfig+0x124>
 800d2ba:	681a      	ldr	r2, [r3, #0]
 800d2bc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800d2c0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800d2c2:	f7fd fea5 	bl	800b010 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d2c6:	4e63      	ldr	r6, [pc, #396]	; (800d454 <HAL_RCC_OscConfig+0x298>)
        tickstart = HAL_GetTick();
 800d2c8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d2ca:	6833      	ldr	r3, [r6, #0]
 800d2cc:	0398      	lsls	r0, r3, #14
 800d2ce:	f53f af7d 	bmi.w	800d1cc <HAL_RCC_OscConfig+0x10>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d2d2:	f7fd fe9d 	bl	800b010 <HAL_GetTick>
 800d2d6:	1b40      	subs	r0, r0, r5
 800d2d8:	2864      	cmp	r0, #100	; 0x64
 800d2da:	d9f6      	bls.n	800d2ca <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 800d2dc:	2003      	movs	r0, #3
}
 800d2de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d2e0:	4d5c      	ldr	r5, [pc, #368]	; (800d454 <HAL_RCC_OscConfig+0x298>)
 800d2e2:	682b      	ldr	r3, [r5, #0]
 800d2e4:	b99a      	cbnz	r2, 800d30e <HAL_RCC_OscConfig+0x152>
 800d2e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d2ea:	602b      	str	r3, [r5, #0]
 800d2ec:	682b      	ldr	r3, [r5, #0]
 800d2ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d2f2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d2f4:	f7fd fe8c 	bl	800b010 <HAL_GetTick>
 800d2f8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d2fa:	682b      	ldr	r3, [r5, #0]
 800d2fc:	0399      	lsls	r1, r3, #14
 800d2fe:	f57f af65 	bpl.w	800d1cc <HAL_RCC_OscConfig+0x10>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d302:	f7fd fe85 	bl	800b010 <HAL_GetTick>
 800d306:	1b80      	subs	r0, r0, r6
 800d308:	2864      	cmp	r0, #100	; 0x64
 800d30a:	d9f6      	bls.n	800d2fa <HAL_RCC_OscConfig+0x13e>
 800d30c:	e7e6      	b.n	800d2dc <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d30e:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800d312:	d107      	bne.n	800d324 <HAL_RCC_OscConfig+0x168>
 800d314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d318:	602b      	str	r3, [r5, #0]
 800d31a:	682b      	ldr	r3, [r5, #0]
 800d31c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d320:	602b      	str	r3, [r5, #0]
 800d322:	e7ce      	b.n	800d2c2 <HAL_RCC_OscConfig+0x106>
 800d324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d328:	602b      	str	r3, [r5, #0]
 800d32a:	682b      	ldr	r3, [r5, #0]
 800d32c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d330:	e7f6      	b.n	800d320 <HAL_RCC_OscConfig+0x164>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d332:	4b48      	ldr	r3, [pc, #288]	; (800d454 <HAL_RCC_OscConfig+0x298>)
 800d334:	68e1      	ldr	r1, [r4, #12]
 800d336:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d338:	6a98      	ldr	r0, [r3, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800d33a:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 800d33e:	d003      	beq.n	800d348 <HAL_RCC_OscConfig+0x18c>
 800d340:	2a18      	cmp	r2, #24
 800d342:	d12b      	bne.n	800d39c <HAL_RCC_OscConfig+0x1e0>
 800d344:	0782      	lsls	r2, r0, #30
 800d346:	d129      	bne.n	800d39c <HAL_RCC_OscConfig+0x1e0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	075b      	lsls	r3, r3, #29
 800d34c:	d502      	bpl.n	800d354 <HAL_RCC_OscConfig+0x198>
 800d34e:	2900      	cmp	r1, #0
 800d350:	f43f af37 	beq.w	800d1c2 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d354:	4d3f      	ldr	r5, [pc, #252]	; (800d454 <HAL_RCC_OscConfig+0x298>)
 800d356:	682a      	ldr	r2, [r5, #0]
 800d358:	f022 0219 	bic.w	r2, r2, #25
 800d35c:	430a      	orrs	r2, r1
 800d35e:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 800d360:	f7fd fe56 	bl	800b010 <HAL_GetTick>
 800d364:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d366:	682b      	ldr	r3, [r5, #0]
 800d368:	075f      	lsls	r7, r3, #29
 800d36a:	d511      	bpl.n	800d390 <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d36c:	f7fd fe68 	bl	800b040 <HAL_GetREVID>
 800d370:	f241 0303 	movw	r3, #4099	; 0x1003
 800d374:	6922      	ldr	r2, [r4, #16]
 800d376:	4298      	cmp	r0, r3
 800d378:	686b      	ldr	r3, [r5, #4]
 800d37a:	d822      	bhi.n	800d3c2 <HAL_RCC_OscConfig+0x206>
 800d37c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800d380:	2a40      	cmp	r2, #64	; 0x40
 800d382:	bf0c      	ite	eq
 800d384:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 800d388:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800d38c:	606b      	str	r3, [r5, #4]
 800d38e:	e721      	b.n	800d1d4 <HAL_RCC_OscConfig+0x18>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d390:	f7fd fe3e 	bl	800b010 <HAL_GetTick>
 800d394:	1b80      	subs	r0, r0, r6
 800d396:	2802      	cmp	r0, #2
 800d398:	d9e5      	bls.n	800d366 <HAL_RCC_OscConfig+0x1aa>
 800d39a:	e79f      	b.n	800d2dc <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d39c:	681a      	ldr	r2, [r3, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d39e:	b1a9      	cbz	r1, 800d3cc <HAL_RCC_OscConfig+0x210>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d3a0:	f022 0219 	bic.w	r2, r2, #25
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d3a4:	4d2b      	ldr	r5, [pc, #172]	; (800d454 <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d3a6:	430a      	orrs	r2, r1
 800d3a8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800d3aa:	f7fd fe31 	bl	800b010 <HAL_GetTick>
 800d3ae:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d3b0:	682b      	ldr	r3, [r5, #0]
 800d3b2:	0758      	lsls	r0, r3, #29
 800d3b4:	d4da      	bmi.n	800d36c <HAL_RCC_OscConfig+0x1b0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d3b6:	f7fd fe2b 	bl	800b010 <HAL_GetTick>
 800d3ba:	1b80      	subs	r0, r0, r6
 800d3bc:	2802      	cmp	r0, #2
 800d3be:	d9f7      	bls.n	800d3b0 <HAL_RCC_OscConfig+0x1f4>
 800d3c0:	e78c      	b.n	800d2dc <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d3c2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800d3c6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d3ca:	e7df      	b.n	800d38c <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_HSI_DISABLE();
 800d3cc:	f022 0201 	bic.w	r2, r2, #1
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d3d0:	4e20      	ldr	r6, [pc, #128]	; (800d454 <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_HSI_DISABLE();
 800d3d2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800d3d4:	f7fd fe1c 	bl	800b010 <HAL_GetTick>
 800d3d8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d3da:	6833      	ldr	r3, [r6, #0]
 800d3dc:	0759      	lsls	r1, r3, #29
 800d3de:	f57f aef9 	bpl.w	800d1d4 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d3e2:	f7fd fe15 	bl	800b010 <HAL_GetTick>
 800d3e6:	1b40      	subs	r0, r0, r5
 800d3e8:	2802      	cmp	r0, #2
 800d3ea:	d9f6      	bls.n	800d3da <HAL_RCC_OscConfig+0x21e>
 800d3ec:	e776      	b.n	800d2dc <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d3ee:	68da      	ldr	r2, [r3, #12]
 800d3f0:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 800d3f4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d3f8:	60da      	str	r2, [r3, #12]
 800d3fa:	e716      	b.n	800d22a <HAL_RCC_OscConfig+0x6e>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800d3fc:	69e2      	ldr	r2, [r4, #28]
 800d3fe:	b36a      	cbz	r2, 800d45c <HAL_RCC_OscConfig+0x2a0>
        __HAL_RCC_CSI_ENABLE();
 800d400:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d402:	4d14      	ldr	r5, [pc, #80]	; (800d454 <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_CSI_ENABLE();
 800d404:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d408:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800d40a:	f7fd fe01 	bl	800b010 <HAL_GetTick>
 800d40e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d410:	682b      	ldr	r3, [r5, #0]
 800d412:	05df      	lsls	r7, r3, #23
 800d414:	d511      	bpl.n	800d43a <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d416:	f7fd fe13 	bl	800b040 <HAL_GetREVID>
 800d41a:	f241 0303 	movw	r3, #4099	; 0x1003
 800d41e:	6a22      	ldr	r2, [r4, #32]
 800d420:	4298      	cmp	r0, r3
 800d422:	d810      	bhi.n	800d446 <HAL_RCC_OscConfig+0x28a>
 800d424:	686b      	ldr	r3, [r5, #4]
 800d426:	2a20      	cmp	r2, #32
 800d428:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800d42c:	bf0c      	ite	eq
 800d42e:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800d432:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800d436:	606b      	str	r3, [r5, #4]
 800d438:	e6f7      	b.n	800d22a <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d43a:	f7fd fde9 	bl	800b010 <HAL_GetTick>
 800d43e:	1b80      	subs	r0, r0, r6
 800d440:	2802      	cmp	r0, #2
 800d442:	d9e5      	bls.n	800d410 <HAL_RCC_OscConfig+0x254>
 800d444:	e74a      	b.n	800d2dc <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d446:	68eb      	ldr	r3, [r5, #12]
 800d448:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800d44c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d450:	60eb      	str	r3, [r5, #12]
 800d452:	e6ea      	b.n	800d22a <HAL_RCC_OscConfig+0x6e>
 800d454:	58024400 	.word	0x58024400
 800d458:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 800d45c:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d45e:	4e88      	ldr	r6, [pc, #544]	; (800d680 <HAL_RCC_OscConfig+0x4c4>)
        __HAL_RCC_CSI_DISABLE();
 800d460:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d464:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800d466:	f7fd fdd3 	bl	800b010 <HAL_GetTick>
 800d46a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d46c:	6833      	ldr	r3, [r6, #0]
 800d46e:	05d8      	lsls	r0, r3, #23
 800d470:	f57f aedb 	bpl.w	800d22a <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d474:	f7fd fdcc 	bl	800b010 <HAL_GetTick>
 800d478:	1b40      	subs	r0, r0, r5
 800d47a:	2802      	cmp	r0, #2
 800d47c:	d9f6      	bls.n	800d46c <HAL_RCC_OscConfig+0x2b0>
 800d47e:	e72d      	b.n	800d2dc <HAL_RCC_OscConfig+0x120>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d480:	6963      	ldr	r3, [r4, #20]
 800d482:	4d7f      	ldr	r5, [pc, #508]	; (800d680 <HAL_RCC_OscConfig+0x4c4>)
 800d484:	b183      	cbz	r3, 800d4a8 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_LSI_ENABLE();
 800d486:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800d488:	f043 0301 	orr.w	r3, r3, #1
 800d48c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800d48e:	f7fd fdbf 	bl	800b010 <HAL_GetTick>
 800d492:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d494:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800d496:	079b      	lsls	r3, r3, #30
 800d498:	f53f aecb 	bmi.w	800d232 <HAL_RCC_OscConfig+0x76>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d49c:	f7fd fdb8 	bl	800b010 <HAL_GetTick>
 800d4a0:	1b80      	subs	r0, r0, r6
 800d4a2:	2802      	cmp	r0, #2
 800d4a4:	d9f6      	bls.n	800d494 <HAL_RCC_OscConfig+0x2d8>
 800d4a6:	e719      	b.n	800d2dc <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_LSI_DISABLE();
 800d4a8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800d4aa:	f023 0301 	bic.w	r3, r3, #1
 800d4ae:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800d4b0:	f7fd fdae 	bl	800b010 <HAL_GetTick>
 800d4b4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d4b6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800d4b8:	079f      	lsls	r7, r3, #30
 800d4ba:	f57f aeba 	bpl.w	800d232 <HAL_RCC_OscConfig+0x76>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d4be:	f7fd fda7 	bl	800b010 <HAL_GetTick>
 800d4c2:	1b80      	subs	r0, r0, r6
 800d4c4:	2802      	cmp	r0, #2
 800d4c6:	d9f6      	bls.n	800d4b6 <HAL_RCC_OscConfig+0x2fa>
 800d4c8:	e708      	b.n	800d2dc <HAL_RCC_OscConfig+0x120>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800d4ca:	69a3      	ldr	r3, [r4, #24]
 800d4cc:	4d6c      	ldr	r5, [pc, #432]	; (800d680 <HAL_RCC_OscConfig+0x4c4>)
 800d4ce:	b183      	cbz	r3, 800d4f2 <HAL_RCC_OscConfig+0x336>
      __HAL_RCC_HSI48_ENABLE();
 800d4d0:	682b      	ldr	r3, [r5, #0]
 800d4d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d4d6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800d4d8:	f7fd fd9a 	bl	800b010 <HAL_GetTick>
 800d4dc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d4de:	682b      	ldr	r3, [r5, #0]
 800d4e0:	0498      	lsls	r0, r3, #18
 800d4e2:	f53f aeaa 	bmi.w	800d23a <HAL_RCC_OscConfig+0x7e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d4e6:	f7fd fd93 	bl	800b010 <HAL_GetTick>
 800d4ea:	1b80      	subs	r0, r0, r6
 800d4ec:	2802      	cmp	r0, #2
 800d4ee:	d9f6      	bls.n	800d4de <HAL_RCC_OscConfig+0x322>
 800d4f0:	e6f4      	b.n	800d2dc <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSI48_DISABLE();
 800d4f2:	682b      	ldr	r3, [r5, #0]
 800d4f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d4f8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800d4fa:	f7fd fd89 	bl	800b010 <HAL_GetTick>
 800d4fe:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d500:	682b      	ldr	r3, [r5, #0]
 800d502:	0499      	lsls	r1, r3, #18
 800d504:	f57f ae99 	bpl.w	800d23a <HAL_RCC_OscConfig+0x7e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d508:	f7fd fd82 	bl	800b010 <HAL_GetTick>
 800d50c:	1b80      	subs	r0, r0, r6
 800d50e:	2802      	cmp	r0, #2
 800d510:	d9f6      	bls.n	800d500 <HAL_RCC_OscConfig+0x344>
 800d512:	e6e3      	b.n	800d2dc <HAL_RCC_OscConfig+0x120>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d514:	f7fd fd7c 	bl	800b010 <HAL_GetTick>
 800d518:	1b80      	subs	r0, r0, r6
 800d51a:	2864      	cmp	r0, #100	; 0x64
 800d51c:	f67f ae98 	bls.w	800d250 <HAL_RCC_OscConfig+0x94>
 800d520:	e6dc      	b.n	800d2dc <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d522:	b9b3      	cbnz	r3, 800d552 <HAL_RCC_OscConfig+0x396>
 800d524:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d526:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d52a:	f023 0301 	bic.w	r3, r3, #1
 800d52e:	672b      	str	r3, [r5, #112]	; 0x70
 800d530:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800d532:	f023 0304 	bic.w	r3, r3, #4
 800d536:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800d538:	f7fd fd6a 	bl	800b010 <HAL_GetTick>
 800d53c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d53e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800d540:	0798      	lsls	r0, r3, #30
 800d542:	f57f ae9c 	bpl.w	800d27e <HAL_RCC_OscConfig+0xc2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d546:	f7fd fd63 	bl	800b010 <HAL_GetTick>
 800d54a:	1b80      	subs	r0, r0, r6
 800d54c:	42b8      	cmp	r0, r7
 800d54e:	d9f6      	bls.n	800d53e <HAL_RCC_OscConfig+0x382>
 800d550:	e6c4      	b.n	800d2dc <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d552:	2b05      	cmp	r3, #5
 800d554:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800d556:	d103      	bne.n	800d560 <HAL_RCC_OscConfig+0x3a4>
 800d558:	f043 0304 	orr.w	r3, r3, #4
 800d55c:	672b      	str	r3, [r5, #112]	; 0x70
 800d55e:	e680      	b.n	800d262 <HAL_RCC_OscConfig+0xa6>
 800d560:	f023 0301 	bic.w	r3, r3, #1
 800d564:	672b      	str	r3, [r5, #112]	; 0x70
 800d566:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800d568:	f023 0304 	bic.w	r3, r3, #4
 800d56c:	e67c      	b.n	800d268 <HAL_RCC_OscConfig+0xac>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d56e:	f7fd fd4f 	bl	800b010 <HAL_GetTick>
 800d572:	1b40      	subs	r0, r0, r5
 800d574:	42b8      	cmp	r0, r7
 800d576:	f67f ae7e 	bls.w	800d276 <HAL_RCC_OscConfig+0xba>
 800d57a:	e6af      	b.n	800d2dc <HAL_RCC_OscConfig+0x120>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800d57c:	4d40      	ldr	r5, [pc, #256]	; (800d680 <HAL_RCC_OscConfig+0x4c4>)
 800d57e:	692b      	ldr	r3, [r5, #16]
 800d580:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d584:	2b18      	cmp	r3, #24
 800d586:	d07d      	beq.n	800d684 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_PLL_DISABLE();
 800d588:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d58a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800d58c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d590:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d592:	d167      	bne.n	800d664 <HAL_RCC_OscConfig+0x4a8>
        tickstart = HAL_GetTick();
 800d594:	f7fd fd3c 	bl	800b010 <HAL_GetTick>
 800d598:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d59a:	682b      	ldr	r3, [r5, #0]
 800d59c:	0199      	lsls	r1, r3, #6
 800d59e:	d45b      	bmi.n	800d658 <HAL_RCC_OscConfig+0x49c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d5a0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800d5a2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800d5a4:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 800d5a8:	f023 0303 	bic.w	r3, r3, #3
 800d5ac:	4313      	orrs	r3, r2
 800d5ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d5b0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800d5b4:	62ab      	str	r3, [r5, #40]	; 0x28
 800d5b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d5b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800d5ba:	3b01      	subs	r3, #1
 800d5bc:	3a01      	subs	r2, #1
 800d5be:	025b      	lsls	r3, r3, #9
 800d5c0:	0412      	lsls	r2, r2, #16
 800d5c2:	b29b      	uxth	r3, r3
 800d5c4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800d5c8:	4313      	orrs	r3, r2
 800d5ca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d5cc:	3a01      	subs	r2, #1
 800d5ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d5d2:	4313      	orrs	r3, r2
 800d5d4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d5d6:	3a01      	subs	r2, #1
 800d5d8:	0612      	lsls	r2, r2, #24
 800d5da:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800d5de:	4313      	orrs	r3, r2
 800d5e0:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800d5e2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d5e4:	f023 0301 	bic.w	r3, r3, #1
 800d5e8:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d5ea:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800d5ec:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800d5ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d5f2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800d5f6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800d5fa:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800d5fc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d5fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d600:	f023 030c 	bic.w	r3, r3, #12
 800d604:	4313      	orrs	r3, r2
 800d606:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800d608:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d60a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800d60c:	f023 0302 	bic.w	r3, r3, #2
 800d610:	4313      	orrs	r3, r2
 800d612:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d614:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d61a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d61c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d61e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d622:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d624:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d626:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d62a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800d62c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d62e:	f043 0301 	orr.w	r3, r3, #1
 800d632:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800d634:	682b      	ldr	r3, [r5, #0]
 800d636:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d63a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d63c:	f7fd fce8 	bl	800b010 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d640:	4d0f      	ldr	r5, [pc, #60]	; (800d680 <HAL_RCC_OscConfig+0x4c4>)
        tickstart = HAL_GetTick();
 800d642:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d644:	682b      	ldr	r3, [r5, #0]
 800d646:	019a      	lsls	r2, r3, #6
 800d648:	f53f ae1d 	bmi.w	800d286 <HAL_RCC_OscConfig+0xca>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d64c:	f7fd fce0 	bl	800b010 <HAL_GetTick>
 800d650:	1b00      	subs	r0, r0, r4
 800d652:	2802      	cmp	r0, #2
 800d654:	d9f6      	bls.n	800d644 <HAL_RCC_OscConfig+0x488>
 800d656:	e641      	b.n	800d2dc <HAL_RCC_OscConfig+0x120>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d658:	f7fd fcda 	bl	800b010 <HAL_GetTick>
 800d65c:	1b80      	subs	r0, r0, r6
 800d65e:	2802      	cmp	r0, #2
 800d660:	d99b      	bls.n	800d59a <HAL_RCC_OscConfig+0x3de>
 800d662:	e63b      	b.n	800d2dc <HAL_RCC_OscConfig+0x120>
        tickstart = HAL_GetTick();
 800d664:	f7fd fcd4 	bl	800b010 <HAL_GetTick>
 800d668:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d66a:	682b      	ldr	r3, [r5, #0]
 800d66c:	019b      	lsls	r3, r3, #6
 800d66e:	f57f ae0a 	bpl.w	800d286 <HAL_RCC_OscConfig+0xca>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d672:	f7fd fccd 	bl	800b010 <HAL_GetTick>
 800d676:	1b00      	subs	r0, r0, r4
 800d678:	2802      	cmp	r0, #2
 800d67a:	d9f6      	bls.n	800d66a <HAL_RCC_OscConfig+0x4ae>
 800d67c:	e62e      	b.n	800d2dc <HAL_RCC_OscConfig+0x120>
 800d67e:	bf00      	nop
 800d680:	58024400 	.word	0x58024400
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d684:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800d686:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d688:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d68a:	f43f ae28 	beq.w	800d2de <HAL_RCC_OscConfig+0x122>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d68e:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d692:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800d694:	4281      	cmp	r1, r0
 800d696:	f47f ad94 	bne.w	800d1c2 <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d69a:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d69e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d6a0:	428a      	cmp	r2, r1
 800d6a2:	f47f ad8e 	bne.w	800d1c2 <HAL_RCC_OscConfig+0x6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d6a6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d6a8:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800d6ac:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d6ae:	4291      	cmp	r1, r2
 800d6b0:	f47f ad87 	bne.w	800d1c2 <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d6b4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800d6b6:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800d6ba:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d6bc:	4291      	cmp	r1, r2
 800d6be:	f47f ad80 	bne.w	800d1c2 <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d6c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800d6c4:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800d6c8:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d6ca:	4291      	cmp	r1, r2
 800d6cc:	f47f ad79 	bne.w	800d1c2 <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800d6d0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d6d2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800d6d6:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	f47f ad72 	bne.w	800d1c2 <HAL_RCC_OscConfig+0x6>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800d6de:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800d6e0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800d6e2:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800d6e6:	429a      	cmp	r2, r3
 800d6e8:	f43f adcd 	beq.w	800d286 <HAL_RCC_OscConfig+0xca>
          __HAL_RCC_PLLFRACN_DISABLE();
 800d6ec:	4d0c      	ldr	r5, [pc, #48]	; (800d720 <HAL_RCC_OscConfig+0x564>)
 800d6ee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d6f0:	f023 0301 	bic.w	r3, r3, #1
 800d6f4:	62eb      	str	r3, [r5, #44]	; 0x2c
          tickstart = HAL_GetTick();
 800d6f6:	f7fd fc8b 	bl	800b010 <HAL_GetTick>
 800d6fa:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800d6fc:	f7fd fc88 	bl	800b010 <HAL_GetTick>
 800d700:	42b0      	cmp	r0, r6
 800d702:	d0fb      	beq.n	800d6fc <HAL_RCC_OscConfig+0x540>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d704:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800d706:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800d708:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d70c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800d710:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800d714:	636b      	str	r3, [r5, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800d716:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d718:	f043 0301 	orr.w	r3, r3, #1
 800d71c:	62eb      	str	r3, [r5, #44]	; 0x2c
 800d71e:	e5b2      	b.n	800d286 <HAL_RCC_OscConfig+0xca>
 800d720:	58024400 	.word	0x58024400

0800d724 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800d724:	b570      	push	{r4, r5, r6, lr}
 800d726:	4c23      	ldr	r4, [pc, #140]	; (800d7b4 <HAL_RCC_MCOConfig+0x90>)
 800d728:	b088      	sub	sp, #32
 800d72a:	460e      	mov	r6, r1
 800d72c:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800d72e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  if (RCC_MCOx == RCC_MCO1)
 800d732:	b9f8      	cbnz	r0, 800d774 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 800d734:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d738:	f44f 7c80 	mov.w	ip, #256	; 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800d73c:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 800d73e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800d742:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800d746:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 800d748:	f003 0301 	and.w	r3, r3, #1
 800d74c:	9301      	str	r3, [sp, #4]
 800d74e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d750:	2302      	movs	r3, #2
 800d752:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d756:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d758:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800d75c:	4816      	ldr	r0, [pc, #88]	; (800d7b8 <HAL_RCC_MCOConfig+0x94>)
 800d75e:	f7fe fa9d 	bl	800bc9c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800d762:	6923      	ldr	r3, [r4, #16]
 800d764:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 800d768:	ea43 0106 	orr.w	r1, r3, r6
 800d76c:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800d76e:	6121      	str	r1, [r4, #16]
  }
}
 800d770:	b008      	add	sp, #32
 800d772:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 800d774:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d778:	f44f 7200 	mov.w	r2, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d77c:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800d77e:	480f      	ldr	r0, [pc, #60]	; (800d7bc <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 800d780:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800d784:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800d788:	f003 0304 	and.w	r3, r3, #4
 800d78c:	9302      	str	r3, [sp, #8]
 800d78e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d790:	2302      	movs	r3, #2
 800d792:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d796:	2300      	movs	r3, #0
 800d798:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800d79c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800d79e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800d7a0:	f7fe fa7c 	bl	800bc9c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800d7a4:	6923      	ldr	r3, [r4, #16]
 800d7a6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800d7aa:	ea43 0106 	orr.w	r1, r3, r6
 800d7ae:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 800d7b2:	e7dc      	b.n	800d76e <HAL_RCC_MCOConfig+0x4a>
 800d7b4:	58024400 	.word	0x58024400
 800d7b8:	58020000 	.word	0x58020000
 800d7bc:	58020800 	.word	0x58020800

0800d7c0 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d7c0:	4b48      	ldr	r3, [pc, #288]	; (800d8e4 <HAL_RCC_GetSysClockFreq+0x124>)
 800d7c2:	691a      	ldr	r2, [r3, #16]
 800d7c4:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800d7c8:	2a10      	cmp	r2, #16
{
 800d7ca:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d7cc:	f000 8086 	beq.w	800d8dc <HAL_RCC_GetSysClockFreq+0x11c>
 800d7d0:	2a18      	cmp	r2, #24
 800d7d2:	d00c      	beq.n	800d7ee <HAL_RCC_GetSysClockFreq+0x2e>
 800d7d4:	2a00      	cmp	r2, #0
 800d7d6:	f040 8083 	bne.w	800d8e0 <HAL_RCC_GetSysClockFreq+0x120>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d7da:	681a      	ldr	r2, [r3, #0]
 800d7dc:	4842      	ldr	r0, [pc, #264]	; (800d8e8 <HAL_RCC_GetSysClockFreq+0x128>)
 800d7de:	f012 0f20 	tst.w	r2, #32
 800d7e2:	d003      	beq.n	800d7ec <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800d7ea:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800d7ec:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d7ee:	6a99      	ldr	r1, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800d7f0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d7f2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
      if (pllm != 0U)
 800d7f4:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800d7f8:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d7fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      if (pllm != 0U)
 800d7fe:	d0f5      	beq.n	800d7ec <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d800:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d804:	f004 0401 	and.w	r4, r4, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d808:	ee07 0a90 	vmov	s15, r0
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d80c:	f001 0103 	and.w	r1, r1, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d810:	4362      	muls	r2, r4
 800d812:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d816:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d81a:	2901      	cmp	r1, #1
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d81c:	ee07 2a90 	vmov	s15, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d820:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 800d824:	d04c      	beq.n	800d8c0 <HAL_RCC_GetSysClockFreq+0x100>
 800d826:	2902      	cmp	r1, #2
 800d828:	d03c      	beq.n	800d8a4 <HAL_RCC_GetSysClockFreq+0xe4>
 800d82a:	2900      	cmp	r1, #0
 800d82c:	d148      	bne.n	800d8c0 <HAL_RCC_GetSysClockFreq+0x100>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d82e:	681a      	ldr	r2, [r3, #0]
 800d830:	0692      	lsls	r2, r2, #26
 800d832:	d527      	bpl.n	800d884 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d834:	6819      	ldr	r1, [r3, #0]
 800d836:	4a2c      	ldr	r2, [pc, #176]	; (800d8e8 <HAL_RCC_GetSysClockFreq+0x128>)
 800d838:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d83c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d83e:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d844:	ee07 2a10 	vmov	s14, r2
 800d848:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 800d84c:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 800d850:	ee06 3a90 	vmov	s13, r3
 800d854:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d858:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d85c:	ee77 7a86 	vadd.f32	s15, s15, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800d860:	4b20      	ldr	r3, [pc, #128]	; (800d8e4 <HAL_RCC_GetSysClockFreq+0x124>)
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d862:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800d866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d868:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800d86c:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800d86e:	ee07 3a10 	vmov	s14, r3
 800d872:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800d876:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d87a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800d87e:	ee17 0a90 	vmov	r0, s15
 800d882:	e7b3      	b.n	800d7ec <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d88a:	ee07 3a10 	vmov	s14, r3
 800d88e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d892:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d896:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d89a:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800d8ec <HAL_RCC_GetSysClockFreq+0x12c>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d89e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d8a2:	e7dd      	b.n	800d860 <HAL_RCC_GetSysClockFreq+0xa0>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d8a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8aa:	ee07 3a10 	vmov	s14, r3
 800d8ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d8b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d8b6:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d8ba:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 800d8f0 <HAL_RCC_GetSysClockFreq+0x130>
 800d8be:	e7ee      	b.n	800d89e <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d8c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8c6:	ee07 3a10 	vmov	s14, r3
 800d8ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d8ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d8d2:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d8d6:	ed9f 6a07 	vldr	s12, [pc, #28]	; 800d8f4 <HAL_RCC_GetSysClockFreq+0x134>
 800d8da:	e7e0      	b.n	800d89e <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d8dc:	4806      	ldr	r0, [pc, #24]	; (800d8f8 <HAL_RCC_GetSysClockFreq+0x138>)
 800d8de:	e785      	b.n	800d7ec <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 800d8e0:	4806      	ldr	r0, [pc, #24]	; (800d8fc <HAL_RCC_GetSysClockFreq+0x13c>)
 800d8e2:	e783      	b.n	800d7ec <HAL_RCC_GetSysClockFreq+0x2c>
 800d8e4:	58024400 	.word	0x58024400
 800d8e8:	03d09000 	.word	0x03d09000
 800d8ec:	4c742400 	.word	0x4c742400
 800d8f0:	4bbebc20 	.word	0x4bbebc20
 800d8f4:	4a742400 	.word	0x4a742400
 800d8f8:	017d7840 	.word	0x017d7840
 800d8fc:	003d0900 	.word	0x003d0900

0800d900 <HAL_RCC_ClockConfig>:
{
 800d900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d904:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800d906:	4604      	mov	r4, r0
 800d908:	b910      	cbnz	r0, 800d910 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800d90a:	2001      	movs	r0, #1
}
 800d90c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d910:	4a88      	ldr	r2, [pc, #544]	; (800db34 <HAL_RCC_ClockConfig+0x234>)
 800d912:	6813      	ldr	r3, [r2, #0]
 800d914:	f003 030f 	and.w	r3, r3, #15
 800d918:	428b      	cmp	r3, r1
 800d91a:	f0c0 8093 	bcc.w	800da44 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d91e:	6823      	ldr	r3, [r4, #0]
 800d920:	075f      	lsls	r7, r3, #29
 800d922:	f100 809b 	bmi.w	800da5c <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d926:	071e      	lsls	r6, r3, #28
 800d928:	d50b      	bpl.n	800d942 <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d92a:	4983      	ldr	r1, [pc, #524]	; (800db38 <HAL_RCC_ClockConfig+0x238>)
 800d92c:	6966      	ldr	r6, [r4, #20]
 800d92e:	69c8      	ldr	r0, [r1, #28]
 800d930:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800d934:	4286      	cmp	r6, r0
 800d936:	d904      	bls.n	800d942 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d938:	69ca      	ldr	r2, [r1, #28]
 800d93a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d93e:	4332      	orrs	r2, r6
 800d940:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d942:	06d8      	lsls	r0, r3, #27
 800d944:	d50b      	bpl.n	800d95e <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d946:	497c      	ldr	r1, [pc, #496]	; (800db38 <HAL_RCC_ClockConfig+0x238>)
 800d948:	69a6      	ldr	r6, [r4, #24]
 800d94a:	69c8      	ldr	r0, [r1, #28]
 800d94c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800d950:	4286      	cmp	r6, r0
 800d952:	d904      	bls.n	800d95e <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d954:	69ca      	ldr	r2, [r1, #28]
 800d956:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d95a:	4332      	orrs	r2, r6
 800d95c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d95e:	0699      	lsls	r1, r3, #26
 800d960:	d50b      	bpl.n	800d97a <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d962:	4975      	ldr	r1, [pc, #468]	; (800db38 <HAL_RCC_ClockConfig+0x238>)
 800d964:	69e6      	ldr	r6, [r4, #28]
 800d966:	6a08      	ldr	r0, [r1, #32]
 800d968:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800d96c:	4286      	cmp	r6, r0
 800d96e:	d904      	bls.n	800d97a <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d970:	6a0a      	ldr	r2, [r1, #32]
 800d972:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d976:	4332      	orrs	r2, r6
 800d978:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d97a:	079a      	lsls	r2, r3, #30
 800d97c:	d50b      	bpl.n	800d996 <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d97e:	496e      	ldr	r1, [pc, #440]	; (800db38 <HAL_RCC_ClockConfig+0x238>)
 800d980:	68e6      	ldr	r6, [r4, #12]
 800d982:	6988      	ldr	r0, [r1, #24]
 800d984:	f000 000f 	and.w	r0, r0, #15
 800d988:	4286      	cmp	r6, r0
 800d98a:	d904      	bls.n	800d996 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d98c:	698a      	ldr	r2, [r1, #24]
 800d98e:	f022 020f 	bic.w	r2, r2, #15
 800d992:	4332      	orrs	r2, r6
 800d994:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d996:	07df      	lsls	r7, r3, #31
 800d998:	d46e      	bmi.n	800da78 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d99a:	6823      	ldr	r3, [r4, #0]
 800d99c:	079e      	lsls	r6, r3, #30
 800d99e:	f100 80a1 	bmi.w	800dae4 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d9a2:	4964      	ldr	r1, [pc, #400]	; (800db34 <HAL_RCC_ClockConfig+0x234>)
 800d9a4:	680a      	ldr	r2, [r1, #0]
 800d9a6:	f002 020f 	and.w	r2, r2, #15
 800d9aa:	42aa      	cmp	r2, r5
 800d9ac:	f200 80a8 	bhi.w	800db00 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d9b0:	0758      	lsls	r0, r3, #29
 800d9b2:	f100 80b1 	bmi.w	800db18 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d9b6:	0719      	lsls	r1, r3, #28
 800d9b8:	d50b      	bpl.n	800d9d2 <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d9ba:	495f      	ldr	r1, [pc, #380]	; (800db38 <HAL_RCC_ClockConfig+0x238>)
 800d9bc:	6965      	ldr	r5, [r4, #20]
 800d9be:	69c8      	ldr	r0, [r1, #28]
 800d9c0:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800d9c4:	4285      	cmp	r5, r0
 800d9c6:	d204      	bcs.n	800d9d2 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d9c8:	69ca      	ldr	r2, [r1, #28]
 800d9ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d9ce:	432a      	orrs	r2, r5
 800d9d0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d9d2:	06da      	lsls	r2, r3, #27
 800d9d4:	d50b      	bpl.n	800d9ee <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d9d6:	4958      	ldr	r1, [pc, #352]	; (800db38 <HAL_RCC_ClockConfig+0x238>)
 800d9d8:	69a5      	ldr	r5, [r4, #24]
 800d9da:	69c8      	ldr	r0, [r1, #28]
 800d9dc:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800d9e0:	4285      	cmp	r5, r0
 800d9e2:	d204      	bcs.n	800d9ee <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d9e4:	69ca      	ldr	r2, [r1, #28]
 800d9e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d9ea:	432a      	orrs	r2, r5
 800d9ec:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d9ee:	069b      	lsls	r3, r3, #26
 800d9f0:	d50b      	bpl.n	800da0a <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d9f2:	4a51      	ldr	r2, [pc, #324]	; (800db38 <HAL_RCC_ClockConfig+0x238>)
 800d9f4:	69e0      	ldr	r0, [r4, #28]
 800d9f6:	6a11      	ldr	r1, [r2, #32]
 800d9f8:	f001 0170 	and.w	r1, r1, #112	; 0x70
 800d9fc:	4288      	cmp	r0, r1
 800d9fe:	d204      	bcs.n	800da0a <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800da00:	6a13      	ldr	r3, [r2, #32]
 800da02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da06:	4303      	orrs	r3, r0
 800da08:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800da0a:	f7ff fed9 	bl	800d7c0 <HAL_RCC_GetSysClockFreq>
 800da0e:	494a      	ldr	r1, [pc, #296]	; (800db38 <HAL_RCC_ClockConfig+0x238>)
 800da10:	4a4a      	ldr	r2, [pc, #296]	; (800db3c <HAL_RCC_ClockConfig+0x23c>)
 800da12:	698b      	ldr	r3, [r1, #24]
 800da14:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800da18:	5cd3      	ldrb	r3, [r2, r3]
 800da1a:	f003 031f 	and.w	r3, r3, #31
 800da1e:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800da20:	698b      	ldr	r3, [r1, #24]
 800da22:	f003 030f 	and.w	r3, r3, #15
 800da26:	5cd3      	ldrb	r3, [r2, r3]
 800da28:	4a45      	ldr	r2, [pc, #276]	; (800db40 <HAL_RCC_ClockConfig+0x240>)
 800da2a:	f003 031f 	and.w	r3, r3, #31
 800da2e:	fa20 f303 	lsr.w	r3, r0, r3
 800da32:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800da34:	4b43      	ldr	r3, [pc, #268]	; (800db44 <HAL_RCC_ClockConfig+0x244>)
 800da36:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 800da38:	4b43      	ldr	r3, [pc, #268]	; (800db48 <HAL_RCC_ClockConfig+0x248>)
}
 800da3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800da3e:	6818      	ldr	r0, [r3, #0]
 800da40:	f7f3 bcd6 	b.w	80013f0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800da44:	6813      	ldr	r3, [r2, #0]
 800da46:	f023 030f 	bic.w	r3, r3, #15
 800da4a:	430b      	orrs	r3, r1
 800da4c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800da4e:	6813      	ldr	r3, [r2, #0]
 800da50:	f003 030f 	and.w	r3, r3, #15
 800da54:	428b      	cmp	r3, r1
 800da56:	f47f af58 	bne.w	800d90a <HAL_RCC_ClockConfig+0xa>
 800da5a:	e760      	b.n	800d91e <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800da5c:	4936      	ldr	r1, [pc, #216]	; (800db38 <HAL_RCC_ClockConfig+0x238>)
 800da5e:	6926      	ldr	r6, [r4, #16]
 800da60:	6988      	ldr	r0, [r1, #24]
 800da62:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800da66:	4286      	cmp	r6, r0
 800da68:	f67f af5d 	bls.w	800d926 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800da6c:	698a      	ldr	r2, [r1, #24]
 800da6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800da72:	4332      	orrs	r2, r6
 800da74:	618a      	str	r2, [r1, #24]
 800da76:	e756      	b.n	800d926 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800da78:	4b2f      	ldr	r3, [pc, #188]	; (800db38 <HAL_RCC_ClockConfig+0x238>)
 800da7a:	68a1      	ldr	r1, [r4, #8]
 800da7c:	699a      	ldr	r2, [r3, #24]
 800da7e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800da82:	430a      	orrs	r2, r1
 800da84:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800da86:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800da88:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800da8a:	2a02      	cmp	r2, #2
 800da8c:	d11d      	bne.n	800daca <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800da8e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800da92:	f43f af3a 	beq.w	800d90a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800da96:	4e28      	ldr	r6, [pc, #160]	; (800db38 <HAL_RCC_ClockConfig+0x238>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800da98:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800da9c:	6933      	ldr	r3, [r6, #16]
 800da9e:	f023 0307 	bic.w	r3, r3, #7
 800daa2:	4313      	orrs	r3, r2
 800daa4:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 800daa6:	f7fd fab3 	bl	800b010 <HAL_GetTick>
 800daaa:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800daac:	6933      	ldr	r3, [r6, #16]
 800daae:	6862      	ldr	r2, [r4, #4]
 800dab0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dab4:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800dab8:	f43f af6f 	beq.w	800d99a <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dabc:	f7fd faa8 	bl	800b010 <HAL_GetTick>
 800dac0:	1bc0      	subs	r0, r0, r7
 800dac2:	4540      	cmp	r0, r8
 800dac4:	d9f2      	bls.n	800daac <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 800dac6:	2003      	movs	r0, #3
 800dac8:	e720      	b.n	800d90c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800daca:	2a03      	cmp	r2, #3
 800dacc:	d102      	bne.n	800dad4 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800dace:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800dad2:	e7de      	b.n	800da92 <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800dad4:	2a01      	cmp	r2, #1
 800dad6:	d102      	bne.n	800dade <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800dad8:	f413 7f80 	tst.w	r3, #256	; 0x100
 800dadc:	e7d9      	b.n	800da92 <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dade:	f013 0f04 	tst.w	r3, #4
 800dae2:	e7d6      	b.n	800da92 <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800dae4:	4914      	ldr	r1, [pc, #80]	; (800db38 <HAL_RCC_ClockConfig+0x238>)
 800dae6:	68e6      	ldr	r6, [r4, #12]
 800dae8:	6988      	ldr	r0, [r1, #24]
 800daea:	f000 000f 	and.w	r0, r0, #15
 800daee:	4286      	cmp	r6, r0
 800daf0:	f4bf af57 	bcs.w	800d9a2 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800daf4:	698a      	ldr	r2, [r1, #24]
 800daf6:	f022 020f 	bic.w	r2, r2, #15
 800dafa:	4332      	orrs	r2, r6
 800dafc:	618a      	str	r2, [r1, #24]
 800dafe:	e750      	b.n	800d9a2 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800db00:	680a      	ldr	r2, [r1, #0]
 800db02:	f022 020f 	bic.w	r2, r2, #15
 800db06:	432a      	orrs	r2, r5
 800db08:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800db0a:	680a      	ldr	r2, [r1, #0]
 800db0c:	f002 020f 	and.w	r2, r2, #15
 800db10:	42aa      	cmp	r2, r5
 800db12:	f47f aefa 	bne.w	800d90a <HAL_RCC_ClockConfig+0xa>
 800db16:	e74b      	b.n	800d9b0 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800db18:	4907      	ldr	r1, [pc, #28]	; (800db38 <HAL_RCC_ClockConfig+0x238>)
 800db1a:	6925      	ldr	r5, [r4, #16]
 800db1c:	6988      	ldr	r0, [r1, #24]
 800db1e:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800db22:	4285      	cmp	r5, r0
 800db24:	f4bf af47 	bcs.w	800d9b6 <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800db28:	698a      	ldr	r2, [r1, #24]
 800db2a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800db2e:	432a      	orrs	r2, r5
 800db30:	618a      	str	r2, [r1, #24]
 800db32:	e740      	b.n	800d9b6 <HAL_RCC_ClockConfig+0xb6>
 800db34:	52002000 	.word	0x52002000
 800db38:	58024400 	.word	0x58024400
 800db3c:	080256e8 	.word	0x080256e8
 800db40:	2400004c 	.word	0x2400004c
 800db44:	24000048 	.word	0x24000048
 800db48:	24000054 	.word	0x24000054

0800db4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800db4c:	b510      	push	{r4, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800db4e:	4c0c      	ldr	r4, [pc, #48]	; (800db80 <HAL_RCC_GetHCLKFreq+0x34>)
 800db50:	f7ff fe36 	bl	800d7c0 <HAL_RCC_GetSysClockFreq>
 800db54:	490b      	ldr	r1, [pc, #44]	; (800db84 <HAL_RCC_GetHCLKFreq+0x38>)
 800db56:	69a3      	ldr	r3, [r4, #24]
 800db58:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800db5c:	5cca      	ldrb	r2, [r1, r3]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800db5e:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800db60:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800db64:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800db68:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800db6c:	5ccb      	ldrb	r3, [r1, r3]
 800db6e:	f003 031f 	and.w	r3, r3, #31
 800db72:	fa22 f003 	lsr.w	r0, r2, r3
 800db76:	4b04      	ldr	r3, [pc, #16]	; (800db88 <HAL_RCC_GetHCLKFreq+0x3c>)
 800db78:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800db7a:	4b04      	ldr	r3, [pc, #16]	; (800db8c <HAL_RCC_GetHCLKFreq+0x40>)
 800db7c:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800db7e:	bd10      	pop	{r4, pc}
 800db80:	58024400 	.word	0x58024400
 800db84:	080256e8 	.word	0x080256e8
 800db88:	2400004c 	.word	0x2400004c
 800db8c:	24000048 	.word	0x24000048

0800db90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800db90:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800db92:	f7ff ffdb 	bl	800db4c <HAL_RCC_GetHCLKFreq>
 800db96:	4b05      	ldr	r3, [pc, #20]	; (800dbac <HAL_RCC_GetPCLK1Freq+0x1c>)
 800db98:	4a05      	ldr	r2, [pc, #20]	; (800dbb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800db9a:	69db      	ldr	r3, [r3, #28]
 800db9c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800dba0:	5cd3      	ldrb	r3, [r2, r3]
 800dba2:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800dba6:	40d8      	lsrs	r0, r3
 800dba8:	bd08      	pop	{r3, pc}
 800dbaa:	bf00      	nop
 800dbac:	58024400 	.word	0x58024400
 800dbb0:	080256e8 	.word	0x080256e8

0800dbb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800dbb4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800dbb6:	f7ff ffc9 	bl	800db4c <HAL_RCC_GetHCLKFreq>
 800dbba:	4b05      	ldr	r3, [pc, #20]	; (800dbd0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800dbbc:	4a05      	ldr	r2, [pc, #20]	; (800dbd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800dbbe:	69db      	ldr	r3, [r3, #28]
 800dbc0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800dbc4:	5cd3      	ldrb	r3, [r2, r3]
 800dbc6:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800dbca:	40d8      	lsrs	r0, r3
 800dbcc:	bd08      	pop	{r3, pc}
 800dbce:	bf00      	nop
 800dbd0:	58024400 	.word	0x58024400
 800dbd4:	080256e8 	.word	0x080256e8

0800dbd8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800dbd8:	233f      	movs	r3, #63	; 0x3f
 800dbda:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800dbdc:	4b11      	ldr	r3, [pc, #68]	; (800dc24 <HAL_RCC_GetClockConfig+0x4c>)
 800dbde:	691a      	ldr	r2, [r3, #16]
 800dbe0:	f002 0207 	and.w	r2, r2, #7
 800dbe4:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800dbe6:	699a      	ldr	r2, [r3, #24]
 800dbe8:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 800dbec:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800dbee:	699a      	ldr	r2, [r3, #24]
 800dbf0:	f002 020f 	and.w	r2, r2, #15
 800dbf4:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800dbf6:	699a      	ldr	r2, [r3, #24]
 800dbf8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800dbfc:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800dbfe:	69da      	ldr	r2, [r3, #28]
 800dc00:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800dc04:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800dc06:	69da      	ldr	r2, [r3, #28]
 800dc08:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800dc0c:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800dc0e:	6a1b      	ldr	r3, [r3, #32]
 800dc10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800dc14:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800dc16:	4b04      	ldr	r3, [pc, #16]	; (800dc28 <HAL_RCC_GetClockConfig+0x50>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	f003 030f 	and.w	r3, r3, #15
 800dc1e:	600b      	str	r3, [r1, #0]
}
 800dc20:	4770      	bx	lr
 800dc22:	bf00      	nop
 800dc24:	58024400 	.word	0x58024400
 800dc28:	52002000 	.word	0x52002000

0800dc2c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800dc2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dc2e:	4c3a      	ldr	r4, [pc, #232]	; (800dd18 <RCCEx_PLL2_Config+0xec>)
{
 800dc30:	4606      	mov	r6, r0
 800dc32:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dc34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dc36:	f003 0303 	and.w	r3, r3, #3
 800dc3a:	2b03      	cmp	r3, #3
 800dc3c:	d069      	beq.n	800dd12 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800dc3e:	6823      	ldr	r3, [r4, #0]
 800dc40:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800dc44:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc46:	f7fd f9e3 	bl	800b010 <HAL_GetTick>
 800dc4a:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dc4c:	6823      	ldr	r3, [r4, #0]
 800dc4e:	011a      	lsls	r2, r3, #4
 800dc50:	d44b      	bmi.n	800dcea <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800dc52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dc54:	6832      	ldr	r2, [r6, #0]
 800dc56:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800dc5a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800dc5e:	62a3      	str	r3, [r4, #40]	; 0x28
 800dc60:	68b3      	ldr	r3, [r6, #8]
 800dc62:	68f2      	ldr	r2, [r6, #12]
 800dc64:	3b01      	subs	r3, #1
 800dc66:	3a01      	subs	r2, #1
 800dc68:	025b      	lsls	r3, r3, #9
 800dc6a:	0412      	lsls	r2, r2, #16
 800dc6c:	b29b      	uxth	r3, r3
 800dc6e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800dc72:	4313      	orrs	r3, r2
 800dc74:	6872      	ldr	r2, [r6, #4]
 800dc76:	3a01      	subs	r2, #1
 800dc78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dc7c:	4313      	orrs	r3, r2
 800dc7e:	6932      	ldr	r2, [r6, #16]
 800dc80:	3a01      	subs	r2, #1
 800dc82:	0612      	lsls	r2, r2, #24
 800dc84:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800dc88:	4313      	orrs	r3, r2
 800dc8a:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800dc8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800dc8e:	6972      	ldr	r2, [r6, #20]
 800dc90:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800dc94:	4313      	orrs	r3, r2
 800dc96:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800dc98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800dc9a:	69b2      	ldr	r2, [r6, #24]
 800dc9c:	f023 0320 	bic.w	r3, r3, #32
 800dca0:	4313      	orrs	r3, r2
 800dca2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800dca4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800dca6:	f023 0310 	bic.w	r3, r3, #16
 800dcaa:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800dcac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dcae:	69f2      	ldr	r2, [r6, #28]
 800dcb0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dcb4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800dcb8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800dcbc:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800dcbe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800dcc0:	f043 0310 	orr.w	r3, r3, #16
 800dcc4:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800dcc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800dcc8:	b9b5      	cbnz	r5, 800dcf8 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800dcca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800dcce:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800dcd0:	4c11      	ldr	r4, [pc, #68]	; (800dd18 <RCCEx_PLL2_Config+0xec>)
 800dcd2:	6823      	ldr	r3, [r4, #0]
 800dcd4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dcd8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dcda:	f7fd f999 	bl	800b010 <HAL_GetTick>
 800dcde:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dce0:	6823      	ldr	r3, [r4, #0]
 800dce2:	011b      	lsls	r3, r3, #4
 800dce4:	d50f      	bpl.n	800dd06 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 800dce6:	2000      	movs	r0, #0
 800dce8:	e005      	b.n	800dcf6 <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dcea:	f7fd f991 	bl	800b010 <HAL_GetTick>
 800dcee:	1bc0      	subs	r0, r0, r7
 800dcf0:	2802      	cmp	r0, #2
 800dcf2:	d9ab      	bls.n	800dc4c <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 800dcf4:	2003      	movs	r0, #3
}
 800dcf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800dcf8:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800dcfa:	bf0c      	ite	eq
 800dcfc:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800dd00:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800dd04:	e7e3      	b.n	800dcce <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dd06:	f7fd f983 	bl	800b010 <HAL_GetTick>
 800dd0a:	1b40      	subs	r0, r0, r5
 800dd0c:	2802      	cmp	r0, #2
 800dd0e:	d9e7      	bls.n	800dce0 <RCCEx_PLL2_Config+0xb4>
 800dd10:	e7f0      	b.n	800dcf4 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 800dd12:	2001      	movs	r0, #1
 800dd14:	e7ef      	b.n	800dcf6 <RCCEx_PLL2_Config+0xca>
 800dd16:	bf00      	nop
 800dd18:	58024400 	.word	0x58024400

0800dd1c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800dd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dd1e:	4c3a      	ldr	r4, [pc, #232]	; (800de08 <RCCEx_PLL3_Config+0xec>)
{
 800dd20:	4606      	mov	r6, r0
 800dd22:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dd24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dd26:	f003 0303 	and.w	r3, r3, #3
 800dd2a:	2b03      	cmp	r3, #3
 800dd2c:	d069      	beq.n	800de02 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800dd2e:	6823      	ldr	r3, [r4, #0]
 800dd30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dd34:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dd36:	f7fd f96b 	bl	800b010 <HAL_GetTick>
 800dd3a:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dd3c:	6823      	ldr	r3, [r4, #0]
 800dd3e:	009a      	lsls	r2, r3, #2
 800dd40:	d44b      	bmi.n	800ddda <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800dd42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dd44:	6832      	ldr	r2, [r6, #0]
 800dd46:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800dd4a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800dd4e:	62a3      	str	r3, [r4, #40]	; 0x28
 800dd50:	68b3      	ldr	r3, [r6, #8]
 800dd52:	68f2      	ldr	r2, [r6, #12]
 800dd54:	3b01      	subs	r3, #1
 800dd56:	3a01      	subs	r2, #1
 800dd58:	025b      	lsls	r3, r3, #9
 800dd5a:	0412      	lsls	r2, r2, #16
 800dd5c:	b29b      	uxth	r3, r3
 800dd5e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800dd62:	4313      	orrs	r3, r2
 800dd64:	6872      	ldr	r2, [r6, #4]
 800dd66:	3a01      	subs	r2, #1
 800dd68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dd6c:	4313      	orrs	r3, r2
 800dd6e:	6932      	ldr	r2, [r6, #16]
 800dd70:	3a01      	subs	r2, #1
 800dd72:	0612      	lsls	r2, r2, #24
 800dd74:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800dd78:	4313      	orrs	r3, r2
 800dd7a:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800dd7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800dd7e:	6972      	ldr	r2, [r6, #20]
 800dd80:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800dd84:	4313      	orrs	r3, r2
 800dd86:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800dd88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800dd8a:	69b2      	ldr	r2, [r6, #24]
 800dd8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dd90:	4313      	orrs	r3, r2
 800dd92:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800dd94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800dd96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dd9a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800dd9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dd9e:	69f2      	ldr	r2, [r6, #28]
 800dda0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dda4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800dda8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800ddac:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ddae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ddb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ddb4:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ddb6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800ddb8:	b9b5      	cbnz	r5, 800dde8 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ddba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ddbe:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ddc0:	4c11      	ldr	r4, [pc, #68]	; (800de08 <RCCEx_PLL3_Config+0xec>)
 800ddc2:	6823      	ldr	r3, [r4, #0]
 800ddc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ddc8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ddca:	f7fd f921 	bl	800b010 <HAL_GetTick>
 800ddce:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ddd0:	6823      	ldr	r3, [r4, #0]
 800ddd2:	009b      	lsls	r3, r3, #2
 800ddd4:	d50f      	bpl.n	800ddf6 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 800ddd6:	2000      	movs	r0, #0
 800ddd8:	e005      	b.n	800dde6 <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ddda:	f7fd f919 	bl	800b010 <HAL_GetTick>
 800ddde:	1bc0      	subs	r0, r0, r7
 800dde0:	2802      	cmp	r0, #2
 800dde2:	d9ab      	bls.n	800dd3c <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 800dde4:	2003      	movs	r0, #3
}
 800dde6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800dde8:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ddea:	bf0c      	ite	eq
 800ddec:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ddf0:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800ddf4:	e7e3      	b.n	800ddbe <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ddf6:	f7fd f90b 	bl	800b010 <HAL_GetTick>
 800ddfa:	1b40      	subs	r0, r0, r5
 800ddfc:	2802      	cmp	r0, #2
 800ddfe:	d9e7      	bls.n	800ddd0 <RCCEx_PLL3_Config+0xb4>
 800de00:	e7f0      	b.n	800dde4 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 800de02:	2001      	movs	r0, #1
 800de04:	e7ef      	b.n	800dde6 <RCCEx_PLL3_Config+0xca>
 800de06:	bf00      	nop
 800de08:	58024400 	.word	0x58024400

0800de0c <HAL_RCCEx_PeriphCLKConfig>:
{
 800de0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800de10:	6803      	ldr	r3, [r0, #0]
{
 800de12:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800de14:	011c      	lsls	r4, r3, #4
 800de16:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 800de1a:	d509      	bpl.n	800de30 <HAL_RCCEx_PeriphCLKConfig+0x24>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800de1c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800de1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800de22:	d02e      	beq.n	800de82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800de24:	d813      	bhi.n	800de4e <HAL_RCCEx_PeriphCLKConfig+0x42>
 800de26:	b1f3      	cbz	r3, 800de66 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800de28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800de2c:	d021      	beq.n	800de72 <HAL_RCCEx_PeriphCLKConfig+0x66>
 800de2e:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800de30:	682b      	ldr	r3, [r5, #0]
 800de32:	05d8      	lsls	r0, r3, #23
 800de34:	f140 8104 	bpl.w	800e040 <HAL_RCCEx_PeriphCLKConfig+0x234>
    switch (PeriphClkInit->Sai1ClockSelection)
 800de38:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800de3a:	2b04      	cmp	r3, #4
 800de3c:	f200 80ff 	bhi.w	800e03e <HAL_RCCEx_PeriphCLKConfig+0x232>
 800de40:	e8df f013 	tbh	[pc, r3, lsl #1]
 800de44:	002b0024 	.word	0x002b0024
 800de48:	002900f7 	.word	0x002900f7
 800de4c:	0029      	.short	0x0029
    switch (PeriphClkInit->SpdifrxClockSelection)
 800de4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800de52:	d1ec      	bne.n	800de2e <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800de54:	4aaa      	ldr	r2, [pc, #680]	; (800e100 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800de56:	2600      	movs	r6, #0
 800de58:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 800de5a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800de5c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800de60:	430b      	orrs	r3, r1
 800de62:	6513      	str	r3, [r2, #80]	; 0x50
 800de64:	e7e4      	b.n	800de30 <HAL_RCCEx_PeriphCLKConfig+0x24>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800de66:	4aa6      	ldr	r2, [pc, #664]	; (800e100 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800de68:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800de6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800de6e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800de70:	e7f0      	b.n	800de54 <HAL_RCCEx_PeriphCLKConfig+0x48>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800de72:	2102      	movs	r1, #2
 800de74:	3008      	adds	r0, #8
 800de76:	f7ff fed9 	bl	800dc2c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800de7a:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800de7c:	2800      	cmp	r0, #0
 800de7e:	d1d7      	bne.n	800de30 <HAL_RCCEx_PeriphCLKConfig+0x24>
 800de80:	e7e8      	b.n	800de54 <HAL_RCCEx_PeriphCLKConfig+0x48>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800de82:	2102      	movs	r1, #2
 800de84:	3028      	adds	r0, #40	; 0x28
 800de86:	f7ff ff49 	bl	800dd1c <RCCEx_PLL3_Config>
 800de8a:	e7f6      	b.n	800de7a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800de8c:	4a9c      	ldr	r2, [pc, #624]	; (800e100 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800de8e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800de90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800de94:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch (PeriphClkInit->Sai1ClockSelection)
 800de96:	4634      	mov	r4, r6
 800de98:	e005      	b.n	800dea6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800de9a:	2100      	movs	r1, #0
 800de9c:	f105 0008 	add.w	r0, r5, #8
 800dea0:	f7ff fec4 	bl	800dc2c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dea4:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800dea6:	2c00      	cmp	r4, #0
 800dea8:	f040 80cc 	bne.w	800e044 <HAL_RCCEx_PeriphCLKConfig+0x238>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800deac:	4a94      	ldr	r2, [pc, #592]	; (800e100 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800deae:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 800deb0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800deb2:	f023 0307 	bic.w	r3, r3, #7
 800deb6:	430b      	orrs	r3, r1
 800deb8:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800deba:	682b      	ldr	r3, [r5, #0]
 800debc:	0599      	lsls	r1, r3, #22
 800debe:	d50d      	bpl.n	800dedc <HAL_RCCEx_PeriphCLKConfig+0xd0>
    switch (PeriphClkInit->Sai23ClockSelection)
 800dec0:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800dec2:	2b80      	cmp	r3, #128	; 0x80
 800dec4:	f000 80dc 	beq.w	800e080 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800dec8:	f200 80be 	bhi.w	800e048 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 800decc:	2b00      	cmp	r3, #0
 800dece:	f000 80ca 	beq.w	800e066 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800ded2:	2b40      	cmp	r3, #64	; 0x40
 800ded4:	f000 80cd 	beq.w	800e072 <HAL_RCCEx_PeriphCLKConfig+0x266>
 800ded8:	2601      	movs	r6, #1
 800deda:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800dedc:	682b      	ldr	r3, [r5, #0]
 800dede:	055a      	lsls	r2, r3, #21
 800dee0:	d510      	bpl.n	800df04 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    switch (PeriphClkInit->Sai4AClockSelection)
 800dee2:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 800dee6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800deea:	f000 80ef 	beq.w	800e0cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 800deee:	f200 80cf 	bhi.w	800e090 <HAL_RCCEx_PeriphCLKConfig+0x284>
 800def2:	2b00      	cmp	r3, #0
 800def4:	f000 80dd 	beq.w	800e0b2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800def8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800defc:	f000 80df 	beq.w	800e0be <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 800df00:	2601      	movs	r6, #1
 800df02:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800df04:	682b      	ldr	r3, [r5, #0]
 800df06:	051b      	lsls	r3, r3, #20
 800df08:	d510      	bpl.n	800df2c <HAL_RCCEx_PeriphCLKConfig+0x120>
    switch (PeriphClkInit->Sai4BClockSelection)
 800df0a:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 800df0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800df12:	f000 8104 	beq.w	800e11e <HAL_RCCEx_PeriphCLKConfig+0x312>
 800df16:	f200 80e1 	bhi.w	800e0dc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	f000 80f2 	beq.w	800e104 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800df20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800df24:	f000 80f4 	beq.w	800e110 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800df28:	2601      	movs	r6, #1
 800df2a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800df2c:	682b      	ldr	r3, [r5, #0]
 800df2e:	019f      	lsls	r7, r3, #6
 800df30:	d50d      	bpl.n	800df4e <HAL_RCCEx_PeriphCLKConfig+0x142>
    switch (PeriphClkInit->QspiClockSelection)
 800df32:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800df34:	2b20      	cmp	r3, #32
 800df36:	f000 810c 	beq.w	800e152 <HAL_RCCEx_PeriphCLKConfig+0x346>
 800df3a:	f200 80f8 	bhi.w	800e12e <HAL_RCCEx_PeriphCLKConfig+0x322>
 800df3e:	2b00      	cmp	r3, #0
 800df40:	f000 80f8 	beq.w	800e134 <HAL_RCCEx_PeriphCLKConfig+0x328>
 800df44:	2b10      	cmp	r3, #16
 800df46:	f000 80fe 	beq.w	800e146 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800df4a:	2601      	movs	r6, #1
 800df4c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800df4e:	682b      	ldr	r3, [r5, #0]
 800df50:	04d8      	lsls	r0, r3, #19
 800df52:	d50f      	bpl.n	800df74 <HAL_RCCEx_PeriphCLKConfig+0x168>
    switch (PeriphClkInit->Spi123ClockSelection)
 800df54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800df5a:	f000 8120 	beq.w	800e19e <HAL_RCCEx_PeriphCLKConfig+0x392>
 800df5e:	f200 8101 	bhi.w	800e164 <HAL_RCCEx_PeriphCLKConfig+0x358>
 800df62:	2b00      	cmp	r3, #0
 800df64:	f000 810e 	beq.w	800e184 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800df68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df6c:	f000 8110 	beq.w	800e190 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800df70:	2601      	movs	r6, #1
 800df72:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800df74:	682b      	ldr	r3, [r5, #0]
 800df76:	0499      	lsls	r1, r3, #18
 800df78:	d50f      	bpl.n	800df9a <HAL_RCCEx_PeriphCLKConfig+0x18e>
    switch (PeriphClkInit->Spi45ClockSelection)
 800df7a:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800df7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800df80:	f000 812e 	beq.w	800e1e0 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 800df84:	f200 8113 	bhi.w	800e1ae <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 800df88:	2b00      	cmp	r3, #0
 800df8a:	f000 8119 	beq.w	800e1c0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 800df8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df92:	f000 811e 	beq.w	800e1d2 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 800df96:	2601      	movs	r6, #1
 800df98:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800df9a:	682b      	ldr	r3, [r5, #0]
 800df9c:	045a      	lsls	r2, r3, #17
 800df9e:	d510      	bpl.n	800dfc2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch (PeriphClkInit->Spi6ClockSelection)
 800dfa0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
 800dfa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dfa8:	f000 813c 	beq.w	800e224 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800dfac:	f200 8120 	bhi.w	800e1f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	f000 8126 	beq.w	800e202 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 800dfb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dfba:	f000 812c 	beq.w	800e216 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800dfbe:	2601      	movs	r6, #1
 800dfc0:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800dfc2:	682b      	ldr	r3, [r5, #0]
 800dfc4:	015b      	lsls	r3, r3, #5
 800dfc6:	d515      	bpl.n	800dff4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch (PeriphClkInit->DsiClockSelection)
 800dfc8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800dfca:	b14b      	cbz	r3, 800dfe0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800dfcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dfd0:	f040 8130 	bne.w	800e234 <HAL_RCCEx_PeriphCLKConfig+0x428>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dfd4:	2101      	movs	r1, #1
 800dfd6:	f105 0008 	add.w	r0, r5, #8
 800dfda:	f7ff fe27 	bl	800dc2c <RCCEx_PLL2_Config>
 800dfde:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800dfe0:	2c00      	cmp	r4, #0
 800dfe2:	f040 812a 	bne.w	800e23a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800dfe6:	4a46      	ldr	r2, [pc, #280]	; (800e100 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800dfe8:	6d29      	ldr	r1, [r5, #80]	; 0x50
 800dfea:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800dfec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dff0:	430b      	orrs	r3, r1
 800dff2:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800dff4:	682b      	ldr	r3, [r5, #0]
 800dff6:	041f      	lsls	r7, r3, #16
 800dff8:	d50d      	bpl.n	800e016 <HAL_RCCEx_PeriphCLKConfig+0x20a>
    switch (PeriphClkInit->FdcanClockSelection)
 800dffa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800dffc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e000:	f000 811d 	beq.w	800e23e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800e004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e008:	f000 8127 	beq.w	800e25a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	f000 811b 	beq.w	800e248 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 800e012:	2601      	movs	r6, #1
 800e014:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e016:	682b      	ldr	r3, [r5, #0]
 800e018:	01d8      	lsls	r0, r3, #7
 800e01a:	f140 8135 	bpl.w	800e288 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    switch (PeriphClkInit->FmcClockSelection)
 800e01e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800e020:	2b03      	cmp	r3, #3
 800e022:	f200 8176 	bhi.w	800e312 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800e026:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e02a:	0126      	.short	0x0126
 800e02c:	016d0121 	.word	0x016d0121
 800e030:	0126      	.short	0x0126
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e032:	2100      	movs	r1, #0
 800e034:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e038:	f7ff fe70 	bl	800dd1c <RCCEx_PLL3_Config>
 800e03c:	e732      	b.n	800dea4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    switch (PeriphClkInit->Sai1ClockSelection)
 800e03e:	2601      	movs	r6, #1
 800e040:	4634      	mov	r4, r6
 800e042:	e73a      	b.n	800deba <HAL_RCCEx_PeriphCLKConfig+0xae>
 800e044:	4626      	mov	r6, r4
 800e046:	e738      	b.n	800deba <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch (PeriphClkInit->Sai23ClockSelection)
 800e048:	2bc0      	cmp	r3, #192	; 0xc0
 800e04a:	d003      	beq.n	800e054 <HAL_RCCEx_PeriphCLKConfig+0x248>
 800e04c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e050:	f47f af42 	bne.w	800ded8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    if (ret == HAL_OK)
 800e054:	b9d4      	cbnz	r4, 800e08c <HAL_RCCEx_PeriphCLKConfig+0x280>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800e056:	4a2a      	ldr	r2, [pc, #168]	; (800e100 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e058:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800e05a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800e05c:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 800e060:	430b      	orrs	r3, r1
 800e062:	6513      	str	r3, [r2, #80]	; 0x50
 800e064:	e73a      	b.n	800dedc <HAL_RCCEx_PeriphCLKConfig+0xd0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e066:	4a26      	ldr	r2, [pc, #152]	; (800e100 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e068:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800e06a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e06e:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800e070:	e7f0      	b.n	800e054 <HAL_RCCEx_PeriphCLKConfig+0x248>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e072:	2100      	movs	r1, #0
 800e074:	f105 0008 	add.w	r0, r5, #8
 800e078:	f7ff fdd8 	bl	800dc2c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e07c:	4604      	mov	r4, r0
        break;
 800e07e:	e7e9      	b.n	800e054 <HAL_RCCEx_PeriphCLKConfig+0x248>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e080:	2100      	movs	r1, #0
 800e082:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e086:	f7ff fe49 	bl	800dd1c <RCCEx_PLL3_Config>
 800e08a:	e7f7      	b.n	800e07c <HAL_RCCEx_PeriphCLKConfig+0x270>
 800e08c:	4626      	mov	r6, r4
 800e08e:	e725      	b.n	800dedc <HAL_RCCEx_PeriphCLKConfig+0xd0>
    switch (PeriphClkInit->Sai4AClockSelection)
 800e090:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e094:	d003      	beq.n	800e09e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800e096:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e09a:	f47f af31 	bne.w	800df00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    if (ret == HAL_OK)
 800e09e:	b9dc      	cbnz	r4, 800e0d8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800e0a0:	4a17      	ldr	r2, [pc, #92]	; (800e100 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e0a2:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 800e0a6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800e0a8:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800e0ac:	430b      	orrs	r3, r1
 800e0ae:	6593      	str	r3, [r2, #88]	; 0x58
 800e0b0:	e728      	b.n	800df04 <HAL_RCCEx_PeriphCLKConfig+0xf8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e0b2:	4a13      	ldr	r2, [pc, #76]	; (800e100 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e0b4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800e0b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e0ba:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800e0bc:	e7ef      	b.n	800e09e <HAL_RCCEx_PeriphCLKConfig+0x292>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e0be:	2100      	movs	r1, #0
 800e0c0:	f105 0008 	add.w	r0, r5, #8
 800e0c4:	f7ff fdb2 	bl	800dc2c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e0c8:	4604      	mov	r4, r0
        break;
 800e0ca:	e7e8      	b.n	800e09e <HAL_RCCEx_PeriphCLKConfig+0x292>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e0cc:	2100      	movs	r1, #0
 800e0ce:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e0d2:	f7ff fe23 	bl	800dd1c <RCCEx_PLL3_Config>
 800e0d6:	e7f7      	b.n	800e0c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800e0d8:	4626      	mov	r6, r4
 800e0da:	e713      	b.n	800df04 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    switch (PeriphClkInit->Sai4BClockSelection)
 800e0dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e0e0:	d003      	beq.n	800e0ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800e0e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e0e6:	f47f af1f 	bne.w	800df28 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    if (ret == HAL_OK)
 800e0ea:	b9f4      	cbnz	r4, 800e12a <HAL_RCCEx_PeriphCLKConfig+0x31e>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800e0ec:	4a04      	ldr	r2, [pc, #16]	; (800e100 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e0ee:	f8d5 10b0 	ldr.w	r1, [r5, #176]	; 0xb0
 800e0f2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800e0f4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800e0f8:	430b      	orrs	r3, r1
 800e0fa:	6593      	str	r3, [r2, #88]	; 0x58
 800e0fc:	e716      	b.n	800df2c <HAL_RCCEx_PeriphCLKConfig+0x120>
 800e0fe:	bf00      	nop
 800e100:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e104:	4aa1      	ldr	r2, [pc, #644]	; (800e38c <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800e106:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800e108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e10c:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800e10e:	e7ec      	b.n	800e0ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e110:	2100      	movs	r1, #0
 800e112:	f105 0008 	add.w	r0, r5, #8
 800e116:	f7ff fd89 	bl	800dc2c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e11a:	4604      	mov	r4, r0
        break;
 800e11c:	e7e5      	b.n	800e0ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e11e:	2100      	movs	r1, #0
 800e120:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e124:	f7ff fdfa 	bl	800dd1c <RCCEx_PLL3_Config>
 800e128:	e7f7      	b.n	800e11a <HAL_RCCEx_PeriphCLKConfig+0x30e>
 800e12a:	4626      	mov	r6, r4
 800e12c:	e6fe      	b.n	800df2c <HAL_RCCEx_PeriphCLKConfig+0x120>
    switch (PeriphClkInit->QspiClockSelection)
 800e12e:	2b30      	cmp	r3, #48	; 0x30
 800e130:	f47f af0b 	bne.w	800df4a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    if (ret == HAL_OK)
 800e134:	b9a4      	cbnz	r4, 800e160 <HAL_RCCEx_PeriphCLKConfig+0x354>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800e136:	4a95      	ldr	r2, [pc, #596]	; (800e38c <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800e138:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 800e13a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800e13c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800e140:	430b      	orrs	r3, r1
 800e142:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e144:	e703      	b.n	800df4e <HAL_RCCEx_PeriphCLKConfig+0x142>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e146:	4a91      	ldr	r2, [pc, #580]	; (800e38c <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800e148:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800e14a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e14e:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800e150:	e7f0      	b.n	800e134 <HAL_RCCEx_PeriphCLKConfig+0x328>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e152:	2102      	movs	r1, #2
 800e154:	f105 0008 	add.w	r0, r5, #8
 800e158:	f7ff fd68 	bl	800dc2c <RCCEx_PLL2_Config>
 800e15c:	4604      	mov	r4, r0
        break;
 800e15e:	e7e9      	b.n	800e134 <HAL_RCCEx_PeriphCLKConfig+0x328>
 800e160:	4626      	mov	r6, r4
 800e162:	e6f4      	b.n	800df4e <HAL_RCCEx_PeriphCLKConfig+0x142>
    switch (PeriphClkInit->Spi123ClockSelection)
 800e164:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e168:	d003      	beq.n	800e172 <HAL_RCCEx_PeriphCLKConfig+0x366>
 800e16a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e16e:	f47f aeff 	bne.w	800df70 <HAL_RCCEx_PeriphCLKConfig+0x164>
    if (ret == HAL_OK)
 800e172:	b9d4      	cbnz	r4, 800e1aa <HAL_RCCEx_PeriphCLKConfig+0x39e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800e174:	4a85      	ldr	r2, [pc, #532]	; (800e38c <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800e176:	6e69      	ldr	r1, [r5, #100]	; 0x64
 800e178:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800e17a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e17e:	430b      	orrs	r3, r1
 800e180:	6513      	str	r3, [r2, #80]	; 0x50
 800e182:	e6f7      	b.n	800df74 <HAL_RCCEx_PeriphCLKConfig+0x168>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e184:	4a81      	ldr	r2, [pc, #516]	; (800e38c <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800e186:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800e188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e18c:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800e18e:	e7f0      	b.n	800e172 <HAL_RCCEx_PeriphCLKConfig+0x366>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e190:	2100      	movs	r1, #0
 800e192:	f105 0008 	add.w	r0, r5, #8
 800e196:	f7ff fd49 	bl	800dc2c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e19a:	4604      	mov	r4, r0
        break;
 800e19c:	e7e9      	b.n	800e172 <HAL_RCCEx_PeriphCLKConfig+0x366>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e19e:	2100      	movs	r1, #0
 800e1a0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e1a4:	f7ff fdba 	bl	800dd1c <RCCEx_PLL3_Config>
 800e1a8:	e7f7      	b.n	800e19a <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800e1aa:	4626      	mov	r6, r4
 800e1ac:	e6e2      	b.n	800df74 <HAL_RCCEx_PeriphCLKConfig+0x168>
    switch (PeriphClkInit->Spi45ClockSelection)
 800e1ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e1b2:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800e1b6:	d003      	beq.n	800e1c0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 800e1b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e1bc:	f47f aeeb 	bne.w	800df96 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    if (ret == HAL_OK)
 800e1c0:	b9a4      	cbnz	r4, 800e1ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800e1c2:	4a72      	ldr	r2, [pc, #456]	; (800e38c <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800e1c4:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 800e1c6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800e1c8:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800e1cc:	430b      	orrs	r3, r1
 800e1ce:	6513      	str	r3, [r2, #80]	; 0x50
 800e1d0:	e6e3      	b.n	800df9a <HAL_RCCEx_PeriphCLKConfig+0x18e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e1d2:	2101      	movs	r1, #1
 800e1d4:	f105 0008 	add.w	r0, r5, #8
 800e1d8:	f7ff fd28 	bl	800dc2c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e1dc:	4604      	mov	r4, r0
        break;
 800e1de:	e7ef      	b.n	800e1c0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e1e0:	2101      	movs	r1, #1
 800e1e2:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e1e6:	f7ff fd99 	bl	800dd1c <RCCEx_PLL3_Config>
 800e1ea:	e7f7      	b.n	800e1dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800e1ec:	4626      	mov	r6, r4
 800e1ee:	e6d4      	b.n	800df9a <HAL_RCCEx_PeriphCLKConfig+0x18e>
    switch (PeriphClkInit->Spi6ClockSelection)
 800e1f0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800e1f4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800e1f8:	d003      	beq.n	800e202 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 800e1fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e1fe:	f47f aede 	bne.w	800dfbe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    if (ret == HAL_OK)
 800e202:	b9ac      	cbnz	r4, 800e230 <HAL_RCCEx_PeriphCLKConfig+0x424>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800e204:	4a61      	ldr	r2, [pc, #388]	; (800e38c <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800e206:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
 800e20a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800e20c:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800e210:	430b      	orrs	r3, r1
 800e212:	6593      	str	r3, [r2, #88]	; 0x58
 800e214:	e6d5      	b.n	800dfc2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e216:	2101      	movs	r1, #1
 800e218:	f105 0008 	add.w	r0, r5, #8
 800e21c:	f7ff fd06 	bl	800dc2c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e220:	4604      	mov	r4, r0
        break;
 800e222:	e7ee      	b.n	800e202 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e224:	2101      	movs	r1, #1
 800e226:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e22a:	f7ff fd77 	bl	800dd1c <RCCEx_PLL3_Config>
 800e22e:	e7f7      	b.n	800e220 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800e230:	4626      	mov	r6, r4
 800e232:	e6c6      	b.n	800dfc2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch (PeriphClkInit->DsiClockSelection)
 800e234:	2601      	movs	r6, #1
 800e236:	4634      	mov	r4, r6
 800e238:	e6dc      	b.n	800dff4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800e23a:	4626      	mov	r6, r4
 800e23c:	e6da      	b.n	800dff4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e23e:	4a53      	ldr	r2, [pc, #332]	; (800e38c <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800e240:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800e242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e246:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800e248:	b974      	cbnz	r4, 800e268 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e24a:	4a50      	ldr	r2, [pc, #320]	; (800e38c <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800e24c:	6f69      	ldr	r1, [r5, #116]	; 0x74
 800e24e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800e250:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800e254:	430b      	orrs	r3, r1
 800e256:	6513      	str	r3, [r2, #80]	; 0x50
 800e258:	e6dd      	b.n	800e016 <HAL_RCCEx_PeriphCLKConfig+0x20a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e25a:	2101      	movs	r1, #1
 800e25c:	f105 0008 	add.w	r0, r5, #8
 800e260:	f7ff fce4 	bl	800dc2c <RCCEx_PLL2_Config>
 800e264:	4604      	mov	r4, r0
        break;
 800e266:	e7ef      	b.n	800e248 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 800e268:	4626      	mov	r6, r4
 800e26a:	e6d4      	b.n	800e016 <HAL_RCCEx_PeriphCLKConfig+0x20a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e26c:	4a47      	ldr	r2, [pc, #284]	; (800e38c <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800e26e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800e270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e274:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800e276:	2c00      	cmp	r4, #0
 800e278:	d14e      	bne.n	800e318 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800e27a:	4a44      	ldr	r2, [pc, #272]	; (800e38c <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800e27c:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800e27e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800e280:	f023 0303 	bic.w	r3, r3, #3
 800e284:	430b      	orrs	r3, r1
 800e286:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e288:	682b      	ldr	r3, [r5, #0]
 800e28a:	0259      	lsls	r1, r3, #9
 800e28c:	d54e      	bpl.n	800e32c <HAL_RCCEx_PeriphCLKConfig+0x520>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e28e:	4f40      	ldr	r7, [pc, #256]	; (800e390 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e296:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800e298:	f7fc feba 	bl	800b010 <HAL_GetTick>
 800e29c:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	05da      	lsls	r2, r3, #23
 800e2a2:	d53b      	bpl.n	800e31c <HAL_RCCEx_PeriphCLKConfig+0x510>
    if (ret == HAL_OK)
 800e2a4:	2c00      	cmp	r4, #0
 800e2a6:	d16f      	bne.n	800e388 <HAL_RCCEx_PeriphCLKConfig+0x57c>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800e2a8:	4b38      	ldr	r3, [pc, #224]	; (800e38c <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800e2aa:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
 800e2ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e2b0:	4042      	eors	r2, r0
 800e2b2:	f412 7f40 	tst.w	r2, #768	; 0x300
 800e2b6:	d00b      	beq.n	800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e2b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800e2ba:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e2bc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800e2c0:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800e2c4:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e2c6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e2c8:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800e2cc:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800e2ce:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800e2d0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800e2d4:	d043      	beq.n	800e35e <HAL_RCCEx_PeriphCLKConfig+0x552>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e2d6:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
 800e2da:	492c      	ldr	r1, [pc, #176]	; (800e38c <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800e2dc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800e2e0:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800e2e4:	d14c      	bne.n	800e380 <HAL_RCCEx_PeriphCLKConfig+0x574>
 800e2e6:	6908      	ldr	r0, [r1, #16]
 800e2e8:	4a2a      	ldr	r2, [pc, #168]	; (800e394 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800e2ea:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 800e2ee:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800e2f2:	4302      	orrs	r2, r0
 800e2f4:	610a      	str	r2, [r1, #16]
 800e2f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e2fa:	4a24      	ldr	r2, [pc, #144]	; (800e38c <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800e2fc:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800e2fe:	430b      	orrs	r3, r1
 800e300:	6713      	str	r3, [r2, #112]	; 0x70
 800e302:	e013      	b.n	800e32c <HAL_RCCEx_PeriphCLKConfig+0x520>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e304:	2102      	movs	r1, #2
 800e306:	f105 0008 	add.w	r0, r5, #8
 800e30a:	f7ff fc8f 	bl	800dc2c <RCCEx_PLL2_Config>
 800e30e:	4604      	mov	r4, r0
        break;
 800e310:	e7b1      	b.n	800e276 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    switch (PeriphClkInit->FmcClockSelection)
 800e312:	2601      	movs	r6, #1
 800e314:	4634      	mov	r4, r6
 800e316:	e7b7      	b.n	800e288 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800e318:	4626      	mov	r6, r4
 800e31a:	e7b5      	b.n	800e288 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e31c:	f7fc fe78 	bl	800b010 <HAL_GetTick>
 800e320:	eba0 0008 	sub.w	r0, r0, r8
 800e324:	2864      	cmp	r0, #100	; 0x64
 800e326:	d9ba      	bls.n	800e29e <HAL_RCCEx_PeriphCLKConfig+0x492>
        ret = HAL_TIMEOUT;
 800e328:	2603      	movs	r6, #3
 800e32a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800e32c:	682b      	ldr	r3, [r5, #0]
 800e32e:	07d8      	lsls	r0, r3, #31
 800e330:	d50a      	bpl.n	800e348 <HAL_RCCEx_PeriphCLKConfig+0x53c>
    switch (PeriphClkInit->Usart16ClockSelection)
 800e332:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800e336:	2b10      	cmp	r3, #16
 800e338:	d045      	beq.n	800e3c6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 800e33a:	d82d      	bhi.n	800e398 <HAL_RCCEx_PeriphCLKConfig+0x58c>
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d031      	beq.n	800e3a4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800e340:	2b08      	cmp	r3, #8
 800e342:	d039      	beq.n	800e3b8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800e344:	2601      	movs	r6, #1
 800e346:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e348:	682b      	ldr	r3, [r5, #0]
 800e34a:	0799      	lsls	r1, r3, #30
 800e34c:	d551      	bpl.n	800e3f2 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800e34e:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800e350:	2b05      	cmp	r3, #5
 800e352:	d864      	bhi.n	800e41e <HAL_RCCEx_PeriphCLKConfig+0x612>
 800e354:	e8df f003 	tbb	[pc, r3]
 800e358:	455d3f45 	.word	0x455d3f45
 800e35c:	4545      	.short	0x4545
        tickstart = HAL_GetTick();
 800e35e:	f7fc fe57 	bl	800b010 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e362:	f8df 8028 	ldr.w	r8, [pc, #40]	; 800e38c <HAL_RCCEx_PeriphCLKConfig+0x580>
        tickstart = HAL_GetTick();
 800e366:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e368:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e36c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800e370:	079b      	lsls	r3, r3, #30
 800e372:	d4b0      	bmi.n	800e2d6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e374:	f7fc fe4c 	bl	800b010 <HAL_GetTick>
 800e378:	1bc0      	subs	r0, r0, r7
 800e37a:	4548      	cmp	r0, r9
 800e37c:	d9f6      	bls.n	800e36c <HAL_RCCEx_PeriphCLKConfig+0x560>
 800e37e:	e7d3      	b.n	800e328 <HAL_RCCEx_PeriphCLKConfig+0x51c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e380:	690a      	ldr	r2, [r1, #16]
 800e382:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800e386:	e7b5      	b.n	800e2f4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
 800e388:	4626      	mov	r6, r4
 800e38a:	e7cf      	b.n	800e32c <HAL_RCCEx_PeriphCLKConfig+0x520>
 800e38c:	58024400 	.word	0x58024400
 800e390:	58024800 	.word	0x58024800
 800e394:	00ffffcf 	.word	0x00ffffcf
    switch (PeriphClkInit->Usart16ClockSelection)
 800e398:	f023 0208 	bic.w	r2, r3, #8
 800e39c:	2a20      	cmp	r2, #32
 800e39e:	d001      	beq.n	800e3a4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800e3a0:	2b18      	cmp	r3, #24
 800e3a2:	d1cf      	bne.n	800e344 <HAL_RCCEx_PeriphCLKConfig+0x538>
    if (ret == HAL_OK)
 800e3a4:	b9ac      	cbnz	r4, 800e3d2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800e3a6:	4a20      	ldr	r2, [pc, #128]	; (800e428 <HAL_RCCEx_PeriphCLKConfig+0x61c>)
 800e3a8:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 800e3ac:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800e3ae:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800e3b2:	430b      	orrs	r3, r1
 800e3b4:	6553      	str	r3, [r2, #84]	; 0x54
 800e3b6:	e7c7      	b.n	800e348 <HAL_RCCEx_PeriphCLKConfig+0x53c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e3b8:	2101      	movs	r1, #1
 800e3ba:	f105 0008 	add.w	r0, r5, #8
 800e3be:	f7ff fc35 	bl	800dc2c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e3c2:	4604      	mov	r4, r0
        break;
 800e3c4:	e7ee      	b.n	800e3a4 <HAL_RCCEx_PeriphCLKConfig+0x598>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e3c6:	2101      	movs	r1, #1
 800e3c8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e3cc:	f7ff fca6 	bl	800dd1c <RCCEx_PLL3_Config>
 800e3d0:	e7f7      	b.n	800e3c2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
 800e3d2:	4626      	mov	r6, r4
 800e3d4:	e7b8      	b.n	800e348 <HAL_RCCEx_PeriphCLKConfig+0x53c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e3d6:	2101      	movs	r1, #1
 800e3d8:	f105 0008 	add.w	r0, r5, #8
 800e3dc:	f7ff fc26 	bl	800dc2c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e3e0:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800e3e2:	b9fc      	cbnz	r4, 800e424 <HAL_RCCEx_PeriphCLKConfig+0x618>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800e3e4:	4a10      	ldr	r2, [pc, #64]	; (800e428 <HAL_RCCEx_PeriphCLKConfig+0x61c>)
 800e3e6:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 800e3e8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800e3ea:	f023 0307 	bic.w	r3, r3, #7
 800e3ee:	430b      	orrs	r3, r1
 800e3f0:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e3f2:	682b      	ldr	r3, [r5, #0]
 800e3f4:	075a      	lsls	r2, r3, #29
 800e3f6:	d52a      	bpl.n	800e44e <HAL_RCCEx_PeriphCLKConfig+0x642>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800e3f8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800e3fc:	2b05      	cmp	r3, #5
 800e3fe:	f200 817b 	bhi.w	800e6f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800e402:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e406:	0019      	.short	0x0019
 800e408:	01730013 	.word	0x01730013
 800e40c:	00190019 	.word	0x00190019
 800e410:	0019      	.short	0x0019
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e412:	2101      	movs	r1, #1
 800e414:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e418:	f7ff fc80 	bl	800dd1c <RCCEx_PLL3_Config>
 800e41c:	e7e0      	b.n	800e3e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800e41e:	2601      	movs	r6, #1
 800e420:	4634      	mov	r4, r6
 800e422:	e7e6      	b.n	800e3f2 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 800e424:	4626      	mov	r6, r4
 800e426:	e7e4      	b.n	800e3f2 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 800e428:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e42c:	2101      	movs	r1, #1
 800e42e:	f105 0008 	add.w	r0, r5, #8
 800e432:	f7ff fbfb 	bl	800dc2c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e436:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800e438:	2c00      	cmp	r4, #0
 800e43a:	f040 8160 	bne.w	800e6fe <HAL_RCCEx_PeriphCLKConfig+0x8f2>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e43e:	4aaa      	ldr	r2, [pc, #680]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800e440:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 800e444:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800e446:	f023 0307 	bic.w	r3, r3, #7
 800e44a:	430b      	orrs	r3, r1
 800e44c:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e44e:	682b      	ldr	r3, [r5, #0]
 800e450:	069b      	lsls	r3, r3, #26
 800e452:	d510      	bpl.n	800e476 <HAL_RCCEx_PeriphCLKConfig+0x66a>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800e454:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800e458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e45c:	f000 816b 	beq.w	800e736 <HAL_RCCEx_PeriphCLKConfig+0x92a>
 800e460:	f200 814f 	bhi.w	800e702 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800e464:	2b00      	cmp	r3, #0
 800e466:	f000 8155 	beq.w	800e714 <HAL_RCCEx_PeriphCLKConfig+0x908>
 800e46a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e46e:	f000 815b 	beq.w	800e728 <HAL_RCCEx_PeriphCLKConfig+0x91c>
 800e472:	2601      	movs	r6, #1
 800e474:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e476:	682b      	ldr	r3, [r5, #0]
 800e478:	065f      	lsls	r7, r3, #25
 800e47a:	d510      	bpl.n	800e49e <HAL_RCCEx_PeriphCLKConfig+0x692>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800e47c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 800e480:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e484:	f000 8179 	beq.w	800e77a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800e488:	f200 815d 	bhi.w	800e746 <HAL_RCCEx_PeriphCLKConfig+0x93a>
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	f000 8163 	beq.w	800e758 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800e492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e496:	f000 8169 	beq.w	800e76c <HAL_RCCEx_PeriphCLKConfig+0x960>
 800e49a:	2601      	movs	r6, #1
 800e49c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e49e:	682b      	ldr	r3, [r5, #0]
 800e4a0:	0618      	lsls	r0, r3, #24
 800e4a2:	d510      	bpl.n	800e4c6 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800e4a4:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 800e4a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e4ac:	f000 8187 	beq.w	800e7be <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 800e4b0:	f200 816b 	bhi.w	800e78a <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	f000 8171 	beq.w	800e79c <HAL_RCCEx_PeriphCLKConfig+0x990>
 800e4ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e4be:	f000 8177 	beq.w	800e7b0 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 800e4c2:	2601      	movs	r6, #1
 800e4c4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800e4c6:	682b      	ldr	r3, [r5, #0]
 800e4c8:	0719      	lsls	r1, r3, #28
 800e4ca:	d514      	bpl.n	800e4f6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800e4cc:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 800e4d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e4d4:	d107      	bne.n	800e4e6 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e4d6:	2102      	movs	r1, #2
 800e4d8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e4dc:	f7ff fc1e 	bl	800dd1c <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800e4e0:	2800      	cmp	r0, #0
 800e4e2:	bf18      	it	ne
 800e4e4:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800e4e6:	4a80      	ldr	r2, [pc, #512]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800e4e8:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 800e4ec:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800e4ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800e4f2:	430b      	orrs	r3, r1
 800e4f4:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e4f6:	682b      	ldr	r3, [r5, #0]
 800e4f8:	06da      	lsls	r2, r3, #27
 800e4fa:	d514      	bpl.n	800e526 <HAL_RCCEx_PeriphCLKConfig+0x71a>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800e4fc:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 800e500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e504:	d107      	bne.n	800e516 <HAL_RCCEx_PeriphCLKConfig+0x70a>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e506:	2102      	movs	r1, #2
 800e508:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e50c:	f7ff fc06 	bl	800dd1c <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800e510:	2800      	cmp	r0, #0
 800e512:	bf18      	it	ne
 800e514:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e516:	4a74      	ldr	r2, [pc, #464]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800e518:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 800e51c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800e51e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e522:	430b      	orrs	r3, r1
 800e524:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e526:	682b      	ldr	r3, [r5, #0]
 800e528:	031b      	lsls	r3, r3, #12
 800e52a:	d51b      	bpl.n	800e564 <HAL_RCCEx_PeriphCLKConfig+0x758>
    switch (PeriphClkInit->AdcClockSelection)
 800e52c:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 800e530:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800e534:	f000 814b 	beq.w	800e7ce <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800e538:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800e53c:	d007      	beq.n	800e54e <HAL_RCCEx_PeriphCLKConfig+0x742>
 800e53e:	2900      	cmp	r1, #0
 800e540:	f040 814b 	bne.w	800e7da <HAL_RCCEx_PeriphCLKConfig+0x9ce>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e544:	f105 0008 	add.w	r0, r5, #8
 800e548:	f7ff fb70 	bl	800dc2c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e54c:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800e54e:	2c00      	cmp	r4, #0
 800e550:	f040 8146 	bne.w	800e7e0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e554:	4a64      	ldr	r2, [pc, #400]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800e556:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 800e55a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800e55c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800e560:	430b      	orrs	r3, r1
 800e562:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e564:	682b      	ldr	r3, [r5, #0]
 800e566:	035f      	lsls	r7, r3, #13
 800e568:	d51c      	bpl.n	800e5a4 <HAL_RCCEx_PeriphCLKConfig+0x798>
    switch (PeriphClkInit->UsbClockSelection)
 800e56a:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800e56e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e572:	f000 8137 	beq.w	800e7e4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
 800e576:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e57a:	d008      	beq.n	800e58e <HAL_RCCEx_PeriphCLKConfig+0x782>
 800e57c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e580:	f040 8137 	bne.w	800e7f2 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e584:	4a58      	ldr	r2, [pc, #352]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800e586:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800e588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e58c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800e58e:	2c00      	cmp	r4, #0
 800e590:	f040 8132 	bne.w	800e7f8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e594:	4a54      	ldr	r2, [pc, #336]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800e596:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 800e59a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800e59c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800e5a0:	430b      	orrs	r3, r1
 800e5a2:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800e5a4:	682b      	ldr	r3, [r5, #0]
 800e5a6:	03d8      	lsls	r0, r3, #15
 800e5a8:	d509      	bpl.n	800e5be <HAL_RCCEx_PeriphCLKConfig+0x7b2>
    switch (PeriphClkInit->SdmmcClockSelection)
 800e5aa:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	f000 8125 	beq.w	800e7fc <HAL_RCCEx_PeriphCLKConfig+0x9f0>
 800e5b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5b6:	f000 812f 	beq.w	800e818 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800e5ba:	2601      	movs	r6, #1
 800e5bc:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e5be:	682b      	ldr	r3, [r5, #0]
 800e5c0:	0099      	lsls	r1, r3, #2
 800e5c2:	d507      	bpl.n	800e5d4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e5c4:	2102      	movs	r1, #2
 800e5c6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e5ca:	f7ff fba7 	bl	800dd1c <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 800e5ce:	2800      	cmp	r0, #0
 800e5d0:	bf18      	it	ne
 800e5d2:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e5d4:	e9d5 3100 	ldrd	r3, r1, [r5]
 800e5d8:	039a      	lsls	r2, r3, #14
 800e5da:	d50b      	bpl.n	800e5f4 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
    switch (PeriphClkInit->RngClockSelection)
 800e5dc:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
 800e5e0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800e5e4:	f000 812f 	beq.w	800e846 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 800e5e8:	f200 811f 	bhi.w	800e82a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800e5ec:	2800      	cmp	r0, #0
 800e5ee:	f000 8122 	beq.w	800e836 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 800e5f2:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800e5f4:	02df      	lsls	r7, r3, #11
 800e5f6:	d506      	bpl.n	800e606 <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800e5f8:	483b      	ldr	r0, [pc, #236]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800e5fa:	6fac      	ldr	r4, [r5, #120]	; 0x78
 800e5fc:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800e5fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800e602:	4322      	orrs	r2, r4
 800e604:	6502      	str	r2, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800e606:	00dc      	lsls	r4, r3, #3
 800e608:	d507      	bpl.n	800e61a <HAL_RCCEx_PeriphCLKConfig+0x80e>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800e60a:	4837      	ldr	r0, [pc, #220]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800e60c:	f8d5 40bc 	ldr.w	r4, [r5, #188]	; 0xbc
 800e610:	6902      	ldr	r2, [r0, #16]
 800e612:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e616:	4322      	orrs	r2, r4
 800e618:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e61a:	0298      	lsls	r0, r3, #10
 800e61c:	d506      	bpl.n	800e62c <HAL_RCCEx_PeriphCLKConfig+0x820>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e61e:	4832      	ldr	r0, [pc, #200]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800e620:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 800e622:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800e624:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800e628:	4322      	orrs	r2, r4
 800e62a:	6502      	str	r2, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800e62c:	005a      	lsls	r2, r3, #1
 800e62e:	d509      	bpl.n	800e644 <HAL_RCCEx_PeriphCLKConfig+0x838>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e630:	4a2d      	ldr	r2, [pc, #180]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800e632:	6910      	ldr	r0, [r2, #16]
 800e634:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 800e638:	6110      	str	r0, [r2, #16]
 800e63a:	6910      	ldr	r0, [r2, #16]
 800e63c:	f8d5 40c0 	ldr.w	r4, [r5, #192]	; 0xc0
 800e640:	4320      	orrs	r0, r4
 800e642:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800e644:	2b00      	cmp	r3, #0
 800e646:	da06      	bge.n	800e656 <HAL_RCCEx_PeriphCLKConfig+0x84a>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800e648:	4827      	ldr	r0, [pc, #156]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800e64a:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800e64c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800e64e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800e652:	4322      	orrs	r2, r4
 800e654:	64c2      	str	r2, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e656:	021b      	lsls	r3, r3, #8
 800e658:	d507      	bpl.n	800e66a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e65a:	4a23      	ldr	r2, [pc, #140]	; (800e6e8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800e65c:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
 800e660:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800e662:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800e666:	4303      	orrs	r3, r0
 800e668:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800e66a:	07cf      	lsls	r7, r1, #31
 800e66c:	d507      	bpl.n	800e67e <HAL_RCCEx_PeriphCLKConfig+0x872>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e66e:	2100      	movs	r1, #0
 800e670:	f105 0008 	add.w	r0, r5, #8
 800e674:	f7ff fada 	bl	800dc2c <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800e678:	2800      	cmp	r0, #0
 800e67a:	bf18      	it	ne
 800e67c:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800e67e:	686b      	ldr	r3, [r5, #4]
 800e680:	079c      	lsls	r4, r3, #30
 800e682:	d507      	bpl.n	800e694 <HAL_RCCEx_PeriphCLKConfig+0x888>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e684:	2101      	movs	r1, #1
 800e686:	f105 0008 	add.w	r0, r5, #8
 800e68a:	f7ff facf 	bl	800dc2c <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800e68e:	2800      	cmp	r0, #0
 800e690:	bf18      	it	ne
 800e692:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800e694:	686b      	ldr	r3, [r5, #4]
 800e696:	0758      	lsls	r0, r3, #29
 800e698:	d507      	bpl.n	800e6aa <HAL_RCCEx_PeriphCLKConfig+0x89e>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e69a:	2102      	movs	r1, #2
 800e69c:	f105 0008 	add.w	r0, r5, #8
 800e6a0:	f7ff fac4 	bl	800dc2c <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800e6a4:	2800      	cmp	r0, #0
 800e6a6:	bf18      	it	ne
 800e6a8:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800e6aa:	686b      	ldr	r3, [r5, #4]
 800e6ac:	0719      	lsls	r1, r3, #28
 800e6ae:	d507      	bpl.n	800e6c0 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e6b0:	2100      	movs	r1, #0
 800e6b2:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e6b6:	f7ff fb31 	bl	800dd1c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800e6ba:	2800      	cmp	r0, #0
 800e6bc:	bf18      	it	ne
 800e6be:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800e6c0:	686b      	ldr	r3, [r5, #4]
 800e6c2:	06da      	lsls	r2, r3, #27
 800e6c4:	d507      	bpl.n	800e6d6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e6c6:	2101      	movs	r1, #1
 800e6c8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e6cc:	f7ff fb26 	bl	800dd1c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800e6d0:	2800      	cmp	r0, #0
 800e6d2:	bf18      	it	ne
 800e6d4:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800e6d6:	686b      	ldr	r3, [r5, #4]
 800e6d8:	069b      	lsls	r3, r3, #26
 800e6da:	f100 80bc 	bmi.w	800e856 <HAL_RCCEx_PeriphCLKConfig+0xa4a>
    return HAL_OK;
 800e6de:	1e30      	subs	r0, r6, #0
 800e6e0:	bf18      	it	ne
 800e6e2:	2001      	movne	r0, #1
}
 800e6e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6e8:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e6ec:	2101      	movs	r1, #1
 800e6ee:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e6f2:	f7ff fb13 	bl	800dd1c <RCCEx_PLL3_Config>
 800e6f6:	e69e      	b.n	800e436 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800e6f8:	2601      	movs	r6, #1
 800e6fa:	4634      	mov	r4, r6
 800e6fc:	e6a7      	b.n	800e44e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800e6fe:	4626      	mov	r6, r4
 800e700:	e6a5      	b.n	800e44e <HAL_RCCEx_PeriphCLKConfig+0x642>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800e702:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800e706:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800e70a:	d003      	beq.n	800e714 <HAL_RCCEx_PeriphCLKConfig+0x908>
 800e70c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e710:	f47f aeaf 	bne.w	800e472 <HAL_RCCEx_PeriphCLKConfig+0x666>
    if (ret == HAL_OK)
 800e714:	b9ac      	cbnz	r4, 800e742 <HAL_RCCEx_PeriphCLKConfig+0x936>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e716:	4a55      	ldr	r2, [pc, #340]	; (800e86c <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800e718:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 800e71c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800e71e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800e722:	430b      	orrs	r3, r1
 800e724:	6553      	str	r3, [r2, #84]	; 0x54
 800e726:	e6a6      	b.n	800e476 <HAL_RCCEx_PeriphCLKConfig+0x66a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e728:	2100      	movs	r1, #0
 800e72a:	f105 0008 	add.w	r0, r5, #8
 800e72e:	f7ff fa7d 	bl	800dc2c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e732:	4604      	mov	r4, r0
        break;
 800e734:	e7ee      	b.n	800e714 <HAL_RCCEx_PeriphCLKConfig+0x908>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e736:	2102      	movs	r1, #2
 800e738:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e73c:	f7ff faee 	bl	800dd1c <RCCEx_PLL3_Config>
 800e740:	e7f7      	b.n	800e732 <HAL_RCCEx_PeriphCLKConfig+0x926>
 800e742:	4626      	mov	r6, r4
 800e744:	e697      	b.n	800e476 <HAL_RCCEx_PeriphCLKConfig+0x66a>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800e746:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e74a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800e74e:	d003      	beq.n	800e758 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800e750:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e754:	f47f aea1 	bne.w	800e49a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    if (ret == HAL_OK)
 800e758:	b9ac      	cbnz	r4, 800e786 <HAL_RCCEx_PeriphCLKConfig+0x97a>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e75a:	4a44      	ldr	r2, [pc, #272]	; (800e86c <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800e75c:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 800e760:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800e762:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800e766:	430b      	orrs	r3, r1
 800e768:	6593      	str	r3, [r2, #88]	; 0x58
 800e76a:	e698      	b.n	800e49e <HAL_RCCEx_PeriphCLKConfig+0x692>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e76c:	2100      	movs	r1, #0
 800e76e:	f105 0008 	add.w	r0, r5, #8
 800e772:	f7ff fa5b 	bl	800dc2c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e776:	4604      	mov	r4, r0
        break;
 800e778:	e7ee      	b.n	800e758 <HAL_RCCEx_PeriphCLKConfig+0x94c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e77a:	2102      	movs	r1, #2
 800e77c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e780:	f7ff facc 	bl	800dd1c <RCCEx_PLL3_Config>
 800e784:	e7f7      	b.n	800e776 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800e786:	4626      	mov	r6, r4
 800e788:	e689      	b.n	800e49e <HAL_RCCEx_PeriphCLKConfig+0x692>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800e78a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e78e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800e792:	d003      	beq.n	800e79c <HAL_RCCEx_PeriphCLKConfig+0x990>
 800e794:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800e798:	f47f ae93 	bne.w	800e4c2 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
    if (ret == HAL_OK)
 800e79c:	b9ac      	cbnz	r4, 800e7ca <HAL_RCCEx_PeriphCLKConfig+0x9be>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800e79e:	4a33      	ldr	r2, [pc, #204]	; (800e86c <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800e7a0:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 800e7a4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800e7a6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800e7aa:	430b      	orrs	r3, r1
 800e7ac:	6593      	str	r3, [r2, #88]	; 0x58
 800e7ae:	e68a      	b.n	800e4c6 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e7b0:	2100      	movs	r1, #0
 800e7b2:	f105 0008 	add.w	r0, r5, #8
 800e7b6:	f7ff fa39 	bl	800dc2c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e7ba:	4604      	mov	r4, r0
        break;
 800e7bc:	e7ee      	b.n	800e79c <HAL_RCCEx_PeriphCLKConfig+0x990>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e7be:	2102      	movs	r1, #2
 800e7c0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e7c4:	f7ff faaa 	bl	800dd1c <RCCEx_PLL3_Config>
 800e7c8:	e7f7      	b.n	800e7ba <HAL_RCCEx_PeriphCLKConfig+0x9ae>
 800e7ca:	4626      	mov	r6, r4
 800e7cc:	e67b      	b.n	800e4c6 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e7ce:	2102      	movs	r1, #2
 800e7d0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e7d4:	f7ff faa2 	bl	800dd1c <RCCEx_PLL3_Config>
 800e7d8:	e6b8      	b.n	800e54c <HAL_RCCEx_PeriphCLKConfig+0x740>
    switch (PeriphClkInit->AdcClockSelection)
 800e7da:	2601      	movs	r6, #1
 800e7dc:	4634      	mov	r4, r6
 800e7de:	e6c1      	b.n	800e564 <HAL_RCCEx_PeriphCLKConfig+0x758>
 800e7e0:	4626      	mov	r6, r4
 800e7e2:	e6bf      	b.n	800e564 <HAL_RCCEx_PeriphCLKConfig+0x758>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e7e4:	2101      	movs	r1, #1
 800e7e6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e7ea:	f7ff fa97 	bl	800dd1c <RCCEx_PLL3_Config>
 800e7ee:	4604      	mov	r4, r0
        break;
 800e7f0:	e6cd      	b.n	800e58e <HAL_RCCEx_PeriphCLKConfig+0x782>
    switch (PeriphClkInit->UsbClockSelection)
 800e7f2:	2601      	movs	r6, #1
 800e7f4:	4634      	mov	r4, r6
 800e7f6:	e6d5      	b.n	800e5a4 <HAL_RCCEx_PeriphCLKConfig+0x798>
 800e7f8:	4626      	mov	r6, r4
 800e7fa:	e6d3      	b.n	800e5a4 <HAL_RCCEx_PeriphCLKConfig+0x798>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e7fc:	4a1b      	ldr	r2, [pc, #108]	; (800e86c <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800e7fe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800e800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e804:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800e806:	b974      	cbnz	r4, 800e826 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800e808:	4a18      	ldr	r2, [pc, #96]	; (800e86c <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800e80a:	6d69      	ldr	r1, [r5, #84]	; 0x54
 800e80c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800e80e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e812:	430b      	orrs	r3, r1
 800e814:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e816:	e6d2      	b.n	800e5be <HAL_RCCEx_PeriphCLKConfig+0x7b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e818:	2102      	movs	r1, #2
 800e81a:	f105 0008 	add.w	r0, r5, #8
 800e81e:	f7ff fa05 	bl	800dc2c <RCCEx_PLL2_Config>
 800e822:	4604      	mov	r4, r0
        break;
 800e824:	e7ef      	b.n	800e806 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800e826:	4626      	mov	r6, r4
 800e828:	e6c9      	b.n	800e5be <HAL_RCCEx_PeriphCLKConfig+0x7b2>
    switch (PeriphClkInit->RngClockSelection)
 800e82a:	f420 7280 	bic.w	r2, r0, #256	; 0x100
 800e82e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800e832:	f47f aede 	bne.w	800e5f2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    if (ret == HAL_OK)
 800e836:	b964      	cbnz	r4, 800e852 <HAL_RCCEx_PeriphCLKConfig+0xa46>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e838:	4c0c      	ldr	r4, [pc, #48]	; (800e86c <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800e83a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800e83c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800e840:	4302      	orrs	r2, r0
 800e842:	6562      	str	r2, [r4, #84]	; 0x54
 800e844:	e6d6      	b.n	800e5f4 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e846:	4f09      	ldr	r7, [pc, #36]	; (800e86c <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800e848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e84a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800e84e:	62fa      	str	r2, [r7, #44]	; 0x2c
        break;
 800e850:	e7f1      	b.n	800e836 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 800e852:	4626      	mov	r6, r4
 800e854:	e6ce      	b.n	800e5f4 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e856:	2102      	movs	r1, #2
 800e858:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e85c:	f7ff fa5e 	bl	800dd1c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800e860:	2800      	cmp	r0, #0
 800e862:	f43f af3c 	beq.w	800e6de <HAL_RCCEx_PeriphCLKConfig+0x8d2>
  return HAL_ERROR;
 800e866:	2001      	movs	r0, #1
 800e868:	e73c      	b.n	800e6e4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 800e86a:	bf00      	nop
 800e86c:	58024400 	.word	0x58024400

0800e870 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800e870:	b538      	push	{r3, r4, r5, lr}
 800e872:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800e874:	4604      	mov	r4, r0
 800e876:	b1f0      	cbz	r0, 800e8b6 <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800e878:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800e87c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800e880:	b91b      	cbnz	r3, 800e88a <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800e882:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800e886:	f7f2 fce1 	bl	800124c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e88a:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800e88c:	1d21      	adds	r1, r4, #4
 800e88e:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e890:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800e894:	f000 fa1f 	bl	800ecd6 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800e898:	6862      	ldr	r2, [r4, #4]
 800e89a:	4629      	mov	r1, r5
 800e89c:	6820      	ldr	r0, [r4, #0]
 800e89e:	f000 fa55 	bl	800ed4c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800e8a2:	4a06      	ldr	r2, [pc, #24]	; (800e8bc <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 800e8a4:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800e8a6:	6813      	ldr	r3, [r2, #0]
 800e8a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e8ac:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800e8ae:	2301      	movs	r3, #1
 800e8b0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800e8b4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800e8b6:	2001      	movs	r0, #1
 800e8b8:	e7fc      	b.n	800e8b4 <HAL_SDRAM_Init+0x44>
 800e8ba:	bf00      	nop
 800e8bc:	52004000 	.word	0x52004000

0800e8c0 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 800e8c0:	b510      	push	{r4, lr}
 800e8c2:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 800e8c4:	f7f2 fd50 	bl	8001368 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 800e8c8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800e8cc:	f000 fa74 	bl	800edb8 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 800e8d0:	2000      	movs	r0, #0
 800e8d2:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 800e8d6:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d

  return HAL_OK;
}
 800e8da:	bd10      	pop	{r4, pc}

0800e8dc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800e8dc:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800e8de:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800e8e2:	4605      	mov	r5, r0
 800e8e4:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800e8e6:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800e8e8:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800e8ea:	d010      	beq.n	800e90e <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800e8ec:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 800e8f0:	2c01      	cmp	r4, #1
 800e8f2:	d110      	bne.n	800e916 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e8f4:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800e8f6:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e8f8:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800e8fc:	f000 fa6b 	bl	800edd6 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800e900:	6833      	ldr	r3, [r6, #0]
 800e902:	2b02      	cmp	r3, #2
 800e904:	d104      	bne.n	800e910 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800e906:	2305      	movs	r3, #5
 800e908:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800e90c:	2000      	movs	r0, #0
}
 800e90e:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800e910:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 800e914:	e7fa      	b.n	800e90c <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800e916:	2001      	movs	r0, #1
 800e918:	e7f9      	b.n	800e90e <HAL_SDRAM_SendCommand+0x32>

0800e91a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800e91a:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800e91c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800e920:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800e922:	2b02      	cmp	r3, #2
 800e924:	b2d8      	uxtb	r0, r3
 800e926:	d00d      	beq.n	800e944 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800e928:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800e92c:	2b01      	cmp	r3, #1
 800e92e:	b2dd      	uxtb	r5, r3
 800e930:	d109      	bne.n	800e946 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e932:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800e934:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e936:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800e93a:	f000 fa5e 	bl	800edfa <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800e93e:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800e940:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 800e944:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800e946:	2001      	movs	r0, #1
 800e948:	e7fc      	b.n	800e944 <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800e94a <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800e94a:	4770      	bx	lr

0800e94c <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e94c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800e950:	2b01      	cmp	r3, #1
 800e952:	d12f      	bne.n	800e9b4 <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e954:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e956:	4a18      	ldr	r2, [pc, #96]	; (800e9b8 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800e958:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e95c:	6803      	ldr	r3, [r0, #0]
 800e95e:	4293      	cmp	r3, r2
 800e960:	d01a      	beq.n	800e998 <HAL_TIM_Base_Start+0x4c>
 800e962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e966:	d017      	beq.n	800e998 <HAL_TIM_Base_Start+0x4c>
 800e968:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800e96c:	4293      	cmp	r3, r2
 800e96e:	d013      	beq.n	800e998 <HAL_TIM_Base_Start+0x4c>
 800e970:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e974:	4293      	cmp	r3, r2
 800e976:	d00f      	beq.n	800e998 <HAL_TIM_Base_Start+0x4c>
 800e978:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e97c:	4293      	cmp	r3, r2
 800e97e:	d00b      	beq.n	800e998 <HAL_TIM_Base_Start+0x4c>
 800e980:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800e984:	4293      	cmp	r3, r2
 800e986:	d007      	beq.n	800e998 <HAL_TIM_Base_Start+0x4c>
 800e988:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800e98c:	4293      	cmp	r3, r2
 800e98e:	d003      	beq.n	800e998 <HAL_TIM_Base_Start+0x4c>
 800e990:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800e994:	4293      	cmp	r3, r2
 800e996:	d107      	bne.n	800e9a8 <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e998:	6899      	ldr	r1, [r3, #8]
 800e99a:	4a08      	ldr	r2, [pc, #32]	; (800e9bc <HAL_TIM_Base_Start+0x70>)
 800e99c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e99e:	2a06      	cmp	r2, #6
 800e9a0:	d006      	beq.n	800e9b0 <HAL_TIM_Base_Start+0x64>
 800e9a2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800e9a6:	d003      	beq.n	800e9b0 <HAL_TIM_Base_Start+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e9a8:	681a      	ldr	r2, [r3, #0]
 800e9aa:	f042 0201 	orr.w	r2, r2, #1
 800e9ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e9b0:	2000      	movs	r0, #0
}
 800e9b2:	4770      	bx	lr
    return HAL_ERROR;
 800e9b4:	2001      	movs	r0, #1
 800e9b6:	4770      	bx	lr
 800e9b8:	40010000 	.word	0x40010000
 800e9bc:	00010007 	.word	0x00010007

0800e9c0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e9c0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800e9c4:	2b01      	cmp	r3, #1
 800e9c6:	d133      	bne.n	800ea30 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9c8:	2302      	movs	r3, #2
 800e9ca:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e9ce:	6803      	ldr	r3, [r0, #0]
 800e9d0:	68da      	ldr	r2, [r3, #12]
 800e9d2:	f042 0201 	orr.w	r2, r2, #1
 800e9d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e9d8:	4a16      	ldr	r2, [pc, #88]	; (800ea34 <HAL_TIM_Base_Start_IT+0x74>)
 800e9da:	4293      	cmp	r3, r2
 800e9dc:	d01a      	beq.n	800ea14 <HAL_TIM_Base_Start_IT+0x54>
 800e9de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e9e2:	d017      	beq.n	800ea14 <HAL_TIM_Base_Start_IT+0x54>
 800e9e4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800e9e8:	4293      	cmp	r3, r2
 800e9ea:	d013      	beq.n	800ea14 <HAL_TIM_Base_Start_IT+0x54>
 800e9ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e9f0:	4293      	cmp	r3, r2
 800e9f2:	d00f      	beq.n	800ea14 <HAL_TIM_Base_Start_IT+0x54>
 800e9f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e9f8:	4293      	cmp	r3, r2
 800e9fa:	d00b      	beq.n	800ea14 <HAL_TIM_Base_Start_IT+0x54>
 800e9fc:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800ea00:	4293      	cmp	r3, r2
 800ea02:	d007      	beq.n	800ea14 <HAL_TIM_Base_Start_IT+0x54>
 800ea04:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800ea08:	4293      	cmp	r3, r2
 800ea0a:	d003      	beq.n	800ea14 <HAL_TIM_Base_Start_IT+0x54>
 800ea0c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800ea10:	4293      	cmp	r3, r2
 800ea12:	d107      	bne.n	800ea24 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ea14:	6899      	ldr	r1, [r3, #8]
 800ea16:	4a08      	ldr	r2, [pc, #32]	; (800ea38 <HAL_TIM_Base_Start_IT+0x78>)
 800ea18:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea1a:	2a06      	cmp	r2, #6
 800ea1c:	d006      	beq.n	800ea2c <HAL_TIM_Base_Start_IT+0x6c>
 800ea1e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800ea22:	d003      	beq.n	800ea2c <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ea24:	681a      	ldr	r2, [r3, #0]
 800ea26:	f042 0201 	orr.w	r2, r2, #1
 800ea2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ea2c:	2000      	movs	r0, #0
}
 800ea2e:	4770      	bx	lr
    return HAL_ERROR;
 800ea30:	2001      	movs	r0, #1
 800ea32:	4770      	bx	lr
 800ea34:	40010000 	.word	0x40010000
 800ea38:	00010007 	.word	0x00010007

0800ea3c <HAL_TIM_OC_DelayElapsedCallback>:
 800ea3c:	4770      	bx	lr

0800ea3e <HAL_TIM_IC_CaptureCallback>:
 800ea3e:	4770      	bx	lr

0800ea40 <HAL_TIM_PWM_PulseFinishedCallback>:
 800ea40:	4770      	bx	lr

0800ea42 <HAL_TIM_TriggerCallback>:
 800ea42:	4770      	bx	lr

0800ea44 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ea44:	6803      	ldr	r3, [r0, #0]
 800ea46:	691a      	ldr	r2, [r3, #16]
 800ea48:	0791      	lsls	r1, r2, #30
{
 800ea4a:	b510      	push	{r4, lr}
 800ea4c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ea4e:	d50f      	bpl.n	800ea70 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ea50:	68da      	ldr	r2, [r3, #12]
 800ea52:	0792      	lsls	r2, r2, #30
 800ea54:	d50c      	bpl.n	800ea70 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ea56:	f06f 0202 	mvn.w	r2, #2
 800ea5a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ea5c:	2201      	movs	r2, #1
 800ea5e:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ea60:	699b      	ldr	r3, [r3, #24]
 800ea62:	0799      	lsls	r1, r3, #30
 800ea64:	f000 8085 	beq.w	800eb72 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ea68:	f7ff ffe9 	bl	800ea3e <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ea70:	6823      	ldr	r3, [r4, #0]
 800ea72:	691a      	ldr	r2, [r3, #16]
 800ea74:	0752      	lsls	r2, r2, #29
 800ea76:	d510      	bpl.n	800ea9a <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ea78:	68da      	ldr	r2, [r3, #12]
 800ea7a:	0750      	lsls	r0, r2, #29
 800ea7c:	d50d      	bpl.n	800ea9a <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ea7e:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ea82:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ea84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ea86:	2202      	movs	r2, #2
 800ea88:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ea8a:	699b      	ldr	r3, [r3, #24]
 800ea8c:	f413 7f40 	tst.w	r3, #768	; 0x300
 800ea90:	d075      	beq.n	800eb7e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800ea92:	f7ff ffd4 	bl	800ea3e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea96:	2300      	movs	r3, #0
 800ea98:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ea9a:	6823      	ldr	r3, [r4, #0]
 800ea9c:	691a      	ldr	r2, [r3, #16]
 800ea9e:	0711      	lsls	r1, r2, #28
 800eaa0:	d50f      	bpl.n	800eac2 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800eaa2:	68da      	ldr	r2, [r3, #12]
 800eaa4:	0712      	lsls	r2, r2, #28
 800eaa6:	d50c      	bpl.n	800eac2 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800eaa8:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eaac:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800eaae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800eab0:	2204      	movs	r2, #4
 800eab2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800eab4:	69db      	ldr	r3, [r3, #28]
 800eab6:	079b      	lsls	r3, r3, #30
 800eab8:	d067      	beq.n	800eb8a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800eaba:	f7ff ffc0 	bl	800ea3e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eabe:	2300      	movs	r3, #0
 800eac0:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800eac2:	6823      	ldr	r3, [r4, #0]
 800eac4:	691a      	ldr	r2, [r3, #16]
 800eac6:	06d0      	lsls	r0, r2, #27
 800eac8:	d510      	bpl.n	800eaec <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800eaca:	68da      	ldr	r2, [r3, #12]
 800eacc:	06d1      	lsls	r1, r2, #27
 800eace:	d50d      	bpl.n	800eaec <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ead0:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ead4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ead6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ead8:	2208      	movs	r2, #8
 800eada:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800eadc:	69db      	ldr	r3, [r3, #28]
 800eade:	f413 7f40 	tst.w	r3, #768	; 0x300
 800eae2:	d058      	beq.n	800eb96 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800eae4:	f7ff ffab 	bl	800ea3e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eae8:	2300      	movs	r3, #0
 800eaea:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800eaec:	6823      	ldr	r3, [r4, #0]
 800eaee:	691a      	ldr	r2, [r3, #16]
 800eaf0:	07d2      	lsls	r2, r2, #31
 800eaf2:	d508      	bpl.n	800eb06 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800eaf4:	68da      	ldr	r2, [r3, #12]
 800eaf6:	07d0      	lsls	r0, r2, #31
 800eaf8:	d505      	bpl.n	800eb06 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800eafa:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800eafe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800eb00:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800eb02:	f7f2 f9f1 	bl	8000ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800eb06:	6823      	ldr	r3, [r4, #0]
 800eb08:	691a      	ldr	r2, [r3, #16]
 800eb0a:	0611      	lsls	r1, r2, #24
 800eb0c:	d508      	bpl.n	800eb20 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800eb0e:	68da      	ldr	r2, [r3, #12]
 800eb10:	0612      	lsls	r2, r2, #24
 800eb12:	d505      	bpl.n	800eb20 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800eb14:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800eb18:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800eb1a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800eb1c:	f000 f8d9 	bl	800ecd2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800eb20:	6823      	ldr	r3, [r4, #0]
 800eb22:	691a      	ldr	r2, [r3, #16]
 800eb24:	05d0      	lsls	r0, r2, #23
 800eb26:	d508      	bpl.n	800eb3a <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800eb28:	68da      	ldr	r2, [r3, #12]
 800eb2a:	0611      	lsls	r1, r2, #24
 800eb2c:	d505      	bpl.n	800eb3a <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800eb2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800eb32:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800eb34:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800eb36:	f000 f8cd 	bl	800ecd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800eb3a:	6823      	ldr	r3, [r4, #0]
 800eb3c:	691a      	ldr	r2, [r3, #16]
 800eb3e:	0652      	lsls	r2, r2, #25
 800eb40:	d508      	bpl.n	800eb54 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800eb42:	68da      	ldr	r2, [r3, #12]
 800eb44:	0650      	lsls	r0, r2, #25
 800eb46:	d505      	bpl.n	800eb54 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800eb48:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800eb4c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800eb4e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800eb50:	f7ff ff77 	bl	800ea42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800eb54:	6823      	ldr	r3, [r4, #0]
 800eb56:	691a      	ldr	r2, [r3, #16]
 800eb58:	0691      	lsls	r1, r2, #26
 800eb5a:	d522      	bpl.n	800eba2 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800eb5c:	68da      	ldr	r2, [r3, #12]
 800eb5e:	0692      	lsls	r2, r2, #26
 800eb60:	d51f      	bpl.n	800eba2 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800eb62:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800eb66:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800eb68:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800eb6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800eb6e:	f000 b8af 	b.w	800ecd0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb72:	f7ff ff63 	bl	800ea3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb76:	4620      	mov	r0, r4
 800eb78:	f7ff ff62 	bl	800ea40 <HAL_TIM_PWM_PulseFinishedCallback>
 800eb7c:	e776      	b.n	800ea6c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb7e:	f7ff ff5d 	bl	800ea3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb82:	4620      	mov	r0, r4
 800eb84:	f7ff ff5c 	bl	800ea40 <HAL_TIM_PWM_PulseFinishedCallback>
 800eb88:	e785      	b.n	800ea96 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb8a:	f7ff ff57 	bl	800ea3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb8e:	4620      	mov	r0, r4
 800eb90:	f7ff ff56 	bl	800ea40 <HAL_TIM_PWM_PulseFinishedCallback>
 800eb94:	e793      	b.n	800eabe <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb96:	f7ff ff51 	bl	800ea3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb9a:	4620      	mov	r0, r4
 800eb9c:	f7ff ff50 	bl	800ea40 <HAL_TIM_PWM_PulseFinishedCallback>
 800eba0:	e7a2      	b.n	800eae8 <HAL_TIM_IRQHandler+0xa4>
}
 800eba2:	bd10      	pop	{r4, pc}

0800eba4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eba4:	4a30      	ldr	r2, [pc, #192]	; (800ec68 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800eba6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eba8:	4290      	cmp	r0, r2
 800ebaa:	d012      	beq.n	800ebd2 <TIM_Base_SetConfig+0x2e>
 800ebac:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800ebb0:	d00f      	beq.n	800ebd2 <TIM_Base_SetConfig+0x2e>
 800ebb2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800ebb6:	4290      	cmp	r0, r2
 800ebb8:	d00b      	beq.n	800ebd2 <TIM_Base_SetConfig+0x2e>
 800ebba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ebbe:	4290      	cmp	r0, r2
 800ebc0:	d007      	beq.n	800ebd2 <TIM_Base_SetConfig+0x2e>
 800ebc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ebc6:	4290      	cmp	r0, r2
 800ebc8:	d003      	beq.n	800ebd2 <TIM_Base_SetConfig+0x2e>
 800ebca:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800ebce:	4290      	cmp	r0, r2
 800ebd0:	d119      	bne.n	800ec06 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800ebd2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ebd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800ebd8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ebda:	4a23      	ldr	r2, [pc, #140]	; (800ec68 <TIM_Base_SetConfig+0xc4>)
 800ebdc:	4290      	cmp	r0, r2
 800ebde:	d01d      	beq.n	800ec1c <TIM_Base_SetConfig+0x78>
 800ebe0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800ebe4:	d01a      	beq.n	800ec1c <TIM_Base_SetConfig+0x78>
 800ebe6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800ebea:	4290      	cmp	r0, r2
 800ebec:	d016      	beq.n	800ec1c <TIM_Base_SetConfig+0x78>
 800ebee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ebf2:	4290      	cmp	r0, r2
 800ebf4:	d012      	beq.n	800ec1c <TIM_Base_SetConfig+0x78>
 800ebf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ebfa:	4290      	cmp	r0, r2
 800ebfc:	d00e      	beq.n	800ec1c <TIM_Base_SetConfig+0x78>
 800ebfe:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800ec02:	4290      	cmp	r0, r2
 800ec04:	d00a      	beq.n	800ec1c <TIM_Base_SetConfig+0x78>
 800ec06:	4a19      	ldr	r2, [pc, #100]	; (800ec6c <TIM_Base_SetConfig+0xc8>)
 800ec08:	4290      	cmp	r0, r2
 800ec0a:	d007      	beq.n	800ec1c <TIM_Base_SetConfig+0x78>
 800ec0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ec10:	4290      	cmp	r0, r2
 800ec12:	d003      	beq.n	800ec1c <TIM_Base_SetConfig+0x78>
 800ec14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ec18:	4290      	cmp	r0, r2
 800ec1a:	d103      	bne.n	800ec24 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ec1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ec20:	68ca      	ldr	r2, [r1, #12]
 800ec22:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ec24:	694a      	ldr	r2, [r1, #20]
 800ec26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec2a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800ec2c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ec2e:	688b      	ldr	r3, [r1, #8]
 800ec30:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ec32:	680b      	ldr	r3, [r1, #0]
 800ec34:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ec36:	4b0c      	ldr	r3, [pc, #48]	; (800ec68 <TIM_Base_SetConfig+0xc4>)
 800ec38:	4298      	cmp	r0, r3
 800ec3a:	d00f      	beq.n	800ec5c <TIM_Base_SetConfig+0xb8>
 800ec3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ec40:	4298      	cmp	r0, r3
 800ec42:	d00b      	beq.n	800ec5c <TIM_Base_SetConfig+0xb8>
 800ec44:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800ec48:	4298      	cmp	r0, r3
 800ec4a:	d007      	beq.n	800ec5c <TIM_Base_SetConfig+0xb8>
 800ec4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ec50:	4298      	cmp	r0, r3
 800ec52:	d003      	beq.n	800ec5c <TIM_Base_SetConfig+0xb8>
 800ec54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ec58:	4298      	cmp	r0, r3
 800ec5a:	d101      	bne.n	800ec60 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ec5c:	690b      	ldr	r3, [r1, #16]
 800ec5e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ec60:	2301      	movs	r3, #1
 800ec62:	6143      	str	r3, [r0, #20]
}
 800ec64:	4770      	bx	lr
 800ec66:	bf00      	nop
 800ec68:	40010000 	.word	0x40010000
 800ec6c:	40014000 	.word	0x40014000

0800ec70 <HAL_TIM_Base_Init>:
{
 800ec70:	b510      	push	{r4, lr}
  if (htim == NULL)
 800ec72:	4604      	mov	r4, r0
 800ec74:	b350      	cbz	r0, 800eccc <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800ec76:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800ec7a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ec7e:	b91b      	cbnz	r3, 800ec88 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800ec80:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800ec84:	f7ff fe61 	bl	800e94a <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800ec88:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ec8a:	6820      	ldr	r0, [r4, #0]
 800ec8c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800ec8e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ec92:	f7ff ff87 	bl	800eba4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ec96:	2301      	movs	r3, #1
  return HAL_OK;
 800ec98:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ec9a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ec9e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800eca2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800eca6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800ecaa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800ecae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ecb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ecb6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800ecba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ecbe:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800ecc2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800ecc6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800ecca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800eccc:	2001      	movs	r0, #1
 800ecce:	e7fc      	b.n	800ecca <HAL_TIM_Base_Init+0x5a>

0800ecd0 <HAL_TIMEx_CommutCallback>:
 800ecd0:	4770      	bx	lr

0800ecd2 <HAL_TIMEx_BreakCallback>:
 800ecd2:	4770      	bx	lr

0800ecd4 <HAL_TIMEx_Break2Callback>:
 800ecd4:	4770      	bx	lr

0800ecd6 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ecd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800ecda:	680a      	ldr	r2, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ecdc:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 800ece0:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 800ece4:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 800ece8:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 800ecec:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 800ecf0:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800ecf2:	b9a2      	cbnz	r2, 800ed1e <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ecf4:	ea43 0209 	orr.w	r2, r3, r9
 800ecf8:	6801      	ldr	r1, [r0, #0]
 800ecfa:	432a      	orrs	r2, r5
 800ecfc:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 800ed00:	ea42 0308 	orr.w	r3, r2, r8
 800ed04:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 800ed08:	ea43 030e 	orr.w	r3, r3, lr
 800ed0c:	ea43 030c 	orr.w	r3, r3, ip
 800ed10:	433b      	orrs	r3, r7
 800ed12:	4333      	orrs	r3, r6
 800ed14:	430b      	orrs	r3, r1
 800ed16:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800ed18:	2000      	movs	r0, #0
 800ed1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ed1e:	6802      	ldr	r2, [r0, #0]
 800ed20:	ea43 0309 	orr.w	r3, r3, r9
 800ed24:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800ed28:	4313      	orrs	r3, r2
 800ed2a:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800ed2c:	ea45 0308 	orr.w	r3, r5, r8
 800ed30:	6842      	ldr	r2, [r0, #4]
 800ed32:	ea43 030e 	orr.w	r3, r3, lr
 800ed36:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800ed3a:	ea43 030c 	orr.w	r3, r3, ip
 800ed3e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800ed42:	433b      	orrs	r3, r7
 800ed44:	4333      	orrs	r3, r6
 800ed46:	4313      	orrs	r3, r2
 800ed48:	6043      	str	r3, [r0, #4]
 800ed4a:	e7e5      	b.n	800ed18 <FMC_SDRAM_Init+0x42>

0800ed4c <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ed4c:	68cb      	ldr	r3, [r1, #12]
 800ed4e:	f103 3cff 	add.w	ip, r3, #4294967295
 800ed52:	694b      	ldr	r3, [r1, #20]
{
 800ed54:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ed56:	3b01      	subs	r3, #1
 800ed58:	680f      	ldr	r7, [r1, #0]
 800ed5a:	684c      	ldr	r4, [r1, #4]
 800ed5c:	688e      	ldr	r6, [r1, #8]
 800ed5e:	051b      	lsls	r3, r3, #20
 800ed60:	690d      	ldr	r5, [r1, #16]
 800ed62:	3c01      	subs	r4, #1
 800ed64:	6989      	ldr	r1, [r1, #24]
 800ed66:	3e01      	subs	r6, #1
 800ed68:	3d01      	subs	r5, #1
 800ed6a:	3f01      	subs	r7, #1
 800ed6c:	3901      	subs	r1, #1
 800ed6e:	0124      	lsls	r4, r4, #4
 800ed70:	0236      	lsls	r6, r6, #8
 800ed72:	042d      	lsls	r5, r5, #16
 800ed74:	0609      	lsls	r1, r1, #24
 800ed76:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800ed7a:	b95a      	cbnz	r2, 800ed94 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ed7c:	433b      	orrs	r3, r7
 800ed7e:	6882      	ldr	r2, [r0, #8]
 800ed80:	4323      	orrs	r3, r4
 800ed82:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800ed86:	4333      	orrs	r3, r6
 800ed88:	432b      	orrs	r3, r5
 800ed8a:	430b      	orrs	r3, r1
 800ed8c:	4313      	orrs	r3, r2
 800ed8e:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800ed90:	2000      	movs	r0, #0
 800ed92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ed94:	6882      	ldr	r2, [r0, #8]
 800ed96:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800ed9a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 800ed9e:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800eda0:	ea44 0306 	orr.w	r3, r4, r6
 800eda4:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800eda6:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800eda8:	68c2      	ldr	r2, [r0, #12]
 800edaa:	432b      	orrs	r3, r5
 800edac:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800edb0:	430b      	orrs	r3, r1
 800edb2:	4313      	orrs	r3, r2
 800edb4:	60c3      	str	r3, [r0, #12]
 800edb6:	e7eb      	b.n	800ed90 <FMC_SDRAM_Timing_Init+0x44>

0800edb8 <FMC_SDRAM_DeInit>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 800edb8:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 800edbc:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800edc0:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 800edc4:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800edc8:	609a      	str	r2, [r3, #8]
  Device->SDCMR      = 0x00000000U;
 800edca:	2300      	movs	r3, #0
 800edcc:	6103      	str	r3, [r0, #16]
  Device->SDRTR      = 0x00000000U;
 800edce:	6143      	str	r3, [r0, #20]
  Device->SDSR       = 0x00000000U;
 800edd0:	6183      	str	r3, [r0, #24]

  return HAL_OK;
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	4770      	bx	lr

0800edd6 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800edd6:	6902      	ldr	r2, [r0, #16]
{
 800edd8:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800edda:	e9d1 3400 	ldrd	r3, r4, [r1]
 800edde:	0d92      	lsrs	r2, r2, #22
 800ede0:	4323      	orrs	r3, r4
 800ede2:	68cc      	ldr	r4, [r1, #12]
 800ede4:	0592      	lsls	r2, r2, #22
 800ede6:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800edea:	4313      	orrs	r3, r2
 800edec:	688a      	ldr	r2, [r1, #8]
 800edee:	3a01      	subs	r2, #1
 800edf0:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800edf4:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800edf6:	2000      	movs	r0, #0
 800edf8:	bd10      	pop	{r4, pc}

0800edfa <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800edfa:	6943      	ldr	r3, [r0, #20]
 800edfc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800ee00:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800ee04:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800ee08:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 800ee0a:	2000      	movs	r0, #0
 800ee0c:	4770      	bx	lr

0800ee0e <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ee0e:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800ee10:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ee14:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ee16:	f001 fe07 	bl	8010a28 <xTaskGetSchedulerState>
 800ee1a:	2801      	cmp	r0, #1
 800ee1c:	d003      	beq.n	800ee26 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800ee1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800ee22:	f000 bbcf 	b.w	800f5c4 <xPortSysTickHandler>
}
 800ee26:	bd08      	pop	{r3, pc}

0800ee28 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee28:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800ee2c:	b92b      	cbnz	r3, 800ee3a <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800ee2e:	4b06      	ldr	r3, [pc, #24]	; (800ee48 <osKernelInitialize+0x20>)
 800ee30:	6818      	ldr	r0, [r3, #0]
 800ee32:	b928      	cbnz	r0, 800ee40 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ee34:	2201      	movs	r2, #1
 800ee36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ee38:	4770      	bx	lr
    stat = osErrorISR;
 800ee3a:	f06f 0005 	mvn.w	r0, #5
 800ee3e:	4770      	bx	lr
    } else {
      stat = osError;
 800ee40:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800ee44:	4770      	bx	lr
 800ee46:	bf00      	nop
 800ee48:	24005fd0 	.word	0x24005fd0

0800ee4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ee4c:	b510      	push	{r4, lr}
 800ee4e:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800ee52:	b95c      	cbnz	r4, 800ee6c <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800ee54:	4b08      	ldr	r3, [pc, #32]	; (800ee78 <osKernelStart+0x2c>)
 800ee56:	681a      	ldr	r2, [r3, #0]
 800ee58:	2a01      	cmp	r2, #1
 800ee5a:	d10a      	bne.n	800ee72 <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ee5c:	4a07      	ldr	r2, [pc, #28]	; (800ee7c <osKernelStart+0x30>)
 800ee5e:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ee60:	2202      	movs	r2, #2
 800ee62:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ee64:	f001 fc84 	bl	8010770 <vTaskStartScheduler>
      stat = osOK;
 800ee68:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800ee6a:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800ee6c:	f06f 0005 	mvn.w	r0, #5
 800ee70:	e7fb      	b.n	800ee6a <osKernelStart+0x1e>
      stat = osError;
 800ee72:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800ee76:	e7f8      	b.n	800ee6a <osKernelStart+0x1e>
 800ee78:	24005fd0 	.word	0x24005fd0
 800ee7c:	e000ed00 	.word	0xe000ed00

0800ee80 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ee80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee82:	4614      	mov	r4, r2
 800ee84:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ee86:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ee88:	460b      	mov	r3, r1
  hTask = NULL;
 800ee8a:	9205      	str	r2, [sp, #20]
 800ee8c:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800ee90:	b9d2      	cbnz	r2, 800eec8 <osThreadNew+0x48>
 800ee92:	b1c8      	cbz	r0, 800eec8 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800ee94:	2c00      	cmp	r4, #0
 800ee96:	d02f      	beq.n	800eef8 <osThreadNew+0x78>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800ee98:	69a5      	ldr	r5, [r4, #24]
 800ee9a:	2d00      	cmp	r5, #0
 800ee9c:	bf08      	it	eq
 800ee9e:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800eea0:	1e69      	subs	r1, r5, #1
 800eea2:	46ac      	mov	ip, r5
 800eea4:	2937      	cmp	r1, #55	; 0x37
 800eea6:	d82b      	bhi.n	800ef00 <osThreadNew+0x80>
 800eea8:	6861      	ldr	r1, [r4, #4]
 800eeaa:	07c9      	lsls	r1, r1, #31
 800eeac:	d428      	bmi.n	800ef00 <osThreadNew+0x80>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800eeae:	6966      	ldr	r6, [r4, #20]
 800eeb0:	b16e      	cbz	r6, 800eece <osThreadNew+0x4e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800eeb2:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800eeb4:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800eeb6:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800eeba:	b157      	cbz	r7, 800eed2 <osThreadNew+0x52>
 800eebc:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 800eec0:	d902      	bls.n	800eec8 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800eec2:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800eec4:	b104      	cbz	r4, 800eec8 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800eec6:	b9ee      	cbnz	r6, 800ef04 <osThreadNew+0x84>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800eec8:	9805      	ldr	r0, [sp, #20]
}
 800eeca:	b007      	add	sp, #28
 800eecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800eece:	2280      	movs	r2, #128	; 0x80
 800eed0:	e7f0      	b.n	800eeb4 <osThreadNew+0x34>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800eed2:	f1be 0f00 	cmp.w	lr, #0
 800eed6:	d1f7      	bne.n	800eec8 <osThreadNew+0x48>
      if (mem == 0) {
 800eed8:	6924      	ldr	r4, [r4, #16]
 800eeda:	2c00      	cmp	r4, #0
 800eedc:	d1f4      	bne.n	800eec8 <osThreadNew+0x48>
 800eede:	460c      	mov	r4, r1
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800eee0:	a905      	add	r1, sp, #20
 800eee2:	b292      	uxth	r2, r2
 800eee4:	e9cd c100 	strd	ip, r1, [sp]
 800eee8:	4621      	mov	r1, r4
 800eeea:	f001 fae0 	bl	80104ae <xTaskCreate>
 800eeee:	2801      	cmp	r0, #1
            hTask = NULL;
 800eef0:	bf1c      	itt	ne
 800eef2:	2300      	movne	r3, #0
 800eef4:	9305      	strne	r3, [sp, #20]
 800eef6:	e7e7      	b.n	800eec8 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;
 800eef8:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800eefc:	2280      	movs	r2, #128	; 0x80
 800eefe:	e7ef      	b.n	800eee0 <osThreadNew+0x60>
        return (NULL);
 800ef00:	4610      	mov	r0, r2
 800ef02:	e7e2      	b.n	800eeca <osThreadNew+0x4a>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ef04:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800ef08:	9500      	str	r5, [sp, #0]
 800ef0a:	f001 fa98 	bl	801043e <xTaskCreateStatic>
 800ef0e:	9005      	str	r0, [sp, #20]
 800ef10:	e7da      	b.n	800eec8 <osThreadNew+0x48>

0800ef12 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ef12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef14:	4604      	mov	r4, r0
 800ef16:	460e      	mov	r6, r1
 800ef18:	4615      	mov	r5, r2
 800ef1a:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ef1e:	b11a      	cbz	r2, 800ef28 <osSemaphoreNew+0x16>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 800ef20:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800ef22:	4620      	mov	r0, r4
 800ef24:	b003      	add	sp, #12
 800ef26:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ef28:	2800      	cmp	r0, #0
 800ef2a:	d0f9      	beq.n	800ef20 <osSemaphoreNew+0xe>
 800ef2c:	4288      	cmp	r0, r1
 800ef2e:	d3f7      	bcc.n	800ef20 <osSemaphoreNew+0xe>
    if (attr != NULL) {
 800ef30:	b1e5      	cbz	r5, 800ef6c <osSemaphoreNew+0x5a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ef32:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800ef36:	b1bb      	cbz	r3, 800ef68 <osSemaphoreNew+0x56>
 800ef38:	2f4f      	cmp	r7, #79	; 0x4f
 800ef3a:	d9f1      	bls.n	800ef20 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 800ef3c:	2801      	cmp	r0, #1
 800ef3e:	d12a      	bne.n	800ef96 <osSemaphoreNew+0x84>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ef40:	2103      	movs	r1, #3
 800ef42:	9100      	str	r1, [sp, #0]
 800ef44:	4611      	mov	r1, r2
 800ef46:	f000 fce5 	bl	800f914 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800ef4a:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ef4c:	2800      	cmp	r0, #0
 800ef4e:	d0e7      	beq.n	800ef20 <osSemaphoreNew+0xe>
 800ef50:	b1de      	cbz	r6, 800ef8a <osSemaphoreNew+0x78>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ef52:	2300      	movs	r3, #0
 800ef54:	461a      	mov	r2, r3
 800ef56:	4619      	mov	r1, r3
 800ef58:	f000 fd91 	bl	800fa7e <xQueueGenericSend>
 800ef5c:	2801      	cmp	r0, #1
 800ef5e:	d014      	beq.n	800ef8a <osSemaphoreNew+0x78>
            vSemaphoreDelete (hSemaphore);
 800ef60:	4620      	mov	r0, r4
 800ef62:	f001 f8cd 	bl	8010100 <vQueueDelete>
 800ef66:	e7db      	b.n	800ef20 <osSemaphoreNew+0xe>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ef68:	2f00      	cmp	r7, #0
 800ef6a:	d1d9      	bne.n	800ef20 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 800ef6c:	2c01      	cmp	r4, #1
 800ef6e:	d105      	bne.n	800ef7c <osSemaphoreNew+0x6a>
            hSemaphore = xSemaphoreCreateBinary();
 800ef70:	2203      	movs	r2, #3
 800ef72:	2100      	movs	r1, #0
 800ef74:	4620      	mov	r0, r4
 800ef76:	f000 fd1b 	bl	800f9b0 <xQueueGenericCreate>
 800ef7a:	e7e6      	b.n	800ef4a <osSemaphoreNew+0x38>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ef7c:	4620      	mov	r0, r4
 800ef7e:	4631      	mov	r1, r6
 800ef80:	f000 fd5f 	bl	800fa42 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800ef84:	4604      	mov	r4, r0
 800ef86:	2800      	cmp	r0, #0
 800ef88:	d0ca      	beq.n	800ef20 <osSemaphoreNew+0xe>
        if (attr != NULL) {
 800ef8a:	b955      	cbnz	r5, 800efa2 <osSemaphoreNew+0x90>
        vQueueAddToRegistry (hSemaphore, name);
 800ef8c:	4629      	mov	r1, r5
 800ef8e:	4620      	mov	r0, r4
 800ef90:	f001 f890 	bl	80100b4 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800ef94:	e7c5      	b.n	800ef22 <osSemaphoreNew+0x10>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ef96:	461a      	mov	r2, r3
 800ef98:	f000 fd31 	bl	800f9fe <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800ef9c:	4604      	mov	r4, r0
 800ef9e:	2800      	cmp	r0, #0
 800efa0:	d0be      	beq.n	800ef20 <osSemaphoreNew+0xe>
          name = attr->name;
 800efa2:	682d      	ldr	r5, [r5, #0]
 800efa4:	e7f2      	b.n	800ef8c <osSemaphoreNew+0x7a>

0800efa6 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800efa6:	b513      	push	{r0, r1, r4, lr}
 800efa8:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800efaa:	b308      	cbz	r0, 800eff0 <osSemaphoreAcquire+0x4a>
 800efac:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800efb0:	b1b3      	cbz	r3, 800efe0 <osSemaphoreAcquire+0x3a>
    if (timeout != 0U) {
 800efb2:	b9e9      	cbnz	r1, 800eff0 <osSemaphoreAcquire+0x4a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800efb4:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800efb6:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800efb8:	f001 f82c 	bl	8010014 <xQueueReceiveFromISR>
 800efbc:	2801      	cmp	r0, #1
 800efbe:	d114      	bne.n	800efea <osSemaphoreAcquire+0x44>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800efc0:	9b01      	ldr	r3, [sp, #4]
 800efc2:	b913      	cbnz	r3, 800efca <osSemaphoreAcquire+0x24>
  stat = osOK;
 800efc4:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800efc6:	b002      	add	sp, #8
 800efc8:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800efca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800efce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efd2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800efd6:	f3bf 8f4f 	dsb	sy
 800efda:	f3bf 8f6f 	isb	sy
 800efde:	e7f1      	b.n	800efc4 <osSemaphoreAcquire+0x1e>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800efe0:	f000 ff55 	bl	800fe8e <xQueueSemaphoreTake>
 800efe4:	2801      	cmp	r0, #1
 800efe6:	d0ed      	beq.n	800efc4 <osSemaphoreAcquire+0x1e>
      if (timeout != 0U) {
 800efe8:	b92c      	cbnz	r4, 800eff6 <osSemaphoreAcquire+0x50>
        stat = osErrorResource;
 800efea:	f06f 0002 	mvn.w	r0, #2
 800efee:	e7ea      	b.n	800efc6 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800eff0:	f06f 0003 	mvn.w	r0, #3
 800eff4:	e7e7      	b.n	800efc6 <osSemaphoreAcquire+0x20>
        stat = osErrorTimeout;
 800eff6:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800effa:	e7e4      	b.n	800efc6 <osSemaphoreAcquire+0x20>

0800effc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800effc:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800effe:	b310      	cbz	r0, 800f046 <osSemaphoreRelease+0x4a>
 800f000:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800f004:	b1b3      	cbz	r3, 800f034 <osSemaphoreRelease+0x38>
    yield = pdFALSE;
 800f006:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f008:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800f00a:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f00c:	f000 fe4c 	bl	800fca8 <xQueueGiveFromISR>
 800f010:	2801      	cmp	r0, #1
 800f012:	d115      	bne.n	800f040 <osSemaphoreRelease+0x44>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 800f014:	9b01      	ldr	r3, [sp, #4]
 800f016:	b913      	cbnz	r3, 800f01e <osSemaphoreRelease+0x22>
  stat = osOK;
 800f018:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800f01a:	b002      	add	sp, #8
 800f01c:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 800f01e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f026:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f02a:	f3bf 8f4f 	dsb	sy
 800f02e:	f3bf 8f6f 	isb	sy
 800f032:	e7f1      	b.n	800f018 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f034:	461a      	mov	r2, r3
 800f036:	4619      	mov	r1, r3
 800f038:	f000 fd21 	bl	800fa7e <xQueueGenericSend>
 800f03c:	2801      	cmp	r0, #1
 800f03e:	d0eb      	beq.n	800f018 <osSemaphoreRelease+0x1c>
      stat = osErrorResource;
 800f040:	f06f 0002 	mvn.w	r0, #2
 800f044:	e7e9      	b.n	800f01a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800f046:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800f04a:	e7e6      	b.n	800f01a <osSemaphoreRelease+0x1e>

0800f04c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f04c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f04e:	4605      	mov	r5, r0
 800f050:	460e      	mov	r6, r1
 800f052:	4614      	mov	r4, r2
 800f054:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f058:	b11f      	cbz	r7, 800f062 <osMessageQueueNew+0x16>
  hQueue = NULL;
 800f05a:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800f05c:	4628      	mov	r0, r5
 800f05e:	b003      	add	sp, #12
 800f060:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f062:	2800      	cmp	r0, #0
 800f064:	d0f9      	beq.n	800f05a <osMessageQueueNew+0xe>
 800f066:	2900      	cmp	r1, #0
 800f068:	d0f7      	beq.n	800f05a <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800f06a:	b1da      	cbz	r2, 800f0a4 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f06c:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800f070:	b183      	cbz	r3, 800f094 <osMessageQueueNew+0x48>
 800f072:	2a4f      	cmp	r2, #79	; 0x4f
 800f074:	d9f1      	bls.n	800f05a <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f076:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f078:	2a00      	cmp	r2, #0
 800f07a:	d0ee      	beq.n	800f05a <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f07c:	434d      	muls	r5, r1
 800f07e:	6966      	ldr	r6, [r4, #20]
 800f080:	42ae      	cmp	r6, r5
 800f082:	d3ea      	bcc.n	800f05a <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f084:	9700      	str	r7, [sp, #0]
 800f086:	f000 fc45 	bl	800f914 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800f08a:	4605      	mov	r5, r0
 800f08c:	2800      	cmp	r0, #0
 800f08e:	d0e4      	beq.n	800f05a <osMessageQueueNew+0xe>
        name = attr->name;
 800f090:	6824      	ldr	r4, [r4, #0]
 800f092:	e011      	b.n	800f0b8 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f094:	2a00      	cmp	r2, #0
 800f096:	d1e0      	bne.n	800f05a <osMessageQueueNew+0xe>
 800f098:	6923      	ldr	r3, [r4, #16]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d1dd      	bne.n	800f05a <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f09e:	6963      	ldr	r3, [r4, #20]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d1da      	bne.n	800f05a <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800f0a4:	4628      	mov	r0, r5
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	4631      	mov	r1, r6
 800f0aa:	f000 fc81 	bl	800f9b0 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800f0ae:	4605      	mov	r5, r0
 800f0b0:	2800      	cmp	r0, #0
 800f0b2:	d0d2      	beq.n	800f05a <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800f0b4:	2c00      	cmp	r4, #0
 800f0b6:	d1eb      	bne.n	800f090 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800f0b8:	4621      	mov	r1, r4
 800f0ba:	4628      	mov	r0, r5
 800f0bc:	f000 fffa 	bl	80100b4 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800f0c0:	e7cc      	b.n	800f05c <osMessageQueueNew+0x10>

0800f0c2 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800f0c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f0c4:	461c      	mov	r4, r3
 800f0c6:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800f0ca:	b1c6      	cbz	r6, 800f0fe <osMessageQueuePut+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f0cc:	b318      	cbz	r0, 800f116 <osMessageQueuePut+0x54>
 800f0ce:	b311      	cbz	r1, 800f116 <osMessageQueuePut+0x54>
 800f0d0:	bb0b      	cbnz	r3, 800f116 <osMessageQueuePut+0x54>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f0d2:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800f0d4:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f0d6:	f000 fd85 	bl	800fbe4 <xQueueGenericSendFromISR>
 800f0da:	2801      	cmp	r0, #1
 800f0dc:	d118      	bne.n	800f110 <osMessageQueuePut+0x4e>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800f0de:	9b01      	ldr	r3, [sp, #4]
 800f0e0:	b913      	cbnz	r3, 800f0e8 <osMessageQueuePut+0x26>
  stat = osOK;
 800f0e2:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800f0e4:	b002      	add	sp, #8
 800f0e6:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800f0e8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f0ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0f0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f0f4:	f3bf 8f4f 	dsb	sy
 800f0f8:	f3bf 8f6f 	isb	sy
 800f0fc:	e7f1      	b.n	800f0e2 <osMessageQueuePut+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f0fe:	b150      	cbz	r0, 800f116 <osMessageQueuePut+0x54>
 800f100:	b149      	cbz	r1, 800f116 <osMessageQueuePut+0x54>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f102:	4633      	mov	r3, r6
 800f104:	4622      	mov	r2, r4
 800f106:	f000 fcba 	bl	800fa7e <xQueueGenericSend>
 800f10a:	2801      	cmp	r0, #1
 800f10c:	d0e9      	beq.n	800f0e2 <osMessageQueuePut+0x20>
        if (timeout != 0U) {
 800f10e:	b92c      	cbnz	r4, 800f11c <osMessageQueuePut+0x5a>
          stat = osErrorResource;
 800f110:	f06f 0002 	mvn.w	r0, #2
 800f114:	e7e6      	b.n	800f0e4 <osMessageQueuePut+0x22>
      stat = osErrorParameter;
 800f116:	f06f 0003 	mvn.w	r0, #3
 800f11a:	e7e3      	b.n	800f0e4 <osMessageQueuePut+0x22>
          stat = osErrorTimeout;
 800f11c:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800f120:	e7e0      	b.n	800f0e4 <osMessageQueuePut+0x22>

0800f122 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f122:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f124:	461c      	mov	r4, r3
 800f126:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800f12a:	b1c3      	cbz	r3, 800f15e <osMessageQueueGet+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f12c:	b310      	cbz	r0, 800f174 <osMessageQueueGet+0x52>
 800f12e:	b309      	cbz	r1, 800f174 <osMessageQueueGet+0x52>
 800f130:	bb04      	cbnz	r4, 800f174 <osMessageQueueGet+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f132:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800f134:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f136:	f000 ff6d 	bl	8010014 <xQueueReceiveFromISR>
 800f13a:	2801      	cmp	r0, #1
 800f13c:	d117      	bne.n	800f16e <osMessageQueueGet+0x4c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800f13e:	9b01      	ldr	r3, [sp, #4]
 800f140:	b913      	cbnz	r3, 800f148 <osMessageQueueGet+0x26>
  stat = osOK;
 800f142:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800f144:	b003      	add	sp, #12
 800f146:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800f148:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f14c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f150:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f154:	f3bf 8f4f 	dsb	sy
 800f158:	f3bf 8f6f 	isb	sy
 800f15c:	e7f1      	b.n	800f142 <osMessageQueueGet+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f15e:	b148      	cbz	r0, 800f174 <osMessageQueueGet+0x52>
 800f160:	b141      	cbz	r1, 800f174 <osMessageQueueGet+0x52>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f162:	4622      	mov	r2, r4
 800f164:	f000 fdf4 	bl	800fd50 <xQueueReceive>
 800f168:	2801      	cmp	r0, #1
 800f16a:	d0ea      	beq.n	800f142 <osMessageQueueGet+0x20>
        if (timeout != 0U) {
 800f16c:	b92c      	cbnz	r4, 800f17a <osMessageQueueGet+0x58>
          stat = osErrorResource;
 800f16e:	f06f 0002 	mvn.w	r0, #2
 800f172:	e7e7      	b.n	800f144 <osMessageQueueGet+0x22>
      stat = osErrorParameter;
 800f174:	f06f 0003 	mvn.w	r0, #3
 800f178:	e7e4      	b.n	800f144 <osMessageQueueGet+0x22>
          stat = osErrorTimeout;
 800f17a:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800f17e:	e7e1      	b.n	800f144 <osMessageQueueGet+0x22>

0800f180 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f180:	4b03      	ldr	r3, [pc, #12]	; (800f190 <vApplicationGetIdleTaskMemory+0x10>)
 800f182:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f184:	4b03      	ldr	r3, [pc, #12]	; (800f194 <vApplicationGetIdleTaskMemory+0x14>)
 800f186:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f188:	2380      	movs	r3, #128	; 0x80
 800f18a:	6013      	str	r3, [r2, #0]
}
 800f18c:	4770      	bx	lr
 800f18e:	bf00      	nop
 800f190:	24005f70 	.word	0x24005f70
 800f194:	24005d70 	.word	0x24005d70

0800f198 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f198:	4b03      	ldr	r3, [pc, #12]	; (800f1a8 <vApplicationGetTimerTaskMemory+0x10>)
 800f19a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f19c:	4b03      	ldr	r3, [pc, #12]	; (800f1ac <vApplicationGetTimerTaskMemory+0x14>)
 800f19e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f1a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f1a4:	6013      	str	r3, [r2, #0]
}
 800f1a6:	4770      	bx	lr
 800f1a8:	240063d4 	.word	0x240063d4
 800f1ac:	24005fd4 	.word	0x24005fd4

0800f1b0 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f1b0:	4b0f      	ldr	r3, [pc, #60]	; (800f1f0 <prvInsertBlockIntoFreeList+0x40>)
{
 800f1b2:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f1b4:	461a      	mov	r2, r3
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	4283      	cmp	r3, r0
 800f1ba:	d3fb      	bcc.n	800f1b4 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f1bc:	6854      	ldr	r4, [r2, #4]
 800f1be:	1911      	adds	r1, r2, r4
 800f1c0:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f1c2:	bf01      	itttt	eq
 800f1c4:	6841      	ldreq	r1, [r0, #4]
 800f1c6:	4610      	moveq	r0, r2
 800f1c8:	1909      	addeq	r1, r1, r4
 800f1ca:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f1cc:	6844      	ldr	r4, [r0, #4]
 800f1ce:	1901      	adds	r1, r0, r4
 800f1d0:	428b      	cmp	r3, r1
 800f1d2:	d107      	bne.n	800f1e4 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f1d4:	4907      	ldr	r1, [pc, #28]	; (800f1f4 <prvInsertBlockIntoFreeList+0x44>)
 800f1d6:	6809      	ldr	r1, [r1, #0]
 800f1d8:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f1da:	bf1f      	itttt	ne
 800f1dc:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f1de:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f1e0:	1909      	addne	r1, r1, r4
 800f1e2:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f1e4:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f1e6:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f1e8:	bf18      	it	ne
 800f1ea:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f1ec:	bd10      	pop	{r4, pc}
 800f1ee:	bf00      	nop
 800f1f0:	2400e44c 	.word	0x2400e44c
 800f1f4:	24006434 	.word	0x24006434

0800f1f8 <pvPortMalloc>:
{
 800f1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1fc:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800f1fe:	f001 f983 	bl	8010508 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800f202:	4842      	ldr	r0, [pc, #264]	; (800f30c <pvPortMalloc+0x114>)
 800f204:	4d42      	ldr	r5, [pc, #264]	; (800f310 <pvPortMalloc+0x118>)
 800f206:	6803      	ldr	r3, [r0, #0]
 800f208:	bb0b      	cbnz	r3, 800f24e <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800f20a:	4942      	ldr	r1, [pc, #264]	; (800f314 <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f20c:	074e      	lsls	r6, r1, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f20e:	4e42      	ldr	r6, [pc, #264]	; (800f318 <pvPortMalloc+0x120>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f210:	bf1b      	ittet	ne
 800f212:	1dcb      	addne	r3, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f214:	f501 4200 	addne.w	r2, r1, #32768	; 0x8000
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f218:	f44f 4200 	moveq.w	r2, #32768	; 0x8000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f21c:	f023 0307 	bicne.w	r3, r3, #7
 800f220:	bf1c      	itt	ne
 800f222:	4619      	movne	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f224:	1ad2      	subne	r2, r2, r3
	xStart.xBlockSize = ( size_t ) 0;
 800f226:	2300      	movs	r3, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f228:	440a      	add	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f22a:	6031      	str	r1, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f22c:	6073      	str	r3, [r6, #4]
	uxAddress -= xHeapStructSize;
 800f22e:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f230:	f022 0207 	bic.w	r2, r2, #7
	pxEnd->pxNextFreeBlock = NULL;
 800f234:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f238:	1a53      	subs	r3, r2, r1
	pxEnd = ( void * ) uxAddress;
 800f23a:	6002      	str	r2, [r0, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f23c:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f240:	4a36      	ldr	r2, [pc, #216]	; (800f31c <pvPortMalloc+0x124>)
 800f242:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f244:	4a36      	ldr	r2, [pc, #216]	; (800f320 <pvPortMalloc+0x128>)
 800f246:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f248:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f24c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f24e:	682f      	ldr	r7, [r5, #0]
 800f250:	4227      	tst	r7, r4
 800f252:	d155      	bne.n	800f300 <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 800f254:	2c00      	cmp	r4, #0
 800f256:	d046      	beq.n	800f2e6 <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 800f258:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f25c:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f25e:	bf1c      	itt	ne
 800f260:	f023 0307 	bicne.w	r3, r3, #7
 800f264:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f266:	2b00      	cmp	r3, #0
 800f268:	d04a      	beq.n	800f300 <pvPortMalloc+0x108>
 800f26a:	4c2d      	ldr	r4, [pc, #180]	; (800f320 <pvPortMalloc+0x128>)
 800f26c:	6826      	ldr	r6, [r4, #0]
 800f26e:	429e      	cmp	r6, r3
 800f270:	d346      	bcc.n	800f300 <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 800f272:	4a29      	ldr	r2, [pc, #164]	; (800f318 <pvPortMalloc+0x120>)
 800f274:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f276:	6869      	ldr	r1, [r5, #4]
 800f278:	4299      	cmp	r1, r3
 800f27a:	d204      	bcs.n	800f286 <pvPortMalloc+0x8e>
 800f27c:	f8d5 c000 	ldr.w	ip, [r5]
 800f280:	f1bc 0f00 	cmp.w	ip, #0
 800f284:	d115      	bne.n	800f2b2 <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 800f286:	6800      	ldr	r0, [r0, #0]
 800f288:	42a8      	cmp	r0, r5
 800f28a:	d039      	beq.n	800f300 <pvPortMalloc+0x108>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f28c:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f28e:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f290:	f8d2 8000 	ldr.w	r8, [r2]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f294:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f296:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f298:	d912      	bls.n	800f2c0 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f29a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f29c:	0742      	lsls	r2, r0, #29
 800f29e:	d00b      	beq.n	800f2b8 <pvPortMalloc+0xc0>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2a4:	f383 8811 	msr	BASEPRI, r3
 800f2a8:	f3bf 8f6f 	isb	sy
 800f2ac:	f3bf 8f4f 	dsb	sy
 800f2b0:	e7fe      	b.n	800f2b0 <pvPortMalloc+0xb8>
 800f2b2:	462a      	mov	r2, r5
 800f2b4:	4665      	mov	r5, ip
 800f2b6:	e7de      	b.n	800f276 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f2b8:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f2ba:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f2bc:	f7ff ff78 	bl	800f1b0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f2c0:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f2c2:	4916      	ldr	r1, [pc, #88]	; (800f31c <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f2c4:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f2c6:	431f      	orrs	r7, r3
					xNumberOfSuccessfulAllocations++;
 800f2c8:	4a16      	ldr	r2, [pc, #88]	; (800f324 <pvPortMalloc+0x12c>)
					pxBlock->pxNextFreeBlock = NULL;
 800f2ca:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f2cc:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 800f2ce:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800f2d0:	6813      	ldr	r3, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f2d2:	4286      	cmp	r6, r0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f2d4:	6026      	str	r6, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f2d6:	f108 0408 	add.w	r4, r8, #8
					xNumberOfSuccessfulAllocations++;
 800f2da:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f2de:	bf38      	it	cc
 800f2e0:	600e      	strcc	r6, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f2e2:	606f      	str	r7, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800f2e4:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800f2e6:	f001 f9b3 	bl	8010650 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f2ea:	0763      	lsls	r3, r4, #29
 800f2ec:	d00a      	beq.n	800f304 <pvPortMalloc+0x10c>
 800f2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2f2:	f383 8811 	msr	BASEPRI, r3
 800f2f6:	f3bf 8f6f 	isb	sy
 800f2fa:	f3bf 8f4f 	dsb	sy
 800f2fe:	e7fe      	b.n	800f2fe <pvPortMalloc+0x106>
void *pvReturn = NULL;
 800f300:	2400      	movs	r4, #0
 800f302:	e7f0      	b.n	800f2e6 <pvPortMalloc+0xee>
}
 800f304:	4620      	mov	r0, r4
 800f306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f30a:	bf00      	nop
 800f30c:	24006434 	.word	0x24006434
 800f310:	2400e438 	.word	0x2400e438
 800f314:	24006438 	.word	0x24006438
 800f318:	2400e44c 	.word	0x2400e44c
 800f31c:	2400e440 	.word	0x2400e440
 800f320:	2400e43c 	.word	0x2400e43c
 800f324:	2400e444 	.word	0x2400e444

0800f328 <vPortFree>:
{
 800f328:	b510      	push	{r4, lr}
	if( pv != NULL )
 800f32a:	4604      	mov	r4, r0
 800f32c:	b390      	cbz	r0, 800f394 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f32e:	4a1a      	ldr	r2, [pc, #104]	; (800f398 <vPortFree+0x70>)
 800f330:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800f334:	6812      	ldr	r2, [r2, #0]
 800f336:	4213      	tst	r3, r2
 800f338:	d108      	bne.n	800f34c <vPortFree+0x24>
 800f33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f33e:	f383 8811 	msr	BASEPRI, r3
 800f342:	f3bf 8f6f 	isb	sy
 800f346:	f3bf 8f4f 	dsb	sy
 800f34a:	e7fe      	b.n	800f34a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f34c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800f350:	b141      	cbz	r1, 800f364 <vPortFree+0x3c>
 800f352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f356:	f383 8811 	msr	BASEPRI, r3
 800f35a:	f3bf 8f6f 	isb	sy
 800f35e:	f3bf 8f4f 	dsb	sy
 800f362:	e7fe      	b.n	800f362 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f364:	ea23 0302 	bic.w	r3, r3, r2
 800f368:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800f36c:	f001 f8cc 	bl	8010508 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f370:	4a0a      	ldr	r2, [pc, #40]	; (800f39c <vPortFree+0x74>)
 800f372:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f376:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f37a:	6811      	ldr	r1, [r2, #0]
 800f37c:	440b      	add	r3, r1
 800f37e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f380:	f7ff ff16 	bl	800f1b0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f384:	4a06      	ldr	r2, [pc, #24]	; (800f3a0 <vPortFree+0x78>)
 800f386:	6813      	ldr	r3, [r2, #0]
 800f388:	3301      	adds	r3, #1
}
 800f38a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800f38e:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800f390:	f001 b95e 	b.w	8010650 <xTaskResumeAll>
}
 800f394:	bd10      	pop	{r4, pc}
 800f396:	bf00      	nop
 800f398:	2400e438 	.word	0x2400e438
 800f39c:	2400e43c 	.word	0x2400e43c
 800f3a0:	2400e448 	.word	0x2400e448

0800f3a4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f3a4:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f3a8:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f3ac:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f3ae:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f3b0:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f3b8:	4770      	bx	lr

0800f3ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f3be:	4770      	bx	lr

0800f3c0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800f3c0:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f3c2:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800f3c4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f3c6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f3c8:	689a      	ldr	r2, [r3, #8]
 800f3ca:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f3cc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800f3ce:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800f3d0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800f3d2:	3301      	adds	r3, #1
 800f3d4:	6003      	str	r3, [r0, #0]
}
 800f3d6:	4770      	bx	lr

0800f3d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f3d8:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f3da:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f3dc:	1c63      	adds	r3, r4, #1
 800f3de:	d10a      	bne.n	800f3f6 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f3e0:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f3e2:	685a      	ldr	r2, [r3, #4]
 800f3e4:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f3e6:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f3e8:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800f3ea:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800f3ec:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800f3ee:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800f3f0:	3301      	adds	r3, #1
 800f3f2:	6003      	str	r3, [r0, #0]
}
 800f3f4:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f3f6:	f100 0208 	add.w	r2, r0, #8
 800f3fa:	4613      	mov	r3, r2
 800f3fc:	6852      	ldr	r2, [r2, #4]
 800f3fe:	6815      	ldr	r5, [r2, #0]
 800f400:	42a5      	cmp	r5, r4
 800f402:	d9fa      	bls.n	800f3fa <vListInsert+0x22>
 800f404:	e7ed      	b.n	800f3e2 <vListInsert+0xa>

0800f406 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f406:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f408:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800f40c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f40e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f410:	6859      	ldr	r1, [r3, #4]
 800f412:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f414:	bf08      	it	eq
 800f416:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f418:	2200      	movs	r2, #0
 800f41a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800f41c:	681a      	ldr	r2, [r3, #0]
 800f41e:	3a01      	subs	r2, #1
 800f420:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f422:	6818      	ldr	r0, [r3, #0]
}
 800f424:	4770      	bx	lr
	...

0800f428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f428:	4808      	ldr	r0, [pc, #32]	; (800f44c <prvPortStartFirstTask+0x24>)
 800f42a:	6800      	ldr	r0, [r0, #0]
 800f42c:	6800      	ldr	r0, [r0, #0]
 800f42e:	f380 8808 	msr	MSP, r0
 800f432:	f04f 0000 	mov.w	r0, #0
 800f436:	f380 8814 	msr	CONTROL, r0
 800f43a:	b662      	cpsie	i
 800f43c:	b661      	cpsie	f
 800f43e:	f3bf 8f4f 	dsb	sy
 800f442:	f3bf 8f6f 	isb	sy
 800f446:	df00      	svc	0
 800f448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f44a:	0000      	.short	0x0000
 800f44c:	e000ed08 	.word	0xe000ed08

0800f450 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f450:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f460 <vPortEnableVFP+0x10>
 800f454:	6801      	ldr	r1, [r0, #0]
 800f456:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f45a:	6001      	str	r1, [r0, #0]
 800f45c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f45e:	0000      	.short	0x0000
 800f460:	e000ed88 	.word	0xe000ed88

0800f464 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800f464:	2300      	movs	r3, #0
{
 800f466:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800f468:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800f46a:	4b0d      	ldr	r3, [pc, #52]	; (800f4a0 <prvTaskExitError+0x3c>)
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	3301      	adds	r3, #1
 800f470:	d008      	beq.n	800f484 <prvTaskExitError+0x20>
 800f472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f476:	f383 8811 	msr	BASEPRI, r3
 800f47a:	f3bf 8f6f 	isb	sy
 800f47e:	f3bf 8f4f 	dsb	sy
 800f482:	e7fe      	b.n	800f482 <prvTaskExitError+0x1e>
 800f484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f488:	f383 8811 	msr	BASEPRI, r3
 800f48c:	f3bf 8f6f 	isb	sy
 800f490:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800f494:	9b01      	ldr	r3, [sp, #4]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d0fc      	beq.n	800f494 <prvTaskExitError+0x30>
}
 800f49a:	b002      	add	sp, #8
 800f49c:	4770      	bx	lr
 800f49e:	bf00      	nop
 800f4a0:	24000058 	.word	0x24000058

0800f4a4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f4a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f4a8:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f4ac:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800f4b0:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f4b2:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f4b4:	4b03      	ldr	r3, [pc, #12]	; (800f4c4 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f4b6:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f4b8:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f4ba:	f06f 0302 	mvn.w	r3, #2
 800f4be:	6203      	str	r3, [r0, #32]
}
 800f4c0:	4770      	bx	lr
 800f4c2:	bf00      	nop
 800f4c4:	0800f465 	.word	0x0800f465
	...

0800f4d0 <SVC_Handler>:
	__asm volatile (
 800f4d0:	4b07      	ldr	r3, [pc, #28]	; (800f4f0 <pxCurrentTCBConst2>)
 800f4d2:	6819      	ldr	r1, [r3, #0]
 800f4d4:	6808      	ldr	r0, [r1, #0]
 800f4d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4da:	f380 8809 	msr	PSP, r0
 800f4de:	f3bf 8f6f 	isb	sy
 800f4e2:	f04f 0000 	mov.w	r0, #0
 800f4e6:	f380 8811 	msr	BASEPRI, r0
 800f4ea:	4770      	bx	lr
 800f4ec:	f3af 8000 	nop.w

0800f4f0 <pxCurrentTCBConst2>:
 800f4f0:	2400e49c 	.word	0x2400e49c

0800f4f4 <vPortEnterCritical>:
 800f4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4f8:	f383 8811 	msr	BASEPRI, r3
 800f4fc:	f3bf 8f6f 	isb	sy
 800f500:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800f504:	4a0a      	ldr	r2, [pc, #40]	; (800f530 <vPortEnterCritical+0x3c>)
 800f506:	6813      	ldr	r3, [r2, #0]
 800f508:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800f50a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800f50c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800f50e:	d10e      	bne.n	800f52e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f510:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f514:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800f518:	b2db      	uxtb	r3, r3
 800f51a:	b143      	cbz	r3, 800f52e <vPortEnterCritical+0x3a>
 800f51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f520:	f383 8811 	msr	BASEPRI, r3
 800f524:	f3bf 8f6f 	isb	sy
 800f528:	f3bf 8f4f 	dsb	sy
 800f52c:	e7fe      	b.n	800f52c <vPortEnterCritical+0x38>
}
 800f52e:	4770      	bx	lr
 800f530:	24000058 	.word	0x24000058

0800f534 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800f534:	4a08      	ldr	r2, [pc, #32]	; (800f558 <vPortExitCritical+0x24>)
 800f536:	6813      	ldr	r3, [r2, #0]
 800f538:	b943      	cbnz	r3, 800f54c <vPortExitCritical+0x18>
 800f53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f53e:	f383 8811 	msr	BASEPRI, r3
 800f542:	f3bf 8f6f 	isb	sy
 800f546:	f3bf 8f4f 	dsb	sy
 800f54a:	e7fe      	b.n	800f54a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800f54c:	3b01      	subs	r3, #1
 800f54e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f550:	b90b      	cbnz	r3, 800f556 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f552:	f383 8811 	msr	BASEPRI, r3
}
 800f556:	4770      	bx	lr
 800f558:	24000058 	.word	0x24000058
 800f55c:	00000000 	.word	0x00000000

0800f560 <PendSV_Handler>:
	__asm volatile
 800f560:	f3ef 8009 	mrs	r0, PSP
 800f564:	f3bf 8f6f 	isb	sy
 800f568:	4b15      	ldr	r3, [pc, #84]	; (800f5c0 <pxCurrentTCBConst>)
 800f56a:	681a      	ldr	r2, [r3, #0]
 800f56c:	f01e 0f10 	tst.w	lr, #16
 800f570:	bf08      	it	eq
 800f572:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f576:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f57a:	6010      	str	r0, [r2, #0]
 800f57c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f580:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f584:	f380 8811 	msr	BASEPRI, r0
 800f588:	f3bf 8f4f 	dsb	sy
 800f58c:	f3bf 8f6f 	isb	sy
 800f590:	f001 f93c 	bl	801080c <vTaskSwitchContext>
 800f594:	f04f 0000 	mov.w	r0, #0
 800f598:	f380 8811 	msr	BASEPRI, r0
 800f59c:	bc09      	pop	{r0, r3}
 800f59e:	6819      	ldr	r1, [r3, #0]
 800f5a0:	6808      	ldr	r0, [r1, #0]
 800f5a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5a6:	f01e 0f10 	tst.w	lr, #16
 800f5aa:	bf08      	it	eq
 800f5ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f5b0:	f380 8809 	msr	PSP, r0
 800f5b4:	f3bf 8f6f 	isb	sy
 800f5b8:	4770      	bx	lr
 800f5ba:	bf00      	nop
 800f5bc:	f3af 8000 	nop.w

0800f5c0 <pxCurrentTCBConst>:
 800f5c0:	2400e49c 	.word	0x2400e49c

0800f5c4 <xPortSysTickHandler>:
{
 800f5c4:	b508      	push	{r3, lr}
	__asm volatile
 800f5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ca:	f383 8811 	msr	BASEPRI, r3
 800f5ce:	f3bf 8f6f 	isb	sy
 800f5d2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800f5d6:	f000 ffa5 	bl	8010524 <xTaskIncrementTick>
 800f5da:	b128      	cbz	r0, 800f5e8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f5dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f5e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	f383 8811 	msr	BASEPRI, r3
}
 800f5ee:	bd08      	pop	{r3, pc}

0800f5f0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f5f0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800f5f4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f5f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f5fa:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f5fc:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f5fe:	4b04      	ldr	r3, [pc, #16]	; (800f610 <vPortSetupTimerInterrupt+0x20>)
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	fbb3 f3f1 	udiv	r3, r3, r1
 800f606:	3b01      	subs	r3, #1
 800f608:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f60a:	2307      	movs	r3, #7
 800f60c:	6113      	str	r3, [r2, #16]
}
 800f60e:	4770      	bx	lr
 800f610:	24000048 	.word	0x24000048

0800f614 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f614:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 800f618:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f61a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 800f61e:	4a3a      	ldr	r2, [pc, #232]	; (800f708 <xPortStartScheduler+0xf4>)
 800f620:	4291      	cmp	r1, r2
 800f622:	d108      	bne.n	800f636 <xPortStartScheduler+0x22>
	__asm volatile
 800f624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f628:	f383 8811 	msr	BASEPRI, r3
 800f62c:	f3bf 8f6f 	isb	sy
 800f630:	f3bf 8f4f 	dsb	sy
 800f634:	e7fe      	b.n	800f634 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f636:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800f63a:	4b34      	ldr	r3, [pc, #208]	; (800f70c <xPortStartScheduler+0xf8>)
 800f63c:	429a      	cmp	r2, r3
 800f63e:	d108      	bne.n	800f652 <xPortStartScheduler+0x3e>
 800f640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f644:	f383 8811 	msr	BASEPRI, r3
 800f648:	f3bf 8f6f 	isb	sy
 800f64c:	f3bf 8f4f 	dsb	sy
 800f650:	e7fe      	b.n	800f650 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f652:	4b2f      	ldr	r3, [pc, #188]	; (800f710 <xPortStartScheduler+0xfc>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f654:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f656:	781a      	ldrb	r2, [r3, #0]
 800f658:	b2d2      	uxtb	r2, r2
 800f65a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f65c:	22ff      	movs	r2, #255	; 0xff
 800f65e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f660:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f662:	4a2c      	ldr	r2, [pc, #176]	; (800f714 <xPortStartScheduler+0x100>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f664:	b2db      	uxtb	r3, r3
 800f666:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f66a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f66e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f672:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f674:	2307      	movs	r3, #7
 800f676:	4a28      	ldr	r2, [pc, #160]	; (800f718 <xPortStartScheduler+0x104>)
 800f678:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f67a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800f67e:	1e5c      	subs	r4, r3, #1
 800f680:	0600      	lsls	r0, r0, #24
 800f682:	d40c      	bmi.n	800f69e <xPortStartScheduler+0x8a>
 800f684:	b111      	cbz	r1, 800f68c <xPortStartScheduler+0x78>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f686:	2b03      	cmp	r3, #3
 800f688:	6013      	str	r3, [r2, #0]
 800f68a:	d011      	beq.n	800f6b0 <xPortStartScheduler+0x9c>
 800f68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f690:	f383 8811 	msr	BASEPRI, r3
 800f694:	f3bf 8f6f 	isb	sy
 800f698:	f3bf 8f4f 	dsb	sy
 800f69c:	e7fe      	b.n	800f69c <xPortStartScheduler+0x88>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f69e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f6a2:	2101      	movs	r1, #1
 800f6a4:	005b      	lsls	r3, r3, #1
 800f6a6:	b2db      	uxtb	r3, r3
 800f6a8:	f88d 3003 	strb.w	r3, [sp, #3]
 800f6ac:	4623      	mov	r3, r4
 800f6ae:	e7e4      	b.n	800f67a <xPortStartScheduler+0x66>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f6b0:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f6b4:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 800f6b8:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f6ba:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f6bc:	9b01      	ldr	r3, [sp, #4]
 800f6be:	4a14      	ldr	r2, [pc, #80]	; (800f710 <xPortStartScheduler+0xfc>)
 800f6c0:	b2db      	uxtb	r3, r3
 800f6c2:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f6c4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800f6c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f6cc:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f6d0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800f6d4:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f6d8:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800f6dc:	f7ff ff88 	bl	800f5f0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800f6e0:	4b0e      	ldr	r3, [pc, #56]	; (800f71c <xPortStartScheduler+0x108>)
 800f6e2:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800f6e4:	f7ff feb4 	bl	800f450 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f6e8:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800f6ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f6f0:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 800f6f4:	f7ff fe98 	bl	800f428 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800f6f8:	f001 f888 	bl	801080c <vTaskSwitchContext>
}
 800f6fc:	4628      	mov	r0, r5
	prvTaskExitError();
 800f6fe:	f7ff feb1 	bl	800f464 <prvTaskExitError>
}
 800f702:	b003      	add	sp, #12
 800f704:	bd30      	pop	{r4, r5, pc}
 800f706:	bf00      	nop
 800f708:	410fc271 	.word	0x410fc271
 800f70c:	410fc270 	.word	0x410fc270
 800f710:	e000e400 	.word	0xe000e400
 800f714:	2400e454 	.word	0x2400e454
 800f718:	2400e458 	.word	0x2400e458
 800f71c:	24000058 	.word	0x24000058

0800f720 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f720:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f724:	2b0f      	cmp	r3, #15
 800f726:	d90e      	bls.n	800f746 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f728:	4a11      	ldr	r2, [pc, #68]	; (800f770 <vPortValidateInterruptPriority+0x50>)
 800f72a:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f72c:	4a11      	ldr	r2, [pc, #68]	; (800f774 <vPortValidateInterruptPriority+0x54>)
 800f72e:	7812      	ldrb	r2, [r2, #0]
 800f730:	429a      	cmp	r2, r3
 800f732:	d908      	bls.n	800f746 <vPortValidateInterruptPriority+0x26>
 800f734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f738:	f383 8811 	msr	BASEPRI, r3
 800f73c:	f3bf 8f6f 	isb	sy
 800f740:	f3bf 8f4f 	dsb	sy
 800f744:	e7fe      	b.n	800f744 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f746:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f74a:	4a0b      	ldr	r2, [pc, #44]	; (800f778 <vPortValidateInterruptPriority+0x58>)
 800f74c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800f750:	6812      	ldr	r2, [r2, #0]
 800f752:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f756:	4293      	cmp	r3, r2
 800f758:	d908      	bls.n	800f76c <vPortValidateInterruptPriority+0x4c>
 800f75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f75e:	f383 8811 	msr	BASEPRI, r3
 800f762:	f3bf 8f6f 	isb	sy
 800f766:	f3bf 8f4f 	dsb	sy
 800f76a:	e7fe      	b.n	800f76a <vPortValidateInterruptPriority+0x4a>
	}
 800f76c:	4770      	bx	lr
 800f76e:	bf00      	nop
 800f770:	e000e3f0 	.word	0xe000e3f0
 800f774:	2400e454 	.word	0x2400e454
 800f778:	2400e458 	.word	0x2400e458

0800f77c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f77c:	b510      	push	{r4, lr}
 800f77e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f780:	f7ff feb8 	bl	800f4f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f784:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800f786:	f7ff fed5 	bl	800f534 <vPortExitCritical>

	return xReturn;
}
 800f78a:	fab4 f084 	clz	r0, r4
 800f78e:	0940      	lsrs	r0, r0, #5
 800f790:	bd10      	pop	{r4, pc}

0800f792 <prvCopyDataToQueue>:
{
 800f792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f794:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f796:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800f798:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f79a:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f79c:	b952      	cbnz	r2, 800f7b4 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f79e:	6807      	ldr	r7, [r0, #0]
 800f7a0:	bb47      	cbnz	r7, 800f7f4 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f7a2:	6880      	ldr	r0, [r0, #8]
 800f7a4:	f001 f990 	bl	8010ac8 <xTaskPriorityDisinherit>
 800f7a8:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f7aa:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f7ac:	3601      	adds	r6, #1
}
 800f7ae:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f7b0:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800f7b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800f7b4:	b965      	cbnz	r5, 800f7d0 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f7b6:	6840      	ldr	r0, [r0, #4]
 800f7b8:	f013 fbf0 	bl	8022f9c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f7bc:	6863      	ldr	r3, [r4, #4]
 800f7be:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f7c0:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f7c2:	68a2      	ldr	r2, [r4, #8]
 800f7c4:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f7c6:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f7c8:	d3f0      	bcc.n	800f7ac <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f7ca:	6823      	ldr	r3, [r4, #0]
 800f7cc:	6063      	str	r3, [r4, #4]
 800f7ce:	e7ed      	b.n	800f7ac <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f7d0:	68c0      	ldr	r0, [r0, #12]
 800f7d2:	f013 fbe3 	bl	8022f9c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f7d6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f7d8:	68e3      	ldr	r3, [r4, #12]
 800f7da:	4251      	negs	r1, r2
 800f7dc:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f7de:	6822      	ldr	r2, [r4, #0]
 800f7e0:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f7e2:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f7e4:	bf3e      	ittt	cc
 800f7e6:	68a3      	ldrcc	r3, [r4, #8]
 800f7e8:	185b      	addcc	r3, r3, r1
 800f7ea:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800f7ec:	2d02      	cmp	r5, #2
 800f7ee:	d101      	bne.n	800f7f4 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f7f0:	b116      	cbz	r6, 800f7f8 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 800f7f2:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800f7f4:	2500      	movs	r5, #0
 800f7f6:	e7d9      	b.n	800f7ac <prvCopyDataToQueue+0x1a>
 800f7f8:	4635      	mov	r5, r6
 800f7fa:	e7d7      	b.n	800f7ac <prvCopyDataToQueue+0x1a>

0800f7fc <prvCopyDataFromQueue>:
{
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f800:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800f802:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f804:	b162      	cbz	r2, 800f820 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f806:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f808:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f80a:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f80c:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f80e:	60dc      	str	r4, [r3, #12]
}
 800f810:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f814:	bf24      	itt	cs
 800f816:	6819      	ldrcs	r1, [r3, #0]
 800f818:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f81a:	68d9      	ldr	r1, [r3, #12]
 800f81c:	f013 bbbe 	b.w	8022f9c <memcpy>
}
 800f820:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f824:	4770      	bx	lr

0800f826 <prvUnlockQueue>:
{
 800f826:	b570      	push	{r4, r5, r6, lr}
 800f828:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800f82a:	f7ff fe63 	bl	800f4f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800f82e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f832:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800f836:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f838:	2d00      	cmp	r5, #0
 800f83a:	dc14      	bgt.n	800f866 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800f83c:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f83e:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800f842:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800f846:	f7ff fe75 	bl	800f534 <vPortExitCritical>
	taskENTER_CRITICAL();
 800f84a:	f7ff fe53 	bl	800f4f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800f84e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800f852:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f854:	2d00      	cmp	r5, #0
 800f856:	dc12      	bgt.n	800f87e <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800f858:	23ff      	movs	r3, #255	; 0xff
 800f85a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800f85e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800f862:	f7ff be67 	b.w	800f534 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f866:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d0e7      	beq.n	800f83c <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f86c:	4630      	mov	r0, r6
 800f86e:	f001 f849 	bl	8010904 <xTaskRemoveFromEventList>
 800f872:	b108      	cbz	r0, 800f878 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800f874:	f001 f8d2 	bl	8010a1c <vTaskMissedYield>
			--cTxLock;
 800f878:	3d01      	subs	r5, #1
 800f87a:	b26d      	sxtb	r5, r5
 800f87c:	e7dc      	b.n	800f838 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f87e:	6923      	ldr	r3, [r4, #16]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d0e9      	beq.n	800f858 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f884:	4630      	mov	r0, r6
 800f886:	f001 f83d 	bl	8010904 <xTaskRemoveFromEventList>
 800f88a:	b108      	cbz	r0, 800f890 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800f88c:	f001 f8c6 	bl	8010a1c <vTaskMissedYield>
				--cRxLock;
 800f890:	3d01      	subs	r5, #1
 800f892:	b26d      	sxtb	r5, r5
 800f894:	e7de      	b.n	800f854 <prvUnlockQueue+0x2e>

0800f896 <xQueueGenericReset>:
{
 800f896:	b538      	push	{r3, r4, r5, lr}
 800f898:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800f89a:	4604      	mov	r4, r0
 800f89c:	b940      	cbnz	r0, 800f8b0 <xQueueGenericReset+0x1a>
 800f89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8a2:	f383 8811 	msr	BASEPRI, r3
 800f8a6:	f3bf 8f6f 	isb	sy
 800f8aa:	f3bf 8f4f 	dsb	sy
 800f8ae:	e7fe      	b.n	800f8ae <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800f8b0:	f7ff fe20 	bl	800f4f4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f8b4:	6822      	ldr	r2, [r4, #0]
 800f8b6:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f8ba:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f8bc:	434b      	muls	r3, r1
 800f8be:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f8c0:	1a5b      	subs	r3, r3, r1
 800f8c2:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f8c4:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f8c6:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f8c8:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f8ca:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f8cc:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800f8ce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f8d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800f8d6:	b9a5      	cbnz	r5, 800f902 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f8d8:	6923      	ldr	r3, [r4, #16]
 800f8da:	b173      	cbz	r3, 800f8fa <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f8dc:	f104 0010 	add.w	r0, r4, #16
 800f8e0:	f001 f810 	bl	8010904 <xTaskRemoveFromEventList>
 800f8e4:	b148      	cbz	r0, 800f8fa <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800f8e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f8ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8ee:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f8f2:	f3bf 8f4f 	dsb	sy
 800f8f6:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800f8fa:	f7ff fe1b 	bl	800f534 <vPortExitCritical>
}
 800f8fe:	2001      	movs	r0, #1
 800f900:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f902:	f104 0010 	add.w	r0, r4, #16
 800f906:	f7ff fd4d 	bl	800f3a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f90a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800f90e:	f7ff fd49 	bl	800f3a4 <vListInitialise>
 800f912:	e7f2      	b.n	800f8fa <xQueueGenericReset+0x64>

0800f914 <xQueueGenericCreateStatic>:
	{
 800f914:	b513      	push	{r0, r1, r4, lr}
 800f916:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f918:	b940      	cbnz	r0, 800f92c <xQueueGenericCreateStatic+0x18>
 800f91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f91e:	f383 8811 	msr	BASEPRI, r3
 800f922:	f3bf 8f6f 	isb	sy
 800f926:	f3bf 8f4f 	dsb	sy
 800f92a:	e7fe      	b.n	800f92a <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 800f92c:	b943      	cbnz	r3, 800f940 <xQueueGenericCreateStatic+0x2c>
 800f92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f932:	f383 8811 	msr	BASEPRI, r3
 800f936:	f3bf 8f6f 	isb	sy
 800f93a:	f3bf 8f4f 	dsb	sy
 800f93e:	e7fe      	b.n	800f93e <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f940:	b14a      	cbz	r2, 800f956 <xQueueGenericCreateStatic+0x42>
 800f942:	b991      	cbnz	r1, 800f96a <xQueueGenericCreateStatic+0x56>
 800f944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f948:	f383 8811 	msr	BASEPRI, r3
 800f94c:	f3bf 8f6f 	isb	sy
 800f950:	f3bf 8f4f 	dsb	sy
 800f954:	e7fe      	b.n	800f954 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f956:	b141      	cbz	r1, 800f96a <xQueueGenericCreateStatic+0x56>
 800f958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f95c:	f383 8811 	msr	BASEPRI, r3
 800f960:	f3bf 8f6f 	isb	sy
 800f964:	f3bf 8f4f 	dsb	sy
 800f968:	e7fe      	b.n	800f968 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f96a:	2350      	movs	r3, #80	; 0x50
 800f96c:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f96e:	9b01      	ldr	r3, [sp, #4]
 800f970:	2b50      	cmp	r3, #80	; 0x50
 800f972:	d008      	beq.n	800f986 <xQueueGenericCreateStatic+0x72>
 800f974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f978:	f383 8811 	msr	BASEPRI, r3
 800f97c:	f3bf 8f6f 	isb	sy
 800f980:	f3bf 8f4f 	dsb	sy
 800f984:	e7fe      	b.n	800f984 <xQueueGenericCreateStatic+0x70>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800f986:	2900      	cmp	r1, #0
 800f988:	bf08      	it	eq
 800f98a:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f98c:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f98e:	2301      	movs	r3, #1
 800f990:	6022      	str	r2, [r4, #0]
 800f992:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800f996:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f99a:	4619      	mov	r1, r3
 800f99c:	4620      	mov	r0, r4
 800f99e:	f7ff ff7a 	bl	800f896 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800f9a2:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 800f9a6:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800f9a8:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 800f9ac:	b002      	add	sp, #8
 800f9ae:	bd10      	pop	{r4, pc}

0800f9b0 <xQueueGenericCreate>:
	{
 800f9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9b2:	460d      	mov	r5, r1
 800f9b4:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f9b6:	4606      	mov	r6, r0
 800f9b8:	b940      	cbnz	r0, 800f9cc <xQueueGenericCreate+0x1c>
 800f9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9be:	f383 8811 	msr	BASEPRI, r3
 800f9c2:	f3bf 8f6f 	isb	sy
 800f9c6:	f3bf 8f4f 	dsb	sy
 800f9ca:	e7fe      	b.n	800f9ca <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f9cc:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f9ce:	3050      	adds	r0, #80	; 0x50
 800f9d0:	f7ff fc12 	bl	800f1f8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800f9d4:	4604      	mov	r4, r0
 800f9d6:	b170      	cbz	r0, 800f9f6 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f9d8:	2300      	movs	r3, #0
 800f9da:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800f9de:	b165      	cbz	r5, 800f9fa <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f9e0:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f9e4:	2101      	movs	r1, #1
 800f9e6:	4620      	mov	r0, r4
 800f9e8:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800f9ea:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f9ee:	f7ff ff52 	bl	800f896 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800f9f2:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 800f9f6:	4620      	mov	r0, r4
 800f9f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	e7f2      	b.n	800f9e4 <xQueueGenericCreate+0x34>

0800f9fe <xQueueCreateCountingSemaphoreStatic>:
	{
 800f9fe:	b513      	push	{r0, r1, r4, lr}
 800fa00:	4613      	mov	r3, r2
 800fa02:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800fa04:	b940      	cbnz	r0, 800fa18 <xQueueCreateCountingSemaphoreStatic+0x1a>
 800fa06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa0a:	f383 8811 	msr	BASEPRI, r3
 800fa0e:	f3bf 8f6f 	isb	sy
 800fa12:	f3bf 8f4f 	dsb	sy
 800fa16:	e7fe      	b.n	800fa16 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fa18:	4288      	cmp	r0, r1
 800fa1a:	d208      	bcs.n	800fa2e <xQueueCreateCountingSemaphoreStatic+0x30>
 800fa1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa20:	f383 8811 	msr	BASEPRI, r3
 800fa24:	f3bf 8f6f 	isb	sy
 800fa28:	f3bf 8f4f 	dsb	sy
 800fa2c:	e7fe      	b.n	800fa2c <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fa2e:	2202      	movs	r2, #2
 800fa30:	9200      	str	r2, [sp, #0]
 800fa32:	2200      	movs	r2, #0
 800fa34:	4611      	mov	r1, r2
 800fa36:	f7ff ff6d 	bl	800f914 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800fa3a:	b100      	cbz	r0, 800fa3e <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fa3c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800fa3e:	b002      	add	sp, #8
 800fa40:	bd10      	pop	{r4, pc}

0800fa42 <xQueueCreateCountingSemaphore>:
	{
 800fa42:	b510      	push	{r4, lr}
 800fa44:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800fa46:	b940      	cbnz	r0, 800fa5a <xQueueCreateCountingSemaphore+0x18>
 800fa48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa4c:	f383 8811 	msr	BASEPRI, r3
 800fa50:	f3bf 8f6f 	isb	sy
 800fa54:	f3bf 8f4f 	dsb	sy
 800fa58:	e7fe      	b.n	800fa58 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fa5a:	4288      	cmp	r0, r1
 800fa5c:	d208      	bcs.n	800fa70 <xQueueCreateCountingSemaphore+0x2e>
 800fa5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa62:	f383 8811 	msr	BASEPRI, r3
 800fa66:	f3bf 8f6f 	isb	sy
 800fa6a:	f3bf 8f4f 	dsb	sy
 800fa6e:	e7fe      	b.n	800fa6e <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fa70:	2202      	movs	r2, #2
 800fa72:	2100      	movs	r1, #0
 800fa74:	f7ff ff9c 	bl	800f9b0 <xQueueGenericCreate>
		if( xHandle != NULL )
 800fa78:	b100      	cbz	r0, 800fa7c <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fa7a:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800fa7c:	bd10      	pop	{r4, pc}

0800fa7e <xQueueGenericSend>:
{
 800fa7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa82:	b085      	sub	sp, #20
 800fa84:	4688      	mov	r8, r1
 800fa86:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800fa88:	4604      	mov	r4, r0
{
 800fa8a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800fa8c:	b940      	cbnz	r0, 800faa0 <xQueueGenericSend+0x22>
 800fa8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa92:	f383 8811 	msr	BASEPRI, r3
 800fa96:	f3bf 8f6f 	isb	sy
 800fa9a:	f3bf 8f4f 	dsb	sy
 800fa9e:	e7fe      	b.n	800fa9e <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800faa0:	b951      	cbnz	r1, 800fab8 <xQueueGenericSend+0x3a>
 800faa2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800faa4:	b143      	cbz	r3, 800fab8 <xQueueGenericSend+0x3a>
 800faa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faaa:	f383 8811 	msr	BASEPRI, r3
 800faae:	f3bf 8f6f 	isb	sy
 800fab2:	f3bf 8f4f 	dsb	sy
 800fab6:	e7fe      	b.n	800fab6 <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fab8:	2f02      	cmp	r7, #2
 800faba:	d10b      	bne.n	800fad4 <xQueueGenericSend+0x56>
 800fabc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fabe:	2b01      	cmp	r3, #1
 800fac0:	d008      	beq.n	800fad4 <xQueueGenericSend+0x56>
 800fac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fac6:	f383 8811 	msr	BASEPRI, r3
 800faca:	f3bf 8f6f 	isb	sy
 800face:	f3bf 8f4f 	dsb	sy
 800fad2:	e7fe      	b.n	800fad2 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fad4:	f000 ffa8 	bl	8010a28 <xTaskGetSchedulerState>
 800fad8:	4606      	mov	r6, r0
 800fada:	b950      	cbnz	r0, 800faf2 <xQueueGenericSend+0x74>
 800fadc:	9b01      	ldr	r3, [sp, #4]
 800fade:	b14b      	cbz	r3, 800faf4 <xQueueGenericSend+0x76>
 800fae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fae4:	f383 8811 	msr	BASEPRI, r3
 800fae8:	f3bf 8f6f 	isb	sy
 800faec:	f3bf 8f4f 	dsb	sy
 800faf0:	e7fe      	b.n	800faf0 <xQueueGenericSend+0x72>
 800faf2:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800faf4:	f04f 0900 	mov.w	r9, #0
 800faf8:	e037      	b.n	800fb6a <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 800fafa:	9d01      	ldr	r5, [sp, #4]
 800fafc:	b91d      	cbnz	r5, 800fb06 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 800fafe:	f7ff fd19 	bl	800f534 <vPortExitCritical>
			return errQUEUE_FULL;
 800fb02:	2000      	movs	r0, #0
 800fb04:	e052      	b.n	800fbac <xQueueGenericSend+0x12e>
				else if( xEntryTimeSet == pdFALSE )
 800fb06:	b916      	cbnz	r6, 800fb0e <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fb08:	a802      	add	r0, sp, #8
 800fb0a:	f000 ff3f 	bl	801098c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800fb0e:	f7ff fd11 	bl	800f534 <vPortExitCritical>
		vTaskSuspendAll();
 800fb12:	f000 fcf9 	bl	8010508 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fb16:	f7ff fced 	bl	800f4f4 <vPortEnterCritical>
 800fb1a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800fb1e:	2bff      	cmp	r3, #255	; 0xff
 800fb20:	d101      	bne.n	800fb26 <xQueueGenericSend+0xa8>
 800fb22:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 800fb26:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800fb2a:	2bff      	cmp	r3, #255	; 0xff
 800fb2c:	d101      	bne.n	800fb32 <xQueueGenericSend+0xb4>
 800fb2e:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 800fb32:	f7ff fcff 	bl	800f534 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fb36:	a901      	add	r1, sp, #4
 800fb38:	a802      	add	r0, sp, #8
 800fb3a:	f000 ff33 	bl	80109a4 <xTaskCheckForTimeOut>
 800fb3e:	2800      	cmp	r0, #0
 800fb40:	d14a      	bne.n	800fbd8 <xQueueGenericSend+0x15a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fb42:	f7ff fcd7 	bl	800f4f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fb46:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800fb48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fb4a:	429a      	cmp	r2, r3
 800fb4c:	d131      	bne.n	800fbb2 <xQueueGenericSend+0x134>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800fb4e:	f7ff fcf1 	bl	800f534 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fb52:	9901      	ldr	r1, [sp, #4]
 800fb54:	f104 0010 	add.w	r0, r4, #16
 800fb58:	f000 fe9c 	bl	8010894 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fb5c:	4620      	mov	r0, r4
 800fb5e:	f7ff fe62 	bl	800f826 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fb62:	f000 fd75 	bl	8010650 <xTaskResumeAll>
 800fb66:	b360      	cbz	r0, 800fbc2 <xQueueGenericSend+0x144>
 800fb68:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800fb6a:	f7ff fcc3 	bl	800f4f4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fb6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800fb70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fb72:	429a      	cmp	r2, r3
 800fb74:	d301      	bcc.n	800fb7a <xQueueGenericSend+0xfc>
 800fb76:	2f02      	cmp	r7, #2
 800fb78:	d1bf      	bne.n	800fafa <xQueueGenericSend+0x7c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fb7a:	463a      	mov	r2, r7
 800fb7c:	4641      	mov	r1, r8
 800fb7e:	4620      	mov	r0, r4
 800fb80:	f7ff fe07 	bl	800f792 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fb84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb86:	b11b      	cbz	r3, 800fb90 <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fb88:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fb8c:	f000 feba 	bl	8010904 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800fb90:	b148      	cbz	r0, 800fba6 <xQueueGenericSend+0x128>
						queueYIELD_IF_USING_PREEMPTION();
 800fb92:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800fb96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb9a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800fb9e:	f3bf 8f4f 	dsb	sy
 800fba2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800fba6:	f7ff fcc5 	bl	800f534 <vPortExitCritical>
				return pdPASS;
 800fbaa:	2001      	movs	r0, #1
}
 800fbac:	b005      	add	sp, #20
 800fbae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 800fbb2:	f7ff fcbf 	bl	800f534 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800fbb6:	4620      	mov	r0, r4
 800fbb8:	f7ff fe35 	bl	800f826 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fbbc:	f000 fd48 	bl	8010650 <xTaskResumeAll>
 800fbc0:	e7d2      	b.n	800fb68 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 800fbc2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800fbc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbca:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800fbce:	f3bf 8f4f 	dsb	sy
 800fbd2:	f3bf 8f6f 	isb	sy
 800fbd6:	e7c7      	b.n	800fb68 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 800fbd8:	4620      	mov	r0, r4
 800fbda:	f7ff fe24 	bl	800f826 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fbde:	f000 fd37 	bl	8010650 <xTaskResumeAll>
 800fbe2:	e78e      	b.n	800fb02 <xQueueGenericSend+0x84>

0800fbe4 <xQueueGenericSendFromISR>:
{
 800fbe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbe8:	4689      	mov	r9, r1
 800fbea:	4690      	mov	r8, r2
 800fbec:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800fbee:	4604      	mov	r4, r0
 800fbf0:	b940      	cbnz	r0, 800fc04 <xQueueGenericSendFromISR+0x20>
 800fbf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbf6:	f383 8811 	msr	BASEPRI, r3
 800fbfa:	f3bf 8f6f 	isb	sy
 800fbfe:	f3bf 8f4f 	dsb	sy
 800fc02:	e7fe      	b.n	800fc02 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fc04:	b951      	cbnz	r1, 800fc1c <xQueueGenericSendFromISR+0x38>
 800fc06:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800fc08:	b143      	cbz	r3, 800fc1c <xQueueGenericSendFromISR+0x38>
 800fc0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc0e:	f383 8811 	msr	BASEPRI, r3
 800fc12:	f3bf 8f6f 	isb	sy
 800fc16:	f3bf 8f4f 	dsb	sy
 800fc1a:	e7fe      	b.n	800fc1a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fc1c:	2f02      	cmp	r7, #2
 800fc1e:	d10b      	bne.n	800fc38 <xQueueGenericSendFromISR+0x54>
 800fc20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fc22:	2b01      	cmp	r3, #1
 800fc24:	d008      	beq.n	800fc38 <xQueueGenericSendFromISR+0x54>
 800fc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc2a:	f383 8811 	msr	BASEPRI, r3
 800fc2e:	f3bf 8f6f 	isb	sy
 800fc32:	f3bf 8f4f 	dsb	sy
 800fc36:	e7fe      	b.n	800fc36 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fc38:	f7ff fd72 	bl	800f720 <vPortValidateInterruptPriority>
	__asm volatile
 800fc3c:	f3ef 8611 	mrs	r6, BASEPRI
 800fc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc44:	f383 8811 	msr	BASEPRI, r3
 800fc48:	f3bf 8f6f 	isb	sy
 800fc4c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fc50:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800fc52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fc54:	429a      	cmp	r2, r3
 800fc56:	d301      	bcc.n	800fc5c <xQueueGenericSendFromISR+0x78>
 800fc58:	2f02      	cmp	r7, #2
 800fc5a:	d123      	bne.n	800fca4 <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
 800fc5c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fc60:	463a      	mov	r2, r7
 800fc62:	4649      	mov	r1, r9
 800fc64:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800fc66:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fc68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fc6a:	f7ff fd92 	bl	800f792 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800fc6e:	1c6b      	adds	r3, r5, #1
 800fc70:	d113      	bne.n	800fc9a <xQueueGenericSendFromISR+0xb6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fc72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc74:	b90b      	cbnz	r3, 800fc7a <xQueueGenericSendFromISR+0x96>
			xReturn = pdPASS;
 800fc76:	2001      	movs	r0, #1
 800fc78:	e00b      	b.n	800fc92 <xQueueGenericSendFromISR+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fc7a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fc7e:	f000 fe41 	bl	8010904 <xTaskRemoveFromEventList>
 800fc82:	2800      	cmp	r0, #0
 800fc84:	d0f7      	beq.n	800fc76 <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 800fc86:	f1b8 0f00 	cmp.w	r8, #0
 800fc8a:	d0f4      	beq.n	800fc76 <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fc8c:	2001      	movs	r0, #1
 800fc8e:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800fc92:	f386 8811 	msr	BASEPRI, r6
}
 800fc96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fc9a:	3501      	adds	r5, #1
 800fc9c:	b26d      	sxtb	r5, r5
 800fc9e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800fca2:	e7e8      	b.n	800fc76 <xQueueGenericSendFromISR+0x92>
			xReturn = errQUEUE_FULL;
 800fca4:	2000      	movs	r0, #0
 800fca6:	e7f4      	b.n	800fc92 <xQueueGenericSendFromISR+0xae>

0800fca8 <xQueueGiveFromISR>:
{
 800fca8:	b570      	push	{r4, r5, r6, lr}
 800fcaa:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800fcac:	4604      	mov	r4, r0
 800fcae:	b940      	cbnz	r0, 800fcc2 <xQueueGiveFromISR+0x1a>
	__asm volatile
 800fcb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcb4:	f383 8811 	msr	BASEPRI, r3
 800fcb8:	f3bf 8f6f 	isb	sy
 800fcbc:	f3bf 8f4f 	dsb	sy
 800fcc0:	e7fe      	b.n	800fcc0 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800fcc2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800fcc4:	b143      	cbz	r3, 800fcd8 <xQueueGiveFromISR+0x30>
 800fcc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcca:	f383 8811 	msr	BASEPRI, r3
 800fcce:	f3bf 8f6f 	isb	sy
 800fcd2:	f3bf 8f4f 	dsb	sy
 800fcd6:	e7fe      	b.n	800fcd6 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800fcd8:	6803      	ldr	r3, [r0, #0]
 800fcda:	b953      	cbnz	r3, 800fcf2 <xQueueGiveFromISR+0x4a>
 800fcdc:	6883      	ldr	r3, [r0, #8]
 800fcde:	b143      	cbz	r3, 800fcf2 <xQueueGiveFromISR+0x4a>
 800fce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fce4:	f383 8811 	msr	BASEPRI, r3
 800fce8:	f3bf 8f6f 	isb	sy
 800fcec:	f3bf 8f4f 	dsb	sy
 800fcf0:	e7fe      	b.n	800fcf0 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fcf2:	f7ff fd15 	bl	800f720 <vPortValidateInterruptPriority>
	__asm volatile
 800fcf6:	f3ef 8611 	mrs	r6, BASEPRI
 800fcfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcfe:	f383 8811 	msr	BASEPRI, r3
 800fd02:	f3bf 8f6f 	isb	sy
 800fd06:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fd0a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800fd0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fd0e:	4293      	cmp	r3, r2
 800fd10:	d91c      	bls.n	800fd4c <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800fd12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fd16:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800fd18:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800fd1a:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fd1c:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800fd1e:	d110      	bne.n	800fd42 <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fd20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd22:	b90b      	cbnz	r3, 800fd28 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 800fd24:	2001      	movs	r0, #1
 800fd26:	e009      	b.n	800fd3c <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fd28:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fd2c:	f000 fdea 	bl	8010904 <xTaskRemoveFromEventList>
 800fd30:	2800      	cmp	r0, #0
 800fd32:	d0f7      	beq.n	800fd24 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 800fd34:	2d00      	cmp	r5, #0
 800fd36:	d0f5      	beq.n	800fd24 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fd38:	2001      	movs	r0, #1
 800fd3a:	6028      	str	r0, [r5, #0]
	__asm volatile
 800fd3c:	f386 8811 	msr	BASEPRI, r6
}
 800fd40:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fd42:	3301      	adds	r3, #1
 800fd44:	b25b      	sxtb	r3, r3
 800fd46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fd4a:	e7eb      	b.n	800fd24 <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 800fd4c:	2000      	movs	r0, #0
 800fd4e:	e7f5      	b.n	800fd3c <xQueueGiveFromISR+0x94>

0800fd50 <xQueueReceive>:
{
 800fd50:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800fd54:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 800fd56:	4604      	mov	r4, r0
{
 800fd58:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800fd5a:	b940      	cbnz	r0, 800fd6e <xQueueReceive+0x1e>
	__asm volatile
 800fd5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd60:	f383 8811 	msr	BASEPRI, r3
 800fd64:	f3bf 8f6f 	isb	sy
 800fd68:	f3bf 8f4f 	dsb	sy
 800fd6c:	e7fe      	b.n	800fd6c <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fd6e:	b951      	cbnz	r1, 800fd86 <xQueueReceive+0x36>
 800fd70:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800fd72:	b143      	cbz	r3, 800fd86 <xQueueReceive+0x36>
 800fd74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd78:	f383 8811 	msr	BASEPRI, r3
 800fd7c:	f3bf 8f6f 	isb	sy
 800fd80:	f3bf 8f4f 	dsb	sy
 800fd84:	e7fe      	b.n	800fd84 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fd86:	f000 fe4f 	bl	8010a28 <xTaskGetSchedulerState>
 800fd8a:	4606      	mov	r6, r0
 800fd8c:	b950      	cbnz	r0, 800fda4 <xQueueReceive+0x54>
 800fd8e:	9b01      	ldr	r3, [sp, #4]
 800fd90:	b14b      	cbz	r3, 800fda6 <xQueueReceive+0x56>
 800fd92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd96:	f383 8811 	msr	BASEPRI, r3
 800fd9a:	f3bf 8f6f 	isb	sy
 800fd9e:	f3bf 8f4f 	dsb	sy
 800fda2:	e7fe      	b.n	800fda2 <xQueueReceive+0x52>
 800fda4:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800fda6:	f04f 0800 	mov.w	r8, #0
 800fdaa:	e03d      	b.n	800fe28 <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 800fdac:	9d01      	ldr	r5, [sp, #4]
 800fdae:	b91d      	cbnz	r5, 800fdb8 <xQueueReceive+0x68>
					taskEXIT_CRITICAL();
 800fdb0:	f7ff fbc0 	bl	800f534 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800fdb4:	2000      	movs	r0, #0
 800fdb6:	e056      	b.n	800fe66 <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 800fdb8:	b916      	cbnz	r6, 800fdc0 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fdba:	a802      	add	r0, sp, #8
 800fdbc:	f000 fde6 	bl	801098c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800fdc0:	f7ff fbb8 	bl	800f534 <vPortExitCritical>
		vTaskSuspendAll();
 800fdc4:	f000 fba0 	bl	8010508 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fdc8:	f7ff fb94 	bl	800f4f4 <vPortEnterCritical>
 800fdcc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800fdd0:	2bff      	cmp	r3, #255	; 0xff
 800fdd2:	d101      	bne.n	800fdd8 <xQueueReceive+0x88>
 800fdd4:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800fdd8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800fddc:	2bff      	cmp	r3, #255	; 0xff
 800fdde:	d101      	bne.n	800fde4 <xQueueReceive+0x94>
 800fde0:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800fde4:	f7ff fba6 	bl	800f534 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fde8:	a901      	add	r1, sp, #4
 800fdea:	a802      	add	r0, sp, #8
 800fdec:	f000 fdda 	bl	80109a4 <xTaskCheckForTimeOut>
 800fdf0:	2800      	cmp	r0, #0
 800fdf2:	d141      	bne.n	800fe78 <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fdf4:	4620      	mov	r0, r4
 800fdf6:	f7ff fcc1 	bl	800f77c <prvIsQueueEmpty>
 800fdfa:	b3b8      	cbz	r0, 800fe6c <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fdfc:	9901      	ldr	r1, [sp, #4]
 800fdfe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fe02:	f000 fd47 	bl	8010894 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fe06:	4620      	mov	r0, r4
 800fe08:	f7ff fd0d 	bl	800f826 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fe0c:	f000 fc20 	bl	8010650 <xTaskResumeAll>
 800fe10:	b948      	cbnz	r0, 800fe26 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 800fe12:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800fe16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe1a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800fe1e:	f3bf 8f4f 	dsb	sy
 800fe22:	f3bf 8f6f 	isb	sy
 800fe26:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800fe28:	f7ff fb64 	bl	800f4f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fe2c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fe2e:	2d00      	cmp	r5, #0
 800fe30:	d0bc      	beq.n	800fdac <xQueueReceive+0x5c>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fe32:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fe34:	4639      	mov	r1, r7
 800fe36:	4620      	mov	r0, r4
 800fe38:	f7ff fce0 	bl	800f7fc <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fe3c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fe3e:	6923      	ldr	r3, [r4, #16]
 800fe40:	b173      	cbz	r3, 800fe60 <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fe42:	f104 0010 	add.w	r0, r4, #16
 800fe46:	f000 fd5d 	bl	8010904 <xTaskRemoveFromEventList>
 800fe4a:	b148      	cbz	r0, 800fe60 <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 800fe4c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800fe50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe54:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800fe58:	f3bf 8f4f 	dsb	sy
 800fe5c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800fe60:	f7ff fb68 	bl	800f534 <vPortExitCritical>
				return pdPASS;
 800fe64:	2001      	movs	r0, #1
}
 800fe66:	b004      	add	sp, #16
 800fe68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 800fe6c:	4620      	mov	r0, r4
 800fe6e:	f7ff fcda 	bl	800f826 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fe72:	f000 fbed 	bl	8010650 <xTaskResumeAll>
 800fe76:	e7d6      	b.n	800fe26 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 800fe78:	4620      	mov	r0, r4
 800fe7a:	f7ff fcd4 	bl	800f826 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fe7e:	f000 fbe7 	bl	8010650 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fe82:	4620      	mov	r0, r4
 800fe84:	f7ff fc7a 	bl	800f77c <prvIsQueueEmpty>
 800fe88:	2800      	cmp	r0, #0
 800fe8a:	d0cc      	beq.n	800fe26 <xQueueReceive+0xd6>
 800fe8c:	e792      	b.n	800fdb4 <xQueueReceive+0x64>

0800fe8e <xQueueSemaphoreTake>:
{
 800fe8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe90:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800fe92:	4604      	mov	r4, r0
{
 800fe94:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800fe96:	b940      	cbnz	r0, 800feaa <xQueueSemaphoreTake+0x1c>
 800fe98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe9c:	f383 8811 	msr	BASEPRI, r3
 800fea0:	f3bf 8f6f 	isb	sy
 800fea4:	f3bf 8f4f 	dsb	sy
 800fea8:	e7fe      	b.n	800fea8 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800feaa:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800feac:	b145      	cbz	r5, 800fec0 <xQueueSemaphoreTake+0x32>
 800feae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feb2:	f383 8811 	msr	BASEPRI, r3
 800feb6:	f3bf 8f6f 	isb	sy
 800feba:	f3bf 8f4f 	dsb	sy
 800febe:	e7fe      	b.n	800febe <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fec0:	f000 fdb2 	bl	8010a28 <xTaskGetSchedulerState>
 800fec4:	4606      	mov	r6, r0
 800fec6:	b950      	cbnz	r0, 800fede <xQueueSemaphoreTake+0x50>
 800fec8:	9b01      	ldr	r3, [sp, #4]
 800feca:	b15b      	cbz	r3, 800fee4 <xQueueSemaphoreTake+0x56>
 800fecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fed0:	f383 8811 	msr	BASEPRI, r3
 800fed4:	f3bf 8f6f 	isb	sy
 800fed8:	f3bf 8f4f 	dsb	sy
 800fedc:	e7fe      	b.n	800fedc <xQueueSemaphoreTake+0x4e>
 800fede:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800fee0:	2700      	movs	r7, #0
 800fee2:	e053      	b.n	800ff8c <xQueueSemaphoreTake+0xfe>
 800fee4:	4605      	mov	r5, r0
 800fee6:	e7fb      	b.n	800fee0 <xQueueSemaphoreTake+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 800fee8:	9b01      	ldr	r3, [sp, #4]
 800feea:	b963      	cbnz	r3, 800ff06 <xQueueSemaphoreTake+0x78>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800feec:	b145      	cbz	r5, 800ff00 <xQueueSemaphoreTake+0x72>
 800feee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fef2:	f383 8811 	msr	BASEPRI, r3
 800fef6:	f3bf 8f6f 	isb	sy
 800fefa:	f3bf 8f4f 	dsb	sy
 800fefe:	e7fe      	b.n	800fefe <xQueueSemaphoreTake+0x70>
					taskEXIT_CRITICAL();
 800ff00:	f7ff fb18 	bl	800f534 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800ff04:	e062      	b.n	800ffcc <xQueueSemaphoreTake+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 800ff06:	b916      	cbnz	r6, 800ff0e <xQueueSemaphoreTake+0x80>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ff08:	a802      	add	r0, sp, #8
 800ff0a:	f000 fd3f 	bl	801098c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800ff0e:	f7ff fb11 	bl	800f534 <vPortExitCritical>
		vTaskSuspendAll();
 800ff12:	f000 faf9 	bl	8010508 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ff16:	f7ff faed 	bl	800f4f4 <vPortEnterCritical>
 800ff1a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ff1e:	2bff      	cmp	r3, #255	; 0xff
 800ff20:	d101      	bne.n	800ff26 <xQueueSemaphoreTake+0x98>
 800ff22:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800ff26:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ff2a:	2bff      	cmp	r3, #255	; 0xff
 800ff2c:	d101      	bne.n	800ff32 <xQueueSemaphoreTake+0xa4>
 800ff2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ff32:	f7ff faff 	bl	800f534 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ff36:	a901      	add	r1, sp, #4
 800ff38:	a802      	add	r0, sp, #8
 800ff3a:	f000 fd33 	bl	80109a4 <xTaskCheckForTimeOut>
 800ff3e:	2800      	cmp	r0, #0
 800ff40:	d14d      	bne.n	800ffde <xQueueSemaphoreTake+0x150>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ff42:	4620      	mov	r0, r4
 800ff44:	f7ff fc1a 	bl	800f77c <prvIsQueueEmpty>
 800ff48:	2800      	cmp	r0, #0
 800ff4a:	d042      	beq.n	800ffd2 <xQueueSemaphoreTake+0x144>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ff4c:	6823      	ldr	r3, [r4, #0]
 800ff4e:	b93b      	cbnz	r3, 800ff60 <xQueueSemaphoreTake+0xd2>
						taskENTER_CRITICAL();
 800ff50:	f7ff fad0 	bl	800f4f4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ff54:	68a0      	ldr	r0, [r4, #8]
 800ff56:	f000 fd77 	bl	8010a48 <xTaskPriorityInherit>
 800ff5a:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800ff5c:	f7ff faea 	bl	800f534 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ff60:	9901      	ldr	r1, [sp, #4]
 800ff62:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ff66:	f000 fc95 	bl	8010894 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ff6a:	4620      	mov	r0, r4
 800ff6c:	f7ff fc5b 	bl	800f826 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ff70:	f000 fb6e 	bl	8010650 <xTaskResumeAll>
 800ff74:	b948      	cbnz	r0, 800ff8a <xQueueSemaphoreTake+0xfc>
					portYIELD_WITHIN_API();
 800ff76:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ff7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff7e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ff82:	f3bf 8f4f 	dsb	sy
 800ff86:	f3bf 8f6f 	isb	sy
 800ff8a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800ff8c:	f7ff fab2 	bl	800f4f4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ff90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d0a8      	beq.n	800fee8 <xQueueSemaphoreTake+0x5a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ff96:	3b01      	subs	r3, #1
 800ff98:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ff9a:	6823      	ldr	r3, [r4, #0]
 800ff9c:	b913      	cbnz	r3, 800ffa4 <xQueueSemaphoreTake+0x116>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ff9e:	f000 fe29 	bl	8010bf4 <pvTaskIncrementMutexHeldCount>
 800ffa2:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ffa4:	6923      	ldr	r3, [r4, #16]
 800ffa6:	b173      	cbz	r3, 800ffc6 <xQueueSemaphoreTake+0x138>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ffa8:	f104 0010 	add.w	r0, r4, #16
 800ffac:	f000 fcaa 	bl	8010904 <xTaskRemoveFromEventList>
 800ffb0:	b148      	cbz	r0, 800ffc6 <xQueueSemaphoreTake+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 800ffb2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ffb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffba:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ffbe:	f3bf 8f4f 	dsb	sy
 800ffc2:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800ffc6:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800ffc8:	f7ff fab4 	bl	800f534 <vPortExitCritical>
}
 800ffcc:	4628      	mov	r0, r5
 800ffce:	b005      	add	sp, #20
 800ffd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 800ffd2:	4620      	mov	r0, r4
 800ffd4:	f7ff fc27 	bl	800f826 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ffd8:	f000 fb3a 	bl	8010650 <xTaskResumeAll>
 800ffdc:	e7d5      	b.n	800ff8a <xQueueSemaphoreTake+0xfc>
			prvUnlockQueue( pxQueue );
 800ffde:	4620      	mov	r0, r4
 800ffe0:	f7ff fc21 	bl	800f826 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ffe4:	f000 fb34 	bl	8010650 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ffe8:	4620      	mov	r0, r4
 800ffea:	f7ff fbc7 	bl	800f77c <prvIsQueueEmpty>
 800ffee:	2800      	cmp	r0, #0
 800fff0:	d0cb      	beq.n	800ff8a <xQueueSemaphoreTake+0xfc>
					if( xInheritanceOccurred != pdFALSE )
 800fff2:	2d00      	cmp	r5, #0
 800fff4:	d0ea      	beq.n	800ffcc <xQueueSemaphoreTake+0x13e>
						taskENTER_CRITICAL();
 800fff6:	f7ff fa7d 	bl	800f4f4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800fffa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fffc:	b119      	cbz	r1, 8010006 <xQueueSemaphoreTake+0x178>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800fffe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010000:	6819      	ldr	r1, [r3, #0]
 8010002:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010006:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8010008:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801000a:	f000 fda1 	bl	8010b50 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 801000e:	f7ff fa91 	bl	800f534 <vPortExitCritical>
 8010012:	e7db      	b.n	800ffcc <xQueueSemaphoreTake+0x13e>

08010014 <xQueueReceiveFromISR>:
{
 8010014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010018:	4689      	mov	r9, r1
 801001a:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 801001c:	4605      	mov	r5, r0
 801001e:	b940      	cbnz	r0, 8010032 <xQueueReceiveFromISR+0x1e>
 8010020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010024:	f383 8811 	msr	BASEPRI, r3
 8010028:	f3bf 8f6f 	isb	sy
 801002c:	f3bf 8f4f 	dsb	sy
 8010030:	e7fe      	b.n	8010030 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010032:	b951      	cbnz	r1, 801004a <xQueueReceiveFromISR+0x36>
 8010034:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8010036:	b143      	cbz	r3, 801004a <xQueueReceiveFromISR+0x36>
 8010038:	f04f 0350 	mov.w	r3, #80	; 0x50
 801003c:	f383 8811 	msr	BASEPRI, r3
 8010040:	f3bf 8f6f 	isb	sy
 8010044:	f3bf 8f4f 	dsb	sy
 8010048:	e7fe      	b.n	8010048 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801004a:	f7ff fb69 	bl	800f720 <vPortValidateInterruptPriority>
	__asm volatile
 801004e:	f3ef 8711 	mrs	r7, BASEPRI
 8010052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010056:	f383 8811 	msr	BASEPRI, r3
 801005a:	f3bf 8f6f 	isb	sy
 801005e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010062:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010064:	b31c      	cbz	r4, 80100ae <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 8010066:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801006a:	4649      	mov	r1, r9
 801006c:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801006e:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8010070:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010072:	f7ff fbc3 	bl	800f7fc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010076:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8010078:	1c73      	adds	r3, r6, #1
 801007a:	d113      	bne.n	80100a4 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801007c:	692b      	ldr	r3, [r5, #16]
 801007e:	b90b      	cbnz	r3, 8010084 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 8010080:	2001      	movs	r0, #1
 8010082:	e00b      	b.n	801009c <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010084:	f105 0010 	add.w	r0, r5, #16
 8010088:	f000 fc3c 	bl	8010904 <xTaskRemoveFromEventList>
 801008c:	2800      	cmp	r0, #0
 801008e:	d0f7      	beq.n	8010080 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 8010090:	f1b8 0f00 	cmp.w	r8, #0
 8010094:	d0f4      	beq.n	8010080 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010096:	2001      	movs	r0, #1
 8010098:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 801009c:	f387 8811 	msr	BASEPRI, r7
}
 80100a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80100a4:	3601      	adds	r6, #1
 80100a6:	b276      	sxtb	r6, r6
 80100a8:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 80100ac:	e7e8      	b.n	8010080 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 80100ae:	4620      	mov	r0, r4
 80100b0:	e7f4      	b.n	801009c <xQueueReceiveFromISR+0x88>
	...

080100b4 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80100b4:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80100b6:	4a07      	ldr	r2, [pc, #28]	; (80100d4 <vQueueAddToRegistry+0x20>)
	{
 80100b8:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80100ba:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80100be:	b92c      	cbnz	r4, 80100cc <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80100c0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80100c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80100c8:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80100ca:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80100cc:	3301      	adds	r3, #1
 80100ce:	2b08      	cmp	r3, #8
 80100d0:	d1f3      	bne.n	80100ba <vQueueAddToRegistry+0x6>
 80100d2:	e7fa      	b.n	80100ca <vQueueAddToRegistry+0x16>
 80100d4:	2400e45c 	.word	0x2400e45c

080100d8 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80100d8:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80100da:	4a08      	ldr	r2, [pc, #32]	; (80100fc <vQueueUnregisterQueue+0x24>)
	{
 80100dc:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80100de:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80100e2:	684c      	ldr	r4, [r1, #4]
 80100e4:	4284      	cmp	r4, r0
 80100e6:	d104      	bne.n	80100f2 <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80100e8:	2000      	movs	r0, #0
 80100ea:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80100ee:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80100f0:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80100f2:	3301      	adds	r3, #1
 80100f4:	2b08      	cmp	r3, #8
 80100f6:	d1f2      	bne.n	80100de <vQueueUnregisterQueue+0x6>
 80100f8:	e7fa      	b.n	80100f0 <vQueueUnregisterQueue+0x18>
 80100fa:	bf00      	nop
 80100fc:	2400e45c 	.word	0x2400e45c

08010100 <vQueueDelete>:
{
 8010100:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8010102:	4604      	mov	r4, r0
 8010104:	b940      	cbnz	r0, 8010118 <vQueueDelete+0x18>
	__asm volatile
 8010106:	f04f 0350 	mov.w	r3, #80	; 0x50
 801010a:	f383 8811 	msr	BASEPRI, r3
 801010e:	f3bf 8f6f 	isb	sy
 8010112:	f3bf 8f4f 	dsb	sy
 8010116:	e7fe      	b.n	8010116 <vQueueDelete+0x16>
		vQueueUnregisterQueue( pxQueue );
 8010118:	f7ff ffde 	bl	80100d8 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801011c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8010120:	b923      	cbnz	r3, 801012c <vQueueDelete+0x2c>
			vPortFree( pxQueue );
 8010122:	4620      	mov	r0, r4
}
 8010124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8010128:	f7ff b8fe 	b.w	800f328 <vPortFree>
}
 801012c:	bd10      	pop	{r4, pc}

0801012e <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801012e:	b570      	push	{r4, r5, r6, lr}
 8010130:	4604      	mov	r4, r0
 8010132:	460d      	mov	r5, r1
 8010134:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010136:	f7ff f9dd 	bl	800f4f4 <vPortEnterCritical>
 801013a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801013e:	2bff      	cmp	r3, #255	; 0xff
 8010140:	d102      	bne.n	8010148 <vQueueWaitForMessageRestricted+0x1a>
 8010142:	2300      	movs	r3, #0
 8010144:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8010148:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801014c:	2bff      	cmp	r3, #255	; 0xff
 801014e:	d102      	bne.n	8010156 <vQueueWaitForMessageRestricted+0x28>
 8010150:	2300      	movs	r3, #0
 8010152:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010156:	f7ff f9ed 	bl	800f534 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801015a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801015c:	b92b      	cbnz	r3, 801016a <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801015e:	4632      	mov	r2, r6
 8010160:	4629      	mov	r1, r5
 8010162:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010166:	f000 fbaf 	bl	80108c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801016a:	4620      	mov	r0, r4
	}
 801016c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8010170:	f7ff bb59 	b.w	800f826 <prvUnlockQueue>

08010174 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010178:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801017a:	f7ff f9bb 	bl	800f4f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801017e:	4b2f      	ldr	r3, [pc, #188]	; (801023c <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8010180:	4e2f      	ldr	r6, [pc, #188]	; (8010240 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 8010182:	681a      	ldr	r2, [r3, #0]
 8010184:	4f2f      	ldr	r7, [pc, #188]	; (8010244 <prvAddNewTaskToReadyList+0xd0>)
 8010186:	3201      	adds	r2, #1
 8010188:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 801018a:	6835      	ldr	r5, [r6, #0]
 801018c:	2d00      	cmp	r5, #0
 801018e:	d14a      	bne.n	8010226 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010190:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	2b01      	cmp	r3, #1
 8010196:	d11f      	bne.n	80101d8 <prvAddNewTaskToReadyList+0x64>
 8010198:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801019a:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801019c:	4640      	mov	r0, r8
 801019e:	f7ff f901 	bl	800f3a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80101a2:	f108 0814 	add.w	r8, r8, #20
 80101a6:	2d38      	cmp	r5, #56	; 0x38
 80101a8:	d1f7      	bne.n	801019a <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 80101aa:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 801026c <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 80101ae:	4d26      	ldr	r5, [pc, #152]	; (8010248 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 80101b0:	4640      	mov	r0, r8
 80101b2:	f7ff f8f7 	bl	800f3a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80101b6:	4628      	mov	r0, r5
 80101b8:	f7ff f8f4 	bl	800f3a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80101bc:	4823      	ldr	r0, [pc, #140]	; (801024c <prvAddNewTaskToReadyList+0xd8>)
 80101be:	f7ff f8f1 	bl	800f3a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80101c2:	4823      	ldr	r0, [pc, #140]	; (8010250 <prvAddNewTaskToReadyList+0xdc>)
 80101c4:	f7ff f8ee 	bl	800f3a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80101c8:	4822      	ldr	r0, [pc, #136]	; (8010254 <prvAddNewTaskToReadyList+0xe0>)
 80101ca:	f7ff f8eb 	bl	800f3a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80101ce:	4b22      	ldr	r3, [pc, #136]	; (8010258 <prvAddNewTaskToReadyList+0xe4>)
 80101d0:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80101d4:	4b21      	ldr	r3, [pc, #132]	; (801025c <prvAddNewTaskToReadyList+0xe8>)
 80101d6:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80101d8:	4a21      	ldr	r2, [pc, #132]	; (8010260 <prvAddNewTaskToReadyList+0xec>)
 80101da:	6813      	ldr	r3, [r2, #0]
 80101dc:	3301      	adds	r3, #1
 80101de:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80101e0:	4a20      	ldr	r2, [pc, #128]	; (8010264 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80101e2:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80101e4:	6811      	ldr	r1, [r2, #0]
 80101e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80101e8:	428b      	cmp	r3, r1
 80101ea:	d900      	bls.n	80101ee <prvAddNewTaskToReadyList+0x7a>
 80101ec:	6013      	str	r3, [r2, #0]
 80101ee:	2014      	movs	r0, #20
 80101f0:	1d21      	adds	r1, r4, #4
 80101f2:	fb00 7003 	mla	r0, r0, r3, r7
 80101f6:	f7ff f8e3 	bl	800f3c0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80101fa:	f7ff f99b 	bl	800f534 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80101fe:	4b1a      	ldr	r3, [pc, #104]	; (8010268 <prvAddNewTaskToReadyList+0xf4>)
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	b173      	cbz	r3, 8010222 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010204:	6833      	ldr	r3, [r6, #0]
 8010206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010208:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801020a:	429a      	cmp	r2, r3
 801020c:	d209      	bcs.n	8010222 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 801020e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010216:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801021a:	f3bf 8f4f 	dsb	sy
 801021e:	f3bf 8f6f 	isb	sy
}
 8010222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8010226:	4b10      	ldr	r3, [pc, #64]	; (8010268 <prvAddNewTaskToReadyList+0xf4>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d1d4      	bne.n	80101d8 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801022e:	6833      	ldr	r3, [r6, #0]
 8010230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010232:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010234:	429a      	cmp	r2, r3
 8010236:	d8cf      	bhi.n	80101d8 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 8010238:	6034      	str	r4, [r6, #0]
 801023a:	e7cd      	b.n	80101d8 <prvAddNewTaskToReadyList+0x64>
 801023c:	2400e908 	.word	0x2400e908
 8010240:	2400e49c 	.word	0x2400e49c
 8010244:	2400e4a8 	.word	0x2400e4a8
 8010248:	2400e930 	.word	0x2400e930
 801024c:	2400e950 	.word	0x2400e950
 8010250:	2400e97c 	.word	0x2400e97c
 8010254:	2400e968 	.word	0x2400e968
 8010258:	2400e4a0 	.word	0x2400e4a0
 801025c:	2400e4a4 	.word	0x2400e4a4
 8010260:	2400e914 	.word	0x2400e914
 8010264:	2400e918 	.word	0x2400e918
 8010268:	2400e964 	.word	0x2400e964
 801026c:	2400e91c 	.word	0x2400e91c

08010270 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010272:	4b15      	ldr	r3, [pc, #84]	; (80102c8 <prvAddCurrentTaskToDelayedList+0x58>)
{
 8010274:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010276:	4e15      	ldr	r6, [pc, #84]	; (80102cc <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8010278:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 801027a:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801027c:	6830      	ldr	r0, [r6, #0]
 801027e:	3004      	adds	r0, #4
 8010280:	f7ff f8c1 	bl	800f406 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010284:	1c63      	adds	r3, r4, #1
 8010286:	d107      	bne.n	8010298 <prvAddCurrentTaskToDelayedList+0x28>
 8010288:	b137      	cbz	r7, 8010298 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801028a:	6831      	ldr	r1, [r6, #0]
 801028c:	4810      	ldr	r0, [pc, #64]	; (80102d0 <prvAddCurrentTaskToDelayedList+0x60>)
 801028e:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010290:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010294:	f7ff b894 	b.w	800f3c0 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010298:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801029a:	6833      	ldr	r3, [r6, #0]
 801029c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801029e:	d307      	bcc.n	80102b0 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80102a0:	4b0c      	ldr	r3, [pc, #48]	; (80102d4 <prvAddCurrentTaskToDelayedList+0x64>)
 80102a2:	6818      	ldr	r0, [r3, #0]
 80102a4:	6831      	ldr	r1, [r6, #0]
}
 80102a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80102aa:	3104      	adds	r1, #4
 80102ac:	f7ff b894 	b.w	800f3d8 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80102b0:	4b09      	ldr	r3, [pc, #36]	; (80102d8 <prvAddCurrentTaskToDelayedList+0x68>)
 80102b2:	6818      	ldr	r0, [r3, #0]
 80102b4:	6831      	ldr	r1, [r6, #0]
 80102b6:	3104      	adds	r1, #4
 80102b8:	f7ff f88e 	bl	800f3d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80102bc:	4b07      	ldr	r3, [pc, #28]	; (80102dc <prvAddCurrentTaskToDelayedList+0x6c>)
 80102be:	681a      	ldr	r2, [r3, #0]
 80102c0:	42a2      	cmp	r2, r4
 80102c2:	d900      	bls.n	80102c6 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 80102c4:	601c      	str	r4, [r3, #0]
}
 80102c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102c8:	2400e990 	.word	0x2400e990
 80102cc:	2400e49c 	.word	0x2400e49c
 80102d0:	2400e968 	.word	0x2400e968
 80102d4:	2400e4a4 	.word	0x2400e4a4
 80102d8:	2400e4a0 	.word	0x2400e4a0
 80102dc:	2400e944 	.word	0x2400e944

080102e0 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80102e0:	4a06      	ldr	r2, [pc, #24]	; (80102fc <prvResetNextTaskUnblockTime+0x1c>)
 80102e2:	6813      	ldr	r3, [r2, #0]
 80102e4:	6819      	ldr	r1, [r3, #0]
 80102e6:	4b06      	ldr	r3, [pc, #24]	; (8010300 <prvResetNextTaskUnblockTime+0x20>)
 80102e8:	b919      	cbnz	r1, 80102f2 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 80102ea:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80102ee:	601a      	str	r2, [r3, #0]
}
 80102f0:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102f2:	6812      	ldr	r2, [r2, #0]
 80102f4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80102f6:	68d2      	ldr	r2, [r2, #12]
 80102f8:	6852      	ldr	r2, [r2, #4]
 80102fa:	e7f8      	b.n	80102ee <prvResetNextTaskUnblockTime+0xe>
 80102fc:	2400e4a0 	.word	0x2400e4a0
 8010300:	2400e944 	.word	0x2400e944

08010304 <prvDeleteTCB>:
	{
 8010304:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010306:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	{
 801030a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801030c:	b93b      	cbnz	r3, 801031e <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 801030e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8010310:	f7ff f80a 	bl	800f328 <vPortFree>
				vPortFree( pxTCB );
 8010314:	4620      	mov	r0, r4
	}
 8010316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 801031a:	f7ff b805 	b.w	800f328 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801031e:	2b01      	cmp	r3, #1
 8010320:	d0f9      	beq.n	8010316 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010322:	2b02      	cmp	r3, #2
 8010324:	d008      	beq.n	8010338 <prvDeleteTCB+0x34>
 8010326:	f04f 0350 	mov.w	r3, #80	; 0x50
 801032a:	f383 8811 	msr	BASEPRI, r3
 801032e:	f3bf 8f6f 	isb	sy
 8010332:	f3bf 8f4f 	dsb	sy
 8010336:	e7fe      	b.n	8010336 <prvDeleteTCB+0x32>
	}
 8010338:	bd10      	pop	{r4, pc}
	...

0801033c <prvIdleTask>:
{
 801033c:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801033e:	4c14      	ldr	r4, [pc, #80]	; (8010390 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010340:	4f14      	ldr	r7, [pc, #80]	; (8010394 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 8010342:	4d15      	ldr	r5, [pc, #84]	; (8010398 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010344:	6823      	ldr	r3, [r4, #0]
 8010346:	b983      	cbnz	r3, 801036a <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010348:	4b14      	ldr	r3, [pc, #80]	; (801039c <prvIdleTask+0x60>)
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	2b01      	cmp	r3, #1
 801034e:	d909      	bls.n	8010364 <prvIdleTask+0x28>
				taskYIELD();
 8010350:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010358:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801035c:	f3bf 8f4f 	dsb	sy
 8010360:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8010364:	f7f0 f9c8 	bl	80006f8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8010368:	e7eb      	b.n	8010342 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 801036a:	f7ff f8c3 	bl	800f4f4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010372:	1d30      	adds	r0, r6, #4
 8010374:	f7ff f847 	bl	800f406 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010378:	682b      	ldr	r3, [r5, #0]
 801037a:	3b01      	subs	r3, #1
 801037c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 801037e:	6823      	ldr	r3, [r4, #0]
 8010380:	3b01      	subs	r3, #1
 8010382:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8010384:	f7ff f8d6 	bl	800f534 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8010388:	4630      	mov	r0, r6
 801038a:	f7ff ffbb 	bl	8010304 <prvDeleteTCB>
 801038e:	e7d9      	b.n	8010344 <prvIdleTask+0x8>
 8010390:	2400e90c 	.word	0x2400e90c
 8010394:	2400e97c 	.word	0x2400e97c
 8010398:	2400e908 	.word	0x2400e908
 801039c:	2400e4a8 	.word	0x2400e4a8

080103a0 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80103a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80103a4:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80103a8:	4606      	mov	r6, r0
 80103aa:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80103ac:	21a5      	movs	r1, #165	; 0xa5
 80103ae:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80103b0:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80103b2:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80103b6:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80103ba:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80103bc:	f012 fdfc 	bl	8022fb8 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80103c0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80103c2:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80103c4:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 80103c8:	b3b5      	cbz	r5, 8010438 <prvInitialiseNewTask.constprop.0+0x98>
 80103ca:	1e6b      	subs	r3, r5, #1
 80103cc:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80103d0:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80103d2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80103d6:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 80103da:	b108      	cbz	r0, 80103e0 <prvInitialiseNewTask.constprop.0+0x40>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80103dc:	42ab      	cmp	r3, r5
 80103de:	d1f8      	bne.n	80103d2 <prvInitialiseNewTask.constprop.0+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80103e0:	2300      	movs	r3, #0
 80103e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80103e6:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 80103e8:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80103ec:	1d20      	adds	r0, r4, #4
 80103ee:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 80103f0:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 80103f4:	bf28      	it	cs
 80103f6:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 80103f8:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80103fa:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80103fc:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010400:	f7fe ffdb 	bl	800f3ba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010404:	f104 0018 	add.w	r0, r4, #24
 8010408:	f7fe ffd7 	bl	800f3ba <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 801040c:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010410:	463a      	mov	r2, r7
 8010412:	4631      	mov	r1, r6
 8010414:	4648      	mov	r0, r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010416:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010418:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801041a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 801041c:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010420:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010424:	f7ff f83e 	bl	800f4a4 <pxPortInitialiseStack>
 8010428:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 801042a:	f1b8 0f00 	cmp.w	r8, #0
 801042e:	d001      	beq.n	8010434 <prvInitialiseNewTask.constprop.0+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010430:	f8c8 4000 	str.w	r4, [r8]
}
 8010434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010438:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 801043c:	e7d3      	b.n	80103e6 <prvInitialiseNewTask.constprop.0+0x46>

0801043e <xTaskCreateStatic>:
	{
 801043e:	b570      	push	{r4, r5, r6, lr}
 8010440:	b086      	sub	sp, #24
 8010442:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8010446:	b945      	cbnz	r5, 801045a <xTaskCreateStatic+0x1c>
 8010448:	f04f 0350 	mov.w	r3, #80	; 0x50
 801044c:	f383 8811 	msr	BASEPRI, r3
 8010450:	f3bf 8f6f 	isb	sy
 8010454:	f3bf 8f4f 	dsb	sy
 8010458:	e7fe      	b.n	8010458 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 801045a:	b944      	cbnz	r4, 801046e <xTaskCreateStatic+0x30>
 801045c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010460:	f383 8811 	msr	BASEPRI, r3
 8010464:	f3bf 8f6f 	isb	sy
 8010468:	f3bf 8f4f 	dsb	sy
 801046c:	e7fe      	b.n	801046c <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 801046e:	2660      	movs	r6, #96	; 0x60
 8010470:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010472:	9e05      	ldr	r6, [sp, #20]
 8010474:	2e60      	cmp	r6, #96	; 0x60
 8010476:	d008      	beq.n	801048a <xTaskCreateStatic+0x4c>
 8010478:	f04f 0350 	mov.w	r3, #80	; 0x50
 801047c:	f383 8811 	msr	BASEPRI, r3
 8010480:	f3bf 8f6f 	isb	sy
 8010484:	f3bf 8f4f 	dsb	sy
 8010488:	e7fe      	b.n	8010488 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801048a:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801048c:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801048e:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010490:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010494:	ad04      	add	r5, sp, #16
 8010496:	9402      	str	r4, [sp, #8]
 8010498:	9501      	str	r5, [sp, #4]
 801049a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801049c:	9500      	str	r5, [sp, #0]
 801049e:	f7ff ff7f 	bl	80103a0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80104a2:	4620      	mov	r0, r4
 80104a4:	f7ff fe66 	bl	8010174 <prvAddNewTaskToReadyList>
	}
 80104a8:	9804      	ldr	r0, [sp, #16]
 80104aa:	b006      	add	sp, #24
 80104ac:	bd70      	pop	{r4, r5, r6, pc}

080104ae <xTaskCreate>:
	{
 80104ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80104b2:	4607      	mov	r7, r0
 80104b4:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80104b6:	0090      	lsls	r0, r2, #2
	{
 80104b8:	4688      	mov	r8, r1
 80104ba:	4616      	mov	r6, r2
 80104bc:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80104be:	f7fe fe9b 	bl	800f1f8 <pvPortMalloc>
			if( pxStack != NULL )
 80104c2:	4605      	mov	r5, r0
 80104c4:	b1e8      	cbz	r0, 8010502 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80104c6:	2060      	movs	r0, #96	; 0x60
 80104c8:	f7fe fe96 	bl	800f1f8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80104cc:	4604      	mov	r4, r0
 80104ce:	b1a8      	cbz	r0, 80104fc <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80104d0:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 80104d2:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80104d4:	4632      	mov	r2, r6
 80104d6:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80104d8:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80104dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80104de:	9002      	str	r0, [sp, #8]
 80104e0:	4638      	mov	r0, r7
 80104e2:	9301      	str	r3, [sp, #4]
 80104e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80104e6:	9300      	str	r3, [sp, #0]
 80104e8:	464b      	mov	r3, r9
 80104ea:	f7ff ff59 	bl	80103a0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80104ee:	4620      	mov	r0, r4
 80104f0:	f7ff fe40 	bl	8010174 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80104f4:	2001      	movs	r0, #1
	}
 80104f6:	b005      	add	sp, #20
 80104f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80104fc:	4628      	mov	r0, r5
 80104fe:	f7fe ff13 	bl	800f328 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010502:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8010506:	e7f6      	b.n	80104f6 <xTaskCreate+0x48>

08010508 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8010508:	4a02      	ldr	r2, [pc, #8]	; (8010514 <vTaskSuspendAll+0xc>)
 801050a:	6813      	ldr	r3, [r2, #0]
 801050c:	3301      	adds	r3, #1
 801050e:	6013      	str	r3, [r2, #0]
}
 8010510:	4770      	bx	lr
 8010512:	bf00      	nop
 8010514:	2400e910 	.word	0x2400e910

08010518 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8010518:	4b01      	ldr	r3, [pc, #4]	; (8010520 <xTaskGetTickCount+0x8>)
 801051a:	6818      	ldr	r0, [r3, #0]
}
 801051c:	4770      	bx	lr
 801051e:	bf00      	nop
 8010520:	2400e990 	.word	0x2400e990

08010524 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010524:	4b3f      	ldr	r3, [pc, #252]	; (8010624 <xTaskIncrementTick+0x100>)
 8010526:	681b      	ldr	r3, [r3, #0]
{
 8010528:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801052c:	2b00      	cmp	r3, #0
 801052e:	d172      	bne.n	8010616 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010530:	4b3d      	ldr	r3, [pc, #244]	; (8010628 <xTaskIncrementTick+0x104>)
 8010532:	681d      	ldr	r5, [r3, #0]
 8010534:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8010536:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010538:	b9bd      	cbnz	r5, 801056a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 801053a:	4b3c      	ldr	r3, [pc, #240]	; (801062c <xTaskIncrementTick+0x108>)
 801053c:	681a      	ldr	r2, [r3, #0]
 801053e:	6812      	ldr	r2, [r2, #0]
 8010540:	b142      	cbz	r2, 8010554 <xTaskIncrementTick+0x30>
 8010542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010546:	f383 8811 	msr	BASEPRI, r3
 801054a:	f3bf 8f6f 	isb	sy
 801054e:	f3bf 8f4f 	dsb	sy
 8010552:	e7fe      	b.n	8010552 <xTaskIncrementTick+0x2e>
 8010554:	4a36      	ldr	r2, [pc, #216]	; (8010630 <xTaskIncrementTick+0x10c>)
 8010556:	6819      	ldr	r1, [r3, #0]
 8010558:	6810      	ldr	r0, [r2, #0]
 801055a:	6018      	str	r0, [r3, #0]
 801055c:	6011      	str	r1, [r2, #0]
 801055e:	4a35      	ldr	r2, [pc, #212]	; (8010634 <xTaskIncrementTick+0x110>)
 8010560:	6813      	ldr	r3, [r2, #0]
 8010562:	3301      	adds	r3, #1
 8010564:	6013      	str	r3, [r2, #0]
 8010566:	f7ff febb 	bl	80102e0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 801056a:	4e33      	ldr	r6, [pc, #204]	; (8010638 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 801056c:	2400      	movs	r4, #0
 801056e:	4f33      	ldr	r7, [pc, #204]	; (801063c <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010570:	6833      	ldr	r3, [r6, #0]
 8010572:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8010648 <xTaskIncrementTick+0x124>
 8010576:	429d      	cmp	r5, r3
 8010578:	d211      	bcs.n	801059e <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801057a:	f8d8 3000 	ldr.w	r3, [r8]
 801057e:	2214      	movs	r2, #20
 8010580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010582:	4353      	muls	r3, r2
 8010584:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8010586:	2b02      	cmp	r3, #2
			if( xYieldPending != pdFALSE )
 8010588:	4b2d      	ldr	r3, [pc, #180]	; (8010640 <xTaskIncrementTick+0x11c>)
 801058a:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 801058c:	bf28      	it	cs
 801058e:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 8010590:	2b00      	cmp	r3, #0
 8010592:	bf18      	it	ne
 8010594:	2401      	movne	r4, #1
}
 8010596:	4620      	mov	r0, r4
 8010598:	b003      	add	sp, #12
 801059a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801059e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801062c <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 80105a2:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 801064c <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80105a6:	f8d9 3000 	ldr.w	r3, [r9]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	b91b      	cbnz	r3, 80105b6 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80105ae:	f04f 33ff 	mov.w	r3, #4294967295
 80105b2:	6033      	str	r3, [r6, #0]
					break;
 80105b4:	e7e1      	b.n	801057a <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80105b6:	f8d9 3000 	ldr.w	r3, [r9]
 80105ba:	68db      	ldr	r3, [r3, #12]
 80105bc:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80105c0:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 80105c4:	4295      	cmp	r5, r2
 80105c6:	d201      	bcs.n	80105cc <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 80105c8:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80105ca:	e7d6      	b.n	801057a <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80105cc:	f10b 0104 	add.w	r1, fp, #4
 80105d0:	4608      	mov	r0, r1
 80105d2:	9101      	str	r1, [sp, #4]
 80105d4:	f7fe ff17 	bl	800f406 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80105d8:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 80105dc:	9901      	ldr	r1, [sp, #4]
 80105de:	b122      	cbz	r2, 80105ea <xTaskIncrementTick+0xc6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80105e0:	f10b 0018 	add.w	r0, fp, #24
 80105e4:	f7fe ff0f 	bl	800f406 <uxListRemove>
 80105e8:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 80105ea:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 80105ee:	f8da 2000 	ldr.w	r2, [sl]
 80105f2:	4290      	cmp	r0, r2
 80105f4:	d901      	bls.n	80105fa <xTaskIncrementTick+0xd6>
 80105f6:	f8ca 0000 	str.w	r0, [sl]
 80105fa:	2314      	movs	r3, #20
 80105fc:	fb03 7000 	mla	r0, r3, r0, r7
 8010600:	f7fe fede 	bl	800f3c0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010604:	f8d8 1000 	ldr.w	r1, [r8]
 8010608:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 801060c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 801060e:	429a      	cmp	r2, r3
 8010610:	bf28      	it	cs
 8010612:	2401      	movcs	r4, #1
 8010614:	e7c7      	b.n	80105a6 <xTaskIncrementTick+0x82>
		++xPendedTicks;
 8010616:	4a0b      	ldr	r2, [pc, #44]	; (8010644 <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 8010618:	2400      	movs	r4, #0
		++xPendedTicks;
 801061a:	6813      	ldr	r3, [r2, #0]
 801061c:	3301      	adds	r3, #1
 801061e:	6013      	str	r3, [r2, #0]
	return xSwitchRequired;
 8010620:	e7b9      	b.n	8010596 <xTaskIncrementTick+0x72>
 8010622:	bf00      	nop
 8010624:	2400e910 	.word	0x2400e910
 8010628:	2400e990 	.word	0x2400e990
 801062c:	2400e4a0 	.word	0x2400e4a0
 8010630:	2400e4a4 	.word	0x2400e4a4
 8010634:	2400e948 	.word	0x2400e948
 8010638:	2400e944 	.word	0x2400e944
 801063c:	2400e4a8 	.word	0x2400e4a8
 8010640:	2400e994 	.word	0x2400e994
 8010644:	2400e94c 	.word	0x2400e94c
 8010648:	2400e49c 	.word	0x2400e49c
 801064c:	2400e918 	.word	0x2400e918

08010650 <xTaskResumeAll>:
{
 8010650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 8010652:	4c31      	ldr	r4, [pc, #196]	; (8010718 <xTaskResumeAll+0xc8>)
 8010654:	6823      	ldr	r3, [r4, #0]
 8010656:	b943      	cbnz	r3, 801066a <xTaskResumeAll+0x1a>
 8010658:	f04f 0350 	mov.w	r3, #80	; 0x50
 801065c:	f383 8811 	msr	BASEPRI, r3
 8010660:	f3bf 8f6f 	isb	sy
 8010664:	f3bf 8f4f 	dsb	sy
 8010668:	e7fe      	b.n	8010668 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 801066a:	f7fe ff43 	bl	800f4f4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 801066e:	6823      	ldr	r3, [r4, #0]
 8010670:	3b01      	subs	r3, #1
 8010672:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010674:	6824      	ldr	r4, [r4, #0]
 8010676:	b12c      	cbz	r4, 8010684 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 8010678:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 801067a:	f7fe ff5b 	bl	800f534 <vPortExitCritical>
}
 801067e:	4620      	mov	r0, r4
 8010680:	b003      	add	sp, #12
 8010682:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010684:	4b25      	ldr	r3, [pc, #148]	; (801071c <xTaskResumeAll+0xcc>)
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d0f5      	beq.n	8010678 <xTaskResumeAll+0x28>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801068c:	4d24      	ldr	r5, [pc, #144]	; (8010720 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 801068e:	4e25      	ldr	r6, [pc, #148]	; (8010724 <xTaskResumeAll+0xd4>)
 8010690:	4f25      	ldr	r7, [pc, #148]	; (8010728 <xTaskResumeAll+0xd8>)
 8010692:	e01e      	b.n	80106d2 <xTaskResumeAll+0x82>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010694:	68eb      	ldr	r3, [r5, #12]
 8010696:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010698:	f104 0018 	add.w	r0, r4, #24
 801069c:	f7fe feb3 	bl	800f406 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80106a0:	1d21      	adds	r1, r4, #4
 80106a2:	4608      	mov	r0, r1
 80106a4:	9101      	str	r1, [sp, #4]
 80106a6:	f7fe feae 	bl	800f406 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80106aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80106ac:	6832      	ldr	r2, [r6, #0]
 80106ae:	9901      	ldr	r1, [sp, #4]
 80106b0:	4293      	cmp	r3, r2
 80106b2:	d900      	bls.n	80106b6 <xTaskResumeAll+0x66>
 80106b4:	6033      	str	r3, [r6, #0]
 80106b6:	2014      	movs	r0, #20
 80106b8:	fb00 7003 	mla	r0, r0, r3, r7
 80106bc:	f7fe fe80 	bl	800f3c0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80106c0:	4b1a      	ldr	r3, [pc, #104]	; (801072c <xTaskResumeAll+0xdc>)
 80106c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106c8:	429a      	cmp	r2, r3
 80106ca:	d302      	bcc.n	80106d2 <xTaskResumeAll+0x82>
						xYieldPending = pdTRUE;
 80106cc:	4b18      	ldr	r3, [pc, #96]	; (8010730 <xTaskResumeAll+0xe0>)
 80106ce:	2201      	movs	r2, #1
 80106d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80106d2:	682b      	ldr	r3, [r5, #0]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d1dd      	bne.n	8010694 <xTaskResumeAll+0x44>
				if( pxTCB != NULL )
 80106d8:	b10c      	cbz	r4, 80106de <xTaskResumeAll+0x8e>
					prvResetNextTaskUnblockTime();
 80106da:	f7ff fe01 	bl	80102e0 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80106de:	4d15      	ldr	r5, [pc, #84]	; (8010734 <xTaskResumeAll+0xe4>)
 80106e0:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 80106e2:	b144      	cbz	r4, 80106f6 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 80106e4:	4e12      	ldr	r6, [pc, #72]	; (8010730 <xTaskResumeAll+0xe0>)
 80106e6:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80106e8:	f7ff ff1c 	bl	8010524 <xTaskIncrementTick>
 80106ec:	b100      	cbz	r0, 80106f0 <xTaskResumeAll+0xa0>
								xYieldPending = pdTRUE;
 80106ee:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80106f0:	3c01      	subs	r4, #1
 80106f2:	d1f9      	bne.n	80106e8 <xTaskResumeAll+0x98>
						xPendedTicks = 0;
 80106f4:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80106f6:	4b0e      	ldr	r3, [pc, #56]	; (8010730 <xTaskResumeAll+0xe0>)
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d0bc      	beq.n	8010678 <xTaskResumeAll+0x28>
					taskYIELD_IF_USING_PREEMPTION();
 80106fe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010706:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801070a:	f3bf 8f4f 	dsb	sy
 801070e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8010712:	2401      	movs	r4, #1
 8010714:	e7b1      	b.n	801067a <xTaskResumeAll+0x2a>
 8010716:	bf00      	nop
 8010718:	2400e910 	.word	0x2400e910
 801071c:	2400e908 	.word	0x2400e908
 8010720:	2400e950 	.word	0x2400e950
 8010724:	2400e918 	.word	0x2400e918
 8010728:	2400e4a8 	.word	0x2400e4a8
 801072c:	2400e49c 	.word	0x2400e49c
 8010730:	2400e994 	.word	0x2400e994
 8010734:	2400e94c 	.word	0x2400e94c

08010738 <vTaskSetApplicationTaskTag>:
	{
 8010738:	b538      	push	{r3, r4, r5, lr}
 801073a:	460d      	mov	r5, r1
		if( xTask == NULL )
 801073c:	4604      	mov	r4, r0
 801073e:	b908      	cbnz	r0, 8010744 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8010740:	4b04      	ldr	r3, [pc, #16]	; (8010754 <vTaskSetApplicationTaskTag+0x1c>)
 8010742:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 8010744:	f7fe fed6 	bl	800f4f4 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8010748:	6565      	str	r5, [r4, #84]	; 0x54
	}
 801074a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 801074e:	f7fe bef1 	b.w	800f534 <vPortExitCritical>
 8010752:	bf00      	nop
 8010754:	2400e49c 	.word	0x2400e49c

08010758 <xTaskCallApplicationTaskHook>:
	{
 8010758:	4603      	mov	r3, r0
 801075a:	4608      	mov	r0, r1
		if( xTask == NULL )
 801075c:	b90b      	cbnz	r3, 8010762 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 801075e:	4b03      	ldr	r3, [pc, #12]	; (801076c <xTaskCallApplicationTaskHook+0x14>)
 8010760:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 8010762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010764:	b103      	cbz	r3, 8010768 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 8010766:	4718      	bx	r3
	}
 8010768:	4618      	mov	r0, r3
 801076a:	4770      	bx	lr
 801076c:	2400e49c 	.word	0x2400e49c

08010770 <vTaskStartScheduler>:
{
 8010770:	b510      	push	{r4, lr}
 8010772:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010774:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010776:	aa07      	add	r2, sp, #28
 8010778:	a906      	add	r1, sp, #24
 801077a:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801077c:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010780:	f7fe fcfe 	bl	800f180 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010784:	9b05      	ldr	r3, [sp, #20]
 8010786:	9a07      	ldr	r2, [sp, #28]
 8010788:	9302      	str	r3, [sp, #8]
 801078a:	9b06      	ldr	r3, [sp, #24]
 801078c:	4919      	ldr	r1, [pc, #100]	; (80107f4 <vTaskStartScheduler+0x84>)
 801078e:	481a      	ldr	r0, [pc, #104]	; (80107f8 <vTaskStartScheduler+0x88>)
 8010790:	e9cd 4300 	strd	r4, r3, [sp]
 8010794:	4623      	mov	r3, r4
 8010796:	f7ff fe52 	bl	801043e <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 801079a:	b340      	cbz	r0, 80107ee <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 801079c:	f000 fa88 	bl	8010cb0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80107a0:	2801      	cmp	r0, #1
 80107a2:	d119      	bne.n	80107d8 <vTaskStartScheduler+0x68>
 80107a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107a8:	f383 8811 	msr	BASEPRI, r3
 80107ac:	f3bf 8f6f 	isb	sy
 80107b0:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80107b4:	f04f 32ff 	mov.w	r2, #4294967295
 80107b8:	4b10      	ldr	r3, [pc, #64]	; (80107fc <vTaskStartScheduler+0x8c>)
		traceTASK_SWITCHED_IN();
 80107ba:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 80107bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80107be:	4b10      	ldr	r3, [pc, #64]	; (8010800 <vTaskStartScheduler+0x90>)
 80107c0:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80107c2:	4b10      	ldr	r3, [pc, #64]	; (8010804 <vTaskStartScheduler+0x94>)
 80107c4:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 80107c6:	4b10      	ldr	r3, [pc, #64]	; (8010808 <vTaskStartScheduler+0x98>)
 80107c8:	6818      	ldr	r0, [r3, #0]
 80107ca:	f7ff ffc5 	bl	8010758 <xTaskCallApplicationTaskHook>
}
 80107ce:	b008      	add	sp, #32
 80107d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80107d4:	f7fe bf1e 	b.w	800f614 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80107d8:	3001      	adds	r0, #1
 80107da:	d108      	bne.n	80107ee <vTaskStartScheduler+0x7e>
 80107dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107e0:	f383 8811 	msr	BASEPRI, r3
 80107e4:	f3bf 8f6f 	isb	sy
 80107e8:	f3bf 8f4f 	dsb	sy
 80107ec:	e7fe      	b.n	80107ec <vTaskStartScheduler+0x7c>
}
 80107ee:	b008      	add	sp, #32
 80107f0:	bd10      	pop	{r4, pc}
 80107f2:	bf00      	nop
 80107f4:	080256f8 	.word	0x080256f8
 80107f8:	0801033d 	.word	0x0801033d
 80107fc:	2400e944 	.word	0x2400e944
 8010800:	2400e964 	.word	0x2400e964
 8010804:	2400e990 	.word	0x2400e990
 8010808:	2400e49c 	.word	0x2400e49c

0801080c <vTaskSwitchContext>:
{
 801080c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801080e:	4b1c      	ldr	r3, [pc, #112]	; (8010880 <vTaskSwitchContext+0x74>)
 8010810:	681a      	ldr	r2, [r3, #0]
 8010812:	4b1c      	ldr	r3, [pc, #112]	; (8010884 <vTaskSwitchContext+0x78>)
 8010814:	b112      	cbz	r2, 801081c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8010816:	2201      	movs	r2, #1
 8010818:	601a      	str	r2, [r3, #0]
}
 801081a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 801081c:	4c1a      	ldr	r4, [pc, #104]	; (8010888 <vTaskSwitchContext+0x7c>)
 801081e:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010820:	4e1a      	ldr	r6, [pc, #104]	; (801088c <vTaskSwitchContext+0x80>)
 8010822:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 8010824:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8010826:	6820      	ldr	r0, [r4, #0]
 8010828:	f7ff ff96 	bl	8010758 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801082c:	6832      	ldr	r2, [r6, #0]
 801082e:	4918      	ldr	r1, [pc, #96]	; (8010890 <vTaskSwitchContext+0x84>)
 8010830:	fb07 f302 	mul.w	r3, r7, r2
 8010834:	58cd      	ldr	r5, [r1, r3]
 8010836:	18c8      	adds	r0, r1, r3
 8010838:	b1ad      	cbz	r5, 8010866 <vTaskSwitchContext+0x5a>
 801083a:	6845      	ldr	r5, [r0, #4]
 801083c:	3308      	adds	r3, #8
 801083e:	686d      	ldr	r5, [r5, #4]
 8010840:	440b      	add	r3, r1
 8010842:	429d      	cmp	r5, r3
 8010844:	6045      	str	r5, [r0, #4]
 8010846:	bf04      	itt	eq
 8010848:	686b      	ldreq	r3, [r5, #4]
 801084a:	6043      	streq	r3, [r0, #4]
 801084c:	2314      	movs	r3, #20
 801084e:	fb03 1102 	mla	r1, r3, r2, r1
 8010852:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 8010854:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010856:	68db      	ldr	r3, [r3, #12]
 8010858:	6023      	str	r3, [r4, #0]
 801085a:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 801085c:	6820      	ldr	r0, [r4, #0]
}
 801085e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 8010862:	f7ff bf79 	b.w	8010758 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010866:	b942      	cbnz	r2, 801087a <vTaskSwitchContext+0x6e>
 8010868:	f04f 0350 	mov.w	r3, #80	; 0x50
 801086c:	f383 8811 	msr	BASEPRI, r3
 8010870:	f3bf 8f6f 	isb	sy
 8010874:	f3bf 8f4f 	dsb	sy
 8010878:	e7fe      	b.n	8010878 <vTaskSwitchContext+0x6c>
 801087a:	3a01      	subs	r2, #1
 801087c:	e7d8      	b.n	8010830 <vTaskSwitchContext+0x24>
 801087e:	bf00      	nop
 8010880:	2400e910 	.word	0x2400e910
 8010884:	2400e994 	.word	0x2400e994
 8010888:	2400e49c 	.word	0x2400e49c
 801088c:	2400e918 	.word	0x2400e918
 8010890:	2400e4a8 	.word	0x2400e4a8

08010894 <vTaskPlaceOnEventList>:
{
 8010894:	b510      	push	{r4, lr}
 8010896:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8010898:	b940      	cbnz	r0, 80108ac <vTaskPlaceOnEventList+0x18>
 801089a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801089e:	f383 8811 	msr	BASEPRI, r3
 80108a2:	f3bf 8f6f 	isb	sy
 80108a6:	f3bf 8f4f 	dsb	sy
 80108aa:	e7fe      	b.n	80108aa <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80108ac:	4b05      	ldr	r3, [pc, #20]	; (80108c4 <vTaskPlaceOnEventList+0x30>)
 80108ae:	6819      	ldr	r1, [r3, #0]
 80108b0:	3118      	adds	r1, #24
 80108b2:	f7fe fd91 	bl	800f3d8 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80108b6:	4620      	mov	r0, r4
 80108b8:	2101      	movs	r1, #1
}
 80108ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80108be:	f7ff bcd7 	b.w	8010270 <prvAddCurrentTaskToDelayedList>
 80108c2:	bf00      	nop
 80108c4:	2400e49c 	.word	0x2400e49c

080108c8 <vTaskPlaceOnEventListRestricted>:
	{
 80108c8:	b538      	push	{r3, r4, r5, lr}
 80108ca:	460d      	mov	r5, r1
 80108cc:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 80108ce:	b940      	cbnz	r0, 80108e2 <vTaskPlaceOnEventListRestricted+0x1a>
 80108d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108d4:	f383 8811 	msr	BASEPRI, r3
 80108d8:	f3bf 8f6f 	isb	sy
 80108dc:	f3bf 8f4f 	dsb	sy
 80108e0:	e7fe      	b.n	80108e0 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80108e2:	4b07      	ldr	r3, [pc, #28]	; (8010900 <vTaskPlaceOnEventListRestricted+0x38>)
 80108e4:	6819      	ldr	r1, [r3, #0]
 80108e6:	3118      	adds	r1, #24
 80108e8:	f7fe fd6a 	bl	800f3c0 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80108ec:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80108ee:	4621      	mov	r1, r4
 80108f0:	bf0c      	ite	eq
 80108f2:	4628      	moveq	r0, r5
 80108f4:	f04f 30ff 	movne.w	r0, #4294967295
	}
 80108f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80108fc:	f7ff bcb8 	b.w	8010270 <prvAddCurrentTaskToDelayedList>
 8010900:	2400e49c 	.word	0x2400e49c

08010904 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010904:	68c3      	ldr	r3, [r0, #12]
{
 8010906:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010908:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 801090a:	b944      	cbnz	r4, 801091e <xTaskRemoveFromEventList+0x1a>
 801090c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010910:	f383 8811 	msr	BASEPRI, r3
 8010914:	f3bf 8f6f 	isb	sy
 8010918:	f3bf 8f4f 	dsb	sy
 801091c:	e7fe      	b.n	801091c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801091e:	f104 0118 	add.w	r1, r4, #24
 8010922:	4608      	mov	r0, r1
 8010924:	9101      	str	r1, [sp, #4]
 8010926:	f7fe fd6e 	bl	800f406 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801092a:	4b12      	ldr	r3, [pc, #72]	; (8010974 <xTaskRemoveFromEventList+0x70>)
 801092c:	9901      	ldr	r1, [sp, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	b9e3      	cbnz	r3, 801096c <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010932:	1d21      	adds	r1, r4, #4
 8010934:	4608      	mov	r0, r1
 8010936:	9101      	str	r1, [sp, #4]
 8010938:	f7fe fd65 	bl	800f406 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801093c:	4a0e      	ldr	r2, [pc, #56]	; (8010978 <xTaskRemoveFromEventList+0x74>)
 801093e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010940:	6810      	ldr	r0, [r2, #0]
 8010942:	9901      	ldr	r1, [sp, #4]
 8010944:	4283      	cmp	r3, r0
 8010946:	d900      	bls.n	801094a <xTaskRemoveFromEventList+0x46>
 8010948:	6013      	str	r3, [r2, #0]
 801094a:	4a0c      	ldr	r2, [pc, #48]	; (801097c <xTaskRemoveFromEventList+0x78>)
 801094c:	2014      	movs	r0, #20
 801094e:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010952:	f7fe fd35 	bl	800f3c0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010956:	4b0a      	ldr	r3, [pc, #40]	; (8010980 <xTaskRemoveFromEventList+0x7c>)
 8010958:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801095e:	429a      	cmp	r2, r3
 8010960:	d906      	bls.n	8010970 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 8010962:	2001      	movs	r0, #1
 8010964:	4b07      	ldr	r3, [pc, #28]	; (8010984 <xTaskRemoveFromEventList+0x80>)
 8010966:	6018      	str	r0, [r3, #0]
}
 8010968:	b002      	add	sp, #8
 801096a:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801096c:	4806      	ldr	r0, [pc, #24]	; (8010988 <xTaskRemoveFromEventList+0x84>)
 801096e:	e7f0      	b.n	8010952 <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 8010970:	2000      	movs	r0, #0
	return xReturn;
 8010972:	e7f9      	b.n	8010968 <xTaskRemoveFromEventList+0x64>
 8010974:	2400e910 	.word	0x2400e910
 8010978:	2400e918 	.word	0x2400e918
 801097c:	2400e4a8 	.word	0x2400e4a8
 8010980:	2400e49c 	.word	0x2400e49c
 8010984:	2400e994 	.word	0x2400e994
 8010988:	2400e950 	.word	0x2400e950

0801098c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801098c:	4b03      	ldr	r3, [pc, #12]	; (801099c <vTaskInternalSetTimeOutState+0x10>)
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010992:	4b03      	ldr	r3, [pc, #12]	; (80109a0 <vTaskInternalSetTimeOutState+0x14>)
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	6043      	str	r3, [r0, #4]
}
 8010998:	4770      	bx	lr
 801099a:	bf00      	nop
 801099c:	2400e948 	.word	0x2400e948
 80109a0:	2400e990 	.word	0x2400e990

080109a4 <xTaskCheckForTimeOut>:
{
 80109a4:	b570      	push	{r4, r5, r6, lr}
 80109a6:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80109a8:	4605      	mov	r5, r0
 80109aa:	b940      	cbnz	r0, 80109be <xTaskCheckForTimeOut+0x1a>
 80109ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109b0:	f383 8811 	msr	BASEPRI, r3
 80109b4:	f3bf 8f6f 	isb	sy
 80109b8:	f3bf 8f4f 	dsb	sy
 80109bc:	e7fe      	b.n	80109bc <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80109be:	b941      	cbnz	r1, 80109d2 <xTaskCheckForTimeOut+0x2e>
 80109c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109c4:	f383 8811 	msr	BASEPRI, r3
 80109c8:	f3bf 8f6f 	isb	sy
 80109cc:	f3bf 8f4f 	dsb	sy
 80109d0:	e7fe      	b.n	80109d0 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80109d2:	f7fe fd8f 	bl	800f4f4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80109d6:	4b0f      	ldr	r3, [pc, #60]	; (8010a14 <xTaskCheckForTimeOut+0x70>)
 80109d8:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80109da:	6823      	ldr	r3, [r4, #0]
 80109dc:	1c5a      	adds	r2, r3, #1
 80109de:	d010      	beq.n	8010a02 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80109e0:	480d      	ldr	r0, [pc, #52]	; (8010a18 <xTaskCheckForTimeOut+0x74>)
 80109e2:	682e      	ldr	r6, [r5, #0]
 80109e4:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80109e6:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80109e8:	4286      	cmp	r6, r0
 80109ea:	d001      	beq.n	80109f0 <xTaskCheckForTimeOut+0x4c>
 80109ec:	428a      	cmp	r2, r1
 80109ee:	d90f      	bls.n	8010a10 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80109f0:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80109f2:	4283      	cmp	r3, r0
 80109f4:	d90a      	bls.n	8010a0c <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 80109f6:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 80109f8:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 80109fa:	4413      	add	r3, r2
 80109fc:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80109fe:	f7ff ffc5 	bl	801098c <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8010a02:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8010a04:	f7fe fd96 	bl	800f534 <vPortExitCritical>
}
 8010a08:	4620      	mov	r0, r4
 8010a0a:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8010a10:	2401      	movs	r4, #1
 8010a12:	e7f7      	b.n	8010a04 <xTaskCheckForTimeOut+0x60>
 8010a14:	2400e990 	.word	0x2400e990
 8010a18:	2400e948 	.word	0x2400e948

08010a1c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8010a1c:	4b01      	ldr	r3, [pc, #4]	; (8010a24 <vTaskMissedYield+0x8>)
 8010a1e:	2201      	movs	r2, #1
 8010a20:	601a      	str	r2, [r3, #0]
}
 8010a22:	4770      	bx	lr
 8010a24:	2400e994 	.word	0x2400e994

08010a28 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8010a28:	4b05      	ldr	r3, [pc, #20]	; (8010a40 <xTaskGetSchedulerState+0x18>)
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	b133      	cbz	r3, 8010a3c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010a2e:	4b05      	ldr	r3, [pc, #20]	; (8010a44 <xTaskGetSchedulerState+0x1c>)
 8010a30:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	bf0c      	ite	eq
 8010a36:	2002      	moveq	r0, #2
 8010a38:	2000      	movne	r0, #0
 8010a3a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010a3c:	2001      	movs	r0, #1
	}
 8010a3e:	4770      	bx	lr
 8010a40:	2400e964 	.word	0x2400e964
 8010a44:	2400e910 	.word	0x2400e910

08010a48 <xTaskPriorityInherit>:
	{
 8010a48:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8010a4a:	4604      	mov	r4, r0
 8010a4c:	b340      	cbz	r0, 8010aa0 <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010a4e:	4d1b      	ldr	r5, [pc, #108]	; (8010abc <xTaskPriorityInherit+0x74>)
 8010a50:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010a52:	682a      	ldr	r2, [r5, #0]
 8010a54:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8010a56:	4293      	cmp	r3, r2
 8010a58:	d228      	bcs.n	8010aac <xTaskPriorityInherit+0x64>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010a5a:	6982      	ldr	r2, [r0, #24]
 8010a5c:	2a00      	cmp	r2, #0
 8010a5e:	db04      	blt.n	8010a6a <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a60:	682a      	ldr	r2, [r5, #0]
 8010a62:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8010a64:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8010a68:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010a6a:	2214      	movs	r2, #20
 8010a6c:	4e14      	ldr	r6, [pc, #80]	; (8010ac0 <xTaskPriorityInherit+0x78>)
 8010a6e:	fb02 6303 	mla	r3, r2, r3, r6
 8010a72:	6962      	ldr	r2, [r4, #20]
 8010a74:	429a      	cmp	r2, r3
 8010a76:	d115      	bne.n	8010aa4 <xTaskPriorityInherit+0x5c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010a78:	1d21      	adds	r1, r4, #4
 8010a7a:	4608      	mov	r0, r1
 8010a7c:	9101      	str	r1, [sp, #4]
 8010a7e:	f7fe fcc2 	bl	800f406 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010a82:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010a84:	4a0f      	ldr	r2, [pc, #60]	; (8010ac4 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010a88:	6810      	ldr	r0, [r2, #0]
 8010a8a:	9901      	ldr	r1, [sp, #4]
 8010a8c:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010a8e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010a90:	d900      	bls.n	8010a94 <xTaskPriorityInherit+0x4c>
 8010a92:	6013      	str	r3, [r2, #0]
 8010a94:	2014      	movs	r0, #20
 8010a96:	fb00 6003 	mla	r0, r0, r3, r6
 8010a9a:	f7fe fc91 	bl	800f3c0 <vListInsertEnd>
				xReturn = pdTRUE;
 8010a9e:	2001      	movs	r0, #1
	}
 8010aa0:	b002      	add	sp, #8
 8010aa2:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010aa4:	682b      	ldr	r3, [r5, #0]
 8010aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010aa8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010aaa:	e7f8      	b.n	8010a9e <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010aac:	682b      	ldr	r3, [r5, #0]
 8010aae:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8010ab0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8010ab2:	42a0      	cmp	r0, r4
 8010ab4:	bf2c      	ite	cs
 8010ab6:	2000      	movcs	r0, #0
 8010ab8:	2001      	movcc	r0, #1
 8010aba:	e7f1      	b.n	8010aa0 <xTaskPriorityInherit+0x58>
 8010abc:	2400e49c 	.word	0x2400e49c
 8010ac0:	2400e4a8 	.word	0x2400e4a8
 8010ac4:	2400e918 	.word	0x2400e918

08010ac8 <xTaskPriorityDisinherit>:
	{
 8010ac8:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 8010aca:	b910      	cbnz	r0, 8010ad2 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8010acc:	2000      	movs	r0, #0
	}
 8010ace:	b002      	add	sp, #8
 8010ad0:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8010ad2:	4b1c      	ldr	r3, [pc, #112]	; (8010b44 <xTaskPriorityDisinherit+0x7c>)
 8010ad4:	681c      	ldr	r4, [r3, #0]
 8010ad6:	4284      	cmp	r4, r0
 8010ad8:	d008      	beq.n	8010aec <xTaskPriorityDisinherit+0x24>
 8010ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ade:	f383 8811 	msr	BASEPRI, r3
 8010ae2:	f3bf 8f6f 	isb	sy
 8010ae6:	f3bf 8f4f 	dsb	sy
 8010aea:	e7fe      	b.n	8010aea <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8010aec:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010aee:	b943      	cbnz	r3, 8010b02 <xTaskPriorityDisinherit+0x3a>
 8010af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010af4:	f383 8811 	msr	BASEPRI, r3
 8010af8:	f3bf 8f6f 	isb	sy
 8010afc:	f3bf 8f4f 	dsb	sy
 8010b00:	e7fe      	b.n	8010b00 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010b02:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8010b04:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010b06:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8010b08:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010b0a:	4291      	cmp	r1, r2
 8010b0c:	d0de      	beq.n	8010acc <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d1dc      	bne.n	8010acc <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010b12:	1d21      	adds	r1, r4, #4
 8010b14:	4608      	mov	r0, r1
 8010b16:	9101      	str	r1, [sp, #4]
 8010b18:	f7fe fc75 	bl	800f406 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010b1c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 8010b1e:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b20:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010b24:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b26:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8010b28:	4a07      	ldr	r2, [pc, #28]	; (8010b48 <xTaskPriorityDisinherit+0x80>)
 8010b2a:	6810      	ldr	r0, [r2, #0]
 8010b2c:	4283      	cmp	r3, r0
 8010b2e:	d900      	bls.n	8010b32 <xTaskPriorityDisinherit+0x6a>
 8010b30:	6013      	str	r3, [r2, #0]
 8010b32:	4a06      	ldr	r2, [pc, #24]	; (8010b4c <xTaskPriorityDisinherit+0x84>)
 8010b34:	2014      	movs	r0, #20
 8010b36:	fb00 2003 	mla	r0, r0, r3, r2
 8010b3a:	f7fe fc41 	bl	800f3c0 <vListInsertEnd>
					xReturn = pdTRUE;
 8010b3e:	2001      	movs	r0, #1
		return xReturn;
 8010b40:	e7c5      	b.n	8010ace <xTaskPriorityDisinherit+0x6>
 8010b42:	bf00      	nop
 8010b44:	2400e49c 	.word	0x2400e49c
 8010b48:	2400e918 	.word	0x2400e918
 8010b4c:	2400e4a8 	.word	0x2400e4a8

08010b50 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8010b50:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8010b52:	4604      	mov	r4, r0
 8010b54:	2800      	cmp	r0, #0
 8010b56:	d044      	beq.n	8010be2 <vTaskPriorityDisinheritAfterTimeout+0x92>
			configASSERT( pxTCB->uxMutexesHeld );
 8010b58:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8010b5a:	b942      	cbnz	r2, 8010b6e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8010b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b60:	f383 8811 	msr	BASEPRI, r3
 8010b64:	f3bf 8f6f 	isb	sy
 8010b68:	f3bf 8f4f 	dsb	sy
 8010b6c:	e7fe      	b.n	8010b6c <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010b6e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8010b70:	4299      	cmp	r1, r3
 8010b72:	bf38      	it	cc
 8010b74:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010b76:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010b78:	428b      	cmp	r3, r1
 8010b7a:	d032      	beq.n	8010be2 <vTaskPriorityDisinheritAfterTimeout+0x92>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010b7c:	2a01      	cmp	r2, #1
 8010b7e:	d130      	bne.n	8010be2 <vTaskPriorityDisinheritAfterTimeout+0x92>
					configASSERT( pxTCB != pxCurrentTCB );
 8010b80:	4a19      	ldr	r2, [pc, #100]	; (8010be8 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8010b82:	6812      	ldr	r2, [r2, #0]
 8010b84:	4282      	cmp	r2, r0
 8010b86:	d108      	bne.n	8010b9a <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8010b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b8c:	f383 8811 	msr	BASEPRI, r3
 8010b90:	f3bf 8f6f 	isb	sy
 8010b94:	f3bf 8f4f 	dsb	sy
 8010b98:	e7fe      	b.n	8010b98 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010b9a:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010b9c:	4d13      	ldr	r5, [pc, #76]	; (8010bec <vTaskPriorityDisinheritAfterTimeout+0x9c>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010b9e:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010ba0:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 8010ba4:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010ba6:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010baa:	bfa8      	it	ge
 8010bac:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010bb0:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010bb2:	bfa8      	it	ge
 8010bb4:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010bb6:	429a      	cmp	r2, r3
 8010bb8:	d113      	bne.n	8010be2 <vTaskPriorityDisinheritAfterTimeout+0x92>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010bba:	1d01      	adds	r1, r0, #4
 8010bbc:	4608      	mov	r0, r1
 8010bbe:	9101      	str	r1, [sp, #4]
 8010bc0:	f7fe fc21 	bl	800f406 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8010bc4:	4a0a      	ldr	r2, [pc, #40]	; (8010bf0 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 8010bc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010bc8:	6810      	ldr	r0, [r2, #0]
 8010bca:	9901      	ldr	r1, [sp, #4]
 8010bcc:	4283      	cmp	r3, r0
 8010bce:	d900      	bls.n	8010bd2 <vTaskPriorityDisinheritAfterTimeout+0x82>
 8010bd0:	6013      	str	r3, [r2, #0]
 8010bd2:	2014      	movs	r0, #20
 8010bd4:	fb00 5003 	mla	r0, r0, r3, r5
	}
 8010bd8:	b003      	add	sp, #12
 8010bda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 8010bde:	f7fe bbef 	b.w	800f3c0 <vListInsertEnd>
	}
 8010be2:	b003      	add	sp, #12
 8010be4:	bd30      	pop	{r4, r5, pc}
 8010be6:	bf00      	nop
 8010be8:	2400e49c 	.word	0x2400e49c
 8010bec:	2400e4a8 	.word	0x2400e4a8
 8010bf0:	2400e918 	.word	0x2400e918

08010bf4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8010bf4:	4b04      	ldr	r3, [pc, #16]	; (8010c08 <pvTaskIncrementMutexHeldCount+0x14>)
 8010bf6:	681a      	ldr	r2, [r3, #0]
 8010bf8:	b11a      	cbz	r2, 8010c02 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8010bfa:	6819      	ldr	r1, [r3, #0]
 8010bfc:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8010bfe:	3201      	adds	r2, #1
 8010c00:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 8010c02:	6818      	ldr	r0, [r3, #0]
	}
 8010c04:	4770      	bx	lr
 8010c06:	bf00      	nop
 8010c08:	2400e49c 	.word	0x2400e49c

08010c0c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010c0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8010c0e:	4c11      	ldr	r4, [pc, #68]	; (8010c54 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8010c10:	f7fe fc70 	bl	800f4f4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8010c14:	6825      	ldr	r5, [r4, #0]
 8010c16:	b9bd      	cbnz	r5, 8010c48 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8010c18:	4f0f      	ldr	r7, [pc, #60]	; (8010c58 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8010c1a:	4e10      	ldr	r6, [pc, #64]	; (8010c5c <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8010c1c:	4638      	mov	r0, r7
 8010c1e:	f7fe fbc1 	bl	800f3a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010c22:	4630      	mov	r0, r6
 8010c24:	f7fe fbbe 	bl	800f3a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010c28:	4b0d      	ldr	r3, [pc, #52]	; (8010c60 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010c2a:	4a0e      	ldr	r2, [pc, #56]	; (8010c64 <prvCheckForValidListAndQueue+0x58>)
 8010c2c:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8010c2e:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010c30:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8010c32:	4b0d      	ldr	r3, [pc, #52]	; (8010c68 <prvCheckForValidListAndQueue+0x5c>)
 8010c34:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010c36:	4b0d      	ldr	r3, [pc, #52]	; (8010c6c <prvCheckForValidListAndQueue+0x60>)
 8010c38:	9500      	str	r5, [sp, #0]
 8010c3a:	f7fe fe6b 	bl	800f914 <xQueueGenericCreateStatic>
 8010c3e:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010c40:	b110      	cbz	r0, 8010c48 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010c42:	490b      	ldr	r1, [pc, #44]	; (8010c70 <prvCheckForValidListAndQueue+0x64>)
 8010c44:	f7ff fa36 	bl	80100b4 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8010c48:	b003      	add	sp, #12
 8010c4a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8010c4e:	f7fe bc71 	b.w	800f534 <vPortExitCritical>
 8010c52:	bf00      	nop
 8010c54:	2400eabc 	.word	0x2400eabc
 8010c58:	2400ea40 	.word	0x2400ea40
 8010c5c:	2400ea54 	.word	0x2400ea54
 8010c60:	2400e998 	.word	0x2400e998
 8010c64:	2400e9a0 	.word	0x2400e9a0
 8010c68:	2400e99c 	.word	0x2400e99c
 8010c6c:	2400ea6c 	.word	0x2400ea6c
 8010c70:	080256fd 	.word	0x080256fd

08010c74 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8010c74:	4291      	cmp	r1, r2
{
 8010c76:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010c78:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010c7a:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8010c7c:	d80a      	bhi.n	8010c94 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c7e:	1ad2      	subs	r2, r2, r3
 8010c80:	6983      	ldr	r3, [r0, #24]
 8010c82:	429a      	cmp	r2, r3
 8010c84:	d20d      	bcs.n	8010ca2 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010c86:	1d01      	adds	r1, r0, #4
 8010c88:	4b07      	ldr	r3, [pc, #28]	; (8010ca8 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010c8a:	6818      	ldr	r0, [r3, #0]
 8010c8c:	f7fe fba4 	bl	800f3d8 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8010c90:	2000      	movs	r0, #0
}
 8010c92:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010c94:	429a      	cmp	r2, r3
 8010c96:	d201      	bcs.n	8010c9c <prvInsertTimerInActiveList+0x28>
 8010c98:	4299      	cmp	r1, r3
 8010c9a:	d202      	bcs.n	8010ca2 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010c9c:	1d01      	adds	r1, r0, #4
 8010c9e:	4b03      	ldr	r3, [pc, #12]	; (8010cac <prvInsertTimerInActiveList+0x38>)
 8010ca0:	e7f3      	b.n	8010c8a <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8010ca2:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8010ca4:	e7f5      	b.n	8010c92 <prvInsertTimerInActiveList+0x1e>
 8010ca6:	bf00      	nop
 8010ca8:	2400e99c 	.word	0x2400e99c
 8010cac:	2400e998 	.word	0x2400e998

08010cb0 <xTimerCreateTimerTask>:
{
 8010cb0:	b510      	push	{r4, lr}
 8010cb2:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8010cb4:	f7ff ffaa 	bl	8010c0c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8010cb8:	4b12      	ldr	r3, [pc, #72]	; (8010d04 <xTimerCreateTimerTask+0x54>)
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	b1b3      	cbz	r3, 8010cec <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010cbe:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010cc0:	aa07      	add	r2, sp, #28
 8010cc2:	a906      	add	r1, sp, #24
 8010cc4:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010cc6:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010cca:	f7fe fa65 	bl	800f198 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010cce:	9b05      	ldr	r3, [sp, #20]
 8010cd0:	9a07      	ldr	r2, [sp, #28]
 8010cd2:	9302      	str	r3, [sp, #8]
 8010cd4:	9b06      	ldr	r3, [sp, #24]
 8010cd6:	490c      	ldr	r1, [pc, #48]	; (8010d08 <xTimerCreateTimerTask+0x58>)
 8010cd8:	9301      	str	r3, [sp, #4]
 8010cda:	2302      	movs	r3, #2
 8010cdc:	480b      	ldr	r0, [pc, #44]	; (8010d0c <xTimerCreateTimerTask+0x5c>)
 8010cde:	9300      	str	r3, [sp, #0]
 8010ce0:	4623      	mov	r3, r4
 8010ce2:	f7ff fbac 	bl	801043e <xTaskCreateStatic>
 8010ce6:	4b0a      	ldr	r3, [pc, #40]	; (8010d10 <xTimerCreateTimerTask+0x60>)
 8010ce8:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8010cea:	b940      	cbnz	r0, 8010cfe <xTimerCreateTimerTask+0x4e>
 8010cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cf0:	f383 8811 	msr	BASEPRI, r3
 8010cf4:	f3bf 8f6f 	isb	sy
 8010cf8:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8010cfc:	e7fe      	b.n	8010cfc <xTimerCreateTimerTask+0x4c>
}
 8010cfe:	2001      	movs	r0, #1
 8010d00:	b008      	add	sp, #32
 8010d02:	bd10      	pop	{r4, pc}
 8010d04:	2400eabc 	.word	0x2400eabc
 8010d08:	08025702 	.word	0x08025702
 8010d0c:	08010e15 	.word	0x08010e15
 8010d10:	2400eac0 	.word	0x2400eac0

08010d14 <xTimerGenericCommand>:
{
 8010d14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010d16:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8010d18:	4604      	mov	r4, r0
{
 8010d1a:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8010d1c:	b940      	cbnz	r0, 8010d30 <xTimerGenericCommand+0x1c>
 8010d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d22:	f383 8811 	msr	BASEPRI, r3
 8010d26:	f3bf 8f6f 	isb	sy
 8010d2a:	f3bf 8f4f 	dsb	sy
 8010d2e:	e7fe      	b.n	8010d2e <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8010d30:	4d0c      	ldr	r5, [pc, #48]	; (8010d64 <xTimerGenericCommand+0x50>)
 8010d32:	6828      	ldr	r0, [r5, #0]
 8010d34:	b178      	cbz	r0, 8010d56 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010d36:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010d38:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010d3a:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010d3e:	dc0c      	bgt.n	8010d5a <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010d40:	f7ff fe72 	bl	8010a28 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010d44:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010d46:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010d48:	4669      	mov	r1, sp
 8010d4a:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010d4c:	bf0c      	ite	eq
 8010d4e:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010d50:	461a      	movne	r2, r3
 8010d52:	f7fe fe94 	bl	800fa7e <xQueueGenericSend>
}
 8010d56:	b004      	add	sp, #16
 8010d58:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	4669      	mov	r1, sp
 8010d5e:	f7fe ff41 	bl	800fbe4 <xQueueGenericSendFromISR>
 8010d62:	e7f8      	b.n	8010d56 <xTimerGenericCommand+0x42>
 8010d64:	2400eabc 	.word	0x2400eabc

08010d68 <prvSampleTimeNow>:
{
 8010d68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8010d6c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8010e10 <prvSampleTimeNow+0xa8>
{
 8010d70:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8010d72:	f7ff fbd1 	bl	8010518 <xTaskGetTickCount>
 8010d76:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8010d78:	f8d8 3000 	ldr.w	r3, [r8]
 8010d7c:	4283      	cmp	r3, r0
 8010d7e:	d940      	bls.n	8010e02 <prvSampleTimeNow+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010d80:	4f21      	ldr	r7, [pc, #132]	; (8010e08 <prvSampleTimeNow+0xa0>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010d82:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010d86:	683b      	ldr	r3, [r7, #0]
 8010d88:	681a      	ldr	r2, [r3, #0]
 8010d8a:	b95a      	cbnz	r2, 8010da4 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8010d8c:	4a1f      	ldr	r2, [pc, #124]	; (8010e0c <prvSampleTimeNow+0xa4>)
 8010d8e:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010d90:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8010d92:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 8010d94:	6039      	str	r1, [r7, #0]
}
 8010d96:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdFALSE;
 8010d98:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8010d9a:	f8c8 5000 	str.w	r5, [r8]
}
 8010d9e:	b004      	add	sp, #16
 8010da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010da4:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010da6:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010da8:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010dac:	1d21      	adds	r1, r4, #4
 8010dae:	4608      	mov	r0, r1
 8010db0:	9103      	str	r1, [sp, #12]
 8010db2:	f7fe fb28 	bl	800f406 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010db6:	6a23      	ldr	r3, [r4, #32]
 8010db8:	4620      	mov	r0, r4
 8010dba:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010dbc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8010dc0:	9903      	ldr	r1, [sp, #12]
 8010dc2:	f013 0f04 	tst.w	r3, #4
 8010dc6:	d0de      	beq.n	8010d86 <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010dc8:	69a3      	ldr	r3, [r4, #24]
 8010dca:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 8010dcc:	459a      	cmp	sl, r3
 8010dce:	d205      	bcs.n	8010ddc <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010dd0:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010dd2:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010dd4:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010dd6:	f7fe faff 	bl	800f3d8 <vListInsert>
 8010dda:	e7d4      	b.n	8010d86 <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010ddc:	2300      	movs	r3, #0
 8010dde:	4652      	mov	r2, sl
 8010de0:	4620      	mov	r0, r4
 8010de2:	f8cd 9000 	str.w	r9, [sp]
 8010de6:	4619      	mov	r1, r3
 8010de8:	f7ff ff94 	bl	8010d14 <xTimerGenericCommand>
				configASSERT( xResult );
 8010dec:	2800      	cmp	r0, #0
 8010dee:	d1ca      	bne.n	8010d86 <prvSampleTimeNow+0x1e>
 8010df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010df4:	f383 8811 	msr	BASEPRI, r3
 8010df8:	f3bf 8f6f 	isb	sy
 8010dfc:	f3bf 8f4f 	dsb	sy
 8010e00:	e7fe      	b.n	8010e00 <prvSampleTimeNow+0x98>
		*pxTimerListsWereSwitched = pdFALSE;
 8010e02:	2300      	movs	r3, #0
 8010e04:	e7c7      	b.n	8010d96 <prvSampleTimeNow+0x2e>
 8010e06:	bf00      	nop
 8010e08:	2400e998 	.word	0x2400e998
 8010e0c:	2400e99c 	.word	0x2400e99c
 8010e10:	2400ea68 	.word	0x2400ea68

08010e14 <prvTimerTask>:
{
 8010e14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010e18:	4d6e      	ldr	r5, [pc, #440]	; (8010fd4 <prvTimerTask+0x1c0>)
{
 8010e1a:	b089      	sub	sp, #36	; 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010e1c:	4e6e      	ldr	r6, [pc, #440]	; (8010fd8 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010e1e:	682b      	ldr	r3, [r5, #0]
 8010e20:	f8d3 8000 	ldr.w	r8, [r3]
 8010e24:	f1b8 0f00 	cmp.w	r8, #0
 8010e28:	d035      	beq.n	8010e96 <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010e2a:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010e2c:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010e2e:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8010e32:	f7ff fb69 	bl	8010508 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010e36:	a804      	add	r0, sp, #16
 8010e38:	f7ff ff96 	bl	8010d68 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8010e3c:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010e3e:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d169      	bne.n	8010f18 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010e44:	2c00      	cmp	r4, #0
 8010e46:	d14c      	bne.n	8010ee2 <prvTimerTask+0xce>
 8010e48:	4540      	cmp	r0, r8
 8010e4a:	d350      	bcc.n	8010eee <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 8010e4c:	f7ff fc00 	bl	8010650 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e50:	682b      	ldr	r3, [r5, #0]
 8010e52:	68db      	ldr	r3, [r3, #12]
 8010e54:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010e56:	1d38      	adds	r0, r7, #4
 8010e58:	f7fe fad5 	bl	800f406 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010e5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010e60:	0758      	lsls	r0, r3, #29
 8010e62:	d51a      	bpl.n	8010e9a <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010e64:	69b9      	ldr	r1, [r7, #24]
 8010e66:	4643      	mov	r3, r8
 8010e68:	464a      	mov	r2, r9
 8010e6a:	4638      	mov	r0, r7
 8010e6c:	4441      	add	r1, r8
 8010e6e:	f7ff ff01 	bl	8010c74 <prvInsertTimerInActiveList>
 8010e72:	b1b0      	cbz	r0, 8010ea2 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010e74:	4623      	mov	r3, r4
 8010e76:	4642      	mov	r2, r8
 8010e78:	4621      	mov	r1, r4
 8010e7a:	4638      	mov	r0, r7
 8010e7c:	9400      	str	r4, [sp, #0]
 8010e7e:	f7ff ff49 	bl	8010d14 <xTimerGenericCommand>
			configASSERT( xResult );
 8010e82:	b970      	cbnz	r0, 8010ea2 <prvTimerTask+0x8e>
 8010e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e88:	f383 8811 	msr	BASEPRI, r3
 8010e8c:	f3bf 8f6f 	isb	sy
 8010e90:	f3bf 8f4f 	dsb	sy
 8010e94:	e7fe      	b.n	8010e94 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010e96:	2401      	movs	r4, #1
 8010e98:	e7cb      	b.n	8010e32 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010e9a:	f023 0301 	bic.w	r3, r3, #1
 8010e9e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010ea2:	6a3b      	ldr	r3, [r7, #32]
 8010ea4:	4638      	mov	r0, r7
 8010ea6:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010ea8:	2200      	movs	r2, #0
 8010eaa:	a904      	add	r1, sp, #16
 8010eac:	6830      	ldr	r0, [r6, #0]
 8010eae:	f7fe ff4f 	bl	800fd50 <xQueueReceive>
 8010eb2:	2800      	cmp	r0, #0
 8010eb4:	d0b3      	beq.n	8010e1e <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010eb6:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010eb8:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	db2f      	blt.n	8010f1e <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010ebe:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010ec0:	6963      	ldr	r3, [r4, #20]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d132      	bne.n	8010f2c <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010ec6:	a803      	add	r0, sp, #12
 8010ec8:	f7ff ff4e 	bl	8010d68 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8010ecc:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010ece:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8010ed0:	2b09      	cmp	r3, #9
 8010ed2:	d8e9      	bhi.n	8010ea8 <prvTimerTask+0x94>
 8010ed4:	e8df f003 	tbb	[pc, r3]
 8010ed8:	572e2e2e 	.word	0x572e2e2e
 8010edc:	2e2e765e 	.word	0x2e2e765e
 8010ee0:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010ee2:	4b3e      	ldr	r3, [pc, #248]	; (8010fdc <prvTimerTask+0x1c8>)
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	681c      	ldr	r4, [r3, #0]
 8010ee8:	fab4 f484 	clz	r4, r4
 8010eec:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010eee:	4622      	mov	r2, r4
 8010ef0:	eba8 0109 	sub.w	r1, r8, r9
 8010ef4:	6830      	ldr	r0, [r6, #0]
 8010ef6:	f7ff f91a 	bl	801012e <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010efa:	f7ff fba9 	bl	8010650 <xTaskResumeAll>
 8010efe:	2800      	cmp	r0, #0
 8010f00:	d1d2      	bne.n	8010ea8 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 8010f02:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f0a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8010f0e:	f3bf 8f4f 	dsb	sy
 8010f12:	f3bf 8f6f 	isb	sy
 8010f16:	e7c7      	b.n	8010ea8 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 8010f18:	f7ff fb9a 	bl	8010650 <xTaskResumeAll>
}
 8010f1c:	e7c4      	b.n	8010ea8 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010f1e:	9b05      	ldr	r3, [sp, #20]
 8010f20:	9907      	ldr	r1, [sp, #28]
 8010f22:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010f24:	9b04      	ldr	r3, [sp, #16]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	dbbe      	blt.n	8010ea8 <prvTimerTask+0x94>
 8010f2a:	e7c8      	b.n	8010ebe <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010f2c:	1d20      	adds	r0, r4, #4
 8010f2e:	f7fe fa6a 	bl	800f406 <uxListRemove>
 8010f32:	e7c8      	b.n	8010ec6 <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010f34:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010f38:	4620      	mov	r0, r4
 8010f3a:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010f3c:	f043 0301 	orr.w	r3, r3, #1
 8010f40:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010f44:	9b05      	ldr	r3, [sp, #20]
 8010f46:	4419      	add	r1, r3
 8010f48:	f7ff fe94 	bl	8010c74 <prvInsertTimerInActiveList>
 8010f4c:	2800      	cmp	r0, #0
 8010f4e:	d0ab      	beq.n	8010ea8 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010f50:	6a23      	ldr	r3, [r4, #32]
 8010f52:	4620      	mov	r0, r4
 8010f54:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010f56:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8010f5a:	0759      	lsls	r1, r3, #29
 8010f5c:	d5a4      	bpl.n	8010ea8 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010f5e:	69a2      	ldr	r2, [r4, #24]
 8010f60:	2300      	movs	r3, #0
 8010f62:	9905      	ldr	r1, [sp, #20]
 8010f64:	4620      	mov	r0, r4
 8010f66:	9300      	str	r3, [sp, #0]
 8010f68:	440a      	add	r2, r1
 8010f6a:	4619      	mov	r1, r3
 8010f6c:	f7ff fed2 	bl	8010d14 <xTimerGenericCommand>
							configASSERT( xResult );
 8010f70:	2800      	cmp	r0, #0
 8010f72:	d199      	bne.n	8010ea8 <prvTimerTask+0x94>
 8010f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f78:	f383 8811 	msr	BASEPRI, r3
 8010f7c:	f3bf 8f6f 	isb	sy
 8010f80:	f3bf 8f4f 	dsb	sy
 8010f84:	e7fe      	b.n	8010f84 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010f86:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010f8a:	f023 0301 	bic.w	r3, r3, #1
 8010f8e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8010f92:	e789      	b.n	8010ea8 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010f94:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8010f98:	f043 0301 	orr.w	r3, r3, #1
 8010f9c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010fa0:	9905      	ldr	r1, [sp, #20]
 8010fa2:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010fa4:	b941      	cbnz	r1, 8010fb8 <prvTimerTask+0x1a4>
 8010fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010faa:	f383 8811 	msr	BASEPRI, r3
 8010fae:	f3bf 8f6f 	isb	sy
 8010fb2:	f3bf 8f4f 	dsb	sy
 8010fb6:	e7fe      	b.n	8010fb6 <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010fb8:	4603      	mov	r3, r0
 8010fba:	4401      	add	r1, r0
 8010fbc:	4620      	mov	r0, r4
 8010fbe:	f7ff fe59 	bl	8010c74 <prvInsertTimerInActiveList>
					break;
 8010fc2:	e771      	b.n	8010ea8 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010fc4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8010fc8:	079a      	lsls	r2, r3, #30
 8010fca:	d4de      	bmi.n	8010f8a <prvTimerTask+0x176>
							vPortFree( pxTimer );
 8010fcc:	4620      	mov	r0, r4
 8010fce:	f7fe f9ab 	bl	800f328 <vPortFree>
 8010fd2:	e769      	b.n	8010ea8 <prvTimerTask+0x94>
 8010fd4:	2400e998 	.word	0x2400e998
 8010fd8:	2400eabc 	.word	0x2400eabc
 8010fdc:	2400e99c 	.word	0x2400e99c

08010fe0 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8010fe0:	8880      	ldrh	r0, [r0, #4]
 8010fe2:	4770      	bx	lr

08010fe4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8010fe4:	b570      	push	{r4, r5, r6, lr}
 8010fe6:	6803      	ldr	r3, [r0, #0]
 8010fe8:	460c      	mov	r4, r1
 8010fea:	2100      	movs	r1, #0
 8010fec:	4605      	mov	r5, r0
 8010fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ff0:	4798      	blx	r3
 8010ff2:	4606      	mov	r6, r0
 8010ff4:	682b      	ldr	r3, [r5, #0]
 8010ff6:	4628      	mov	r0, r5
 8010ff8:	1ba4      	subs	r4, r4, r6
 8010ffa:	6a1b      	ldr	r3, [r3, #32]
 8010ffc:	b2a4      	uxth	r4, r4
 8010ffe:	4798      	blx	r3
 8011000:	fbb4 f0f0 	udiv	r0, r4, r0
 8011004:	bd70      	pop	{r4, r5, r6, pc}

08011006 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8011006:	2300      	movs	r3, #0
 8011008:	8083      	strh	r3, [r0, #4]
 801100a:	4770      	bx	lr

0801100c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801100c:	b510      	push	{r4, lr}
 801100e:	6803      	ldr	r3, [r0, #0]
 8011010:	4604      	mov	r4, r0
 8011012:	8881      	ldrh	r1, [r0, #4]
 8011014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011016:	4798      	blx	r3
 8011018:	88a3      	ldrh	r3, [r4, #4]
 801101a:	3301      	adds	r3, #1
 801101c:	80a3      	strh	r3, [r4, #4]
 801101e:	bd10      	pop	{r4, pc}

08011020 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8011020:	6803      	ldr	r3, [r0, #0]
 8011022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011024:	4718      	bx	r3

08011026 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8011026:	4770      	bx	lr

08011028 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8011028:	4a02      	ldr	r2, [pc, #8]	; (8011034 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801102a:	6002      	str	r2, [r0, #0]
 801102c:	2200      	movs	r2, #0
 801102e:	8082      	strh	r2, [r0, #4]
 8011030:	4770      	bx	lr
 8011032:	bf00      	nop
 8011034:	08025714 	.word	0x08025714

08011038 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8011038:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801103a:	2000      	movs	r0, #0
 801103c:	b12b      	cbz	r3, 801104a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801103e:	b920      	cbnz	r0, 801104a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8011040:	1a5a      	subs	r2, r3, r1
 8011042:	699b      	ldr	r3, [r3, #24]
 8011044:	4250      	negs	r0, r2
 8011046:	4150      	adcs	r0, r2
 8011048:	e7f8      	b.n	801103c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801104a:	4770      	bx	lr

0801104c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 801104c:	2300      	movs	r3, #0
 801104e:	6148      	str	r0, [r1, #20]
 8011050:	618b      	str	r3, [r1, #24]
 8011052:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011054:	b913      	cbnz	r3, 801105c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8011056:	6281      	str	r1, [r0, #40]	; 0x28
 8011058:	4770      	bx	lr
 801105a:	4613      	mov	r3, r2
 801105c:	699a      	ldr	r2, [r3, #24]
 801105e:	2a00      	cmp	r2, #0
 8011060:	d1fb      	bne.n	801105a <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8011062:	6199      	str	r1, [r3, #24]
 8011064:	4770      	bx	lr

08011066 <_ZN8touchgfx9Container9removeAllEv>:
 8011066:	2200      	movs	r2, #0
 8011068:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801106a:	b123      	cbz	r3, 8011076 <_ZN8touchgfx9Container9removeAllEv+0x10>
 801106c:	6999      	ldr	r1, [r3, #24]
 801106e:	6281      	str	r1, [r0, #40]	; 0x28
 8011070:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8011074:	e7f8      	b.n	8011068 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8011076:	4770      	bx	lr

08011078 <_ZN8touchgfx9Container6unlinkEv>:
 8011078:	2300      	movs	r3, #0
 801107a:	6283      	str	r3, [r0, #40]	; 0x28
 801107c:	4770      	bx	lr

0801107e <_ZNK8touchgfx9Container12getSolidRectEv>:
 801107e:	2200      	movs	r2, #0
 8011080:	8002      	strh	r2, [r0, #0]
 8011082:	8042      	strh	r2, [r0, #2]
 8011084:	8082      	strh	r2, [r0, #4]
 8011086:	80c2      	strh	r2, [r0, #6]
 8011088:	4770      	bx	lr

0801108a <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 801108a:	b570      	push	{r4, r5, r6, lr}
 801108c:	460d      	mov	r5, r1
 801108e:	4616      	mov	r6, r2
 8011090:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011092:	b13c      	cbz	r4, 80110a4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8011094:	6823      	ldr	r3, [r4, #0]
 8011096:	4620      	mov	r0, r4
 8011098:	4632      	mov	r2, r6
 801109a:	4629      	mov	r1, r5
 801109c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801109e:	4798      	blx	r3
 80110a0:	69a4      	ldr	r4, [r4, #24]
 80110a2:	e7f6      	b.n	8011092 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 80110a4:	bd70      	pop	{r4, r5, r6, pc}

080110a6 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 80110a6:	b538      	push	{r3, r4, r5, lr}
 80110a8:	460d      	mov	r5, r1
 80110aa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80110ac:	b134      	cbz	r4, 80110bc <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 80110ae:	682b      	ldr	r3, [r5, #0]
 80110b0:	4621      	mov	r1, r4
 80110b2:	4628      	mov	r0, r5
 80110b4:	689b      	ldr	r3, [r3, #8]
 80110b6:	4798      	blx	r3
 80110b8:	69a4      	ldr	r4, [r4, #24]
 80110ba:	e7f7      	b.n	80110ac <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 80110bc:	bd38      	pop	{r3, r4, r5, pc}

080110be <_ZN8touchgfx9ContainerD1Ev>:
 80110be:	4770      	bx	lr

080110c0 <_ZN8touchgfx9ContainerD0Ev>:
 80110c0:	b510      	push	{r4, lr}
 80110c2:	4604      	mov	r4, r0
 80110c4:	212c      	movs	r1, #44	; 0x2c
 80110c6:	f011 fdde 	bl	8022c86 <_ZdlPvj>
 80110ca:	4620      	mov	r0, r4
 80110cc:	bd10      	pop	{r4, pc}

080110ce <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 80110ce:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80110d0:	b19b      	cbz	r3, 80110fa <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80110d2:	428b      	cmp	r3, r1
 80110d4:	d109      	bne.n	80110ea <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 80110d6:	699a      	ldr	r2, [r3, #24]
 80110d8:	2100      	movs	r1, #0
 80110da:	6159      	str	r1, [r3, #20]
 80110dc:	6282      	str	r2, [r0, #40]	; 0x28
 80110de:	b902      	cbnz	r2, 80110e2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 80110e0:	4770      	bx	lr
 80110e2:	6199      	str	r1, [r3, #24]
 80110e4:	4770      	bx	lr
 80110e6:	4613      	mov	r3, r2
 80110e8:	b13a      	cbz	r2, 80110fa <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80110ea:	699a      	ldr	r2, [r3, #24]
 80110ec:	428a      	cmp	r2, r1
 80110ee:	d1fa      	bne.n	80110e6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80110f0:	698a      	ldr	r2, [r1, #24]
 80110f2:	619a      	str	r2, [r3, #24]
 80110f4:	2300      	movs	r3, #0
 80110f6:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80110fa:	4770      	bx	lr

080110fc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80110fc:	b410      	push	{r4}
 80110fe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011100:	4604      	mov	r4, r0
 8011102:	b92b      	cbnz	r3, 8011110 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8011104:	6803      	ldr	r3, [r0, #0]
 8011106:	4611      	mov	r1, r2
 8011108:	f85d 4b04 	ldr.w	r4, [sp], #4
 801110c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801110e:	4718      	bx	r3
 8011110:	b941      	cbnz	r1, 8011124 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8011112:	6193      	str	r3, [r2, #24]
 8011114:	6282      	str	r2, [r0, #40]	; 0x28
 8011116:	6154      	str	r4, [r2, #20]
 8011118:	f85d 4b04 	ldr.w	r4, [sp], #4
 801111c:	4770      	bx	lr
 801111e:	4603      	mov	r3, r0
 8011120:	2800      	cmp	r0, #0
 8011122:	d0f9      	beq.n	8011118 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8011124:	4299      	cmp	r1, r3
 8011126:	6998      	ldr	r0, [r3, #24]
 8011128:	d1f9      	bne.n	801111e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 801112a:	6190      	str	r0, [r2, #24]
 801112c:	618a      	str	r2, [r1, #24]
 801112e:	e7f2      	b.n	8011116 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08011130 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8011130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011134:	461f      	mov	r7, r3
 8011136:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801113a:	460d      	mov	r5, r1
 801113c:	4616      	mov	r6, r2
 801113e:	b103      	cbz	r3, 8011142 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8011140:	6038      	str	r0, [r7, #0]
 8011142:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011144:	b314      	cbz	r4, 801118c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8011146:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801114a:	b1eb      	cbz	r3, 8011188 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801114c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8011150:	428d      	cmp	r5, r1
 8011152:	db19      	blt.n	8011188 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011154:	b289      	uxth	r1, r1
 8011156:	8923      	ldrh	r3, [r4, #8]
 8011158:	440b      	add	r3, r1
 801115a:	b21b      	sxth	r3, r3
 801115c:	429d      	cmp	r5, r3
 801115e:	da13      	bge.n	8011188 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011160:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8011164:	4296      	cmp	r6, r2
 8011166:	db0f      	blt.n	8011188 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011168:	b292      	uxth	r2, r2
 801116a:	8963      	ldrh	r3, [r4, #10]
 801116c:	4413      	add	r3, r2
 801116e:	b21b      	sxth	r3, r3
 8011170:	429e      	cmp	r6, r3
 8011172:	da09      	bge.n	8011188 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011174:	6823      	ldr	r3, [r4, #0]
 8011176:	1ab2      	subs	r2, r6, r2
 8011178:	1a69      	subs	r1, r5, r1
 801117a:	4620      	mov	r0, r4
 801117c:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8011180:	b212      	sxth	r2, r2
 8011182:	463b      	mov	r3, r7
 8011184:	b209      	sxth	r1, r1
 8011186:	47c0      	blx	r8
 8011188:	69a4      	ldr	r4, [r4, #24]
 801118a:	e7db      	b.n	8011144 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 801118c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011190 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8011190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011194:	4c6d      	ldr	r4, [pc, #436]	; (801134c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8011196:	b0a1      	sub	sp, #132	; 0x84
 8011198:	4606      	mov	r6, r0
 801119a:	6824      	ldr	r4, [r4, #0]
 801119c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801119e:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 80111a2:	2400      	movs	r4, #0
 80111a4:	9303      	str	r3, [sp, #12]
 80111a6:	802c      	strh	r4, [r5, #0]
 80111a8:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 80111aa:	802c      	strh	r4, [r5, #0]
 80111ac:	601c      	str	r4, [r3, #0]
 80111ae:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80111b2:	f7ff ffbd 	bl	8011130 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80111b6:	f1b9 0f03 	cmp.w	r9, #3
 80111ba:	f340 80c1 	ble.w	8011340 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 80111be:	4631      	mov	r1, r6
 80111c0:	a80c      	add	r0, sp, #48	; 0x30
 80111c2:	f007 f899 	bl	80182f8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80111c6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 80111ca:	9306      	str	r3, [sp, #24]
 80111cc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80111d0:	9307      	str	r3, [sp, #28]
 80111d2:	9b03      	ldr	r3, [sp, #12]
 80111d4:	f8d3 a000 	ldr.w	sl, [r3]
 80111d8:	f1ba 0f00 	cmp.w	sl, #0
 80111dc:	f000 80b3 	beq.w	8011346 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 80111e0:	4651      	mov	r1, sl
 80111e2:	a810      	add	r0, sp, #64	; 0x40
 80111e4:	f007 f888 	bl	80182f8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80111e8:	2002      	movs	r0, #2
 80111ea:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 80111ee:	9b01      	ldr	r3, [sp, #4]
 80111f0:	9a06      	ldr	r2, [sp, #24]
 80111f2:	fb91 f1f0 	sdiv	r1, r1, r0
 80111f6:	189d      	adds	r5, r3, r2
 80111f8:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 80111fc:	9a07      	ldr	r2, [sp, #28]
 80111fe:	4419      	add	r1, r3
 8011200:	9b02      	ldr	r3, [sp, #8]
 8011202:	4413      	add	r3, r2
 8011204:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8011208:	1a6d      	subs	r5, r5, r1
 801120a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801120e:	fb92 f2f0 	sdiv	r2, r2, r0
 8011212:	440a      	add	r2, r1
 8011214:	1a9b      	subs	r3, r3, r2
 8011216:	435b      	muls	r3, r3
 8011218:	fb05 3505 	mla	r5, r5, r5, r3
 801121c:	4f4c      	ldr	r7, [pc, #304]	; (8011350 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 801121e:	ac10      	add	r4, sp, #64	; 0x40
 8011220:	f1b9 0f0c 	cmp.w	r9, #12
 8011224:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011228:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801122a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801122c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801122e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011230:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8011234:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011238:	f04f 0303 	mov.w	r3, #3
 801123c:	bfd8      	it	le
 801123e:	f109 32ff 	addle.w	r2, r9, #4294967295
 8011242:	f04f 0400 	mov.w	r4, #0
 8011246:	f8cd 9000 	str.w	r9, [sp]
 801124a:	bfcc      	ite	gt
 801124c:	4698      	movgt	r8, r3
 801124e:	fb92 f8f3 	sdivle	r8, r2, r3
 8011252:	1c63      	adds	r3, r4, #1
 8011254:	aa10      	add	r2, sp, #64	; 0x40
 8011256:	f004 0401 	and.w	r4, r4, #1
 801125a:	f04f 0b00 	mov.w	fp, #0
 801125e:	9308      	str	r3, [sp, #32]
 8011260:	9b00      	ldr	r3, [sp, #0]
 8011262:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8011266:	fb93 f3f8 	sdiv	r3, r3, r8
 801126a:	3404      	adds	r4, #4
 801126c:	b29b      	uxth	r3, r3
 801126e:	9304      	str	r3, [sp, #16]
 8011270:	9a04      	ldr	r2, [sp, #16]
 8011272:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011276:	fb13 f302 	smulbb	r3, r3, r2
 801127a:	9a01      	ldr	r2, [sp, #4]
 801127c:	b29b      	uxth	r3, r3
 801127e:	1899      	adds	r1, r3, r2
 8011280:	9305      	str	r3, [sp, #20]
 8011282:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8011286:	b209      	sxth	r1, r1
 8011288:	4299      	cmp	r1, r3
 801128a:	db4d      	blt.n	8011328 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801128c:	8932      	ldrh	r2, [r6, #8]
 801128e:	4413      	add	r3, r2
 8011290:	b21b      	sxth	r3, r3
 8011292:	4299      	cmp	r1, r3
 8011294:	da48      	bge.n	8011328 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011296:	9b04      	ldr	r3, [sp, #16]
 8011298:	6827      	ldr	r7, [r4, #0]
 801129a:	fb17 f703 	smulbb	r7, r7, r3
 801129e:	9b02      	ldr	r3, [sp, #8]
 80112a0:	b2bf      	uxth	r7, r7
 80112a2:	18fa      	adds	r2, r7, r3
 80112a4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80112a8:	b212      	sxth	r2, r2
 80112aa:	429a      	cmp	r2, r3
 80112ac:	db3c      	blt.n	8011328 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80112ae:	8970      	ldrh	r0, [r6, #10]
 80112b0:	4403      	add	r3, r0
 80112b2:	b21b      	sxth	r3, r3
 80112b4:	429a      	cmp	r2, r3
 80112b6:	da37      	bge.n	8011328 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80112b8:	2300      	movs	r3, #0
 80112ba:	4630      	mov	r0, r6
 80112bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80112be:	ab0b      	add	r3, sp, #44	; 0x2c
 80112c0:	f7ff ff36 	bl	8011130 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80112c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80112c6:	b37a      	cbz	r2, 8011328 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80112c8:	4552      	cmp	r2, sl
 80112ca:	d02d      	beq.n	8011328 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80112cc:	4611      	mov	r1, r2
 80112ce:	a80e      	add	r0, sp, #56	; 0x38
 80112d0:	9209      	str	r2, [sp, #36]	; 0x24
 80112d2:	f007 f811 	bl	80182f8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80112d6:	f04f 0e02 	mov.w	lr, #2
 80112da:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 80112de:	9a06      	ldr	r2, [sp, #24]
 80112e0:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 80112e4:	9b01      	ldr	r3, [sp, #4]
 80112e6:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 80112ea:	4413      	add	r3, r2
 80112ec:	9a07      	ldr	r2, [sp, #28]
 80112ee:	fb91 f1fe 	sdiv	r1, r1, lr
 80112f2:	fb9c fcfe 	sdiv	ip, ip, lr
 80112f6:	4401      	add	r1, r0
 80112f8:	1a58      	subs	r0, r3, r1
 80112fa:	9b02      	ldr	r3, [sp, #8]
 80112fc:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8011300:	4413      	add	r3, r2
 8011302:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011304:	448c      	add	ip, r1
 8011306:	eba3 030c 	sub.w	r3, r3, ip
 801130a:	435b      	muls	r3, r3
 801130c:	fb00 3300 	mla	r3, r0, r0, r3
 8011310:	42ab      	cmp	r3, r5
 8011312:	d208      	bcs.n	8011326 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8011314:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011316:	461d      	mov	r5, r3
 8011318:	9803      	ldr	r0, [sp, #12]
 801131a:	6001      	str	r1, [r0, #0]
 801131c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801131e:	9805      	ldr	r0, [sp, #20]
 8011320:	8008      	strh	r0, [r1, #0]
 8011322:	992b      	ldr	r1, [sp, #172]	; 0xac
 8011324:	800f      	strh	r7, [r1, #0]
 8011326:	4692      	mov	sl, r2
 8011328:	f10b 0b01 	add.w	fp, fp, #1
 801132c:	3408      	adds	r4, #8
 801132e:	f1bb 0f04 	cmp.w	fp, #4
 8011332:	d19d      	bne.n	8011270 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8011334:	9b00      	ldr	r3, [sp, #0]
 8011336:	9c08      	ldr	r4, [sp, #32]
 8011338:	444b      	add	r3, r9
 801133a:	4544      	cmp	r4, r8
 801133c:	9300      	str	r3, [sp, #0]
 801133e:	d188      	bne.n	8011252 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8011340:	b021      	add	sp, #132	; 0x84
 8011342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011346:	f04f 35ff 	mov.w	r5, #4294967295
 801134a:	e767      	b.n	801121c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 801134c:	2400ead0 	.word	0x2400ead0
 8011350:	08024098 	.word	0x08024098

08011354 <_ZN8touchgfx4RectaNERKS0_>:
 8011354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011358:	f9b1 7000 	ldrsh.w	r7, [r1]
 801135c:	888c      	ldrh	r4, [r1, #4]
 801135e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8011362:	443c      	add	r4, r7
 8011364:	b2a4      	uxth	r4, r4
 8011366:	fa0f f884 	sxth.w	r8, r4
 801136a:	45c1      	cmp	r9, r8
 801136c:	da2f      	bge.n	80113ce <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801136e:	8882      	ldrh	r2, [r0, #4]
 8011370:	444a      	add	r2, r9
 8011372:	b292      	uxth	r2, r2
 8011374:	fa0f fe82 	sxth.w	lr, r2
 8011378:	4577      	cmp	r7, lr
 801137a:	da28      	bge.n	80113ce <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801137c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8011380:	88cb      	ldrh	r3, [r1, #6]
 8011382:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8011386:	442b      	add	r3, r5
 8011388:	b21b      	sxth	r3, r3
 801138a:	429e      	cmp	r6, r3
 801138c:	da1f      	bge.n	80113ce <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801138e:	88c3      	ldrh	r3, [r0, #6]
 8011390:	4433      	add	r3, r6
 8011392:	b29b      	uxth	r3, r3
 8011394:	fa0f fc83 	sxth.w	ip, r3
 8011398:	4565      	cmp	r5, ip
 801139a:	da18      	bge.n	80113ce <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801139c:	454f      	cmp	r7, r9
 801139e:	bfb8      	it	lt
 80113a0:	464f      	movlt	r7, r9
 80113a2:	42b5      	cmp	r5, r6
 80113a4:	bfb8      	it	lt
 80113a6:	4635      	movlt	r5, r6
 80113a8:	45f0      	cmp	r8, lr
 80113aa:	bfd8      	it	le
 80113ac:	4622      	movle	r2, r4
 80113ae:	1bd2      	subs	r2, r2, r7
 80113b0:	8082      	strh	r2, [r0, #4]
 80113b2:	884a      	ldrh	r2, [r1, #2]
 80113b4:	88c9      	ldrh	r1, [r1, #6]
 80113b6:	8007      	strh	r7, [r0, #0]
 80113b8:	440a      	add	r2, r1
 80113ba:	8045      	strh	r5, [r0, #2]
 80113bc:	b292      	uxth	r2, r2
 80113be:	b211      	sxth	r1, r2
 80113c0:	458c      	cmp	ip, r1
 80113c2:	bfa8      	it	ge
 80113c4:	4613      	movge	r3, r2
 80113c6:	1b5b      	subs	r3, r3, r5
 80113c8:	80c3      	strh	r3, [r0, #6]
 80113ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113ce:	2300      	movs	r3, #0
 80113d0:	8003      	strh	r3, [r0, #0]
 80113d2:	8043      	strh	r3, [r0, #2]
 80113d4:	8083      	strh	r3, [r0, #4]
 80113d6:	80c3      	strh	r3, [r0, #6]
 80113d8:	e7f7      	b.n	80113ca <_ZN8touchgfx4RectaNERKS0_+0x76>

080113da <_ZNK8touchgfx4Rect7isEmptyEv>:
 80113da:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	dd06      	ble.n	80113f0 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80113e2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80113e6:	2800      	cmp	r0, #0
 80113e8:	bfcc      	ite	gt
 80113ea:	2000      	movgt	r0, #0
 80113ec:	2001      	movle	r0, #1
 80113ee:	4770      	bx	lr
 80113f0:	2001      	movs	r0, #1
 80113f2:	4770      	bx	lr

080113f4 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80113f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113f8:	2300      	movs	r3, #0
 80113fa:	4604      	mov	r4, r0
 80113fc:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80113fe:	8003      	strh	r3, [r0, #0]
 8011400:	8043      	strh	r3, [r0, #2]
 8011402:	8083      	strh	r3, [r0, #4]
 8011404:	80c3      	strh	r3, [r0, #6]
 8011406:	2d00      	cmp	r5, #0
 8011408:	d040      	beq.n	801148c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801140a:	1d28      	adds	r0, r5, #4
 801140c:	f7ff ffe5 	bl	80113da <_ZNK8touchgfx4Rect7isEmptyEv>
 8011410:	b988      	cbnz	r0, 8011436 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8011412:	4620      	mov	r0, r4
 8011414:	f7ff ffe1 	bl	80113da <_ZNK8touchgfx4Rect7isEmptyEv>
 8011418:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801141c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8011420:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8011424:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8011428:	b138      	cbz	r0, 801143a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801142a:	8022      	strh	r2, [r4, #0]
 801142c:	8063      	strh	r3, [r4, #2]
 801142e:	f8a4 e004 	strh.w	lr, [r4, #4]
 8011432:	f8a4 c006 	strh.w	ip, [r4, #6]
 8011436:	69ad      	ldr	r5, [r5, #24]
 8011438:	e7e5      	b.n	8011406 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801143a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801143e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8011442:	4290      	cmp	r0, r2
 8011444:	4607      	mov	r7, r0
 8011446:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801144a:	460e      	mov	r6, r1
 801144c:	bfa8      	it	ge
 801144e:	4617      	movge	r7, r2
 8011450:	4299      	cmp	r1, r3
 8011452:	4472      	add	r2, lr
 8011454:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8011458:	bfa8      	it	ge
 801145a:	461e      	movge	r6, r3
 801145c:	4440      	add	r0, r8
 801145e:	4471      	add	r1, lr
 8011460:	4463      	add	r3, ip
 8011462:	b200      	sxth	r0, r0
 8011464:	8027      	strh	r7, [r4, #0]
 8011466:	b212      	sxth	r2, r2
 8011468:	8066      	strh	r6, [r4, #2]
 801146a:	b209      	sxth	r1, r1
 801146c:	b21b      	sxth	r3, r3
 801146e:	4290      	cmp	r0, r2
 8011470:	bfac      	ite	ge
 8011472:	ebc7 0200 	rsbge	r2, r7, r0
 8011476:	ebc7 0202 	rsblt	r2, r7, r2
 801147a:	4299      	cmp	r1, r3
 801147c:	bfac      	ite	ge
 801147e:	ebc6 0301 	rsbge	r3, r6, r1
 8011482:	ebc6 0303 	rsblt	r3, r6, r3
 8011486:	80a2      	strh	r2, [r4, #4]
 8011488:	80e3      	strh	r3, [r4, #6]
 801148a:	e7d4      	b.n	8011436 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801148c:	4620      	mov	r0, r4
 801148e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011492 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8011492:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011496:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801149a:	b383      	cbz	r3, 80114fe <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801149c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801149e:	b374      	cbz	r4, 80114fe <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80114a0:	f9b1 5000 	ldrsh.w	r5, [r1]
 80114a4:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80114a8:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80114ac:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80114b0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80114b4:	b303      	cbz	r3, 80114f8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80114b6:	4668      	mov	r0, sp
 80114b8:	1d21      	adds	r1, r4, #4
 80114ba:	f8ad 5000 	strh.w	r5, [sp]
 80114be:	f8ad 6002 	strh.w	r6, [sp, #2]
 80114c2:	f8ad 7004 	strh.w	r7, [sp, #4]
 80114c6:	f8ad 8006 	strh.w	r8, [sp, #6]
 80114ca:	f7ff ff43 	bl	8011354 <_ZN8touchgfx4RectaNERKS0_>
 80114ce:	4668      	mov	r0, sp
 80114d0:	f7ff ff83 	bl	80113da <_ZNK8touchgfx4Rect7isEmptyEv>
 80114d4:	b980      	cbnz	r0, 80114f8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80114d6:	f8bd 3000 	ldrh.w	r3, [sp]
 80114da:	4669      	mov	r1, sp
 80114dc:	88a2      	ldrh	r2, [r4, #4]
 80114de:	4620      	mov	r0, r4
 80114e0:	1a9b      	subs	r3, r3, r2
 80114e2:	88e2      	ldrh	r2, [r4, #6]
 80114e4:	f8ad 3000 	strh.w	r3, [sp]
 80114e8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80114ec:	1a9b      	subs	r3, r3, r2
 80114ee:	f8ad 3002 	strh.w	r3, [sp, #2]
 80114f2:	6823      	ldr	r3, [r4, #0]
 80114f4:	689b      	ldr	r3, [r3, #8]
 80114f6:	4798      	blx	r3
 80114f8:	69a4      	ldr	r4, [r4, #24]
 80114fa:	2c00      	cmp	r4, #0
 80114fc:	d1d8      	bne.n	80114b0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80114fe:	b002      	add	sp, #8
 8011500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011504 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8011504:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011506:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801150a:	460d      	mov	r5, r1
 801150c:	4616      	mov	r6, r2
 801150e:	b323      	cbz	r3, 801155a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8011510:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011512:	b314      	cbz	r4, 801155a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8011514:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8011518:	b1eb      	cbz	r3, 8011556 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801151a:	6828      	ldr	r0, [r5, #0]
 801151c:	466b      	mov	r3, sp
 801151e:	6869      	ldr	r1, [r5, #4]
 8011520:	c303      	stmia	r3!, {r0, r1}
 8011522:	4668      	mov	r0, sp
 8011524:	1d21      	adds	r1, r4, #4
 8011526:	f7ff ff15 	bl	8011354 <_ZN8touchgfx4RectaNERKS0_>
 801152a:	4668      	mov	r0, sp
 801152c:	f7ff ff55 	bl	80113da <_ZNK8touchgfx4Rect7isEmptyEv>
 8011530:	b988      	cbnz	r0, 8011556 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8011532:	f8bd 3000 	ldrh.w	r3, [sp]
 8011536:	4669      	mov	r1, sp
 8011538:	88a2      	ldrh	r2, [r4, #4]
 801153a:	4620      	mov	r0, r4
 801153c:	1a9b      	subs	r3, r3, r2
 801153e:	88e2      	ldrh	r2, [r4, #6]
 8011540:	f8ad 3000 	strh.w	r3, [sp]
 8011544:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011548:	1a9b      	subs	r3, r3, r2
 801154a:	4632      	mov	r2, r6
 801154c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8011550:	6823      	ldr	r3, [r4, #0]
 8011552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011554:	4798      	blx	r3
 8011556:	69a4      	ldr	r4, [r4, #24]
 8011558:	e7db      	b.n	8011512 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801155a:	b002      	add	sp, #8
 801155c:	bd70      	pop	{r4, r5, r6, pc}

0801155e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801155e:	6803      	ldr	r3, [r0, #0]
 8011560:	b513      	push	{r0, r1, r4, lr}
 8011562:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8011566:	2300      	movs	r3, #0
 8011568:	e9cd 3300 	strd	r3, r3, [sp]
 801156c:	466b      	mov	r3, sp
 801156e:	47a0      	blx	r4
 8011570:	b002      	add	sp, #8
 8011572:	bd10      	pop	{r4, pc}

08011574 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8011574:	2301      	movs	r3, #1
 8011576:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801157a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801157e:	4770      	bx	lr

08011580 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8011580:	2301      	movs	r3, #1
 8011582:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8011586:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801158a:	4770      	bx	lr

0801158c <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801158c:	6843      	ldr	r3, [r0, #4]
 801158e:	2201      	movs	r2, #1
 8011590:	725a      	strb	r2, [r3, #9]
 8011592:	6840      	ldr	r0, [r0, #4]
 8011594:	6803      	ldr	r3, [r0, #0]
 8011596:	691b      	ldr	r3, [r3, #16]
 8011598:	4718      	bx	r3

0801159a <_ZN8touchgfx3HAL8flushDMAEv>:
 801159a:	6840      	ldr	r0, [r0, #4]
 801159c:	6803      	ldr	r3, [r0, #0]
 801159e:	689b      	ldr	r3, [r3, #8]
 80115a0:	4718      	bx	r3

080115a2 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80115a2:	b530      	push	{r4, r5, lr}
 80115a4:	b08b      	sub	sp, #44	; 0x2c
 80115a6:	6804      	ldr	r4, [r0, #0]
 80115a8:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 80115ac:	9509      	str	r5, [sp, #36]	; 0x24
 80115ae:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80115b2:	9508      	str	r5, [sp, #32]
 80115b4:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80115b8:	9507      	str	r5, [sp, #28]
 80115ba:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80115be:	9506      	str	r5, [sp, #24]
 80115c0:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 80115c4:	9505      	str	r5, [sp, #20]
 80115c6:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80115ca:	9504      	str	r5, [sp, #16]
 80115cc:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 80115d0:	9503      	str	r5, [sp, #12]
 80115d2:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80115d6:	9502      	str	r5, [sp, #8]
 80115d8:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80115dc:	e9cd 3500 	strd	r3, r5, [sp]
 80115e0:	4613      	mov	r3, r2
 80115e2:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 80115e4:	2200      	movs	r2, #0
 80115e6:	47a0      	blx	r4
 80115e8:	b00b      	add	sp, #44	; 0x2c
 80115ea:	bd30      	pop	{r4, r5, pc}

080115ec <_ZN8touchgfx3HAL10beginFrameEv>:
 80115ec:	4b04      	ldr	r3, [pc, #16]	; (8011600 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80115ee:	781b      	ldrb	r3, [r3, #0]
 80115f0:	b123      	cbz	r3, 80115fc <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80115f2:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 80115f6:	f080 0001 	eor.w	r0, r0, #1
 80115fa:	4770      	bx	lr
 80115fc:	2001      	movs	r0, #1
 80115fe:	4770      	bx	lr
 8011600:	2400eace 	.word	0x2400eace

08011604 <_ZN8touchgfx3HAL8endFrameEv>:
 8011604:	b510      	push	{r4, lr}
 8011606:	4604      	mov	r4, r0
 8011608:	6840      	ldr	r0, [r0, #4]
 801160a:	6803      	ldr	r3, [r0, #0]
 801160c:	689b      	ldr	r3, [r3, #8]
 801160e:	4798      	blx	r3
 8011610:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8011614:	b113      	cbz	r3, 801161c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8011616:	2301      	movs	r3, #1
 8011618:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801161c:	bd10      	pop	{r4, pc}

0801161e <_ZN8touchgfx3HAL10initializeEv>:
 801161e:	b510      	push	{r4, lr}
 8011620:	4604      	mov	r4, r0
 8011622:	f7f0 fc19 	bl	8001e58 <_ZN8touchgfx10OSWrappers10initializeEv>
 8011626:	f7f0 f92b 	bl	8001880 <_ZN8touchgfx4GPIO4initEv>
 801162a:	6860      	ldr	r0, [r4, #4]
 801162c:	6803      	ldr	r3, [r0, #0]
 801162e:	68db      	ldr	r3, [r3, #12]
 8011630:	4798      	blx	r3
 8011632:	68e0      	ldr	r0, [r4, #12]
 8011634:	6803      	ldr	r3, [r0, #0]
 8011636:	689b      	ldr	r3, [r3, #8]
 8011638:	4798      	blx	r3
 801163a:	6823      	ldr	r3, [r4, #0]
 801163c:	4620      	mov	r0, r4
 801163e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011644:	4718      	bx	r3
	...

08011648 <_ZN8touchgfx3HAL4tickEv>:
 8011648:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801164a:	6803      	ldr	r3, [r0, #0]
 801164c:	4604      	mov	r4, r0
 801164e:	4d5b      	ldr	r5, [pc, #364]	; (80117bc <_ZN8touchgfx3HAL4tickEv+0x174>)
 8011650:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011654:	4798      	blx	r3
 8011656:	2800      	cmp	r0, #0
 8011658:	f000 8095 	beq.w	8011786 <_ZN8touchgfx3HAL4tickEv+0x13e>
 801165c:	2001      	movs	r0, #1
 801165e:	2600      	movs	r6, #0
 8011660:	f7f0 f874 	bl	800174c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8011664:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8011668:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 801166c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8011670:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8011674:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8011678:	b133      	cbz	r3, 8011688 <_ZN8touchgfx3HAL4tickEv+0x40>
 801167a:	6823      	ldr	r3, [r4, #0]
 801167c:	4620      	mov	r0, r4
 801167e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8011682:	4798      	blx	r3
 8011684:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8011688:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801168c:	2601      	movs	r6, #1
 801168e:	6862      	ldr	r2, [r4, #4]
 8011690:	f083 0301 	eor.w	r3, r3, #1
 8011694:	702e      	strb	r6, [r5, #0]
 8011696:	7253      	strb	r3, [r2, #9]
 8011698:	f005 fd4e 	bl	8017138 <_ZN8touchgfx11Application11getInstanceEv>
 801169c:	6803      	ldr	r3, [r0, #0]
 801169e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116a0:	4798      	blx	r3
 80116a2:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80116a6:	b90b      	cbnz	r3, 80116ac <_ZN8touchgfx3HAL4tickEv+0x64>
 80116a8:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 80116ac:	f005 fd44 	bl	8017138 <_ZN8touchgfx11Application11getInstanceEv>
 80116b0:	6803      	ldr	r3, [r0, #0]
 80116b2:	695b      	ldr	r3, [r3, #20]
 80116b4:	4798      	blx	r3
 80116b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80116b8:	6803      	ldr	r3, [r0, #0]
 80116ba:	691b      	ldr	r3, [r3, #16]
 80116bc:	4798      	blx	r3
 80116be:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80116c2:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 80116c6:	3b01      	subs	r3, #1
 80116c8:	b2db      	uxtb	r3, r3
 80116ca:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80116ce:	b10a      	cbz	r2, 80116d4 <_ZN8touchgfx3HAL4tickEv+0x8c>
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d1eb      	bne.n	80116ac <_ZN8touchgfx3HAL4tickEv+0x64>
 80116d4:	4a3a      	ldr	r2, [pc, #232]	; (80117c0 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80116d6:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 80116da:	7813      	ldrb	r3, [r2, #0]
 80116dc:	3301      	adds	r3, #1
 80116de:	b25b      	sxtb	r3, r3
 80116e0:	4299      	cmp	r1, r3
 80116e2:	7013      	strb	r3, [r2, #0]
 80116e4:	dc10      	bgt.n	8011708 <_ZN8touchgfx3HAL4tickEv+0xc0>
 80116e6:	2300      	movs	r3, #0
 80116e8:	68e0      	ldr	r0, [r4, #12]
 80116ea:	a902      	add	r1, sp, #8
 80116ec:	7013      	strb	r3, [r2, #0]
 80116ee:	aa03      	add	r2, sp, #12
 80116f0:	6803      	ldr	r3, [r0, #0]
 80116f2:	68db      	ldr	r3, [r3, #12]
 80116f4:	4798      	blx	r3
 80116f6:	6823      	ldr	r3, [r4, #0]
 80116f8:	2800      	cmp	r0, #0
 80116fa:	d050      	beq.n	801179e <_ZN8touchgfx3HAL4tickEv+0x156>
 80116fc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011700:	4620      	mov	r0, r4
 8011702:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8011706:	4798      	blx	r3
 8011708:	2300      	movs	r3, #0
 801170a:	6960      	ldr	r0, [r4, #20]
 801170c:	f88d 3007 	strb.w	r3, [sp, #7]
 8011710:	b158      	cbz	r0, 801172a <_ZN8touchgfx3HAL4tickEv+0xe2>
 8011712:	6803      	ldr	r3, [r0, #0]
 8011714:	f10d 0107 	add.w	r1, sp, #7
 8011718:	68db      	ldr	r3, [r3, #12]
 801171a:	4798      	blx	r3
 801171c:	b128      	cbz	r0, 801172a <_ZN8touchgfx3HAL4tickEv+0xe2>
 801171e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011720:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011724:	6803      	ldr	r3, [r0, #0]
 8011726:	68db      	ldr	r3, [r3, #12]
 8011728:	4798      	blx	r3
 801172a:	f104 001c 	add.w	r0, r4, #28
 801172e:	f010 fed3 	bl	80224d8 <_ZN8touchgfx8Gestures4tickEv>
 8011732:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8011736:	b30b      	cbz	r3, 801177c <_ZN8touchgfx3HAL4tickEv+0x134>
 8011738:	6920      	ldr	r0, [r4, #16]
 801173a:	6803      	ldr	r3, [r0, #0]
 801173c:	691b      	ldr	r3, [r3, #16]
 801173e:	4798      	blx	r3
 8011740:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011742:	4606      	mov	r6, r0
 8011744:	b903      	cbnz	r3, 8011748 <_ZN8touchgfx3HAL4tickEv+0x100>
 8011746:	6720      	str	r0, [r4, #112]	; 0x70
 8011748:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801174a:	4a1e      	ldr	r2, [pc, #120]	; (80117c4 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801174c:	1af3      	subs	r3, r6, r3
 801174e:	4293      	cmp	r3, r2
 8011750:	d914      	bls.n	801177c <_ZN8touchgfx3HAL4tickEv+0x134>
 8011752:	6920      	ldr	r0, [r4, #16]
 8011754:	6803      	ldr	r3, [r0, #0]
 8011756:	699b      	ldr	r3, [r3, #24]
 8011758:	4798      	blx	r3
 801175a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801175c:	2264      	movs	r2, #100	; 0x64
 801175e:	1af3      	subs	r3, r6, r3
 8011760:	fbb3 f3f2 	udiv	r3, r3, r2
 8011764:	fbb0 f0f3 	udiv	r0, r0, r3
 8011768:	2800      	cmp	r0, #0
 801176a:	dc1d      	bgt.n	80117a8 <_ZN8touchgfx3HAL4tickEv+0x160>
 801176c:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8011770:	6920      	ldr	r0, [r4, #16]
 8011772:	2100      	movs	r1, #0
 8011774:	6803      	ldr	r3, [r0, #0]
 8011776:	69db      	ldr	r3, [r3, #28]
 8011778:	4798      	blx	r3
 801177a:	6726      	str	r6, [r4, #112]	; 0x70
 801177c:	f005 fcdc 	bl	8017138 <_ZN8touchgfx11Application11getInstanceEv>
 8011780:	6803      	ldr	r3, [r0, #0]
 8011782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011784:	4798      	blx	r3
 8011786:	6823      	ldr	r3, [r4, #0]
 8011788:	4620      	mov	r0, r4
 801178a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801178e:	4798      	blx	r3
 8011790:	2001      	movs	r0, #1
 8011792:	f7f0 f80b 	bl	80017ac <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8011796:	2300      	movs	r3, #0
 8011798:	702b      	strb	r3, [r5, #0]
 801179a:	b004      	add	sp, #16
 801179c:	bd70      	pop	{r4, r5, r6, pc}
 801179e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80117a2:	4620      	mov	r0, r4
 80117a4:	4798      	blx	r3
 80117a6:	e7af      	b.n	8011708 <_ZN8touchgfx3HAL4tickEv+0xc0>
 80117a8:	2863      	cmp	r0, #99	; 0x63
 80117aa:	bfcb      	itete	gt
 80117ac:	2300      	movgt	r3, #0
 80117ae:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 80117b2:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 80117b6:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 80117ba:	e7d9      	b.n	8011770 <_ZN8touchgfx3HAL4tickEv+0x128>
 80117bc:	2400ead4 	.word	0x2400ead4
 80117c0:	2400ead5 	.word	0x2400ead5
 80117c4:	05f5e100 	.word	0x05f5e100

080117c8 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80117c8:	f7f0 bb76 	b.w	8001eb8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080117cc <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80117cc:	6581      	str	r1, [r0, #88]	; 0x58
 80117ce:	301c      	adds	r0, #28
 80117d0:	f010 be80 	b.w	80224d4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080117d4 <_ZN8touchgfx3HAL5touchEll>:
 80117d4:	b530      	push	{r4, r5, lr}
 80117d6:	b087      	sub	sp, #28
 80117d8:	4604      	mov	r4, r0
 80117da:	a804      	add	r0, sp, #16
 80117dc:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80117e0:	f005 faf0 	bl	8016dc4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80117e4:	9b04      	ldr	r3, [sp, #16]
 80117e6:	a906      	add	r1, sp, #24
 80117e8:	a803      	add	r0, sp, #12
 80117ea:	f8ad 300c 	strh.w	r3, [sp, #12]
 80117ee:	9b05      	ldr	r3, [sp, #20]
 80117f0:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80117f4:	f005 fb38 	bl	8016e68 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80117f8:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 80117fc:	f104 001c 	add.w	r0, r4, #28
 8011800:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8011804:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8011808:	b189      	cbz	r1, 801182e <_ZN8touchgfx3HAL5touchEll+0x5a>
 801180a:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 801180e:	9300      	str	r3, [sp, #0]
 8011810:	4613      	mov	r3, r2
 8011812:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8011816:	462a      	mov	r2, r5
 8011818:	f010 fe6c 	bl	80224f4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 801181c:	b128      	cbz	r0, 801182a <_ZN8touchgfx3HAL5touchEll+0x56>
 801181e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8011822:	65e3      	str	r3, [r4, #92]	; 0x5c
 8011824:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8011828:	6623      	str	r3, [r4, #96]	; 0x60
 801182a:	b007      	add	sp, #28
 801182c:	bd30      	pop	{r4, r5, pc}
 801182e:	f010 fea1 	bl	8022574 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8011832:	2301      	movs	r3, #1
 8011834:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8011838:	e7f1      	b.n	801181e <_ZN8touchgfx3HAL5touchEll+0x4a>

0801183a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801183a:	b510      	push	{r4, lr}
 801183c:	2b00      	cmp	r3, #0
 801183e:	d046      	beq.n	80118ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8011840:	ea81 0002 	eor.w	r0, r1, r2
 8011844:	07c4      	lsls	r4, r0, #31
 8011846:	d508      	bpl.n	801185a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8011848:	440b      	add	r3, r1
 801184a:	3a01      	subs	r2, #1
 801184c:	428b      	cmp	r3, r1
 801184e:	d93e      	bls.n	80118ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8011850:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8011854:	f801 0b01 	strb.w	r0, [r1], #1
 8011858:	e7f8      	b.n	801184c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801185a:	07d0      	lsls	r0, r2, #31
 801185c:	bf42      	ittt	mi
 801185e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8011862:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8011866:	f801 0b01 	strbmi.w	r0, [r1], #1
 801186a:	2b01      	cmp	r3, #1
 801186c:	d911      	bls.n	8011892 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801186e:	ea81 0402 	eor.w	r4, r1, r2
 8011872:	4610      	mov	r0, r2
 8011874:	07a4      	lsls	r4, r4, #30
 8011876:	d022      	beq.n	80118be <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8011878:	f023 0401 	bic.w	r4, r3, #1
 801187c:	440c      	add	r4, r1
 801187e:	428c      	cmp	r4, r1
 8011880:	4602      	mov	r2, r0
 8011882:	d904      	bls.n	801188e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8011884:	8812      	ldrh	r2, [r2, #0]
 8011886:	3002      	adds	r0, #2
 8011888:	f821 2b02 	strh.w	r2, [r1], #2
 801188c:	e7f7      	b.n	801187e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 801188e:	f003 0301 	and.w	r3, r3, #1
 8011892:	f023 0003 	bic.w	r0, r3, #3
 8011896:	4408      	add	r0, r1
 8011898:	4288      	cmp	r0, r1
 801189a:	4614      	mov	r4, r2
 801189c:	d904      	bls.n	80118a8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 801189e:	6824      	ldr	r4, [r4, #0]
 80118a0:	3204      	adds	r2, #4
 80118a2:	f841 4b04 	str.w	r4, [r1], #4
 80118a6:	e7f7      	b.n	8011898 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 80118a8:	f003 0303 	and.w	r3, r3, #3
 80118ac:	3a01      	subs	r2, #1
 80118ae:	440b      	add	r3, r1
 80118b0:	428b      	cmp	r3, r1
 80118b2:	d90c      	bls.n	80118ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80118b4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80118b8:	f801 0b01 	strb.w	r0, [r1], #1
 80118bc:	e7f8      	b.n	80118b0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 80118be:	0790      	lsls	r0, r2, #30
 80118c0:	d0e7      	beq.n	8011892 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80118c2:	f832 0b02 	ldrh.w	r0, [r2], #2
 80118c6:	3b02      	subs	r3, #2
 80118c8:	f821 0b02 	strh.w	r0, [r1], #2
 80118cc:	e7e1      	b.n	8011892 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80118ce:	2001      	movs	r0, #1
 80118d0:	bd10      	pop	{r4, pc}

080118d2 <_ZN8touchgfx3HAL7noTouchEv>:
 80118d2:	b510      	push	{r4, lr}
 80118d4:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80118d8:	4604      	mov	r4, r0
 80118da:	b153      	cbz	r3, 80118f2 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80118dc:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80118e0:	2101      	movs	r1, #1
 80118e2:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80118e6:	301c      	adds	r0, #28
 80118e8:	f010 fe44 	bl	8022574 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80118ec:	2300      	movs	r3, #0
 80118ee:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80118f2:	bd10      	pop	{r4, pc}

080118f4 <_ZN8touchgfx3HAL3lcdEv>:
 80118f4:	4b04      	ldr	r3, [pc, #16]	; (8011908 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80118fc:	b10a      	cbz	r2, 8011902 <_ZN8touchgfx3HAL3lcdEv+0xe>
 80118fe:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8011900:	b900      	cbnz	r0, 8011904 <_ZN8touchgfx3HAL3lcdEv+0x10>
 8011902:	6898      	ldr	r0, [r3, #8]
 8011904:	4770      	bx	lr
 8011906:	bf00      	nop
 8011908:	2400ead0 	.word	0x2400ead0

0801190c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 801190c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011910:	b085      	sub	sp, #20
 8011912:	4604      	mov	r4, r0
 8011914:	2000      	movs	r0, #0
 8011916:	4699      	mov	r9, r3
 8011918:	ad04      	add	r5, sp, #16
 801191a:	460f      	mov	r7, r1
 801191c:	4690      	mov	r8, r2
 801191e:	f845 0d04 	str.w	r0, [r5, #-4]!
 8011922:	69a0      	ldr	r0, [r4, #24]
 8011924:	6806      	ldr	r6, [r0, #0]
 8011926:	9501      	str	r5, [sp, #4]
 8011928:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 801192c:	9500      	str	r5, [sp, #0]
 801192e:	6835      	ldr	r5, [r6, #0]
 8011930:	47a8      	blx	r5
 8011932:	4d10      	ldr	r5, [pc, #64]	; (8011974 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8011934:	4606      	mov	r6, r0
 8011936:	f8a5 9000 	strh.w	r9, [r5]
 801193a:	f7ff ffdb 	bl	80118f4 <_ZN8touchgfx3HAL3lcdEv>
 801193e:	6803      	ldr	r3, [r0, #0]
 8011940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011942:	4798      	blx	r3
 8011944:	b128      	cbz	r0, 8011952 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8011946:	2801      	cmp	r0, #1
 8011948:	d00b      	beq.n	8011962 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 801194a:	4630      	mov	r0, r6
 801194c:	b005      	add	sp, #20
 801194e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011952:	882b      	ldrh	r3, [r5, #0]
 8011954:	fb08 7203 	mla	r2, r8, r3, r7
 8011958:	9b03      	ldr	r3, [sp, #12]
 801195a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801195e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8011960:	e7f3      	b.n	801194a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8011962:	882a      	ldrh	r2, [r5, #0]
 8011964:	9b03      	ldr	r3, [sp, #12]
 8011966:	fb08 7202 	mla	r2, r8, r2, r7
 801196a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801196e:	1a9a      	subs	r2, r3, r2
 8011970:	63e2      	str	r2, [r4, #60]	; 0x3c
 8011972:	e7ea      	b.n	801194a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8011974:	2400eaca 	.word	0x2400eaca

08011978 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8011978:	b5f0      	push	{r4, r5, r6, r7, lr}
 801197a:	b08b      	sub	sp, #44	; 0x2c
 801197c:	4617      	mov	r7, r2
 801197e:	4604      	mov	r4, r0
 8011980:	460e      	mov	r6, r1
 8011982:	461d      	mov	r5, r3
 8011984:	f7ff ffb6 	bl	80118f4 <_ZN8touchgfx3HAL3lcdEv>
 8011988:	6803      	ldr	r3, [r0, #0]
 801198a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801198c:	4798      	blx	r3
 801198e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8011992:	9007      	str	r0, [sp, #28]
 8011994:	4631      	mov	r1, r6
 8011996:	6822      	ldr	r2, [r4, #0]
 8011998:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801199c:	4b0c      	ldr	r3, [pc, #48]	; (80119d0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 801199e:	4620      	mov	r0, r4
 80119a0:	881b      	ldrh	r3, [r3, #0]
 80119a2:	9306      	str	r3, [sp, #24]
 80119a4:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80119a8:	9305      	str	r3, [sp, #20]
 80119aa:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80119ae:	9304      	str	r3, [sp, #16]
 80119b0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80119b4:	9303      	str	r3, [sp, #12]
 80119b6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80119ba:	9302      	str	r3, [sp, #8]
 80119bc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80119c0:	e9cd 5300 	strd	r5, r3, [sp]
 80119c4:	463b      	mov	r3, r7
 80119c6:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 80119c8:	2200      	movs	r2, #0
 80119ca:	47a8      	blx	r5
 80119cc:	b00b      	add	sp, #44	; 0x2c
 80119ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119d0:	2400eaca 	.word	0x2400eaca

080119d4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 80119d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80119d8:	4698      	mov	r8, r3
 80119da:	6803      	ldr	r3, [r0, #0]
 80119dc:	b08b      	sub	sp, #44	; 0x2c
 80119de:	4617      	mov	r7, r2
 80119e0:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80119e2:	460e      	mov	r6, r1
 80119e4:	4b13      	ldr	r3, [pc, #76]	; (8011a34 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 80119e6:	4604      	mov	r4, r0
 80119e8:	f8b3 9000 	ldrh.w	r9, [r3]
 80119ec:	f7ff ff82 	bl	80118f4 <_ZN8touchgfx3HAL3lcdEv>
 80119f0:	6803      	ldr	r3, [r0, #0]
 80119f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119f4:	4798      	blx	r3
 80119f6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80119fa:	2200      	movs	r2, #0
 80119fc:	4631      	mov	r1, r6
 80119fe:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8011a02:	2302      	movs	r3, #2
 8011a04:	4620      	mov	r0, r4
 8011a06:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8011a0a:	2301      	movs	r3, #1
 8011a0c:	9305      	str	r3, [sp, #20]
 8011a0e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8011a12:	9304      	str	r3, [sp, #16]
 8011a14:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8011a18:	9303      	str	r3, [sp, #12]
 8011a1a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8011a1e:	9302      	str	r3, [sp, #8]
 8011a20:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8011a24:	e9cd 8300 	strd	r8, r3, [sp]
 8011a28:	463b      	mov	r3, r7
 8011a2a:	47a8      	blx	r5
 8011a2c:	b00b      	add	sp, #44	; 0x2c
 8011a2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a32:	bf00      	nop
 8011a34:	2400eaca 	.word	0x2400eaca

08011a38 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8011a38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011a3c:	4698      	mov	r8, r3
 8011a3e:	6803      	ldr	r3, [r0, #0]
 8011a40:	b087      	sub	sp, #28
 8011a42:	460e      	mov	r6, r1
 8011a44:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8011a46:	4617      	mov	r7, r2
 8011a48:	4b0f      	ldr	r3, [pc, #60]	; (8011a88 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8011a4a:	4604      	mov	r4, r0
 8011a4c:	f8b3 9000 	ldrh.w	r9, [r3]
 8011a50:	f7ff ff50 	bl	80118f4 <_ZN8touchgfx3HAL3lcdEv>
 8011a54:	6803      	ldr	r3, [r0, #0]
 8011a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a58:	4798      	blx	r3
 8011a5a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8011a5e:	463a      	mov	r2, r7
 8011a60:	4631      	mov	r1, r6
 8011a62:	f8cd 900c 	str.w	r9, [sp, #12]
 8011a66:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8011a6a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8011a6e:	4620      	mov	r0, r4
 8011a70:	9302      	str	r3, [sp, #8]
 8011a72:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8011a76:	9301      	str	r3, [sp, #4]
 8011a78:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8011a7c:	9300      	str	r3, [sp, #0]
 8011a7e:	4643      	mov	r3, r8
 8011a80:	47a8      	blx	r5
 8011a82:	b007      	add	sp, #28
 8011a84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a88:	2400eaca 	.word	0x2400eaca

08011a8c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8011a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a90:	4604      	mov	r4, r0
 8011a92:	b08f      	sub	sp, #60	; 0x3c
 8011a94:	4610      	mov	r0, r2
 8011a96:	460d      	mov	r5, r1
 8011a98:	4691      	mov	r9, r2
 8011a9a:	461e      	mov	r6, r3
 8011a9c:	f008 fbb2 	bl	801a204 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8011aa0:	2800      	cmp	r0, #0
 8011aa2:	f000 809d 	beq.w	8011be0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8011aa6:	6823      	ldr	r3, [r4, #0]
 8011aa8:	4620      	mov	r0, r4
 8011aaa:	f8df b198 	ldr.w	fp, [pc, #408]	; 8011c44 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8011aae:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8011ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ab4:	4798      	blx	r3
 8011ab6:	6823      	ldr	r3, [r4, #0]
 8011ab8:	4620      	mov	r0, r4
 8011aba:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8011c48 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8011abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ac0:	4798      	blx	r3
 8011ac2:	f8bb 3000 	ldrh.w	r3, [fp]
 8011ac6:	4f5c      	ldr	r7, [pc, #368]	; (8011c38 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8011ac8:	9301      	str	r3, [sp, #4]
 8011aca:	f8ba 3000 	ldrh.w	r3, [sl]
 8011ace:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8011ad2:	4640      	mov	r0, r8
 8011ad4:	9302      	str	r3, [sp, #8]
 8011ad6:	883b      	ldrh	r3, [r7, #0]
 8011ad8:	9303      	str	r3, [sp, #12]
 8011ada:	4b58      	ldr	r3, [pc, #352]	; (8011c3c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8011adc:	881a      	ldrh	r2, [r3, #0]
 8011ade:	9305      	str	r3, [sp, #20]
 8011ae0:	9204      	str	r2, [sp, #16]
 8011ae2:	f008 fcd3 	bl	801a48c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011ae6:	8038      	strh	r0, [r7, #0]
 8011ae8:	4640      	mov	r0, r8
 8011aea:	f008 fd03 	bl	801a4f4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011aee:	9b05      	ldr	r3, [sp, #20]
 8011af0:	b280      	uxth	r0, r0
 8011af2:	8018      	strh	r0, [r3, #0]
 8011af4:	4b52      	ldr	r3, [pc, #328]	; (8011c40 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8011af6:	781b      	ldrb	r3, [r3, #0]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d174      	bne.n	8011be6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8011afc:	883b      	ldrh	r3, [r7, #0]
 8011afe:	f8aa 0000 	strh.w	r0, [sl]
 8011b02:	f8ab 3000 	strh.w	r3, [fp]
 8011b06:	4648      	mov	r0, r9
 8011b08:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8011b0c:	f008 fb7a 	bl	801a204 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8011b10:	2200      	movs	r2, #0
 8011b12:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8011b16:	4611      	mov	r1, r2
 8011b18:	4628      	mov	r0, r5
 8011b1a:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8011b1e:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8011b22:	f7f1 fc46 	bl	80033b2 <_ZN8touchgfx8Drawable5setXYEss>
 8011b26:	2301      	movs	r3, #1
 8011b28:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8011b2c:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8011b30:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	dd5c      	ble.n	8011bf2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8011b38:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	dd58      	ble.n	8011bf2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8011b40:	462a      	mov	r2, r5
 8011b42:	ab0a      	add	r3, sp, #40	; 0x28
 8011b44:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8011b48:	6851      	ldr	r1, [r2, #4]
 8011b4a:	c303      	stmia	r3!, {r0, r1}
 8011b4c:	4631      	mov	r1, r6
 8011b4e:	a80a      	add	r0, sp, #40	; 0x28
 8011b50:	f7ff fc00 	bl	8011354 <_ZN8touchgfx4RectaNERKS0_>
 8011b54:	4b38      	ldr	r3, [pc, #224]	; (8011c38 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8011b56:	2100      	movs	r1, #0
 8011b58:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011b5c:	4b37      	ldr	r3, [pc, #220]	; (8011c3c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8011b5e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8011b62:	aa0a      	add	r2, sp, #40	; 0x28
 8011b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011b68:	910c      	str	r1, [sp, #48]	; 0x30
 8011b6a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8011b6e:	ab08      	add	r3, sp, #32
 8011b70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011b74:	e883 0003 	stmia.w	r3, {r0, r1}
 8011b78:	4618      	mov	r0, r3
 8011b7a:	a90c      	add	r1, sp, #48	; 0x30
 8011b7c:	f7ff fbea 	bl	8011354 <_ZN8touchgfx4RectaNERKS0_>
 8011b80:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d13c      	bne.n	8011c00 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8011b86:	2000      	movs	r0, #0
 8011b88:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8011b8c:	2600      	movs	r6, #0
 8011b8e:	696b      	ldr	r3, [r5, #20]
 8011b90:	a908      	add	r1, sp, #32
 8011b92:	682a      	ldr	r2, [r5, #0]
 8011b94:	4628      	mov	r0, r5
 8011b96:	9305      	str	r3, [sp, #20]
 8011b98:	616e      	str	r6, [r5, #20]
 8011b9a:	6892      	ldr	r2, [r2, #8]
 8011b9c:	4790      	blx	r2
 8011b9e:	9b05      	ldr	r3, [sp, #20]
 8011ba0:	4652      	mov	r2, sl
 8011ba2:	4649      	mov	r1, r9
 8011ba4:	616b      	str	r3, [r5, #20]
 8011ba6:	4628      	mov	r0, r5
 8011ba8:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8011bac:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8011bb0:	f7f1 fbff 	bl	80033b2 <_ZN8touchgfx8Drawable5setXYEss>
 8011bb4:	9a01      	ldr	r2, [sp, #4]
 8011bb6:	4b23      	ldr	r3, [pc, #140]	; (8011c44 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8011bb8:	4620      	mov	r0, r4
 8011bba:	801a      	strh	r2, [r3, #0]
 8011bbc:	9a02      	ldr	r2, [sp, #8]
 8011bbe:	4b22      	ldr	r3, [pc, #136]	; (8011c48 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8011bc0:	801a      	strh	r2, [r3, #0]
 8011bc2:	9a03      	ldr	r2, [sp, #12]
 8011bc4:	4b1c      	ldr	r3, [pc, #112]	; (8011c38 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8011bc6:	801a      	strh	r2, [r3, #0]
 8011bc8:	4b1c      	ldr	r3, [pc, #112]	; (8011c3c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8011bca:	9a04      	ldr	r2, [sp, #16]
 8011bcc:	801a      	strh	r2, [r3, #0]
 8011bce:	6823      	ldr	r3, [r4, #0]
 8011bd0:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8011bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bd6:	4798      	blx	r3
 8011bd8:	6823      	ldr	r3, [r4, #0]
 8011bda:	4620      	mov	r0, r4
 8011bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bde:	4798      	blx	r3
 8011be0:	b00f      	add	sp, #60	; 0x3c
 8011be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011be6:	883b      	ldrh	r3, [r7, #0]
 8011be8:	f8ab 0000 	strh.w	r0, [fp]
 8011bec:	f8aa 3000 	strh.w	r3, [sl]
 8011bf0:	e789      	b.n	8011b06 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8011bf2:	462a      	mov	r2, r5
 8011bf4:	ab0a      	add	r3, sp, #40	; 0x28
 8011bf6:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8011bfa:	6851      	ldr	r1, [r2, #4]
 8011bfc:	c303      	stmia	r3!, {r0, r1}
 8011bfe:	e7a9      	b.n	8011b54 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8011c00:	a807      	add	r0, sp, #28
 8011c02:	f008 fd7b 	bl	801a6fc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8011c06:	4606      	mov	r6, r0
 8011c08:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8011c0a:	6803      	ldr	r3, [r0, #0]
 8011c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c0e:	4798      	blx	r3
 8011c10:	4286      	cmp	r6, r0
 8011c12:	d1b8      	bne.n	8011b86 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8011c14:	f7ff fe6e 	bl	80118f4 <_ZN8touchgfx3HAL3lcdEv>
 8011c18:	6803      	ldr	r3, [r0, #0]
 8011c1a:	4606      	mov	r6, r0
 8011c1c:	a807      	add	r0, sp, #28
 8011c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c20:	9305      	str	r3, [sp, #20]
 8011c22:	f008 fd6b 	bl	801a6fc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8011c26:	9b05      	ldr	r3, [sp, #20]
 8011c28:	4601      	mov	r1, r0
 8011c2a:	4630      	mov	r0, r6
 8011c2c:	4798      	blx	r3
 8011c2e:	f080 0001 	eor.w	r0, r0, #1
 8011c32:	b2c0      	uxtb	r0, r0
 8011c34:	e7a8      	b.n	8011b88 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8011c36:	bf00      	nop
 8011c38:	2400eac4 	.word	0x2400eac4
 8011c3c:	2400eac6 	.word	0x2400eac6
 8011c40:	2400eac8 	.word	0x2400eac8
 8011c44:	2400eaca 	.word	0x2400eaca
 8011c48:	2400eacc 	.word	0x2400eacc

08011c4c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8011c4c:	4b07      	ldr	r3, [pc, #28]	; (8011c6c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8011c4e:	b510      	push	{r4, lr}
 8011c50:	781b      	ldrb	r3, [r3, #0]
 8011c52:	4604      	mov	r4, r0
 8011c54:	b13b      	cbz	r3, 8011c66 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8011c56:	6803      	ldr	r3, [r0, #0]
 8011c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c5a:	4798      	blx	r3
 8011c5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011c5e:	4283      	cmp	r3, r0
 8011c60:	d101      	bne.n	8011c66 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8011c62:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8011c64:	bd10      	pop	{r4, pc}
 8011c66:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8011c68:	e7fc      	b.n	8011c64 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8011c6a:	bf00      	nop
 8011c6c:	2400eace 	.word	0x2400eace

08011c70 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8011c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c74:	461d      	mov	r5, r3
 8011c76:	b08a      	sub	sp, #40	; 0x28
 8011c78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011c7c:	4690      	mov	r8, r2
 8011c7e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8011c82:	2400      	movs	r4, #0
 8011c84:	4607      	mov	r7, r0
 8011c86:	fb06 8505 	mla	r5, r6, r5, r8
 8011c8a:	9404      	str	r4, [sp, #16]
 8011c8c:	f88d 4020 	strb.w	r4, [sp, #32]
 8011c90:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8011c94:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8011c98:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011c9c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8011ca0:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011ca4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8011ca8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011cac:	f7ff ffce 	bl	8011c4c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011cb0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8011cb4:	6878      	ldr	r0, [r7, #4]
 8011cb6:	f8ad 601e 	strh.w	r6, [sp, #30]
 8011cba:	a901      	add	r1, sp, #4
 8011cbc:	9505      	str	r5, [sp, #20]
 8011cbe:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8011cc2:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8011cc6:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8011cca:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8011cce:	6803      	ldr	r3, [r0, #0]
 8011cd0:	685b      	ldr	r3, [r3, #4]
 8011cd2:	4798      	blx	r3
 8011cd4:	b00a      	add	sp, #40	; 0x28
 8011cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011cda <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8011cda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011cde:	b08b      	sub	sp, #44	; 0x2c
 8011ce0:	2400      	movs	r4, #0
 8011ce2:	4691      	mov	r9, r2
 8011ce4:	461d      	mov	r5, r3
 8011ce6:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8011cea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011cee:	4688      	mov	r8, r1
 8011cf0:	4607      	mov	r7, r0
 8011cf2:	9404      	str	r4, [sp, #16]
 8011cf4:	fb06 9505 	mla	r5, r6, r5, r9
 8011cf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011cfc:	f7ff ffa6 	bl	8011c4c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011d00:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8011d04:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8011d08:	6878      	ldr	r0, [r7, #4]
 8011d0a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011d0e:	a901      	add	r1, sp, #4
 8011d10:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8011d14:	9505      	str	r5, [sp, #20]
 8011d16:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011d1a:	f8ad 401c 	strh.w	r4, [sp, #28]
 8011d1e:	f8ad 601e 	strh.w	r6, [sp, #30]
 8011d22:	f8cd 8010 	str.w	r8, [sp, #16]
 8011d26:	f8ad 4020 	strh.w	r4, [sp, #32]
 8011d2a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8011d2e:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8011d32:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8011d36:	6803      	ldr	r3, [r0, #0]
 8011d38:	685b      	ldr	r3, [r3, #4]
 8011d3a:	4798      	blx	r3
 8011d3c:	b00b      	add	sp, #44	; 0x2c
 8011d3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08011d44 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8011d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d48:	b08a      	sub	sp, #40	; 0x28
 8011d4a:	4698      	mov	r8, r3
 8011d4c:	2300      	movs	r3, #0
 8011d4e:	4606      	mov	r6, r0
 8011d50:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8011d54:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8011d58:	2d0b      	cmp	r5, #11
 8011d5a:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8011d5e:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8011d62:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8011d66:	9304      	str	r3, [sp, #16]
 8011d68:	d137      	bne.n	8011dda <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8011d6a:	2380      	movs	r3, #128	; 0x80
 8011d6c:	f88d 0020 	strb.w	r0, [sp, #32]
 8011d70:	4630      	mov	r0, r6
 8011d72:	9203      	str	r2, [sp, #12]
 8011d74:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8011d78:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8011d7c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011d80:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8011d84:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011d88:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8011d8c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011d90:	f7ff ff5c 	bl	8011c4c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011d94:	2c0b      	cmp	r4, #11
 8011d96:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8011d9a:	f8ad 701e 	strh.w	r7, [sp, #30]
 8011d9e:	bf94      	ite	ls
 8011da0:	4b19      	ldrls	r3, [pc, #100]	; (8011e08 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8011da2:	2100      	movhi	r1, #0
 8011da4:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8011da8:	bf98      	it	ls
 8011daa:	5d19      	ldrbls	r1, [r3, r4]
 8011dac:	fb02 8307 	mla	r3, r2, r7, r8
 8011db0:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8011db4:	10c9      	asrs	r1, r1, #3
 8011db6:	fb01 0003 	mla	r0, r1, r3, r0
 8011dba:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8011dbe:	a901      	add	r1, sp, #4
 8011dc0:	9005      	str	r0, [sp, #20]
 8011dc2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	6870      	ldr	r0, [r6, #4]
 8011dca:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8011dce:	6803      	ldr	r3, [r0, #0]
 8011dd0:	685b      	ldr	r3, [r3, #4]
 8011dd2:	4798      	blx	r3
 8011dd4:	b00a      	add	sp, #40	; 0x28
 8011dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dda:	2d02      	cmp	r5, #2
 8011ddc:	d109      	bne.n	8011df2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8011dde:	28ff      	cmp	r0, #255	; 0xff
 8011de0:	d105      	bne.n	8011dee <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8011de2:	f1bc 0f00 	cmp.w	ip, #0
 8011de6:	bf14      	ite	ne
 8011de8:	2340      	movne	r3, #64	; 0x40
 8011dea:	2320      	moveq	r3, #32
 8011dec:	e7be      	b.n	8011d6c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8011dee:	2340      	movs	r3, #64	; 0x40
 8011df0:	e7bc      	b.n	8011d6c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8011df2:	28ff      	cmp	r0, #255	; 0xff
 8011df4:	d105      	bne.n	8011e02 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8011df6:	f1bc 0f00 	cmp.w	ip, #0
 8011dfa:	bf14      	ite	ne
 8011dfc:	2304      	movne	r3, #4
 8011dfe:	2301      	moveq	r3, #1
 8011e00:	e7b4      	b.n	8011d6c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8011e02:	2304      	movs	r3, #4
 8011e04:	e7b2      	b.n	8011d6c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8011e06:	bf00      	nop
 8011e08:	080257d0 	.word	0x080257d0

08011e0c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8011e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e10:	b08b      	sub	sp, #44	; 0x2c
 8011e12:	461d      	mov	r5, r3
 8011e14:	2400      	movs	r4, #0
 8011e16:	4688      	mov	r8, r1
 8011e18:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8011e1c:	4693      	mov	fp, r2
 8011e1e:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8011e22:	4607      	mov	r7, r0
 8011e24:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8011e28:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8011e2c:	9404      	str	r4, [sp, #16]
 8011e2e:	bf14      	ite	ne
 8011e30:	2308      	movne	r3, #8
 8011e32:	2302      	moveq	r3, #2
 8011e34:	fb05 b50a 	mla	r5, r5, sl, fp
 8011e38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011e3c:	f7ff ff06 	bl	8011c4c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011e40:	2e0b      	cmp	r6, #11
 8011e42:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8011e46:	a901      	add	r1, sp, #4
 8011e48:	bf98      	it	ls
 8011e4a:	4b13      	ldrls	r3, [pc, #76]	; (8011e98 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8011e4c:	f8ad a01e 	strh.w	sl, [sp, #30]
 8011e50:	bf98      	it	ls
 8011e52:	5d9c      	ldrbls	r4, [r3, r6]
 8011e54:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8011e58:	10e4      	asrs	r4, r4, #3
 8011e5a:	f8cd 8010 	str.w	r8, [sp, #16]
 8011e5e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011e62:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8011e66:	fb04 0405 	mla	r4, r4, r5, r0
 8011e6a:	6878      	ldr	r0, [r7, #4]
 8011e6c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011e70:	2300      	movs	r3, #0
 8011e72:	9405      	str	r4, [sp, #20]
 8011e74:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011e78:	f88d 9020 	strb.w	r9, [sp, #32]
 8011e7c:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8011e80:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8011e84:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8011e88:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8011e8c:	6803      	ldr	r3, [r0, #0]
 8011e8e:	685b      	ldr	r3, [r3, #4]
 8011e90:	4798      	blx	r3
 8011e92:	b00b      	add	sp, #44	; 0x2c
 8011e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e98:	080257d0 	.word	0x080257d0

08011e9c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8011e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ea0:	461e      	mov	r6, r3
 8011ea2:	4b0a      	ldr	r3, [pc, #40]	; (8011ecc <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8011ea4:	460f      	mov	r7, r1
 8011ea6:	4690      	mov	r8, r2
 8011ea8:	881d      	ldrh	r5, [r3, #0]
 8011eaa:	f7ff fd23 	bl	80118f4 <_ZN8touchgfx3HAL3lcdEv>
 8011eae:	6803      	ldr	r3, [r0, #0]
 8011eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011eb2:	4798      	blx	r3
 8011eb4:	280b      	cmp	r0, #11
 8011eb6:	bf96      	itet	ls
 8011eb8:	4b05      	ldrls	r3, [pc, #20]	; (8011ed0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8011eba:	2400      	movhi	r4, #0
 8011ebc:	5c1c      	ldrbls	r4, [r3, r0]
 8011ebe:	fb08 7005 	mla	r0, r8, r5, r7
 8011ec2:	10e4      	asrs	r4, r4, #3
 8011ec4:	fb04 6000 	mla	r0, r4, r0, r6
 8011ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ecc:	2400eaca 	.word	0x2400eaca
 8011ed0:	080257d0 	.word	0x080257d0

08011ed4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8011ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ed6:	b08b      	sub	sp, #44	; 0x2c
 8011ed8:	461f      	mov	r7, r3
 8011eda:	4604      	mov	r4, r0
 8011edc:	4616      	mov	r6, r2
 8011ede:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8011ee2:	2500      	movs	r5, #0
 8011ee4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8011ee8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8011eec:	9504      	str	r5, [sp, #16]
 8011eee:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011ef2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8011ef6:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011efa:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8011efe:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011f02:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8011f06:	f88d 3020 	strb.w	r3, [sp, #32]
 8011f0a:	f7ff fe9f 	bl	8011c4c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011f0e:	463a      	mov	r2, r7
 8011f10:	4631      	mov	r1, r6
 8011f12:	4603      	mov	r3, r0
 8011f14:	4620      	mov	r0, r4
 8011f16:	f7ff ffc1 	bl	8011e9c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8011f1a:	4b0e      	ldr	r3, [pc, #56]	; (8011f54 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8011f1c:	9005      	str	r0, [sp, #20]
 8011f1e:	881b      	ldrh	r3, [r3, #0]
 8011f20:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011f24:	f7ff fce6 	bl	80118f4 <_ZN8touchgfx3HAL3lcdEv>
 8011f28:	6803      	ldr	r3, [r0, #0]
 8011f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f2c:	4798      	blx	r3
 8011f2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011f30:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8011f34:	a901      	add	r1, sp, #4
 8011f36:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8011f3a:	9304      	str	r3, [sp, #16]
 8011f3c:	6860      	ldr	r0, [r4, #4]
 8011f3e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8011f42:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8011f46:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8011f4a:	6803      	ldr	r3, [r0, #0]
 8011f4c:	685b      	ldr	r3, [r3, #4]
 8011f4e:	4798      	blx	r3
 8011f50:	b00b      	add	sp, #44	; 0x2c
 8011f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f54:	2400eaca 	.word	0x2400eaca

08011f58 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8011f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f5a:	b08d      	sub	sp, #52	; 0x34
 8011f5c:	2501      	movs	r5, #1
 8011f5e:	4604      	mov	r4, r0
 8011f60:	466b      	mov	r3, sp
 8011f62:	9503      	str	r5, [sp, #12]
 8011f64:	e883 0006 	stmia.w	r3, {r1, r2}
 8011f68:	2300      	movs	r3, #0
 8011f6a:	f8bd 6000 	ldrh.w	r6, [sp]
 8011f6e:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8011f72:	9306      	str	r3, [sp, #24]
 8011f74:	6803      	ldr	r3, [r0, #0]
 8011f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f78:	4798      	blx	r3
 8011f7a:	463a      	mov	r2, r7
 8011f7c:	4631      	mov	r1, r6
 8011f7e:	4603      	mov	r3, r0
 8011f80:	4620      	mov	r0, r4
 8011f82:	f7ff ff8b 	bl	8011e9c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8011f86:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011f88:	9004      	str	r0, [sp, #16]
 8011f8a:	9307      	str	r3, [sp, #28]
 8011f8c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011f90:	f8ad 3020 	strh.w	r3, [sp, #32]
 8011f94:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8011f98:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8011f9c:	4b0e      	ldr	r3, [pc, #56]	; (8011fd8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8011f9e:	881b      	ldrh	r3, [r3, #0]
 8011fa0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8011fa4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8011fa8:	f7ff fca4 	bl	80118f4 <_ZN8touchgfx3HAL3lcdEv>
 8011fac:	6803      	ldr	r3, [r0, #0]
 8011fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fb0:	4798      	blx	r3
 8011fb2:	23ff      	movs	r3, #255	; 0xff
 8011fb4:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8011fb8:	a903      	add	r1, sp, #12
 8011fba:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8011fbe:	6860      	ldr	r0, [r4, #4]
 8011fc0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8011fc4:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8011fc8:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8011fcc:	6803      	ldr	r3, [r0, #0]
 8011fce:	685b      	ldr	r3, [r3, #4]
 8011fd0:	4798      	blx	r3
 8011fd2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8011fd4:	b00d      	add	sp, #52	; 0x34
 8011fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fd8:	2400eaca 	.word	0x2400eaca

08011fdc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8011fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fe0:	b08c      	sub	sp, #48	; 0x30
 8011fe2:	461e      	mov	r6, r3
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	4604      	mov	r4, r0
 8011fe8:	466d      	mov	r5, sp
 8011fea:	9306      	str	r3, [sp, #24]
 8011fec:	6803      	ldr	r3, [r0, #0]
 8011fee:	e885 0006 	stmia.w	r5, {r1, r2}
 8011ff2:	2501      	movs	r5, #1
 8011ff4:	f8bd 7000 	ldrh.w	r7, [sp]
 8011ff8:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8011ffc:	9503      	str	r5, [sp, #12]
 8011ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012000:	4798      	blx	r3
 8012002:	4642      	mov	r2, r8
 8012004:	4639      	mov	r1, r7
 8012006:	4603      	mov	r3, r0
 8012008:	4620      	mov	r0, r4
 801200a:	f7ff ff47 	bl	8011e9c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801200e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8012012:	9004      	str	r0, [sp, #16]
 8012014:	f8ad 3020 	strh.w	r3, [sp, #32]
 8012018:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801201c:	9607      	str	r6, [sp, #28]
 801201e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8012022:	4b10      	ldr	r3, [pc, #64]	; (8012064 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8012024:	881b      	ldrh	r3, [r3, #0]
 8012026:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801202a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801202c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8012030:	f7ff fc60 	bl	80118f4 <_ZN8touchgfx3HAL3lcdEv>
 8012034:	6803      	ldr	r3, [r0, #0]
 8012036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012038:	4798      	blx	r3
 801203a:	23ff      	movs	r3, #255	; 0xff
 801203c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8012040:	a903      	add	r1, sp, #12
 8012042:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8012046:	6860      	ldr	r0, [r4, #4]
 8012048:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801204c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8012050:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8012054:	6803      	ldr	r3, [r0, #0]
 8012056:	685b      	ldr	r3, [r3, #4]
 8012058:	4798      	blx	r3
 801205a:	4630      	mov	r0, r6
 801205c:	b00c      	add	sp, #48	; 0x30
 801205e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012062:	bf00      	nop
 8012064:	2400eaca 	.word	0x2400eaca

08012068 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8012068:	b5f0      	push	{r4, r5, r6, r7, lr}
 801206a:	b085      	sub	sp, #20
 801206c:	4605      	mov	r5, r0
 801206e:	ac02      	add	r4, sp, #8
 8012070:	e884 0006 	stmia.w	r4, {r1, r2}
 8012074:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8012078:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 801207c:	f7ff fde6 	bl	8011c4c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012080:	4631      	mov	r1, r6
 8012082:	4603      	mov	r3, r0
 8012084:	463a      	mov	r2, r7
 8012086:	4628      	mov	r0, r5
 8012088:	f7ff ff08 	bl	8011e9c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801208c:	4a05      	ldr	r2, [pc, #20]	; (80120a4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 801208e:	682b      	ldr	r3, [r5, #0]
 8012090:	8812      	ldrh	r2, [r2, #0]
 8012092:	9200      	str	r2, [sp, #0]
 8012094:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8012096:	4603      	mov	r3, r0
 8012098:	4628      	mov	r0, r5
 801209a:	e894 0006 	ldmia.w	r4, {r1, r2}
 801209e:	47b0      	blx	r6
 80120a0:	b005      	add	sp, #20
 80120a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120a4:	2400eaca 	.word	0x2400eaca

080120a8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80120a8:	b570      	push	{r4, r5, r6, lr}
 80120aa:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80120ae:	4604      	mov	r4, r0
 80120b0:	b19b      	cbz	r3, 80120da <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80120b2:	2002      	movs	r0, #2
 80120b4:	f7ef fbaa 	bl	800180c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80120b8:	2300      	movs	r3, #0
 80120ba:	4620      	mov	r0, r4
 80120bc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80120c0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80120c4:	6823      	ldr	r3, [r4, #0]
 80120c6:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 80120ca:	f7ff fdbf 	bl	8011c4c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80120ce:	4601      	mov	r1, r0
 80120d0:	4620      	mov	r0, r4
 80120d2:	462b      	mov	r3, r5
 80120d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80120d8:	4718      	bx	r3
 80120da:	bd70      	pop	{r4, r5, r6, pc}

080120dc <_ZN8touchgfx3HAL12setMCUActiveEb>:
 80120dc:	b570      	push	{r4, r5, r6, lr}
 80120de:	4605      	mov	r5, r0
 80120e0:	460c      	mov	r4, r1
 80120e2:	2003      	movs	r0, #3
 80120e4:	b149      	cbz	r1, 80120fa <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 80120e6:	f7ef fb31 	bl	800174c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80120ea:	6928      	ldr	r0, [r5, #16]
 80120ec:	b168      	cbz	r0, 801210a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 80120ee:	6803      	ldr	r3, [r0, #0]
 80120f0:	2101      	movs	r1, #1
 80120f2:	695b      	ldr	r3, [r3, #20]
 80120f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80120f8:	4718      	bx	r3
 80120fa:	f7ef fb57 	bl	80017ac <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80120fe:	6928      	ldr	r0, [r5, #16]
 8012100:	b118      	cbz	r0, 801210a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8012102:	6803      	ldr	r3, [r0, #0]
 8012104:	4621      	mov	r1, r4
 8012106:	695b      	ldr	r3, [r3, #20]
 8012108:	e7f4      	b.n	80120f4 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 801210a:	bd70      	pop	{r4, r5, r6, pc}

0801210c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 801210c:	b538      	push	{r3, r4, r5, lr}
 801210e:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8012112:	4604      	mov	r4, r0
 8012114:	460d      	mov	r5, r1
 8012116:	428b      	cmp	r3, r1
 8012118:	d006      	beq.n	8012128 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801211a:	6803      	ldr	r3, [r0, #0]
 801211c:	b929      	cbnz	r1, 801212a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801211e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8012122:	4798      	blx	r3
 8012124:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8012128:	bd38      	pop	{r3, r4, r5, pc}
 801212a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801212e:	e7f8      	b.n	8012122 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08012130 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8012130:	4b0d      	ldr	r3, [pc, #52]	; (8012168 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8012132:	b510      	push	{r4, lr}
 8012134:	781b      	ldrb	r3, [r3, #0]
 8012136:	4604      	mov	r4, r0
 8012138:	b95b      	cbnz	r3, 8012152 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801213a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801213e:	2b02      	cmp	r3, #2
 8012140:	d007      	beq.n	8012152 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8012142:	6840      	ldr	r0, [r0, #4]
 8012144:	f000 f92a 	bl	801239c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8012148:	b118      	cbz	r0, 8012152 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801214a:	6862      	ldr	r2, [r4, #4]
 801214c:	7a53      	ldrb	r3, [r2, #9]
 801214e:	2b00      	cmp	r3, #0
 8012150:	d0fc      	beq.n	801214c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8012152:	f7ef fea9 	bl	8001ea8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8012156:	4620      	mov	r0, r4
 8012158:	2100      	movs	r1, #0
 801215a:	f7ff ffd7 	bl	801210c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801215e:	4620      	mov	r0, r4
 8012160:	f7ff fd74 	bl	8011c4c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012164:	bd10      	pop	{r4, pc}
 8012166:	bf00      	nop
 8012168:	2400eace 	.word	0x2400eace

0801216c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 801216c:	b570      	push	{r4, r5, r6, lr}
 801216e:	4604      	mov	r4, r0
 8012170:	6803      	ldr	r3, [r0, #0]
 8012172:	b919      	cbnz	r1, 801217c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8012174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012176:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801217a:	4718      	bx	r3
 801217c:	2200      	movs	r2, #0
 801217e:	f890 6078 	ldrb.w	r6, [r0, #120]	; 0x78
 8012182:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 8012186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012188:	4798      	blx	r3
 801218a:	4605      	mov	r5, r0
 801218c:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
 8012190:	4620      	mov	r0, r4
 8012192:	2101      	movs	r1, #1
 8012194:	f7ff ffba 	bl	801210c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8012198:	4628      	mov	r0, r5
 801219a:	bd70      	pop	{r4, r5, r6, pc}

0801219c <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801219c:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80121a0:	1a13      	subs	r3, r2, r0
 80121a2:	4258      	negs	r0, r3
 80121a4:	4158      	adcs	r0, r3
 80121a6:	4770      	bx	lr

080121a8 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80121a8:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80121ac:	1a9b      	subs	r3, r3, r2
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	bfdc      	itt	le
 80121b2:	6882      	ldrle	r2, [r0, #8]
 80121b4:	189b      	addle	r3, r3, r2
 80121b6:	2b01      	cmp	r3, #1
 80121b8:	bfcc      	ite	gt
 80121ba:	2000      	movgt	r0, #0
 80121bc:	2001      	movle	r0, #1
 80121be:	4770      	bx	lr

080121c0 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80121c0:	6902      	ldr	r2, [r0, #16]
 80121c2:	6843      	ldr	r3, [r0, #4]
 80121c4:	2024      	movs	r0, #36	; 0x24
 80121c6:	fb00 3002 	mla	r0, r0, r2, r3
 80121ca:	4770      	bx	lr

080121cc <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80121cc:	6803      	ldr	r3, [r0, #0]
 80121ce:	691b      	ldr	r3, [r3, #16]
 80121d0:	4718      	bx	r3

080121d2 <_ZN8touchgfx13DMA_Interface7executeEv>:
 80121d2:	2301      	movs	r3, #1
 80121d4:	b570      	push	{r4, r5, r6, lr}
 80121d6:	7203      	strb	r3, [r0, #8]
 80121d8:	4604      	mov	r4, r0
 80121da:	6840      	ldr	r0, [r0, #4]
 80121dc:	6803      	ldr	r3, [r0, #0]
 80121de:	699b      	ldr	r3, [r3, #24]
 80121e0:	4798      	blx	r3
 80121e2:	6803      	ldr	r3, [r0, #0]
 80121e4:	4605      	mov	r5, r0
 80121e6:	2b40      	cmp	r3, #64	; 0x40
 80121e8:	d00c      	beq.n	8012204 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80121ea:	d810      	bhi.n	801220e <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80121ec:	2b04      	cmp	r3, #4
 80121ee:	d01d      	beq.n	801222c <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 80121f0:	d804      	bhi.n	80121fc <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 80121f2:	2b01      	cmp	r3, #1
 80121f4:	d006      	beq.n	8012204 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80121f6:	2b02      	cmp	r3, #2
 80121f8:	d02c      	beq.n	8012254 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 80121fa:	bd70      	pop	{r4, r5, r6, pc}
 80121fc:	2b08      	cmp	r3, #8
 80121fe:	d01d      	beq.n	801223c <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8012200:	2b20      	cmp	r3, #32
 8012202:	d1fa      	bne.n	80121fa <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8012204:	6823      	ldr	r3, [r4, #0]
 8012206:	4620      	mov	r0, r4
 8012208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801220a:	4798      	blx	r3
 801220c:	e013      	b.n	8012236 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801220e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012212:	d0f7      	beq.n	8012204 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8012214:	d804      	bhi.n	8012220 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8012216:	2b80      	cmp	r3, #128	; 0x80
 8012218:	d0f4      	beq.n	8012204 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801221a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801221e:	e7f0      	b.n	8012202 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8012220:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012224:	d0ee      	beq.n	8012204 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8012226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801222a:	e7e5      	b.n	80121f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 801222c:	6823      	ldr	r3, [r4, #0]
 801222e:	7f01      	ldrb	r1, [r0, #28]
 8012230:	4620      	mov	r0, r4
 8012232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012234:	4798      	blx	r3
 8012236:	6823      	ldr	r3, [r4, #0]
 8012238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801223a:	e006      	b.n	801224a <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801223c:	6823      	ldr	r3, [r4, #0]
 801223e:	7f01      	ldrb	r1, [r0, #28]
 8012240:	4620      	mov	r0, r4
 8012242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012244:	4798      	blx	r3
 8012246:	6823      	ldr	r3, [r4, #0]
 8012248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801224a:	4629      	mov	r1, r5
 801224c:	4620      	mov	r0, r4
 801224e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012252:	4718      	bx	r3
 8012254:	6823      	ldr	r3, [r4, #0]
 8012256:	4620      	mov	r0, r4
 8012258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801225a:	4798      	blx	r3
 801225c:	e7f3      	b.n	8012246 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0801225e <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801225e:	4770      	bx	lr

08012260 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8012260:	4770      	bx	lr

08012262 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8012262:	4770      	bx	lr

08012264 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8012264:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8012268:	b510      	push	{r4, lr}
 801226a:	1ad2      	subs	r2, r2, r3
 801226c:	2a00      	cmp	r2, #0
 801226e:	bfdc      	itt	le
 8012270:	6884      	ldrle	r4, [r0, #8]
 8012272:	1912      	addle	r2, r2, r4
 8012274:	2a01      	cmp	r2, #1
 8012276:	dd16      	ble.n	80122a6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8012278:	6842      	ldr	r2, [r0, #4]
 801227a:	2424      	movs	r4, #36	; 0x24
 801227c:	fb04 2303 	mla	r3, r4, r3, r2
 8012280:	f101 0220 	add.w	r2, r1, #32
 8012284:	f851 4b04 	ldr.w	r4, [r1], #4
 8012288:	4291      	cmp	r1, r2
 801228a:	f843 4b04 	str.w	r4, [r3], #4
 801228e:	d1f9      	bne.n	8012284 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8012290:	780a      	ldrb	r2, [r1, #0]
 8012292:	701a      	strb	r2, [r3, #0]
 8012294:	68c3      	ldr	r3, [r0, #12]
 8012296:	6882      	ldr	r2, [r0, #8]
 8012298:	f3bf 8f5b 	dmb	ish
 801229c:	3301      	adds	r3, #1
 801229e:	429a      	cmp	r2, r3
 80122a0:	bfd8      	it	le
 80122a2:	1a9b      	suble	r3, r3, r2
 80122a4:	60c3      	str	r3, [r0, #12]
 80122a6:	bd10      	pop	{r4, pc}

080122a8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80122a8:	6903      	ldr	r3, [r0, #16]
 80122aa:	6882      	ldr	r2, [r0, #8]
 80122ac:	f3bf 8f5b 	dmb	ish
 80122b0:	3301      	adds	r3, #1
 80122b2:	429a      	cmp	r2, r3
 80122b4:	bfd8      	it	le
 80122b6:	1a9b      	suble	r3, r3, r2
 80122b8:	6103      	str	r3, [r0, #16]
 80122ba:	4770      	bx	lr

080122bc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80122bc:	b570      	push	{r4, r5, r6, lr}
 80122be:	4604      	mov	r4, r0
 80122c0:	460e      	mov	r6, r1
 80122c2:	6860      	ldr	r0, [r4, #4]
 80122c4:	6803      	ldr	r3, [r0, #0]
 80122c6:	685b      	ldr	r3, [r3, #4]
 80122c8:	4798      	blx	r3
 80122ca:	2800      	cmp	r0, #0
 80122cc:	d1f9      	bne.n	80122c2 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80122ce:	4d0d      	ldr	r5, [pc, #52]	; (8012304 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80122d0:	6828      	ldr	r0, [r5, #0]
 80122d2:	6803      	ldr	r3, [r0, #0]
 80122d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122d6:	4798      	blx	r3
 80122d8:	f7ef fdf4 	bl	8001ec4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80122dc:	6828      	ldr	r0, [r5, #0]
 80122de:	2101      	movs	r1, #1
 80122e0:	f7ff ff14 	bl	801210c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80122e4:	6860      	ldr	r0, [r4, #4]
 80122e6:	4631      	mov	r1, r6
 80122e8:	6803      	ldr	r3, [r0, #0]
 80122ea:	689b      	ldr	r3, [r3, #8]
 80122ec:	4798      	blx	r3
 80122ee:	6823      	ldr	r3, [r4, #0]
 80122f0:	4620      	mov	r0, r4
 80122f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122f4:	4798      	blx	r3
 80122f6:	6828      	ldr	r0, [r5, #0]
 80122f8:	6803      	ldr	r3, [r0, #0]
 80122fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80122fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012300:	4718      	bx	r3
 8012302:	bf00      	nop
 8012304:	2400ead0 	.word	0x2400ead0

08012308 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8012308:	b508      	push	{r3, lr}
 801230a:	f7ef fdcd 	bl	8001ea8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801230e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012312:	f7ef bdd1 	b.w	8001eb8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08012316 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8012316:	b510      	push	{r4, lr}
 8012318:	4604      	mov	r4, r0
 801231a:	2114      	movs	r1, #20
 801231c:	f010 fcb3 	bl	8022c86 <_ZdlPvj>
 8012320:	4620      	mov	r0, r4
 8012322:	bd10      	pop	{r4, pc}

08012324 <_ZN8touchgfx13DMA_Interface5startEv>:
 8012324:	b510      	push	{r4, lr}
 8012326:	4604      	mov	r4, r0
 8012328:	6840      	ldr	r0, [r0, #4]
 801232a:	6803      	ldr	r3, [r0, #0]
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	4798      	blx	r3
 8012330:	b948      	cbnz	r0, 8012346 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8012332:	7a63      	ldrb	r3, [r4, #9]
 8012334:	b13b      	cbz	r3, 8012346 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8012336:	7a23      	ldrb	r3, [r4, #8]
 8012338:	b92b      	cbnz	r3, 8012346 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801233a:	6823      	ldr	r3, [r4, #0]
 801233c:	4620      	mov	r0, r4
 801233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012344:	4718      	bx	r3
 8012346:	bd10      	pop	{r4, pc}

08012348 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8012348:	b570      	push	{r4, r5, r6, lr}
 801234a:	4604      	mov	r4, r0
 801234c:	6840      	ldr	r0, [r0, #4]
 801234e:	6803      	ldr	r3, [r0, #0]
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	4798      	blx	r3
 8012354:	4605      	mov	r5, r0
 8012356:	b930      	cbnz	r0, 8012366 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8012358:	7a23      	ldrb	r3, [r4, #8]
 801235a:	b123      	cbz	r3, 8012366 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801235c:	6860      	ldr	r0, [r4, #4]
 801235e:	6803      	ldr	r3, [r0, #0]
 8012360:	695b      	ldr	r3, [r3, #20]
 8012362:	4798      	blx	r3
 8012364:	7225      	strb	r5, [r4, #8]
 8012366:	6860      	ldr	r0, [r4, #4]
 8012368:	6803      	ldr	r3, [r0, #0]
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	4798      	blx	r3
 801236e:	b928      	cbnz	r0, 801237c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8012370:	6823      	ldr	r3, [r4, #0]
 8012372:	4620      	mov	r0, r4
 8012374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012376:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801237a:	4718      	bx	r3
 801237c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012380:	f7ef bda8 	b.w	8001ed4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08012384 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8012384:	b510      	push	{r4, lr}
 8012386:	6082      	str	r2, [r0, #8]
 8012388:	2200      	movs	r2, #0
 801238a:	4c03      	ldr	r4, [pc, #12]	; (8012398 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801238c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8012390:	e9c0 4100 	strd	r4, r1, [r0]
 8012394:	bd10      	pop	{r4, pc}
 8012396:	bf00      	nop
 8012398:	080257e4 	.word	0x080257e4

0801239c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801239c:	6840      	ldr	r0, [r0, #4]
 801239e:	6803      	ldr	r3, [r0, #0]
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	4718      	bx	r3

080123a4 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 80123a4:	0c0b      	lsrs	r3, r1, #16
 80123a6:	60c1      	str	r1, [r0, #12]
 80123a8:	7481      	strb	r1, [r0, #18]
 80123aa:	7403      	strb	r3, [r0, #16]
 80123ac:	0a0b      	lsrs	r3, r1, #8
 80123ae:	7443      	strb	r3, [r0, #17]
 80123b0:	4770      	bx	lr

080123b2 <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 80123b2:	f1a0 0008 	sub.w	r0, r0, #8
 80123b6:	e7f5      	b.n	80123a4 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>

080123b8 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 80123b8:	b508      	push	{r3, lr}
 80123ba:	4b05      	ldr	r3, [pc, #20]	; (80123d0 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 80123bc:	6818      	ldr	r0, [r3, #0]
 80123be:	6803      	ldr	r3, [r0, #0]
 80123c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80123c4:	4798      	blx	r3
 80123c6:	1e43      	subs	r3, r0, #1
 80123c8:	4258      	negs	r0, r3
 80123ca:	4158      	adcs	r0, r3
 80123cc:	bd08      	pop	{r3, pc}
 80123ce:	bf00      	nop
 80123d0:	2400ead0 	.word	0x2400ead0

080123d4 <_ZN8touchgfx13PainterRGB888D1Ev>:
 80123d4:	4770      	bx	lr

080123d6 <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 80123d6:	3808      	subs	r0, #8
 80123d8:	4770      	bx	lr

080123da <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 80123da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80123de:	b410      	push	{r4}
 80123e0:	188c      	adds	r4, r1, r2
 80123e2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80123e6:	68c2      	ldr	r2, [r0, #12]
 80123e8:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80123ec:	4620      	mov	r0, r4
 80123ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80123f2:	f7ef bf25 	b.w	8002240 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

080123f6 <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 80123f6:	f7ef bf19 	b.w	800222c <_ZN8touchgfx5paint8tearDownEv>

080123fa <_ZN8touchgfx13PainterRGB888D0Ev>:
 80123fa:	b510      	push	{r4, lr}
 80123fc:	4604      	mov	r4, r0
 80123fe:	2114      	movs	r1, #20
 8012400:	f010 fc41 	bl	8022c86 <_ZdlPvj>
 8012404:	4620      	mov	r0, r4
 8012406:	bd10      	pop	{r4, pc}

08012408 <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 8012408:	f1a0 0008 	sub.w	r0, r0, #8
 801240c:	e7f5      	b.n	80123fa <_ZN8touchgfx13PainterRGB888D0Ev>
	...

08012410 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8012410:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012412:	6803      	ldr	r3, [r0, #0]
 8012414:	460d      	mov	r5, r1
 8012416:	4604      	mov	r4, r0
 8012418:	4601      	mov	r1, r0
 801241a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801241c:	a802      	add	r0, sp, #8
 801241e:	4798      	blx	r3
 8012420:	6828      	ldr	r0, [r5, #0]
 8012422:	6869      	ldr	r1, [r5, #4]
 8012424:	466b      	mov	r3, sp
 8012426:	c303      	stmia	r3!, {r0, r1}
 8012428:	4668      	mov	r0, sp
 801242a:	4619      	mov	r1, r3
 801242c:	f7fe ff92 	bl	8011354 <_ZN8touchgfx4RectaNERKS0_>
 8012430:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8012432:	b1a8      	cbz	r0, 8012460 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8012434:	6803      	ldr	r3, [r0, #0]
 8012436:	1d21      	adds	r1, r4, #4
 8012438:	68db      	ldr	r3, [r3, #12]
 801243a:	4798      	blx	r3
 801243c:	b180      	cbz	r0, 8012460 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 801243e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8012442:	2b00      	cmp	r3, #0
 8012444:	dd0c      	ble.n	8012460 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8012446:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 801244a:	2d00      	cmp	r5, #0
 801244c:	dd08      	ble.n	8012460 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 801244e:	4a2d      	ldr	r2, [pc, #180]	; (8012504 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf4>)
 8012450:	7812      	ldrb	r2, [r2, #0]
 8012452:	b13a      	cbz	r2, 8012464 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
 8012454:	2a01      	cmp	r2, #1
 8012456:	d02d      	beq.n	80124b4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa4>
 8012458:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801245a:	6803      	ldr	r3, [r0, #0]
 801245c:	691b      	ldr	r3, [r3, #16]
 801245e:	4798      	blx	r3
 8012460:	b004      	add	sp, #16
 8012462:	bd70      	pop	{r4, r5, r6, pc}
 8012464:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012468:	441d      	add	r5, r3
 801246a:	b2ad      	uxth	r5, r5
 801246c:	b22e      	sxth	r6, r5
 801246e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8012472:	42b3      	cmp	r3, r6
 8012474:	daf0      	bge.n	8012458 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8012476:	6823      	ldr	r3, [r4, #0]
 8012478:	4669      	mov	r1, sp
 801247a:	4620      	mov	r0, r4
 801247c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801247e:	4798      	blx	r3
 8012480:	b940      	cbnz	r0, 8012494 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 8012482:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8012486:	2b01      	cmp	r3, #1
 8012488:	d004      	beq.n	8012494 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 801248a:	3301      	adds	r3, #1
 801248c:	105b      	asrs	r3, r3, #1
 801248e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012492:	e7f0      	b.n	8012476 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x66>
 8012494:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012498:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801249c:	4413      	add	r3, r2
 801249e:	b29b      	uxth	r3, r3
 80124a0:	441a      	add	r2, r3
 80124a2:	f8ad 3002 	strh.w	r3, [sp, #2]
 80124a6:	b212      	sxth	r2, r2
 80124a8:	4296      	cmp	r6, r2
 80124aa:	dae0      	bge.n	801246e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 80124ac:	1aeb      	subs	r3, r5, r3
 80124ae:	f8ad 3006 	strh.w	r3, [sp, #6]
 80124b2:	e7dc      	b.n	801246e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 80124b4:	f8bd 5000 	ldrh.w	r5, [sp]
 80124b8:	441d      	add	r5, r3
 80124ba:	b2ad      	uxth	r5, r5
 80124bc:	b22e      	sxth	r6, r5
 80124be:	f9bd 3000 	ldrsh.w	r3, [sp]
 80124c2:	42b3      	cmp	r3, r6
 80124c4:	dac8      	bge.n	8012458 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80124c6:	6823      	ldr	r3, [r4, #0]
 80124c8:	4669      	mov	r1, sp
 80124ca:	4620      	mov	r0, r4
 80124cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124ce:	4798      	blx	r3
 80124d0:	b940      	cbnz	r0, 80124e4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 80124d2:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80124d6:	2b01      	cmp	r3, #1
 80124d8:	d004      	beq.n	80124e4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 80124da:	3301      	adds	r3, #1
 80124dc:	105b      	asrs	r3, r3, #1
 80124de:	f8ad 3004 	strh.w	r3, [sp, #4]
 80124e2:	e7f0      	b.n	80124c6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb6>
 80124e4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80124e8:	f8bd 3000 	ldrh.w	r3, [sp]
 80124ec:	4413      	add	r3, r2
 80124ee:	b29b      	uxth	r3, r3
 80124f0:	441a      	add	r2, r3
 80124f2:	f8ad 3000 	strh.w	r3, [sp]
 80124f6:	b212      	sxth	r2, r2
 80124f8:	4296      	cmp	r6, r2
 80124fa:	dae0      	bge.n	80124be <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 80124fc:	1aeb      	subs	r3, r5, r3
 80124fe:	f8ad 3004 	strh.w	r3, [sp, #4]
 8012502:	e7dc      	b.n	80124be <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8012504:	2400eac8 	.word	0x2400eac8

08012508 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8012508:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801250a:	6803      	ldr	r3, [r0, #0]
 801250c:	4604      	mov	r4, r0
 801250e:	4601      	mov	r1, r0
 8012510:	4668      	mov	r0, sp
 8012512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012514:	4798      	blx	r3
 8012516:	2100      	movs	r1, #0
 8012518:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 801251c:	4668      	mov	r0, sp
 801251e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8012522:	9102      	str	r1, [sp, #8]
 8012524:	a902      	add	r1, sp, #8
 8012526:	f8ad 200c 	strh.w	r2, [sp, #12]
 801252a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801252e:	f7fe ff11 	bl	8011354 <_ZN8touchgfx4RectaNERKS0_>
 8012532:	6823      	ldr	r3, [r4, #0]
 8012534:	4669      	mov	r1, sp
 8012536:	4620      	mov	r0, r4
 8012538:	691b      	ldr	r3, [r3, #16]
 801253a:	4798      	blx	r3
 801253c:	b004      	add	sp, #16
 801253e:	bd10      	pop	{r4, pc}

08012540 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8012540:	2101      	movs	r1, #1
 8012542:	2200      	movs	r2, #0
 8012544:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8012548:	490a      	ldr	r1, [pc, #40]	; (8012574 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 801254a:	8082      	strh	r2, [r0, #4]
 801254c:	6001      	str	r1, [r0, #0]
 801254e:	21ff      	movs	r1, #255	; 0xff
 8012550:	80c2      	strh	r2, [r0, #6]
 8012552:	8102      	strh	r2, [r0, #8]
 8012554:	8142      	strh	r2, [r0, #10]
 8012556:	8182      	strh	r2, [r0, #12]
 8012558:	81c2      	strh	r2, [r0, #14]
 801255a:	8202      	strh	r2, [r0, #16]
 801255c:	8242      	strh	r2, [r0, #18]
 801255e:	61c2      	str	r2, [r0, #28]
 8012560:	8402      	strh	r2, [r0, #32]
 8012562:	8442      	strh	r2, [r0, #34]	; 0x22
 8012564:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8012568:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 801256c:	6282      	str	r2, [r0, #40]	; 0x28
 801256e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8012572:	4770      	bx	lr
 8012574:	08025840 	.word	0x08025840

08012578 <_ZN8touchgfx17AbstractDataGraph9setScaleXEib>:
 8012578:	6301      	str	r1, [r0, #48]	; 0x30
 801257a:	4770      	bx	lr

0801257c <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>:
 801257c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801257e:	4770      	bx	lr

08012580 <_ZN8touchgfx17AbstractDataGraph9setScaleYEib>:
 8012580:	6341      	str	r1, [r0, #52]	; 0x34
 8012582:	4770      	bx	lr

08012584 <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>:
 8012584:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8012586:	4770      	bx	lr

08012588 <_ZN8touchgfx16DynamicDataGraph14beforeAddValueEv>:
 8012588:	4770      	bx	lr

0801258a <_ZNK8touchgfx16DynamicDataGraph9dataIndexEs>:
 801258a:	4608      	mov	r0, r1
 801258c:	4770      	bx	lr

0801258e <_ZNK8touchgfx16DynamicDataGraph18indexToGlobalIndexEs>:
 801258e:	4608      	mov	r0, r1
 8012590:	4770      	bx	lr

08012592 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE>:
 8012592:	b530      	push	{r4, r5, lr}
 8012594:	460d      	mov	r5, r1
 8012596:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8012598:	8949      	ldrh	r1, [r1, #10]
 801259a:	b085      	sub	sp, #20
 801259c:	4604      	mov	r4, r0
 801259e:	1ac9      	subs	r1, r1, r3
 80125a0:	6803      	ldr	r3, [r0, #0]
 80125a2:	f10d 0206 	add.w	r2, sp, #6
 80125a6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80125aa:	b209      	sxth	r1, r1
 80125ac:	4798      	blx	r3
 80125ae:	b1a0      	cbz	r0, 80125da <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 80125b0:	792b      	ldrb	r3, [r5, #4]
 80125b2:	b993      	cbnz	r3, 80125da <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 80125b4:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 80125b8:	b178      	cbz	r0, 80125da <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 80125ba:	6803      	ldr	r3, [r0, #0]
 80125bc:	68db      	ldr	r3, [r3, #12]
 80125be:	4798      	blx	r3
 80125c0:	b158      	cbz	r0, 80125da <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 80125c2:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80125c6:	aa02      	add	r2, sp, #8
 80125c8:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 80125cc:	4621      	mov	r1, r4
 80125ce:	f8ad 3008 	strh.w	r3, [sp, #8]
 80125d2:	9503      	str	r5, [sp, #12]
 80125d4:	6803      	ldr	r3, [r0, #0]
 80125d6:	689b      	ldr	r3, [r3, #8]
 80125d8:	4798      	blx	r3
 80125da:	b005      	add	sp, #20
 80125dc:	bd30      	pop	{r4, r5, pc}

080125de <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii>:
 80125de:	428a      	cmp	r2, r1
 80125e0:	bfbc      	itt	lt
 80125e2:	460b      	movlt	r3, r1
 80125e4:	4611      	movlt	r1, r2
 80125e6:	b510      	push	{r4, lr}
 80125e8:	bfb8      	it	lt
 80125ea:	461a      	movlt	r2, r3
 80125ec:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 80125f0:	4604      	mov	r4, r0
 80125f2:	428b      	cmp	r3, r1
 80125f4:	d103      	bne.n	80125fe <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x20>
 80125f6:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 80125fa:	4293      	cmp	r3, r2
 80125fc:	d011      	beq.n	8012622 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x44>
 80125fe:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
 8012602:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8012606:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
 801260a:	f005 fdda 	bl	80181c2 <_ZNK8touchgfx8Drawable10invalidateEv>
 801260e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8012612:	f005 fdd6 	bl	80181c2 <_ZNK8touchgfx8Drawable10invalidateEv>
 8012616:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 801261a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801261e:	f005 bdd0 	b.w	80181c2 <_ZNK8touchgfx8Drawable10invalidateEv>
 8012622:	bd10      	pop	{r4, pc}

08012624 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>:
 8012624:	428a      	cmp	r2, r1
 8012626:	bfbc      	itt	lt
 8012628:	460b      	movlt	r3, r1
 801262a:	4611      	movlt	r1, r2
 801262c:	b510      	push	{r4, lr}
 801262e:	bfb8      	it	lt
 8012630:	461a      	movlt	r2, r3
 8012632:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 8012636:	4604      	mov	r4, r0
 8012638:	428b      	cmp	r3, r1
 801263a:	d103      	bne.n	8012644 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x20>
 801263c:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
 8012640:	4293      	cmp	r3, r2
 8012642:	d011      	beq.n	8012668 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x44>
 8012644:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
 8012648:	f104 0064 	add.w	r0, r4, #100	; 0x64
 801264c:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
 8012650:	f005 fdb7 	bl	80181c2 <_ZNK8touchgfx8Drawable10invalidateEv>
 8012654:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8012658:	f005 fdb3 	bl	80181c2 <_ZNK8touchgfx8Drawable10invalidateEv>
 801265c:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8012660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012664:	f005 bdad 	b.w	80181c2 <_ZNK8touchgfx8Drawable10invalidateEv>
 8012668:	bd10      	pop	{r4, pc}

0801266a <_ZN8touchgfx17AbstractDataGraph5clearEv>:
 801266a:	2300      	movs	r3, #0
 801266c:	3038      	adds	r0, #56	; 0x38
 801266e:	f8a0 30e6 	strh.w	r3, [r0, #230]	; 0xe6
 8012672:	f005 bda6 	b.w	80181c2 <_ZNK8touchgfx8Drawable10invalidateEv>

08012676 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi>:
 8012676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801267a:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 801267e:	4605      	mov	r5, r0
 8012680:	4688      	mov	r8, r1
 8012682:	4617      	mov	r7, r2
 8012684:	2b00      	cmp	r3, #0
 8012686:	d03e      	beq.n	8012706 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
 8012688:	6803      	ldr	r3, [r0, #0]
 801268a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801268e:	4798      	blx	r3
 8012690:	682b      	ldr	r3, [r5, #0]
 8012692:	4604      	mov	r4, r0
 8012694:	4628      	mov	r0, r5
 8012696:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 801269a:	4798      	blx	r3
 801269c:	4284      	cmp	r4, r0
 801269e:	f9b5 611e 	ldrsh.w	r6, [r5, #286]	; 0x11e
 80126a2:	bfc2      	ittt	gt
 80126a4:	4623      	movgt	r3, r4
 80126a6:	4604      	movgt	r4, r0
 80126a8:	4618      	movgt	r0, r3
 80126aa:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 80126ae:	42b3      	cmp	r3, r6
 80126b0:	da29      	bge.n	8012706 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
 80126b2:	42b0      	cmp	r0, r6
 80126b4:	bfa8      	it	ge
 80126b6:	4630      	movge	r0, r6
 80126b8:	2800      	cmp	r0, #0
 80126ba:	db24      	blt.n	8012706 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
 80126bc:	f1b8 0f00 	cmp.w	r8, #0
 80126c0:	d11e      	bne.n	8012700 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8a>
 80126c2:	f8d5 2144 	ldr.w	r2, [r5, #324]	; 0x144
 80126c6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80126ca:	460c      	mov	r4, r1
 80126cc:	009a      	lsls	r2, r3, #2
 80126ce:	4298      	cmp	r0, r3
 80126d0:	dd0b      	ble.n	80126ea <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x74>
 80126d2:	f8d5 6144 	ldr.w	r6, [r5, #324]	; 0x144
 80126d6:	3301      	adds	r3, #1
 80126d8:	58b6      	ldr	r6, [r6, r2]
 80126da:	3204      	adds	r2, #4
 80126dc:	42b1      	cmp	r1, r6
 80126de:	bfa8      	it	ge
 80126e0:	4631      	movge	r1, r6
 80126e2:	42b4      	cmp	r4, r6
 80126e4:	bfb8      	it	lt
 80126e6:	4634      	movlt	r4, r6
 80126e8:	e7f1      	b.n	80126ce <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x58>
 80126ea:	1bc9      	subs	r1, r1, r7
 80126ec:	193a      	adds	r2, r7, r4
 80126ee:	4291      	cmp	r1, r2
 80126f0:	d009      	beq.n	8012706 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
 80126f2:	682b      	ldr	r3, [r5, #0]
 80126f4:	4628      	mov	r0, r5
 80126f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80126fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80126fe:	4718      	bx	r3
 8012700:	427c      	negs	r4, r7
 8012702:	4639      	mov	r1, r7
 8012704:	e7e2      	b.n	80126cc <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
 8012706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801270a <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE>:
 801270a:	b530      	push	{r4, r5, lr}
 801270c:	790b      	ldrb	r3, [r1, #4]
 801270e:	b085      	sub	sp, #20
 8012710:	4604      	mov	r4, r0
 8012712:	460d      	mov	r5, r1
 8012714:	2b02      	cmp	r3, #2
 8012716:	d020      	beq.n	801275a <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8012718:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 801271a:	f10d 0206 	add.w	r2, sp, #6
 801271e:	88c9      	ldrh	r1, [r1, #6]
 8012720:	1ac9      	subs	r1, r1, r3
 8012722:	6803      	ldr	r3, [r0, #0]
 8012724:	b209      	sxth	r1, r1
 8012726:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 801272a:	4798      	blx	r3
 801272c:	b1a8      	cbz	r0, 801275a <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 801272e:	792b      	ldrb	r3, [r5, #4]
 8012730:	2b01      	cmp	r3, #1
 8012732:	d812      	bhi.n	801275a <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8012734:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 8012738:	b178      	cbz	r0, 801275a <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 801273a:	6803      	ldr	r3, [r0, #0]
 801273c:	68db      	ldr	r3, [r3, #12]
 801273e:	4798      	blx	r3
 8012740:	b158      	cbz	r0, 801275a <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8012742:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8012746:	aa02      	add	r2, sp, #8
 8012748:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 801274c:	4621      	mov	r1, r4
 801274e:	f8ad 3008 	strh.w	r3, [sp, #8]
 8012752:	9503      	str	r5, [sp, #12]
 8012754:	6803      	ldr	r3, [r0, #0]
 8012756:	689b      	ldr	r3, [r3, #8]
 8012758:	4798      	blx	r3
 801275a:	b005      	add	sp, #20
 801275c:	bd30      	pop	{r4, r5, pc}

0801275e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_>:
 801275e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012762:	4604      	mov	r4, r0
 8012764:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 8012768:	4690      	mov	r8, r2
 801276a:	461f      	mov	r7, r3
 801276c:	9e06      	ldr	r6, [sp, #24]
 801276e:	b928      	cbnz	r0, 801277c <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1e>
 8012770:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012774:	8033      	strh	r3, [r6, #0]
 8012776:	803b      	strh	r3, [r7, #0]
 8012778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801277c:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 8012780:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	; 0x116
 8012784:	1883      	adds	r3, r0, r2
 8012786:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 801278a:	1ad2      	subs	r2, r2, r3
 801278c:	b212      	sxth	r2, r2
 801278e:	2a01      	cmp	r2, #1
 8012790:	dc07      	bgt.n	80127a2 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x44>
 8012792:	2300      	movs	r3, #0
 8012794:	803b      	strh	r3, [r7, #0]
 8012796:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 801279a:	3b01      	subs	r3, #1
 801279c:	8033      	strh	r3, [r6, #0]
 801279e:	2001      	movs	r0, #1
 80127a0:	e7ea      	b.n	8012778 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 80127a2:	1a08      	subs	r0, r1, r0
 80127a4:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 80127a8:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 80127ac:	0140      	lsls	r0, r0, #5
 80127ae:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80127b0:	1a5b      	subs	r3, r3, r1
 80127b2:	d459      	bmi.n	8012868 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x10a>
 80127b4:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80127b8:	fb93 f1f5 	sdiv	r1, r3, r5
 80127bc:	2302      	movs	r3, #2
 80127be:	fb91 f1f3 	sdiv	r1, r1, r3
 80127c2:	3a01      	subs	r2, #1
 80127c4:	f005 fec4 	bl	8018550 <_ZN8touchgfx6muldivElll>
 80127c8:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 80127cc:	f8d4 c030 	ldr.w	ip, [r4, #48]	; 0x30
 80127d0:	2900      	cmp	r1, #0
 80127d2:	db55      	blt.n	8012880 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x122>
 80127d4:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
 80127d8:	2502      	movs	r5, #2
 80127da:	fb93 f3fc 	sdiv	r3, r3, ip
 80127de:	fb93 f3f5 	sdiv	r3, r3, r5
 80127e2:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 80127e6:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
 80127ea:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
 80127ee:	1a52      	subs	r2, r2, r1
 80127f0:	eba8 0003 	sub.w	r0, r8, r3
 80127f4:	ea4f 1040 	mov.w	r0, r0, lsl #5
 80127f8:	d44e      	bmi.n	8012898 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x13a>
 80127fa:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80127fe:	fb92 f1fc 	sdiv	r1, r2, ip
 8012802:	2202      	movs	r2, #2
 8012804:	fb91 f1f2 	sdiv	r1, r1, r2
 8012808:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 801280c:	4413      	add	r3, r2
 801280e:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 8012812:	1ad2      	subs	r2, r2, r3
 8012814:	b212      	sxth	r2, r2
 8012816:	3a01      	subs	r2, #1
 8012818:	f005 fe9a 	bl	8018550 <_ZN8touchgfx6muldivElll>
 801281c:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 8012820:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8012822:	2b00      	cmp	r3, #0
 8012824:	db44      	blt.n	80128b0 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x152>
 8012826:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801282a:	fb93 f3f2 	sdiv	r3, r3, r2
 801282e:	2202      	movs	r2, #2
 8012830:	fb93 f3f2 	sdiv	r3, r3, r2
 8012834:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8012838:	2020      	movs	r0, #32
 801283a:	429d      	cmp	r5, r3
 801283c:	bfde      	ittt	le
 801283e:	461a      	movle	r2, r3
 8012840:	462b      	movle	r3, r5
 8012842:	4615      	movle	r5, r2
 8012844:	b21b      	sxth	r3, r3
 8012846:	2d00      	cmp	r5, #0
 8012848:	bfaa      	itet	ge
 801284a:	351f      	addge	r5, #31
 801284c:	fb95 f5f0 	sdivlt	r5, r5, r0
 8012850:	116d      	asrge	r5, r5, #5
 8012852:	fb93 f3f0 	sdiv	r3, r3, r0
 8012856:	b22d      	sxth	r5, r5
 8012858:	803b      	strh	r3, [r7, #0]
 801285a:	2d00      	cmp	r5, #0
 801285c:	8035      	strh	r5, [r6, #0]
 801285e:	da33      	bge.n	80128c8 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x16a>
 8012860:	2000      	movs	r0, #0
 8012862:	8030      	strh	r0, [r6, #0]
 8012864:	8038      	strh	r0, [r7, #0]
 8012866:	e787      	b.n	8012778 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8012868:	f06f 0101 	mvn.w	r1, #1
 801286c:	fb01 5303 	mla	r3, r1, r3, r5
 8012870:	1e59      	subs	r1, r3, #1
 8012872:	2302      	movs	r3, #2
 8012874:	fb91 f1f5 	sdiv	r1, r1, r5
 8012878:	fb91 f1f3 	sdiv	r1, r1, r3
 801287c:	4249      	negs	r1, r1
 801287e:	e7a0      	b.n	80127c2 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x64>
 8012880:	f06f 0301 	mvn.w	r3, #1
 8012884:	2502      	movs	r5, #2
 8012886:	fb03 c301 	mla	r3, r3, r1, ip
 801288a:	3b01      	subs	r3, #1
 801288c:	fb93 f3fc 	sdiv	r3, r3, ip
 8012890:	fb93 f3f5 	sdiv	r3, r3, r5
 8012894:	425b      	negs	r3, r3
 8012896:	e7a4      	b.n	80127e2 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x84>
 8012898:	f06f 0101 	mvn.w	r1, #1
 801289c:	fb01 c202 	mla	r2, r1, r2, ip
 80128a0:	1e51      	subs	r1, r2, #1
 80128a2:	2202      	movs	r2, #2
 80128a4:	fb91 f1fc 	sdiv	r1, r1, ip
 80128a8:	fb91 f1f2 	sdiv	r1, r1, r2
 80128ac:	4249      	negs	r1, r1
 80128ae:	e7ab      	b.n	8012808 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xaa>
 80128b0:	f06f 0101 	mvn.w	r1, #1
 80128b4:	fb01 2303 	mla	r3, r1, r3, r2
 80128b8:	3b01      	subs	r3, #1
 80128ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80128be:	2202      	movs	r2, #2
 80128c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80128c4:	425b      	negs	r3, r3
 80128c6:	e7b5      	b.n	8012834 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xd6>
 80128c8:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 80128cc:	f9b7 2000 	ldrsh.w	r2, [r7]
 80128d0:	4293      	cmp	r3, r2
 80128d2:	dc05      	bgt.n	80128e0 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x182>
 80128d4:	3b01      	subs	r3, #1
 80128d6:	2000      	movs	r0, #0
 80128d8:	b21b      	sxth	r3, r3
 80128da:	8033      	strh	r3, [r6, #0]
 80128dc:	803b      	strh	r3, [r7, #0]
 80128de:	e74b      	b.n	8012778 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 80128e0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80128e4:	803a      	strh	r2, [r7, #0]
 80128e6:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 80128ea:	f9b6 2000 	ldrsh.w	r2, [r6]
 80128ee:	4293      	cmp	r3, r2
 80128f0:	bfdc      	itt	le
 80128f2:	f103 33ff 	addle.w	r3, r3, #4294967295
 80128f6:	b21a      	sxthle	r2, r3
 80128f8:	8032      	strh	r2, [r6, #0]
 80128fa:	e750      	b.n	801279e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x40>

080128fc <_ZN8touchgfx9ContainerC1Ev>:
 80128fc:	2101      	movs	r1, #1
 80128fe:	2200      	movs	r2, #0
 8012900:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8012904:	4909      	ldr	r1, [pc, #36]	; (801292c <_ZN8touchgfx9ContainerC1Ev+0x30>)
 8012906:	8082      	strh	r2, [r0, #4]
 8012908:	80c2      	strh	r2, [r0, #6]
 801290a:	8102      	strh	r2, [r0, #8]
 801290c:	8142      	strh	r2, [r0, #10]
 801290e:	8182      	strh	r2, [r0, #12]
 8012910:	81c2      	strh	r2, [r0, #14]
 8012912:	8202      	strh	r2, [r0, #16]
 8012914:	8242      	strh	r2, [r0, #18]
 8012916:	61c2      	str	r2, [r0, #28]
 8012918:	8402      	strh	r2, [r0, #32]
 801291a:	8442      	strh	r2, [r0, #34]	; 0x22
 801291c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8012920:	6001      	str	r1, [r0, #0]
 8012922:	6282      	str	r2, [r0, #40]	; 0x28
 8012924:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8012928:	4770      	bx	lr
 801292a:	bf00      	nop
 801292c:	08025748 	.word	0x08025748

08012930 <_ZNK8touchgfx7CWRUtil2Q55roundEv>:
 8012930:	6800      	ldr	r0, [r0, #0]
 8012932:	2800      	cmp	r0, #0
 8012934:	bfbd      	ittte	lt
 8012936:	380f      	sublt	r0, #15
 8012938:	2320      	movlt	r3, #32
 801293a:	fb90 f0f3 	sdivlt	r0, r0, r3
 801293e:	3010      	addge	r0, #16
 8012940:	bfa8      	it	ge
 8012942:	1140      	asrge	r0, r0, #5
 8012944:	4770      	bx	lr

08012946 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs>:
 8012946:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801294a:	4605      	mov	r5, r0
 801294c:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 8012950:	4688      	mov	r8, r1
 8012952:	4691      	mov	r9, r2
 8012954:	469a      	mov	sl, r3
 8012956:	b360      	cbz	r0, 80129b2 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6c>
 8012958:	2700      	movs	r7, #0
 801295a:	f04f 3bff 	mov.w	fp, #4294967295
 801295e:	b23e      	sxth	r6, r7
 8012960:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	; 0x11e
 8012964:	42b3      	cmp	r3, r6
 8012966:	dd23      	ble.n	80129b0 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6a>
 8012968:	682b      	ldr	r3, [r5, #0]
 801296a:	4631      	mov	r1, r6
 801296c:	4628      	mov	r0, r5
 801296e:	3701      	adds	r7, #1
 8012970:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8012974:	4798      	blx	r3
 8012976:	9001      	str	r0, [sp, #4]
 8012978:	a801      	add	r0, sp, #4
 801297a:	f7ff ffd9 	bl	8012930 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801297e:	682b      	ldr	r3, [r5, #0]
 8012980:	eba0 0008 	sub.w	r0, r0, r8
 8012984:	4631      	mov	r1, r6
 8012986:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 801298a:	b204      	sxth	r4, r0
 801298c:	4628      	mov	r0, r5
 801298e:	4798      	blx	r3
 8012990:	9001      	str	r0, [sp, #4]
 8012992:	a801      	add	r0, sp, #4
 8012994:	f7ff ffcc 	bl	8012930 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012998:	eba0 0009 	sub.w	r0, r0, r9
 801299c:	fb10 f000 	smulbb	r0, r0, r0
 80129a0:	fb04 0404 	mla	r4, r4, r4, r0
 80129a4:	455c      	cmp	r4, fp
 80129a6:	bf3c      	itt	cc
 80129a8:	f8aa 6000 	strhcc.w	r6, [sl]
 80129ac:	46a3      	movcc	fp, r4
 80129ae:	e7d6      	b.n	801295e <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x18>
 80129b0:	2001      	movs	r0, #1
 80129b2:	b003      	add	sp, #12
 80129b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080129b8 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs>:
 80129b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80129bc:	4604      	mov	r4, r0
 80129be:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 80129c2:	4688      	mov	r8, r1
 80129c4:	4691      	mov	r9, r2
 80129c6:	b1f8      	cbz	r0, 8012a08 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x50>
 80129c8:	2500      	movs	r5, #0
 80129ca:	f04f 37ff 	mov.w	r7, #4294967295
 80129ce:	b22e      	sxth	r6, r5
 80129d0:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 80129d4:	42b3      	cmp	r3, r6
 80129d6:	dd16      	ble.n	8012a06 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x4e>
 80129d8:	6823      	ldr	r3, [r4, #0]
 80129da:	4631      	mov	r1, r6
 80129dc:	4620      	mov	r0, r4
 80129de:	3501      	adds	r5, #1
 80129e0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80129e4:	4798      	blx	r3
 80129e6:	9001      	str	r0, [sp, #4]
 80129e8:	a801      	add	r0, sp, #4
 80129ea:	f7ff ffa1 	bl	8012930 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80129ee:	b200      	sxth	r0, r0
 80129f0:	eba0 0008 	sub.w	r0, r0, r8
 80129f4:	2800      	cmp	r0, #0
 80129f6:	bfb8      	it	lt
 80129f8:	4240      	neglt	r0, r0
 80129fa:	42b8      	cmp	r0, r7
 80129fc:	bf3c      	itt	cc
 80129fe:	f8a9 6000 	strhcc.w	r6, [r9]
 8012a02:	4607      	movcc	r7, r0
 8012a04:	e7e3      	b.n	80129ce <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x16>
 8012a06:	2001      	movs	r0, #1
 8012a08:	b003      	add	sp, #12
 8012a0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08012a0e <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>:
 8012a0e:	f8a0 3118 	strh.w	r3, [r0, #280]	; 0x118
 8012a12:	f9bd 3000 	ldrsh.w	r3, [sp]
 8012a16:	f8a0 1114 	strh.w	r1, [r0, #276]	; 0x114
 8012a1a:	f8a0 2116 	strh.w	r2, [r0, #278]	; 0x116
 8012a1e:	f8a0 311a 	strh.w	r3, [r0, #282]	; 0x11a
 8012a22:	4770      	bx	lr

08012a24 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>:
 8012a24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012a26:	4604      	mov	r4, r0
 8012a28:	3038      	adds	r0, #56	; 0x38
 8012a2a:	460d      	mov	r5, r1
 8012a2c:	f7fe fb0e 	bl	801104c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012a30:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 8012a34:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8012a38:	4628      	mov	r0, r5
 8012a3a:	9200      	str	r2, [sp, #0]
 8012a3c:	2200      	movs	r2, #0
 8012a3e:	4611      	mov	r1, r2
 8012a40:	f7f0 fcc4 	bl	80033cc <_ZN8touchgfx8Drawable11setPositionEssss>
 8012a44:	b003      	add	sp, #12
 8012a46:	bd30      	pop	{r4, r5, pc}

08012a48 <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>:
 8012a48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012a4a:	4604      	mov	r4, r0
 8012a4c:	3064      	adds	r0, #100	; 0x64
 8012a4e:	460d      	mov	r5, r1
 8012a50:	f7fe fafc 	bl	801104c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012a54:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	; 0x6e
 8012a58:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
 8012a5c:	4628      	mov	r0, r5
 8012a5e:	9200      	str	r2, [sp, #0]
 8012a60:	2200      	movs	r2, #0
 8012a62:	4611      	mov	r1, r2
 8012a64:	f7f0 fcb2 	bl	80033cc <_ZN8touchgfx8Drawable11setPositionEssss>
 8012a68:	b003      	add	sp, #12
 8012a6a:	bd30      	pop	{r4, r5, pc}

08012a6c <_ZN8touchgfx17AbstractDataGraph16addBottomElementERNS_23AbstractGraphDecorationE>:
 8012a6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012a6e:	4604      	mov	r4, r0
 8012a70:	30e8      	adds	r0, #232	; 0xe8
 8012a72:	460d      	mov	r5, r1
 8012a74:	f7fe faea 	bl	801104c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012a78:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	; 0xf2
 8012a7c:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	; 0xf0
 8012a80:	4628      	mov	r0, r5
 8012a82:	9200      	str	r2, [sp, #0]
 8012a84:	2200      	movs	r2, #0
 8012a86:	4611      	mov	r1, r2
 8012a88:	f7f0 fca0 	bl	80033cc <_ZN8touchgfx8Drawable11setPositionEssss>
 8012a8c:	b003      	add	sp, #12
 8012a8e:	bd30      	pop	{r4, r5, pc}

08012a90 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>:
 8012a90:	b538      	push	{r3, r4, r5, lr}
 8012a92:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 8012a96:	460d      	mov	r5, r1
 8012a98:	428b      	cmp	r3, r1
 8012a9a:	dd08      	ble.n	8012aae <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 8012a9c:	6e04      	ldr	r4, [r0, #96]	; 0x60
 8012a9e:	b134      	cbz	r4, 8012aae <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 8012aa0:	6823      	ldr	r3, [r4, #0]
 8012aa2:	4620      	mov	r0, r4
 8012aa4:	4629      	mov	r1, r5
 8012aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012aa8:	4798      	blx	r3
 8012aaa:	69a4      	ldr	r4, [r4, #24]
 8012aac:	e7f7      	b.n	8012a9e <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0xe>
 8012aae:	bd38      	pop	{r3, r4, r5, pc}

08012ab0 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>:
 8012ab0:	b570      	push	{r4, r5, r6, lr}
 8012ab2:	4606      	mov	r6, r0
 8012ab4:	460d      	mov	r5, r1
 8012ab6:	f8d0 40e4 	ldr.w	r4, [r0, #228]	; 0xe4
 8012aba:	b134      	cbz	r4, 8012aca <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1a>
 8012abc:	6823      	ldr	r3, [r4, #0]
 8012abe:	4620      	mov	r0, r4
 8012ac0:	4629      	mov	r1, r5
 8012ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ac4:	4798      	blx	r3
 8012ac6:	69a4      	ldr	r4, [r4, #24]
 8012ac8:	e7f7      	b.n	8012aba <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0xa>
 8012aca:	f8d6 4110 	ldr.w	r4, [r6, #272]	; 0x110
 8012ace:	b134      	cbz	r4, 8012ade <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x2e>
 8012ad0:	6823      	ldr	r3, [r4, #0]
 8012ad2:	4620      	mov	r0, r4
 8012ad4:	4629      	mov	r1, r5
 8012ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ad8:	4798      	blx	r3
 8012ada:	69a4      	ldr	r4, [r4, #24]
 8012adc:	e7f7      	b.n	8012ace <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1e>
 8012ade:	bd70      	pop	{r4, r5, r6, pc}

08012ae0 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>:
 8012ae0:	b538      	push	{r3, r4, r5, lr}
 8012ae2:	4604      	mov	r4, r0
 8012ae4:	2500      	movs	r5, #0
 8012ae6:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8012aea:	42ab      	cmp	r3, r5
 8012aec:	db05      	blt.n	8012afa <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x1a>
 8012aee:	b229      	sxth	r1, r5
 8012af0:	4620      	mov	r0, r4
 8012af2:	f7ff ffdd 	bl	8012ab0 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 8012af6:	3501      	adds	r5, #1
 8012af8:	e7f5      	b.n	8012ae6 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x6>
 8012afa:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8012afe:	f005 fb60 	bl	80181c2 <_ZNK8touchgfx8Drawable10invalidateEv>
 8012b02:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8012b06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b0a:	f005 bb5a 	b.w	80181c2 <_ZNK8touchgfx8Drawable10invalidateEv>

08012b0e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>:
 8012b0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012b10:	4604      	mov	r4, r0
 8012b12:	6e05      	ldr	r5, [r0, #96]	; 0x60
 8012b14:	b15d      	cbz	r5, 8012b2e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x20>
 8012b16:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 8012b1a:	4628      	mov	r0, r5
 8012b1c:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8012b20:	9200      	str	r2, [sp, #0]
 8012b22:	2200      	movs	r2, #0
 8012b24:	4611      	mov	r1, r2
 8012b26:	f7f0 fc51 	bl	80033cc <_ZN8touchgfx8Drawable11setPositionEssss>
 8012b2a:	69ad      	ldr	r5, [r5, #24]
 8012b2c:	e7f2      	b.n	8012b14 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x6>
 8012b2e:	f8d4 50e4 	ldr.w	r5, [r4, #228]	; 0xe4
 8012b32:	b15d      	cbz	r5, 8012b4c <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x3e>
 8012b34:	f9b4 20c6 	ldrsh.w	r2, [r4, #198]	; 0xc6
 8012b38:	4628      	mov	r0, r5
 8012b3a:	f9b4 30c4 	ldrsh.w	r3, [r4, #196]	; 0xc4
 8012b3e:	9200      	str	r2, [sp, #0]
 8012b40:	2200      	movs	r2, #0
 8012b42:	4611      	mov	r1, r2
 8012b44:	f7f0 fc42 	bl	80033cc <_ZN8touchgfx8Drawable11setPositionEssss>
 8012b48:	69ad      	ldr	r5, [r5, #24]
 8012b4a:	e7f2      	b.n	8012b32 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x24>
 8012b4c:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
 8012b50:	b15d      	cbz	r5, 8012b6a <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x5c>
 8012b52:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	; 0x6e
 8012b56:	4628      	mov	r0, r5
 8012b58:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
 8012b5c:	9200      	str	r2, [sp, #0]
 8012b5e:	2200      	movs	r2, #0
 8012b60:	4611      	mov	r1, r2
 8012b62:	f7f0 fc33 	bl	80033cc <_ZN8touchgfx8Drawable11setPositionEssss>
 8012b66:	69ad      	ldr	r5, [r5, #24]
 8012b68:	e7f2      	b.n	8012b50 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x42>
 8012b6a:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 8012b6e:	b15d      	cbz	r5, 8012b88 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7a>
 8012b70:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
 8012b74:	4628      	mov	r0, r5
 8012b76:	f9b4 3098 	ldrsh.w	r3, [r4, #152]	; 0x98
 8012b7a:	9200      	str	r2, [sp, #0]
 8012b7c:	2200      	movs	r2, #0
 8012b7e:	4611      	mov	r1, r2
 8012b80:	f7f0 fc24 	bl	80033cc <_ZN8touchgfx8Drawable11setPositionEssss>
 8012b84:	69ad      	ldr	r5, [r5, #24]
 8012b86:	e7f2      	b.n	8012b6e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x60>
 8012b88:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
 8012b8c:	b15d      	cbz	r5, 8012ba6 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x98>
 8012b8e:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	; 0xf2
 8012b92:	4628      	mov	r0, r5
 8012b94:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	; 0xf0
 8012b98:	9200      	str	r2, [sp, #0]
 8012b9a:	2200      	movs	r2, #0
 8012b9c:	4611      	mov	r1, r2
 8012b9e:	f7f0 fc15 	bl	80033cc <_ZN8touchgfx8Drawable11setPositionEssss>
 8012ba2:	69ad      	ldr	r5, [r5, #24]
 8012ba4:	e7f2      	b.n	8012b8c <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7e>
 8012ba6:	6823      	ldr	r3, [r4, #0]
 8012ba8:	4620      	mov	r0, r4
 8012baa:	695b      	ldr	r3, [r3, #20]
 8012bac:	b003      	add	sp, #12
 8012bae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012bb2:	4718      	bx	r3

08012bb4 <_ZN8touchgfx17AbstractDataGraph8setWidthEs>:
 8012bb4:	b430      	push	{r4, r5}
 8012bb6:	b28a      	uxth	r2, r1
 8012bb8:	f8b0 4098 	ldrh.w	r4, [r0, #152]	; 0x98
 8012bbc:	f8a0 10c4 	strh.w	r1, [r0, #196]	; 0xc4
 8012bc0:	1b15      	subs	r5, r2, r4
 8012bc2:	f8a0 10f0 	strh.w	r1, [r0, #240]	; 0xf0
 8012bc6:	8101      	strh	r1, [r0, #8]
 8012bc8:	f8a0 5094 	strh.w	r5, [r0, #148]	; 0x94
 8012bcc:	f8b0 506c 	ldrh.w	r5, [r0, #108]	; 0x6c
 8012bd0:	442c      	add	r4, r5
 8012bd2:	1b12      	subs	r2, r2, r4
 8012bd4:	bc30      	pop	{r4, r5}
 8012bd6:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8012bda:	f7ff bf98 	b.w	8012b0e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08012bde <_ZN8touchgfx17AbstractDataGraph9setHeightEs>:
 8012bde:	b430      	push	{r4, r5}
 8012be0:	b28a      	uxth	r2, r1
 8012be2:	f8b0 40f2 	ldrh.w	r4, [r0, #242]	; 0xf2
 8012be6:	f8a0 106e 	strh.w	r1, [r0, #110]	; 0x6e
 8012bea:	1b15      	subs	r5, r2, r4
 8012bec:	f8a0 109a 	strh.w	r1, [r0, #154]	; 0x9a
 8012bf0:	8141      	strh	r1, [r0, #10]
 8012bf2:	f8a0 50ee 	strh.w	r5, [r0, #238]	; 0xee
 8012bf6:	f8b0 50c6 	ldrh.w	r5, [r0, #198]	; 0xc6
 8012bfa:	442c      	add	r4, r5
 8012bfc:	1b12      	subs	r2, r2, r4
 8012bfe:	bc30      	pop	{r4, r5}
 8012c00:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
 8012c04:	f7ff bf83 	b.w	8012b0e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08012c08 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>:
 8012c08:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8012c0c:	fa1f fa83 	uxth.w	sl, r3
 8012c10:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 8012c14:	4615      	mov	r5, r2
 8012c16:	4699      	mov	r9, r3
 8012c18:	fa1f f887 	uxth.w	r8, r7
 8012c1c:	8903      	ldrh	r3, [r0, #8]
 8012c1e:	4452      	add	r2, sl
 8012c20:	4604      	mov	r4, r0
 8012c22:	8940      	ldrh	r0, [r0, #10]
 8012c24:	460e      	mov	r6, r1
 8012c26:	1a9b      	subs	r3, r3, r2
 8012c28:	eb08 0201 	add.w	r2, r8, r1
 8012c2c:	1a80      	subs	r0, r0, r2
 8012c2e:	b21b      	sxth	r3, r3
 8012c30:	460a      	mov	r2, r1
 8012c32:	4629      	mov	r1, r5
 8012c34:	b200      	sxth	r0, r0
 8012c36:	9000      	str	r0, [sp, #0]
 8012c38:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8012c3c:	f7f0 fbc6 	bl	80033cc <_ZN8touchgfx8Drawable11setPositionEssss>
 8012c40:	2200      	movs	r2, #0
 8012c42:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8012c46:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8012c4a:	4611      	mov	r1, r2
 8012c4c:	9600      	str	r6, [sp, #0]
 8012c4e:	f7f0 fbbd 	bl	80033cc <_ZN8touchgfx8Drawable11setPositionEssss>
 8012c52:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8012c56:	2200      	movs	r2, #0
 8012c58:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8012c5c:	9300      	str	r3, [sp, #0]
 8012c5e:	462b      	mov	r3, r5
 8012c60:	4611      	mov	r1, r2
 8012c62:	f7f0 fbb3 	bl	80033cc <_ZN8touchgfx8Drawable11setPositionEssss>
 8012c66:	8921      	ldrh	r1, [r4, #8]
 8012c68:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8012c6c:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8012c70:	eba1 010a 	sub.w	r1, r1, sl
 8012c74:	2200      	movs	r2, #0
 8012c76:	9300      	str	r3, [sp, #0]
 8012c78:	464b      	mov	r3, r9
 8012c7a:	b209      	sxth	r1, r1
 8012c7c:	f7f0 fba6 	bl	80033cc <_ZN8touchgfx8Drawable11setPositionEssss>
 8012c80:	8962      	ldrh	r2, [r4, #10]
 8012c82:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8012c86:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8012c8a:	eba2 0208 	sub.w	r2, r2, r8
 8012c8e:	9700      	str	r7, [sp, #0]
 8012c90:	2100      	movs	r1, #0
 8012c92:	b212      	sxth	r2, r2
 8012c94:	f7f0 fb9a 	bl	80033cc <_ZN8touchgfx8Drawable11setPositionEssss>
 8012c98:	4620      	mov	r0, r4
 8012c9a:	b002      	add	sp, #8
 8012c9c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ca0:	f7ff bf35 	b.w	8012b0e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08012ca4 <_ZN8touchgfx17AbstractDataGraphC1Es>:
 8012ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ca8:	b085      	sub	sp, #20
 8012caa:	4604      	mov	r4, r0
 8012cac:	2601      	movs	r6, #1
 8012cae:	2500      	movs	r5, #0
 8012cb0:	9103      	str	r1, [sp, #12]
 8012cb2:	f7ff fe23 	bl	80128fc <_ZN8touchgfx9ContainerC1Ev>
 8012cb6:	4b2c      	ldr	r3, [pc, #176]	; (8012d68 <_ZN8touchgfx17AbstractDataGraphC1Es+0xc4>)
 8012cb8:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 8012cbc:	f104 0964 	add.w	r9, r4, #100	; 0x64
 8012cc0:	f104 0890 	add.w	r8, r4, #144	; 0x90
 8012cc4:	6023      	str	r3, [r4, #0]
 8012cc6:	23ff      	movs	r3, #255	; 0xff
 8012cc8:	4658      	mov	r0, fp
 8012cca:	f104 0abc 	add.w	sl, r4, #188	; 0xbc
 8012cce:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8012cd2:	f104 07e8 	add.w	r7, r4, #232	; 0xe8
 8012cd6:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8012cda:	f7ff fe0f 	bl	80128fc <_ZN8touchgfx9ContainerC1Ev>
 8012cde:	4648      	mov	r0, r9
 8012ce0:	f7ff fe0c 	bl	80128fc <_ZN8touchgfx9ContainerC1Ev>
 8012ce4:	4640      	mov	r0, r8
 8012ce6:	f7ff fe09 	bl	80128fc <_ZN8touchgfx9ContainerC1Ev>
 8012cea:	4650      	mov	r0, sl
 8012cec:	f7ff fe06 	bl	80128fc <_ZN8touchgfx9ContainerC1Ev>
 8012cf0:	4638      	mov	r0, r7
 8012cf2:	f7ff fe03 	bl	80128fc <_ZN8touchgfx9ContainerC1Ev>
 8012cf6:	9903      	ldr	r1, [sp, #12]
 8012cf8:	4620      	mov	r0, r4
 8012cfa:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 8012cfe:	f8a4 111c 	strh.w	r1, [r4, #284]	; 0x11c
 8012d02:	4659      	mov	r1, fp
 8012d04:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
 8012d08:	f8a4 511e 	strh.w	r5, [r4, #286]	; 0x11e
 8012d0c:	f8a4 5120 	strh.w	r5, [r4, #288]	; 0x120
 8012d10:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
 8012d14:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
 8012d18:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8012d1c:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8012d20:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 8012d24:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
 8012d28:	f7fe f990 	bl	801104c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012d2c:	4651      	mov	r1, sl
 8012d2e:	4620      	mov	r0, r4
 8012d30:	f7fe f98c 	bl	801104c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012d34:	4649      	mov	r1, r9
 8012d36:	4620      	mov	r0, r4
 8012d38:	f7fe f988 	bl	801104c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012d3c:	4641      	mov	r1, r8
 8012d3e:	4620      	mov	r0, r4
 8012d40:	f7fe f984 	bl	801104c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012d44:	4639      	mov	r1, r7
 8012d46:	4620      	mov	r0, r4
 8012d48:	f7fe f980 	bl	801104c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012d4c:	4620      	mov	r0, r4
 8012d4e:	9500      	str	r5, [sp, #0]
 8012d50:	462b      	mov	r3, r5
 8012d52:	462a      	mov	r2, r5
 8012d54:	4629      	mov	r1, r5
 8012d56:	f7ff ff57 	bl	8012c08 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
 8012d5a:	4620      	mov	r0, r4
 8012d5c:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
 8012d60:	b005      	add	sp, #20
 8012d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d66:	bf00      	nop
 8012d68:	08025a50 	.word	0x08025a50

08012d6c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>:
 8012d6c:	4291      	cmp	r1, r2
 8012d6e:	4613      	mov	r3, r2
 8012d70:	d003      	beq.n	8012d7a <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii+0xe>
 8012d72:	460a      	mov	r2, r1
 8012d74:	4619      	mov	r1, r3
 8012d76:	f005 bbeb 	b.w	8018550 <_ZN8touchgfx6muldivElll>
 8012d7a:	4770      	bx	lr

08012d7c <_ZN8touchgfx16DynamicDataGraph9setScaleXEib>:
 8012d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d80:	6803      	ldr	r3, [r0, #0]
 8012d82:	460d      	mov	r5, r1
 8012d84:	4604      	mov	r4, r0
 8012d86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012d8a:	4798      	blx	r3
 8012d8c:	42a8      	cmp	r0, r5
 8012d8e:	4606      	mov	r6, r0
 8012d90:	d024      	beq.n	8012ddc <_ZN8touchgfx16DynamicDataGraph9setScaleXEib+0x60>
 8012d92:	6823      	ldr	r3, [r4, #0]
 8012d94:	4601      	mov	r1, r0
 8012d96:	462a      	mov	r2, r5
 8012d98:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 8012d9c:	f8d3 70a4 	ldr.w	r7, [r3, #164]	; 0xa4
 8012da0:	f7ff ffe4 	bl	8012d6c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8012da4:	4680      	mov	r8, r0
 8012da6:	462a      	mov	r2, r5
 8012da8:	4631      	mov	r1, r6
 8012daa:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
 8012dae:	f7ff ffdd 	bl	8012d6c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8012db2:	4641      	mov	r1, r8
 8012db4:	4602      	mov	r2, r0
 8012db6:	4620      	mov	r0, r4
 8012db8:	47b8      	blx	r7
 8012dba:	462a      	mov	r2, r5
 8012dbc:	4631      	mov	r1, r6
 8012dbe:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8012dc2:	f7ff ffd3 	bl	8012d6c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8012dc6:	462a      	mov	r2, r5
 8012dc8:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
 8012dcc:	4631      	mov	r1, r6
 8012dce:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
 8012dd2:	f7ff ffcb 	bl	8012d6c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8012dd6:	6325      	str	r5, [r4, #48]	; 0x30
 8012dd8:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
 8012ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012de0 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib>:
 8012de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012de4:	4604      	mov	r4, r0
 8012de6:	460f      	mov	r7, r1
 8012de8:	b1b2      	cbz	r2, 8012e18 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
 8012dea:	6803      	ldr	r3, [r0, #0]
 8012dec:	2600      	movs	r6, #0
 8012dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012df2:	4798      	blx	r3
 8012df4:	4681      	mov	r9, r0
 8012df6:	b235      	sxth	r5, r6
 8012df8:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8012dfc:	3601      	adds	r6, #1
 8012dfe:	42ab      	cmp	r3, r5
 8012e00:	dd0a      	ble.n	8012e18 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
 8012e02:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144
 8012e06:	463a      	mov	r2, r7
 8012e08:	4649      	mov	r1, r9
 8012e0a:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 8012e0e:	f7ff ffad 	bl	8012d6c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8012e12:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 8012e16:	e7ee      	b.n	8012df6 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x16>
 8012e18:	6367      	str	r7, [r4, #52]	; 0x34
 8012e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012e1e <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>:
 8012e1e:	b570      	push	{r4, r5, r6, lr}
 8012e20:	6803      	ldr	r3, [r0, #0]
 8012e22:	4604      	mov	r4, r0
 8012e24:	460d      	mov	r5, r1
 8012e26:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8012e2a:	4798      	blx	r3
 8012e2c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8012e30:	4629      	mov	r1, r5
 8012e32:	4620      	mov	r0, r4
 8012e34:	3301      	adds	r3, #1
 8012e36:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 8012e3a:	6823      	ldr	r3, [r4, #0]
 8012e3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e40:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8012e44:	4718      	bx	r3

08012e46 <_ZN8touchgfx16GraphElementLineD1Ev>:
 8012e46:	4770      	bx	lr

08012e48 <_ZN8touchgfx16GraphElementLineD0Ev>:
 8012e48:	b510      	push	{r4, lr}
 8012e4a:	4604      	mov	r4, r0
 8012e4c:	2130      	movs	r1, #48	; 0x30
 8012e4e:	f00f ff1a 	bl	8022c86 <_ZdlPvj>
 8012e52:	4620      	mov	r0, r4
 8012e54:	bd10      	pop	{r4, pc}

08012e56 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8012e56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e58:	4604      	mov	r4, r0
 8012e5a:	4608      	mov	r0, r1
 8012e5c:	460d      	mov	r5, r1
 8012e5e:	f7fe fabc 	bl	80113da <_ZNK8touchgfx4Rect7isEmptyEv>
 8012e62:	b978      	cbnz	r0, 8012e84 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8012e64:	4620      	mov	r0, r4
 8012e66:	f7fe fab8 	bl	80113da <_ZNK8touchgfx4Rect7isEmptyEv>
 8012e6a:	f9b5 6000 	ldrsh.w	r6, [r5]
 8012e6e:	b150      	cbz	r0, 8012e86 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8012e70:	8026      	strh	r6, [r4, #0]
 8012e72:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8012e76:	8063      	strh	r3, [r4, #2]
 8012e78:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8012e7c:	80a3      	strh	r3, [r4, #4]
 8012e7e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8012e82:	80e3      	strh	r3, [r4, #6]
 8012e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e86:	f9b4 1000 	ldrsh.w	r1, [r4]
 8012e8a:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8012e8e:	42b1      	cmp	r1, r6
 8012e90:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8012e94:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8012e98:	460f      	mov	r7, r1
 8012e9a:	88ed      	ldrh	r5, [r5, #6]
 8012e9c:	bfa8      	it	ge
 8012e9e:	4637      	movge	r7, r6
 8012ea0:	4293      	cmp	r3, r2
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	4466      	add	r6, ip
 8012ea6:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8012eaa:	bfa8      	it	ge
 8012eac:	4610      	movge	r0, r2
 8012eae:	442a      	add	r2, r5
 8012eb0:	88e5      	ldrh	r5, [r4, #6]
 8012eb2:	4461      	add	r1, ip
 8012eb4:	b236      	sxth	r6, r6
 8012eb6:	8027      	strh	r7, [r4, #0]
 8012eb8:	442b      	add	r3, r5
 8012eba:	b209      	sxth	r1, r1
 8012ebc:	b212      	sxth	r2, r2
 8012ebe:	8060      	strh	r0, [r4, #2]
 8012ec0:	b21b      	sxth	r3, r3
 8012ec2:	428e      	cmp	r6, r1
 8012ec4:	bfac      	ite	ge
 8012ec6:	ebc7 0106 	rsbge	r1, r7, r6
 8012eca:	ebc7 0101 	rsblt	r1, r7, r1
 8012ece:	429a      	cmp	r2, r3
 8012ed0:	bfac      	ite	ge
 8012ed2:	ebc0 0202 	rsbge	r2, r0, r2
 8012ed6:	ebc0 0203 	rsblt	r2, r0, r3
 8012eda:	80a1      	strh	r1, [r4, #4]
 8012edc:	80e2      	strh	r2, [r4, #6]
 8012ede:	e7d1      	b.n	8012e84 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

08012ee0 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 8012ee0:	6800      	ldr	r0, [r0, #0]
 8012ee2:	2800      	cmp	r0, #0
 8012ee4:	bfb9      	ittee	lt
 8012ee6:	2320      	movlt	r3, #32
 8012ee8:	fb90 f0f3 	sdivlt	r0, r0, r3
 8012eec:	301f      	addge	r0, #31
 8012eee:	1140      	asrge	r0, r0, #5
 8012ef0:	4770      	bx	lr

08012ef2 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE>:
 8012ef2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ef6:	6803      	ldr	r3, [r0, #0]
 8012ef8:	b093      	sub	sp, #76	; 0x4c
 8012efa:	6945      	ldr	r5, [r0, #20]
 8012efc:	4604      	mov	r4, r0
 8012efe:	460f      	mov	r7, r1
 8012f00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012f02:	2d00      	cmp	r5, #0
 8012f04:	f000 81ad 	beq.w	8013262 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x370>
 8012f08:	696d      	ldr	r5, [r5, #20]
 8012f0a:	4798      	blx	r3
 8012f0c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d077      	beq.n	8013004 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8012f14:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8012f18:	fb13 f000 	smulbb	r0, r3, r0
 8012f1c:	b283      	uxth	r3, r0
 8012f1e:	1c58      	adds	r0, r3, #1
 8012f20:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8012f24:	1200      	asrs	r0, r0, #8
 8012f26:	d06d      	beq.n	8013004 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8012f28:	b2c3      	uxtb	r3, r0
 8012f2a:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 8012f2e:	462a      	mov	r2, r5
 8012f30:	4621      	mov	r1, r4
 8012f32:	9308      	str	r3, [sp, #32]
 8012f34:	4640      	mov	r0, r8
 8012f36:	6823      	ldr	r3, [r4, #0]
 8012f38:	ae0e      	add	r6, sp, #56	; 0x38
 8012f3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012f3e:	4798      	blx	r3
 8012f40:	e898 0003 	ldmia.w	r8, {r0, r1}
 8012f44:	e886 0003 	stmia.w	r6, {r0, r1}
 8012f48:	4639      	mov	r1, r7
 8012f4a:	4630      	mov	r0, r6
 8012f4c:	f7fe fa02 	bl	8011354 <_ZN8touchgfx4RectaNERKS0_>
 8012f50:	6823      	ldr	r3, [r4, #0]
 8012f52:	4629      	mov	r1, r5
 8012f54:	4620      	mov	r0, r4
 8012f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012f5a:	4798      	blx	r3
 8012f5c:	6823      	ldr	r3, [r4, #0]
 8012f5e:	4607      	mov	r7, r0
 8012f60:	4629      	mov	r1, r5
 8012f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012f66:	4620      	mov	r0, r4
 8012f68:	4798      	blx	r3
 8012f6a:	4681      	mov	r9, r0
 8012f6c:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
 8012f70:	4629      	mov	r1, r5
 8012f72:	0103      	lsls	r3, r0, #4
 8012f74:	4620      	mov	r0, r4
 8012f76:	9309      	str	r3, [sp, #36]	; 0x24
 8012f78:	6823      	ldr	r3, [r4, #0]
 8012f7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012f7e:	4798      	blx	r3
 8012f80:	4629      	mov	r1, r5
 8012f82:	b203      	sxth	r3, r0
 8012f84:	4620      	mov	r0, r4
 8012f86:	9306      	str	r3, [sp, #24]
 8012f88:	6823      	ldr	r3, [r4, #0]
 8012f8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012f8e:	4798      	blx	r3
 8012f90:	2f00      	cmp	r7, #0
 8012f92:	b203      	sxth	r3, r0
 8012f94:	9307      	str	r3, [sp, #28]
 8012f96:	d138      	bne.n	801300a <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x118>
 8012f98:	f1b9 0f00 	cmp.w	r9, #0
 8012f9c:	d132      	bne.n	8013004 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8012f9e:	6823      	ldr	r3, [r4, #0]
 8012fa0:	464a      	mov	r2, r9
 8012fa2:	4629      	mov	r1, r5
 8012fa4:	4620      	mov	r0, r4
 8012fa6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012faa:	4798      	blx	r3
 8012fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012fae:	1ac0      	subs	r0, r0, r3
 8012fb0:	9010      	str	r0, [sp, #64]	; 0x40
 8012fb2:	4640      	mov	r0, r8
 8012fb4:	f7ff fcbc 	bl	8012930 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012fb8:	6823      	ldr	r3, [r4, #0]
 8012fba:	4607      	mov	r7, r0
 8012fbc:	4629      	mov	r1, r5
 8012fbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012fc2:	4620      	mov	r0, r4
 8012fc4:	4798      	blx	r3
 8012fc6:	1a38      	subs	r0, r7, r0
 8012fc8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8012fcc:	fa0f f880 	sxth.w	r8, r0
 8012fd0:	eb13 0f08 	cmn.w	r3, r8
 8012fd4:	d416      	bmi.n	8013004 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8012fd6:	6823      	ldr	r3, [r4, #0]
 8012fd8:	4629      	mov	r1, r5
 8012fda:	4620      	mov	r0, r4
 8012fdc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8012fe0:	4798      	blx	r3
 8012fe2:	4580      	cmp	r8, r0
 8012fe4:	da0e      	bge.n	8013004 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8012fe6:	9a08      	ldr	r2, [sp, #32]
 8012fe8:	b23f      	sxth	r7, r7
 8012fea:	6823      	ldr	r3, [r4, #0]
 8012fec:	4631      	mov	r1, r6
 8012fee:	9202      	str	r2, [sp, #8]
 8012ff0:	4620      	mov	r0, r4
 8012ff2:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8012ff6:	9700      	str	r7, [sp, #0]
 8012ff8:	9201      	str	r2, [sp, #4]
 8012ffa:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8012ffe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013002:	47a8      	blx	r5
 8013004:	b013      	add	sp, #76	; 0x4c
 8013006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801300a:	ddfb      	ble.n	8013004 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 801300c:	6823      	ldr	r3, [r4, #0]
 801300e:	4629      	mov	r1, r5
 8013010:	4620      	mov	r0, r4
 8013012:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013016:	4798      	blx	r3
 8013018:	6823      	ldr	r3, [r4, #0]
 801301a:	4683      	mov	fp, r0
 801301c:	4629      	mov	r1, r5
 801301e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013022:	4620      	mov	r0, r4
 8013024:	4798      	blx	r3
 8013026:	eba0 030b 	sub.w	r3, r0, fp
 801302a:	4680      	mov	r8, r0
 801302c:	2b00      	cmp	r3, #0
 801302e:	bfb8      	it	lt
 8013030:	425b      	neglt	r3, r3
 8013032:	fb93 f3f7 	sdiv	r3, r3, r7
 8013036:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801303a:	dce3      	bgt.n	8013004 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 801303c:	6823      	ldr	r3, [r4, #0]
 801303e:	465a      	mov	r2, fp
 8013040:	4629      	mov	r1, r5
 8013042:	4620      	mov	r0, r4
 8013044:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013048:	4798      	blx	r3
 801304a:	6823      	ldr	r3, [r4, #0]
 801304c:	4606      	mov	r6, r0
 801304e:	4642      	mov	r2, r8
 8013050:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013054:	4629      	mov	r1, r5
 8013056:	4620      	mov	r0, r4
 8013058:	4798      	blx	r3
 801305a:	42b0      	cmp	r0, r6
 801305c:	bfa2      	ittt	ge
 801305e:	4643      	movge	r3, r8
 8013060:	46d8      	movge	r8, fp
 8013062:	469b      	movge	fp, r3
 8013064:	fb98 f6f7 	sdiv	r6, r8, r7
 8013068:	fb9b f2f7 	sdiv	r2, fp, r7
 801306c:	45d8      	cmp	r8, fp
 801306e:	bfac      	ite	ge
 8013070:	f04f 33ff 	movge.w	r3, #4294967295
 8013074:	2301      	movlt	r3, #1
 8013076:	1af6      	subs	r6, r6, r3
 8013078:	441a      	add	r2, r3
 801307a:	4296      	cmp	r6, r2
 801307c:	bfac      	ite	ge
 801307e:	f04f 3aff 	movge.w	sl, #4294967295
 8013082:	f04f 0a01 	movlt.w	sl, #1
 8013086:	f1b9 0f00 	cmp.w	r9, #0
 801308a:	d13e      	bne.n	801310a <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x218>
 801308c:	fb07 fb0a 	mul.w	fp, r7, sl
 8013090:	eb0a 0802 	add.w	r8, sl, r2
 8013094:	4377      	muls	r7, r6
 8013096:	45b0      	cmp	r8, r6
 8013098:	d0b4      	beq.n	8013004 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 801309a:	6823      	ldr	r3, [r4, #0]
 801309c:	463a      	mov	r2, r7
 801309e:	4629      	mov	r1, r5
 80130a0:	4620      	mov	r0, r4
 80130a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80130a6:	4798      	blx	r3
 80130a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130aa:	1ac0      	subs	r0, r0, r3
 80130ac:	9010      	str	r0, [sp, #64]	; 0x40
 80130ae:	a810      	add	r0, sp, #64	; 0x40
 80130b0:	f7ff fc3e 	bl	8012930 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80130b4:	6823      	ldr	r3, [r4, #0]
 80130b6:	4681      	mov	r9, r0
 80130b8:	4629      	mov	r1, r5
 80130ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80130be:	4620      	mov	r0, r4
 80130c0:	4798      	blx	r3
 80130c2:	eba9 0000 	sub.w	r0, r9, r0
 80130c6:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80130ca:	b203      	sxth	r3, r0
 80130cc:	42da      	cmn	r2, r3
 80130ce:	9304      	str	r3, [sp, #16]
 80130d0:	d418      	bmi.n	8013104 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 80130d2:	6822      	ldr	r2, [r4, #0]
 80130d4:	4629      	mov	r1, r5
 80130d6:	4620      	mov	r0, r4
 80130d8:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 80130dc:	4790      	blx	r2
 80130de:	9b04      	ldr	r3, [sp, #16]
 80130e0:	4283      	cmp	r3, r0
 80130e2:	da0f      	bge.n	8013104 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 80130e4:	9b08      	ldr	r3, [sp, #32]
 80130e6:	a90e      	add	r1, sp, #56	; 0x38
 80130e8:	6822      	ldr	r2, [r4, #0]
 80130ea:	4620      	mov	r0, r4
 80130ec:	9302      	str	r3, [sp, #8]
 80130ee:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80130f2:	9301      	str	r3, [sp, #4]
 80130f4:	fa0f f389 	sxth.w	r3, r9
 80130f8:	9300      	str	r3, [sp, #0]
 80130fa:	f8d2 9088 	ldr.w	r9, [r2, #136]	; 0x88
 80130fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013102:	47c8      	blx	r9
 8013104:	4456      	add	r6, sl
 8013106:	445f      	add	r7, fp
 8013108:	e7c5      	b.n	8013096 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x1a4>
 801310a:	fb98 f8f9 	sdiv	r8, r8, r9
 801310e:	eba8 0203 	sub.w	r2, r8, r3
 8013112:	4629      	mov	r1, r5
 8013114:	4620      	mov	r0, r4
 8013116:	9204      	str	r2, [sp, #16]
 8013118:	fb9b f8f9 	sdiv	r8, fp, r9
 801311c:	4498      	add	r8, r3
 801311e:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
 8013122:	4542      	cmp	r2, r8
 8013124:	bfac      	ite	ge
 8013126:	f04f 33ff 	movge.w	r3, #4294967295
 801312a:	2301      	movlt	r3, #1
 801312c:	fb02 f209 	mul.w	r2, r2, r9
 8013130:	930a      	str	r3, [sp, #40]	; 0x28
 8013132:	6823      	ldr	r3, [r4, #0]
 8013134:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013138:	4798      	blx	r3
 801313a:	f84b 0d08 	str.w	r0, [fp, #-8]!
 801313e:	4658      	mov	r0, fp
 8013140:	f7ff fbf6 	bl	8012930 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8013144:	fb06 f207 	mul.w	r2, r6, r7
 8013148:	b203      	sxth	r3, r0
 801314a:	4629      	mov	r1, r5
 801314c:	4620      	mov	r0, r4
 801314e:	9305      	str	r3, [sp, #20]
 8013150:	6823      	ldr	r3, [r4, #0]
 8013152:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013156:	4798      	blx	r3
 8013158:	9010      	str	r0, [sp, #64]	; 0x40
 801315a:	4658      	mov	r0, fp
 801315c:	f7ff fbe8 	bl	8012930 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8013160:	fb07 f20a 	mul.w	r2, r7, sl
 8013164:	b203      	sxth	r3, r0
 8013166:	920b      	str	r2, [sp, #44]	; 0x2c
 8013168:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801316a:	4442      	add	r2, r8
 801316c:	920c      	str	r2, [sp, #48]	; 0x30
 801316e:	9a05      	ldr	r2, [sp, #20]
 8013170:	429a      	cmp	r2, r3
 8013172:	dc16      	bgt.n	80131a2 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x2b0>
 8013174:	eb06 080a 	add.w	r8, r6, sl
 8013178:	fb07 f808 	mul.w	r8, r7, r8
 801317c:	9a05      	ldr	r2, [sp, #20]
 801317e:	429a      	cmp	r2, r3
 8013180:	db54      	blt.n	801322c <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x33a>
 8013182:	6823      	ldr	r3, [r4, #0]
 8013184:	4642      	mov	r2, r8
 8013186:	4629      	mov	r1, r5
 8013188:	4620      	mov	r0, r4
 801318a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801318e:	4456      	add	r6, sl
 8013190:	4798      	blx	r3
 8013192:	9010      	str	r0, [sp, #64]	; 0x40
 8013194:	4658      	mov	r0, fp
 8013196:	f7ff fbcb 	bl	8012930 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801319a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801319c:	b203      	sxth	r3, r0
 801319e:	4490      	add	r8, r2
 80131a0:	e7ec      	b.n	801317c <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x28a>
 80131a2:	6823      	ldr	r3, [r4, #0]
 80131a4:	fb07 f206 	mul.w	r2, r7, r6
 80131a8:	4629      	mov	r1, r5
 80131aa:	4620      	mov	r0, r4
 80131ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80131b0:	4798      	blx	r3
 80131b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131b4:	1ac0      	subs	r0, r0, r3
 80131b6:	9010      	str	r0, [sp, #64]	; 0x40
 80131b8:	4658      	mov	r0, fp
 80131ba:	f7ff fbb9 	bl	8012930 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80131be:	6823      	ldr	r3, [r4, #0]
 80131c0:	4680      	mov	r8, r0
 80131c2:	4629      	mov	r1, r5
 80131c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80131c8:	4620      	mov	r0, r4
 80131ca:	4798      	blx	r3
 80131cc:	eba8 0000 	sub.w	r0, r8, r0
 80131d0:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80131d4:	b203      	sxth	r3, r0
 80131d6:	42da      	cmn	r2, r3
 80131d8:	930d      	str	r3, [sp, #52]	; 0x34
 80131da:	d418      	bmi.n	801320e <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 80131dc:	6822      	ldr	r2, [r4, #0]
 80131de:	4629      	mov	r1, r5
 80131e0:	4620      	mov	r0, r4
 80131e2:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 80131e6:	4790      	blx	r2
 80131e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80131ea:	4283      	cmp	r3, r0
 80131ec:	da0f      	bge.n	801320e <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 80131ee:	9b08      	ldr	r3, [sp, #32]
 80131f0:	a90e      	add	r1, sp, #56	; 0x38
 80131f2:	6822      	ldr	r2, [r4, #0]
 80131f4:	4620      	mov	r0, r4
 80131f6:	9302      	str	r3, [sp, #8]
 80131f8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80131fc:	9301      	str	r3, [sp, #4]
 80131fe:	fa0f f388 	sxth.w	r3, r8
 8013202:	9300      	str	r3, [sp, #0]
 8013204:	f8d2 8088 	ldr.w	r8, [r2, #136]	; 0x88
 8013208:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801320c:	47c0      	blx	r8
 801320e:	6823      	ldr	r3, [r4, #0]
 8013210:	4456      	add	r6, sl
 8013212:	4629      	mov	r1, r5
 8013214:	4620      	mov	r0, r4
 8013216:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801321a:	fb06 f207 	mul.w	r2, r6, r7
 801321e:	4798      	blx	r3
 8013220:	9010      	str	r0, [sp, #64]	; 0x40
 8013222:	4658      	mov	r0, fp
 8013224:	f7ff fb84 	bl	8012930 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8013228:	b203      	sxth	r3, r0
 801322a:	e7a0      	b.n	801316e <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 801322c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801322e:	930d      	str	r3, [sp, #52]	; 0x34
 8013230:	9b04      	ldr	r3, [sp, #16]
 8013232:	4413      	add	r3, r2
 8013234:	9304      	str	r3, [sp, #16]
 8013236:	9a04      	ldr	r2, [sp, #16]
 8013238:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801323a:	4293      	cmp	r3, r2
 801323c:	f43f aee2 	beq.w	8013004 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8013240:	9b04      	ldr	r3, [sp, #16]
 8013242:	4629      	mov	r1, r5
 8013244:	6822      	ldr	r2, [r4, #0]
 8013246:	4620      	mov	r0, r4
 8013248:	f8d2 80ac 	ldr.w	r8, [r2, #172]	; 0xac
 801324c:	fb03 f209 	mul.w	r2, r3, r9
 8013250:	47c0      	blx	r8
 8013252:	9010      	str	r0, [sp, #64]	; 0x40
 8013254:	4658      	mov	r0, fp
 8013256:	f7ff fb6b 	bl	8012930 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801325a:	b203      	sxth	r3, r0
 801325c:	9305      	str	r3, [sp, #20]
 801325e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013260:	e785      	b.n	801316e <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 8013262:	4798      	blx	r3
 8013264:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8013268:	deff      	udf	#255	; 0xff

0801326a <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 801326a:	b510      	push	{r4, lr}
 801326c:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8013270:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 8013274:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8013278:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 801327c:	139b      	asrs	r3, r3, #14
 801327e:	13a4      	asrs	r4, r4, #14
 8013280:	429c      	cmp	r4, r3
 8013282:	bfb8      	it	lt
 8013284:	461c      	movlt	r4, r3
 8013286:	2c01      	cmp	r4, #1
 8013288:	dd07      	ble.n	801329a <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 801328a:	fb91 f1f4 	sdiv	r1, r1, r4
 801328e:	fb90 f0f4 	sdiv	r0, r0, r4
 8013292:	f7ff ffea 	bl	801326a <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8013296:	4360      	muls	r0, r4
 8013298:	bd10      	pop	{r4, pc}
 801329a:	4340      	muls	r0, r0
 801329c:	fb01 0101 	mla	r1, r1, r1, r0
 80132a0:	2000      	movs	r0, #0
 80132a2:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80132a6:	bfb4      	ite	lt
 80132a8:	f44f 4380 	movlt.w	r3, #16384	; 0x4000
 80132ac:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 80132b0:	18c2      	adds	r2, r0, r3
 80132b2:	428a      	cmp	r2, r1
 80132b4:	bf9c      	itt	ls
 80132b6:	1898      	addls	r0, r3, r2
 80132b8:	1a89      	subls	r1, r1, r2
 80132ba:	089b      	lsrs	r3, r3, #2
 80132bc:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80132c0:	d1f6      	bne.n	80132b0 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x46>
 80132c2:	e7e9      	b.n	8013298 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

080132c4 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>:
 80132c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132c6:	9906      	ldr	r1, [sp, #24]
 80132c8:	4606      	mov	r6, r0
 80132ca:	461c      	mov	r4, r3
 80132cc:	2020      	movs	r0, #32
 80132ce:	4291      	cmp	r1, r2
 80132d0:	bfbc      	itt	lt
 80132d2:	9206      	strlt	r2, [sp, #24]
 80132d4:	460a      	movlt	r2, r1
 80132d6:	9907      	ldr	r1, [sp, #28]
 80132d8:	428b      	cmp	r3, r1
 80132da:	bfc4      	itt	gt
 80132dc:	460c      	movgt	r4, r1
 80132de:	9307      	strgt	r3, [sp, #28]
 80132e0:	fb92 f5f0 	sdiv	r5, r2, r0
 80132e4:	fb94 f4f0 	sdiv	r4, r4, r0
 80132e8:	a806      	add	r0, sp, #24
 80132ea:	f7ff fdf9 	bl	8012ee0 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 80132ee:	4607      	mov	r7, r0
 80132f0:	a807      	add	r0, sp, #28
 80132f2:	f7ff fdf5 	bl	8012ee0 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 80132f6:	1b7a      	subs	r2, r7, r5
 80132f8:	1b00      	subs	r0, r0, r4
 80132fa:	8035      	strh	r5, [r6, #0]
 80132fc:	8074      	strh	r4, [r6, #2]
 80132fe:	80f0      	strh	r0, [r6, #6]
 8013300:	4630      	mov	r0, r6
 8013302:	80b2      	strh	r2, [r6, #4]
 8013304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013306 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>:
 8013306:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013308:	9c08      	ldr	r4, [sp, #32]
 801330a:	2602      	movs	r6, #2
 801330c:	4605      	mov	r5, r0
 801330e:	3401      	adds	r4, #1
 8013310:	fb94 f4f6 	sdiv	r4, r4, r6
 8013314:	18a6      	adds	r6, r4, r2
 8013316:	191f      	adds	r7, r3, r4
 8013318:	1b12      	subs	r2, r2, r4
 801331a:	1b1b      	subs	r3, r3, r4
 801331c:	e9cd 6700 	strd	r6, r7, [sp]
 8013320:	f7ff ffd0 	bl	80132c4 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>
 8013324:	4628      	mov	r0, r5
 8013326:	b003      	add	sp, #12
 8013328:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801332a <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs>:
 801332a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801332e:	6943      	ldr	r3, [r0, #20]
 8013330:	b087      	sub	sp, #28
 8013332:	4606      	mov	r6, r0
 8013334:	460d      	mov	r5, r1
 8013336:	2b00      	cmp	r3, #0
 8013338:	d072      	beq.n	8013420 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xf6>
 801333a:	695c      	ldr	r4, [r3, #20]
 801333c:	f890 702c 	ldrb.w	r7, [r0, #44]	; 0x2c
 8013340:	6823      	ldr	r3, [r4, #0]
 8013342:	4620      	mov	r0, r4
 8013344:	017f      	lsls	r7, r7, #5
 8013346:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 801334a:	4798      	blx	r3
 801334c:	6823      	ldr	r3, [r4, #0]
 801334e:	4680      	mov	r8, r0
 8013350:	4629      	mov	r1, r5
 8013352:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8013356:	4620      	mov	r0, r4
 8013358:	4798      	blx	r3
 801335a:	9700      	str	r7, [sp, #0]
 801335c:	4603      	mov	r3, r0
 801335e:	4642      	mov	r2, r8
 8013360:	4631      	mov	r1, r6
 8013362:	a802      	add	r0, sp, #8
 8013364:	f7ff ffcf 	bl	8013306 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8013368:	2d00      	cmp	r5, #0
 801336a:	dd1b      	ble.n	80133a4 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x7a>
 801336c:	f105 38ff 	add.w	r8, r5, #4294967295
 8013370:	6823      	ldr	r3, [r4, #0]
 8013372:	4620      	mov	r0, r4
 8013374:	fa0f f888 	sxth.w	r8, r8
 8013378:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 801337c:	4641      	mov	r1, r8
 801337e:	4798      	blx	r3
 8013380:	6823      	ldr	r3, [r4, #0]
 8013382:	4681      	mov	r9, r0
 8013384:	4641      	mov	r1, r8
 8013386:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 801338a:	4620      	mov	r0, r4
 801338c:	4798      	blx	r3
 801338e:	4631      	mov	r1, r6
 8013390:	4603      	mov	r3, r0
 8013392:	9700      	str	r7, [sp, #0]
 8013394:	a804      	add	r0, sp, #16
 8013396:	464a      	mov	r2, r9
 8013398:	f7ff ffb5 	bl	8013306 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 801339c:	a904      	add	r1, sp, #16
 801339e:	a802      	add	r0, sp, #8
 80133a0:	f7ff fd59 	bl	8012e56 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80133a4:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 80133a8:	3b01      	subs	r3, #1
 80133aa:	429d      	cmp	r5, r3
 80133ac:	da19      	bge.n	80133e2 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xb8>
 80133ae:	3501      	adds	r5, #1
 80133b0:	6823      	ldr	r3, [r4, #0]
 80133b2:	4620      	mov	r0, r4
 80133b4:	b22d      	sxth	r5, r5
 80133b6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80133ba:	4629      	mov	r1, r5
 80133bc:	4798      	blx	r3
 80133be:	6823      	ldr	r3, [r4, #0]
 80133c0:	4680      	mov	r8, r0
 80133c2:	4629      	mov	r1, r5
 80133c4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80133c8:	4620      	mov	r0, r4
 80133ca:	4798      	blx	r3
 80133cc:	4631      	mov	r1, r6
 80133ce:	4603      	mov	r3, r0
 80133d0:	9700      	str	r7, [sp, #0]
 80133d2:	a804      	add	r0, sp, #16
 80133d4:	4642      	mov	r2, r8
 80133d6:	f7ff ff96 	bl	8013306 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 80133da:	a904      	add	r1, sp, #16
 80133dc:	a802      	add	r0, sp, #8
 80133de:	f7ff fd3a 	bl	8012e56 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80133e2:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	; 0x114
 80133e6:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
 80133ea:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
 80133ee:	18ca      	adds	r2, r1, r3
 80133f0:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 80133f4:	f8ad 1012 	strh.w	r1, [sp, #18]
 80133f8:	a904      	add	r1, sp, #16
 80133fa:	1a9b      	subs	r3, r3, r2
 80133fc:	2200      	movs	r2, #0
 80133fe:	f8ad 0014 	strh.w	r0, [sp, #20]
 8013402:	a802      	add	r0, sp, #8
 8013404:	f8ad 2010 	strh.w	r2, [sp, #16]
 8013408:	f8ad 3016 	strh.w	r3, [sp, #22]
 801340c:	f7fd ffa2 	bl	8011354 <_ZN8touchgfx4RectaNERKS0_>
 8013410:	6833      	ldr	r3, [r6, #0]
 8013412:	a902      	add	r1, sp, #8
 8013414:	4630      	mov	r0, r6
 8013416:	691b      	ldr	r3, [r3, #16]
 8013418:	4798      	blx	r3
 801341a:	b007      	add	sp, #28
 801341c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	deff      	udf	#255	; 0xff

08013424 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>:
 8013424:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8013428:	2b00      	cmp	r3, #0
 801342a:	da05      	bge.n	8013438 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x14>
 801342c:	b29b      	uxth	r3, r3
 801342e:	880a      	ldrh	r2, [r1, #0]
 8013430:	441a      	add	r2, r3
 8013432:	425b      	negs	r3, r3
 8013434:	800a      	strh	r2, [r1, #0]
 8013436:	808b      	strh	r3, [r1, #4]
 8013438:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801343c:	2b00      	cmp	r3, #0
 801343e:	da05      	bge.n	801344c <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x28>
 8013440:	b29b      	uxth	r3, r3
 8013442:	884a      	ldrh	r2, [r1, #2]
 8013444:	441a      	add	r2, r3
 8013446:	425b      	negs	r3, r3
 8013448:	804a      	strh	r2, [r1, #2]
 801344a:	80cb      	strh	r3, [r1, #6]
 801344c:	4770      	bx	lr

0801344e <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh>:
 801344e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8013450:	4604      	mov	r4, r0
 8013452:	460d      	mov	r5, r1
 8013454:	6801      	ldr	r1, [r0, #0]
 8013456:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801345a:	9001      	str	r0, [sp, #4]
 801345c:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8013460:	9000      	str	r0, [sp, #0]
 8013462:	a802      	add	r0, sp, #8
 8013464:	f8d1 6090 	ldr.w	r6, [r1, #144]	; 0x90
 8013468:	4621      	mov	r1, r4
 801346a:	47b0      	blx	r6
 801346c:	a902      	add	r1, sp, #8
 801346e:	4620      	mov	r0, r4
 8013470:	f7ff ffd8 	bl	8013424 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>
 8013474:	a802      	add	r0, sp, #8
 8013476:	4629      	mov	r1, r5
 8013478:	f7fd ff6c 	bl	8011354 <_ZN8touchgfx4RectaNERKS0_>
 801347c:	a802      	add	r0, sp, #8
 801347e:	f7fd ffac 	bl	80113da <_ZNK8touchgfx4Rect7isEmptyEv>
 8013482:	b968      	cbnz	r0, 80134a0 <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh+0x52>
 8013484:	6823      	ldr	r3, [r4, #0]
 8013486:	a902      	add	r1, sp, #8
 8013488:	4620      	mov	r0, r4
 801348a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801348c:	4798      	blx	r3
 801348e:	f7fe fa31 	bl	80118f4 <_ZN8touchgfx3HAL3lcdEv>
 8013492:	6803      	ldr	r3, [r0, #0]
 8013494:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013496:	a902      	add	r1, sp, #8
 8013498:	6a1d      	ldr	r5, [r3, #32]
 801349a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 801349e:	47a8      	blx	r5
 80134a0:	b004      	add	sp, #16
 80134a2:	bd70      	pop	{r4, r5, r6, pc}

080134a4 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>:
 80134a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134a8:	b08b      	sub	sp, #44	; 0x2c
 80134aa:	461e      	mov	r6, r3
 80134ac:	460f      	mov	r7, r1
 80134ae:	4615      	mov	r5, r2
 80134b0:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
 80134b4:	429e      	cmp	r6, r3
 80134b6:	9304      	str	r3, [sp, #16]
 80134b8:	d074      	beq.n	80135a4 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x100>
 80134ba:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80134be:	4631      	mov	r1, r6
 80134c0:	4610      	mov	r0, r2
 80134c2:	4634      	mov	r4, r6
 80134c4:	015b      	lsls	r3, r3, #5
 80134c6:	9303      	str	r3, [sp, #12]
 80134c8:	6813      	ldr	r3, [r2, #0]
 80134ca:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80134ce:	4798      	blx	r3
 80134d0:	ab0a      	add	r3, sp, #40	; 0x28
 80134d2:	f843 0d10 	str.w	r0, [r3, #-16]!
 80134d6:	4618      	mov	r0, r3
 80134d8:	f7ff fa2a 	bl	8012930 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80134dc:	682b      	ldr	r3, [r5, #0]
 80134de:	4631      	mov	r1, r6
 80134e0:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80134e4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80134e8:	4628      	mov	r0, r5
 80134ea:	4798      	blx	r3
 80134ec:	ab0a      	add	r3, sp, #40	; 0x28
 80134ee:	f843 0d0c 	str.w	r0, [r3, #-12]!
 80134f2:	4618      	mov	r0, r3
 80134f4:	f7ff fa1c 	bl	8012930 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80134f8:	4641      	mov	r1, r8
 80134fa:	ea4f 1940 	mov.w	r9, r0, lsl #5
 80134fe:	4638      	mov	r0, r7
 8013500:	464a      	mov	r2, r9
 8013502:	f00f faff 	bl	8022b04 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8013506:	2301      	movs	r3, #1
 8013508:	9300      	str	r3, [sp, #0]
 801350a:	4628      	mov	r0, r5
 801350c:	9b00      	ldr	r3, [sp, #0]
 801350e:	441c      	add	r4, r3
 8013510:	682b      	ldr	r3, [r5, #0]
 8013512:	b224      	sxth	r4, r4
 8013514:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8013518:	4621      	mov	r1, r4
 801351a:	4798      	blx	r3
 801351c:	9008      	str	r0, [sp, #32]
 801351e:	a808      	add	r0, sp, #32
 8013520:	f7ff fa06 	bl	8012930 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8013524:	4621      	mov	r1, r4
 8013526:	0143      	lsls	r3, r0, #5
 8013528:	4628      	mov	r0, r5
 801352a:	9301      	str	r3, [sp, #4]
 801352c:	682b      	ldr	r3, [r5, #0]
 801352e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8013532:	4798      	blx	r3
 8013534:	9009      	str	r0, [sp, #36]	; 0x24
 8013536:	a809      	add	r0, sp, #36	; 0x24
 8013538:	f7ff f9fa 	bl	8012930 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801353c:	0143      	lsls	r3, r0, #5
 801353e:	9302      	str	r3, [sp, #8]
 8013540:	9b01      	ldr	r3, [sp, #4]
 8013542:	eba3 0b08 	sub.w	fp, r3, r8
 8013546:	9b02      	ldr	r3, [sp, #8]
 8013548:	eba3 0a09 	sub.w	sl, r3, r9
 801354c:	4658      	mov	r0, fp
 801354e:	4651      	mov	r1, sl
 8013550:	f7ff fe8b 	bl	801326a <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8013554:	b320      	cbz	r0, 80135a0 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xfc>
 8013556:	4602      	mov	r2, r0
 8013558:	4651      	mov	r1, sl
 801355a:	9005      	str	r0, [sp, #20]
 801355c:	9803      	ldr	r0, [sp, #12]
 801355e:	f004 fff7 	bl	8018550 <_ZN8touchgfx6muldivElll>
 8013562:	2302      	movs	r3, #2
 8013564:	4659      	mov	r1, fp
 8013566:	fb90 faf3 	sdiv	sl, r0, r3
 801356a:	9b05      	ldr	r3, [sp, #20]
 801356c:	9803      	ldr	r0, [sp, #12]
 801356e:	461a      	mov	r2, r3
 8013570:	f004 ffee 	bl	8018550 <_ZN8touchgfx6muldivElll>
 8013574:	2302      	movs	r3, #2
 8013576:	eba8 010a 	sub.w	r1, r8, sl
 801357a:	fb90 fbf3 	sdiv	fp, r0, r3
 801357e:	683b      	ldr	r3, [r7, #0]
 8013580:	eb0b 0209 	add.w	r2, fp, r9
 8013584:	4638      	mov	r0, r7
 8013586:	689b      	ldr	r3, [r3, #8]
 8013588:	4798      	blx	r3
 801358a:	683b      	ldr	r3, [r7, #0]
 801358c:	9a02      	ldr	r2, [sp, #8]
 801358e:	4638      	mov	r0, r7
 8013590:	9901      	ldr	r1, [sp, #4]
 8013592:	689b      	ldr	r3, [r3, #8]
 8013594:	445a      	add	r2, fp
 8013596:	eba1 010a 	sub.w	r1, r1, sl
 801359a:	4798      	blx	r3
 801359c:	e9dd 8901 	ldrd	r8, r9, [sp, #4]
 80135a0:	42a6      	cmp	r6, r4
 80135a2:	db02      	blt.n	80135aa <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x106>
 80135a4:	b00b      	add	sp, #44	; 0x2c
 80135a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135aa:	9b00      	ldr	r3, [sp, #0]
 80135ac:	9a04      	ldr	r2, [sp, #16]
 80135ae:	42a2      	cmp	r2, r4
 80135b0:	bf08      	it	eq
 80135b2:	f04f 33ff 	moveq.w	r3, #4294967295
 80135b6:	e7a7      	b.n	8013508 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x64>

080135b8 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE>:
 80135b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135bc:	6943      	ldr	r3, [r0, #20]
 80135be:	b0a2      	sub	sp, #136	; 0x88
 80135c0:	4606      	mov	r6, r0
 80135c2:	460f      	mov	r7, r1
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d06c      	beq.n	80136a2 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xea>
 80135c8:	695c      	ldr	r4, [r3, #20]
 80135ca:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 80135ce:	2b01      	cmp	r3, #1
 80135d0:	dc04      	bgt.n	80135dc <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x24>
 80135d2:	2401      	movs	r4, #1
 80135d4:	4620      	mov	r0, r4
 80135d6:	b022      	add	sp, #136	; 0x88
 80135d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135dc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80135e0:	ad22      	add	r5, sp, #136	; 0x88
 80135e2:	011b      	lsls	r3, r3, #4
 80135e4:	f845 3d70 	str.w	r3, [r5, #-112]!
 80135e8:	4628      	mov	r0, r5
 80135ea:	f7ff fc79 	bl	8012ee0 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 80135ee:	8839      	ldrh	r1, [r7, #0]
 80135f0:	88ba      	ldrh	r2, [r7, #4]
 80135f2:	b280      	uxth	r0, r0
 80135f4:	6823      	ldr	r3, [r4, #0]
 80135f6:	440a      	add	r2, r1
 80135f8:	1a09      	subs	r1, r1, r0
 80135fa:	4402      	add	r2, r0
 80135fc:	f10d 000e 	add.w	r0, sp, #14
 8013600:	b209      	sxth	r1, r1
 8013602:	9000      	str	r0, [sp, #0]
 8013604:	b212      	sxth	r2, r2
 8013606:	f8d3 8124 	ldr.w	r8, [r3, #292]	; 0x124
 801360a:	4620      	mov	r0, r4
 801360c:	ab03      	add	r3, sp, #12
 801360e:	47c0      	blx	r8
 8013610:	2800      	cmp	r0, #0
 8013612:	d0de      	beq.n	80135d2 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1a>
 8013614:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	; 0x114
 8013618:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
 801361c:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
 8013620:	18ca      	adds	r2, r1, r3
 8013622:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8013626:	f8ad 1012 	strh.w	r1, [sp, #18]
 801362a:	4639      	mov	r1, r7
 801362c:	1a9b      	subs	r3, r3, r2
 801362e:	2200      	movs	r2, #0
 8013630:	f8ad 0014 	strh.w	r0, [sp, #20]
 8013634:	a804      	add	r0, sp, #16
 8013636:	f8ad 3016 	strh.w	r3, [sp, #22]
 801363a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801363e:	f7fd fe89 	bl	8011354 <_ZN8touchgfx4RectaNERKS0_>
 8013642:	aa04      	add	r2, sp, #16
 8013644:	4631      	mov	r1, r6
 8013646:	4628      	mov	r0, r5
 8013648:	f00f f8e2 	bl	8022810 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 801364c:	f9b4 7120 	ldrsh.w	r7, [r4, #288]	; 0x120
 8013650:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8013654:	2f00      	cmp	r7, #0
 8013656:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 801365a:	dd03      	ble.n	8013664 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
 801365c:	42bb      	cmp	r3, r7
 801365e:	da01      	bge.n	8013664 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
 8013660:	42ba      	cmp	r2, r7
 8013662:	da11      	bge.n	8013688 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xd0>
 8013664:	9200      	str	r2, [sp, #0]
 8013666:	4622      	mov	r2, r4
 8013668:	4629      	mov	r1, r5
 801366a:	4630      	mov	r0, r6
 801366c:	f7ff ff1a 	bl	80134a4 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 8013670:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8013674:	4628      	mov	r0, r5
 8013676:	f00f f987 	bl	8022988 <_ZN8touchgfx6Canvas6renderEh>
 801367a:	4b0b      	ldr	r3, [pc, #44]	; (80136a8 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xf0>)
 801367c:	4604      	mov	r4, r0
 801367e:	a80e      	add	r0, sp, #56	; 0x38
 8013680:	9306      	str	r3, [sp, #24]
 8013682:	f001 fa53 	bl	8014b2c <_ZN8touchgfx7OutlineD1Ev>
 8013686:	e7a5      	b.n	80135d4 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1c>
 8013688:	1e7a      	subs	r2, r7, #1
 801368a:	4629      	mov	r1, r5
 801368c:	4630      	mov	r0, r6
 801368e:	b212      	sxth	r2, r2
 8013690:	9200      	str	r2, [sp, #0]
 8013692:	4622      	mov	r2, r4
 8013694:	f7ff ff06 	bl	80134a4 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 8013698:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801369c:	9300      	str	r3, [sp, #0]
 801369e:	463b      	mov	r3, r7
 80136a0:	e7e1      	b.n	8013666 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xae>
 80136a2:	f8b3 311e 	ldrh.w	r3, [r3, #286]	; 0x11e
 80136a6:	deff      	udf	#255	; 0xff
 80136a8:	080262c0 	.word	0x080262c0

080136ac <_ZN8touchgfx15GraphLabelsBase22invalidateGraphPointAtEs>:
 80136ac:	4770      	bx	lr

080136ae <_ZNK8touchgfx15GraphLabelsBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
 80136ae:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80136b0:	b118      	cbz	r0, 80136ba <_ZNK8touchgfx15GraphLabelsBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0xc>
 80136b2:	6803      	ldr	r3, [r0, #0]
 80136b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80136b8:	4718      	bx	r3
 80136ba:	4770      	bx	lr

080136bc <_ZNK8touchgfx12GraphLabelsX22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:
 80136bc:	680b      	ldr	r3, [r1, #0]
 80136be:	4608      	mov	r0, r1
 80136c0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80136c4:	4718      	bx	r3

080136c6 <_ZNK8touchgfx12GraphLabelsX22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
 80136c6:	680b      	ldr	r3, [r1, #0]
 80136c8:	4608      	mov	r0, r1
 80136ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80136ce:	4718      	bx	r3

080136d0 <_ZNK8touchgfx12GraphLabelsY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:
 80136d0:	680b      	ldr	r3, [r1, #0]
 80136d2:	4608      	mov	r0, r1
 80136d4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80136d8:	4718      	bx	r3

080136da <_ZNK8touchgfx12GraphLabelsY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
 80136da:	680b      	ldr	r3, [r1, #0]
 80136dc:	4608      	mov	r0, r1
 80136de:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80136e2:	4718      	bx	r3

080136e4 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE>:
 80136e4:	4a38      	ldr	r2, [pc, #224]	; (80137c8 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xe4>)
 80136e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136ea:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 80136ec:	b087      	sub	sp, #28
 80136ee:	8812      	ldrh	r2, [r2, #0]
 80136f0:	4604      	mov	r4, r0
 80136f2:	4689      	mov	r9, r1
 80136f4:	429a      	cmp	r2, r3
 80136f6:	d937      	bls.n	8013768 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 80136f8:	4a34      	ldr	r2, [pc, #208]	; (80137cc <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xe8>)
 80136fa:	6812      	ldr	r2, [r2, #0]
 80136fc:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8013700:	4b33      	ldr	r3, [pc, #204]	; (80137d0 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xec>)
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 8013708:	f1b8 0f00 	cmp.w	r8, #0
 801370c:	d02c      	beq.n	8013768 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 801370e:	6803      	ldr	r3, [r0, #0]
 8013710:	6945      	ldr	r5, [r0, #20]
 8013712:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013714:	2d00      	cmp	r5, #0
 8013716:	d052      	beq.n	80137be <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xda>
 8013718:	696f      	ldr	r7, [r5, #20]
 801371a:	4798      	blx	r3
 801371c:	f897 502c 	ldrb.w	r5, [r7, #44]	; 0x2c
 8013720:	fb15 f000 	smulbb	r0, r5, r0
 8013724:	b280      	uxth	r0, r0
 8013726:	1c45      	adds	r5, r0, #1
 8013728:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801372c:	122d      	asrs	r5, r5, #8
 801372e:	d01b      	beq.n	8013768 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8013730:	6823      	ldr	r3, [r4, #0]
 8013732:	4639      	mov	r1, r7
 8013734:	4620      	mov	r0, r4
 8013736:	b2ed      	uxtb	r5, r5
 8013738:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801373c:	4798      	blx	r3
 801373e:	6823      	ldr	r3, [r4, #0]
 8013740:	4606      	mov	r6, r0
 8013742:	4639      	mov	r1, r7
 8013744:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013748:	4620      	mov	r0, r4
 801374a:	4798      	blx	r3
 801374c:	4683      	mov	fp, r0
 801374e:	b970      	cbnz	r0, 801376e <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x8a>
 8013750:	b96e      	cbnz	r6, 801376e <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x8a>
 8013752:	6823      	ldr	r3, [r4, #0]
 8013754:	4642      	mov	r2, r8
 8013756:	9600      	str	r6, [sp, #0]
 8013758:	4649      	mov	r1, r9
 801375a:	4620      	mov	r0, r4
 801375c:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8013760:	f8d3 508c 	ldr.w	r5, [r3, #140]	; 0x8c
 8013764:	463b      	mov	r3, r7
 8013766:	47a8      	blx	r5
 8013768:	b007      	add	sp, #28
 801376a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801376e:	2e00      	cmp	r6, #0
 8013770:	ddfa      	ble.n	8013768 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8013772:	6823      	ldr	r3, [r4, #0]
 8013774:	4639      	mov	r1, r7
 8013776:	4620      	mov	r0, r4
 8013778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801377c:	4798      	blx	r3
 801377e:	6823      	ldr	r3, [r4, #0]
 8013780:	4682      	mov	sl, r0
 8013782:	4639      	mov	r1, r7
 8013784:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013788:	4620      	mov	r0, r4
 801378a:	4798      	blx	r3
 801378c:	4582      	cmp	sl, r0
 801378e:	bfde      	ittt	le
 8013790:	4603      	movle	r3, r0
 8013792:	4650      	movle	r0, sl
 8013794:	469a      	movle	sl, r3
 8013796:	ebaa 0300 	sub.w	r3, sl, r0
 801379a:	fb93 f3f6 	sdiv	r3, r3, r6
 801379e:	2b64      	cmp	r3, #100	; 0x64
 80137a0:	dce2      	bgt.n	8013768 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 80137a2:	6823      	ldr	r3, [r4, #0]
 80137a4:	4642      	mov	r2, r8
 80137a6:	9000      	str	r0, [sp, #0]
 80137a8:	4649      	mov	r1, r9
 80137aa:	4620      	mov	r0, r4
 80137ac:	e9cd b503 	strd	fp, r5, [sp, #12]
 80137b0:	e9cd a601 	strd	sl, r6, [sp, #4]
 80137b4:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 80137b8:	463b      	mov	r3, r7
 80137ba:	47a8      	blx	r5
 80137bc:	e7d4      	b.n	8013768 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 80137be:	4798      	blx	r3
 80137c0:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80137c4:	deff      	udf	#255	; 0xff
 80137c6:	bf00      	nop
 80137c8:	2400eb2c 	.word	0x2400eb2c
 80137cc:	2400eb28 	.word	0x2400eb28
 80137d0:	2400eb30 	.word	0x2400eb30

080137d4 <_ZN8touchgfx12GraphLabelsYD1Ev>:
 80137d4:	4770      	bx	lr

080137d6 <_ZN8touchgfx12GraphLabelsXD1Ev>:
 80137d6:	4770      	bx	lr

080137d8 <_ZNK8touchgfx12GraphLabelsX31getCorrectlyScaledLabelIntervalEPKNS_17AbstractDataGraphE>:
 80137d8:	b538      	push	{r3, r4, r5, lr}
 80137da:	680a      	ldr	r2, [r1, #0]
 80137dc:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	; 0x30
 80137e0:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80137e4:	4608      	mov	r0, r1
 80137e6:	4790      	blx	r2
 80137e8:	4629      	mov	r1, r5
 80137ea:	4602      	mov	r2, r0
 80137ec:	4620      	mov	r0, r4
 80137ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80137f2:	f7ff babb 	b.w	8012d6c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

080137f6 <_ZNK8touchgfx12GraphLabelsY31getCorrectlyScaledLabelIntervalEPKNS_17AbstractDataGraphE>:
 80137f6:	b538      	push	{r3, r4, r5, lr}
 80137f8:	680a      	ldr	r2, [r1, #0]
 80137fa:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	; 0x30
 80137fe:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8013802:	4608      	mov	r0, r1
 8013804:	4790      	blx	r2
 8013806:	4629      	mov	r1, r5
 8013808:	4602      	mov	r2, r0
 801380a:	4620      	mov	r0, r4
 801380c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013810:	f7ff baac 	b.w	8012d6c <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

08013814 <_ZN8touchgfx12GraphLabelsYD0Ev>:
 8013814:	b510      	push	{r4, lr}
 8013816:	4604      	mov	r4, r0
 8013818:	214c      	movs	r1, #76	; 0x4c
 801381a:	f00f fa34 	bl	8022c86 <_ZdlPvj>
 801381e:	4620      	mov	r0, r4
 8013820:	bd10      	pop	{r4, pc}

08013822 <_ZN8touchgfx12GraphLabelsXD0Ev>:
 8013822:	b510      	push	{r4, lr}
 8013824:	4604      	mov	r4, r0
 8013826:	214c      	movs	r1, #76	; 0x4c
 8013828:	f00f fa2d 	bl	8022c86 <_ZdlPvj>
 801382c:	4620      	mov	r0, r4
 801382e:	bd10      	pop	{r4, pc}

08013830 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>:
 8013830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013834:	b08d      	sub	sp, #52	; 0x34
 8013836:	4606      	mov	r6, r0
 8013838:	9309      	str	r3, [sp, #36]	; 0x24
 801383a:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 801383e:	e9dd 9a18 	ldrd	r9, sl, [sp, #96]	; 0x60
 8013842:	e9cd 1207 	strd	r1, r2, [sp, #28]
 8013846:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	; 0x58
 801384a:	930a      	str	r3, [sp, #40]	; 0x28
 801384c:	f1b9 0f00 	cmp.w	r9, #0
 8013850:	d117      	bne.n	8013882 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x52>
 8013852:	2f00      	cmp	r7, #0
 8013854:	dc7c      	bgt.n	8013950 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x120>
 8013856:	f1b8 0f00 	cmp.w	r8, #0
 801385a:	da01      	bge.n	8013860 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x30>
 801385c:	2f00      	cmp	r7, #0
 801385e:	d17a      	bne.n	8013956 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 8013860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013862:	4630      	mov	r0, r6
 8013864:	6832      	ldr	r2, [r6, #0]
 8013866:	9318      	str	r3, [sp, #96]	; 0x60
 8013868:	2300      	movs	r3, #0
 801386a:	9907      	ldr	r1, [sp, #28]
 801386c:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
 8013870:	f8d2 408c 	ldr.w	r4, [r2, #140]	; 0x8c
 8013874:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013878:	46a4      	mov	ip, r4
 801387a:	b00d      	add	sp, #52	; 0x34
 801387c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013880:	4760      	bx	ip
 8013882:	fb97 f4f9 	sdiv	r4, r7, r9
 8013886:	1e63      	subs	r3, r4, #1
 8013888:	9305      	str	r3, [sp, #20]
 801388a:	f1ba 0f00 	cmp.w	sl, #0
 801388e:	d122      	bne.n	80138d6 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xa6>
 8013890:	fb03 f509 	mul.w	r5, r3, r9
 8013894:	fb98 faf9 	sdiv	sl, r8, r9
 8013898:	f10a 0a02 	add.w	sl, sl, #2
 801389c:	9b05      	ldr	r3, [sp, #20]
 801389e:	459a      	cmp	sl, r3
 80138a0:	d059      	beq.n	8013956 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 80138a2:	42af      	cmp	r7, r5
 80138a4:	dc5a      	bgt.n	801395c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x12c>
 80138a6:	45a8      	cmp	r8, r5
 80138a8:	da01      	bge.n	80138ae <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x7e>
 80138aa:	42af      	cmp	r7, r5
 80138ac:	db0e      	blt.n	80138cc <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x9c>
 80138ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80138b0:	4630      	mov	r0, r6
 80138b2:	9905      	ldr	r1, [sp, #20]
 80138b4:	9302      	str	r3, [sp, #8]
 80138b6:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80138b8:	6832      	ldr	r2, [r6, #0]
 80138ba:	434b      	muls	r3, r1
 80138bc:	9907      	ldr	r1, [sp, #28]
 80138be:	e9cd 5300 	strd	r5, r3, [sp]
 80138c2:	f8d2 b08c 	ldr.w	fp, [r2, #140]	; 0x8c
 80138c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80138ca:	47d8      	blx	fp
 80138cc:	9b05      	ldr	r3, [sp, #20]
 80138ce:	444d      	add	r5, r9
 80138d0:	3301      	adds	r3, #1
 80138d2:	9305      	str	r3, [sp, #20]
 80138d4:	e7e2      	b.n	801389c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x6c>
 80138d6:	fb97 f3fa 	sdiv	r3, r7, sl
 80138da:	3b01      	subs	r3, #1
 80138dc:	9306      	str	r3, [sp, #24]
 80138de:	9a06      	ldr	r2, [sp, #24]
 80138e0:	fb98 f3fa 	sdiv	r3, r8, sl
 80138e4:	fb02 fb0a 	mul.w	fp, r2, sl
 80138e8:	9a05      	ldr	r2, [sp, #20]
 80138ea:	3302      	adds	r3, #2
 80138ec:	fb02 f509 	mul.w	r5, r2, r9
 80138f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80138f2:	45ab      	cmp	fp, r5
 80138f4:	dd1d      	ble.n	8013932 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x102>
 80138f6:	42af      	cmp	r7, r5
 80138f8:	dc08      	bgt.n	801390c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xdc>
 80138fa:	45a8      	cmp	r8, r5
 80138fc:	da08      	bge.n	8013910 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xe0>
 80138fe:	42af      	cmp	r7, r5
 8013900:	da06      	bge.n	8013910 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xe0>
 8013902:	9b05      	ldr	r3, [sp, #20]
 8013904:	444d      	add	r5, r9
 8013906:	3301      	adds	r3, #1
 8013908:	9305      	str	r3, [sp, #20]
 801390a:	e7f2      	b.n	80138f2 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xc2>
 801390c:	45a8      	cmp	r8, r5
 801390e:	dcf8      	bgt.n	8013902 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xd2>
 8013910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013912:	4630      	mov	r0, r6
 8013914:	9905      	ldr	r1, [sp, #20]
 8013916:	9302      	str	r3, [sp, #8]
 8013918:	6b73      	ldr	r3, [r6, #52]	; 0x34
 801391a:	6832      	ldr	r2, [r6, #0]
 801391c:	434b      	muls	r3, r1
 801391e:	9907      	ldr	r1, [sp, #28]
 8013920:	e9cd 5300 	strd	r5, r3, [sp]
 8013924:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8013928:	461c      	mov	r4, r3
 801392a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801392e:	47a0      	blx	r4
 8013930:	e7e7      	b.n	8013902 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xd2>
 8013932:	45ab      	cmp	fp, r5
 8013934:	db04      	blt.n	8013940 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x110>
 8013936:	9b05      	ldr	r3, [sp, #20]
 8013938:	444d      	add	r5, r9
 801393a:	3301      	adds	r3, #1
 801393c:	9305      	str	r3, [sp, #20]
 801393e:	e7f8      	b.n	8013932 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x102>
 8013940:	9b06      	ldr	r3, [sp, #24]
 8013942:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013944:	3301      	adds	r3, #1
 8013946:	4293      	cmp	r3, r2
 8013948:	9306      	str	r3, [sp, #24]
 801394a:	d004      	beq.n	8013956 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 801394c:	44d3      	add	fp, sl
 801394e:	e7d0      	b.n	80138f2 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xc2>
 8013950:	f1b8 0f00 	cmp.w	r8, #0
 8013954:	dd84      	ble.n	8013860 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x30>
 8013956:	b00d      	add	sp, #52	; 0x34
 8013958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801395c:	45a8      	cmp	r8, r5
 801395e:	dcb5      	bgt.n	80138cc <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x9c>
 8013960:	e7a5      	b.n	80138ae <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x7e>

08013962 <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>:
 8013962:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013966:	f9b3 4120 	ldrsh.w	r4, [r3, #288]	; 0x120
 801396a:	b089      	sub	sp, #36	; 0x24
 801396c:	468a      	mov	sl, r1
 801396e:	4693      	mov	fp, r2
 8013970:	2c00      	cmp	r4, #0
 8013972:	9007      	str	r0, [sp, #28]
 8013974:	461d      	mov	r5, r3
 8013976:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 801397a:	e9dd c612 	ldrd	ip, r6, [sp, #72]	; 0x48
 801397e:	e9dd 7814 	ldrd	r7, r8, [sp, #80]	; 0x50
 8013982:	dd03      	ble.n	801398c <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x2a>
 8013984:	4564      	cmp	r4, ip
 8013986:	dd01      	ble.n	801398c <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x2a>
 8013988:	42b4      	cmp	r4, r6
 801398a:	dd0e      	ble.n	80139aa <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x48>
 801398c:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8013990:	e9cd 8915 	strd	r8, r9, [sp, #84]	; 0x54
 8013994:	e9cd 6713 	strd	r6, r7, [sp, #76]	; 0x4c
 8013998:	462b      	mov	r3, r5
 801399a:	465a      	mov	r2, fp
 801399c:	4651      	mov	r1, sl
 801399e:	9807      	ldr	r0, [sp, #28]
 80139a0:	b009      	add	sp, #36	; 0x24
 80139a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139a6:	f7ff bf43 	b.w	8013830 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>
 80139aa:	f104 3eff 	add.w	lr, r4, #4294967295
 80139ae:	9702      	str	r7, [sp, #8]
 80139b0:	e9cd 8903 	strd	r8, r9, [sp, #12]
 80139b4:	e9cd ce00 	strd	ip, lr, [sp]
 80139b8:	f7ff ff3a 	bl	8013830 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>
 80139bc:	9412      	str	r4, [sp, #72]	; 0x48
 80139be:	e9cd 8915 	strd	r8, r9, [sp, #84]	; 0x54
 80139c2:	e9cd 6713 	strd	r6, r7, [sp, #76]	; 0x4c
 80139c6:	e7e7      	b.n	8013998 <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x36>

080139c8 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>:
 80139c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139cc:	f1b3 0900 	subs.w	r9, r3, #0
 80139d0:	460d      	mov	r5, r1
 80139d2:	4690      	mov	r8, r2
 80139d4:	9f08      	ldr	r7, [sp, #32]
 80139d6:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 80139da:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80139dc:	da18      	bge.n	8013a10 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x48>
 80139de:	2a01      	cmp	r2, #1
 80139e0:	dd16      	ble.n	8013a10 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x48>
 80139e2:	232d      	movs	r3, #45	; 0x2d
 80139e4:	f1c9 0900 	rsb	r9, r9, #0
 80139e8:	2001      	movs	r0, #1
 80139ea:	800b      	strh	r3, [r1, #0]
 80139ec:	2f00      	cmp	r7, #0
 80139ee:	d111      	bne.n	8013a14 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x4c>
 80139f0:	2302      	movs	r3, #2
 80139f2:	eba8 0100 	sub.w	r1, r8, r0
 80139f6:	4a26      	ldr	r2, [pc, #152]	; (8013a90 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc8>)
 80139f8:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 80139fc:	b289      	uxth	r1, r1
 80139fe:	fb96 f3f3 	sdiv	r3, r6, r3
 8013a02:	444b      	add	r3, r9
 8013a04:	fb93 f3f6 	sdiv	r3, r3, r6
 8013a08:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a0c:	f006 bbd4 	b.w	801a1b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8013a10:	2000      	movs	r0, #0
 8013a12:	e7eb      	b.n	80139ec <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x24>
 8013a14:	dd39      	ble.n	8013a8a <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc2>
 8013a16:	eba8 0100 	sub.w	r1, r8, r0
 8013a1a:	4a1d      	ldr	r2, [pc, #116]	; (8013a90 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc8>)
 8013a1c:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 8013a20:	f108 38ff 	add.w	r8, r8, #4294967295
 8013a24:	b289      	uxth	r1, r1
 8013a26:	fb99 f4f6 	sdiv	r4, r9, r6
 8013a2a:	4623      	mov	r3, r4
 8013a2c:	f006 fbc4 	bl	801a1b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8013a30:	4628      	mov	r0, r5
 8013a32:	f006 f84f 	bl	8019ad4 <_ZN8touchgfx7Unicode6strlenEPKt>
 8013a36:	4580      	cmp	r8, r0
 8013a38:	dd27      	ble.n	8013a8a <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc2>
 8013a3a:	f04f 0e02 	mov.w	lr, #2
 8013a3e:	f825 a010 	strh.w	sl, [r5, r0, lsl #1]
 8013a42:	fb06 9314 	mls	r3, r6, r4, r9
 8013a46:	3001      	adds	r0, #1
 8013a48:	2200      	movs	r2, #0
 8013a4a:	f04f 090a 	mov.w	r9, #10
 8013a4e:	f107 3aff 	add.w	sl, r7, #4294967295
 8013a52:	fb96 fefe 	sdiv	lr, r6, lr
 8013a56:	4580      	cmp	r8, r0
 8013a58:	4684      	mov	ip, r0
 8013a5a:	dd13      	ble.n	8013a84 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xbc>
 8013a5c:	fb09 f303 	mul.w	r3, r9, r3
 8013a60:	4592      	cmp	sl, r2
 8013a62:	f102 0201 	add.w	r2, r2, #1
 8013a66:	f100 0c01 	add.w	ip, r0, #1
 8013a6a:	bf08      	it	eq
 8013a6c:	4473      	addeq	r3, lr
 8013a6e:	4297      	cmp	r7, r2
 8013a70:	fb93 f4f6 	sdiv	r4, r3, r6
 8013a74:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8013a78:	fb06 3314 	mls	r3, r6, r4, r3
 8013a7c:	f825 1010 	strh.w	r1, [r5, r0, lsl #1]
 8013a80:	4660      	mov	r0, ip
 8013a82:	d1e8      	bne.n	8013a56 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x8e>
 8013a84:	2300      	movs	r3, #0
 8013a86:	f825 301c 	strh.w	r3, [r5, ip, lsl #1]
 8013a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a8e:	bf00      	nop
 8013a90:	08025bf4 	.word	0x08025bf4

08013a94 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs>:
 8013a94:	4a69      	ldr	r2, [pc, #420]	; (8013c3c <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x1a8>)
 8013a96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013a9a:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8013a9c:	b093      	sub	sp, #76	; 0x4c
 8013a9e:	8812      	ldrh	r2, [r2, #0]
 8013aa0:	4604      	mov	r4, r0
 8013aa2:	460e      	mov	r6, r1
 8013aa4:	429a      	cmp	r2, r3
 8013aa6:	d93a      	bls.n	8013b1e <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 8013aa8:	4a65      	ldr	r2, [pc, #404]	; (8013c40 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x1ac>)
 8013aaa:	6812      	ldr	r2, [r2, #0]
 8013aac:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8013ab0:	4b64      	ldr	r3, [pc, #400]	; (8013c44 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x1b0>)
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 8013ab8:	f1b8 0f00 	cmp.w	r8, #0
 8013abc:	d02f      	beq.n	8013b1e <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 8013abe:	6803      	ldr	r3, [r0, #0]
 8013ac0:	6945      	ldr	r5, [r0, #20]
 8013ac2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013ac4:	2d00      	cmp	r5, #0
 8013ac6:	f000 80b5 	beq.w	8013c34 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x1a0>
 8013aca:	696f      	ldr	r7, [r5, #20]
 8013acc:	4798      	blx	r3
 8013ace:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013ad2:	fb13 f000 	smulbb	r0, r3, r0
 8013ad6:	b280      	uxth	r0, r0
 8013ad8:	1c43      	adds	r3, r0, #1
 8013ada:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8013ade:	0a03      	lsrs	r3, r0, #8
 8013ae0:	d01d      	beq.n	8013b1e <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 8013ae2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013ae4:	4620      	mov	r0, r4
 8013ae6:	6823      	ldr	r3, [r4, #0]
 8013ae8:	434e      	muls	r6, r1
 8013aea:	4639      	mov	r1, r7
 8013aec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013af0:	4798      	blx	r3
 8013af2:	6823      	ldr	r3, [r4, #0]
 8013af4:	4605      	mov	r5, r0
 8013af6:	4639      	mov	r1, r7
 8013af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013afc:	4620      	mov	r0, r4
 8013afe:	4798      	blx	r3
 8013b00:	2d00      	cmp	r5, #0
 8013b02:	dd0f      	ble.n	8013b24 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x90>
 8013b04:	fb96 f3f5 	sdiv	r3, r6, r5
 8013b08:	436b      	muls	r3, r5
 8013b0a:	1b9a      	subs	r2, r3, r6
 8013b0c:	4253      	negs	r3, r2
 8013b0e:	4153      	adcs	r3, r2
 8013b10:	2800      	cmp	r0, #0
 8013b12:	dd09      	ble.n	8013b28 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x94>
 8013b14:	fb96 f2f0 	sdiv	r2, r6, r0
 8013b18:	4350      	muls	r0, r2
 8013b1a:	42b0      	cmp	r0, r6
 8013b1c:	d10d      	bne.n	8013b3a <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xa6>
 8013b1e:	b013      	add	sp, #76	; 0x4c
 8013b20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013b24:	2300      	movs	r3, #0
 8013b26:	e7f3      	b.n	8013b10 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x7c>
 8013b28:	d107      	bne.n	8013b3a <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xa6>
 8013b2a:	2d00      	cmp	r5, #0
 8013b2c:	d17f      	bne.n	8013c2e <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x19a>
 8013b2e:	2e00      	cmp	r6, #0
 8013b30:	d063      	beq.n	8013bfa <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x166>
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d0f3      	beq.n	8013b1e <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 8013b36:	462a      	mov	r2, r5
 8013b38:	e007      	b.n	8013b4a <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xb6>
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d0ef      	beq.n	8013b1e <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 8013b3e:	2d00      	cmp	r5, #0
 8013b40:	d0f9      	beq.n	8013b36 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xa2>
 8013b42:	fb96 f2f5 	sdiv	r2, r6, r5
 8013b46:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8013b48:	436a      	muls	r2, r5
 8013b4a:	683b      	ldr	r3, [r7, #0]
 8013b4c:	4631      	mov	r1, r6
 8013b4e:	4638      	mov	r0, r7
 8013b50:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8013b54:	4798      	blx	r3
 8013b56:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013b58:	2214      	movs	r2, #20
 8013b5a:	a908      	add	r1, sp, #32
 8013b5c:	9302      	str	r3, [sp, #8]
 8013b5e:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 8013b62:	9301      	str	r3, [sp, #4]
 8013b64:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8013b68:	9300      	str	r3, [sp, #0]
 8013b6a:	4603      	mov	r3, r0
 8013b6c:	4620      	mov	r0, r4
 8013b6e:	f7ff ff2b 	bl	80139c8 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>
 8013b72:	4b35      	ldr	r3, [pc, #212]	; (8013c48 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x1b4>)
 8013b74:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8013b76:	6818      	ldr	r0, [r3, #0]
 8013b78:	f7f2 fe0e 	bl	8006798 <_ZNK8touchgfx5Texts7getTextEt>
 8013b7c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8013b80:	4681      	mov	r9, r0
 8013b82:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8013b86:	f8d8 3000 	ldr.w	r3, [r8]
 8013b8a:	d138      	bne.n	8013bfe <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x16a>
 8013b8c:	4601      	mov	r1, r0
 8013b8e:	699b      	ldr	r3, [r3, #24]
 8013b90:	aa08      	add	r2, sp, #32
 8013b92:	4640      	mov	r0, r8
 8013b94:	4798      	blx	r3
 8013b96:	b205      	sxth	r5, r0
 8013b98:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8013b9c:	2002      	movs	r0, #2
 8013b9e:	4631      	mov	r1, r6
 8013ba0:	f8b7 906c 	ldrh.w	r9, [r7, #108]	; 0x6c
 8013ba4:	2b01      	cmp	r3, #1
 8013ba6:	683b      	ldr	r3, [r7, #0]
 8013ba8:	bf88      	it	hi
 8013baa:	f105 0801 	addhi.w	r8, r5, #1
 8013bae:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8013bb2:	bf8c      	ite	hi
 8013bb4:	fb98 f8f0 	sdivhi	r8, r8, r0
 8013bb8:	fb95 f8f0 	sdivls	r8, r5, r0
 8013bbc:	4638      	mov	r0, r7
 8013bbe:	bf88      	it	hi
 8013bc0:	fa0f f888 	sxthhi.w	r8, r8
 8013bc4:	4798      	blx	r3
 8013bc6:	ab12      	add	r3, sp, #72	; 0x48
 8013bc8:	f843 0d34 	str.w	r0, [r3, #-52]!
 8013bcc:	4618      	mov	r0, r3
 8013bce:	f7fe feaf 	bl	8012930 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8013bd2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8013bd6:	4448      	add	r0, r9
 8013bd8:	2200      	movs	r2, #0
 8013bda:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013bde:	a906      	add	r1, sp, #24
 8013be0:	eba0 0808 	sub.w	r8, r0, r8
 8013be4:	6823      	ldr	r3, [r4, #0]
 8013be6:	f8ad 201a 	strh.w	r2, [sp, #26]
 8013bea:	4620      	mov	r0, r4
 8013bec:	f8ad 8018 	strh.w	r8, [sp, #24]
 8013bf0:	f8ad 501c 	strh.w	r5, [sp, #28]
 8013bf4:	691b      	ldr	r3, [r3, #16]
 8013bf6:	4798      	blx	r3
 8013bf8:	e791      	b.n	8013b1e <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 8013bfa:	4632      	mov	r2, r6
 8013bfc:	e7a5      	b.n	8013b4a <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xb6>
 8013bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c00:	4640      	mov	r0, r8
 8013c02:	4798      	blx	r3
 8013c04:	f8d8 3000 	ldr.w	r3, [r8]
 8013c08:	4605      	mov	r5, r0
 8013c0a:	aa08      	add	r2, sp, #32
 8013c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013c0e:	4649      	mov	r1, r9
 8013c10:	4640      	mov	r0, r8
 8013c12:	4798      	blx	r3
 8013c14:	fb15 f500 	smulbb	r5, r5, r0
 8013c18:	f8d8 3000 	ldr.w	r3, [r8]
 8013c1c:	aa08      	add	r2, sp, #32
 8013c1e:	b2ad      	uxth	r5, r5
 8013c20:	4649      	mov	r1, r9
 8013c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c24:	4640      	mov	r0, r8
 8013c26:	4798      	blx	r3
 8013c28:	4405      	add	r5, r0
 8013c2a:	b22d      	sxth	r5, r5
 8013c2c:	e7b4      	b.n	8013b98 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x104>
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d187      	bne.n	8013b42 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xae>
 8013c32:	e774      	b.n	8013b1e <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 8013c34:	4798      	blx	r3
 8013c36:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8013c3a:	deff      	udf	#255	; 0xff
 8013c3c:	2400eb2c 	.word	0x2400eb2c
 8013c40:	2400eb28 	.word	0x2400eb28
 8013c44:	2400eb30 	.word	0x2400eb30
 8013c48:	2400eb34 	.word	0x2400eb34

08013c4c <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih>:
 8013c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c50:	b09b      	sub	sp, #108	; 0x6c
 8013c52:	461e      	mov	r6, r3
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	4604      	mov	r4, r0
 8013c58:	af1a      	add	r7, sp, #104	; 0x68
 8013c5a:	9104      	str	r1, [sp, #16]
 8013c5c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8013c60:	4630      	mov	r0, r6
 8013c62:	9924      	ldr	r1, [sp, #144]	; 0x90
 8013c64:	4690      	mov	r8, r2
 8013c66:	4798      	blx	r3
 8013c68:	f847 0d28 	str.w	r0, [r7, #-40]!
 8013c6c:	4638      	mov	r0, r7
 8013c6e:	f7fe fe5f 	bl	8012930 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8013c72:	f8b6 3116 	ldrh.w	r3, [r6, #278]	; 0x116
 8013c76:	1ac0      	subs	r0, r0, r3
 8013c78:	b200      	sxth	r0, r0
 8013c7a:	2800      	cmp	r0, #0
 8013c7c:	f2c0 80b8 	blt.w	8013df0 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a4>
 8013c80:	f8b6 2118 	ldrh.w	r2, [r6, #280]	; 0x118
 8013c84:	441a      	add	r2, r3
 8013c86:	f8b6 3040 	ldrh.w	r3, [r6, #64]	; 0x40
 8013c8a:	1a9b      	subs	r3, r3, r2
 8013c8c:	b21b      	sxth	r3, r3
 8013c8e:	4298      	cmp	r0, r3
 8013c90:	f280 80ae 	bge.w	8013df0 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a4>
 8013c94:	6833      	ldr	r3, [r6, #0]
 8013c96:	4630      	mov	r0, r6
 8013c98:	e9dd 1224 	ldrd	r1, r2, [sp, #144]	; 0x90
 8013c9c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8013ca0:	4798      	blx	r3
 8013ca2:	6833      	ldr	r3, [r6, #0]
 8013ca4:	f8b4 9042 	ldrh.w	r9, [r4, #66]	; 0x42
 8013ca8:	4605      	mov	r5, r0
 8013caa:	f8b4 b044 	ldrh.w	fp, [r4, #68]	; 0x44
 8013cae:	4630      	mov	r0, r6
 8013cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013cb4:	4798      	blx	r3
 8013cb6:	f8cd 9000 	str.w	r9, [sp]
 8013cba:	462b      	mov	r3, r5
 8013cbc:	2214      	movs	r2, #20
 8013cbe:	4639      	mov	r1, r7
 8013cc0:	e9cd b001 	strd	fp, r0, [sp, #4]
 8013cc4:	4620      	mov	r0, r4
 8013cc6:	f7ff fe7f 	bl	80139c8 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>
 8013cca:	4b57      	ldr	r3, [pc, #348]	; (8013e28 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1dc>)
 8013ccc:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8013cce:	6818      	ldr	r0, [r3, #0]
 8013cd0:	f7f2 fd62 	bl	8006798 <_ZNK8touchgfx5Texts7getTextEt>
 8013cd4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8013cd8:	4681      	mov	r9, r0
 8013cda:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8013cde:	f8d8 3000 	ldr.w	r3, [r8]
 8013ce2:	f040 8088 	bne.w	8013df6 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1aa>
 8013ce6:	4601      	mov	r1, r0
 8013ce8:	699b      	ldr	r3, [r3, #24]
 8013cea:	463a      	mov	r2, r7
 8013cec:	4640      	mov	r0, r8
 8013cee:	4798      	blx	r3
 8013cf0:	b205      	sxth	r5, r0
 8013cf2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8013cf6:	2002      	movs	r0, #2
 8013cf8:	6832      	ldr	r2, [r6, #0]
 8013cfa:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8013cfe:	2b01      	cmp	r3, #1
 8013d00:	f8b6 306c 	ldrh.w	r3, [r6, #108]	; 0x6c
 8013d04:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
 8013d08:	bf88      	it	hi
 8013d0a:	f105 0b01 	addhi.w	fp, r5, #1
 8013d0e:	9305      	str	r3, [sp, #20]
 8013d10:	9924      	ldr	r1, [sp, #144]	; 0x90
 8013d12:	bf8c      	ite	hi
 8013d14:	fb9b fbf0 	sdivhi	fp, fp, r0
 8013d18:	fb95 fbf0 	sdivls	fp, r5, r0
 8013d1c:	4630      	mov	r0, r6
 8013d1e:	bf88      	it	hi
 8013d20:	fa0f fb8b 	sxthhi.w	fp, fp
 8013d24:	4790      	blx	r2
 8013d26:	f84a 0d3c 	str.w	r0, [sl, #-60]!
 8013d2a:	4650      	mov	r0, sl
 8013d2c:	2600      	movs	r6, #0
 8013d2e:	f7fe fdff 	bl	8012930 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8013d32:	9b05      	ldr	r3, [sp, #20]
 8013d34:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8013d38:	4418      	add	r0, r3
 8013d3a:	f8ad 5020 	strh.w	r5, [sp, #32]
 8013d3e:	ad07      	add	r5, sp, #28
 8013d40:	f8ad 601e 	strh.w	r6, [sp, #30]
 8013d44:	eba0 0b0b 	sub.w	fp, r0, fp
 8013d48:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 8013d4c:	f8ad b01c 	strh.w	fp, [sp, #28]
 8013d50:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 8013d54:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013d58:	e88b 0003 	stmia.w	fp, {r0, r1}
 8013d5c:	9904      	ldr	r1, [sp, #16]
 8013d5e:	4658      	mov	r0, fp
 8013d60:	f7fd faf8 	bl	8011354 <_ZN8touchgfx4RectaNERKS0_>
 8013d64:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8013d68:	42b3      	cmp	r3, r6
 8013d6a:	dd41      	ble.n	8013df0 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a4>
 8013d6c:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8013d70:	42b3      	cmp	r3, r6
 8013d72:	dd3d      	ble.n	8013df0 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a4>
 8013d74:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8013d78:	4620      	mov	r0, r4
 8013d7a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8013d7e:	1a5b      	subs	r3, r3, r1
 8013d80:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8013d84:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8013d88:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8013d8c:	1a5b      	subs	r3, r3, r1
 8013d8e:	4629      	mov	r1, r5
 8013d90:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8013d94:	6823      	ldr	r3, [r4, #0]
 8013d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d98:	4798      	blx	r3
 8013d9a:	4b24      	ldr	r3, [pc, #144]	; (8013e2c <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1e0>)
 8013d9c:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8013da4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8013da8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8013daa:	785b      	ldrb	r3, [r3, #1]
 8013dac:	910d      	str	r1, [sp, #52]	; 0x34
 8013dae:	f3c3 0c01 	ubfx	ip, r3, #0, #2
 8013db2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8013db6:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8013dba:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8013dbe:	f89d 3098 	ldrb.w	r3, [sp, #152]	; 0x98
 8013dc2:	f88d c030 	strb.w	ip, [sp, #48]	; 0x30
 8013dc6:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8013dca:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
 8013dce:	f8ad 6038 	strh.w	r6, [sp, #56]	; 0x38
 8013dd2:	f88d 603b 	strb.w	r6, [sp, #59]	; 0x3b
 8013dd6:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8013dda:	f7fd fd8b 	bl	80118f4 <_ZN8touchgfx3HAL3lcdEv>
 8013dde:	465b      	mov	r3, fp
 8013de0:	e9cd 7602 	strd	r7, r6, [sp, #8]
 8013de4:	e9cd a900 	strd	sl, r9, [sp]
 8013de8:	e895 0006 	ldmia.w	r5, {r1, r2}
 8013dec:	f7f2 fc86 	bl	80066fc <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8013df0:	b01b      	add	sp, #108	; 0x6c
 8013df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013df8:	4640      	mov	r0, r8
 8013dfa:	4798      	blx	r3
 8013dfc:	f8d8 3000 	ldr.w	r3, [r8]
 8013e00:	4605      	mov	r5, r0
 8013e02:	463a      	mov	r2, r7
 8013e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013e06:	4649      	mov	r1, r9
 8013e08:	4640      	mov	r0, r8
 8013e0a:	4798      	blx	r3
 8013e0c:	fb15 f500 	smulbb	r5, r5, r0
 8013e10:	f8d8 3000 	ldr.w	r3, [r8]
 8013e14:	463a      	mov	r2, r7
 8013e16:	b2ad      	uxth	r5, r5
 8013e18:	4649      	mov	r1, r9
 8013e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e1c:	4640      	mov	r0, r8
 8013e1e:	4798      	blx	r3
 8013e20:	4405      	add	r5, r0
 8013e22:	b22d      	sxth	r5, r5
 8013e24:	e765      	b.n	8013cf2 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xa6>
 8013e26:	bf00      	nop
 8013e28:	2400eb34 	.word	0x2400eb34
 8013e2c:	2400eb28 	.word	0x2400eb28

08013e30 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih>:
 8013e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e34:	b09b      	sub	sp, #108	; 0x6c
 8013e36:	4698      	mov	r8, r3
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	4604      	mov	r4, r0
 8013e3c:	ae1a      	add	r6, sp, #104	; 0x68
 8013e3e:	9104      	str	r1, [sp, #16]
 8013e40:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8013e44:	4640      	mov	r0, r8
 8013e46:	9924      	ldr	r1, [sp, #144]	; 0x90
 8013e48:	4617      	mov	r7, r2
 8013e4a:	4798      	blx	r3
 8013e4c:	f846 0d28 	str.w	r0, [r6, #-40]!
 8013e50:	4630      	mov	r0, r6
 8013e52:	f7fe fd6d 	bl	8012930 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8013e56:	f8b8 3114 	ldrh.w	r3, [r8, #276]	; 0x114
 8013e5a:	1ac0      	subs	r0, r0, r3
 8013e5c:	b200      	sxth	r0, r0
 8013e5e:	2800      	cmp	r0, #0
 8013e60:	f2c0 80ba 	blt.w	8013fd8 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 8013e64:	f8b8 211a 	ldrh.w	r2, [r8, #282]	; 0x11a
 8013e68:	441a      	add	r2, r3
 8013e6a:	f8b8 3042 	ldrh.w	r3, [r8, #66]	; 0x42
 8013e6e:	1a9b      	subs	r3, r3, r2
 8013e70:	b21b      	sxth	r3, r3
 8013e72:	4298      	cmp	r0, r3
 8013e74:	f280 80b0 	bge.w	8013fd8 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 8013e78:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013e7a:	2214      	movs	r2, #20
 8013e7c:	4631      	mov	r1, r6
 8013e7e:	4620      	mov	r0, r4
 8013e80:	9302      	str	r3, [sp, #8]
 8013e82:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 8013e86:	9301      	str	r3, [sp, #4]
 8013e88:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8013e8c:	9300      	str	r3, [sp, #0]
 8013e8e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8013e90:	f7ff fd9a 	bl	80139c8 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>
 8013e94:	4b55      	ldr	r3, [pc, #340]	; (8013fec <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1bc>)
 8013e96:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8013e98:	6818      	ldr	r0, [r3, #0]
 8013e9a:	f7f2 fc7d 	bl	8006798 <_ZNK8touchgfx5Texts7getTextEt>
 8013e9e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8013ea2:	4681      	mov	r9, r0
 8013ea4:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8013ea8:	683b      	ldr	r3, [r7, #0]
 8013eaa:	f040 8098 	bne.w	8013fde <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1ae>
 8013eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013eb0:	4638      	mov	r0, r7
 8013eb2:	4798      	blx	r3
 8013eb4:	683b      	ldr	r3, [r7, #0]
 8013eb6:	4605      	mov	r5, r0
 8013eb8:	4632      	mov	r2, r6
 8013eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013ebc:	4649      	mov	r1, r9
 8013ebe:	4638      	mov	r0, r7
 8013ec0:	4798      	blx	r3
 8013ec2:	fb15 f500 	smulbb	r5, r5, r0
 8013ec6:	683b      	ldr	r3, [r7, #0]
 8013ec8:	4632      	mov	r2, r6
 8013eca:	b2ad      	uxth	r5, r5
 8013ecc:	4649      	mov	r1, r9
 8013ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ed0:	4638      	mov	r0, r7
 8013ed2:	4798      	blx	r3
 8013ed4:	4405      	add	r5, r0
 8013ed6:	b22d      	sxth	r5, r5
 8013ed8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8013edc:	2002      	movs	r0, #2
 8013ede:	f8d8 2000 	ldr.w	r2, [r8]
 8013ee2:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8013ee6:	2b01      	cmp	r3, #1
 8013ee8:	f8b8 30c6 	ldrh.w	r3, [r8, #198]	; 0xc6
 8013eec:	f8d2 2118 	ldr.w	r2, [r2, #280]	; 0x118
 8013ef0:	bf88      	it	hi
 8013ef2:	f105 0b01 	addhi.w	fp, r5, #1
 8013ef6:	9305      	str	r3, [sp, #20]
 8013ef8:	9924      	ldr	r1, [sp, #144]	; 0x90
 8013efa:	bf8c      	ite	hi
 8013efc:	fb9b fbf0 	sdivhi	fp, fp, r0
 8013f00:	fb95 fbf0 	sdivls	fp, r5, r0
 8013f04:	4640      	mov	r0, r8
 8013f06:	bf88      	it	hi
 8013f08:	fa0f fb8b 	sxthhi.w	fp, fp
 8013f0c:	4790      	blx	r2
 8013f0e:	f84a 0d3c 	str.w	r0, [sl, #-60]!
 8013f12:	4650      	mov	r0, sl
 8013f14:	f04f 0800 	mov.w	r8, #0
 8013f18:	f7fe fd0a 	bl	8012930 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8013f1c:	9b05      	ldr	r3, [sp, #20]
 8013f1e:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8013f22:	4418      	add	r0, r3
 8013f24:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
 8013f28:	ad07      	add	r5, sp, #28
 8013f2a:	f8ad 801c 	strh.w	r8, [sp, #28]
 8013f2e:	eba0 0b0b 	sub.w	fp, r0, fp
 8013f32:	f8ad 1020 	strh.w	r1, [sp, #32]
 8013f36:	f8ad b01e 	strh.w	fp, [sp, #30]
 8013f3a:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 8013f3e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013f42:	e88b 0003 	stmia.w	fp, {r0, r1}
 8013f46:	9904      	ldr	r1, [sp, #16]
 8013f48:	4658      	mov	r0, fp
 8013f4a:	f7fd fa03 	bl	8011354 <_ZN8touchgfx4RectaNERKS0_>
 8013f4e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8013f52:	4543      	cmp	r3, r8
 8013f54:	dd40      	ble.n	8013fd8 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 8013f56:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8013f5a:	4543      	cmp	r3, r8
 8013f5c:	dd3c      	ble.n	8013fd8 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 8013f5e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8013f62:	4620      	mov	r0, r4
 8013f64:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8013f68:	1a5b      	subs	r3, r3, r1
 8013f6a:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8013f6e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8013f72:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8013f76:	1a5b      	subs	r3, r3, r1
 8013f78:	4629      	mov	r1, r5
 8013f7a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8013f7e:	6823      	ldr	r3, [r4, #0]
 8013f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f82:	4798      	blx	r3
 8013f84:	4b1a      	ldr	r3, [pc, #104]	; (8013ff0 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1c0>)
 8013f86:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8013f8e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8013f92:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8013f94:	785b      	ldrb	r3, [r3, #1]
 8013f96:	910d      	str	r1, [sp, #52]	; 0x34
 8013f98:	f3c3 0c01 	ubfx	ip, r3, #0, #2
 8013f9c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8013fa0:	970b      	str	r7, [sp, #44]	; 0x2c
 8013fa2:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8013fa6:	f89d 3098 	ldrb.w	r3, [sp, #152]	; 0x98
 8013faa:	f88d c030 	strb.w	ip, [sp, #48]	; 0x30
 8013fae:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8013fb2:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
 8013fb6:	f8ad 8038 	strh.w	r8, [sp, #56]	; 0x38
 8013fba:	f88d 803b 	strb.w	r8, [sp, #59]	; 0x3b
 8013fbe:	f88d 803c 	strb.w	r8, [sp, #60]	; 0x3c
 8013fc2:	f7fd fc97 	bl	80118f4 <_ZN8touchgfx3HAL3lcdEv>
 8013fc6:	465b      	mov	r3, fp
 8013fc8:	e9cd 6802 	strd	r6, r8, [sp, #8]
 8013fcc:	e9cd a900 	strd	sl, r9, [sp]
 8013fd0:	e895 0006 	ldmia.w	r5, {r1, r2}
 8013fd4:	f7f2 fb92 	bl	80066fc <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8013fd8:	b01b      	add	sp, #108	; 0x6c
 8013fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fde:	4601      	mov	r1, r0
 8013fe0:	699b      	ldr	r3, [r3, #24]
 8013fe2:	4632      	mov	r2, r6
 8013fe4:	4638      	mov	r0, r7
 8013fe6:	4798      	blx	r3
 8013fe8:	b205      	sxth	r5, r0
 8013fea:	e775      	b.n	8013ed8 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xa8>
 8013fec:	2400eb34 	.word	0x2400eb34
 8013ff0:	2400eb28 	.word	0x2400eb28

08013ff4 <_ZN8touchgfx15GraphScrollData5clearEv>:
 8013ff4:	b510      	push	{r4, lr}
 8013ff6:	4604      	mov	r4, r0
 8013ff8:	f7fe fb37 	bl	801266a <_ZN8touchgfx17AbstractDataGraph5clearEv>
 8013ffc:	2300      	movs	r3, #0
 8013ffe:	f8a4 314c 	strh.w	r3, [r4, #332]	; 0x14c
 8014002:	bd10      	pop	{r4, pc}

08014004 <_ZN8touchgfx15GraphScrollData14beforeAddValueEv>:
 8014004:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
 8014008:	f9b0 311c 	ldrsh.w	r3, [r0, #284]	; 0x11c
 801400c:	429a      	cmp	r2, r3
 801400e:	d101      	bne.n	8014014 <_ZN8touchgfx15GraphScrollData14beforeAddValueEv+0x10>
 8014010:	f7fe bd66 	b.w	8012ae0 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 8014014:	4770      	bx	lr

08014016 <_ZNK8touchgfx15GraphScrollData18indexToGlobalIndexEs>:
 8014016:	b538      	push	{r3, r4, r5, lr}
 8014018:	f9b0 411c 	ldrsh.w	r4, [r0, #284]	; 0x11c
 801401c:	f9b0 511e 	ldrsh.w	r5, [r0, #286]	; 0x11e
 8014020:	42a5      	cmp	r5, r4
 8014022:	da04      	bge.n	801402e <_ZNK8touchgfx15GraphScrollData18indexToGlobalIndexEs+0x18>
 8014024:	6803      	ldr	r3, [r0, #0]
 8014026:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 801402a:	4798      	blx	r3
 801402c:	bd38      	pop	{r3, r4, r5, pc}
 801402e:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
 8014032:	4408      	add	r0, r1
 8014034:	1b00      	subs	r0, r0, r4
 8014036:	e7f9      	b.n	801402c <_ZNK8touchgfx15GraphScrollData18indexToGlobalIndexEs+0x16>

08014038 <_ZN8touchgfx15GraphScrollData8addValueEi>:
 8014038:	b570      	push	{r4, r5, r6, lr}
 801403a:	f9b0 514c 	ldrsh.w	r5, [r0, #332]	; 0x14c
 801403e:	4604      	mov	r4, r0
 8014040:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	; 0x11c
 8014044:	1c6b      	adds	r3, r5, #1
 8014046:	f9b0 611e 	ldrsh.w	r6, [r0, #286]	; 0x11e
 801404a:	b21b      	sxth	r3, r3
 801404c:	42ae      	cmp	r6, r5
 801404e:	fb93 f0f2 	sdiv	r0, r3, r2
 8014052:	bf08      	it	eq
 8014054:	f8a4 311e 	strheq.w	r3, [r4, #286]	; 0x11e
 8014058:	4296      	cmp	r6, r2
 801405a:	fb02 3010 	mls	r0, r2, r0, r3
 801405e:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 8014062:	f8a4 014c 	strh.w	r0, [r4, #332]	; 0x14c
 8014066:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801406a:	d108      	bne.n	801407e <_ZN8touchgfx15GraphScrollData8addValueEi+0x46>
 801406c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8014070:	f004 f8a7 	bl	80181c2 <_ZNK8touchgfx8Drawable10invalidateEv>
 8014074:	4620      	mov	r0, r4
 8014076:	f7fe fd33 	bl	8012ae0 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 801407a:	4628      	mov	r0, r5
 801407c:	bd70      	pop	{r4, r5, r6, pc}
 801407e:	4629      	mov	r1, r5
 8014080:	4620      	mov	r0, r4
 8014082:	f7fe fd05 	bl	8012a90 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 8014086:	e7f8      	b.n	801407a <_ZN8touchgfx15GraphScrollData8addValueEi+0x42>

08014088 <_ZN8touchgfx8TextArea8setWidthEs>:
 8014088:	b530      	push	{r4, r5, lr}
 801408a:	b085      	sub	sp, #20
 801408c:	6803      	ldr	r3, [r0, #0]
 801408e:	4604      	mov	r4, r0
 8014090:	8101      	strh	r1, [r0, #8]
 8014092:	466d      	mov	r5, sp
 8014094:	4601      	mov	r1, r0
 8014096:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801409a:	343c      	adds	r4, #60	; 0x3c
 801409c:	4628      	mov	r0, r5
 801409e:	4798      	blx	r3
 80140a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80140a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80140a8:	b005      	add	sp, #20
 80140aa:	bd30      	pop	{r4, r5, pc}

080140ac <_ZN8touchgfx8TextArea9setHeightEs>:
 80140ac:	b530      	push	{r4, r5, lr}
 80140ae:	b085      	sub	sp, #20
 80140b0:	6803      	ldr	r3, [r0, #0]
 80140b2:	4604      	mov	r4, r0
 80140b4:	8141      	strh	r1, [r0, #10]
 80140b6:	466d      	mov	r5, sp
 80140b8:	4601      	mov	r1, r0
 80140ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80140be:	343c      	adds	r4, #60	; 0x3c
 80140c0:	4628      	mov	r0, r5
 80140c2:	4798      	blx	r3
 80140c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80140c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80140cc:	b005      	add	sp, #20
 80140ce:	bd30      	pop	{r4, r5, pc}

080140d0 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 80140d0:	2200      	movs	r2, #0
 80140d2:	8002      	strh	r2, [r0, #0]
 80140d4:	8042      	strh	r2, [r0, #2]
 80140d6:	8082      	strh	r2, [r0, #4]
 80140d8:	80c2      	strh	r2, [r0, #6]
 80140da:	4770      	bx	lr

080140dc <_ZN8touchgfx8TextArea8setAlphaEh>:
 80140dc:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
 80140e0:	4770      	bx	lr
	...

080140e4 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 80140e4:	b570      	push	{r4, r5, r6, lr}
 80140e6:	6803      	ldr	r3, [r0, #0]
 80140e8:	4604      	mov	r4, r0
 80140ea:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80140ec:	460d      	mov	r5, r1
 80140ee:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80140f0:	4b08      	ldr	r3, [pc, #32]	; (8014114 <_ZN8touchgfx8TextArea12setBaselineYEs+0x30>)
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80140f8:	4b07      	ldr	r3, [pc, #28]	; (8014118 <_ZN8touchgfx8TextArea12setBaselineYEs+0x34>)
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014100:	6803      	ldr	r3, [r0, #0]
 8014102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014104:	4798      	blx	r3
 8014106:	1a29      	subs	r1, r5, r0
 8014108:	4633      	mov	r3, r6
 801410a:	4620      	mov	r0, r4
 801410c:	b209      	sxth	r1, r1
 801410e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014112:	4718      	bx	r3
 8014114:	2400eb28 	.word	0x2400eb28
 8014118:	2400eb30 	.word	0x2400eb30

0801411c <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 801411c:	b570      	push	{r4, r5, r6, lr}
 801411e:	6803      	ldr	r3, [r0, #0]
 8014120:	4604      	mov	r4, r0
 8014122:	4615      	mov	r5, r2
 8014124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014126:	4798      	blx	r3
 8014128:	6823      	ldr	r3, [r4, #0]
 801412a:	4629      	mov	r1, r5
 801412c:	4620      	mov	r0, r4
 801412e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014130:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014134:	4718      	bx	r3

08014136 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8014136:	2000      	movs	r0, #0
 8014138:	4770      	bx	lr

0801413a <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
 801413a:	2000      	movs	r0, #0
 801413c:	4770      	bx	lr
	...

08014140 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8014140:	4b07      	ldr	r3, [pc, #28]	; (8014160 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8014142:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8014144:	881b      	ldrh	r3, [r3, #0]
 8014146:	4293      	cmp	r3, r2
 8014148:	bf81      	itttt	hi
 801414a:	4b06      	ldrhi	r3, [pc, #24]	; (8014164 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 801414c:	681b      	ldrhi	r3, [r3, #0]
 801414e:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8014152:	7858      	ldrbhi	r0, [r3, #1]
 8014154:	bf8c      	ite	hi
 8014156:	f000 0003 	andhi.w	r0, r0, #3
 801415a:	2000      	movls	r0, #0
 801415c:	4770      	bx	lr
 801415e:	bf00      	nop
 8014160:	2400eb2c 	.word	0x2400eb2c
 8014164:	2400eb28 	.word	0x2400eb28

08014168 <_ZN8touchgfx8TextAreaD1Ev>:
 8014168:	4770      	bx	lr
	...

0801416c <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 801416c:	4b11      	ldr	r3, [pc, #68]	; (80141b4 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 801416e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014172:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8014174:	4604      	mov	r4, r0
 8014176:	881b      	ldrh	r3, [r3, #0]
 8014178:	428b      	cmp	r3, r1
 801417a:	d918      	bls.n	80141ae <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 801417c:	6803      	ldr	r3, [r0, #0]
 801417e:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8014180:	4b0d      	ldr	r3, [pc, #52]	; (80141b8 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8014182:	6818      	ldr	r0, [r3, #0]
 8014184:	f7f2 fb08 	bl	8006798 <_ZNK8touchgfx5Texts7getTextEt>
 8014188:	6823      	ldr	r3, [r4, #0]
 801418a:	4606      	mov	r6, r0
 801418c:	4620      	mov	r0, r4
 801418e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014190:	4798      	blx	r3
 8014192:	6823      	ldr	r3, [r4, #0]
 8014194:	4607      	mov	r7, r0
 8014196:	4620      	mov	r0, r4
 8014198:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801419c:	4798      	blx	r3
 801419e:	463a      	mov	r2, r7
 80141a0:	4603      	mov	r3, r0
 80141a2:	4631      	mov	r1, r6
 80141a4:	4620      	mov	r0, r4
 80141a6:	46ac      	mov	ip, r5
 80141a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80141ac:	4760      	bx	ip
 80141ae:	2000      	movs	r0, #0
 80141b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141b4:	2400eb2c 	.word	0x2400eb2c
 80141b8:	2400eb34 	.word	0x2400eb34

080141bc <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 80141bc:	4b18      	ldr	r3, [pc, #96]	; (8014220 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 80141be:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80141c2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80141c4:	4604      	mov	r4, r0
 80141c6:	881b      	ldrh	r3, [r3, #0]
 80141c8:	428b      	cmp	r3, r1
 80141ca:	d926      	bls.n	801421a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 80141cc:	4b15      	ldr	r3, [pc, #84]	; (8014224 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80141d4:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 80141d8:	4b13      	ldr	r3, [pc, #76]	; (8014228 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80141da:	7855      	ldrb	r5, [r2, #1]
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	f3c5 0581 	ubfx	r5, r5, #2, #2
 80141e2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80141e6:	6833      	ldr	r3, [r6, #0]
 80141e8:	69df      	ldr	r7, [r3, #28]
 80141ea:	4b10      	ldr	r3, [pc, #64]	; (801422c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 80141ec:	6818      	ldr	r0, [r3, #0]
 80141ee:	f7f2 fad3 	bl	8006798 <_ZNK8touchgfx5Texts7getTextEt>
 80141f2:	6823      	ldr	r3, [r4, #0]
 80141f4:	4680      	mov	r8, r0
 80141f6:	4620      	mov	r0, r4
 80141f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80141fa:	4798      	blx	r3
 80141fc:	6823      	ldr	r3, [r4, #0]
 80141fe:	4681      	mov	r9, r0
 8014200:	4620      	mov	r0, r4
 8014202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014206:	4798      	blx	r3
 8014208:	464b      	mov	r3, r9
 801420a:	9000      	str	r0, [sp, #0]
 801420c:	4642      	mov	r2, r8
 801420e:	4629      	mov	r1, r5
 8014210:	4630      	mov	r0, r6
 8014212:	47b8      	blx	r7
 8014214:	b003      	add	sp, #12
 8014216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801421a:	2000      	movs	r0, #0
 801421c:	e7fa      	b.n	8014214 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 801421e:	bf00      	nop
 8014220:	2400eb2c 	.word	0x2400eb2c
 8014224:	2400eb28 	.word	0x2400eb28
 8014228:	2400eb30 	.word	0x2400eb30
 801422c:	2400eb34 	.word	0x2400eb34

08014230 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8014230:	b40e      	push	{r1, r2, r3}
 8014232:	4b30      	ldr	r3, [pc, #192]	; (80142f4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8014234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014238:	881a      	ldrh	r2, [r3, #0]
 801423a:	b09d      	sub	sp, #116	; 0x74
 801423c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801423e:	4604      	mov	r4, r0
 8014240:	429a      	cmp	r2, r3
 8014242:	d954      	bls.n	80142ee <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8014244:	aa26      	add	r2, sp, #152	; 0x98
 8014246:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80142f8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 801424a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80142fc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 801424e:	9202      	str	r2, [sp, #8]
 8014250:	f8d9 2000 	ldr.w	r2, [r9]
 8014254:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8014258:	f8d8 3000 	ldr.w	r3, [r8]
 801425c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8014260:	682b      	ldr	r3, [r5, #0]
 8014262:	4628      	mov	r0, r5
 8014264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014266:	4798      	blx	r3
 8014268:	4606      	mov	r6, r0
 801426a:	b207      	sxth	r7, r0
 801426c:	a803      	add	r0, sp, #12
 801426e:	f004 fccb 	bl	8018c08 <_ZN8touchgfx12TextProviderC1Ev>
 8014272:	682b      	ldr	r3, [r5, #0]
 8014274:	4628      	mov	r0, r5
 8014276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014278:	4798      	blx	r3
 801427a:	682b      	ldr	r3, [r5, #0]
 801427c:	4682      	mov	sl, r0
 801427e:	4628      	mov	r0, r5
 8014280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014282:	4798      	blx	r3
 8014284:	4653      	mov	r3, sl
 8014286:	9000      	str	r0, [sp, #0]
 8014288:	a803      	add	r0, sp, #12
 801428a:	9a02      	ldr	r2, [sp, #8]
 801428c:	9925      	ldr	r1, [sp, #148]	; 0x94
 801428e:	f004 fd16 	bl	8018cbe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8014292:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8014294:	f8d9 3000 	ldr.w	r3, [r9]
 8014298:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 801429c:	8925      	ldrh	r5, [r4, #8]
 801429e:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 80142a2:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 80142a6:	eba5 050c 	sub.w	r5, r5, ip
 80142aa:	784a      	ldrb	r2, [r1, #1]
 80142ac:	f8d8 3000 	ldr.w	r3, [r8]
 80142b0:	b22d      	sxth	r5, r5
 80142b2:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 80142b6:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80142ba:	9500      	str	r5, [sp, #0]
 80142bc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80142c0:	a803      	add	r0, sp, #12
 80142c2:	f002 fb0d 	bl	80168e0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 80142c6:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 80142ca:	b203      	sxth	r3, r0
 80142cc:	18b9      	adds	r1, r7, r2
 80142ce:	2900      	cmp	r1, #0
 80142d0:	dd0b      	ble.n	80142ea <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 80142d2:	3b01      	subs	r3, #1
 80142d4:	fb13 f302 	smulbb	r3, r3, r2
 80142d8:	fb16 3300 	smlabb	r3, r6, r0, r3
 80142dc:	b21f      	sxth	r7, r3
 80142de:	4638      	mov	r0, r7
 80142e0:	b01d      	add	sp, #116	; 0x74
 80142e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142e6:	b003      	add	sp, #12
 80142e8:	4770      	bx	lr
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	dcf7      	bgt.n	80142de <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 80142ee:	2700      	movs	r7, #0
 80142f0:	e7f5      	b.n	80142de <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 80142f2:	bf00      	nop
 80142f4:	2400eb2c 	.word	0x2400eb2c
 80142f8:	2400eb28 	.word	0x2400eb28
 80142fc:	2400eb30 	.word	0x2400eb30

08014300 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8014300:	4bbd      	ldr	r3, [pc, #756]	; (80145f8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8014302:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014306:	460c      	mov	r4, r1
 8014308:	881b      	ldrh	r3, [r3, #0]
 801430a:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 801430c:	b0a9      	sub	sp, #164	; 0xa4
 801430e:	4680      	mov	r8, r0
 8014310:	428b      	cmp	r3, r1
 8014312:	d809      	bhi.n	8014328 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8014314:	2300      	movs	r3, #0
 8014316:	f04f 32ff 	mov.w	r2, #4294967295
 801431a:	6083      	str	r3, [r0, #8]
 801431c:	e9c0 3200 	strd	r3, r2, [r0]
 8014320:	4640      	mov	r0, r8
 8014322:	b029      	add	sp, #164	; 0xa4
 8014324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014328:	4eb4      	ldr	r6, [pc, #720]	; (80145fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 801432a:	6833      	ldr	r3, [r6, #0]
 801432c:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8014330:	4bb3      	ldr	r3, [pc, #716]	; (8014600 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8014338:	4bb2      	ldr	r3, [pc, #712]	; (8014604 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 801433a:	6818      	ldr	r0, [r3, #0]
 801433c:	f7f2 fa2c 	bl	8006798 <_ZNK8touchgfx5Texts7getTextEt>
 8014340:	682b      	ldr	r3, [r5, #0]
 8014342:	4681      	mov	r9, r0
 8014344:	4628      	mov	r0, r5
 8014346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014348:	4798      	blx	r3
 801434a:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
 801434c:	b203      	sxth	r3, r0
 801434e:	4682      	mov	sl, r0
 8014350:	4407      	add	r7, r0
 8014352:	a80f      	add	r0, sp, #60	; 0x3c
 8014354:	9304      	str	r3, [sp, #16]
 8014356:	b2bb      	uxth	r3, r7
 8014358:	9303      	str	r3, [sp, #12]
 801435a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 801435e:	2b00      	cmp	r3, #0
 8014360:	f040 80a5 	bne.w	80144ae <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 8014364:	f004 fc50 	bl	8018c08 <_ZN8touchgfx12TextProviderC1Ev>
 8014368:	682b      	ldr	r3, [r5, #0]
 801436a:	4628      	mov	r0, r5
 801436c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801436e:	4798      	blx	r3
 8014370:	682b      	ldr	r3, [r5, #0]
 8014372:	4606      	mov	r6, r0
 8014374:	4628      	mov	r0, r5
 8014376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014378:	4798      	blx	r3
 801437a:	6823      	ldr	r3, [r4, #0]
 801437c:	4607      	mov	r7, r0
 801437e:	4620      	mov	r0, r4
 8014380:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014382:	4798      	blx	r3
 8014384:	6823      	ldr	r3, [r4, #0]
 8014386:	4683      	mov	fp, r0
 8014388:	4620      	mov	r0, r4
 801438a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801438e:	4798      	blx	r3
 8014390:	463b      	mov	r3, r7
 8014392:	4649      	mov	r1, r9
 8014394:	4632      	mov	r2, r6
 8014396:	2600      	movs	r6, #0
 8014398:	e9cd b000 	strd	fp, r0, [sp]
 801439c:	a80f      	add	r0, sp, #60	; 0x3c
 801439e:	4637      	mov	r7, r6
 80143a0:	f004 fca2 	bl	8018ce8 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80143a4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80143a8:	f8df b250 	ldr.w	fp, [pc, #592]	; 80145fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 80143ac:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80143b0:	bf0c      	ite	eq
 80143b2:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 80143b6:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 80143ba:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80143bc:	4629      	mov	r1, r5
 80143be:	f8db 3000 	ldr.w	r3, [fp]
 80143c2:	a80f      	add	r0, sp, #60	; 0x3c
 80143c4:	3701      	adds	r7, #1
 80143c6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80143ca:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80143ce:	b2bf      	uxth	r7, r7
 80143d0:	785b      	ldrb	r3, [r3, #1]
 80143d2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80143d6:	f001 ff9e 	bl	8016316 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80143da:	9b03      	ldr	r3, [sp, #12]
 80143dc:	4286      	cmp	r6, r0
 80143de:	eba9 0903 	sub.w	r9, r9, r3
 80143e2:	bfb8      	it	lt
 80143e4:	4606      	movlt	r6, r0
 80143e6:	a80f      	add	r0, sp, #60	; 0x3c
 80143e8:	fa0f f989 	sxth.w	r9, r9
 80143ec:	b236      	sxth	r6, r6
 80143ee:	f004 fc32 	bl	8018c56 <_ZN8touchgfx12TextProvider11endOfStringEv>
 80143f2:	b918      	cbnz	r0, 80143fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 80143f4:	7a2b      	ldrb	r3, [r5, #8]
 80143f6:	444b      	add	r3, r9
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	dcde      	bgt.n	80143ba <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 80143fc:	9b03      	ldr	r3, [sp, #12]
 80143fe:	4620      	mov	r0, r4
 8014400:	9a04      	ldr	r2, [sp, #16]
 8014402:	fb13 f707 	smulbb	r7, r3, r7
 8014406:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8014408:	f895 9009 	ldrb.w	r9, [r5, #9]
 801440c:	1aff      	subs	r7, r7, r3
 801440e:	b2bf      	uxth	r7, r7
 8014410:	b23b      	sxth	r3, r7
 8014412:	429a      	cmp	r2, r3
 8014414:	bfa8      	it	ge
 8014416:	4657      	movge	r7, sl
 8014418:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801441c:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8014420:	6823      	ldr	r3, [r4, #0]
 8014422:	444f      	add	r7, r9
 8014424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014426:	bf08      	it	eq
 8014428:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 801442c:	fa1f f987 	uxth.w	r9, r7
 8014430:	bf18      	it	ne
 8014432:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 8014436:	4798      	blx	r3
 8014438:	2801      	cmp	r0, #1
 801443a:	fa0f f789 	sxth.w	r7, r9
 801443e:	b2b3      	uxth	r3, r6
 8014440:	f000 80e2 	beq.w	8014608 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 8014444:	2802      	cmp	r0, #2
 8014446:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
 801444a:	f000 80e3 	beq.w	8014614 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 801444e:	7aea      	ldrb	r2, [r5, #11]
 8014450:	b236      	sxth	r6, r6
 8014452:	7b2d      	ldrb	r5, [r5, #12]
 8014454:	1ab6      	subs	r6, r6, r2
 8014456:	442a      	add	r2, r5
 8014458:	fa1f fa86 	uxth.w	sl, r6
 801445c:	4413      	add	r3, r2
 801445e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8014462:	fa0f fb8a 	sxth.w	fp, sl
 8014466:	b29b      	uxth	r3, r3
 8014468:	2a02      	cmp	r2, #2
 801446a:	b21e      	sxth	r6, r3
 801446c:	f000 80d6 	beq.w	801461c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 8014470:	2a03      	cmp	r2, #3
 8014472:	f000 80de 	beq.w	8014632 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 8014476:	2a01      	cmp	r2, #1
 8014478:	f040 80e6 	bne.w	8014648 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 801447c:	8925      	ldrh	r5, [r4, #8]
 801447e:	4633      	mov	r3, r6
 8014480:	463e      	mov	r6, r7
 8014482:	eba5 0909 	sub.w	r9, r5, r9
 8014486:	461f      	mov	r7, r3
 8014488:	465d      	mov	r5, fp
 801448a:	fa0f fb89 	sxth.w	fp, r9
 801448e:	4b5d      	ldr	r3, [pc, #372]	; (8014604 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8014490:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8014492:	6818      	ldr	r0, [r3, #0]
 8014494:	f7f2 f980 	bl	8006798 <_ZNK8touchgfx5Texts7getTextEt>
 8014498:	f8a8 b000 	strh.w	fp, [r8]
 801449c:	f8a8 5002 	strh.w	r5, [r8, #2]
 80144a0:	f8a8 6004 	strh.w	r6, [r8, #4]
 80144a4:	f8a8 7006 	strh.w	r7, [r8, #6]
 80144a8:	f8c8 0008 	str.w	r0, [r8, #8]
 80144ac:	e738      	b.n	8014320 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 80144ae:	f004 fbab 	bl	8018c08 <_ZN8touchgfx12TextProviderC1Ev>
 80144b2:	682b      	ldr	r3, [r5, #0]
 80144b4:	4628      	mov	r0, r5
 80144b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80144b8:	4798      	blx	r3
 80144ba:	682b      	ldr	r3, [r5, #0]
 80144bc:	4607      	mov	r7, r0
 80144be:	4628      	mov	r0, r5
 80144c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80144c2:	4798      	blx	r3
 80144c4:	6823      	ldr	r3, [r4, #0]
 80144c6:	4683      	mov	fp, r0
 80144c8:	4620      	mov	r0, r4
 80144ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80144cc:	4798      	blx	r3
 80144ce:	6822      	ldr	r2, [r4, #0]
 80144d0:	9005      	str	r0, [sp, #20]
 80144d2:	4620      	mov	r0, r4
 80144d4:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80144d8:	4790      	blx	r2
 80144da:	9b05      	ldr	r3, [sp, #20]
 80144dc:	463a      	mov	r2, r7
 80144de:	4649      	mov	r1, r9
 80144e0:	9001      	str	r0, [sp, #4]
 80144e2:	a80f      	add	r0, sp, #60	; 0x3c
 80144e4:	9300      	str	r3, [sp, #0]
 80144e6:	465b      	mov	r3, fp
 80144e8:	f004 fbfe 	bl	8018ce8 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80144ec:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80144f0:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 80144f4:	af0f      	add	r7, sp, #60	; 0x3c
 80144f6:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80144fa:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80144fe:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8014500:	bf0a      	itet	eq
 8014502:	464a      	moveq	r2, r9
 8014504:	461a      	movne	r2, r3
 8014506:	4699      	moveq	r9, r3
 8014508:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 801450c:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 8014510:	1ad2      	subs	r2, r2, r3
 8014512:	6833      	ldr	r3, [r6, #0]
 8014514:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
 8014518:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801451c:	7859      	ldrb	r1, [r3, #1]
 801451e:	2300      	movs	r3, #0
 8014520:	9707      	str	r7, [sp, #28]
 8014522:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8014526:	f8ad 3018 	strh.w	r3, [sp, #24]
 801452a:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801452e:	f88d 1020 	strb.w	r1, [sp, #32]
 8014532:	9509      	str	r5, [sp, #36]	; 0x24
 8014534:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8014538:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801453c:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8014540:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8014544:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8014548:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801454c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8014550:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8014554:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8014558:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 801455c:	b350      	cbz	r0, 80145b4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 801455e:	682b      	ldr	r3, [r5, #0]
 8014560:	4628      	mov	r0, r5
 8014562:	695b      	ldr	r3, [r3, #20]
 8014564:	4798      	blx	r3
 8014566:	4607      	mov	r7, r0
 8014568:	b320      	cbz	r0, 80145b4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 801456a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801456c:	4639      	mov	r1, r7
 801456e:	6803      	ldr	r3, [r0, #0]
 8014570:	68db      	ldr	r3, [r3, #12]
 8014572:	4798      	blx	r3
 8014574:	4606      	mov	r6, r0
 8014576:	b1e8      	cbz	r0, 80145b4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8014578:	7b43      	ldrb	r3, [r0, #13]
 801457a:	7a82      	ldrb	r2, [r0, #10]
 801457c:	005b      	lsls	r3, r3, #1
 801457e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014582:	4313      	orrs	r3, r2
 8014584:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8014588:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 801458c:	2b06      	cmp	r3, #6
 801458e:	d111      	bne.n	80145b4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8014590:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014592:	4632      	mov	r2, r6
 8014594:	4639      	mov	r1, r7
 8014596:	6803      	ldr	r3, [r0, #0]
 8014598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801459a:	4798      	blx	r3
 801459c:	7b73      	ldrb	r3, [r6, #13]
 801459e:	005b      	lsls	r3, r3, #1
 80145a0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80145a4:	7ab3      	ldrb	r3, [r6, #10]
 80145a6:	4313      	orrs	r3, r2
 80145a8:	4418      	add	r0, r3
 80145aa:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80145ae:	4418      	add	r0, r3
 80145b0:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 80145b4:	2600      	movs	r6, #0
 80145b6:	4637      	mov	r7, r6
 80145b8:	a806      	add	r0, sp, #24
 80145ba:	3701      	adds	r7, #1
 80145bc:	f002 f88d 	bl	80166da <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80145c0:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 80145c4:	9b03      	ldr	r3, [sp, #12]
 80145c6:	b2bf      	uxth	r7, r7
 80145c8:	4286      	cmp	r6, r0
 80145ca:	eba9 0903 	sub.w	r9, r9, r3
 80145ce:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80145d2:	bfb8      	it	lt
 80145d4:	4606      	movlt	r6, r0
 80145d6:	fa0f f989 	sxth.w	r9, r9
 80145da:	b236      	sxth	r6, r6
 80145dc:	2b00      	cmp	r3, #0
 80145de:	f43f af0d 	beq.w	80143fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 80145e2:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	f47f af08 	bne.w	80143fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 80145ec:	7a2b      	ldrb	r3, [r5, #8]
 80145ee:	444b      	add	r3, r9
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	dce1      	bgt.n	80145b8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 80145f4:	e702      	b.n	80143fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 80145f6:	bf00      	nop
 80145f8:	2400eb2c 	.word	0x2400eb2c
 80145fc:	2400eb28 	.word	0x2400eb28
 8014600:	2400eb30 	.word	0x2400eb30
 8014604:	2400eb34 	.word	0x2400eb34
 8014608:	ebaa 0606 	sub.w	r6, sl, r6
 801460c:	2002      	movs	r0, #2
 801460e:	fb96 f6f0 	sdiv	r6, r6, r0
 8014612:	e71c      	b.n	801444e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8014614:	441e      	add	r6, r3
 8014616:	ebaa 0606 	sub.w	r6, sl, r6
 801461a:	e718      	b.n	801444e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 801461c:	8925      	ldrh	r5, [r4, #8]
 801461e:	1aed      	subs	r5, r5, r3
 8014620:	eba5 050a 	sub.w	r5, r5, sl
 8014624:	fa0f fb85 	sxth.w	fp, r5
 8014628:	8965      	ldrh	r5, [r4, #10]
 801462a:	eba5 0509 	sub.w	r5, r5, r9
 801462e:	b22d      	sxth	r5, r5
 8014630:	e72d      	b.n	801448e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8014632:	8965      	ldrh	r5, [r4, #10]
 8014634:	f04f 0b00 	mov.w	fp, #0
 8014638:	1aed      	subs	r5, r5, r3
 801463a:	4633      	mov	r3, r6
 801463c:	463e      	mov	r6, r7
 801463e:	eba5 050a 	sub.w	r5, r5, sl
 8014642:	461f      	mov	r7, r3
 8014644:	b22d      	sxth	r5, r5
 8014646:	e722      	b.n	801448e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8014648:	2500      	movs	r5, #0
 801464a:	e720      	b.n	801448e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

0801464c <_ZN8touchgfx8TextAreaD0Ev>:
 801464c:	b510      	push	{r4, lr}
 801464e:	4604      	mov	r4, r0
 8014650:	2148      	movs	r1, #72	; 0x48
 8014652:	f00e fb18 	bl	8022c86 <_ZdlPvj>
 8014656:	4620      	mov	r0, r4
 8014658:	bd10      	pop	{r4, pc}
	...

0801465c <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 801465c:	b513      	push	{r0, r1, r4, lr}
 801465e:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8014662:	4604      	mov	r4, r0
 8014664:	b1fb      	cbz	r3, 80146a6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8014666:	4b16      	ldr	r3, [pc, #88]	; (80146c0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8014668:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801466a:	881b      	ldrh	r3, [r3, #0]
 801466c:	428b      	cmp	r3, r1
 801466e:	d91a      	bls.n	80146a6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8014670:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8014674:	2b00      	cmp	r3, #0
 8014676:	dd16      	ble.n	80146a6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8014678:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801467c:	2b00      	cmp	r3, #0
 801467e:	dd12      	ble.n	80146a6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8014680:	4b10      	ldr	r3, [pc, #64]	; (80146c4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 8014682:	6818      	ldr	r0, [r3, #0]
 8014684:	f7f2 f888 	bl	8006798 <_ZNK8touchgfx5Texts7getTextEt>
 8014688:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 801468c:	6822      	ldr	r2, [r4, #0]
 801468e:	2b00      	cmp	r3, #0
 8014690:	db06      	blt.n	80146a0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8014692:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8014696:	2b00      	cmp	r3, #0
 8014698:	db02      	blt.n	80146a0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 801469a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801469c:	4298      	cmp	r0, r3
 801469e:	d004      	beq.n	80146aa <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 80146a0:	6953      	ldr	r3, [r2, #20]
 80146a2:	4620      	mov	r0, r4
 80146a4:	4798      	blx	r3
 80146a6:	b002      	add	sp, #8
 80146a8:	bd10      	pop	{r4, pc}
 80146aa:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 80146ae:	466b      	mov	r3, sp
 80146b0:	6912      	ldr	r2, [r2, #16]
 80146b2:	c903      	ldmia	r1, {r0, r1}
 80146b4:	e883 0003 	stmia.w	r3, {r0, r1}
 80146b8:	4619      	mov	r1, r3
 80146ba:	4620      	mov	r0, r4
 80146bc:	4790      	blx	r2
 80146be:	e7f2      	b.n	80146a6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80146c0:	2400eb2c 	.word	0x2400eb2c
 80146c4:	2400eb34 	.word	0x2400eb34

080146c8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 80146c8:	4b45      	ldr	r3, [pc, #276]	; (80147e0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 80146ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146ce:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80146d0:	b08e      	sub	sp, #56	; 0x38
 80146d2:	881b      	ldrh	r3, [r3, #0]
 80146d4:	4604      	mov	r4, r0
 80146d6:	4293      	cmp	r3, r2
 80146d8:	d97e      	bls.n	80147d8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80146da:	6808      	ldr	r0, [r1, #0]
 80146dc:	ab05      	add	r3, sp, #20
 80146de:	6849      	ldr	r1, [r1, #4]
 80146e0:	4d40      	ldr	r5, [pc, #256]	; (80147e4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 80146e2:	c303      	stmia	r3!, {r0, r1}
 80146e4:	4611      	mov	r1, r2
 80146e6:	6828      	ldr	r0, [r5, #0]
 80146e8:	f7f2 f856 	bl	8006798 <_ZNK8touchgfx5Texts7getTextEt>
 80146ec:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	db11      	blt.n	8014718 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80146f4:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	db0d      	blt.n	8014718 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80146fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80146fe:	4298      	cmp	r0, r3
 8014700:	d10a      	bne.n	8014718 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8014702:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8014706:	ab09      	add	r3, sp, #36	; 0x24
 8014708:	e892 0003 	ldmia.w	r2, {r0, r1}
 801470c:	e883 0003 	stmia.w	r3, {r0, r1}
 8014710:	4619      	mov	r1, r3
 8014712:	a805      	add	r0, sp, #20
 8014714:	f7fc fe1e 	bl	8011354 <_ZN8touchgfx4RectaNERKS0_>
 8014718:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801471c:	2b00      	cmp	r3, #0
 801471e:	dd5b      	ble.n	80147d8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8014720:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8014724:	2b00      	cmp	r3, #0
 8014726:	dd57      	ble.n	80147d8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8014728:	4f2f      	ldr	r7, [pc, #188]	; (80147e8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 801472a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801472c:	683b      	ldr	r3, [r7, #0]
 801472e:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8014732:	4b2e      	ldr	r3, [pc, #184]	; (80147ec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801473a:	2e00      	cmp	r6, #0
 801473c:	d04c      	beq.n	80147d8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801473e:	6823      	ldr	r3, [r4, #0]
 8014740:	4620      	mov	r0, r4
 8014742:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 8014746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014748:	4798      	blx	r3
 801474a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801474c:	683b      	ldr	r3, [r7, #0]
 801474e:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 8014752:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8014756:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 801475a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 801475e:	785b      	ldrb	r3, [r3, #1]
 8014760:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 8014764:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8014768:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801476a:	9609      	str	r6, [sp, #36]	; 0x24
 801476c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014770:	4b1f      	ldr	r3, [pc, #124]	; (80147f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 8014772:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 801477c:	910b      	str	r1, [sp, #44]	; 0x2c
 801477e:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 8014782:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 8014786:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 801478a:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 801478e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8014792:	b10a      	cbz	r2, 8014798 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 8014794:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8014796:	b906      	cbnz	r6, 801479a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 8014798:	689e      	ldr	r6, [r3, #8]
 801479a:	af07      	add	r7, sp, #28
 801479c:	4621      	mov	r1, r4
 801479e:	4638      	mov	r0, r7
 80147a0:	f003 fdaa 	bl	80182f8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80147a4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80147a6:	6828      	ldr	r0, [r5, #0]
 80147a8:	f7f1 fff6 	bl	8006798 <_ZNK8touchgfx5Texts7getTextEt>
 80147ac:	6823      	ldr	r3, [r4, #0]
 80147ae:	4605      	mov	r5, r0
 80147b0:	4620      	mov	r0, r4
 80147b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80147b4:	4798      	blx	r3
 80147b6:	6823      	ldr	r3, [r4, #0]
 80147b8:	4680      	mov	r8, r0
 80147ba:	4620      	mov	r0, r4
 80147bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80147c0:	4798      	blx	r3
 80147c2:	ab09      	add	r3, sp, #36	; 0x24
 80147c4:	9501      	str	r5, [sp, #4]
 80147c6:	9300      	str	r3, [sp, #0]
 80147c8:	ab05      	add	r3, sp, #20
 80147ca:	e9cd 8002 	strd	r8, r0, [sp, #8]
 80147ce:	4630      	mov	r0, r6
 80147d0:	e897 0006 	ldmia.w	r7, {r1, r2}
 80147d4:	f7f1 ff92 	bl	80066fc <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80147d8:	b00e      	add	sp, #56	; 0x38
 80147da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147de:	bf00      	nop
 80147e0:	2400eb2c 	.word	0x2400eb2c
 80147e4:	2400eb34 	.word	0x2400eb34
 80147e8:	2400eb28 	.word	0x2400eb28
 80147ec:	2400eb30 	.word	0x2400eb30
 80147f0:	2400ead0 	.word	0x2400ead0

080147f4 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 80147f4:	b570      	push	{r4, r5, r6, lr}
 80147f6:	6803      	ldr	r3, [r0, #0]
 80147f8:	4604      	mov	r4, r0
 80147fa:	4615      	mov	r5, r2
 80147fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80147fe:	4798      	blx	r3
 8014800:	6823      	ldr	r3, [r4, #0]
 8014802:	4629      	mov	r1, r5
 8014804:	4620      	mov	r0, r4
 8014806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014808:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801480c:	4718      	bx	r3
	...

08014810 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8014810:	b538      	push	{r3, r4, r5, lr}
 8014812:	4b0e      	ldr	r3, [pc, #56]	; (801484c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8014814:	4604      	mov	r4, r0
 8014816:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8014818:	881b      	ldrh	r3, [r3, #0]
 801481a:	429a      	cmp	r2, r3
 801481c:	d214      	bcs.n	8014848 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 801481e:	6803      	ldr	r3, [r0, #0]
 8014820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014822:	4798      	blx	r3
 8014824:	6823      	ldr	r3, [r4, #0]
 8014826:	4605      	mov	r5, r0
 8014828:	4620      	mov	r0, r4
 801482a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801482c:	4798      	blx	r3
 801482e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014832:	b22d      	sxth	r5, r5
 8014834:	4601      	mov	r1, r0
 8014836:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801483a:	bf06      	itte	eq
 801483c:	4602      	moveq	r2, r0
 801483e:	4629      	moveq	r1, r5
 8014840:	462a      	movne	r2, r5
 8014842:	4620      	mov	r0, r4
 8014844:	f7ff ffd6 	bl	80147f4 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8014848:	bd38      	pop	{r3, r4, r5, pc}
 801484a:	bf00      	nop
 801484c:	2400eb2c 	.word	0x2400eb2c

08014850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8014850:	b530      	push	{r4, r5, lr}
 8014852:	888b      	ldrh	r3, [r1, #4]
 8014854:	b085      	sub	sp, #20
 8014856:	4604      	mov	r4, r0
 8014858:	8583      	strh	r3, [r0, #44]	; 0x2c
 801485a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801485e:	b923      	cbnz	r3, 801486a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8014860:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8014864:	b90b      	cbnz	r3, 801486a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8014866:	f7ff ffd3 	bl	8014810 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801486a:	6823      	ldr	r3, [r4, #0]
 801486c:	466d      	mov	r5, sp
 801486e:	4621      	mov	r1, r4
 8014870:	343c      	adds	r4, #60	; 0x3c
 8014872:	4628      	mov	r0, r5
 8014874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014878:	4798      	blx	r3
 801487a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801487e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014882:	b005      	add	sp, #20
 8014884:	bd30      	pop	{r4, r5, pc}

08014886 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8014886:	2300      	movs	r3, #0
 8014888:	8083      	strh	r3, [r0, #4]
 801488a:	80c3      	strh	r3, [r0, #6]
 801488c:	8003      	strh	r3, [r0, #0]
 801488e:	8043      	strh	r3, [r0, #2]
 8014890:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8014894:	2bff      	cmp	r3, #255	; 0xff
 8014896:	bf01      	itttt	eq
 8014898:	890b      	ldrheq	r3, [r1, #8]
 801489a:	8083      	strheq	r3, [r0, #4]
 801489c:	894b      	ldrheq	r3, [r1, #10]
 801489e:	80c3      	strheq	r3, [r0, #6]
 80148a0:	4770      	bx	lr
	...

080148a4 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80148a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80148a6:	4604      	mov	r4, r0
 80148a8:	466b      	mov	r3, sp
 80148aa:	6808      	ldr	r0, [r1, #0]
 80148ac:	6849      	ldr	r1, [r1, #4]
 80148ae:	c303      	stmia	r3!, {r0, r1}
 80148b0:	6823      	ldr	r3, [r4, #0]
 80148b2:	4669      	mov	r1, sp
 80148b4:	4620      	mov	r0, r4
 80148b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148b8:	4798      	blx	r3
 80148ba:	4b08      	ldr	r3, [pc, #32]	; (80148dc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80148c2:	b10a      	cbz	r2, 80148c8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80148c4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80148c6:	b900      	cbnz	r0, 80148ca <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80148c8:	6898      	ldr	r0, [r3, #8]
 80148ca:	6803      	ldr	r3, [r0, #0]
 80148cc:	4669      	mov	r1, sp
 80148ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80148d0:	6a1d      	ldr	r5, [r3, #32]
 80148d2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80148d6:	47a8      	blx	r5
 80148d8:	b003      	add	sp, #12
 80148da:	bd30      	pop	{r4, r5, pc}
 80148dc:	2400ead0 	.word	0x2400ead0

080148e0 <_ZN8touchgfx3BoxD1Ev>:
 80148e0:	4770      	bx	lr

080148e2 <_ZN8touchgfx3BoxD0Ev>:
 80148e2:	b510      	push	{r4, lr}
 80148e4:	4604      	mov	r4, r0
 80148e6:	212c      	movs	r1, #44	; 0x2c
 80148e8:	f00e f9cd 	bl	8022c86 <_ZdlPvj>
 80148ec:	4620      	mov	r0, r4
 80148ee:	bd10      	pop	{r4, pc}

080148f0 <_ZNK8touchgfx3Box17invalidateContentEv>:
 80148f0:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 80148f4:	b12a      	cbz	r2, 8014902 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80148f6:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80148fa:	b112      	cbz	r2, 8014902 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80148fc:	6803      	ldr	r3, [r0, #0]
 80148fe:	695b      	ldr	r3, [r3, #20]
 8014900:	4718      	bx	r3
 8014902:	4770      	bx	lr

08014904 <_ZN8touchgfx13BoxWithBorderD1Ev>:
 8014904:	4770      	bx	lr

08014906 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 8014906:	b510      	push	{r4, lr}
 8014908:	4604      	mov	r4, r0
 801490a:	2134      	movs	r1, #52	; 0x34
 801490c:	f00e f9bb 	bl	8022c86 <_ZdlPvj>
 8014910:	4620      	mov	r0, r4
 8014912:	bd10      	pop	{r4, pc}

08014914 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 8014914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014918:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801491a:	4604      	mov	r4, r0
 801491c:	460e      	mov	r6, r1
 801491e:	b08e      	sub	sp, #56	; 0x38
 8014920:	b218      	sxth	r0, r3
 8014922:	8921      	ldrh	r1, [r4, #8]
 8014924:	005b      	lsls	r3, r3, #1
 8014926:	8962      	ldrh	r2, [r4, #10]
 8014928:	f8ad 0000 	strh.w	r0, [sp]
 801492c:	b29b      	uxth	r3, r3
 801492e:	f8ad 0002 	strh.w	r0, [sp, #2]
 8014932:	1ac9      	subs	r1, r1, r3
 8014934:	1ad3      	subs	r3, r2, r3
 8014936:	b209      	sxth	r1, r1
 8014938:	b21b      	sxth	r3, r3
 801493a:	2900      	cmp	r1, #0
 801493c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8014940:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014944:	dd5e      	ble.n	8014a04 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8014946:	2b00      	cmp	r3, #0
 8014948:	dd5c      	ble.n	8014a04 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801494a:	6830      	ldr	r0, [r6, #0]
 801494c:	ab02      	add	r3, sp, #8
 801494e:	6871      	ldr	r1, [r6, #4]
 8014950:	c303      	stmia	r3!, {r0, r1}
 8014952:	4669      	mov	r1, sp
 8014954:	a802      	add	r0, sp, #8
 8014956:	f7fc fcfd 	bl	8011354 <_ZN8touchgfx4RectaNERKS0_>
 801495a:	4620      	mov	r0, r4
 801495c:	a902      	add	r1, sp, #8
 801495e:	f7ff ffa1 	bl	80148a4 <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 8014962:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8014964:	2800      	cmp	r0, #0
 8014966:	d05f      	beq.n	8014a28 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8014968:	8963      	ldrh	r3, [r4, #10]
 801496a:	b202      	sxth	r2, r0
 801496c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8014970:	2500      	movs	r5, #0
 8014972:	1a1f      	subs	r7, r3, r0
 8014974:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8014978:	f8ad 101c 	strh.w	r1, [sp, #28]
 801497c:	b21b      	sxth	r3, r3
 801497e:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8014982:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8014986:	af04      	add	r7, sp, #16
 8014988:	1a09      	subs	r1, r1, r0
 801498a:	9506      	str	r5, [sp, #24]
 801498c:	f8ad 201e 	strh.w	r2, [sp, #30]
 8014990:	f8ad 5020 	strh.w	r5, [sp, #32]
 8014994:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8014998:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 801499c:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 80149a0:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80149a4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80149a8:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 80149ac:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 80149b0:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80149b4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80149b8:	ab06      	add	r3, sp, #24
 80149ba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80149be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80149c2:	e887 0003 	stmia.w	r7, {r0, r1}
 80149c6:	4631      	mov	r1, r6
 80149c8:	4638      	mov	r0, r7
 80149ca:	f7fc fcc3 	bl	8011354 <_ZN8touchgfx4RectaNERKS0_>
 80149ce:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	dd12      	ble.n	80149fc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 80149d6:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80149da:	2b00      	cmp	r3, #0
 80149dc:	dd0e      	ble.n	80149fc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 80149de:	6823      	ldr	r3, [r4, #0]
 80149e0:	4639      	mov	r1, r7
 80149e2:	4620      	mov	r0, r4
 80149e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149e6:	4798      	blx	r3
 80149e8:	f7fc ff84 	bl	80118f4 <_ZN8touchgfx3HAL3lcdEv>
 80149ec:	6803      	ldr	r3, [r0, #0]
 80149ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80149f0:	4639      	mov	r1, r7
 80149f2:	f8d3 8020 	ldr.w	r8, [r3, #32]
 80149f6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80149fa:	47c0      	blx	r8
 80149fc:	3501      	adds	r5, #1
 80149fe:	2d04      	cmp	r5, #4
 8014a00:	d1da      	bne.n	80149b8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 8014a02:	e011      	b.n	8014a28 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8014a04:	6830      	ldr	r0, [r6, #0]
 8014a06:	ab06      	add	r3, sp, #24
 8014a08:	6871      	ldr	r1, [r6, #4]
 8014a0a:	c303      	stmia	r3!, {r0, r1}
 8014a0c:	6823      	ldr	r3, [r4, #0]
 8014a0e:	a906      	add	r1, sp, #24
 8014a10:	4620      	mov	r0, r4
 8014a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a14:	4798      	blx	r3
 8014a16:	f7fc ff6d 	bl	80118f4 <_ZN8touchgfx3HAL3lcdEv>
 8014a1a:	6803      	ldr	r3, [r0, #0]
 8014a1c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014a1e:	a906      	add	r1, sp, #24
 8014a20:	6a1d      	ldr	r5, [r3, #32]
 8014a22:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8014a26:	47a8      	blx	r5
 8014a28:	b00e      	add	sp, #56	; 0x38
 8014a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014a2e <_ZN8touchgfx5ImageD1Ev>:
 8014a2e:	4770      	bx	lr

08014a30 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8014a30:	b570      	push	{r4, r5, r6, lr}
 8014a32:	880b      	ldrh	r3, [r1, #0]
 8014a34:	460d      	mov	r5, r1
 8014a36:	4604      	mov	r4, r0
 8014a38:	84c3      	strh	r3, [r0, #38]	; 0x26
 8014a3a:	4608      	mov	r0, r1
 8014a3c:	f005 fd26 	bl	801a48c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014a40:	4606      	mov	r6, r0
 8014a42:	4628      	mov	r0, r5
 8014a44:	f005 fd56 	bl	801a4f4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014a48:	6823      	ldr	r3, [r4, #0]
 8014a4a:	4605      	mov	r5, r0
 8014a4c:	4631      	mov	r1, r6
 8014a4e:	4620      	mov	r0, r4
 8014a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014a52:	4798      	blx	r3
 8014a54:	6823      	ldr	r3, [r4, #0]
 8014a56:	4629      	mov	r1, r5
 8014a58:	4620      	mov	r0, r4
 8014a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014a5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014a60:	4718      	bx	r3

08014a62 <_ZN8touchgfx5ImageD0Ev>:
 8014a62:	b510      	push	{r4, lr}
 8014a64:	4604      	mov	r4, r0
 8014a66:	212c      	movs	r1, #44	; 0x2c
 8014a68:	f00e f90d 	bl	8022c86 <_ZdlPvj>
 8014a6c:	4620      	mov	r0, r4
 8014a6e:	bd10      	pop	{r4, pc}

08014a70 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8014a70:	b510      	push	{r4, lr}
 8014a72:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8014a76:	4604      	mov	r4, r0
 8014a78:	2bff      	cmp	r3, #255	; 0xff
 8014a7a:	d006      	beq.n	8014a8a <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	8003      	strh	r3, [r0, #0]
 8014a80:	8043      	strh	r3, [r0, #2]
 8014a82:	8083      	strh	r3, [r0, #4]
 8014a84:	80c3      	strh	r3, [r0, #6]
 8014a86:	4620      	mov	r0, r4
 8014a88:	bd10      	pop	{r4, pc}
 8014a8a:	3126      	adds	r1, #38	; 0x26
 8014a8c:	f005 fd66 	bl	801a55c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8014a90:	e7f9      	b.n	8014a86 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08014a92 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8014a92:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8014a96:	b12a      	cbz	r2, 8014aa4 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8014a98:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8014a9c:	b112      	cbz	r2, 8014aa4 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8014a9e:	6803      	ldr	r3, [r0, #0]
 8014aa0:	695b      	ldr	r3, [r3, #20]
 8014aa2:	4718      	bx	r3
 8014aa4:	4770      	bx	lr
	...

08014aa8 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8014aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014aac:	4604      	mov	r4, r0
 8014aae:	b088      	sub	sp, #32
 8014ab0:	2500      	movs	r5, #0
 8014ab2:	460f      	mov	r7, r1
 8014ab4:	f854 3b26 	ldr.w	r3, [r4], #38
 8014ab8:	a904      	add	r1, sp, #16
 8014aba:	4606      	mov	r6, r0
 8014abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014abe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8014ac2:	4798      	blx	r3
 8014ac4:	4620      	mov	r0, r4
 8014ac6:	f005 fce1 	bl	801a48c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014aca:	4680      	mov	r8, r0
 8014acc:	4620      	mov	r0, r4
 8014ace:	f005 fd11 	bl	801a4f4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014ad2:	9506      	str	r5, [sp, #24]
 8014ad4:	ad06      	add	r5, sp, #24
 8014ad6:	f8ad 001e 	strh.w	r0, [sp, #30]
 8014ada:	4639      	mov	r1, r7
 8014adc:	f8ad 801c 	strh.w	r8, [sp, #28]
 8014ae0:	4628      	mov	r0, r5
 8014ae2:	f7fc fc37 	bl	8011354 <_ZN8touchgfx4RectaNERKS0_>
 8014ae6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	dd19      	ble.n	8014b22 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8014aee:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	dd15      	ble.n	8014b22 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8014af6:	4b0c      	ldr	r3, [pc, #48]	; (8014b28 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8014afe:	b10a      	cbz	r2, 8014b04 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8014b00:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8014b02:	b900      	cbnz	r0, 8014b06 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8014b04:	6898      	ldr	r0, [r3, #8]
 8014b06:	2701      	movs	r7, #1
 8014b08:	6801      	ldr	r1, [r0, #0]
 8014b0a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8014b0e:	9702      	str	r7, [sp, #8]
 8014b10:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8014b14:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8014b18:	e9cd 5600 	strd	r5, r6, [sp]
 8014b1c:	688d      	ldr	r5, [r1, #8]
 8014b1e:	4621      	mov	r1, r4
 8014b20:	47a8      	blx	r5
 8014b22:	b008      	add	sp, #32
 8014b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b28:	2400ead0 	.word	0x2400ead0

08014b2c <_ZN8touchgfx7OutlineD1Ev>:
 8014b2c:	4770      	bx	lr

08014b2e <_ZN8touchgfx7OutlineD0Ev>:
 8014b2e:	b510      	push	{r4, lr}
 8014b30:	4604      	mov	r4, r0
 8014b32:	2130      	movs	r1, #48	; 0x30
 8014b34:	f00e f8a7 	bl	8022c86 <_ZdlPvj>
 8014b38:	4620      	mov	r0, r4
 8014b3a:	bd10      	pop	{r4, pc}

08014b3c <_ZN8touchgfx7Outline5resetEv>:
 8014b3c:	b510      	push	{r4, lr}
 8014b3e:	4604      	mov	r4, r0
 8014b40:	f000 fe86 	bl	8015850 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8014b44:	60e0      	str	r0, [r4, #12]
 8014b46:	f000 fe89 	bl	801585c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8014b4a:	68e3      	ldr	r3, [r4, #12]
 8014b4c:	08c0      	lsrs	r0, r0, #3
 8014b4e:	2200      	movs	r2, #0
 8014b50:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8014b54:	6123      	str	r3, [r4, #16]
 8014b56:	3801      	subs	r0, #1
 8014b58:	60a2      	str	r2, [r4, #8]
 8014b5a:	6060      	str	r0, [r4, #4]
 8014b5c:	8019      	strh	r1, [r3, #0]
 8014b5e:	8059      	strh	r1, [r3, #2]
 8014b60:	809a      	strh	r2, [r3, #4]
 8014b62:	80da      	strh	r2, [r3, #6]
 8014b64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014b66:	f023 0301 	bic.w	r3, r3, #1
 8014b6a:	f043 0302 	orr.w	r3, r3, #2
 8014b6e:	6263      	str	r3, [r4, #36]	; 0x24
 8014b70:	bd10      	pop	{r4, pc}
	...

08014b74 <_ZN8touchgfx7OutlineC1Ev>:
 8014b74:	4b0a      	ldr	r3, [pc, #40]	; (8014ba0 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8014b76:	b510      	push	{r4, lr}
 8014b78:	6003      	str	r3, [r0, #0]
 8014b7a:	2300      	movs	r3, #0
 8014b7c:	4604      	mov	r4, r0
 8014b7e:	6243      	str	r3, [r0, #36]	; 0x24
 8014b80:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8014b84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014b88:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8014b8c:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8014b90:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014b94:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 8014b98:	f7ff ffd0 	bl	8014b3c <_ZN8touchgfx7Outline5resetEv>
 8014b9c:	4620      	mov	r0, r4
 8014b9e:	bd10      	pop	{r4, pc}
 8014ba0:	08025fac 	.word	0x08025fac

08014ba4 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8014ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ba8:	b093      	sub	sp, #76	; 0x4c
 8014baa:	1156      	asrs	r6, r2, #5
 8014bac:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8014bae:	9305      	str	r3, [sp, #20]
 8014bb0:	1153      	asrs	r3, r2, #5
 8014bb2:	f004 051f 	and.w	r5, r4, #31
 8014bb6:	9303      	str	r3, [sp, #12]
 8014bb8:	1163      	asrs	r3, r4, #5
 8014bba:	9504      	str	r5, [sp, #16]
 8014bbc:	1165      	asrs	r5, r4, #5
 8014bbe:	9306      	str	r3, [sp, #24]
 8014bc0:	f002 031f 	and.w	r3, r2, #31
 8014bc4:	42ae      	cmp	r6, r5
 8014bc6:	f040 80f4 	bne.w	8014db2 <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 8014bca:	9c04      	ldr	r4, [sp, #16]
 8014bcc:	9a05      	ldr	r2, [sp, #20]
 8014bce:	42a3      	cmp	r3, r4
 8014bd0:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8014bd4:	6902      	ldr	r2, [r0, #16]
 8014bd6:	d125      	bne.n	8014c24 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8014bd8:	f9b2 3000 	ldrsh.w	r3, [r2]
 8014bdc:	459e      	cmp	lr, r3
 8014bde:	d103      	bne.n	8014be8 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 8014be0:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8014be4:	429e      	cmp	r6, r3
 8014be6:	d035      	beq.n	8014c54 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8014be8:	88d1      	ldrh	r1, [r2, #6]
 8014bea:	8893      	ldrh	r3, [r2, #4]
 8014bec:	430b      	orrs	r3, r1
 8014bee:	d010      	beq.n	8014c12 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8014bf0:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	db0c      	blt.n	8014c12 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8014bf8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8014bfa:	428b      	cmp	r3, r1
 8014bfc:	da09      	bge.n	8014c12 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8014bfe:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8014c02:	428b      	cmp	r3, r1
 8014c04:	f103 0301 	add.w	r3, r3, #1
 8014c08:	bf38      	it	cc
 8014c0a:	3208      	addcc	r2, #8
 8014c0c:	6083      	str	r3, [r0, #8]
 8014c0e:	bf38      	it	cc
 8014c10:	6102      	strcc	r2, [r0, #16]
 8014c12:	6903      	ldr	r3, [r0, #16]
 8014c14:	9a03      	ldr	r2, [sp, #12]
 8014c16:	f8a3 e000 	strh.w	lr, [r3]
 8014c1a:	805a      	strh	r2, [r3, #2]
 8014c1c:	2200      	movs	r2, #0
 8014c1e:	809a      	strh	r2, [r3, #4]
 8014c20:	80da      	strh	r2, [r3, #6]
 8014c22:	e017      	b.n	8014c54 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8014c24:	9c05      	ldr	r4, [sp, #20]
 8014c26:	114e      	asrs	r6, r1, #5
 8014c28:	f001 0c1f 	and.w	ip, r1, #31
 8014c2c:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8014c30:	f004 041f 	and.w	r4, r4, #31
 8014c34:	4576      	cmp	r6, lr
 8014c36:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 8014c3a:	9402      	str	r4, [sp, #8]
 8014c3c:	9c04      	ldr	r4, [sp, #16]
 8014c3e:	eba4 0403 	sub.w	r4, r4, r3
 8014c42:	d10a      	bne.n	8014c5a <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 8014c44:	9b02      	ldr	r3, [sp, #8]
 8014c46:	44a0      	add	r8, r4
 8014c48:	449c      	add	ip, r3
 8014c4a:	f8a2 8004 	strh.w	r8, [r2, #4]
 8014c4e:	fb04 a40c 	mla	r4, r4, ip, sl
 8014c52:	80d4      	strh	r4, [r2, #6]
 8014c54:	b013      	add	sp, #76	; 0x4c
 8014c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c5a:	9d05      	ldr	r5, [sp, #20]
 8014c5c:	1a69      	subs	r1, r5, r1
 8014c5e:	bf51      	iteee	pl
 8014c60:	f1cc 0520 	rsbpl	r5, ip, #32
 8014c64:	fb04 f40c 	mulmi.w	r4, r4, ip
 8014c68:	4249      	negmi	r1, r1
 8014c6a:	2500      	movmi	r5, #0
 8014c6c:	bf5d      	ittte	pl
 8014c6e:	436c      	mulpl	r4, r5
 8014c70:	2520      	movpl	r5, #32
 8014c72:	f04f 0901 	movpl.w	r9, #1
 8014c76:	f04f 39ff 	movmi.w	r9, #4294967295
 8014c7a:	9501      	str	r5, [sp, #4]
 8014c7c:	9f01      	ldr	r7, [sp, #4]
 8014c7e:	444e      	add	r6, r9
 8014c80:	fb94 f5f1 	sdiv	r5, r4, r1
 8014c84:	fb01 4415 	mls	r4, r1, r5, r4
 8014c88:	44bc      	add	ip, r7
 8014c8a:	2c00      	cmp	r4, #0
 8014c8c:	bfbc      	itt	lt
 8014c8e:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8014c92:	1864      	addlt	r4, r4, r1
 8014c94:	44a8      	add	r8, r5
 8014c96:	fb05 ac0c 	mla	ip, r5, ip, sl
 8014c9a:	f8a2 8004 	strh.w	r8, [r2, #4]
 8014c9e:	f8a2 c006 	strh.w	ip, [r2, #6]
 8014ca2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014ca6:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8014caa:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8014cae:	ea58 0202 	orrs.w	r2, r8, r2
 8014cb2:	d011      	beq.n	8014cd8 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8014cb4:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8014cb8:	f1b8 0f00 	cmp.w	r8, #0
 8014cbc:	db0c      	blt.n	8014cd8 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8014cbe:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8014cc0:	4590      	cmp	r8, r2
 8014cc2:	da09      	bge.n	8014cd8 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8014cc4:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8014cc8:	4590      	cmp	r8, r2
 8014cca:	bf3c      	itt	cc
 8014ccc:	f10c 0208 	addcc.w	r2, ip, #8
 8014cd0:	6102      	strcc	r2, [r0, #16]
 8014cd2:	f108 0201 	add.w	r2, r8, #1
 8014cd6:	6082      	str	r2, [r0, #8]
 8014cd8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014cdc:	2700      	movs	r7, #0
 8014cde:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8014ce2:	45b6      	cmp	lr, r6
 8014ce4:	f8ac 6000 	strh.w	r6, [ip]
 8014ce8:	442b      	add	r3, r5
 8014cea:	f8ac 2002 	strh.w	r2, [ip, #2]
 8014cee:	f8ac 7004 	strh.w	r7, [ip, #4]
 8014cf2:	f8ac 7006 	strh.w	r7, [ip, #6]
 8014cf6:	d04b      	beq.n	8014d90 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8014cf8:	9f04      	ldr	r7, [sp, #16]
 8014cfa:	1a64      	subs	r4, r4, r1
 8014cfc:	f04f 0a00 	mov.w	sl, #0
 8014d00:	1aff      	subs	r7, r7, r3
 8014d02:	443d      	add	r5, r7
 8014d04:	016d      	lsls	r5, r5, #5
 8014d06:	fb95 f8f1 	sdiv	r8, r5, r1
 8014d0a:	fb01 5518 	mls	r5, r1, r8, r5
 8014d0e:	2d00      	cmp	r5, #0
 8014d10:	bfbc      	itt	lt
 8014d12:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8014d16:	186d      	addlt	r5, r5, r1
 8014d18:	f108 0701 	add.w	r7, r8, #1
 8014d1c:	9703      	str	r7, [sp, #12]
 8014d1e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014d22:	1964      	adds	r4, r4, r5
 8014d24:	444e      	add	r6, r9
 8014d26:	bf54      	ite	pl
 8014d28:	9f03      	ldrpl	r7, [sp, #12]
 8014d2a:	4647      	movmi	r7, r8
 8014d2c:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8014d30:	bf58      	it	pl
 8014d32:	1a64      	subpl	r4, r4, r1
 8014d34:	443b      	add	r3, r7
 8014d36:	44bb      	add	fp, r7
 8014d38:	f8ac b004 	strh.w	fp, [ip, #4]
 8014d3c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8014d40:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8014d44:	f8ac b006 	strh.w	fp, [ip, #6]
 8014d48:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014d4c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8014d50:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8014d54:	ea5b 0707 	orrs.w	r7, fp, r7
 8014d58:	d011      	beq.n	8014d7e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8014d5a:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8014d5e:	f1bb 0f00 	cmp.w	fp, #0
 8014d62:	db0c      	blt.n	8014d7e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8014d64:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8014d66:	45bb      	cmp	fp, r7
 8014d68:	da09      	bge.n	8014d7e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8014d6a:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8014d6e:	45bb      	cmp	fp, r7
 8014d70:	bf3c      	itt	cc
 8014d72:	f10c 0708 	addcc.w	r7, ip, #8
 8014d76:	6107      	strcc	r7, [r0, #16]
 8014d78:	f10b 0701 	add.w	r7, fp, #1
 8014d7c:	6087      	str	r7, [r0, #8]
 8014d7e:	6907      	ldr	r7, [r0, #16]
 8014d80:	45b6      	cmp	lr, r6
 8014d82:	803e      	strh	r6, [r7, #0]
 8014d84:	807a      	strh	r2, [r7, #2]
 8014d86:	f8a7 a004 	strh.w	sl, [r7, #4]
 8014d8a:	f8a7 a006 	strh.w	sl, [r7, #6]
 8014d8e:	d1c6      	bne.n	8014d1e <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 8014d90:	9a04      	ldr	r2, [sp, #16]
 8014d92:	1ad3      	subs	r3, r2, r3
 8014d94:	6902      	ldr	r2, [r0, #16]
 8014d96:	8891      	ldrh	r1, [r2, #4]
 8014d98:	88d6      	ldrh	r6, [r2, #6]
 8014d9a:	4419      	add	r1, r3
 8014d9c:	8091      	strh	r1, [r2, #4]
 8014d9e:	9902      	ldr	r1, [sp, #8]
 8014da0:	f101 0c20 	add.w	ip, r1, #32
 8014da4:	9901      	ldr	r1, [sp, #4]
 8014da6:	ebac 0c01 	sub.w	ip, ip, r1
 8014daa:	fb03 630c 	mla	r3, r3, ip, r6
 8014dae:	80d3      	strh	r3, [r2, #6]
 8014db0:	e750      	b.n	8014c54 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8014db2:	9d05      	ldr	r5, [sp, #20]
 8014db4:	1aa2      	subs	r2, r4, r2
 8014db6:	eba5 0501 	sub.w	r5, r5, r1
 8014dba:	9202      	str	r2, [sp, #8]
 8014dbc:	9508      	str	r5, [sp, #32]
 8014dbe:	f140 8128 	bpl.w	8015012 <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 8014dc2:	9a03      	ldr	r2, [sp, #12]
 8014dc4:	2a00      	cmp	r2, #0
 8014dc6:	f6ff af45 	blt.w	8014c54 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8014dca:	9a02      	ldr	r2, [sp, #8]
 8014dcc:	f04f 34ff 	mov.w	r4, #4294967295
 8014dd0:	4252      	negs	r2, r2
 8014dd2:	940b      	str	r4, [sp, #44]	; 0x2c
 8014dd4:	2400      	movs	r4, #0
 8014dd6:	9202      	str	r2, [sp, #8]
 8014dd8:	9a06      	ldr	r2, [sp, #24]
 8014dda:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8014dde:	9206      	str	r2, [sp, #24]
 8014de0:	462a      	mov	r2, r5
 8014de2:	435a      	muls	r2, r3
 8014de4:	9401      	str	r4, [sp, #4]
 8014de6:	9c02      	ldr	r4, [sp, #8]
 8014de8:	9d02      	ldr	r5, [sp, #8]
 8014dea:	fb92 f4f4 	sdiv	r4, r2, r4
 8014dee:	fb05 2214 	mls	r2, r5, r4, r2
 8014df2:	2a00      	cmp	r2, #0
 8014df4:	9207      	str	r2, [sp, #28]
 8014df6:	bfbc      	itt	lt
 8014df8:	1952      	addlt	r2, r2, r5
 8014dfa:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8014dfe:	6905      	ldr	r5, [r0, #16]
 8014e00:	bfb8      	it	lt
 8014e02:	9207      	strlt	r2, [sp, #28]
 8014e04:	eb04 0901 	add.w	r9, r4, r1
 8014e08:	9a01      	ldr	r2, [sp, #4]
 8014e0a:	ea4f 1669 	mov.w	r6, r9, asr #5
 8014e0e:	429a      	cmp	r2, r3
 8014e10:	f040 8111 	bne.w	8015036 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 8014e14:	f9b5 3000 	ldrsh.w	r3, [r5]
 8014e18:	429e      	cmp	r6, r3
 8014e1a:	d104      	bne.n	8014e26 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 8014e1c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8014e20:	9a03      	ldr	r2, [sp, #12]
 8014e22:	429a      	cmp	r2, r3
 8014e24:	d01b      	beq.n	8014e5e <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8014e26:	88ea      	ldrh	r2, [r5, #6]
 8014e28:	88ab      	ldrh	r3, [r5, #4]
 8014e2a:	4313      	orrs	r3, r2
 8014e2c:	d010      	beq.n	8014e50 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8014e2e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8014e32:	2a00      	cmp	r2, #0
 8014e34:	db0c      	blt.n	8014e50 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8014e36:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8014e38:	429a      	cmp	r2, r3
 8014e3a:	da09      	bge.n	8014e50 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8014e3c:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8014e40:	429a      	cmp	r2, r3
 8014e42:	f102 0201 	add.w	r2, r2, #1
 8014e46:	bf38      	it	cc
 8014e48:	3508      	addcc	r5, #8
 8014e4a:	6082      	str	r2, [r0, #8]
 8014e4c:	bf38      	it	cc
 8014e4e:	6105      	strcc	r5, [r0, #16]
 8014e50:	6903      	ldr	r3, [r0, #16]
 8014e52:	9a03      	ldr	r2, [sp, #12]
 8014e54:	801e      	strh	r6, [r3, #0]
 8014e56:	805a      	strh	r2, [r3, #2]
 8014e58:	2200      	movs	r2, #0
 8014e5a:	809a      	strh	r2, [r3, #4]
 8014e5c:	80da      	strh	r2, [r3, #6]
 8014e5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e60:	9a03      	ldr	r2, [sp, #12]
 8014e62:	6901      	ldr	r1, [r0, #16]
 8014e64:	441a      	add	r2, r3
 8014e66:	f9b1 3000 	ldrsh.w	r3, [r1]
 8014e6a:	42b3      	cmp	r3, r6
 8014e6c:	d103      	bne.n	8014e76 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 8014e6e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8014e72:	429a      	cmp	r2, r3
 8014e74:	d01a      	beq.n	8014eac <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 8014e76:	88cc      	ldrh	r4, [r1, #6]
 8014e78:	888b      	ldrh	r3, [r1, #4]
 8014e7a:	4323      	orrs	r3, r4
 8014e7c:	d010      	beq.n	8014ea0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8014e7e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8014e82:	2c00      	cmp	r4, #0
 8014e84:	db0c      	blt.n	8014ea0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8014e86:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8014e88:	429c      	cmp	r4, r3
 8014e8a:	da09      	bge.n	8014ea0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8014e8c:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8014e90:	429c      	cmp	r4, r3
 8014e92:	f104 0401 	add.w	r4, r4, #1
 8014e96:	bf38      	it	cc
 8014e98:	3108      	addcc	r1, #8
 8014e9a:	6084      	str	r4, [r0, #8]
 8014e9c:	bf38      	it	cc
 8014e9e:	6101      	strcc	r1, [r0, #16]
 8014ea0:	6903      	ldr	r3, [r0, #16]
 8014ea2:	2100      	movs	r1, #0
 8014ea4:	801e      	strh	r6, [r3, #0]
 8014ea6:	805a      	strh	r2, [r3, #2]
 8014ea8:	8099      	strh	r1, [r3, #4]
 8014eaa:	80d9      	strh	r1, [r3, #6]
 8014eac:	9b06      	ldr	r3, [sp, #24]
 8014eae:	4293      	cmp	r3, r2
 8014eb0:	f000 8082 	beq.w	8014fb8 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 8014eb4:	9b08      	ldr	r3, [sp, #32]
 8014eb6:	9902      	ldr	r1, [sp, #8]
 8014eb8:	015b      	lsls	r3, r3, #5
 8014eba:	9c02      	ldr	r4, [sp, #8]
 8014ebc:	fb93 f1f1 	sdiv	r1, r3, r1
 8014ec0:	fb04 3311 	mls	r3, r4, r1, r3
 8014ec4:	9103      	str	r1, [sp, #12]
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	9308      	str	r3, [sp, #32]
 8014eca:	da04      	bge.n	8014ed6 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8014ecc:	1e4b      	subs	r3, r1, #1
 8014ece:	9303      	str	r3, [sp, #12]
 8014ed0:	9b08      	ldr	r3, [sp, #32]
 8014ed2:	4423      	add	r3, r4
 8014ed4:	9308      	str	r3, [sp, #32]
 8014ed6:	9b07      	ldr	r3, [sp, #28]
 8014ed8:	464f      	mov	r7, r9
 8014eda:	9902      	ldr	r1, [sp, #8]
 8014edc:	2600      	movs	r6, #0
 8014ede:	1a5b      	subs	r3, r3, r1
 8014ee0:	9307      	str	r3, [sp, #28]
 8014ee2:	9b01      	ldr	r3, [sp, #4]
 8014ee4:	f1c3 0320 	rsb	r3, r3, #32
 8014ee8:	930e      	str	r3, [sp, #56]	; 0x38
 8014eea:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014eec:	9b01      	ldr	r3, [sp, #4]
 8014eee:	1a5b      	subs	r3, r3, r1
 8014ef0:	930a      	str	r3, [sp, #40]	; 0x28
 8014ef2:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8014ef6:	185b      	adds	r3, r3, r1
 8014ef8:	bf58      	it	pl
 8014efa:	9902      	ldrpl	r1, [sp, #8]
 8014efc:	9307      	str	r3, [sp, #28]
 8014efe:	bf57      	itett	pl
 8014f00:	1a5b      	subpl	r3, r3, r1
 8014f02:	9903      	ldrmi	r1, [sp, #12]
 8014f04:	9307      	strpl	r3, [sp, #28]
 8014f06:	9b03      	ldrpl	r3, [sp, #12]
 8014f08:	bf58      	it	pl
 8014f0a:	1c59      	addpl	r1, r3, #1
 8014f0c:	2a00      	cmp	r2, #0
 8014f0e:	4489      	add	r9, r1
 8014f10:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8014f14:	db2e      	blt.n	8014f74 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8014f16:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8014f18:	4293      	cmp	r3, r2
 8014f1a:	dd2b      	ble.n	8014f74 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8014f1c:	9c01      	ldr	r4, [sp, #4]
 8014f1e:	6905      	ldr	r5, [r0, #16]
 8014f20:	46a0      	mov	r8, r4
 8014f22:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8014f24:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8014f28:	45a0      	cmp	r8, r4
 8014f2a:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8014f2e:	f040 814c 	bne.w	80151ca <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 8014f32:	f9b5 1000 	ldrsh.w	r1, [r5]
 8014f36:	4551      	cmp	r1, sl
 8014f38:	d103      	bne.n	8014f42 <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 8014f3a:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8014f3e:	4291      	cmp	r1, r2
 8014f40:	d018      	beq.n	8014f74 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8014f42:	ea5c 010e 	orrs.w	r1, ip, lr
 8014f46:	d00f      	beq.n	8014f68 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8014f48:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8014f4c:	2900      	cmp	r1, #0
 8014f4e:	db0b      	blt.n	8014f68 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8014f50:	428b      	cmp	r3, r1
 8014f52:	dd09      	ble.n	8014f68 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8014f54:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8014f58:	4299      	cmp	r1, r3
 8014f5a:	f101 0101 	add.w	r1, r1, #1
 8014f5e:	bf38      	it	cc
 8014f60:	3508      	addcc	r5, #8
 8014f62:	6081      	str	r1, [r0, #8]
 8014f64:	bf38      	it	cc
 8014f66:	6105      	strcc	r5, [r0, #16]
 8014f68:	6903      	ldr	r3, [r0, #16]
 8014f6a:	f8a3 a000 	strh.w	sl, [r3]
 8014f6e:	805a      	strh	r2, [r3, #2]
 8014f70:	809e      	strh	r6, [r3, #4]
 8014f72:	80de      	strh	r6, [r3, #6]
 8014f74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014f76:	6901      	ldr	r1, [r0, #16]
 8014f78:	441a      	add	r2, r3
 8014f7a:	88cc      	ldrh	r4, [r1, #6]
 8014f7c:	888b      	ldrh	r3, [r1, #4]
 8014f7e:	4323      	orrs	r3, r4
 8014f80:	d010      	beq.n	8014fa4 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8014f82:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8014f86:	2c00      	cmp	r4, #0
 8014f88:	db0c      	blt.n	8014fa4 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8014f8a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8014f8c:	429c      	cmp	r4, r3
 8014f8e:	da09      	bge.n	8014fa4 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8014f90:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8014f94:	429c      	cmp	r4, r3
 8014f96:	f104 0401 	add.w	r4, r4, #1
 8014f9a:	bf38      	it	cc
 8014f9c:	3108      	addcc	r1, #8
 8014f9e:	6084      	str	r4, [r0, #8]
 8014fa0:	bf38      	it	cc
 8014fa2:	6101      	strcc	r1, [r0, #16]
 8014fa4:	6903      	ldr	r3, [r0, #16]
 8014fa6:	464f      	mov	r7, r9
 8014fa8:	f8a3 a000 	strh.w	sl, [r3]
 8014fac:	805a      	strh	r2, [r3, #2]
 8014fae:	809e      	strh	r6, [r3, #4]
 8014fb0:	80de      	strh	r6, [r3, #6]
 8014fb2:	9b06      	ldr	r3, [sp, #24]
 8014fb4:	4293      	cmp	r3, r2
 8014fb6:	d19c      	bne.n	8014ef2 <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8014fb8:	9b01      	ldr	r3, [sp, #4]
 8014fba:	6907      	ldr	r7, [r0, #16]
 8014fbc:	f1c3 0620 	rsb	r6, r3, #32
 8014fc0:	9b05      	ldr	r3, [sp, #20]
 8014fc2:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8014fc6:	9b04      	ldr	r3, [sp, #16]
 8014fc8:	429e      	cmp	r6, r3
 8014fca:	f040 81c7 	bne.w	801535c <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8014fce:	f9b7 3000 	ldrsh.w	r3, [r7]
 8014fd2:	459e      	cmp	lr, r3
 8014fd4:	d104      	bne.n	8014fe0 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 8014fd6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014fda:	429a      	cmp	r2, r3
 8014fdc:	f43f ae3a 	beq.w	8014c54 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8014fe0:	88f9      	ldrh	r1, [r7, #6]
 8014fe2:	88bb      	ldrh	r3, [r7, #4]
 8014fe4:	430b      	orrs	r3, r1
 8014fe6:	d010      	beq.n	801500a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8014fe8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	db0c      	blt.n	801500a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8014ff0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8014ff2:	428b      	cmp	r3, r1
 8014ff4:	da09      	bge.n	801500a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8014ff6:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8014ffa:	428b      	cmp	r3, r1
 8014ffc:	f103 0301 	add.w	r3, r3, #1
 8015000:	bf38      	it	cc
 8015002:	3708      	addcc	r7, #8
 8015004:	6083      	str	r3, [r0, #8]
 8015006:	bf38      	it	cc
 8015008:	6107      	strcc	r7, [r0, #16]
 801500a:	6903      	ldr	r3, [r0, #16]
 801500c:	f8a3 e000 	strh.w	lr, [r3]
 8015010:	e603      	b.n	8014c1a <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 8015012:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8015014:	9c03      	ldr	r4, [sp, #12]
 8015016:	42a2      	cmp	r2, r4
 8015018:	f6ff ae1c 	blt.w	8014c54 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801501c:	9c06      	ldr	r4, [sp, #24]
 801501e:	42a2      	cmp	r2, r4
 8015020:	9c08      	ldr	r4, [sp, #32]
 8015022:	bfbc      	itt	lt
 8015024:	3201      	addlt	r2, #1
 8015026:	9206      	strlt	r2, [sp, #24]
 8015028:	f1c3 0220 	rsb	r2, r3, #32
 801502c:	4362      	muls	r2, r4
 801502e:	2401      	movs	r4, #1
 8015030:	940b      	str	r4, [sp, #44]	; 0x2c
 8015032:	2420      	movs	r4, #32
 8015034:	e6d6      	b.n	8014de4 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 8015036:	ea4f 1861 	mov.w	r8, r1, asr #5
 801503a:	f009 021f 	and.w	r2, r9, #31
 801503e:	f001 011f 	and.w	r1, r1, #31
 8015042:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8015046:	920c      	str	r2, [sp, #48]	; 0x30
 8015048:	45b0      	cmp	r8, r6
 801504a:	9a01      	ldr	r2, [sp, #4]
 801504c:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8015050:	eba2 0203 	sub.w	r2, r2, r3
 8015054:	d108      	bne.n	8015068 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 8015056:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015058:	4496      	add	lr, r2
 801505a:	4419      	add	r1, r3
 801505c:	f8a5 e004 	strh.w	lr, [r5, #4]
 8015060:	fb02 a101 	mla	r1, r2, r1, sl
 8015064:	80e9      	strh	r1, [r5, #6]
 8015066:	e6fa      	b.n	8014e5e <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8015068:	2c00      	cmp	r4, #0
 801506a:	f2c0 80a7 	blt.w	80151bc <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 801506e:	2701      	movs	r7, #1
 8015070:	f1c1 0c20 	rsb	ip, r1, #32
 8015074:	970a      	str	r7, [sp, #40]	; 0x28
 8015076:	2720      	movs	r7, #32
 8015078:	fb02 f20c 	mul.w	r2, r2, ip
 801507c:	9709      	str	r7, [sp, #36]	; 0x24
 801507e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015080:	fb92 fcf4 	sdiv	ip, r2, r4
 8015084:	fb04 221c 	mls	r2, r4, ip, r2
 8015088:	4439      	add	r1, r7
 801508a:	2a00      	cmp	r2, #0
 801508c:	bfbc      	itt	lt
 801508e:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8015092:	1912      	addlt	r2, r2, r4
 8015094:	fb0c a101 	mla	r1, ip, r1, sl
 8015098:	44e6      	add	lr, ip
 801509a:	80e9      	strh	r1, [r5, #6]
 801509c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801509e:	f8a5 e004 	strh.w	lr, [r5, #4]
 80150a2:	eb08 0501 	add.w	r5, r8, r1
 80150a6:	6901      	ldr	r1, [r0, #16]
 80150a8:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 80150ac:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 80150b0:	ea58 070e 	orrs.w	r7, r8, lr
 80150b4:	d010      	beq.n	80150d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 80150b6:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 80150ba:	f1be 0f00 	cmp.w	lr, #0
 80150be:	db0b      	blt.n	80150d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 80150c0:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80150c2:	45be      	cmp	lr, r7
 80150c4:	da08      	bge.n	80150d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 80150c6:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 80150ca:	45be      	cmp	lr, r7
 80150cc:	bf3c      	itt	cc
 80150ce:	3108      	addcc	r1, #8
 80150d0:	6101      	strcc	r1, [r0, #16]
 80150d2:	f10e 0101 	add.w	r1, lr, #1
 80150d6:	6081      	str	r1, [r0, #8]
 80150d8:	6901      	ldr	r1, [r0, #16]
 80150da:	f04f 0e00 	mov.w	lr, #0
 80150de:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 80150e2:	42ae      	cmp	r6, r5
 80150e4:	800d      	strh	r5, [r1, #0]
 80150e6:	4463      	add	r3, ip
 80150e8:	f8a1 8002 	strh.w	r8, [r1, #2]
 80150ec:	f8a1 e004 	strh.w	lr, [r1, #4]
 80150f0:	f8a1 e006 	strh.w	lr, [r1, #6]
 80150f4:	d053      	beq.n	801519e <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 80150f6:	9901      	ldr	r1, [sp, #4]
 80150f8:	1b12      	subs	r2, r2, r4
 80150fa:	1ac9      	subs	r1, r1, r3
 80150fc:	4461      	add	r1, ip
 80150fe:	0149      	lsls	r1, r1, #5
 8015100:	fb91 fef4 	sdiv	lr, r1, r4
 8015104:	fb04 111e 	mls	r1, r4, lr, r1
 8015108:	2900      	cmp	r1, #0
 801510a:	bfbc      	itt	lt
 801510c:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8015110:	1909      	addlt	r1, r1, r4
 8015112:	f10e 0701 	add.w	r7, lr, #1
 8015116:	970d      	str	r7, [sp, #52]	; 0x34
 8015118:	f8d0 a010 	ldr.w	sl, [r0, #16]
 801511c:	1852      	adds	r2, r2, r1
 801511e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8015120:	bf54      	ite	pl
 8015122:	f8dd c034 	ldrpl.w	ip, [sp, #52]	; 0x34
 8015126:	46f4      	movmi	ip, lr
 8015128:	f8ba b004 	ldrh.w	fp, [sl, #4]
 801512c:	bf58      	it	pl
 801512e:	1b12      	subpl	r2, r2, r4
 8015130:	4463      	add	r3, ip
 8015132:	443d      	add	r5, r7
 8015134:	44e3      	add	fp, ip
 8015136:	f8aa b004 	strh.w	fp, [sl, #4]
 801513a:	f8ba b006 	ldrh.w	fp, [sl, #6]
 801513e:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8015142:	f8aa b006 	strh.w	fp, [sl, #6]
 8015146:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801514a:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801514e:	f8bc a004 	ldrh.w	sl, [ip, #4]
 8015152:	ea5b 070a 	orrs.w	r7, fp, sl
 8015156:	d014      	beq.n	8015182 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8015158:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 801515c:	f1ba 0f00 	cmp.w	sl, #0
 8015160:	db0f      	blt.n	8015182 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8015162:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8015164:	45ba      	cmp	sl, r7
 8015166:	da0c      	bge.n	8015182 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8015168:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 801516c:	45ba      	cmp	sl, r7
 801516e:	f10a 0a01 	add.w	sl, sl, #1
 8015172:	bf38      	it	cc
 8015174:	f10c 0c08 	addcc.w	ip, ip, #8
 8015178:	f8c0 a008 	str.w	sl, [r0, #8]
 801517c:	bf38      	it	cc
 801517e:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8015182:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015186:	f04f 0700 	mov.w	r7, #0
 801518a:	42ae      	cmp	r6, r5
 801518c:	f8ac 5000 	strh.w	r5, [ip]
 8015190:	f8ac 8002 	strh.w	r8, [ip, #2]
 8015194:	f8ac 7004 	strh.w	r7, [ip, #4]
 8015198:	f8ac 7006 	strh.w	r7, [ip, #6]
 801519c:	d1bc      	bne.n	8015118 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 801519e:	6904      	ldr	r4, [r0, #16]
 80151a0:	9a01      	ldr	r2, [sp, #4]
 80151a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80151a4:	1ad3      	subs	r3, r2, r3
 80151a6:	88a2      	ldrh	r2, [r4, #4]
 80151a8:	3120      	adds	r1, #32
 80151aa:	441a      	add	r2, r3
 80151ac:	80a2      	strh	r2, [r4, #4]
 80151ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80151b0:	1a89      	subs	r1, r1, r2
 80151b2:	88e2      	ldrh	r2, [r4, #6]
 80151b4:	fb03 2301 	mla	r3, r3, r1, r2
 80151b8:	80e3      	strh	r3, [r4, #6]
 80151ba:	e650      	b.n	8014e5e <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80151bc:	f04f 37ff 	mov.w	r7, #4294967295
 80151c0:	434a      	muls	r2, r1
 80151c2:	4264      	negs	r4, r4
 80151c4:	970a      	str	r7, [sp, #40]	; 0x28
 80151c6:	2700      	movs	r7, #0
 80151c8:	e758      	b.n	801507c <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 80151ca:	ea4f 1867 	mov.w	r8, r7, asr #5
 80151ce:	f009 031f 	and.w	r3, r9, #31
 80151d2:	f007 071f 	and.w	r7, r7, #31
 80151d6:	fa1f fc8c 	uxth.w	ip, ip
 80151da:	45d0      	cmp	r8, sl
 80151dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80151de:	fa1f fe8e 	uxth.w	lr, lr
 80151e2:	d10a      	bne.n	80151fa <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 80151e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80151e6:	449c      	add	ip, r3
 80151e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80151ea:	441f      	add	r7, r3
 80151ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80151ee:	f8a5 c004 	strh.w	ip, [r5, #4]
 80151f2:	fb03 e707 	mla	r7, r3, r7, lr
 80151f6:	80ef      	strh	r7, [r5, #6]
 80151f8:	e6bc      	b.n	8014f74 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80151fa:	2900      	cmp	r1, #0
 80151fc:	f2c0 80a6 	blt.w	801534c <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8015200:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015202:	f1c7 0320 	rsb	r3, r7, #32
 8015206:	4363      	muls	r3, r4
 8015208:	2401      	movs	r4, #1
 801520a:	940d      	str	r4, [sp, #52]	; 0x34
 801520c:	2420      	movs	r4, #32
 801520e:	940c      	str	r4, [sp, #48]	; 0x30
 8015210:	fb93 f4f1 	sdiv	r4, r3, r1
 8015214:	fb01 3b14 	mls	fp, r1, r4, r3
 8015218:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801521a:	f1bb 0f00 	cmp.w	fp, #0
 801521e:	441f      	add	r7, r3
 8015220:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015222:	bfbc      	itt	lt
 8015224:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8015228:	448b      	addlt	fp, r1
 801522a:	fb04 e707 	mla	r7, r4, r7, lr
 801522e:	44a4      	add	ip, r4
 8015230:	80ef      	strh	r7, [r5, #6]
 8015232:	f8a5 c004 	strh.w	ip, [r5, #4]
 8015236:	eb08 0503 	add.w	r5, r8, r3
 801523a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801523e:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8015242:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8015246:	ea5e 0307 	orrs.w	r3, lr, r7
 801524a:	d011      	beq.n	8015270 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 801524c:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8015250:	f1be 0f00 	cmp.w	lr, #0
 8015254:	db0c      	blt.n	8015270 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8015256:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8015258:	45be      	cmp	lr, r7
 801525a:	da09      	bge.n	8015270 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 801525c:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8015260:	45be      	cmp	lr, r7
 8015262:	bf3c      	itt	cc
 8015264:	f10c 0708 	addcc.w	r7, ip, #8
 8015268:	6107      	strcc	r7, [r0, #16]
 801526a:	f10e 0701 	add.w	r7, lr, #1
 801526e:	6087      	str	r7, [r0, #8]
 8015270:	6907      	ldr	r7, [r0, #16]
 8015272:	b213      	sxth	r3, r2
 8015274:	4555      	cmp	r5, sl
 8015276:	9310      	str	r3, [sp, #64]	; 0x40
 8015278:	807b      	strh	r3, [r7, #2]
 801527a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801527c:	803d      	strh	r5, [r7, #0]
 801527e:	80be      	strh	r6, [r7, #4]
 8015280:	eb04 0c03 	add.w	ip, r4, r3
 8015284:	80fe      	strh	r6, [r7, #6]
 8015286:	d050      	beq.n	801532a <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 8015288:	9b01      	ldr	r3, [sp, #4]
 801528a:	eba3 070c 	sub.w	r7, r3, ip
 801528e:	ebab 0301 	sub.w	r3, fp, r1
 8015292:	443c      	add	r4, r7
 8015294:	9309      	str	r3, [sp, #36]	; 0x24
 8015296:	0164      	lsls	r4, r4, #5
 8015298:	fb94 f8f1 	sdiv	r8, r4, r1
 801529c:	fb01 4418 	mls	r4, r1, r8, r4
 80152a0:	2c00      	cmp	r4, #0
 80152a2:	bfbc      	itt	lt
 80152a4:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80152a8:	1864      	addlt	r4, r4, r1
 80152aa:	f108 0701 	add.w	r7, r8, #1
 80152ae:	9711      	str	r7, [sp, #68]	; 0x44
 80152b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152b2:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80152b6:	191b      	adds	r3, r3, r4
 80152b8:	f8be b004 	ldrh.w	fp, [lr, #4]
 80152bc:	bf54      	ite	pl
 80152be:	9f11      	ldrpl	r7, [sp, #68]	; 0x44
 80152c0:	4647      	movmi	r7, r8
 80152c2:	9309      	str	r3, [sp, #36]	; 0x24
 80152c4:	bf58      	it	pl
 80152c6:	1a5b      	subpl	r3, r3, r1
 80152c8:	44bb      	add	fp, r7
 80152ca:	44bc      	add	ip, r7
 80152cc:	bf58      	it	pl
 80152ce:	9309      	strpl	r3, [sp, #36]	; 0x24
 80152d0:	f8ae b004 	strh.w	fp, [lr, #4]
 80152d4:	f8be b006 	ldrh.w	fp, [lr, #6]
 80152d8:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80152dc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80152de:	f8ae b006 	strh.w	fp, [lr, #6]
 80152e2:	443d      	add	r5, r7
 80152e4:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80152e8:	f8be b006 	ldrh.w	fp, [lr, #6]
 80152ec:	f8be 7004 	ldrh.w	r7, [lr, #4]
 80152f0:	ea5b 0307 	orrs.w	r3, fp, r7
 80152f4:	d011      	beq.n	801531a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 80152f6:	f9be b002 	ldrsh.w	fp, [lr, #2]
 80152fa:	f1bb 0f00 	cmp.w	fp, #0
 80152fe:	db0c      	blt.n	801531a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8015300:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8015302:	45bb      	cmp	fp, r7
 8015304:	da09      	bge.n	801531a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8015306:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801530a:	45bb      	cmp	fp, r7
 801530c:	bf3c      	itt	cc
 801530e:	f10e 0708 	addcc.w	r7, lr, #8
 8015312:	6107      	strcc	r7, [r0, #16]
 8015314:	f10b 0701 	add.w	r7, fp, #1
 8015318:	6087      	str	r7, [r0, #8]
 801531a:	6907      	ldr	r7, [r0, #16]
 801531c:	4555      	cmp	r5, sl
 801531e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015320:	803d      	strh	r5, [r7, #0]
 8015322:	807b      	strh	r3, [r7, #2]
 8015324:	80be      	strh	r6, [r7, #4]
 8015326:	80fe      	strh	r6, [r7, #6]
 8015328:	d1c2      	bne.n	80152b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 801532a:	9b01      	ldr	r3, [sp, #4]
 801532c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801532e:	eba3 0c0c 	sub.w	ip, r3, ip
 8015332:	6903      	ldr	r3, [r0, #16]
 8015334:	3720      	adds	r7, #32
 8015336:	8899      	ldrh	r1, [r3, #4]
 8015338:	4461      	add	r1, ip
 801533a:	8099      	strh	r1, [r3, #4]
 801533c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801533e:	1a7f      	subs	r7, r7, r1
 8015340:	88d9      	ldrh	r1, [r3, #6]
 8015342:	fb0c 1c07 	mla	ip, ip, r7, r1
 8015346:	f8a3 c006 	strh.w	ip, [r3, #6]
 801534a:	e613      	b.n	8014f74 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801534c:	f04f 34ff 	mov.w	r4, #4294967295
 8015350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015352:	4249      	negs	r1, r1
 8015354:	940d      	str	r4, [sp, #52]	; 0x34
 8015356:	2400      	movs	r4, #0
 8015358:	437b      	muls	r3, r7
 801535a:	e758      	b.n	801520e <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 801535c:	9905      	ldr	r1, [sp, #20]
 801535e:	ea4f 1b69 	mov.w	fp, r9, asr #5
 8015362:	f009 0c1f 	and.w	ip, r9, #31
 8015366:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 801536a:	f001 011f 	and.w	r1, r1, #31
 801536e:	45f3      	cmp	fp, lr
 8015370:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8015374:	9102      	str	r1, [sp, #8]
 8015376:	9904      	ldr	r1, [sp, #16]
 8015378:	eba1 0406 	sub.w	r4, r1, r6
 801537c:	d108      	bne.n	8015390 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 801537e:	9b02      	ldr	r3, [sp, #8]
 8015380:	44a0      	add	r8, r4
 8015382:	449c      	add	ip, r3
 8015384:	f8a7 8004 	strh.w	r8, [r7, #4]
 8015388:	fb04 a40c 	mla	r4, r4, ip, sl
 801538c:	80fc      	strh	r4, [r7, #6]
 801538e:	e461      	b.n	8014c54 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8015390:	9905      	ldr	r1, [sp, #20]
 8015392:	ebb1 0109 	subs.w	r1, r1, r9
 8015396:	bf51      	iteee	pl
 8015398:	f1cc 0520 	rsbpl	r5, ip, #32
 801539c:	fb04 f40c 	mulmi.w	r4, r4, ip
 80153a0:	4249      	negmi	r1, r1
 80153a2:	2500      	movmi	r5, #0
 80153a4:	bf5d      	ittte	pl
 80153a6:	436c      	mulpl	r4, r5
 80153a8:	2520      	movpl	r5, #32
 80153aa:	f04f 0901 	movpl.w	r9, #1
 80153ae:	f04f 39ff 	movmi.w	r9, #4294967295
 80153b2:	9501      	str	r5, [sp, #4]
 80153b4:	9b01      	ldr	r3, [sp, #4]
 80153b6:	fb94 f5f1 	sdiv	r5, r4, r1
 80153ba:	fb01 4415 	mls	r4, r1, r5, r4
 80153be:	449c      	add	ip, r3
 80153c0:	eb0b 0309 	add.w	r3, fp, r9
 80153c4:	2c00      	cmp	r4, #0
 80153c6:	bfbc      	itt	lt
 80153c8:	f105 35ff 	addlt.w	r5, r5, #4294967295
 80153cc:	1864      	addlt	r4, r4, r1
 80153ce:	44a8      	add	r8, r5
 80153d0:	fb05 ac0c 	mla	ip, r5, ip, sl
 80153d4:	f8a7 8004 	strh.w	r8, [r7, #4]
 80153d8:	f8a7 c006 	strh.w	ip, [r7, #6]
 80153dc:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80153e0:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 80153e4:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80153e8:	ea58 0707 	orrs.w	r7, r8, r7
 80153ec:	d011      	beq.n	8015412 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 80153ee:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 80153f2:	f1b8 0f00 	cmp.w	r8, #0
 80153f6:	db0c      	blt.n	8015412 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 80153f8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80153fa:	45b8      	cmp	r8, r7
 80153fc:	da09      	bge.n	8015412 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 80153fe:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8015402:	45b8      	cmp	r8, r7
 8015404:	bf3c      	itt	cc
 8015406:	f10c 0708 	addcc.w	r7, ip, #8
 801540a:	6107      	strcc	r7, [r0, #16]
 801540c:	f108 0701 	add.w	r7, r8, #1
 8015410:	6087      	str	r7, [r0, #8]
 8015412:	6907      	ldr	r7, [r0, #16]
 8015414:	f04f 0c00 	mov.w	ip, #0
 8015418:	b212      	sxth	r2, r2
 801541a:	459e      	cmp	lr, r3
 801541c:	803b      	strh	r3, [r7, #0]
 801541e:	442e      	add	r6, r5
 8015420:	807a      	strh	r2, [r7, #2]
 8015422:	f8a7 c004 	strh.w	ip, [r7, #4]
 8015426:	f8a7 c006 	strh.w	ip, [r7, #6]
 801542a:	d04b      	beq.n	80154c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 801542c:	9f04      	ldr	r7, [sp, #16]
 801542e:	1a64      	subs	r4, r4, r1
 8015430:	f04f 0a00 	mov.w	sl, #0
 8015434:	1bbf      	subs	r7, r7, r6
 8015436:	443d      	add	r5, r7
 8015438:	016d      	lsls	r5, r5, #5
 801543a:	fb95 f8f1 	sdiv	r8, r5, r1
 801543e:	fb01 5518 	mls	r5, r1, r8, r5
 8015442:	4565      	cmp	r5, ip
 8015444:	bfbc      	itt	lt
 8015446:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801544a:	186d      	addlt	r5, r5, r1
 801544c:	f108 0701 	add.w	r7, r8, #1
 8015450:	9703      	str	r7, [sp, #12]
 8015452:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015456:	1964      	adds	r4, r4, r5
 8015458:	444b      	add	r3, r9
 801545a:	bf54      	ite	pl
 801545c:	9f03      	ldrpl	r7, [sp, #12]
 801545e:	4647      	movmi	r7, r8
 8015460:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8015464:	bf58      	it	pl
 8015466:	1a64      	subpl	r4, r4, r1
 8015468:	443e      	add	r6, r7
 801546a:	44bb      	add	fp, r7
 801546c:	f8ac b004 	strh.w	fp, [ip, #4]
 8015470:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8015474:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8015478:	f8ac b006 	strh.w	fp, [ip, #6]
 801547c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8015480:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8015484:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8015488:	ea5b 0707 	orrs.w	r7, fp, r7
 801548c:	d011      	beq.n	80154b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801548e:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8015492:	f1bb 0f00 	cmp.w	fp, #0
 8015496:	db0c      	blt.n	80154b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8015498:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801549a:	45bb      	cmp	fp, r7
 801549c:	da09      	bge.n	80154b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801549e:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80154a2:	45bb      	cmp	fp, r7
 80154a4:	bf3c      	itt	cc
 80154a6:	f10c 0708 	addcc.w	r7, ip, #8
 80154aa:	6107      	strcc	r7, [r0, #16]
 80154ac:	f10b 0701 	add.w	r7, fp, #1
 80154b0:	6087      	str	r7, [r0, #8]
 80154b2:	6907      	ldr	r7, [r0, #16]
 80154b4:	459e      	cmp	lr, r3
 80154b6:	803b      	strh	r3, [r7, #0]
 80154b8:	807a      	strh	r2, [r7, #2]
 80154ba:	f8a7 a004 	strh.w	sl, [r7, #4]
 80154be:	f8a7 a006 	strh.w	sl, [r7, #6]
 80154c2:	d1c6      	bne.n	8015452 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 80154c4:	9b04      	ldr	r3, [sp, #16]
 80154c6:	1b9e      	subs	r6, r3, r6
 80154c8:	6903      	ldr	r3, [r0, #16]
 80154ca:	889a      	ldrh	r2, [r3, #4]
 80154cc:	4432      	add	r2, r6
 80154ce:	809a      	strh	r2, [r3, #4]
 80154d0:	9a02      	ldr	r2, [sp, #8]
 80154d2:	f102 0c20 	add.w	ip, r2, #32
 80154d6:	9a01      	ldr	r2, [sp, #4]
 80154d8:	ebac 0c02 	sub.w	ip, ip, r2
 80154dc:	88da      	ldrh	r2, [r3, #6]
 80154de:	fb06 260c 	mla	r6, r6, ip, r2
 80154e2:	80de      	strh	r6, [r3, #6]
 80154e4:	f7ff bbb6 	b.w	8014c54 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

080154e8 <_ZN8touchgfx7Outline6lineToEii>:
 80154e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80154ea:	079b      	lsls	r3, r3, #30
 80154ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80154ee:	460e      	mov	r6, r1
 80154f0:	4615      	mov	r5, r2
 80154f2:	d511      	bpl.n	8015518 <_ZN8touchgfx7Outline6lineToEii+0x30>
 80154f4:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 80154f8:	ea86 0701 	eor.w	r7, r6, r1
 80154fc:	ea85 0302 	eor.w	r3, r5, r2
 8015500:	433b      	orrs	r3, r7
 8015502:	d009      	beq.n	8015518 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8015504:	4633      	mov	r3, r6
 8015506:	9500      	str	r5, [sp, #0]
 8015508:	f7ff fb4c 	bl	8014ba4 <_ZN8touchgfx7Outline10renderLineEiiii>
 801550c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801550e:	f043 0301 	orr.w	r3, r3, #1
 8015512:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8015516:	6243      	str	r3, [r0, #36]	; 0x24
 8015518:	b003      	add	sp, #12
 801551a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801551c <_ZN8touchgfx7Outline6moveToEii>:
 801551c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801551e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8015520:	4615      	mov	r5, r2
 8015522:	4604      	mov	r4, r0
 8015524:	460e      	mov	r6, r1
 8015526:	079a      	lsls	r2, r3, #30
 8015528:	d401      	bmi.n	801552e <_ZN8touchgfx7Outline6moveToEii+0x12>
 801552a:	f7ff fb07 	bl	8014b3c <_ZN8touchgfx7Outline5resetEv>
 801552e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015530:	07db      	lsls	r3, r3, #31
 8015532:	d504      	bpl.n	801553e <_ZN8touchgfx7Outline6moveToEii+0x22>
 8015534:	4620      	mov	r0, r4
 8015536:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 801553a:	f7ff ffd5 	bl	80154e8 <_ZN8touchgfx7Outline6lineToEii>
 801553e:	6923      	ldr	r3, [r4, #16]
 8015540:	1170      	asrs	r0, r6, #5
 8015542:	1169      	asrs	r1, r5, #5
 8015544:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015548:	4290      	cmp	r0, r2
 801554a:	d103      	bne.n	8015554 <_ZN8touchgfx7Outline6moveToEii+0x38>
 801554c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8015550:	4291      	cmp	r1, r2
 8015552:	d01a      	beq.n	801558a <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8015554:	88df      	ldrh	r7, [r3, #6]
 8015556:	889a      	ldrh	r2, [r3, #4]
 8015558:	433a      	orrs	r2, r7
 801555a:	d010      	beq.n	801557e <_ZN8touchgfx7Outline6moveToEii+0x62>
 801555c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8015560:	2a00      	cmp	r2, #0
 8015562:	db0c      	blt.n	801557e <_ZN8touchgfx7Outline6moveToEii+0x62>
 8015564:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8015566:	42ba      	cmp	r2, r7
 8015568:	da09      	bge.n	801557e <_ZN8touchgfx7Outline6moveToEii+0x62>
 801556a:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 801556e:	42ba      	cmp	r2, r7
 8015570:	f102 0201 	add.w	r2, r2, #1
 8015574:	bf38      	it	cc
 8015576:	3308      	addcc	r3, #8
 8015578:	60a2      	str	r2, [r4, #8]
 801557a:	bf38      	it	cc
 801557c:	6123      	strcc	r3, [r4, #16]
 801557e:	6923      	ldr	r3, [r4, #16]
 8015580:	2200      	movs	r2, #0
 8015582:	8018      	strh	r0, [r3, #0]
 8015584:	8059      	strh	r1, [r3, #2]
 8015586:	809a      	strh	r2, [r3, #4]
 8015588:	80da      	strh	r2, [r3, #6]
 801558a:	6166      	str	r6, [r4, #20]
 801558c:	6225      	str	r5, [r4, #32]
 801558e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8015592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015594 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8015594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015598:	b0d0      	sub	sp, #320	; 0x140
 801559a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801559e:	466c      	mov	r4, sp
 80155a0:	4627      	mov	r7, r4
 80155a2:	1a0d      	subs	r5, r1, r0
 80155a4:	f100 0308 	add.w	r3, r0, #8
 80155a8:	2d48      	cmp	r5, #72	; 0x48
 80155aa:	f340 80d5 	ble.w	8015758 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 80155ae:	112d      	asrs	r5, r5, #4
 80155b0:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80155b4:	f9b0 9000 	ldrsh.w	r9, [r0]
 80155b8:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 80155bc:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 80155c0:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80155c4:	6816      	ldr	r6, [r2, #0]
 80155c6:	6006      	str	r6, [r0, #0]
 80155c8:	6856      	ldr	r6, [r2, #4]
 80155ca:	6046      	str	r6, [r0, #4]
 80155cc:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 80155d0:	f8a2 8002 	strh.w	r8, [r2, #2]
 80155d4:	f8a2 e004 	strh.w	lr, [r2, #4]
 80155d8:	f8a2 c006 	strh.w	ip, [r2, #6]
 80155dc:	f1a1 0208 	sub.w	r2, r1, #8
 80155e0:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 80155e4:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 80155e8:	4565      	cmp	r5, ip
 80155ea:	db06      	blt.n	80155fa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 80155ec:	d119      	bne.n	8015622 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80155ee:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 80155f2:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80155f6:	42ae      	cmp	r6, r5
 80155f8:	dd13      	ble.n	8015622 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80155fa:	460e      	mov	r6, r1
 80155fc:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8015600:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8015604:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8015608:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 801560c:	601d      	str	r5, [r3, #0]
 801560e:	6875      	ldr	r5, [r6, #4]
 8015610:	605d      	str	r5, [r3, #4]
 8015612:	f821 9c08 	strh.w	r9, [r1, #-8]
 8015616:	f821 cc06 	strh.w	ip, [r1, #-6]
 801561a:	f821 8c04 	strh.w	r8, [r1, #-4]
 801561e:	f821 ec02 	strh.w	lr, [r1, #-2]
 8015622:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8015626:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 801562a:	42ae      	cmp	r6, r5
 801562c:	db06      	blt.n	801563c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 801562e:	d116      	bne.n	801565e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8015630:	f9b0 c000 	ldrsh.w	ip, [r0]
 8015634:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8015638:	45ac      	cmp	ip, r5
 801563a:	da10      	bge.n	801565e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 801563c:	681d      	ldr	r5, [r3, #0]
 801563e:	f9b0 8000 	ldrsh.w	r8, [r0]
 8015642:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8015646:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801564a:	6005      	str	r5, [r0, #0]
 801564c:	685d      	ldr	r5, [r3, #4]
 801564e:	f8a0 8008 	strh.w	r8, [r0, #8]
 8015652:	6045      	str	r5, [r0, #4]
 8015654:	8146      	strh	r6, [r0, #10]
 8015656:	f8a0 e00c 	strh.w	lr, [r0, #12]
 801565a:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801565e:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8015662:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8015666:	4565      	cmp	r5, ip
 8015668:	db06      	blt.n	8015678 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 801566a:	d119      	bne.n	80156a0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801566c:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8015670:	f9b0 5000 	ldrsh.w	r5, [r0]
 8015674:	42ae      	cmp	r6, r5
 8015676:	da13      	bge.n	80156a0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8015678:	460e      	mov	r6, r1
 801567a:	f9b0 9000 	ldrsh.w	r9, [r0]
 801567e:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8015682:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8015686:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 801568a:	6005      	str	r5, [r0, #0]
 801568c:	6875      	ldr	r5, [r6, #4]
 801568e:	6045      	str	r5, [r0, #4]
 8015690:	f821 9c08 	strh.w	r9, [r1, #-8]
 8015694:	f821 cc06 	strh.w	ip, [r1, #-6]
 8015698:	f821 8c04 	strh.w	r8, [r1, #-4]
 801569c:	f821 ec02 	strh.w	lr, [r1, #-2]
 80156a0:	3308      	adds	r3, #8
 80156a2:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80156a6:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 80156aa:	45e6      	cmp	lr, ip
 80156ac:	dbf8      	blt.n	80156a0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80156ae:	d105      	bne.n	80156bc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80156b0:	f9b3 6000 	ldrsh.w	r6, [r3]
 80156b4:	f9b0 5000 	ldrsh.w	r5, [r0]
 80156b8:	42ae      	cmp	r6, r5
 80156ba:	dbf1      	blt.n	80156a0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80156bc:	4615      	mov	r5, r2
 80156be:	3a08      	subs	r2, #8
 80156c0:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 80156c4:	45b4      	cmp	ip, r6
 80156c6:	dbf9      	blt.n	80156bc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80156c8:	d105      	bne.n	80156d6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 80156ca:	f9b0 8000 	ldrsh.w	r8, [r0]
 80156ce:	f9b2 6000 	ldrsh.w	r6, [r2]
 80156d2:	45b0      	cmp	r8, r6
 80156d4:	dbf2      	blt.n	80156bc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80156d6:	4293      	cmp	r3, r2
 80156d8:	f1a5 0608 	sub.w	r6, r5, #8
 80156dc:	d816      	bhi.n	801570c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 80156de:	f8d6 c000 	ldr.w	ip, [r6]
 80156e2:	f9b3 a000 	ldrsh.w	sl, [r3]
 80156e6:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 80156ea:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 80156ee:	f8c3 c000 	str.w	ip, [r3]
 80156f2:	f8d6 c004 	ldr.w	ip, [r6, #4]
 80156f6:	f8c3 c004 	str.w	ip, [r3, #4]
 80156fa:	f825 ac08 	strh.w	sl, [r5, #-8]
 80156fe:	f825 ec06 	strh.w	lr, [r5, #-6]
 8015702:	f825 9c04 	strh.w	r9, [r5, #-4]
 8015706:	f825 8c02 	strh.w	r8, [r5, #-2]
 801570a:	e7c9      	b.n	80156a0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801570c:	f8d6 e000 	ldr.w	lr, [r6]
 8015710:	f9b0 a000 	ldrsh.w	sl, [r0]
 8015714:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8015718:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 801571c:	f8c0 e000 	str.w	lr, [r0]
 8015720:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8015724:	1a16      	subs	r6, r2, r0
 8015726:	f8c0 e004 	str.w	lr, [r0, #4]
 801572a:	f825 ac08 	strh.w	sl, [r5, #-8]
 801572e:	f825 cc06 	strh.w	ip, [r5, #-6]
 8015732:	f825 9c04 	strh.w	r9, [r5, #-4]
 8015736:	f825 8c02 	strh.w	r8, [r5, #-2]
 801573a:	1acd      	subs	r5, r1, r3
 801573c:	10ed      	asrs	r5, r5, #3
 801573e:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8015742:	bfb5      	itete	lt
 8015744:	e9c4 0200 	strdlt	r0, r2, [r4]
 8015748:	e9c4 3100 	strdge	r3, r1, [r4]
 801574c:	460a      	movlt	r2, r1
 801574e:	4603      	movge	r3, r0
 8015750:	3408      	adds	r4, #8
 8015752:	4618      	mov	r0, r3
 8015754:	4611      	mov	r1, r2
 8015756:	e724      	b.n	80155a2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8015758:	4299      	cmp	r1, r3
 801575a:	d927      	bls.n	80157ac <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 801575c:	f1a3 0210 	sub.w	r2, r3, #16
 8015760:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8015764:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8015768:	45ac      	cmp	ip, r5
 801576a:	db06      	blt.n	801577a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 801576c:	d11c      	bne.n	80157a8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801576e:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8015772:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8015776:	42ae      	cmp	r6, r5
 8015778:	da16      	bge.n	80157a8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801577a:	4615      	mov	r5, r2
 801577c:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8015780:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8015784:	3a08      	subs	r2, #8
 8015786:	f855 6f08 	ldr.w	r6, [r5, #8]!
 801578a:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 801578e:	6196      	str	r6, [r2, #24]
 8015790:	42a8      	cmp	r0, r5
 8015792:	686e      	ldr	r6, [r5, #4]
 8015794:	f8a2 9010 	strh.w	r9, [r2, #16]
 8015798:	61d6      	str	r6, [r2, #28]
 801579a:	f8a2 c012 	strh.w	ip, [r2, #18]
 801579e:	f8a2 8014 	strh.w	r8, [r2, #20]
 80157a2:	f8a2 e016 	strh.w	lr, [r2, #22]
 80157a6:	d1db      	bne.n	8015760 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 80157a8:	3308      	adds	r3, #8
 80157aa:	e7d5      	b.n	8015758 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 80157ac:	42bc      	cmp	r4, r7
 80157ae:	d903      	bls.n	80157b8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 80157b0:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 80157b4:	3c08      	subs	r4, #8
 80157b6:	e6f4      	b.n	80155a2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 80157b8:	b050      	add	sp, #320	; 0x140
 80157ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080157be <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 80157be:	b510      	push	{r4, lr}
 80157c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80157c2:	4604      	mov	r4, r0
 80157c4:	07da      	lsls	r2, r3, #31
 80157c6:	d507      	bpl.n	80157d8 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 80157c8:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 80157cc:	f7ff fe8c 	bl	80154e8 <_ZN8touchgfx7Outline6lineToEii>
 80157d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80157d2:	f023 0301 	bic.w	r3, r3, #1
 80157d6:	6243      	str	r3, [r0, #36]	; 0x24
 80157d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80157da:	079b      	lsls	r3, r3, #30
 80157dc:	d521      	bpl.n	8015822 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 80157de:	6923      	ldr	r3, [r4, #16]
 80157e0:	88d9      	ldrh	r1, [r3, #6]
 80157e2:	889a      	ldrh	r2, [r3, #4]
 80157e4:	430a      	orrs	r2, r1
 80157e6:	d010      	beq.n	801580a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80157e8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80157ec:	2a00      	cmp	r2, #0
 80157ee:	db0c      	blt.n	801580a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80157f0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80157f2:	428a      	cmp	r2, r1
 80157f4:	da09      	bge.n	801580a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80157f6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80157fa:	4291      	cmp	r1, r2
 80157fc:	f102 0201 	add.w	r2, r2, #1
 8015800:	bf88      	it	hi
 8015802:	3308      	addhi	r3, #8
 8015804:	60a2      	str	r2, [r4, #8]
 8015806:	bf88      	it	hi
 8015808:	6123      	strhi	r3, [r4, #16]
 801580a:	68a1      	ldr	r1, [r4, #8]
 801580c:	b129      	cbz	r1, 801581a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801580e:	6863      	ldr	r3, [r4, #4]
 8015810:	4299      	cmp	r1, r3
 8015812:	d802      	bhi.n	801581a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8015814:	68e0      	ldr	r0, [r4, #12]
 8015816:	f7ff febd 	bl	8015594 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 801581a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801581c:	f023 0302 	bic.w	r3, r3, #2
 8015820:	6263      	str	r3, [r4, #36]	; 0x24
 8015822:	68e0      	ldr	r0, [r4, #12]
 8015824:	bd10      	pop	{r4, pc}
	...

08015828 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8015828:	4b02      	ldr	r3, [pc, #8]	; (8015834 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 801582a:	6018      	str	r0, [r3, #0]
 801582c:	4b02      	ldr	r3, [pc, #8]	; (8015838 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 801582e:	6019      	str	r1, [r3, #0]
 8015830:	4770      	bx	lr
 8015832:	bf00      	nop
 8015834:	2400ead8 	.word	0x2400ead8
 8015838:	2400eadc 	.word	0x2400eadc

0801583c <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>:
 801583c:	2300      	movs	r3, #0
 801583e:	4a02      	ldr	r2, [pc, #8]	; (8015848 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0xc>)
 8015840:	6013      	str	r3, [r2, #0]
 8015842:	4a02      	ldr	r2, [pc, #8]	; (801584c <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0x10>)
 8015844:	6013      	str	r3, [r2, #0]
 8015846:	4770      	bx	lr
 8015848:	2400ead8 	.word	0x2400ead8
 801584c:	2400eadc 	.word	0x2400eadc

08015850 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8015850:	4b01      	ldr	r3, [pc, #4]	; (8015858 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8015852:	6818      	ldr	r0, [r3, #0]
 8015854:	4770      	bx	lr
 8015856:	bf00      	nop
 8015858:	2400ead8 	.word	0x2400ead8

0801585c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801585c:	4b01      	ldr	r3, [pc, #4]	; (8015864 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801585e:	6818      	ldr	r0, [r3, #0]
 8015860:	4770      	bx	lr
 8015862:	bf00      	nop
 8015864:	2400eadc 	.word	0x2400eadc

08015868 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8015868:	b510      	push	{r4, lr}
 801586a:	6803      	ldr	r3, [r0, #0]
 801586c:	460c      	mov	r4, r1
 801586e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015870:	4798      	blx	r3
 8015872:	1b03      	subs	r3, r0, r4
 8015874:	4258      	negs	r0, r3
 8015876:	4158      	adcs	r0, r3
 8015878:	bd10      	pop	{r4, pc}
	...

0801587c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801587c:	4b01      	ldr	r3, [pc, #4]	; (8015884 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801587e:	6019      	str	r1, [r3, #0]
 8015880:	4770      	bx	lr
 8015882:	bf00      	nop
 8015884:	2400eae0 	.word	0x2400eae0

08015888 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8015888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801588c:	4696      	mov	lr, r2
 801588e:	b097      	sub	sp, #92	; 0x5c
 8015890:	4605      	mov	r5, r0
 8015892:	4614      	mov	r4, r2
 8015894:	460e      	mov	r6, r1
 8015896:	461f      	mov	r7, r3
 8015898:	f10d 0c1c 	add.w	ip, sp, #28
 801589c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 80158a0:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 80158a4:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 80158a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80158ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80158b0:	f8de 3000 	ldr.w	r3, [lr]
 80158b4:	f104 0e14 	add.w	lr, r4, #20
 80158b8:	f8cc 3000 	str.w	r3, [ip]
 80158bc:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80158c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80158c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80158c8:	f8de 3000 	ldr.w	r3, [lr]
 80158cc:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80158d0:	f8cc 3000 	str.w	r3, [ip]
 80158d4:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80158d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80158dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80158e0:	f8de 3000 	ldr.w	r3, [lr]
 80158e4:	4631      	mov	r1, r6
 80158e6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80158e8:	4628      	mov	r0, r5
 80158ea:	f8cc 3000 	str.w	r3, [ip]
 80158ee:	682b      	ldr	r3, [r5, #0]
 80158f0:	9201      	str	r2, [sp, #4]
 80158f2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80158f4:	f8cd 8008 	str.w	r8, [sp, #8]
 80158f8:	9200      	str	r2, [sp, #0]
 80158fa:	aa07      	add	r2, sp, #28
 80158fc:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8015900:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8015904:	463b      	mov	r3, r7
 8015906:	47d8      	blx	fp
 8015908:	46a6      	mov	lr, r4
 801590a:	f10d 0c1c 	add.w	ip, sp, #28
 801590e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015912:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015916:	f8de 3000 	ldr.w	r3, [lr]
 801591a:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801591e:	343c      	adds	r4, #60	; 0x3c
 8015920:	f8cc 3000 	str.w	r3, [ip]
 8015924:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8015928:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801592c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015930:	f8de 3000 	ldr.w	r3, [lr]
 8015934:	f8cc 3000 	str.w	r3, [ip]
 8015938:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801593c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801593e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015942:	6823      	ldr	r3, [r4, #0]
 8015944:	4631      	mov	r1, r6
 8015946:	4628      	mov	r0, r5
 8015948:	f8cc 3000 	str.w	r3, [ip]
 801594c:	682b      	ldr	r3, [r5, #0]
 801594e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8015952:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015954:	f8cd 8008 	str.w	r8, [sp, #8]
 8015958:	9201      	str	r2, [sp, #4]
 801595a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801595c:	9200      	str	r2, [sp, #0]
 801595e:	aa07      	add	r2, sp, #28
 8015960:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8015962:	463b      	mov	r3, r7
 8015964:	47a0      	blx	r4
 8015966:	b017      	add	sp, #92	; 0x5c
 8015968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801596c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801596c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015970:	b08d      	sub	sp, #52	; 0x34
 8015972:	4688      	mov	r8, r1
 8015974:	f8d3 c000 	ldr.w	ip, [r3]
 8015978:	9916      	ldr	r1, [sp, #88]	; 0x58
 801597a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801597e:	680f      	ldr	r7, [r1, #0]
 8015980:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8015984:	eba7 070c 	sub.w	r7, r7, ip
 8015988:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801598c:	edd3 6a07 	vldr	s13, [r3, #28]
 8015990:	42bc      	cmp	r4, r7
 8015992:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015994:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8015998:	bfa8      	it	ge
 801599a:	463c      	movge	r4, r7
 801599c:	f9b1 9000 	ldrsh.w	r9, [r1]
 80159a0:	f9ba 1000 	ldrsh.w	r1, [sl]
 80159a4:	ee07 4a90 	vmov	s15, r4
 80159a8:	eb09 0e0c 	add.w	lr, r9, ip
 80159ac:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 80159b0:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80159b4:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80159b8:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 80159bc:	4571      	cmp	r1, lr
 80159be:	ee25 4a04 	vmul.f32	s8, s10, s8
 80159c2:	ee65 4a24 	vmul.f32	s9, s10, s9
 80159c6:	ee25 5a27 	vmul.f32	s10, s10, s15
 80159ca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80159ce:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80159d2:	ee32 1a05 	vadd.f32	s2, s4, s10
 80159d6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80159da:	ee36 0a84 	vadd.f32	s0, s13, s8
 80159de:	ee61 1a87 	vmul.f32	s3, s3, s14
 80159e2:	ee22 2a07 	vmul.f32	s4, s4, s14
 80159e6:	f340 808c 	ble.w	8015b02 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80159ea:	eba1 060e 	sub.w	r6, r1, lr
 80159ee:	fb96 f5f4 	sdiv	r5, r6, r4
 80159f2:	ee07 5a10 	vmov	s14, r5
 80159f6:	2d00      	cmp	r5, #0
 80159f8:	fb04 6615 	mls	r6, r4, r5, r6
 80159fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015a00:	eea7 0a04 	vfma.f32	s0, s14, s8
 8015a04:	eee7 0a24 	vfma.f32	s1, s14, s9
 8015a08:	eea7 1a05 	vfma.f32	s2, s14, s10
 8015a0c:	dd12      	ble.n	8015a34 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8015a0e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8015a12:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8015a16:	ee31 2a45 	vsub.f32	s4, s2, s10
 8015a1a:	eef5 6a40 	vcmp.f32	s13, #0.0
 8015a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a22:	bf14      	ite	ne
 8015a24:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8015a28:	eeb0 7a67 	vmoveq.f32	s14, s15
 8015a2c:	ee61 1a87 	vmul.f32	s3, s3, s14
 8015a30:	ee22 2a07 	vmul.f32	s4, s4, s14
 8015a34:	fb05 f204 	mul.w	r2, r5, r4
 8015a38:	1abf      	subs	r7, r7, r2
 8015a3a:	4494      	add	ip, r2
 8015a3c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8015a40:	4411      	add	r1, r2
 8015a42:	eb09 020c 	add.w	r2, r9, ip
 8015a46:	b209      	sxth	r1, r1
 8015a48:	443a      	add	r2, r7
 8015a4a:	428a      	cmp	r2, r1
 8015a4c:	bfc4      	itt	gt
 8015a4e:	eba1 0209 	subgt.w	r2, r1, r9
 8015a52:	eba2 070c 	subgt.w	r7, r2, ip
 8015a56:	2f00      	cmp	r7, #0
 8015a58:	dd50      	ble.n	8015afc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8015a5a:	fb97 f1f4 	sdiv	r1, r7, r4
 8015a5e:	fb04 7211 	mls	r2, r4, r1, r7
 8015a62:	b90a      	cbnz	r2, 8015a68 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8015a64:	3901      	subs	r1, #1
 8015a66:	4622      	mov	r2, r4
 8015a68:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8015a6c:	6840      	ldr	r0, [r0, #4]
 8015a6e:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8015a72:	44b6      	add	lr, r6
 8015a74:	f8d0 a000 	ldr.w	sl, [r0]
 8015a78:	2900      	cmp	r1, #0
 8015a7a:	bfcc      	ite	gt
 8015a7c:	46a1      	movgt	r9, r4
 8015a7e:	4691      	movle	r9, r2
 8015a80:	900b      	str	r0, [sp, #44]	; 0x2c
 8015a82:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8015a84:	fb04 e505 	mla	r5, r4, r5, lr
 8015a88:	eef0 6a42 	vmov.f32	s13, s4
 8015a8c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8015a90:	9008      	str	r0, [sp, #32]
 8015a92:	eeb0 7a61 	vmov.f32	s14, s3
 8015a96:	9818      	ldr	r0, [sp, #96]	; 0x60
 8015a98:	695b      	ldr	r3, [r3, #20]
 8015a9a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015a9e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8015aa2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8015aa6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015aa8:	445b      	add	r3, fp
 8015aaa:	9307      	str	r3, [sp, #28]
 8015aac:	ee16 3a90 	vmov	r3, s13
 8015ab0:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8015ab4:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8015ab8:	ee21 3a23 	vmul.f32	s6, s2, s7
 8015abc:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8015ac0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8015ac4:	ee17 7a90 	vmov	r7, s15
 8015ac8:	ee73 7a42 	vsub.f32	s15, s6, s4
 8015acc:	fb97 f7f4 	sdiv	r7, r7, r4
 8015ad0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8015ad4:	ee17 ca90 	vmov	ip, s15
 8015ad8:	fb9c fcf4 	sdiv	ip, ip, r4
 8015adc:	fb0c 3306 	mla	r3, ip, r6, r3
 8015ae0:	9302      	str	r3, [sp, #8]
 8015ae2:	ee17 3a10 	vmov	r3, s14
 8015ae6:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8015aea:	fb07 3706 	mla	r7, r7, r6, r3
 8015aee:	eba9 0306 	sub.w	r3, r9, r6
 8015af2:	e9cd 4700 	strd	r4, r7, [sp]
 8015af6:	f8da 4008 	ldr.w	r4, [sl, #8]
 8015afa:	47a0      	blx	r4
 8015afc:	b00d      	add	sp, #52	; 0x34
 8015afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b02:	2500      	movs	r5, #0
 8015b04:	462e      	mov	r6, r5
 8015b06:	e799      	b.n	8015a3c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08015b08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8015b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b0c:	b0db      	sub	sp, #364	; 0x16c
 8015b0e:	461d      	mov	r5, r3
 8015b10:	4614      	mov	r4, r2
 8015b12:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8015b16:	910f      	str	r1, [sp, #60]	; 0x3c
 8015b18:	4629      	mov	r1, r5
 8015b1a:	930a      	str	r3, [sp, #40]	; 0x28
 8015b1c:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8015b20:	9009      	str	r0, [sp, #36]	; 0x24
 8015b22:	930b      	str	r3, [sp, #44]	; 0x2c
 8015b24:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8015b28:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8015b2c:	9310      	str	r3, [sp, #64]	; 0x40
 8015b2e:	6803      	ldr	r3, [r0, #0]
 8015b30:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8015b32:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015b36:	47b8      	blx	r7
 8015b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b3a:	6058      	str	r0, [r3, #4]
 8015b3c:	2800      	cmp	r0, #0
 8015b3e:	f000 83a1 	beq.w	8016284 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015b42:	682b      	ldr	r3, [r5, #0]
 8015b44:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8015b48:	ed94 7a02 	vldr	s14, [r4, #8]
 8015b4c:	9314      	str	r3, [sp, #80]	; 0x50
 8015b4e:	686b      	ldr	r3, [r5, #4]
 8015b50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015b54:	9315      	str	r3, [sp, #84]	; 0x54
 8015b56:	4bc1      	ldr	r3, [pc, #772]	; (8015e5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8015b58:	7819      	ldrb	r1, [r3, #0]
 8015b5a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8015b5e:	2900      	cmp	r1, #0
 8015b60:	bf16      	itet	ne
 8015b62:	4619      	movne	r1, r3
 8015b64:	4611      	moveq	r1, r2
 8015b66:	4613      	movne	r3, r2
 8015b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b6c:	9116      	str	r1, [sp, #88]	; 0x58
 8015b6e:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8015b72:	f240 8387 	bls.w	8016284 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015b76:	ed94 7a07 	vldr	s14, [r4, #28]
 8015b7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b82:	f240 837f 	bls.w	8016284 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015b86:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8015b8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b92:	f240 8377 	bls.w	8016284 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015b96:	6822      	ldr	r2, [r4, #0]
 8015b98:	4bb1      	ldr	r3, [pc, #708]	; (8015e60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8015b9a:	429a      	cmp	r2, r3
 8015b9c:	f2c0 8372 	blt.w	8016284 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015ba0:	49b0      	ldr	r1, [pc, #704]	; (8015e64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8015ba2:	6963      	ldr	r3, [r4, #20]
 8015ba4:	428a      	cmp	r2, r1
 8015ba6:	f300 836d 	bgt.w	8016284 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015baa:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8015bae:	48ae      	ldr	r0, [pc, #696]	; (8015e68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8015bb0:	33ff      	adds	r3, #255	; 0xff
 8015bb2:	4283      	cmp	r3, r0
 8015bb4:	f200 8366 	bhi.w	8016284 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015bb8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015bba:	4dac      	ldr	r5, [pc, #688]	; (8015e6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8015bbc:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8015bc0:	33ff      	adds	r3, #255	; 0xff
 8015bc2:	42ab      	cmp	r3, r5
 8015bc4:	f200 835e 	bhi.w	8016284 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015bc8:	6862      	ldr	r2, [r4, #4]
 8015bca:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8015bce:	33ff      	adds	r3, #255	; 0xff
 8015bd0:	4283      	cmp	r3, r0
 8015bd2:	f200 8357 	bhi.w	8016284 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015bd6:	69a1      	ldr	r1, [r4, #24]
 8015bd8:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8015bdc:	33ff      	adds	r3, #255	; 0xff
 8015bde:	4283      	cmp	r3, r0
 8015be0:	f200 8350 	bhi.w	8016284 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015be4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015be6:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8015bea:	30ff      	adds	r0, #255	; 0xff
 8015bec:	42a8      	cmp	r0, r5
 8015bee:	f200 8349 	bhi.w	8016284 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015bf2:	428a      	cmp	r2, r1
 8015bf4:	f280 8110 	bge.w	8015e18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8015bf8:	429a      	cmp	r2, r3
 8015bfa:	f300 8119 	bgt.w	8015e30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8015bfe:	4299      	cmp	r1, r3
 8015c00:	f280 811d 	bge.w	8015e3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8015c04:	2502      	movs	r5, #2
 8015c06:	2701      	movs	r7, #1
 8015c08:	46a9      	mov	r9, r5
 8015c0a:	46b8      	mov	r8, r7
 8015c0c:	f04f 0a00 	mov.w	sl, #0
 8015c10:	4621      	mov	r1, r4
 8015c12:	a849      	add	r0, sp, #292	; 0x124
 8015c14:	f003 fd42 	bl	801969c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8015c18:	4622      	mov	r2, r4
 8015c1a:	4653      	mov	r3, sl
 8015c1c:	a949      	add	r1, sp, #292	; 0x124
 8015c1e:	f8cd 9000 	str.w	r9, [sp]
 8015c22:	a819      	add	r0, sp, #100	; 0x64
 8015c24:	f003 fe6a 	bl	80198fc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015c28:	4622      	mov	r2, r4
 8015c2a:	4653      	mov	r3, sl
 8015c2c:	a949      	add	r1, sp, #292	; 0x124
 8015c2e:	f8cd 8000 	str.w	r8, [sp]
 8015c32:	a829      	add	r0, sp, #164	; 0xa4
 8015c34:	f003 fe62 	bl	80198fc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015c38:	4643      	mov	r3, r8
 8015c3a:	4622      	mov	r2, r4
 8015c3c:	a949      	add	r1, sp, #292	; 0x124
 8015c3e:	f8cd 9000 	str.w	r9, [sp]
 8015c42:	a839      	add	r0, sp, #228	; 0xe4
 8015c44:	f003 fe5a 	bl	80198fc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015c48:	42af      	cmp	r7, r5
 8015c4a:	af12      	add	r7, sp, #72	; 0x48
 8015c4c:	bfb7      	itett	lt
 8015c4e:	2300      	movlt	r3, #0
 8015c50:	2301      	movge	r3, #1
 8015c52:	ad29      	addlt	r5, sp, #164	; 0xa4
 8015c54:	ac19      	addlt	r4, sp, #100	; 0x64
 8015c56:	bfb1      	iteee	lt
 8015c58:	930e      	strlt	r3, [sp, #56]	; 0x38
 8015c5a:	ad19      	addge	r5, sp, #100	; 0x64
 8015c5c:	930e      	strge	r3, [sp, #56]	; 0x38
 8015c5e:	ac29      	addge	r4, sp, #164	; 0xa4
 8015c60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015c62:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015c66:	e887 0003 	stmia.w	r7, {r0, r1}
 8015c6a:	b928      	cbnz	r0, 8015c78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8015c6c:	4b80      	ldr	r3, [pc, #512]	; (8015e70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8015c6e:	6818      	ldr	r0, [r3, #0]
 8015c70:	6803      	ldr	r3, [r0, #0]
 8015c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c74:	4798      	blx	r3
 8015c76:	6038      	str	r0, [r7, #0]
 8015c78:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8015c7a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8015c7e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015c82:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8015c84:	930c      	str	r3, [sp, #48]	; 0x30
 8015c86:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015c88:	6963      	ldr	r3, [r4, #20]
 8015c8a:	440b      	add	r3, r1
 8015c8c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8015c90:	4408      	add	r0, r1
 8015c92:	b200      	sxth	r0, r0
 8015c94:	4283      	cmp	r3, r0
 8015c96:	900d      	str	r0, [sp, #52]	; 0x34
 8015c98:	f280 80dd 	bge.w	8015e56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8015c9c:	428b      	cmp	r3, r1
 8015c9e:	da08      	bge.n	8015cb2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015ca0:	2a00      	cmp	r2, #0
 8015ca2:	dd06      	ble.n	8015cb2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015ca4:	1acb      	subs	r3, r1, r3
 8015ca6:	429a      	cmp	r2, r3
 8015ca8:	f2c0 80e4 	blt.w	8015e74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	f300 80e2 	bgt.w	8015e76 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8015cb2:	6967      	ldr	r7, [r4, #20]
 8015cb4:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8015cb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015cba:	443b      	add	r3, r7
 8015cbc:	461f      	mov	r7, r3
 8015cbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015cc0:	1bdf      	subs	r7, r3, r7
 8015cc2:	4297      	cmp	r7, r2
 8015cc4:	bfa8      	it	ge
 8015cc6:	4617      	movge	r7, r2
 8015cc8:	2f00      	cmp	r7, #0
 8015cca:	f340 8166 	ble.w	8015f9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8015cce:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8015cd0:	6829      	ldr	r1, [r5, #0]
 8015cd2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015cd6:	f9bb 3000 	ldrsh.w	r3, [fp]
 8015cda:	4411      	add	r1, r2
 8015cdc:	6820      	ldr	r0, [r4, #0]
 8015cde:	4299      	cmp	r1, r3
 8015ce0:	dd1a      	ble.n	8015d18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8015ce2:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8015ce6:	4402      	add	r2, r0
 8015ce8:	440b      	add	r3, r1
 8015cea:	b21b      	sxth	r3, r3
 8015cec:	429a      	cmp	r2, r3
 8015cee:	dc13      	bgt.n	8015d18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8015cf0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015cf2:	a912      	add	r1, sp, #72	; 0x48
 8015cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cf6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015cf8:	681b      	ldr	r3, [r3, #0]
 8015cfa:	9206      	str	r2, [sp, #24]
 8015cfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015cfe:	9500      	str	r5, [sp, #0]
 8015d00:	9205      	str	r2, [sp, #20]
 8015d02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015d04:	e9cd b203 	strd	fp, r2, [sp, #12]
 8015d08:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8015d0a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8015d0e:	aa49      	add	r2, sp, #292	; 0x124
 8015d10:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8015d14:	4623      	mov	r3, r4
 8015d16:	47c8      	blx	r9
 8015d18:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8015d1c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8015d20:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8015d24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015d28:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8015d2c:	68a1      	ldr	r1, [r4, #8]
 8015d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015d32:	ed94 6a08 	vldr	s12, [r4, #32]
 8015d36:	edd4 6a07 	vldr	s13, [r4, #28]
 8015d3a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8015d3e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015d42:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8015d46:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015d4a:	edc4 6a07 	vstr	s13, [r4, #28]
 8015d4e:	441a      	add	r2, r3
 8015d50:	6963      	ldr	r3, [r4, #20]
 8015d52:	3301      	adds	r3, #1
 8015d54:	6022      	str	r2, [r4, #0]
 8015d56:	6163      	str	r3, [r4, #20]
 8015d58:	69a3      	ldr	r3, [r4, #24]
 8015d5a:	3b01      	subs	r3, #1
 8015d5c:	61a3      	str	r3, [r4, #24]
 8015d5e:	6923      	ldr	r3, [r4, #16]
 8015d60:	440b      	add	r3, r1
 8015d62:	68e1      	ldr	r1, [r4, #12]
 8015d64:	428b      	cmp	r3, r1
 8015d66:	6123      	str	r3, [r4, #16]
 8015d68:	db15      	blt.n	8015d96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8015d6a:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8015d6e:	3201      	adds	r2, #1
 8015d70:	1a5b      	subs	r3, r3, r1
 8015d72:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015d76:	6022      	str	r2, [r4, #0]
 8015d78:	6123      	str	r3, [r4, #16]
 8015d7a:	edc4 6a07 	vstr	s13, [r4, #28]
 8015d7e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8015d82:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015d86:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8015d8a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8015d8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015d92:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8015d96:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8015d9a:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8015d9e:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8015da2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015da6:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8015daa:	68a9      	ldr	r1, [r5, #8]
 8015dac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015db0:	ed95 6a08 	vldr	s12, [r5, #32]
 8015db4:	edd5 6a07 	vldr	s13, [r5, #28]
 8015db8:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8015dbc:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015dc0:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8015dc4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015dc8:	edc5 6a07 	vstr	s13, [r5, #28]
 8015dcc:	441a      	add	r2, r3
 8015dce:	696b      	ldr	r3, [r5, #20]
 8015dd0:	3301      	adds	r3, #1
 8015dd2:	602a      	str	r2, [r5, #0]
 8015dd4:	616b      	str	r3, [r5, #20]
 8015dd6:	69ab      	ldr	r3, [r5, #24]
 8015dd8:	3b01      	subs	r3, #1
 8015dda:	61ab      	str	r3, [r5, #24]
 8015ddc:	692b      	ldr	r3, [r5, #16]
 8015dde:	440b      	add	r3, r1
 8015de0:	68e9      	ldr	r1, [r5, #12]
 8015de2:	428b      	cmp	r3, r1
 8015de4:	612b      	str	r3, [r5, #16]
 8015de6:	db15      	blt.n	8015e14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8015de8:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8015dec:	3201      	adds	r2, #1
 8015dee:	1a5b      	subs	r3, r3, r1
 8015df0:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015df4:	602a      	str	r2, [r5, #0]
 8015df6:	612b      	str	r3, [r5, #16]
 8015df8:	edc5 6a07 	vstr	s13, [r5, #28]
 8015dfc:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8015e00:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015e04:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8015e08:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8015e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015e10:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8015e14:	3f01      	subs	r7, #1
 8015e16:	e757      	b.n	8015cc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8015e18:	4299      	cmp	r1, r3
 8015e1a:	dc13      	bgt.n	8015e44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8015e1c:	429a      	cmp	r2, r3
 8015e1e:	da14      	bge.n	8015e4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8015e20:	2502      	movs	r5, #2
 8015e22:	2703      	movs	r7, #3
 8015e24:	f04f 0800 	mov.w	r8, #0
 8015e28:	46a9      	mov	r9, r5
 8015e2a:	f04f 0a01 	mov.w	sl, #1
 8015e2e:	e6ef      	b.n	8015c10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8015e30:	2501      	movs	r5, #1
 8015e32:	2700      	movs	r7, #0
 8015e34:	46a9      	mov	r9, r5
 8015e36:	46b8      	mov	r8, r7
 8015e38:	f04f 0a02 	mov.w	sl, #2
 8015e3c:	e6e8      	b.n	8015c10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8015e3e:	2501      	movs	r5, #1
 8015e40:	2702      	movs	r7, #2
 8015e42:	e6e1      	b.n	8015c08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8015e44:	2500      	movs	r5, #0
 8015e46:	2701      	movs	r7, #1
 8015e48:	e7f4      	b.n	8015e34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8015e4a:	2702      	movs	r7, #2
 8015e4c:	2503      	movs	r5, #3
 8015e4e:	f04f 0900 	mov.w	r9, #0
 8015e52:	46b8      	mov	r8, r7
 8015e54:	e7e9      	b.n	8015e2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8015e56:	4613      	mov	r3, r2
 8015e58:	e728      	b.n	8015cac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8015e5a:	bf00      	nop
 8015e5c:	2400eac8 	.word	0x2400eac8
 8015e60:	fffd8f01 	.word	0xfffd8f01
 8015e64:	00027100 	.word	0x00027100
 8015e68:	0004e1ff 	.word	0x0004e1ff
 8015e6c:	0004e1fe 	.word	0x0004e1fe
 8015e70:	2400ead0 	.word	0x2400ead0
 8015e74:	4613      	mov	r3, r2
 8015e76:	992b      	ldr	r1, [sp, #172]	; 0xac
 8015e78:	469e      	mov	lr, r3
 8015e7a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8015e7c:	469c      	mov	ip, r3
 8015e7e:	9111      	str	r1, [sp, #68]	; 0x44
 8015e80:	f04f 0900 	mov.w	r9, #0
 8015e84:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8015e88:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8015e8c:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8015e90:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8015e94:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8015e98:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8015e9c:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8015ea0:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8015ea4:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8015ea8:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8015eac:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8015eb0:	f1bc 0f00 	cmp.w	ip, #0
 8015eb4:	d147      	bne.n	8015f46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8015eb6:	eb03 0c07 	add.w	ip, r3, r7
 8015eba:	1ad7      	subs	r7, r2, r3
 8015ebc:	f1b9 0f00 	cmp.w	r9, #0
 8015ec0:	d009      	beq.n	8015ed6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8015ec2:	9029      	str	r0, [sp, #164]	; 0xa4
 8015ec4:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8015ec8:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8015ecc:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8015ed0:	912d      	str	r1, [sp, #180]	; 0xb4
 8015ed2:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8015ed6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8015ed8:	f04f 0800 	mov.w	r8, #0
 8015edc:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8015ee0:	9111      	str	r1, [sp, #68]	; 0x44
 8015ee2:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8015ee6:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8015eea:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8015eee:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8015ef2:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8015ef6:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8015efa:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8015efe:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8015f02:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8015f06:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8015f0a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8015f0e:	f1be 0f00 	cmp.w	lr, #0
 8015f12:	d031      	beq.n	8015f78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8015f14:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8015f16:	4450      	add	r0, sl
 8015f18:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8015f1c:	4431      	add	r1, r6
 8015f1e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8015f22:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8015f26:	4549      	cmp	r1, r9
 8015f28:	db08      	blt.n	8015f3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8015f2a:	ee77 7a85 	vadd.f32	s15, s15, s10
 8015f2e:	3001      	adds	r0, #1
 8015f30:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015f34:	eba1 0109 	sub.w	r1, r1, r9
 8015f38:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015f3c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015f40:	f04f 0801 	mov.w	r8, #1
 8015f44:	e7e3      	b.n	8015f0e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8015f46:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8015f48:	4450      	add	r0, sl
 8015f4a:	ee37 7a24 	vadd.f32	s14, s14, s9
 8015f4e:	4431      	add	r1, r6
 8015f50:	ee77 7a84 	vadd.f32	s15, s15, s8
 8015f54:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8015f58:	4541      	cmp	r1, r8
 8015f5a:	db08      	blt.n	8015f6e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8015f5c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8015f60:	3001      	adds	r0, #1
 8015f62:	ee37 7a25 	vadd.f32	s14, s14, s11
 8015f66:	eba1 0108 	sub.w	r1, r1, r8
 8015f6a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8015f6e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015f72:	f04f 0901 	mov.w	r9, #1
 8015f76:	e79b      	b.n	8015eb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8015f78:	449c      	add	ip, r3
 8015f7a:	1aff      	subs	r7, r7, r3
 8015f7c:	f1b8 0f00 	cmp.w	r8, #0
 8015f80:	d009      	beq.n	8015f96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8015f82:	9019      	str	r0, [sp, #100]	; 0x64
 8015f84:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8015f88:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8015f8c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8015f90:	911d      	str	r1, [sp, #116]	; 0x74
 8015f92:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8015f96:	1ad2      	subs	r2, r2, r3
 8015f98:	e68b      	b.n	8015cb2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015f9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015f9c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	f000 80d1 	beq.w	8016146 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8015fa4:	ad19      	add	r5, sp, #100	; 0x64
 8015fa6:	ac39      	add	r4, sp, #228	; 0xe4
 8015fa8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8015faa:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8015fae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015fb2:	930c      	str	r3, [sp, #48]	; 0x30
 8015fb4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015fb6:	6963      	ldr	r3, [r4, #20]
 8015fb8:	440b      	add	r3, r1
 8015fba:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8015fbe:	4408      	add	r0, r1
 8015fc0:	b200      	sxth	r0, r0
 8015fc2:	4283      	cmp	r3, r0
 8015fc4:	900d      	str	r0, [sp, #52]	; 0x34
 8015fc6:	f280 80c1 	bge.w	801614c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8015fca:	428b      	cmp	r3, r1
 8015fcc:	da08      	bge.n	8015fe0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8015fce:	2a00      	cmp	r2, #0
 8015fd0:	dd06      	ble.n	8015fe0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8015fd2:	1acb      	subs	r3, r1, r3
 8015fd4:	429a      	cmp	r2, r3
 8015fd6:	f2c0 80bb 	blt.w	8016150 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	f300 80b9 	bgt.w	8016152 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8015fe0:	6967      	ldr	r7, [r4, #20]
 8015fe2:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8015fe6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015fe8:	443b      	add	r3, r7
 8015fea:	461f      	mov	r7, r3
 8015fec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015fee:	1bdf      	subs	r7, r3, r7
 8015ff0:	4297      	cmp	r7, r2
 8015ff2:	bfa8      	it	ge
 8015ff4:	4617      	movge	r7, r2
 8015ff6:	2f00      	cmp	r7, #0
 8015ff8:	f340 813c 	ble.w	8016274 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8015ffc:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8015ffe:	6829      	ldr	r1, [r5, #0]
 8016000:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016004:	f9bb 3000 	ldrsh.w	r3, [fp]
 8016008:	4411      	add	r1, r2
 801600a:	6820      	ldr	r0, [r4, #0]
 801600c:	4299      	cmp	r1, r3
 801600e:	dd1a      	ble.n	8016046 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8016010:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8016014:	4402      	add	r2, r0
 8016016:	440b      	add	r3, r1
 8016018:	b21b      	sxth	r3, r3
 801601a:	429a      	cmp	r2, r3
 801601c:	dc13      	bgt.n	8016046 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801601e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016020:	a912      	add	r1, sp, #72	; 0x48
 8016022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016024:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016026:	681b      	ldr	r3, [r3, #0]
 8016028:	9206      	str	r2, [sp, #24]
 801602a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801602c:	9500      	str	r5, [sp, #0]
 801602e:	9205      	str	r2, [sp, #20]
 8016030:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016032:	e9cd b203 	strd	fp, r2, [sp, #12]
 8016036:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016038:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801603c:	aa49      	add	r2, sp, #292	; 0x124
 801603e:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8016042:	4623      	mov	r3, r4
 8016044:	47c8      	blx	r9
 8016046:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801604a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801604e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8016052:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016056:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801605a:	68a1      	ldr	r1, [r4, #8]
 801605c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016060:	ed94 6a08 	vldr	s12, [r4, #32]
 8016064:	edd4 6a07 	vldr	s13, [r4, #28]
 8016068:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801606c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016070:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8016074:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016078:	edc4 6a07 	vstr	s13, [r4, #28]
 801607c:	441a      	add	r2, r3
 801607e:	6963      	ldr	r3, [r4, #20]
 8016080:	3301      	adds	r3, #1
 8016082:	6022      	str	r2, [r4, #0]
 8016084:	6163      	str	r3, [r4, #20]
 8016086:	69a3      	ldr	r3, [r4, #24]
 8016088:	3b01      	subs	r3, #1
 801608a:	61a3      	str	r3, [r4, #24]
 801608c:	6923      	ldr	r3, [r4, #16]
 801608e:	440b      	add	r3, r1
 8016090:	68e1      	ldr	r1, [r4, #12]
 8016092:	428b      	cmp	r3, r1
 8016094:	6123      	str	r3, [r4, #16]
 8016096:	db15      	blt.n	80160c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8016098:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801609c:	3201      	adds	r2, #1
 801609e:	1a5b      	subs	r3, r3, r1
 80160a0:	ee76 6a26 	vadd.f32	s13, s12, s13
 80160a4:	6022      	str	r2, [r4, #0]
 80160a6:	6123      	str	r3, [r4, #16]
 80160a8:	edc4 6a07 	vstr	s13, [r4, #28]
 80160ac:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80160b0:	ee36 7a87 	vadd.f32	s14, s13, s14
 80160b4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80160b8:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80160bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80160c0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80160c4:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80160c8:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80160cc:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80160d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80160d4:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80160d8:	68a9      	ldr	r1, [r5, #8]
 80160da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80160de:	ed95 6a08 	vldr	s12, [r5, #32]
 80160e2:	edd5 6a07 	vldr	s13, [r5, #28]
 80160e6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80160ea:	ee76 6a86 	vadd.f32	s13, s13, s12
 80160ee:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80160f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80160f6:	edc5 6a07 	vstr	s13, [r5, #28]
 80160fa:	441a      	add	r2, r3
 80160fc:	696b      	ldr	r3, [r5, #20]
 80160fe:	3301      	adds	r3, #1
 8016100:	602a      	str	r2, [r5, #0]
 8016102:	616b      	str	r3, [r5, #20]
 8016104:	69ab      	ldr	r3, [r5, #24]
 8016106:	3b01      	subs	r3, #1
 8016108:	61ab      	str	r3, [r5, #24]
 801610a:	692b      	ldr	r3, [r5, #16]
 801610c:	440b      	add	r3, r1
 801610e:	68e9      	ldr	r1, [r5, #12]
 8016110:	428b      	cmp	r3, r1
 8016112:	612b      	str	r3, [r5, #16]
 8016114:	db15      	blt.n	8016142 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8016116:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801611a:	3201      	adds	r2, #1
 801611c:	1a5b      	subs	r3, r3, r1
 801611e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8016122:	602a      	str	r2, [r5, #0]
 8016124:	612b      	str	r3, [r5, #16]
 8016126:	edc5 6a07 	vstr	s13, [r5, #28]
 801612a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801612e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016132:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8016136:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801613a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801613e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8016142:	3f01      	subs	r7, #1
 8016144:	e757      	b.n	8015ff6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8016146:	ad39      	add	r5, sp, #228	; 0xe4
 8016148:	ac19      	add	r4, sp, #100	; 0x64
 801614a:	e72d      	b.n	8015fa8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801614c:	4613      	mov	r3, r2
 801614e:	e744      	b.n	8015fda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8016150:	4613      	mov	r3, r2
 8016152:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8016154:	469e      	mov	lr, r3
 8016156:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801615a:	461f      	mov	r7, r3
 801615c:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8016160:	f04f 0900 	mov.w	r9, #0
 8016164:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8016168:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801616c:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8016170:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8016174:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8016178:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801617a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801617e:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8016182:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8016186:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801618a:	960e      	str	r6, [sp, #56]	; 0x38
 801618c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8016190:	2f00      	cmp	r7, #0
 8016192:	d146      	bne.n	8016222 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8016194:	449c      	add	ip, r3
 8016196:	1ad7      	subs	r7, r2, r3
 8016198:	f1b9 0f00 	cmp.w	r9, #0
 801619c:	d009      	beq.n	80161b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801619e:	9039      	str	r0, [sp, #228]	; 0xe4
 80161a0:	913d      	str	r1, [sp, #244]	; 0xf4
 80161a2:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 80161a6:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 80161aa:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 80161ae:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 80161b2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80161b4:	f04f 0800 	mov.w	r8, #0
 80161b8:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80161bc:	910e      	str	r1, [sp, #56]	; 0x38
 80161be:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80161c2:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80161c6:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80161ca:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80161ce:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80161d2:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80161d6:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80161da:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80161de:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80161e2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80161e6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80161ea:	f1be 0f00 	cmp.w	lr, #0
 80161ee:	d030      	beq.n	8016252 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 80161f0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80161f2:	4450      	add	r0, sl
 80161f4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80161f8:	4431      	add	r1, r6
 80161fa:	ee37 7a04 	vadd.f32	s14, s14, s8
 80161fe:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8016202:	4549      	cmp	r1, r9
 8016204:	db08      	blt.n	8016218 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8016206:	ee77 7a85 	vadd.f32	s15, s15, s10
 801620a:	3001      	adds	r0, #1
 801620c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8016210:	eba1 0109 	sub.w	r1, r1, r9
 8016214:	ee37 7a06 	vadd.f32	s14, s14, s12
 8016218:	f10e 3eff 	add.w	lr, lr, #4294967295
 801621c:	f04f 0801 	mov.w	r8, #1
 8016220:	e7e3      	b.n	80161ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8016222:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016224:	4450      	add	r0, sl
 8016226:	ee37 7a24 	vadd.f32	s14, s14, s9
 801622a:	4431      	add	r1, r6
 801622c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8016230:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8016234:	4541      	cmp	r1, r8
 8016236:	db08      	blt.n	801624a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8016238:	ee76 6a85 	vadd.f32	s13, s13, s10
 801623c:	3001      	adds	r0, #1
 801623e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8016242:	eba1 0108 	sub.w	r1, r1, r8
 8016246:	ee77 7a86 	vadd.f32	s15, s15, s12
 801624a:	3f01      	subs	r7, #1
 801624c:	f04f 0901 	mov.w	r9, #1
 8016250:	e79e      	b.n	8016190 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8016252:	449c      	add	ip, r3
 8016254:	1aff      	subs	r7, r7, r3
 8016256:	f1b8 0f00 	cmp.w	r8, #0
 801625a:	d009      	beq.n	8016270 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801625c:	9019      	str	r0, [sp, #100]	; 0x64
 801625e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8016262:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8016266:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801626a:	911d      	str	r1, [sp, #116]	; 0x74
 801626c:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8016270:	1ad2      	subs	r2, r2, r3
 8016272:	e6b5      	b.n	8015fe0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8016274:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	b923      	cbnz	r3, 8016284 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801627a:	4b04      	ldr	r3, [pc, #16]	; (801628c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801627c:	6818      	ldr	r0, [r3, #0]
 801627e:	6803      	ldr	r3, [r0, #0]
 8016280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016282:	4798      	blx	r3
 8016284:	b05b      	add	sp, #364	; 0x16c
 8016286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801628a:	bf00      	nop
 801628c:	2400ead0 	.word	0x2400ead0

08016290 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8016290:	b570      	push	{r4, r5, r6, lr}
 8016292:	4604      	mov	r4, r0
 8016294:	2500      	movs	r5, #0
 8016296:	9805      	ldr	r0, [sp, #20]
 8016298:	f89d 601c 	ldrb.w	r6, [sp, #28]
 801629c:	6061      	str	r1, [r4, #4]
 801629e:	8263      	strh	r3, [r4, #18]
 80162a0:	f89d 1010 	ldrb.w	r1, [sp, #16]
 80162a4:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80162a8:	8025      	strh	r5, [r4, #0]
 80162aa:	7221      	strb	r1, [r4, #8]
 80162ac:	7266      	strb	r6, [r4, #9]
 80162ae:	60e0      	str	r0, [r4, #12]
 80162b0:	8222      	strh	r2, [r4, #16]
 80162b2:	82a3      	strh	r3, [r4, #20]
 80162b4:	82e5      	strh	r5, [r4, #22]
 80162b6:	8325      	strh	r5, [r4, #24]
 80162b8:	8365      	strh	r5, [r4, #26]
 80162ba:	83a5      	strh	r5, [r4, #28]
 80162bc:	83e5      	strh	r5, [r4, #30]
 80162be:	8425      	strh	r5, [r4, #32]
 80162c0:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 80162c4:	b32e      	cbz	r6, 8016312 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80162c6:	6803      	ldr	r3, [r0, #0]
 80162c8:	695b      	ldr	r3, [r3, #20]
 80162ca:	4798      	blx	r3
 80162cc:	4606      	mov	r6, r0
 80162ce:	b300      	cbz	r0, 8016312 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80162d0:	68e0      	ldr	r0, [r4, #12]
 80162d2:	4631      	mov	r1, r6
 80162d4:	6803      	ldr	r3, [r0, #0]
 80162d6:	68db      	ldr	r3, [r3, #12]
 80162d8:	4798      	blx	r3
 80162da:	4605      	mov	r5, r0
 80162dc:	b1c8      	cbz	r0, 8016312 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80162de:	7b43      	ldrb	r3, [r0, #13]
 80162e0:	7a82      	ldrb	r2, [r0, #10]
 80162e2:	005b      	lsls	r3, r3, #1
 80162e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80162e8:	4313      	orrs	r3, r2
 80162ea:	8423      	strh	r3, [r4, #32]
 80162ec:	7a63      	ldrb	r3, [r4, #9]
 80162ee:	2b06      	cmp	r3, #6
 80162f0:	d10f      	bne.n	8016312 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80162f2:	68e0      	ldr	r0, [r4, #12]
 80162f4:	462a      	mov	r2, r5
 80162f6:	4631      	mov	r1, r6
 80162f8:	6803      	ldr	r3, [r0, #0]
 80162fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80162fc:	4798      	blx	r3
 80162fe:	7b6b      	ldrb	r3, [r5, #13]
 8016300:	005b      	lsls	r3, r3, #1
 8016302:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016306:	7aab      	ldrb	r3, [r5, #10]
 8016308:	4313      	orrs	r3, r2
 801630a:	4418      	add	r0, r3
 801630c:	8c23      	ldrh	r3, [r4, #32]
 801630e:	4418      	add	r0, r3
 8016310:	8420      	strh	r0, [r4, #32]
 8016312:	4620      	mov	r0, r4
 8016314:	bd70      	pop	{r4, r5, r6, pc}

08016316 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8016316:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801631a:	2400      	movs	r4, #0
 801631c:	b085      	sub	sp, #20
 801631e:	4681      	mov	r9, r0
 8016320:	4688      	mov	r8, r1
 8016322:	4692      	mov	sl, r2
 8016324:	469b      	mov	fp, r3
 8016326:	4627      	mov	r7, r4
 8016328:	4625      	mov	r5, r4
 801632a:	4626      	mov	r6, r4
 801632c:	4554      	cmp	r4, sl
 801632e:	da2a      	bge.n	8016386 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8016330:	2300      	movs	r3, #0
 8016332:	9303      	str	r3, [sp, #12]
 8016334:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8016338:	429d      	cmp	r5, r3
 801633a:	d004      	beq.n	8016346 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801633c:	f242 030b 	movw	r3, #8203	; 0x200b
 8016340:	429d      	cmp	r5, r3
 8016342:	bf18      	it	ne
 8016344:	462f      	movne	r7, r5
 8016346:	ab03      	add	r3, sp, #12
 8016348:	4642      	mov	r2, r8
 801634a:	4659      	mov	r1, fp
 801634c:	4648      	mov	r0, r9
 801634e:	f002 ffbb 	bl	80192c8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016352:	4605      	mov	r5, r0
 8016354:	b1b8      	cbz	r0, 8016386 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8016356:	280a      	cmp	r0, #10
 8016358:	d015      	beq.n	8016386 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801635a:	9a03      	ldr	r2, [sp, #12]
 801635c:	b18a      	cbz	r2, 8016382 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801635e:	7b50      	ldrb	r0, [r2, #13]
 8016360:	4639      	mov	r1, r7
 8016362:	7a93      	ldrb	r3, [r2, #10]
 8016364:	0040      	lsls	r0, r0, #1
 8016366:	8895      	ldrh	r5, [r2, #4]
 8016368:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801636c:	4303      	orrs	r3, r0
 801636e:	4640      	mov	r0, r8
 8016370:	9301      	str	r3, [sp, #4]
 8016372:	f8d8 3000 	ldr.w	r3, [r8]
 8016376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016378:	4798      	blx	r3
 801637a:	9b01      	ldr	r3, [sp, #4]
 801637c:	4418      	add	r0, r3
 801637e:	4406      	add	r6, r0
 8016380:	b2b6      	uxth	r6, r6
 8016382:	3401      	adds	r4, #1
 8016384:	e7d2      	b.n	801632c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8016386:	4630      	mov	r0, r6
 8016388:	b005      	add	sp, #20
 801638a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801638e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801638e:	2a02      	cmp	r2, #2
 8016390:	b530      	push	{r4, r5, lr}
 8016392:	d011      	beq.n	80163b8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8016394:	2a03      	cmp	r2, #3
 8016396:	d01c      	beq.n	80163d2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8016398:	2a01      	cmp	r2, #1
 801639a:	d10c      	bne.n	80163b6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801639c:	888b      	ldrh	r3, [r1, #4]
 801639e:	8801      	ldrh	r1, [r0, #0]
 80163a0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80163a4:	1a5b      	subs	r3, r3, r1
 80163a6:	8844      	ldrh	r4, [r0, #2]
 80163a8:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80163ac:	1a9b      	subs	r3, r3, r2
 80163ae:	8004      	strh	r4, [r0, #0]
 80163b0:	8081      	strh	r1, [r0, #4]
 80163b2:	8043      	strh	r3, [r0, #2]
 80163b4:	80c2      	strh	r2, [r0, #6]
 80163b6:	bd30      	pop	{r4, r5, pc}
 80163b8:	88cb      	ldrh	r3, [r1, #6]
 80163ba:	8842      	ldrh	r2, [r0, #2]
 80163bc:	1a9b      	subs	r3, r3, r2
 80163be:	88c2      	ldrh	r2, [r0, #6]
 80163c0:	1a9b      	subs	r3, r3, r2
 80163c2:	888a      	ldrh	r2, [r1, #4]
 80163c4:	8801      	ldrh	r1, [r0, #0]
 80163c6:	8043      	strh	r3, [r0, #2]
 80163c8:	1a52      	subs	r2, r2, r1
 80163ca:	8881      	ldrh	r1, [r0, #4]
 80163cc:	1a52      	subs	r2, r2, r1
 80163ce:	8002      	strh	r2, [r0, #0]
 80163d0:	e7f1      	b.n	80163b6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80163d2:	88cb      	ldrh	r3, [r1, #6]
 80163d4:	8841      	ldrh	r1, [r0, #2]
 80163d6:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80163da:	1a5b      	subs	r3, r3, r1
 80163dc:	f9b0 5000 	ldrsh.w	r5, [r0]
 80163e0:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80163e4:	1a9b      	subs	r3, r3, r2
 80163e6:	8045      	strh	r5, [r0, #2]
 80163e8:	8082      	strh	r2, [r0, #4]
 80163ea:	8003      	strh	r3, [r0, #0]
 80163ec:	80c4      	strh	r4, [r0, #6]
 80163ee:	e7e2      	b.n	80163b6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

080163f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 80163f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163f4:	b09f      	sub	sp, #124	; 0x7c
 80163f6:	9116      	str	r1, [sp, #88]	; 0x58
 80163f8:	9317      	str	r3, [sp, #92]	; 0x5c
 80163fa:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80163fc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80163fe:	8809      	ldrh	r1, [r1, #0]
 8016400:	889b      	ldrh	r3, [r3, #4]
 8016402:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8016406:	440b      	add	r3, r1
 8016408:	9212      	str	r2, [sp, #72]	; 0x48
 801640a:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801640e:	b21b      	sxth	r3, r3
 8016410:	9011      	str	r0, [sp, #68]	; 0x44
 8016412:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8016416:	9310      	str	r3, [sp, #64]	; 0x40
 8016418:	f8d8 3000 	ldr.w	r3, [r8]
 801641c:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
 8016420:	7b19      	ldrb	r1, [r3, #12]
 8016422:	7adb      	ldrb	r3, [r3, #11]
 8016424:	9114      	str	r1, [sp, #80]	; 0x50
 8016426:	9315      	str	r3, [sp, #84]	; 0x54
 8016428:	2a00      	cmp	r2, #0
 801642a:	d06a      	beq.n	8016502 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801642c:	f898 3010 	ldrb.w	r3, [r8, #16]
 8016430:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8016432:	2b06      	cmp	r3, #6
 8016434:	bf14      	ite	ne
 8016436:	2301      	movne	r3, #1
 8016438:	2302      	moveq	r3, #2
 801643a:	4413      	add	r3, r2
 801643c:	f04f 0900 	mov.w	r9, #0
 8016440:	930f      	str	r3, [sp, #60]	; 0x3c
 8016442:	464c      	mov	r4, r9
 8016444:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8016448:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801644c:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8016450:	4293      	cmp	r3, r2
 8016452:	f280 808f 	bge.w	8016574 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8016456:	2300      	movs	r3, #0
 8016458:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 801645c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8016460:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8016464:	429c      	cmp	r4, r3
 8016466:	d006      	beq.n	8016476 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8016468:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801646a:	f242 020b 	movw	r2, #8203	; 0x200b
 801646e:	4294      	cmp	r4, r2
 8016470:	bf18      	it	ne
 8016472:	4623      	movne	r3, r4
 8016474:	930d      	str	r3, [sp, #52]	; 0x34
 8016476:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016478:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801647a:	f8d8 2000 	ldr.w	r2, [r8]
 801647e:	428b      	cmp	r3, r1
 8016480:	db41      	blt.n	8016506 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8016482:	6813      	ldr	r3, [r2, #0]
 8016484:	4610      	mov	r0, r2
 8016486:	695b      	ldr	r3, [r3, #20]
 8016488:	4798      	blx	r3
 801648a:	4604      	mov	r4, r0
 801648c:	f8d8 0000 	ldr.w	r0, [r8]
 8016490:	aa1d      	add	r2, sp, #116	; 0x74
 8016492:	4621      	mov	r1, r4
 8016494:	6803      	ldr	r3, [r0, #0]
 8016496:	689d      	ldr	r5, [r3, #8]
 8016498:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801649c:	47a8      	blx	r5
 801649e:	901c      	str	r0, [sp, #112]	; 0x70
 80164a0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80164a4:	429c      	cmp	r4, r3
 80164a6:	f000 80ec 	beq.w	8016682 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80164aa:	f242 030b 	movw	r3, #8203	; 0x200b
 80164ae:	429c      	cmp	r4, r3
 80164b0:	f000 80e7 	beq.w	8016682 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80164b4:	2c00      	cmp	r4, #0
 80164b6:	f000 80f9 	beq.w	80166ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 80164ba:	2c0a      	cmp	r4, #10
 80164bc:	d060      	beq.n	8016580 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 80164be:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80164c0:	b36a      	cbz	r2, 801651e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 80164c2:	8894      	ldrh	r4, [r2, #4]
 80164c4:	f1bb 0f00 	cmp.w	fp, #0
 80164c8:	d03b      	beq.n	8016542 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 80164ca:	f892 900d 	ldrb.w	r9, [r2, #13]
 80164ce:	f1bb 0f01 	cmp.w	fp, #1
 80164d2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80164d6:	f409 7380 	and.w	r3, r9, #256	; 0x100
 80164da:	f892 900a 	ldrb.w	r9, [r2, #10]
 80164de:	ea49 0903 	orr.w	r9, r9, r3
 80164e2:	d134      	bne.n	801654e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 80164e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80164e6:	eba6 0609 	sub.w	r6, r6, r9
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d14f      	bne.n	801658e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 80164ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80164f0:	eb09 0306 	add.w	r3, r9, r6
 80164f4:	4413      	add	r3, r2
 80164f6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80164f8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80164fc:	4293      	cmp	r3, r2
 80164fe:	da51      	bge.n	80165a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8016500:	e038      	b.n	8016574 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8016502:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016504:	e79a      	b.n	801643c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 8016506:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801650a:	4659      	mov	r1, fp
 801650c:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801650e:	9301      	str	r3, [sp, #4]
 8016510:	ab1d      	add	r3, sp, #116	; 0x74
 8016512:	9300      	str	r3, [sp, #0]
 8016514:	ab1c      	add	r3, sp, #112	; 0x70
 8016516:	f002 ff20 	bl	801935a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801651a:	4604      	mov	r4, r0
 801651c:	e7c0      	b.n	80164a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 801651e:	f8d8 0000 	ldr.w	r0, [r8]
 8016522:	6803      	ldr	r3, [r0, #0]
 8016524:	691b      	ldr	r3, [r3, #16]
 8016526:	4798      	blx	r3
 8016528:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801652c:	4298      	cmp	r0, r3
 801652e:	f000 80a8 	beq.w	8016682 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8016532:	f242 030b 	movw	r3, #8203	; 0x200b
 8016536:	4298      	cmp	r0, r3
 8016538:	f000 80a3 	beq.w	8016682 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801653c:	f1bb 0f00 	cmp.w	fp, #0
 8016540:	d100      	bne.n	8016544 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8016542:	444e      	add	r6, r9
 8016544:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016546:	2a00      	cmp	r2, #0
 8016548:	d1bf      	bne.n	80164ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 801654a:	4691      	mov	r9, r2
 801654c:	e099      	b.n	8016682 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801654e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016550:	2b00      	cmp	r3, #0
 8016552:	f000 80ad 	beq.w	80166b0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
 8016556:	f1bb 0f00 	cmp.w	fp, #0
 801655a:	d118      	bne.n	801658e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801655c:	f8d8 0000 	ldr.w	r0, [r8]
 8016560:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016562:	6803      	ldr	r3, [r0, #0]
 8016564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016566:	4798      	blx	r3
 8016568:	4406      	add	r6, r0
 801656a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801656c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801656e:	1af3      	subs	r3, r6, r3
 8016570:	4293      	cmp	r3, r2
 8016572:	dd17      	ble.n	80165a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8016574:	2c00      	cmp	r4, #0
 8016576:	f000 8099 	beq.w	80166ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801657a:	2c0a      	cmp	r4, #10
 801657c:	f040 8087 	bne.w	801668e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 8016580:	240a      	movs	r4, #10
 8016582:	fab4 f084 	clz	r0, r4
 8016586:	0940      	lsrs	r0, r0, #5
 8016588:	b01f      	add	sp, #124	; 0x7c
 801658a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801658e:	f8d8 0000 	ldr.w	r0, [r8]
 8016592:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016594:	6803      	ldr	r3, [r0, #0]
 8016596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016598:	4798      	blx	r3
 801659a:	f1bb 0f01 	cmp.w	fp, #1
 801659e:	eba6 0600 	sub.w	r6, r6, r0
 80165a2:	d0a4      	beq.n	80164ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 80165a4:	981c      	ldr	r0, [sp, #112]	; 0x70
 80165a6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80165a8:	f990 1009 	ldrsb.w	r1, [r0, #9]
 80165ac:	f9b3 7000 	ldrsh.w	r7, [r3]
 80165b0:	7b43      	ldrb	r3, [r0, #13]
 80165b2:	4431      	add	r1, r6
 80165b4:	015b      	lsls	r3, r3, #5
 80165b6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80165ba:	7983      	ldrb	r3, [r0, #6]
 80165bc:	4313      	orrs	r3, r2
 80165be:	440b      	add	r3, r1
 80165c0:	42bb      	cmp	r3, r7
 80165c2:	db5e      	blt.n	8016682 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80165c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80165c6:	4299      	cmp	r1, r3
 80165c8:	da5b      	bge.n	8016682 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80165ca:	f8d8 0000 	ldr.w	r0, [r8]
 80165ce:	42b7      	cmp	r7, r6
 80165d0:	6803      	ldr	r3, [r0, #0]
 80165d2:	bfcc      	ite	gt
 80165d4:	1bbf      	subgt	r7, r7, r6
 80165d6:	2700      	movle	r7, #0
 80165d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165da:	bfc8      	it	gt
 80165dc:	b2bf      	uxthgt	r7, r7
 80165de:	4798      	blx	r3
 80165e0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80165e2:	7b5a      	ldrb	r2, [r3, #13]
 80165e4:	00d1      	lsls	r1, r2, #3
 80165e6:	f401 7580 	and.w	r5, r1, #256	; 0x100
 80165ea:	7a19      	ldrb	r1, [r3, #8]
 80165ec:	4329      	orrs	r1, r5
 80165ee:	0655      	lsls	r5, r2, #25
 80165f0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80165f2:	bf48      	it	mi
 80165f4:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 80165f8:	4405      	add	r5, r0
 80165fa:	bf48      	it	mi
 80165fc:	b209      	sxthmi	r1, r1
 80165fe:	1a6d      	subs	r5, r5, r1
 8016600:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8016602:	b2ad      	uxth	r5, r5
 8016604:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8016608:	fa0f fa85 	sxth.w	sl, r5
 801660c:	4551      	cmp	r1, sl
 801660e:	dd3c      	ble.n	801668a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 8016610:	0112      	lsls	r2, r2, #4
 8016612:	79d8      	ldrb	r0, [r3, #7]
 8016614:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8016618:	4302      	orrs	r2, r0
 801661a:	4492      	add	sl, r2
 801661c:	4551      	cmp	r1, sl
 801661e:	dc30      	bgt.n	8016682 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8016620:	1b4d      	subs	r5, r1, r5
 8016622:	468a      	mov	sl, r1
 8016624:	b22d      	sxth	r5, r5
 8016626:	9319      	str	r3, [sp, #100]	; 0x64
 8016628:	b2ad      	uxth	r5, r5
 801662a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801662c:	f8d8 0000 	ldr.w	r0, [r8]
 8016630:	681a      	ldr	r2, [r3, #0]
 8016632:	6801      	ldr	r1, [r0, #0]
 8016634:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8016636:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016638:	9313      	str	r3, [sp, #76]	; 0x4c
 801663a:	9218      	str	r2, [sp, #96]	; 0x60
 801663c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801663e:	4788      	blx	r1
 8016640:	f898 1006 	ldrb.w	r1, [r8, #6]
 8016644:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016646:	910b      	str	r1, [sp, #44]	; 0x2c
 8016648:	f898 100e 	ldrb.w	r1, [r8, #14]
 801664c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801664e:	910a      	str	r1, [sp, #40]	; 0x28
 8016650:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8016654:	9109      	str	r1, [sp, #36]	; 0x24
 8016656:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801665a:	9305      	str	r3, [sp, #20]
 801665c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801665e:	9206      	str	r2, [sp, #24]
 8016660:	9304      	str	r3, [sp, #16]
 8016662:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016664:	f8cd a004 	str.w	sl, [sp, #4]
 8016668:	e9cd 7502 	strd	r7, r5, [sp, #8]
 801666c:	4437      	add	r7, r6
 801666e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8016670:	b23f      	sxth	r7, r7
 8016672:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8016676:	9700      	str	r7, [sp, #0]
 8016678:	9916      	ldr	r1, [sp, #88]	; 0x58
 801667a:	681a      	ldr	r2, [r3, #0]
 801667c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801667e:	685b      	ldr	r3, [r3, #4]
 8016680:	47a8      	blx	r5
 8016682:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016684:	3301      	adds	r3, #1
 8016686:	930e      	str	r3, [sp, #56]	; 0x38
 8016688:	e6e0      	b.n	801644c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 801668a:	2500      	movs	r5, #0
 801668c:	e7cb      	b.n	8016626 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 801668e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8016690:	3501      	adds	r5, #1
 8016692:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016694:	429d      	cmp	r5, r3
 8016696:	f6bf af74 	bge.w	8016582 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801669a:	4659      	mov	r1, fp
 801669c:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801669e:	f7ef ffe9 	bl	8006674 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80166a2:	4604      	mov	r4, r0
 80166a4:	b110      	cbz	r0, 80166ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 80166a6:	280a      	cmp	r0, #10
 80166a8:	d1f2      	bne.n	8016690 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
 80166aa:	e769      	b.n	8016580 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 80166ac:	2400      	movs	r4, #0
 80166ae:	e768      	b.n	8016582 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 80166b0:	f1bb 0f00 	cmp.w	fp, #0
 80166b4:	f43f af59 	beq.w	801656a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 80166b8:	e774      	b.n	80165a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

080166ba <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 80166ba:	b530      	push	{r4, r5, lr}
 80166bc:	8ac4      	ldrh	r4, [r0, #22]
 80166be:	8b45      	ldrh	r5, [r0, #26]
 80166c0:	8343      	strh	r3, [r0, #26]
 80166c2:	442c      	add	r4, r5
 80166c4:	1ae4      	subs	r4, r4, r3
 80166c6:	8b83      	ldrh	r3, [r0, #28]
 80166c8:	82c4      	strh	r4, [r0, #22]
 80166ca:	8b04      	ldrh	r4, [r0, #24]
 80166cc:	4422      	add	r2, r4
 80166ce:	440c      	add	r4, r1
 80166d0:	1a59      	subs	r1, r3, r1
 80166d2:	83c2      	strh	r2, [r0, #30]
 80166d4:	8304      	strh	r4, [r0, #24]
 80166d6:	8381      	strh	r1, [r0, #28]
 80166d8:	bd30      	pop	{r4, r5, pc}

080166da <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 80166da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166de:	4604      	mov	r4, r0
 80166e0:	8a47      	ldrh	r7, [r0, #18]
 80166e2:	68c0      	ldr	r0, [r0, #12]
 80166e4:	b085      	sub	sp, #20
 80166e6:	6803      	ldr	r3, [r0, #0]
 80166e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80166ea:	4798      	blx	r3
 80166ec:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 80166f0:	7a63      	ldrb	r3, [r4, #9]
 80166f2:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 80166f6:	3b01      	subs	r3, #1
 80166f8:	42b7      	cmp	r7, r6
 80166fa:	bfac      	ite	ge
 80166fc:	f04f 0900 	movge.w	r9, #0
 8016700:	f04f 0901 	movlt.w	r9, #1
 8016704:	2b05      	cmp	r3, #5
 8016706:	d804      	bhi.n	8016712 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 8016708:	e8df f003 	tbb	[pc, r3]
 801670c:	470f0854 	.word	0x470f0854
 8016710:	4c4c      	.short	0x4c4c
 8016712:	2500      	movs	r5, #0
 8016714:	46a9      	mov	r9, r5
 8016716:	462e      	mov	r6, r5
 8016718:	462f      	mov	r7, r5
 801671a:	e00e      	b.n	801673a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801671c:	42b7      	cmp	r7, r6
 801671e:	f04f 0500 	mov.w	r5, #0
 8016722:	bfb4      	ite	lt
 8016724:	2600      	movlt	r6, #0
 8016726:	2601      	movge	r6, #1
 8016728:	e7f6      	b.n	8016718 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801672a:	42b7      	cmp	r7, r6
 801672c:	464d      	mov	r5, r9
 801672e:	f04f 0900 	mov.w	r9, #0
 8016732:	bfb4      	ite	lt
 8016734:	2600      	movlt	r6, #0
 8016736:	2601      	movge	r6, #1
 8016738:	464f      	mov	r7, r9
 801673a:	f04f 0800 	mov.w	r8, #0
 801673e:	f8a4 8016 	strh.w	r8, [r4, #22]
 8016742:	f8a4 8018 	strh.w	r8, [r4, #24]
 8016746:	f8cd 8004 	str.w	r8, [sp, #4]
 801674a:	2300      	movs	r3, #0
 801674c:	9303      	str	r3, [sp, #12]
 801674e:	8823      	ldrh	r3, [r4, #0]
 8016750:	2b20      	cmp	r3, #32
 8016752:	d033      	beq.n	80167bc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 8016754:	f242 010b 	movw	r1, #8203	; 0x200b
 8016758:	1a5a      	subs	r2, r3, r1
 801675a:	f1d2 0a00 	rsbs	sl, r2, #0
 801675e:	eb4a 0a02 	adc.w	sl, sl, r2
 8016762:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8016766:	4293      	cmp	r3, r2
 8016768:	d008      	beq.n	801677c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801676a:	428b      	cmp	r3, r1
 801676c:	9a01      	ldr	r2, [sp, #4]
 801676e:	bf0e      	itee	eq
 8016770:	f04f 0a01 	moveq.w	sl, #1
 8016774:	461a      	movne	r2, r3
 8016776:	f04f 0a00 	movne.w	sl, #0
 801677a:	9201      	str	r2, [sp, #4]
 801677c:	ab03      	add	r3, sp, #12
 801677e:	68e2      	ldr	r2, [r4, #12]
 8016780:	7a21      	ldrb	r1, [r4, #8]
 8016782:	6860      	ldr	r0, [r4, #4]
 8016784:	f002 fda0 	bl	80192c8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016788:	8020      	strh	r0, [r4, #0]
 801678a:	b9d8      	cbnz	r0, 80167c4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 801678c:	8ba2      	ldrh	r2, [r4, #28]
 801678e:	2300      	movs	r3, #0
 8016790:	4611      	mov	r1, r2
 8016792:	4620      	mov	r0, r4
 8016794:	f7ff ff91 	bl	80166ba <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8016798:	e06e      	b.n	8016878 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801679a:	2500      	movs	r5, #0
 801679c:	2701      	movs	r7, #1
 801679e:	46a9      	mov	r9, r5
 80167a0:	462e      	mov	r6, r5
 80167a2:	e7ca      	b.n	801673a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80167a4:	42b7      	cmp	r7, r6
 80167a6:	f04f 0500 	mov.w	r5, #0
 80167aa:	bfb4      	ite	lt
 80167ac:	2700      	movlt	r7, #0
 80167ae:	2701      	movge	r7, #1
 80167b0:	462e      	mov	r6, r5
 80167b2:	e7c2      	b.n	801673a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80167b4:	2500      	movs	r5, #0
 80167b6:	2601      	movs	r6, #1
 80167b8:	46a9      	mov	r9, r5
 80167ba:	e7ad      	b.n	8016718 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 80167bc:	9301      	str	r3, [sp, #4]
 80167be:	f04f 0a01 	mov.w	sl, #1
 80167c2:	e7db      	b.n	801677c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 80167c4:	8b63      	ldrh	r3, [r4, #26]
 80167c6:	280a      	cmp	r0, #10
 80167c8:	f103 0301 	add.w	r3, r3, #1
 80167cc:	8363      	strh	r3, [r4, #26]
 80167ce:	d0dd      	beq.n	801678c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 80167d0:	9a03      	ldr	r2, [sp, #12]
 80167d2:	bb62      	cbnz	r2, 801682e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 80167d4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80167d8:	4298      	cmp	r0, r3
 80167da:	d003      	beq.n	80167e4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 80167dc:	f242 030b 	movw	r3, #8203	; 0x200b
 80167e0:	4298      	cmp	r0, r3
 80167e2:	d1b2      	bne.n	801674a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80167e4:	8823      	ldrh	r3, [r4, #0]
 80167e6:	8ba1      	ldrh	r1, [r4, #28]
 80167e8:	2b20      	cmp	r3, #32
 80167ea:	d003      	beq.n	80167f4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 80167ec:	f242 000b 	movw	r0, #8203	; 0x200b
 80167f0:	4283      	cmp	r3, r0
 80167f2:	d131      	bne.n	8016858 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 80167f4:	f1ba 0f00 	cmp.w	sl, #0
 80167f8:	bf0a      	itet	eq
 80167fa:	4688      	moveq	r8, r1
 80167fc:	4650      	movne	r0, sl
 80167fe:	2001      	moveq	r0, #1
 8016800:	440a      	add	r2, r1
 8016802:	8b23      	ldrh	r3, [r4, #24]
 8016804:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8016808:	b292      	uxth	r2, r2
 801680a:	83a2      	strh	r2, [r4, #28]
 801680c:	4413      	add	r3, r2
 801680e:	f1b9 0f00 	cmp.w	r9, #0
 8016812:	d102      	bne.n	801681a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 8016814:	2d00      	cmp	r5, #0
 8016816:	d042      	beq.n	801689e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 8016818:	b300      	cbz	r0, 801685c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 801681a:	8c21      	ldrh	r1, [r4, #32]
 801681c:	4419      	add	r1, r3
 801681e:	458c      	cmp	ip, r1
 8016820:	da37      	bge.n	8016892 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8016822:	8ae1      	ldrh	r1, [r4, #22]
 8016824:	2900      	cmp	r1, #0
 8016826:	d034      	beq.n	8016892 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8016828:	4563      	cmp	r3, ip
 801682a:	dd8e      	ble.n	801674a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801682c:	e01d      	b.n	801686a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 801682e:	8893      	ldrh	r3, [r2, #4]
 8016830:	9901      	ldr	r1, [sp, #4]
 8016832:	8023      	strh	r3, [r4, #0]
 8016834:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8016838:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 801683c:	f40b 7080 	and.w	r0, fp, #256	; 0x100
 8016840:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8016844:	ea4b 0b00 	orr.w	fp, fp, r0
 8016848:	68e0      	ldr	r0, [r4, #12]
 801684a:	6803      	ldr	r3, [r0, #0]
 801684c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801684e:	4798      	blx	r3
 8016850:	eb0b 0200 	add.w	r2, fp, r0
 8016854:	b292      	uxth	r2, r2
 8016856:	e7c5      	b.n	80167e4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8016858:	2000      	movs	r0, #0
 801685a:	e7d1      	b.n	8016800 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 801685c:	4563      	cmp	r3, ip
 801685e:	f77f af74 	ble.w	801674a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8016862:	8ae3      	ldrh	r3, [r4, #22]
 8016864:	2b00      	cmp	r3, #0
 8016866:	f43f af70 	beq.w	801674a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801686a:	2301      	movs	r3, #1
 801686c:	8c22      	ldrh	r2, [r4, #32]
 801686e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8016872:	8be3      	ldrh	r3, [r4, #30]
 8016874:	4413      	add	r3, r2
 8016876:	83e3      	strh	r3, [r4, #30]
 8016878:	68e0      	ldr	r0, [r4, #12]
 801687a:	6803      	ldr	r3, [r0, #0]
 801687c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801687e:	4798      	blx	r3
 8016880:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8016884:	4418      	add	r0, r3
 8016886:	8a63      	ldrh	r3, [r4, #18]
 8016888:	1a18      	subs	r0, r3, r0
 801688a:	8260      	strh	r0, [r4, #18]
 801688c:	b005      	add	sp, #20
 801688e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016892:	2300      	movs	r3, #0
 8016894:	4611      	mov	r1, r2
 8016896:	4620      	mov	r0, r4
 8016898:	f7ff ff0f 	bl	80166ba <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801689c:	e755      	b.n	801674a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801689e:	4563      	cmp	r3, ip
 80168a0:	dd14      	ble.n	80168cc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 80168a2:	b117      	cbz	r7, 80168aa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 80168a4:	2301      	movs	r3, #1
 80168a6:	460a      	mov	r2, r1
 80168a8:	e772      	b.n	8016790 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 80168aa:	2e00      	cmp	r6, #0
 80168ac:	f43f af4d 	beq.w	801674a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80168b0:	2800      	cmp	r0, #0
 80168b2:	f47f af4a 	bne.w	801674a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80168b6:	f1ba 0f00 	cmp.w	sl, #0
 80168ba:	d002      	beq.n	80168c2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 80168bc:	2301      	movs	r3, #1
 80168be:	4642      	mov	r2, r8
 80168c0:	e767      	b.n	8016792 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 80168c2:	8ae3      	ldrh	r3, [r4, #22]
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	f43f af40 	beq.w	801674a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80168ca:	e7d5      	b.n	8016878 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 80168cc:	2800      	cmp	r0, #0
 80168ce:	f47f af3c 	bne.w	801674a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80168d2:	f1ba 0f00 	cmp.w	sl, #0
 80168d6:	f43f af38 	beq.w	801674a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80168da:	2301      	movs	r3, #1
 80168dc:	4642      	mov	r2, r8
 80168de:	e7da      	b.n	8016896 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

080168e0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 80168e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80168e2:	4605      	mov	r5, r0
 80168e4:	b08f      	sub	sp, #60	; 0x3c
 80168e6:	4617      	mov	r7, r2
 80168e8:	461c      	mov	r4, r3
 80168ea:	460e      	mov	r6, r1
 80168ec:	b1d1      	cbz	r1, 8016924 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 80168ee:	681b      	ldr	r3, [r3, #0]
 80168f0:	4620      	mov	r0, r4
 80168f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80168f4:	4798      	blx	r3
 80168f6:	4240      	negs	r0, r0
 80168f8:	9603      	str	r6, [sp, #12]
 80168fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80168fe:	b200      	sxth	r0, r0
 8016900:	9700      	str	r7, [sp, #0]
 8016902:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8016906:	4629      	mov	r1, r5
 8016908:	e9cd 4001 	strd	r4, r0, [sp, #4]
 801690c:	2401      	movs	r4, #1
 801690e:	a805      	add	r0, sp, #20
 8016910:	f7ff fcbe 	bl	8016290 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8016914:	a805      	add	r0, sp, #20
 8016916:	f7ff fee0 	bl	80166da <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801691a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801691e:	b163      	cbz	r3, 801693a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 8016920:	3401      	adds	r4, #1
 8016922:	e7f7      	b.n	8016914 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8016924:	2401      	movs	r4, #1
 8016926:	f002 fd9b 	bl	8019460 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801692a:	280a      	cmp	r0, #10
 801692c:	4628      	mov	r0, r5
 801692e:	bf08      	it	eq
 8016930:	3401      	addeq	r4, #1
 8016932:	f002 fd95 	bl	8019460 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016936:	2800      	cmp	r0, #0
 8016938:	d1f7      	bne.n	801692a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801693a:	b2a0      	uxth	r0, r4
 801693c:	b00f      	add	sp, #60	; 0x3c
 801693e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016940 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8016940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016944:	b0e3      	sub	sp, #396	; 0x18c
 8016946:	461c      	mov	r4, r3
 8016948:	4683      	mov	fp, r0
 801694a:	4688      	mov	r8, r1
 801694c:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 801694e:	2b00      	cmp	r3, #0
 8016950:	f000 810f 	beq.w	8016b72 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8016954:	6823      	ldr	r3, [r4, #0]
 8016956:	2b00      	cmp	r3, #0
 8016958:	f000 810b 	beq.w	8016b72 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801695c:	7ba3      	ldrb	r3, [r4, #14]
 801695e:	2b00      	cmp	r3, #0
 8016960:	f000 8107 	beq.w	8016b72 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8016964:	ad0a      	add	r5, sp, #40	; 0x28
 8016966:	6810      	ldr	r0, [r2, #0]
 8016968:	6851      	ldr	r1, [r2, #4]
 801696a:	462b      	mov	r3, r5
 801696c:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8016970:	c303      	stmia	r3!, {r0, r1}
 8016972:	2100      	movs	r1, #0
 8016974:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8016978:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801697c:	4628      	mov	r0, r5
 801697e:	910c      	str	r1, [sp, #48]	; 0x30
 8016980:	a90c      	add	r1, sp, #48	; 0x30
 8016982:	79a2      	ldrb	r2, [r4, #6]
 8016984:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8016988:	f7ff fd01 	bl	801638e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801698c:	a90c      	add	r1, sp, #48	; 0x30
 801698e:	79a2      	ldrb	r2, [r4, #6]
 8016990:	4608      	mov	r0, r1
 8016992:	f7ff fcfc 	bl	801638e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8016996:	a817      	add	r0, sp, #92	; 0x5c
 8016998:	f002 f936 	bl	8018c08 <_ZN8touchgfx12TextProviderC1Ev>
 801699c:	6820      	ldr	r0, [r4, #0]
 801699e:	6803      	ldr	r3, [r0, #0]
 80169a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80169a2:	4798      	blx	r3
 80169a4:	4606      	mov	r6, r0
 80169a6:	6820      	ldr	r0, [r4, #0]
 80169a8:	6803      	ldr	r3, [r0, #0]
 80169aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80169ac:	4798      	blx	r3
 80169ae:	4633      	mov	r3, r6
 80169b0:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 80169b2:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 80169b4:	9000      	str	r0, [sp, #0]
 80169b6:	a817      	add	r0, sp, #92	; 0x5c
 80169b8:	f002 f981 	bl	8018cbe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80169bc:	6820      	ldr	r0, [r4, #0]
 80169be:	f894 a004 	ldrb.w	sl, [r4, #4]
 80169c2:	6803      	ldr	r3, [r0, #0]
 80169c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80169c6:	4798      	blx	r3
 80169c8:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80169cc:	6823      	ldr	r3, [r4, #0]
 80169ce:	4607      	mov	r7, r0
 80169d0:	4406      	add	r6, r0
 80169d2:	a830      	add	r0, sp, #192	; 0xc0
 80169d4:	f893 9009 	ldrb.w	r9, [r3, #9]
 80169d8:	f002 f916 	bl	8018c08 <_ZN8touchgfx12TextProviderC1Ev>
 80169dc:	7c23      	ldrb	r3, [r4, #16]
 80169de:	b17b      	cbz	r3, 8016a00 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 80169e0:	6820      	ldr	r0, [r4, #0]
 80169e2:	6803      	ldr	r3, [r0, #0]
 80169e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80169e6:	4798      	blx	r3
 80169e8:	9009      	str	r0, [sp, #36]	; 0x24
 80169ea:	6820      	ldr	r0, [r4, #0]
 80169ec:	6802      	ldr	r2, [r0, #0]
 80169ee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80169f0:	4790      	blx	r2
 80169f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169f4:	9000      	str	r0, [sp, #0]
 80169f6:	a830      	add	r0, sp, #192	; 0xc0
 80169f8:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 80169fa:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 80169fc:	f002 f95f 	bl	8018cbe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016a00:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8016a04:	a80e      	add	r0, sp, #56	; 0x38
 8016a06:	7be2      	ldrb	r2, [r4, #15]
 8016a08:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8016a0c:	1a8a      	subs	r2, r1, r2
 8016a0e:	7c21      	ldrb	r1, [r4, #16]
 8016a10:	9103      	str	r1, [sp, #12]
 8016a12:	b292      	uxth	r2, r2
 8016a14:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8016a18:	9102      	str	r1, [sp, #8]
 8016a1a:	6821      	ldr	r1, [r4, #0]
 8016a1c:	9101      	str	r1, [sp, #4]
 8016a1e:	7961      	ldrb	r1, [r4, #5]
 8016a20:	9100      	str	r1, [sp, #0]
 8016a22:	a930      	add	r1, sp, #192	; 0xc0
 8016a24:	f7ff fc34 	bl	8016290 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8016a28:	2e00      	cmp	r6, #0
 8016a2a:	dc5b      	bgt.n	8016ae4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8016a2c:	af17      	add	r7, sp, #92	; 0x5c
 8016a2e:	f04f 0900 	mov.w	r9, #0
 8016a32:	7c23      	ldrb	r3, [r4, #16]
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	f000 80ae 	beq.w	8016b96 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8016a3a:	a80e      	add	r0, sp, #56	; 0x38
 8016a3c:	f7ff fe4d 	bl	80166da <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8016a40:	f1ba 0f00 	cmp.w	sl, #0
 8016a44:	f000 80a2 	beq.w	8016b8c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 8016a48:	7c23      	ldrb	r3, [r4, #16]
 8016a4a:	2264      	movs	r2, #100	; 0x64
 8016a4c:	4639      	mov	r1, r7
 8016a4e:	a849      	add	r0, sp, #292	; 0x124
 8016a50:	9309      	str	r3, [sp, #36]	; 0x24
 8016a52:	f00c faa3 	bl	8022f9c <memcpy>
 8016a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	f000 80a4 	beq.w	8016ba6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 8016a5e:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8016a62:	7922      	ldrb	r2, [r4, #4]
 8016a64:	2a01      	cmp	r2, #1
 8016a66:	f040 8087 	bne.w	8016b78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016a6a:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 8016a6e:	1ac0      	subs	r0, r0, r3
 8016a70:	2302      	movs	r3, #2
 8016a72:	fb90 f0f3 	sdiv	r0, r0, r3
 8016a76:	b200      	sxth	r0, r0
 8016a78:	7c23      	ldrb	r3, [r4, #16]
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	f000 8088 	beq.w	8016b90 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
 8016a80:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 8016a84:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
 8016a88:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8016a8c:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8016a90:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8016a94:	2100      	movs	r1, #0
 8016a96:	4410      	add	r0, r2
 8016a98:	4642      	mov	r2, r8
 8016a9a:	b200      	sxth	r0, r0
 8016a9c:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8016aa0:	9000      	str	r0, [sp, #0]
 8016aa2:	4658      	mov	r0, fp
 8016aa4:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8016aa8:	f7ff fca2 	bl	80163f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8016aac:	2800      	cmp	r0, #0
 8016aae:	d160      	bne.n	8016b72 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8016ab0:	b2b2      	uxth	r2, r6
 8016ab2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8016ab6:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8016aba:	4413      	add	r3, r2
 8016abc:	1a8a      	subs	r2, r1, r2
 8016abe:	b21b      	sxth	r3, r3
 8016ac0:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 8016ac4:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 8016ac8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8016acc:	2a00      	cmp	r2, #0
 8016ace:	d150      	bne.n	8016b72 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8016ad0:	6822      	ldr	r2, [r4, #0]
 8016ad2:	8869      	ldrh	r1, [r5, #2]
 8016ad4:	7a12      	ldrb	r2, [r2, #8]
 8016ad6:	1a9b      	subs	r3, r3, r2
 8016ad8:	88ea      	ldrh	r2, [r5, #6]
 8016ada:	440a      	add	r2, r1
 8016adc:	b212      	sxth	r2, r2
 8016ade:	4293      	cmp	r3, r2
 8016ae0:	dda7      	ble.n	8016a32 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 8016ae2:	e046      	b.n	8016b72 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8016ae4:	7c23      	ldrb	r3, [r4, #16]
 8016ae6:	444f      	add	r7, r9
 8016ae8:	b1c3      	cbz	r3, 8016b1c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 8016aea:	f64f 79ff 	movw	r9, #65535	; 0xffff
 8016aee:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8016af2:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8016af6:	443b      	add	r3, r7
 8016af8:	4293      	cmp	r3, r2
 8016afa:	da97      	bge.n	8016a2c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8016afc:	a80e      	add	r0, sp, #56	; 0x38
 8016afe:	f7ff fdec 	bl	80166da <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8016b02:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8016b06:	3b01      	subs	r3, #1
 8016b08:	b29b      	uxth	r3, r3
 8016b0a:	454b      	cmp	r3, r9
 8016b0c:	9309      	str	r3, [sp, #36]	; 0x24
 8016b0e:	d021      	beq.n	8016b54 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 8016b10:	7961      	ldrb	r1, [r4, #5]
 8016b12:	a817      	add	r0, sp, #92	; 0x5c
 8016b14:	f7ef fdae 	bl	8006674 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b1a:	e7f4      	b.n	8016b06 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8016b1c:	fa1f f986 	uxth.w	r9, r6
 8016b20:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8016b24:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8016b28:	443b      	add	r3, r7
 8016b2a:	4293      	cmp	r3, r2
 8016b2c:	f6bf af7e 	bge.w	8016a2c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8016b30:	a817      	add	r0, sp, #92	; 0x5c
 8016b32:	f002 fc95 	bl	8019460 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016b36:	b1e0      	cbz	r0, 8016b72 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8016b38:	280a      	cmp	r0, #10
 8016b3a:	d1f1      	bne.n	8016b20 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8016b3c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8016b40:	444b      	add	r3, r9
 8016b42:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8016b46:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8016b4a:	eba3 0309 	sub.w	r3, r3, r9
 8016b4e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8016b52:	e7e5      	b.n	8016b20 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8016b54:	b2b3      	uxth	r3, r6
 8016b56:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8016b5a:	441a      	add	r2, r3
 8016b5c:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8016b60:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 8016b64:	1ad3      	subs	r3, r2, r3
 8016b66:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8016b6a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d1bd      	bne.n	8016aee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8016b72:	b063      	add	sp, #396	; 0x18c
 8016b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b78:	2a02      	cmp	r2, #2
 8016b7a:	d105      	bne.n	8016b88 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 8016b7c:	7be2      	ldrb	r2, [r4, #15]
 8016b7e:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8016b82:	1a80      	subs	r0, r0, r2
 8016b84:	1ac0      	subs	r0, r0, r3
 8016b86:	e776      	b.n	8016a76 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8016b88:	2000      	movs	r0, #0
 8016b8a:	e775      	b.n	8016a78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8016b8c:	7be0      	ldrb	r0, [r4, #15]
 8016b8e:	e773      	b.n	8016a78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8016b90:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016b94:	e776      	b.n	8016a84 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8016b96:	f1ba 0f00 	cmp.w	sl, #0
 8016b9a:	d0f7      	beq.n	8016b8c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 8016b9c:	2264      	movs	r2, #100	; 0x64
 8016b9e:	4639      	mov	r1, r7
 8016ba0:	a849      	add	r0, sp, #292	; 0x124
 8016ba2:	f00c f9fb 	bl	8022f9c <memcpy>
 8016ba6:	2300      	movs	r3, #0
 8016ba8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016bac:	6821      	ldr	r1, [r4, #0]
 8016bae:	a849      	add	r0, sp, #292	; 0x124
 8016bb0:	f7ff fbb1 	bl	8016316 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8016bb4:	b203      	sxth	r3, r0
 8016bb6:	e754      	b.n	8016a62 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

08016bb8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8016bb8:	2b03      	cmp	r3, #3
 8016bba:	d818      	bhi.n	8016bee <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8016bbc:	e8df f003 	tbb	[pc, r3]
 8016bc0:	130d0602 	.word	0x130d0602
 8016bc4:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016bc8:	1850      	adds	r0, r2, r1
 8016bca:	4770      	bx	lr
 8016bcc:	8803      	ldrh	r3, [r0, #0]
 8016bce:	8880      	ldrh	r0, [r0, #4]
 8016bd0:	4418      	add	r0, r3
 8016bd2:	b200      	sxth	r0, r0
 8016bd4:	1a80      	subs	r0, r0, r2
 8016bd6:	3801      	subs	r0, #1
 8016bd8:	4770      	bx	lr
 8016bda:	8803      	ldrh	r3, [r0, #0]
 8016bdc:	8880      	ldrh	r0, [r0, #4]
 8016bde:	4418      	add	r0, r3
 8016be0:	b200      	sxth	r0, r0
 8016be2:	1a40      	subs	r0, r0, r1
 8016be4:	e7f7      	b.n	8016bd6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8016be6:	f9b0 0000 	ldrsh.w	r0, [r0]
 8016bea:	4410      	add	r0, r2
 8016bec:	4770      	bx	lr
 8016bee:	2000      	movs	r0, #0
 8016bf0:	4770      	bx	lr

08016bf2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8016bf2:	2b03      	cmp	r3, #3
 8016bf4:	d817      	bhi.n	8016c26 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8016bf6:	e8df f003 	tbb	[pc, r3]
 8016bfa:	0602      	.short	0x0602
 8016bfc:	1009      	.short	0x1009
 8016bfe:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8016c02:	1850      	adds	r0, r2, r1
 8016c04:	4770      	bx	lr
 8016c06:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8016c0a:	e7fa      	b.n	8016c02 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8016c0c:	8843      	ldrh	r3, [r0, #2]
 8016c0e:	88c0      	ldrh	r0, [r0, #6]
 8016c10:	4418      	add	r0, r3
 8016c12:	b200      	sxth	r0, r0
 8016c14:	1a80      	subs	r0, r0, r2
 8016c16:	3801      	subs	r0, #1
 8016c18:	4770      	bx	lr
 8016c1a:	8843      	ldrh	r3, [r0, #2]
 8016c1c:	88c0      	ldrh	r0, [r0, #6]
 8016c1e:	4418      	add	r0, r3
 8016c20:	b200      	sxth	r0, r0
 8016c22:	1a40      	subs	r0, r0, r1
 8016c24:	e7f7      	b.n	8016c16 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8016c26:	2000      	movs	r0, #0
 8016c28:	4770      	bx	lr
	...

08016c2c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8016c2c:	4b01      	ldr	r3, [pc, #4]	; (8016c34 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8016c2e:	2200      	movs	r2, #0
 8016c30:	601a      	str	r2, [r3, #0]
 8016c32:	4770      	bx	lr
 8016c34:	2400eae0 	.word	0x2400eae0

08016c38 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8016c38:	4603      	mov	r3, r0
 8016c3a:	b1c8      	cbz	r0, 8016c70 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8016c3c:	0c02      	lsrs	r2, r0, #16
 8016c3e:	0412      	lsls	r2, r2, #16
 8016c40:	b9a2      	cbnz	r2, 8016c6c <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8016c42:	0403      	lsls	r3, r0, #16
 8016c44:	2010      	movs	r0, #16
 8016c46:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8016c4a:	bf04      	itt	eq
 8016c4c:	021b      	lsleq	r3, r3, #8
 8016c4e:	3008      	addeq	r0, #8
 8016c50:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8016c54:	bf04      	itt	eq
 8016c56:	011b      	lsleq	r3, r3, #4
 8016c58:	3004      	addeq	r0, #4
 8016c5a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8016c5e:	bf04      	itt	eq
 8016c60:	009b      	lsleq	r3, r3, #2
 8016c62:	3002      	addeq	r0, #2
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	db04      	blt.n	8016c72 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8016c68:	3001      	adds	r0, #1
 8016c6a:	4770      	bx	lr
 8016c6c:	2000      	movs	r0, #0
 8016c6e:	e7ea      	b.n	8016c46 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8016c70:	2020      	movs	r0, #32
 8016c72:	4770      	bx	lr

08016c74 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8016c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c78:	b087      	sub	sp, #28
 8016c7a:	4681      	mov	r9, r0
 8016c7c:	4698      	mov	r8, r3
 8016c7e:	4610      	mov	r0, r2
 8016c80:	460d      	mov	r5, r1
 8016c82:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8016c86:	b981      	cbnz	r1, 8016caa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8016c88:	b14b      	cbz	r3, 8016c9e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8016c8a:	460b      	mov	r3, r1
 8016c8c:	464a      	mov	r2, r9
 8016c8e:	4641      	mov	r1, r8
 8016c90:	e9cd 4700 	strd	r4, r7, [sp]
 8016c94:	f7ff ffee 	bl	8016c74 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016c98:	b007      	add	sp, #28
 8016c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8016ca2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8016ca6:	603b      	str	r3, [r7, #0]
 8016ca8:	e7f6      	b.n	8016c98 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8016caa:	fa32 fa01 	lsrs.w	sl, r2, r1
 8016cae:	d107      	bne.n	8016cc0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8016cb0:	fb09 f602 	mul.w	r6, r9, r2
 8016cb4:	fbb6 f0f4 	udiv	r0, r6, r4
 8016cb8:	fb04 6610 	mls	r6, r4, r0, r6
 8016cbc:	603e      	str	r6, [r7, #0]
 8016cbe:	e7eb      	b.n	8016c98 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8016cc0:	2601      	movs	r6, #1
 8016cc2:	fa09 fb01 	lsl.w	fp, r9, r1
 8016cc6:	408e      	lsls	r6, r1
 8016cc8:	fbbb f3f4 	udiv	r3, fp, r4
 8016ccc:	3e01      	subs	r6, #1
 8016cce:	9302      	str	r3, [sp, #8]
 8016cd0:	fb0a f303 	mul.w	r3, sl, r3
 8016cd4:	4016      	ands	r6, r2
 8016cd6:	9303      	str	r3, [sp, #12]
 8016cd8:	4630      	mov	r0, r6
 8016cda:	f7ff ffad 	bl	8016c38 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016cde:	464a      	mov	r2, r9
 8016ce0:	460b      	mov	r3, r1
 8016ce2:	4601      	mov	r1, r0
 8016ce4:	4630      	mov	r0, r6
 8016ce6:	e9cd 4700 	strd	r4, r7, [sp]
 8016cea:	f7ff ffc3 	bl	8016c74 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016cee:	9b02      	ldr	r3, [sp, #8]
 8016cf0:	4606      	mov	r6, r0
 8016cf2:	eb05 0108 	add.w	r1, r5, r8
 8016cf6:	fb04 bb13 	mls	fp, r4, r3, fp
 8016cfa:	4658      	mov	r0, fp
 8016cfc:	f7ff ff9c 	bl	8016c38 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016d00:	ab05      	add	r3, sp, #20
 8016d02:	465a      	mov	r2, fp
 8016d04:	e9cd 4300 	strd	r4, r3, [sp]
 8016d08:	4603      	mov	r3, r0
 8016d0a:	4650      	mov	r0, sl
 8016d0c:	f7ff ffb2 	bl	8016c74 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016d10:	6839      	ldr	r1, [r7, #0]
 8016d12:	9a05      	ldr	r2, [sp, #20]
 8016d14:	9b03      	ldr	r3, [sp, #12]
 8016d16:	4411      	add	r1, r2
 8016d18:	fbb1 f2f4 	udiv	r2, r1, r4
 8016d1c:	18d3      	adds	r3, r2, r3
 8016d1e:	fb04 1412 	mls	r4, r4, r2, r1
 8016d22:	441e      	add	r6, r3
 8016d24:	603c      	str	r4, [r7, #0]
 8016d26:	4430      	add	r0, r6
 8016d28:	e7b6      	b.n	8016c98 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08016d2a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8016d2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016d2e:	b085      	sub	sp, #20
 8016d30:	f1b0 0900 	subs.w	r9, r0, #0
 8016d34:	461d      	mov	r5, r3
 8016d36:	4617      	mov	r7, r2
 8016d38:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016d3a:	bfbb      	ittet	lt
 8016d3c:	f1c9 0900 	rsblt	r9, r9, #0
 8016d40:	f04f 36ff 	movlt.w	r6, #4294967295
 8016d44:	2601      	movge	r6, #1
 8016d46:	6823      	ldrlt	r3, [r4, #0]
 8016d48:	bfbc      	itt	lt
 8016d4a:	425b      	neglt	r3, r3
 8016d4c:	6023      	strlt	r3, [r4, #0]
 8016d4e:	2a00      	cmp	r2, #0
 8016d50:	da04      	bge.n	8016d5c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8016d52:	6823      	ldr	r3, [r4, #0]
 8016d54:	4257      	negs	r7, r2
 8016d56:	4276      	negs	r6, r6
 8016d58:	425b      	negs	r3, r3
 8016d5a:	6023      	str	r3, [r4, #0]
 8016d5c:	2d00      	cmp	r5, #0
 8016d5e:	4638      	mov	r0, r7
 8016d60:	bfba      	itte	lt
 8016d62:	426d      	neglt	r5, r5
 8016d64:	f04f 38ff 	movlt.w	r8, #4294967295
 8016d68:	f04f 0801 	movge.w	r8, #1
 8016d6c:	f7ff ff64 	bl	8016c38 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016d70:	ab03      	add	r3, sp, #12
 8016d72:	463a      	mov	r2, r7
 8016d74:	e9cd 5300 	strd	r5, r3, [sp]
 8016d78:	4603      	mov	r3, r0
 8016d7a:	4648      	mov	r0, r9
 8016d7c:	f7ff ff7a 	bl	8016c74 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016d80:	6823      	ldr	r3, [r4, #0]
 8016d82:	9a03      	ldr	r2, [sp, #12]
 8016d84:	4546      	cmp	r6, r8
 8016d86:	441a      	add	r2, r3
 8016d88:	fb92 f3f5 	sdiv	r3, r2, r5
 8016d8c:	4418      	add	r0, r3
 8016d8e:	fb05 2313 	mls	r3, r5, r3, r2
 8016d92:	bf18      	it	ne
 8016d94:	4240      	negne	r0, r0
 8016d96:	1c72      	adds	r2, r6, #1
 8016d98:	6023      	str	r3, [r4, #0]
 8016d9a:	d105      	bne.n	8016da8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	f1c3 0200 	rsb	r2, r3, #0
 8016da2:	db0b      	blt.n	8016dbc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8016da4:	6022      	str	r2, [r4, #0]
 8016da6:	e006      	b.n	8016db6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016da8:	2e01      	cmp	r6, #1
 8016daa:	d104      	bne.n	8016db6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	da02      	bge.n	8016db6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016db0:	442b      	add	r3, r5
 8016db2:	3801      	subs	r0, #1
 8016db4:	6023      	str	r3, [r4, #0]
 8016db6:	b005      	add	sp, #20
 8016db8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016dbc:	3801      	subs	r0, #1
 8016dbe:	1b52      	subs	r2, r2, r5
 8016dc0:	e7f0      	b.n	8016da4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08016dc4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8016dc4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8016dc8:	4c1c      	ldr	r4, [pc, #112]	; (8016e3c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8016dca:	4605      	mov	r5, r0
 8016dcc:	6807      	ldr	r7, [r0, #0]
 8016dce:	69a3      	ldr	r3, [r4, #24]
 8016dd0:	b92b      	cbnz	r3, 8016dde <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8016dd2:	6840      	ldr	r0, [r0, #4]
 8016dd4:	e9c5 7000 	strd	r7, r0, [r5]
 8016dd8:	b004      	add	sp, #16
 8016dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016dde:	f04f 0802 	mov.w	r8, #2
 8016de2:	68a2      	ldr	r2, [r4, #8]
 8016de4:	ae04      	add	r6, sp, #16
 8016de6:	6820      	ldr	r0, [r4, #0]
 8016de8:	fb93 f1f8 	sdiv	r1, r3, r8
 8016dec:	440a      	add	r2, r1
 8016dee:	69e1      	ldr	r1, [r4, #28]
 8016df0:	f846 2d04 	str.w	r2, [r6, #-4]!
 8016df4:	463a      	mov	r2, r7
 8016df6:	9600      	str	r6, [sp, #0]
 8016df8:	f7ff ff97 	bl	8016d2a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016dfc:	69a3      	ldr	r3, [r4, #24]
 8016dfe:	4607      	mov	r7, r0
 8016e00:	686a      	ldr	r2, [r5, #4]
 8016e02:	6a21      	ldr	r1, [r4, #32]
 8016e04:	9600      	str	r6, [sp, #0]
 8016e06:	6860      	ldr	r0, [r4, #4]
 8016e08:	f7ff ff8f 	bl	8016d2a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016e0c:	69a3      	ldr	r3, [r4, #24]
 8016e0e:	6962      	ldr	r2, [r4, #20]
 8016e10:	4407      	add	r7, r0
 8016e12:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016e14:	9600      	str	r6, [sp, #0]
 8016e16:	68e0      	ldr	r0, [r4, #12]
 8016e18:	fb93 f8f8 	sdiv	r8, r3, r8
 8016e1c:	4442      	add	r2, r8
 8016e1e:	9203      	str	r2, [sp, #12]
 8016e20:	682a      	ldr	r2, [r5, #0]
 8016e22:	f7ff ff82 	bl	8016d2a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016e26:	4680      	mov	r8, r0
 8016e28:	9600      	str	r6, [sp, #0]
 8016e2a:	69a3      	ldr	r3, [r4, #24]
 8016e2c:	686a      	ldr	r2, [r5, #4]
 8016e2e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8016e30:	6920      	ldr	r0, [r4, #16]
 8016e32:	f7ff ff7a 	bl	8016d2a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016e36:	4440      	add	r0, r8
 8016e38:	e7cc      	b.n	8016dd4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8016e3a:	bf00      	nop
 8016e3c:	2400eae4 	.word	0x2400eae4

08016e40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8016e40:	4b07      	ldr	r3, [pc, #28]	; (8016e60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8016e42:	781b      	ldrb	r3, [r3, #0]
 8016e44:	2b01      	cmp	r3, #1
 8016e46:	d109      	bne.n	8016e5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8016e48:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016e4c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016e50:	8003      	strh	r3, [r0, #0]
 8016e52:	4b04      	ldr	r3, [pc, #16]	; (8016e64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8016e54:	881b      	ldrh	r3, [r3, #0]
 8016e56:	3b01      	subs	r3, #1
 8016e58:	1a9b      	subs	r3, r3, r2
 8016e5a:	800b      	strh	r3, [r1, #0]
 8016e5c:	4770      	bx	lr
 8016e5e:	bf00      	nop
 8016e60:	2400eac8 	.word	0x2400eac8
 8016e64:	2400eac4 	.word	0x2400eac4

08016e68 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8016e68:	4b07      	ldr	r3, [pc, #28]	; (8016e88 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8016e6a:	b510      	push	{r4, lr}
 8016e6c:	781b      	ldrb	r3, [r3, #0]
 8016e6e:	2b01      	cmp	r3, #1
 8016e70:	d108      	bne.n	8016e84 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8016e72:	4b06      	ldr	r3, [pc, #24]	; (8016e8c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8016e74:	880c      	ldrh	r4, [r1, #0]
 8016e76:	881b      	ldrh	r3, [r3, #0]
 8016e78:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016e7c:	3b01      	subs	r3, #1
 8016e7e:	1b1b      	subs	r3, r3, r4
 8016e80:	8003      	strh	r3, [r0, #0]
 8016e82:	800a      	strh	r2, [r1, #0]
 8016e84:	bd10      	pop	{r4, pc}
 8016e86:	bf00      	nop
 8016e88:	2400eac8 	.word	0x2400eac8
 8016e8c:	2400eac4 	.word	0x2400eac4

08016e90 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8016e90:	4b0a      	ldr	r3, [pc, #40]	; (8016ebc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8016e92:	b510      	push	{r4, lr}
 8016e94:	781b      	ldrb	r3, [r3, #0]
 8016e96:	2b01      	cmp	r3, #1
 8016e98:	d10e      	bne.n	8016eb8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8016e9a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8016e9e:	8843      	ldrh	r3, [r0, #2]
 8016ea0:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016ea4:	18ca      	adds	r2, r1, r3
 8016ea6:	4b06      	ldr	r3, [pc, #24]	; (8016ec0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8016ea8:	8044      	strh	r4, [r0, #2]
 8016eaa:	881b      	ldrh	r3, [r3, #0]
 8016eac:	1a9b      	subs	r3, r3, r2
 8016eae:	8003      	strh	r3, [r0, #0]
 8016eb0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016eb4:	8081      	strh	r1, [r0, #4]
 8016eb6:	80c3      	strh	r3, [r0, #6]
 8016eb8:	bd10      	pop	{r4, pc}
 8016eba:	bf00      	nop
 8016ebc:	2400eac8 	.word	0x2400eac8
 8016ec0:	2400eac4 	.word	0x2400eac4

08016ec4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8016ec4:	4b08      	ldr	r3, [pc, #32]	; (8016ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8016ec6:	781b      	ldrb	r3, [r3, #0]
 8016ec8:	2b01      	cmp	r3, #1
 8016eca:	d10c      	bne.n	8016ee6 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8016ecc:	8803      	ldrh	r3, [r0, #0]
 8016ece:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8016ed2:	8842      	ldrh	r2, [r0, #2]
 8016ed4:	8002      	strh	r2, [r0, #0]
 8016ed6:	185a      	adds	r2, r3, r1
 8016ed8:	4b04      	ldr	r3, [pc, #16]	; (8016eec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8016eda:	881b      	ldrh	r3, [r3, #0]
 8016edc:	1a9b      	subs	r3, r3, r2
 8016ede:	8043      	strh	r3, [r0, #2]
 8016ee0:	88c3      	ldrh	r3, [r0, #6]
 8016ee2:	80c1      	strh	r1, [r0, #6]
 8016ee4:	8083      	strh	r3, [r0, #4]
 8016ee6:	4770      	bx	lr
 8016ee8:	2400eac8 	.word	0x2400eac8
 8016eec:	2400eac4 	.word	0x2400eac4

08016ef0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8016ef0:	4b07      	ldr	r3, [pc, #28]	; (8016f10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8016ef2:	b510      	push	{r4, lr}
 8016ef4:	781b      	ldrb	r3, [r3, #0]
 8016ef6:	2b01      	cmp	r3, #1
 8016ef8:	d108      	bne.n	8016f0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8016efa:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016efe:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016f02:	8003      	strh	r3, [r0, #0]
 8016f04:	8893      	ldrh	r3, [r2, #4]
 8016f06:	3b01      	subs	r3, #1
 8016f08:	1b1b      	subs	r3, r3, r4
 8016f0a:	800b      	strh	r3, [r1, #0]
 8016f0c:	bd10      	pop	{r4, pc}
 8016f0e:	bf00      	nop
 8016f10:	2400eac8 	.word	0x2400eac8

08016f14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8016f14:	4b0a      	ldr	r3, [pc, #40]	; (8016f40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8016f16:	460a      	mov	r2, r1
 8016f18:	b510      	push	{r4, lr}
 8016f1a:	781b      	ldrb	r3, [r3, #0]
 8016f1c:	2b01      	cmp	r3, #1
 8016f1e:	d10d      	bne.n	8016f3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8016f20:	8881      	ldrh	r1, [r0, #4]
 8016f22:	8803      	ldrh	r3, [r0, #0]
 8016f24:	440b      	add	r3, r1
 8016f26:	4601      	mov	r1, r0
 8016f28:	3b01      	subs	r3, #1
 8016f2a:	f821 3b02 	strh.w	r3, [r1], #2
 8016f2e:	f7ff ffdf 	bl	8016ef0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8016f32:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016f36:	88c2      	ldrh	r2, [r0, #6]
 8016f38:	80c3      	strh	r3, [r0, #6]
 8016f3a:	8082      	strh	r2, [r0, #4]
 8016f3c:	bd10      	pop	{r4, pc}
 8016f3e:	bf00      	nop
 8016f40:	2400eac8 	.word	0x2400eac8

08016f44 <_ZN8touchgfx11Application13requestRedrawEv>:
 8016f44:	4b06      	ldr	r3, [pc, #24]	; (8016f60 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8016f46:	2100      	movs	r1, #0
 8016f48:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016f4c:	4b05      	ldr	r3, [pc, #20]	; (8016f64 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8016f4e:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 8016f52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f56:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 8016f5a:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 8016f5e:	4770      	bx	lr
 8016f60:	2400eac4 	.word	0x2400eac4
 8016f64:	2400eac6 	.word	0x2400eac6

08016f68 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8016f68:	4b03      	ldr	r3, [pc, #12]	; (8016f78 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8016f6a:	6818      	ldr	r0, [r3, #0]
 8016f6c:	b110      	cbz	r0, 8016f74 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8016f6e:	6803      	ldr	r3, [r0, #0]
 8016f70:	699b      	ldr	r3, [r3, #24]
 8016f72:	4718      	bx	r3
 8016f74:	4770      	bx	lr
 8016f76:	bf00      	nop
 8016f78:	2400eb14 	.word	0x2400eb14

08016f7c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8016f7c:	4770      	bx	lr
	...

08016f80 <_ZN8touchgfx11Application4drawEv>:
 8016f80:	4b09      	ldr	r3, [pc, #36]	; (8016fa8 <_ZN8touchgfx11Application4drawEv+0x28>)
 8016f82:	b507      	push	{r0, r1, r2, lr}
 8016f84:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016f88:	2100      	movs	r1, #0
 8016f8a:	4b08      	ldr	r3, [pc, #32]	; (8016fac <_ZN8touchgfx11Application4drawEv+0x2c>)
 8016f8c:	9100      	str	r1, [sp, #0]
 8016f8e:	4669      	mov	r1, sp
 8016f90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f94:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016f98:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016f9c:	6803      	ldr	r3, [r0, #0]
 8016f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016fa0:	4798      	blx	r3
 8016fa2:	b003      	add	sp, #12
 8016fa4:	f85d fb04 	ldr.w	pc, [sp], #4
 8016fa8:	2400eac4 	.word	0x2400eac4
 8016fac:	2400eac6 	.word	0x2400eac6

08016fb0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8016fb0:	4b03      	ldr	r3, [pc, #12]	; (8016fc0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8016fb2:	6818      	ldr	r0, [r3, #0]
 8016fb4:	b110      	cbz	r0, 8016fbc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8016fb6:	6803      	ldr	r3, [r0, #0]
 8016fb8:	69db      	ldr	r3, [r3, #28]
 8016fba:	4718      	bx	r3
 8016fbc:	4770      	bx	lr
 8016fbe:	bf00      	nop
 8016fc0:	2400eb14 	.word	0x2400eb14

08016fc4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8016fc4:	4b03      	ldr	r3, [pc, #12]	; (8016fd4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8016fc6:	6818      	ldr	r0, [r3, #0]
 8016fc8:	b110      	cbz	r0, 8016fd0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8016fca:	6803      	ldr	r3, [r0, #0]
 8016fcc:	6a1b      	ldr	r3, [r3, #32]
 8016fce:	4718      	bx	r3
 8016fd0:	4770      	bx	lr
 8016fd2:	bf00      	nop
 8016fd4:	2400eb14 	.word	0x2400eb14

08016fd8 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8016fd8:	2300      	movs	r3, #0
 8016fda:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 8016fde:	4770      	bx	lr

08016fe0 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8016fe0:	4b03      	ldr	r3, [pc, #12]	; (8016ff0 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8016fe2:	6818      	ldr	r0, [r3, #0]
 8016fe4:	b110      	cbz	r0, 8016fec <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8016fe6:	6803      	ldr	r3, [r0, #0]
 8016fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016fea:	4718      	bx	r3
 8016fec:	4770      	bx	lr
 8016fee:	bf00      	nop
 8016ff0:	2400eb14 	.word	0x2400eb14

08016ff4 <_ZN8touchgfx11ApplicationD1Ev>:
 8016ff4:	4770      	bx	lr

08016ff6 <_ZN8touchgfx11ApplicationD0Ev>:
 8016ff6:	b510      	push	{r4, lr}
 8016ff8:	4604      	mov	r4, r0
 8016ffa:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8016ffe:	f00b fe42 	bl	8022c86 <_ZdlPvj>
 8017002:	4620      	mov	r0, r4
 8017004:	bd10      	pop	{r4, pc}

08017006 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8017006:	b510      	push	{r4, lr}
 8017008:	f9b1 4000 	ldrsh.w	r4, [r1]
 801700c:	888a      	ldrh	r2, [r1, #4]
 801700e:	f9b0 3000 	ldrsh.w	r3, [r0]
 8017012:	4422      	add	r2, r4
 8017014:	b212      	sxth	r2, r2
 8017016:	4293      	cmp	r3, r2
 8017018:	da15      	bge.n	8017046 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801701a:	8882      	ldrh	r2, [r0, #4]
 801701c:	4413      	add	r3, r2
 801701e:	b21b      	sxth	r3, r3
 8017020:	429c      	cmp	r4, r3
 8017022:	da10      	bge.n	8017046 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8017024:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8017028:	88c9      	ldrh	r1, [r1, #6]
 801702a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801702e:	4419      	add	r1, r3
 8017030:	b209      	sxth	r1, r1
 8017032:	428a      	cmp	r2, r1
 8017034:	da07      	bge.n	8017046 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8017036:	88c0      	ldrh	r0, [r0, #6]
 8017038:	4410      	add	r0, r2
 801703a:	b200      	sxth	r0, r0
 801703c:	4283      	cmp	r3, r0
 801703e:	bfac      	ite	ge
 8017040:	2000      	movge	r0, #0
 8017042:	2001      	movlt	r0, #1
 8017044:	bd10      	pop	{r4, pc}
 8017046:	2000      	movs	r0, #0
 8017048:	e7fc      	b.n	8017044 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801704a <_ZN8touchgfx4Rect10restrictToEss>:
 801704a:	f9b0 3000 	ldrsh.w	r3, [r0]
 801704e:	2b00      	cmp	r3, #0
 8017050:	b510      	push	{r4, lr}
 8017052:	da04      	bge.n	801705e <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8017054:	8884      	ldrh	r4, [r0, #4]
 8017056:	4423      	add	r3, r4
 8017058:	8083      	strh	r3, [r0, #4]
 801705a:	2300      	movs	r3, #0
 801705c:	8003      	strh	r3, [r0, #0]
 801705e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8017062:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017066:	1b09      	subs	r1, r1, r4
 8017068:	428b      	cmp	r3, r1
 801706a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801706e:	bfc8      	it	gt
 8017070:	8081      	strhgt	r1, [r0, #4]
 8017072:	2b00      	cmp	r3, #0
 8017074:	da04      	bge.n	8017080 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8017076:	88c1      	ldrh	r1, [r0, #6]
 8017078:	440b      	add	r3, r1
 801707a:	80c3      	strh	r3, [r0, #6]
 801707c:	2300      	movs	r3, #0
 801707e:	8043      	strh	r3, [r0, #2]
 8017080:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8017084:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8017088:	1a52      	subs	r2, r2, r1
 801708a:	4293      	cmp	r3, r2
 801708c:	bfc8      	it	gt
 801708e:	80c2      	strhgt	r2, [r0, #6]
 8017090:	bd10      	pop	{r4, pc}
	...

08017094 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8017094:	4b10      	ldr	r3, [pc, #64]	; (80170d8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8017096:	b510      	push	{r4, lr}
 8017098:	460c      	mov	r4, r1
 801709a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801709e:	4b0f      	ldr	r3, [pc, #60]	; (80170dc <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 80170a0:	4620      	mov	r0, r4
 80170a2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80170a6:	f7ff ffd0 	bl	801704a <_ZN8touchgfx4Rect10restrictToEss>
 80170aa:	4b0d      	ldr	r3, [pc, #52]	; (80170e0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 80170ac:	6818      	ldr	r0, [r3, #0]
 80170ae:	b190      	cbz	r0, 80170d6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 80170b0:	6803      	ldr	r3, [r0, #0]
 80170b2:	4621      	mov	r1, r4
 80170b4:	689b      	ldr	r3, [r3, #8]
 80170b6:	4798      	blx	r3
 80170b8:	4b0a      	ldr	r3, [pc, #40]	; (80170e4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 80170ba:	6818      	ldr	r0, [r3, #0]
 80170bc:	b118      	cbz	r0, 80170c6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 80170be:	6803      	ldr	r3, [r0, #0]
 80170c0:	4621      	mov	r1, r4
 80170c2:	689b      	ldr	r3, [r3, #8]
 80170c4:	4798      	blx	r3
 80170c6:	4b08      	ldr	r3, [pc, #32]	; (80170e8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 80170c8:	4621      	mov	r1, r4
 80170ca:	6818      	ldr	r0, [r3, #0]
 80170cc:	6803      	ldr	r3, [r0, #0]
 80170ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80170d2:	69db      	ldr	r3, [r3, #28]
 80170d4:	4718      	bx	r3
 80170d6:	bd10      	pop	{r4, pc}
 80170d8:	2400eac6 	.word	0x2400eac6
 80170dc:	2400eac4 	.word	0x2400eac4
 80170e0:	2400eb14 	.word	0x2400eb14
 80170e4:	2400eb10 	.word	0x2400eb10
 80170e8:	2400ead0 	.word	0x2400ead0

080170ec <_ZNK8touchgfx4Rect8includesERKS0_>:
 80170ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170ee:	4606      	mov	r6, r0
 80170f0:	4608      	mov	r0, r1
 80170f2:	460f      	mov	r7, r1
 80170f4:	f7fa f971 	bl	80113da <_ZNK8touchgfx4Rect7isEmptyEv>
 80170f8:	b9e8      	cbnz	r0, 8017136 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80170fa:	f9b7 5000 	ldrsh.w	r5, [r7]
 80170fe:	f9b6 4000 	ldrsh.w	r4, [r6]
 8017102:	42a5      	cmp	r5, r4
 8017104:	db17      	blt.n	8017136 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017106:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801710a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801710e:	429a      	cmp	r2, r3
 8017110:	db11      	blt.n	8017136 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017112:	88b9      	ldrh	r1, [r7, #4]
 8017114:	440d      	add	r5, r1
 8017116:	88b1      	ldrh	r1, [r6, #4]
 8017118:	440c      	add	r4, r1
 801711a:	b22d      	sxth	r5, r5
 801711c:	b224      	sxth	r4, r4
 801711e:	42a5      	cmp	r5, r4
 8017120:	dc09      	bgt.n	8017136 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8017122:	88f8      	ldrh	r0, [r7, #6]
 8017124:	4410      	add	r0, r2
 8017126:	88f2      	ldrh	r2, [r6, #6]
 8017128:	4413      	add	r3, r2
 801712a:	b200      	sxth	r0, r0
 801712c:	b21b      	sxth	r3, r3
 801712e:	4298      	cmp	r0, r3
 8017130:	bfcc      	ite	gt
 8017132:	2000      	movgt	r0, #0
 8017134:	2001      	movle	r0, #1
 8017136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017138 <_ZN8touchgfx11Application11getInstanceEv>:
 8017138:	4b01      	ldr	r3, [pc, #4]	; (8017140 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801713a:	6818      	ldr	r0, [r3, #0]
 801713c:	4770      	bx	lr
 801713e:	bf00      	nop
 8017140:	2400eb24 	.word	0x2400eb24

08017144 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8017144:	2300      	movs	r3, #0
 8017146:	b510      	push	{r4, lr}
 8017148:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 801714c:	4604      	mov	r4, r0
 801714e:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8017152:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8017156:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 801715a:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 801715e:	429a      	cmp	r2, r3
 8017160:	d90e      	bls.n	8017180 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8017162:	18e2      	adds	r2, r4, r3
 8017164:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 8017168:	b122      	cbz	r2, 8017174 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801716a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801716e:	6803      	ldr	r3, [r0, #0]
 8017170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017172:	4798      	blx	r3
 8017174:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8017178:	3301      	adds	r3, #1
 801717a:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801717e:	e7ea      	b.n	8017156 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8017180:	bd10      	pop	{r4, pc}

08017182 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8017182:	2300      	movs	r3, #0
 8017184:	f100 0284 	add.w	r2, r0, #132	; 0x84
 8017188:	30a4      	adds	r0, #164	; 0xa4
 801718a:	f820 3c24 	strh.w	r3, [r0, #-36]
 801718e:	f802 3b01 	strb.w	r3, [r2], #1
 8017192:	4282      	cmp	r2, r0
 8017194:	d1fb      	bne.n	801718e <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8017196:	4770      	bx	lr

08017198 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8017198:	b570      	push	{r4, r5, r6, lr}
 801719a:	4c0b      	ldr	r4, [pc, #44]	; (80171c8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801719c:	4605      	mov	r5, r0
 801719e:	460e      	mov	r6, r1
 80171a0:	6820      	ldr	r0, [r4, #0]
 80171a2:	b110      	cbz	r0, 80171aa <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 80171a4:	6803      	ldr	r3, [r0, #0]
 80171a6:	695b      	ldr	r3, [r3, #20]
 80171a8:	4798      	blx	r3
 80171aa:	1d28      	adds	r0, r5, #4
 80171ac:	f7ff ffe9 	bl	8017182 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80171b0:	6026      	str	r6, [r4, #0]
 80171b2:	6833      	ldr	r3, [r6, #0]
 80171b4:	4630      	mov	r0, r6
 80171b6:	68db      	ldr	r3, [r3, #12]
 80171b8:	4798      	blx	r3
 80171ba:	682b      	ldr	r3, [r5, #0]
 80171bc:	4628      	mov	r0, r5
 80171be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80171c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80171c4:	4718      	bx	r3
 80171c6:	bf00      	nop
 80171c8:	2400eb14 	.word	0x2400eb14

080171cc <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 80171cc:	2300      	movs	r3, #0
 80171ce:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 80171d2:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 80171d6:	461a      	mov	r2, r3
 80171d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80171da:	461c      	mov	r4, r3
 80171dc:	461d      	mov	r5, r3
 80171de:	459c      	cmp	ip, r3
 80171e0:	dd1a      	ble.n	8017218 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 80171e2:	18c6      	adds	r6, r0, r3
 80171e4:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 80171e8:	b16e      	cbz	r6, 8017206 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 80171ea:	429a      	cmp	r2, r3
 80171ec:	d008      	beq.n	8017200 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 80171ee:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 80171f2:	fa1f fe82 	uxth.w	lr, r2
 80171f6:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 80171fa:	1887      	adds	r7, r0, r2
 80171fc:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 8017200:	3201      	adds	r2, #1
 8017202:	3301      	adds	r3, #1
 8017204:	e7eb      	b.n	80171de <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8017206:	4299      	cmp	r1, r3
 8017208:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 801720c:	bfa8      	it	ge
 801720e:	3501      	addge	r5, #1
 8017210:	429e      	cmp	r6, r3
 8017212:	bfc8      	it	gt
 8017214:	3401      	addgt	r4, #1
 8017216:	e7f4      	b.n	8017202 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8017218:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 801721c:	1b49      	subs	r1, r1, r5
 801721e:	1b1b      	subs	r3, r3, r4
 8017220:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 8017224:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8017228:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801722c:	4293      	cmp	r3, r2
 801722e:	dd03      	ble.n	8017238 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8017230:	3b01      	subs	r3, #1
 8017232:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8017236:	e7f7      	b.n	8017228 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8017238:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801723c <_ZN8touchgfx11Application15handleTickEventEv>:
 801723c:	b570      	push	{r4, r5, r6, lr}
 801723e:	4d16      	ldr	r5, [pc, #88]	; (8017298 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8017240:	4604      	mov	r4, r0
 8017242:	6828      	ldr	r0, [r5, #0]
 8017244:	b140      	cbz	r0, 8017258 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8017246:	7a03      	ldrb	r3, [r0, #8]
 8017248:	b933      	cbnz	r3, 8017258 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801724a:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801724e:	6803      	ldr	r3, [r0, #0]
 8017250:	689b      	ldr	r3, [r3, #8]
 8017252:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017256:	4718      	bx	r3
 8017258:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 801725c:	4e0f      	ldr	r6, [pc, #60]	; (801729c <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801725e:	b973      	cbnz	r3, 801727e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017260:	b168      	cbz	r0, 801727e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017262:	7a03      	ldrb	r3, [r0, #8]
 8017264:	b15b      	cbz	r3, 801727e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8017266:	6830      	ldr	r0, [r6, #0]
 8017268:	b110      	cbz	r0, 8017270 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801726a:	6803      	ldr	r3, [r0, #0]
 801726c:	691b      	ldr	r3, [r3, #16]
 801726e:	4798      	blx	r3
 8017270:	6828      	ldr	r0, [r5, #0]
 8017272:	6803      	ldr	r3, [r0, #0]
 8017274:	68db      	ldr	r3, [r3, #12]
 8017276:	4798      	blx	r3
 8017278:	2301      	movs	r3, #1
 801727a:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801727e:	3404      	adds	r4, #4
 8017280:	4620      	mov	r0, r4
 8017282:	f7ff ff5f 	bl	8017144 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8017286:	4620      	mov	r0, r4
 8017288:	f7ff ffa0 	bl	80171cc <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801728c:	6830      	ldr	r0, [r6, #0]
 801728e:	b110      	cbz	r0, 8017296 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8017290:	6803      	ldr	r3, [r0, #0]
 8017292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017294:	e7dd      	b.n	8017252 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8017296:	bd70      	pop	{r4, r5, r6, pc}
 8017298:	2400eb18 	.word	0x2400eb18
 801729c:	2400eb14 	.word	0x2400eb14

080172a0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80172a0:	4603      	mov	r3, r0
 80172a2:	f100 0140 	add.w	r1, r0, #64	; 0x40
 80172a6:	2200      	movs	r2, #0
 80172a8:	801a      	strh	r2, [r3, #0]
 80172aa:	3308      	adds	r3, #8
 80172ac:	f823 2c06 	strh.w	r2, [r3, #-6]
 80172b0:	f823 2c04 	strh.w	r2, [r3, #-4]
 80172b4:	f823 2c02 	strh.w	r2, [r3, #-2]
 80172b8:	428b      	cmp	r3, r1
 80172ba:	d1f5      	bne.n	80172a8 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80172bc:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80172c0:	4770      	bx	lr
	...

080172c4 <_ZN8touchgfx11ApplicationC1Ev>:
 80172c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172c6:	4b1d      	ldr	r3, [pc, #116]	; (801733c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80172c8:	4606      	mov	r6, r0
 80172ca:	4604      	mov	r4, r0
 80172cc:	2500      	movs	r5, #0
 80172ce:	f846 3b04 	str.w	r3, [r6], #4
 80172d2:	22a8      	movs	r2, #168	; 0xa8
 80172d4:	2100      	movs	r1, #0
 80172d6:	4630      	mov	r0, r6
 80172d8:	f00b fe6e 	bl	8022fb8 <memset>
 80172dc:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 80172e0:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 80172e4:	4f16      	ldr	r7, [pc, #88]	; (8017340 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80172e6:	f7ff ffdb 	bl	80172a0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80172ea:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 80172ee:	f7ff ffd7 	bl	80172a0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80172f2:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 80172f6:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 80172fa:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 80172fe:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 8017302:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 8017306:	490f      	ldr	r1, [pc, #60]	; (8017344 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8017308:	480f      	ldr	r0, [pc, #60]	; (8017348 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801730a:	f00b f891 	bl	8022430 <CRC_Lock>
 801730e:	4b0f      	ldr	r3, [pc, #60]	; (801734c <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8017310:	b158      	cbz	r0, 801732a <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8017312:	801d      	strh	r5, [r3, #0]
 8017314:	2300      	movs	r3, #0
 8017316:	4a0e      	ldr	r2, [pc, #56]	; (8017350 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8017318:	4630      	mov	r0, r6
 801731a:	6013      	str	r3, [r2, #0]
 801731c:	4a0d      	ldr	r2, [pc, #52]	; (8017354 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801731e:	603b      	str	r3, [r7, #0]
 8017320:	6013      	str	r3, [r2, #0]
 8017322:	f7ff ff2e 	bl	8017182 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8017326:	4620      	mov	r0, r4
 8017328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801732a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801732e:	2002      	movs	r0, #2
 8017330:	801a      	strh	r2, [r3, #0]
 8017332:	6038      	str	r0, [r7, #0]
 8017334:	f001 faee 	bl	8018914 <_ZN8touchgfx6Screen4drawEv>
 8017338:	e7ec      	b.n	8017314 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801733a:	bf00      	nop
 801733c:	08025fbc 	.word	0x08025fbc
 8017340:	2400eb14 	.word	0x2400eb14
 8017344:	b5e8b5cd 	.word	0xb5e8b5cd
 8017348:	f407a5c2 	.word	0xf407a5c2
 801734c:	2400005c 	.word	0x2400005c
 8017350:	2400eb24 	.word	0x2400eb24
 8017354:	2400eb18 	.word	0x2400eb18

08017358 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8017358:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801735c:	3b01      	subs	r3, #1
 801735e:	b29b      	uxth	r3, r3
 8017360:	428b      	cmp	r3, r1
 8017362:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8017366:	b510      	push	{r4, lr}
 8017368:	d908      	bls.n	801737c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801736a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801736e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8017372:	681a      	ldr	r2, [r3, #0]
 8017374:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8017378:	685a      	ldr	r2, [r3, #4]
 801737a:	6062      	str	r2, [r4, #4]
 801737c:	bd10      	pop	{r4, pc}
	...

08017380 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8017380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017384:	b08f      	sub	sp, #60	; 0x3c
 8017386:	4b8f      	ldr	r3, [pc, #572]	; (80175c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8017388:	4683      	mov	fp, r0
 801738a:	ac0a      	add	r4, sp, #40	; 0x28
 801738c:	e884 0006 	stmia.w	r4, {r1, r2}
 8017390:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017394:	4620      	mov	r0, r4
 8017396:	4b8c      	ldr	r3, [pc, #560]	; (80175c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8017398:	f9b3 1000 	ldrsh.w	r1, [r3]
 801739c:	f7ff fe55 	bl	801704a <_ZN8touchgfx4Rect10restrictToEss>
 80173a0:	4620      	mov	r0, r4
 80173a2:	f7fa f81a 	bl	80113da <_ZNK8touchgfx4Rect7isEmptyEv>
 80173a6:	2800      	cmp	r0, #0
 80173a8:	d16a      	bne.n	8017480 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80173aa:	9403      	str	r4, [sp, #12]
 80173ac:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 80173b0:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 80173b4:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 80173b8:	9301      	str	r3, [sp, #4]
 80173ba:	35a4      	adds	r5, #164	; 0xa4
 80173bc:	b15c      	cbz	r4, 80173d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 80173be:	4629      	mov	r1, r5
 80173c0:	9803      	ldr	r0, [sp, #12]
 80173c2:	f7ff fe93 	bl	80170ec <_ZNK8touchgfx4Rect8includesERKS0_>
 80173c6:	3c01      	subs	r4, #1
 80173c8:	b118      	cbz	r0, 80173d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 80173ca:	b2a1      	uxth	r1, r4
 80173cc:	9801      	ldr	r0, [sp, #4]
 80173ce:	f7ff ffc3 	bl	8017358 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80173d2:	3d08      	subs	r5, #8
 80173d4:	e7f2      	b.n	80173bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 80173d6:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
 80173da:	f108 33ff 	add.w	r3, r8, #4294967295
 80173de:	f8cd 8010 	str.w	r8, [sp, #16]
 80173e2:	9302      	str	r3, [sp, #8]
 80173e4:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80173e8:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 80173ec:	9306      	str	r3, [sp, #24]
 80173ee:	445c      	add	r4, fp
 80173f0:	2500      	movs	r5, #0
 80173f2:	4626      	mov	r6, r4
 80173f4:	f8cd 8014 	str.w	r8, [sp, #20]
 80173f8:	462f      	mov	r7, r5
 80173fa:	9b05      	ldr	r3, [sp, #20]
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d073      	beq.n	80174e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8017400:	9903      	ldr	r1, [sp, #12]
 8017402:	4630      	mov	r0, r6
 8017404:	f7ff fdff 	bl	8017006 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017408:	b350      	cbz	r0, 8017460 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801740a:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801740e:	f9b6 c000 	ldrsh.w	ip, [r6]
 8017412:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 8017416:	45e6      	cmp	lr, ip
 8017418:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801741c:	db33      	blt.n	8017486 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801741e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8017422:	88b3      	ldrh	r3, [r6, #4]
 8017424:	4472      	add	r2, lr
 8017426:	4463      	add	r3, ip
 8017428:	b212      	sxth	r2, r2
 801742a:	b21b      	sxth	r3, r3
 801742c:	429a      	cmp	r2, r3
 801742e:	dc2a      	bgt.n	8017486 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8017430:	fa1f f289 	uxth.w	r2, r9
 8017434:	88f3      	ldrh	r3, [r6, #6]
 8017436:	45ca      	cmp	sl, r9
 8017438:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801743c:	4413      	add	r3, r2
 801743e:	fa1f fc8a 	uxth.w	ip, sl
 8017442:	b29b      	uxth	r3, r3
 8017444:	fa0f fe83 	sxth.w	lr, r3
 8017448:	db0f      	blt.n	801746a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801744a:	eba3 030c 	sub.w	r3, r3, ip
 801744e:	1ac9      	subs	r1, r1, r3
 8017450:	b209      	sxth	r1, r1
 8017452:	2900      	cmp	r1, #0
 8017454:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8017458:	dd12      	ble.n	8017480 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801745a:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801745e:	4605      	mov	r5, r0
 8017460:	9b05      	ldr	r3, [sp, #20]
 8017462:	3e08      	subs	r6, #8
 8017464:	3b01      	subs	r3, #1
 8017466:	9305      	str	r3, [sp, #20]
 8017468:	e7c7      	b.n	80173fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801746a:	4461      	add	r1, ip
 801746c:	b209      	sxth	r1, r1
 801746e:	4571      	cmp	r1, lr
 8017470:	dc38      	bgt.n	80174e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8017472:	eba2 020c 	sub.w	r2, r2, ip
 8017476:	b212      	sxth	r2, r2
 8017478:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801747c:	2a00      	cmp	r2, #0
 801747e:	dcee      	bgt.n	801745e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8017480:	b00f      	add	sp, #60	; 0x3c
 8017482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017486:	45ca      	cmp	sl, r9
 8017488:	db2c      	blt.n	80174e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801748a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801748e:	449a      	add	sl, r3
 8017490:	88f3      	ldrh	r3, [r6, #6]
 8017492:	4499      	add	r9, r3
 8017494:	fa0f fa8a 	sxth.w	sl, sl
 8017498:	fa0f f989 	sxth.w	r9, r9
 801749c:	45ca      	cmp	sl, r9
 801749e:	dc21      	bgt.n	80174e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80174a0:	fa1f f28c 	uxth.w	r2, ip
 80174a4:	88b3      	ldrh	r3, [r6, #4]
 80174a6:	45e6      	cmp	lr, ip
 80174a8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80174ac:	4413      	add	r3, r2
 80174ae:	fa1f f98e 	uxth.w	r9, lr
 80174b2:	b29b      	uxth	r3, r3
 80174b4:	fa0f fa83 	sxth.w	sl, r3
 80174b8:	db0a      	blt.n	80174d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 80174ba:	eba3 0309 	sub.w	r3, r3, r9
 80174be:	1ac9      	subs	r1, r1, r3
 80174c0:	b209      	sxth	r1, r1
 80174c2:	2900      	cmp	r1, #0
 80174c4:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 80174c8:	ddda      	ble.n	8017480 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80174ca:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 80174ce:	e7c6      	b.n	801745e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80174d0:	4449      	add	r1, r9
 80174d2:	b209      	sxth	r1, r1
 80174d4:	4551      	cmp	r1, sl
 80174d6:	dc05      	bgt.n	80174e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80174d8:	eba2 0209 	sub.w	r2, r2, r9
 80174dc:	b212      	sxth	r2, r2
 80174de:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80174e2:	e7cb      	b.n	801747c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 80174e4:	4607      	mov	r7, r0
 80174e6:	e7bb      	b.n	8017460 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80174e8:	2d00      	cmp	r5, #0
 80174ea:	d181      	bne.n	80173f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 80174ec:	2f00      	cmp	r7, #0
 80174ee:	f000 81dd 	beq.w	80178ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80174f2:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 80174f6:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 80174fa:	b2b3      	uxth	r3, r6
 80174fc:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8017500:	b2b9      	uxth	r1, r7
 8017502:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 8017506:	441a      	add	r2, r3
 8017508:	448a      	add	sl, r1
 801750a:	9105      	str	r1, [sp, #20]
 801750c:	b292      	uxth	r2, r2
 801750e:	fa1f fa8a 	uxth.w	sl, sl
 8017512:	fa0f f882 	sxth.w	r8, r2
 8017516:	fa0f f98a 	sxth.w	r9, sl
 801751a:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801751e:	9b04      	ldr	r3, [sp, #16]
 8017520:	2b00      	cmp	r3, #0
 8017522:	d053      	beq.n	80175cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8017524:	9903      	ldr	r1, [sp, #12]
 8017526:	4620      	mov	r0, r4
 8017528:	f7ff fd6d 	bl	8017006 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801752c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8017530:	b1c0      	cbz	r0, 8017564 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8017532:	f9b4 e000 	ldrsh.w	lr, [r4]
 8017536:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801753a:	4576      	cmp	r6, lr
 801753c:	dc23      	bgt.n	8017586 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801753e:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8017542:	44f4      	add	ip, lr
 8017544:	fa0f fc8c 	sxth.w	ip, ip
 8017548:	45e0      	cmp	r8, ip
 801754a:	db1c      	blt.n	8017586 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801754c:	428f      	cmp	r7, r1
 801754e:	fa1f fc81 	uxth.w	ip, r1
 8017552:	88e1      	ldrh	r1, [r4, #6]
 8017554:	dc0d      	bgt.n	8017572 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8017556:	ebaa 0c0c 	sub.w	ip, sl, ip
 801755a:	f8a4 9002 	strh.w	r9, [r4, #2]
 801755e:	eba1 010c 	sub.w	r1, r1, ip
 8017562:	80e1      	strh	r1, [r4, #6]
 8017564:	4628      	mov	r0, r5
 8017566:	9904      	ldr	r1, [sp, #16]
 8017568:	3c08      	subs	r4, #8
 801756a:	4605      	mov	r5, r0
 801756c:	3901      	subs	r1, #1
 801756e:	9104      	str	r1, [sp, #16]
 8017570:	e7d3      	b.n	801751a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 8017572:	4461      	add	r1, ip
 8017574:	b209      	sxth	r1, r1
 8017576:	4549      	cmp	r1, r9
 8017578:	dcf5      	bgt.n	8017566 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801757a:	9905      	ldr	r1, [sp, #20]
 801757c:	eba1 0c0c 	sub.w	ip, r1, ip
 8017580:	f8a4 c006 	strh.w	ip, [r4, #6]
 8017584:	e7ee      	b.n	8017564 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8017586:	428f      	cmp	r7, r1
 8017588:	dced      	bgt.n	8017566 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801758a:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801758e:	4461      	add	r1, ip
 8017590:	b209      	sxth	r1, r1
 8017592:	4589      	cmp	r9, r1
 8017594:	dbe7      	blt.n	8017566 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8017596:	4576      	cmp	r6, lr
 8017598:	fa1f fc8e 	uxth.w	ip, lr
 801759c:	88a1      	ldrh	r1, [r4, #4]
 801759e:	dc07      	bgt.n	80175b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 80175a0:	eba2 0c0c 	sub.w	ip, r2, ip
 80175a4:	f8a4 8000 	strh.w	r8, [r4]
 80175a8:	eba1 010c 	sub.w	r1, r1, ip
 80175ac:	80a1      	strh	r1, [r4, #4]
 80175ae:	e7d9      	b.n	8017564 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80175b0:	4461      	add	r1, ip
 80175b2:	b209      	sxth	r1, r1
 80175b4:	4588      	cmp	r8, r1
 80175b6:	dbd6      	blt.n	8017566 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80175b8:	eba3 0c0c 	sub.w	ip, r3, ip
 80175bc:	f8a4 c004 	strh.w	ip, [r4, #4]
 80175c0:	e7d0      	b.n	8017564 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80175c2:	bf00      	nop
 80175c4:	2400eac6 	.word	0x2400eac6
 80175c8:	2400eac4 	.word	0x2400eac4
 80175cc:	2d00      	cmp	r5, #0
 80175ce:	f000 816d 	beq.w	80178ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80175d2:	9b06      	ldr	r3, [sp, #24]
 80175d4:	445b      	add	r3, fp
 80175d6:	461c      	mov	r4, r3
 80175d8:	9b02      	ldr	r3, [sp, #8]
 80175da:	3301      	adds	r3, #1
 80175dc:	f000 8166 	beq.w	80178ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80175e0:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 80175e4:	9803      	ldr	r0, [sp, #12]
 80175e6:	4629      	mov	r1, r5
 80175e8:	f7ff fd80 	bl	80170ec <_ZNK8touchgfx4Rect8includesERKS0_>
 80175ec:	b120      	cbz	r0, 80175f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 80175ee:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80175f2:	9801      	ldr	r0, [sp, #4]
 80175f4:	f7ff feb0 	bl	8017358 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80175f8:	9903      	ldr	r1, [sp, #12]
 80175fa:	4628      	mov	r0, r5
 80175fc:	f7ff fd03 	bl	8017006 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017600:	2800      	cmp	r0, #0
 8017602:	f000 809c 	beq.w	801773e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8017606:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 801760a:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801760e:	fa1f f189 	uxth.w	r1, r9
 8017612:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8017616:	9309      	str	r3, [sp, #36]	; 0x24
 8017618:	eb01 0c03 	add.w	ip, r1, r3
 801761c:	b283      	uxth	r3, r0
 801761e:	4548      	cmp	r0, r9
 8017620:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8017624:	fa1f fa8c 	uxth.w	sl, ip
 8017628:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801762c:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 8017630:	eb03 050c 	add.w	r5, r3, ip
 8017634:	b2ad      	uxth	r5, r5
 8017636:	9505      	str	r5, [sp, #20]
 8017638:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801763c:	9504      	str	r5, [sp, #16]
 801763e:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 8017642:	f340 8099 	ble.w	8017778 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8017646:	1a5b      	subs	r3, r3, r1
 8017648:	4596      	cmp	lr, r2
 801764a:	fa0f f08a 	sxth.w	r0, sl
 801764e:	b29b      	uxth	r3, r3
 8017650:	b21e      	sxth	r6, r3
 8017652:	dd2e      	ble.n	80176b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8017654:	9f02      	ldr	r7, [sp, #8]
 8017656:	fa1f fe8e 	uxth.w	lr, lr
 801765a:	b292      	uxth	r2, r2
 801765c:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8017660:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8017664:	9f04      	ldr	r7, [sp, #16]
 8017666:	ebae 0102 	sub.w	r1, lr, r2
 801766a:	44a6      	add	lr, r4
 801766c:	1a3f      	subs	r7, r7, r0
 801766e:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 8017672:	b289      	uxth	r1, r1
 8017674:	4402      	add	r2, r0
 8017676:	fa0f fe8e 	sxth.w	lr, lr
 801767a:	b20d      	sxth	r5, r1
 801767c:	b212      	sxth	r2, r2
 801767e:	436f      	muls	r7, r5
 8017680:	ebae 0202 	sub.w	r2, lr, r2
 8017684:	4372      	muls	r2, r6
 8017686:	4297      	cmp	r7, r2
 8017688:	db09      	blt.n	801769e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801768a:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 801768e:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 8017692:	449c      	add	ip, r3
 8017694:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8017698:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801769c:	e686      	b.n	80173ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801769e:	4421      	add	r1, r4
 80176a0:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 80176a4:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 80176a8:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80176ac:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80176b0:	e67c      	b.n	80173ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80176b2:	9f04      	ldr	r7, [sp, #16]
 80176b4:	42b8      	cmp	r0, r7
 80176b6:	da27      	bge.n	8017708 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 80176b8:	9902      	ldr	r1, [sp, #8]
 80176ba:	1a3f      	subs	r7, r7, r0
 80176bc:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 80176c0:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 80176c4:	eb05 010e 	add.w	r1, r5, lr
 80176c8:	fa1f f881 	uxth.w	r8, r1
 80176cc:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 80176d0:	4411      	add	r1, r2
 80176d2:	fa0f f988 	sxth.w	r9, r8
 80176d6:	eba2 020e 	sub.w	r2, r2, lr
 80176da:	eba1 0108 	sub.w	r1, r1, r8
 80176de:	4372      	muls	r2, r6
 80176e0:	b289      	uxth	r1, r1
 80176e2:	fa0f f881 	sxth.w	r8, r1
 80176e6:	fb08 f707 	mul.w	r7, r8, r7
 80176ea:	42ba      	cmp	r2, r7
 80176ec:	dc06      	bgt.n	80176fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 80176ee:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 80176f2:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 80176f6:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 80176fa:	e7ca      	b.n	8017692 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 80176fc:	4429      	add	r1, r5
 80176fe:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 8017702:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8017706:	e651      	b.n	80173ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017708:	9805      	ldr	r0, [sp, #20]
 801770a:	2d06      	cmp	r5, #6
 801770c:	ebaa 0000 	sub.w	r0, sl, r0
 8017710:	b280      	uxth	r0, r0
 8017712:	fa0f fe80 	sxth.w	lr, r0
 8017716:	d817      	bhi.n	8017748 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8017718:	9b04      	ldr	r3, [sp, #16]
 801771a:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 801771e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8017722:	1c6b      	adds	r3, r5, #1
 8017724:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 8017728:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 801772c:	9b01      	ldr	r3, [sp, #4]
 801772e:	9801      	ldr	r0, [sp, #4]
 8017730:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8017734:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8017738:	805a      	strh	r2, [r3, #2]
 801773a:	809e      	strh	r6, [r3, #4]
 801773c:	80d9      	strh	r1, [r3, #6]
 801773e:	9b02      	ldr	r3, [sp, #8]
 8017740:	3c08      	subs	r4, #8
 8017742:	3b01      	subs	r3, #1
 8017744:	9302      	str	r3, [sp, #8]
 8017746:	e747      	b.n	80175d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8017748:	9a02      	ldr	r2, [sp, #8]
 801774a:	45b6      	cmp	lr, r6
 801774c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8017750:	db0d      	blt.n	801776e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8017752:	449c      	add	ip, r3
 8017754:	445a      	add	r2, fp
 8017756:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801775a:	fa1f fc8c 	uxth.w	ip, ip
 801775e:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 8017762:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8017766:	448c      	add	ip, r1
 8017768:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 801776c:	e61e      	b.n	80173ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801776e:	445a      	add	r2, fp
 8017770:	4484      	add	ip, r0
 8017772:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 8017776:	e78f      	b.n	8017698 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8017778:	fa1f f18e 	uxth.w	r1, lr
 801777c:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8017780:	b293      	uxth	r3, r2
 8017782:	4596      	cmp	lr, r2
 8017784:	eb01 0806 	add.w	r8, r1, r6
 8017788:	9306      	str	r3, [sp, #24]
 801778a:	fa1f f888 	uxth.w	r8, r8
 801778e:	9f06      	ldr	r7, [sp, #24]
 8017790:	fa0f f388 	sxth.w	r3, r8
 8017794:	9307      	str	r3, [sp, #28]
 8017796:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 801779a:	443b      	add	r3, r7
 801779c:	b29b      	uxth	r3, r3
 801779e:	9308      	str	r3, [sp, #32]
 80177a0:	da24      	bge.n	80177ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 80177a2:	9905      	ldr	r1, [sp, #20]
 80177a4:	eba3 0308 	sub.w	r3, r3, r8
 80177a8:	eba2 020e 	sub.w	r2, r2, lr
 80177ac:	eba9 0000 	sub.w	r0, r9, r0
 80177b0:	ebaa 0401 	sub.w	r4, sl, r1
 80177b4:	b29b      	uxth	r3, r3
 80177b6:	b2a4      	uxth	r4, r4
 80177b8:	b219      	sxth	r1, r3
 80177ba:	b225      	sxth	r5, r4
 80177bc:	4348      	muls	r0, r1
 80177be:	436a      	muls	r2, r5
 80177c0:	4282      	cmp	r2, r0
 80177c2:	9a02      	ldr	r2, [sp, #8]
 80177c4:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80177c8:	445a      	add	r2, fp
 80177ca:	dc06      	bgt.n	80177da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 80177cc:	9b07      	ldr	r3, [sp, #28]
 80177ce:	44a4      	add	ip, r4
 80177d0:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 80177d4:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 80177d8:	e75e      	b.n	8017698 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80177da:	9904      	ldr	r1, [sp, #16]
 80177dc:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 80177e0:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 80177e4:	4433      	add	r3, r6
 80177e6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80177ea:	e5df      	b.n	80173ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80177ec:	9f06      	ldr	r7, [sp, #24]
 80177ee:	9b04      	ldr	r3, [sp, #16]
 80177f0:	1bc9      	subs	r1, r1, r7
 80177f2:	fa0f f78a 	sxth.w	r7, sl
 80177f6:	b289      	uxth	r1, r1
 80177f8:	429f      	cmp	r7, r3
 80177fa:	fa0f fe81 	sxth.w	lr, r1
 80177fe:	dd23      	ble.n	8017848 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 8017800:	9a05      	ldr	r2, [sp, #20]
 8017802:	eba9 0000 	sub.w	r0, r9, r0
 8017806:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801780a:	ebaa 0202 	sub.w	r2, sl, r2
 801780e:	9d07      	ldr	r5, [sp, #28]
 8017810:	fb0e f000 	mul.w	r0, lr, r0
 8017814:	b292      	uxth	r2, r2
 8017816:	eba5 0a03 	sub.w	sl, r5, r3
 801781a:	9b02      	ldr	r3, [sp, #8]
 801781c:	b214      	sxth	r4, r2
 801781e:	00db      	lsls	r3, r3, #3
 8017820:	fb04 fa0a 	mul.w	sl, r4, sl
 8017824:	445b      	add	r3, fp
 8017826:	4550      	cmp	r0, sl
 8017828:	db03      	blt.n	8017832 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 801782a:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 801782e:	4494      	add	ip, r2
 8017830:	e732      	b.n	8017698 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8017832:	9a04      	ldr	r2, [sp, #16]
 8017834:	4431      	add	r1, r6
 8017836:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 801783a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 801783e:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8017842:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8017846:	e75c      	b.n	8017702 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8017848:	9b08      	ldr	r3, [sp, #32]
 801784a:	2d06      	cmp	r5, #6
 801784c:	eba3 0308 	sub.w	r3, r3, r8
 8017850:	b29b      	uxth	r3, r3
 8017852:	b218      	sxth	r0, r3
 8017854:	d813      	bhi.n	801787e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 8017856:	9b07      	ldr	r3, [sp, #28]
 8017858:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 801785c:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 8017860:	1c6b      	adds	r3, r5, #1
 8017862:	9901      	ldr	r1, [sp, #4]
 8017864:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8017868:	9b01      	ldr	r3, [sp, #4]
 801786a:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801786e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8017872:	805a      	strh	r2, [r3, #2]
 8017874:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017876:	f8a3 e006 	strh.w	lr, [r3, #6]
 801787a:	809a      	strh	r2, [r3, #4]
 801787c:	e75f      	b.n	801773e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801787e:	9c02      	ldr	r4, [sp, #8]
 8017880:	4570      	cmp	r0, lr
 8017882:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8017886:	db0d      	blt.n	80178a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 8017888:	4431      	add	r1, r6
 801788a:	9b06      	ldr	r3, [sp, #24]
 801788c:	445c      	add	r4, fp
 801788e:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8017892:	b289      	uxth	r1, r1
 8017894:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 8017898:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801789c:	4419      	add	r1, r3
 801789e:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 80178a2:	e583      	b.n	80173ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80178a4:	445c      	add	r4, fp
 80178a6:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 80178aa:	e79b      	b.n	80177e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 80178ac:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 80178b0:	2e07      	cmp	r6, #7
 80178b2:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 80178b6:	d812      	bhi.n	80178de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
 80178b8:	1c75      	adds	r5, r6, #1
 80178ba:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 80178be:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 80178c2:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 80178c6:	9d01      	ldr	r5, [sp, #4]
 80178c8:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80178cc:	442c      	add	r4, r5
 80178ce:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80178d2:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 80178d6:	8061      	strh	r1, [r4, #2]
 80178d8:	80a2      	strh	r2, [r4, #4]
 80178da:	80e3      	strh	r3, [r4, #6]
 80178dc:	e5d0      	b.n	8017480 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80178de:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 80178e2:	3e01      	subs	r6, #1
 80178e4:	445c      	add	r4, fp
 80178e6:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80178ea:	f04f 37ff 	mov.w	r7, #4294967295
 80178ee:	2500      	movs	r5, #0
 80178f0:	9305      	str	r3, [sp, #20]
 80178f2:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 80178f6:	1e72      	subs	r2, r6, #1
 80178f8:	9302      	str	r3, [sp, #8]
 80178fa:	4691      	mov	r9, r2
 80178fc:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 8017900:	9304      	str	r3, [sp, #16]
 8017902:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 8017906:	f1b9 3fff 	cmp.w	r9, #4294967295
 801790a:	6818      	ldr	r0, [r3, #0]
 801790c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8017910:	9207      	str	r2, [sp, #28]
 8017912:	bf16      	itet	ne
 8017914:	9905      	ldrne	r1, [sp, #20]
 8017916:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801791a:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801791e:	9306      	str	r3, [sp, #24]
 8017920:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8017924:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8017928:	fb18 f801 	smulbb	r8, r8, r1
 801792c:	6859      	ldr	r1, [r3, #4]
 801792e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8017932:	4671      	mov	r1, lr
 8017934:	a80c      	add	r0, sp, #48	; 0x30
 8017936:	f7fb fa8e 	bl	8012e56 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801793a:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801793e:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8017942:	f04f 0c08 	mov.w	ip, #8
 8017946:	9b04      	ldr	r3, [sp, #16]
 8017948:	9a02      	ldr	r2, [sp, #8]
 801794a:	fb10 f001 	smulbb	r0, r0, r1
 801794e:	fb02 8803 	mla	r8, r2, r3, r8
 8017952:	eba0 0108 	sub.w	r1, r0, r8
 8017956:	fb90 f0fc 	sdiv	r0, r0, ip
 801795a:	4288      	cmp	r0, r1
 801795c:	dc20      	bgt.n	80179a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 801795e:	4551      	cmp	r1, sl
 8017960:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8017964:	da03      	bge.n	801796e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
 8017966:	b1d9      	cbz	r1, 80179a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 8017968:	468a      	mov	sl, r1
 801796a:	464f      	mov	r7, r9
 801796c:	4635      	mov	r5, r6
 801796e:	f109 39ff 	add.w	r9, r9, #4294967295
 8017972:	f119 0f02 	cmn.w	r9, #2
 8017976:	d1c6      	bne.n	8017906 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 8017978:	4616      	mov	r6, r2
 801797a:	3201      	adds	r2, #1
 801797c:	f1a4 0408 	sub.w	r4, r4, #8
 8017980:	d1b7      	bne.n	80178f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
 8017982:	9b01      	ldr	r3, [sp, #4]
 8017984:	b2ac      	uxth	r4, r5
 8017986:	00ed      	lsls	r5, r5, #3
 8017988:	1958      	adds	r0, r3, r5
 801798a:	1c7b      	adds	r3, r7, #1
 801798c:	d10b      	bne.n	80179a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
 801798e:	4601      	mov	r1, r0
 8017990:	9803      	ldr	r0, [sp, #12]
 8017992:	f7fb fa60 	bl	8012e56 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017996:	4621      	mov	r1, r4
 8017998:	9801      	ldr	r0, [sp, #4]
 801799a:	f7ff fcdd 	bl	8017358 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801799e:	e505      	b.n	80173ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80179a0:	464f      	mov	r7, r9
 80179a2:	4635      	mov	r5, r6
 80179a4:	e7ed      	b.n	8017982 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
 80179a6:	9b01      	ldr	r3, [sp, #4]
 80179a8:	00ff      	lsls	r7, r7, #3
 80179aa:	445d      	add	r5, fp
 80179ac:	19d9      	adds	r1, r3, r7
 80179ae:	445f      	add	r7, fp
 80179b0:	f7fb fa51 	bl	8012e56 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80179b4:	9b03      	ldr	r3, [sp, #12]
 80179b6:	cb03      	ldmia	r3!, {r0, r1}
 80179b8:	9b03      	ldr	r3, [sp, #12]
 80179ba:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 80179be:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80179c2:	f855 0fac 	ldr.w	r0, [r5, #172]!
 80179c6:	6869      	ldr	r1, [r5, #4]
 80179c8:	c303      	stmia	r3!, {r0, r1}
 80179ca:	e7e4      	b.n	8017996 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

080179cc <_ZN8touchgfx11Application10invalidateEv>:
 80179cc:	4b09      	ldr	r3, [pc, #36]	; (80179f4 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 80179ce:	b082      	sub	sp, #8
 80179d0:	2100      	movs	r1, #0
 80179d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80179d6:	4b08      	ldr	r3, [pc, #32]	; (80179f8 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 80179d8:	9100      	str	r1, [sp, #0]
 80179da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80179de:	f8ad 2004 	strh.w	r2, [sp, #4]
 80179e2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80179e6:	ab02      	add	r3, sp, #8
 80179e8:	e913 0006 	ldmdb	r3, {r1, r2}
 80179ec:	b002      	add	sp, #8
 80179ee:	f7ff bcc7 	b.w	8017380 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80179f2:	bf00      	nop
 80179f4:	2400eac4 	.word	0x2400eac4
 80179f8:	2400eac6 	.word	0x2400eac6

080179fc <_ZN8touchgfx11Application15drawCachedAreasEv>:
 80179fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a00:	f500 7698 	add.w	r6, r0, #304	; 0x130
 8017a04:	b09b      	sub	sp, #108	; 0x6c
 8017a06:	4604      	mov	r4, r0
 8017a08:	4630      	mov	r0, r6
 8017a0a:	f7f9 fce6 	bl	80113da <_ZNK8touchgfx4Rect7isEmptyEv>
 8017a0e:	4605      	mov	r5, r0
 8017a10:	b940      	cbnz	r0, 8017a24 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 8017a12:	4620      	mov	r0, r4
 8017a14:	e896 0006 	ldmia.w	r6, {r1, r2}
 8017a18:	f7ff fcb2 	bl	8017380 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8017a1c:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8017a20:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 8017a24:	4bc8      	ldr	r3, [pc, #800]	; (8017d48 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8017a26:	681b      	ldr	r3, [r3, #0]
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d03e      	beq.n	8017aaa <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8017a2c:	4dc7      	ldr	r5, [pc, #796]	; (8017d4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8017a2e:	4628      	mov	r0, r5
 8017a30:	f7f9 fcd3 	bl	80113da <_ZNK8touchgfx4Rect7isEmptyEv>
 8017a34:	4606      	mov	r6, r0
 8017a36:	2800      	cmp	r0, #0
 8017a38:	d137      	bne.n	8017aaa <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8017a3a:	4628      	mov	r0, r5
 8017a3c:	f7ff fa28 	bl	8016e90 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8017a40:	6829      	ldr	r1, [r5, #0]
 8017a42:	686a      	ldr	r2, [r5, #4]
 8017a44:	4620      	mov	r0, r4
 8017a46:	f7ff fc9b 	bl	8017380 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8017a4a:	802e      	strh	r6, [r5, #0]
 8017a4c:	806e      	strh	r6, [r5, #2]
 8017a4e:	80ae      	strh	r6, [r5, #4]
 8017a50:	80ee      	strh	r6, [r5, #6]
 8017a52:	ae09      	add	r6, sp, #36	; 0x24
 8017a54:	4630      	mov	r0, r6
 8017a56:	f7ff fc23 	bl	80172a0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017a5a:	4abd      	ldr	r2, [pc, #756]	; (8017d50 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8017a5c:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8017a60:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8017a64:	8815      	ldrh	r5, [r2, #0]
 8017a66:	9202      	str	r2, [sp, #8]
 8017a68:	462b      	mov	r3, r5
 8017a6a:	429f      	cmp	r7, r3
 8017a6c:	d924      	bls.n	8017ab8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 8017a6e:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8017a72:	2907      	cmp	r1, #7
 8017a74:	d816      	bhi.n	8017aa4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 8017a76:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8017a7a:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8017a7e:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 8017a82:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8017a86:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8017a8a:	1c4a      	adds	r2, r1, #1
 8017a8c:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8017a90:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 8017a94:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 8017a98:	f8a2 9002 	strh.w	r9, [r2, #2]
 8017a9c:	f8a2 e004 	strh.w	lr, [r2, #4]
 8017aa0:	f8a2 c006 	strh.w	ip, [r2, #6]
 8017aa4:	3301      	adds	r3, #1
 8017aa6:	b29b      	uxth	r3, r3
 8017aa8:	e7df      	b.n	8017a6a <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 8017aaa:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d1cf      	bne.n	8017a52 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 8017ab2:	b01b      	add	sp, #108	; 0x6c
 8017ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ab8:	462f      	mov	r7, r5
 8017aba:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 8017abe:	42bb      	cmp	r3, r7
 8017ac0:	d90b      	bls.n	8017ada <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 8017ac2:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 8017ac6:	3701      	adds	r7, #1
 8017ac8:	4620      	mov	r0, r4
 8017aca:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 8017ace:	b2bf      	uxth	r7, r7
 8017ad0:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 8017ad4:	f7ff fc54 	bl	8017380 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8017ad8:	e7ef      	b.n	8017aba <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 8017ada:	4a9e      	ldr	r2, [pc, #632]	; (8017d54 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8017adc:	6813      	ldr	r3, [r2, #0]
 8017ade:	4690      	mov	r8, r2
 8017ae0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8017ae4:	2b01      	cmp	r3, #1
 8017ae6:	f040 80e4 	bne.w	8017cb2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 8017aea:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8017aee:	4629      	mov	r1, r5
 8017af0:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8017af4:	2500      	movs	r5, #0
 8017af6:	33ae      	adds	r3, #174	; 0xae
 8017af8:	428f      	cmp	r7, r1
 8017afa:	f103 0308 	add.w	r3, r3, #8
 8017afe:	dd0a      	ble.n	8017b16 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 8017b00:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8017b04:	3101      	adds	r1, #1
 8017b06:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 8017b0a:	4402      	add	r2, r0
 8017b0c:	b212      	sxth	r2, r2
 8017b0e:	4295      	cmp	r5, r2
 8017b10:	bfb8      	it	lt
 8017b12:	4615      	movlt	r5, r2
 8017b14:	e7f0      	b.n	8017af8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 8017b16:	4b90      	ldr	r3, [pc, #576]	; (8017d58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8017b18:	f8df b238 	ldr.w	fp, [pc, #568]	; 8017d54 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 8017b1c:	881b      	ldrh	r3, [r3, #0]
 8017b1e:	46d8      	mov	r8, fp
 8017b20:	2b0f      	cmp	r3, #15
 8017b22:	bf8c      	ite	hi
 8017b24:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 8017b28:	f04f 0a01 	movls.w	sl, #1
 8017b2c:	2300      	movs	r3, #0
 8017b2e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8017b32:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 8017b36:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8017b3a:	4438      	add	r0, r7
 8017b3c:	b207      	sxth	r7, r0
 8017b3e:	f8db 0000 	ldr.w	r0, [fp]
 8017b42:	42bd      	cmp	r5, r7
 8017b44:	6803      	ldr	r3, [r0, #0]
 8017b46:	f340 8084 	ble.w	8017c52 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8017b4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8017b4e:	4798      	blx	r3
 8017b50:	eb07 030a 	add.w	r3, r7, sl
 8017b54:	4298      	cmp	r0, r3
 8017b56:	da07      	bge.n	8017b68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8017b58:	4285      	cmp	r5, r0
 8017b5a:	dd05      	ble.n	8017b68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8017b5c:	4287      	cmp	r7, r0
 8017b5e:	dd6d      	ble.n	8017c3c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8017b60:	2f00      	cmp	r7, #0
 8017b62:	dd6b      	ble.n	8017c3c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8017b64:	4628      	mov	r0, r5
 8017b66:	e004      	b.n	8017b72 <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 8017b68:	4287      	cmp	r7, r0
 8017b6a:	dcfb      	bgt.n	8017b64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 8017b6c:	42a8      	cmp	r0, r5
 8017b6e:	bfa8      	it	ge
 8017b70:	4628      	movge	r0, r5
 8017b72:	4b7a      	ldr	r3, [pc, #488]	; (8017d5c <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 8017b74:	1bc0      	subs	r0, r0, r7
 8017b76:	2200      	movs	r2, #0
 8017b78:	f8ad 7016 	strh.w	r7, [sp, #22]
 8017b7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017b80:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017b84:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017b88:	9b02      	ldr	r3, [sp, #8]
 8017b8a:	f8ad 001a 	strh.w	r0, [sp, #26]
 8017b8e:	881f      	ldrh	r7, [r3, #0]
 8017b90:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8017b94:	42bb      	cmp	r3, r7
 8017b96:	d9cc      	bls.n	8017b32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8017b98:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8017b9c:	ab07      	add	r3, sp, #28
 8017b9e:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8017ba2:	6851      	ldr	r1, [r2, #4]
 8017ba4:	c303      	stmia	r3!, {r0, r1}
 8017ba6:	a905      	add	r1, sp, #20
 8017ba8:	a807      	add	r0, sp, #28
 8017baa:	f7ff fa2c 	bl	8017006 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017bae:	2800      	cmp	r0, #0
 8017bb0:	d04c      	beq.n	8017c4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 8017bb2:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8017bb6:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8017bba:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 8017bbe:	4686      	mov	lr, r0
 8017bc0:	4290      	cmp	r0, r2
 8017bc2:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8017bc6:	4448      	add	r0, r9
 8017bc8:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 8017bcc:	bfb8      	it	lt
 8017bce:	4696      	movlt	lr, r2
 8017bd0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8017bd4:	444a      	add	r2, r9
 8017bd6:	b280      	uxth	r0, r0
 8017bd8:	4299      	cmp	r1, r3
 8017bda:	468c      	mov	ip, r1
 8017bdc:	b292      	uxth	r2, r2
 8017bde:	9303      	str	r3, [sp, #12]
 8017be0:	bfb8      	it	lt
 8017be2:	469c      	movlt	ip, r3
 8017be4:	b203      	sxth	r3, r0
 8017be6:	fa0f f982 	sxth.w	r9, r2
 8017bea:	f8ad e01c 	strh.w	lr, [sp, #28]
 8017bee:	f8ad c01e 	strh.w	ip, [sp, #30]
 8017bf2:	454b      	cmp	r3, r9
 8017bf4:	bfb8      	it	lt
 8017bf6:	4602      	movlt	r2, r0
 8017bf8:	9b03      	ldr	r3, [sp, #12]
 8017bfa:	eba2 020e 	sub.w	r2, r2, lr
 8017bfe:	f8ad 2020 	strh.w	r2, [sp, #32]
 8017c02:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8017c06:	4411      	add	r1, r2
 8017c08:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8017c0c:	4413      	add	r3, r2
 8017c0e:	b289      	uxth	r1, r1
 8017c10:	b29b      	uxth	r3, r3
 8017c12:	b208      	sxth	r0, r1
 8017c14:	b21a      	sxth	r2, r3
 8017c16:	4290      	cmp	r0, r2
 8017c18:	bfb8      	it	lt
 8017c1a:	460b      	movlt	r3, r1
 8017c1c:	eba3 030c 	sub.w	r3, r3, ip
 8017c20:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8017c24:	a807      	add	r0, sp, #28
 8017c26:	f7f9 fbd8 	bl	80113da <_ZNK8touchgfx4Rect7isEmptyEv>
 8017c2a:	b920      	cbnz	r0, 8017c36 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8017c2c:	6823      	ldr	r3, [r4, #0]
 8017c2e:	a907      	add	r1, sp, #28
 8017c30:	4620      	mov	r0, r4
 8017c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c34:	4798      	blx	r3
 8017c36:	3701      	adds	r7, #1
 8017c38:	b2bf      	uxth	r7, r7
 8017c3a:	e7a9      	b.n	8017b90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8017c3c:	f8d8 0000 	ldr.w	r0, [r8]
 8017c40:	2101      	movs	r1, #1
 8017c42:	6803      	ldr	r3, [r0, #0]
 8017c44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017c48:	4798      	blx	r3
 8017c4a:	e772      	b.n	8017b32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8017c4c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8017c50:	e7e8      	b.n	8017c24 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 8017c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c54:	4798      	blx	r3
 8017c56:	4b42      	ldr	r3, [pc, #264]	; (8017d60 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 8017c58:	781b      	ldrb	r3, [r3, #0]
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	f43f af29 	beq.w	8017ab2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8017c60:	2300      	movs	r3, #0
 8017c62:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8017c66:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8017c6a:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 8017c6e:	9b02      	ldr	r3, [sp, #8]
 8017c70:	881b      	ldrh	r3, [r3, #0]
 8017c72:	429d      	cmp	r5, r3
 8017c74:	f67f af1d 	bls.w	8017ab2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8017c78:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 8017c7c:	2907      	cmp	r1, #7
 8017c7e:	d815      	bhi.n	8017cac <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 8017c80:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8017c84:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 8017c88:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8017c8c:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8017c90:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8017c94:	1c4a      	adds	r2, r1, #1
 8017c96:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 8017c9a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8017c9e:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 8017ca2:	f8a2 e002 	strh.w	lr, [r2, #2]
 8017ca6:	f8a2 c004 	strh.w	ip, [r2, #4]
 8017caa:	80d7      	strh	r7, [r2, #6]
 8017cac:	3301      	adds	r3, #1
 8017cae:	b29b      	uxth	r3, r3
 8017cb0:	e7df      	b.n	8017c72 <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 8017cb2:	2b02      	cmp	r3, #2
 8017cb4:	f040 8135 	bne.w	8017f22 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 8017cb8:	4b2a      	ldr	r3, [pc, #168]	; (8017d64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 8017cba:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 8017cbe:	781b      	ldrb	r3, [r3, #0]
 8017cc0:	2b01      	cmp	r3, #1
 8017cc2:	f000 809c 	beq.w	8017dfe <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8017cc6:	9b02      	ldr	r3, [sp, #8]
 8017cc8:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
 8017ccc:	f8b3 b000 	ldrh.w	fp, [r3]
 8017cd0:	f10b 0b01 	add.w	fp, fp, #1
 8017cd4:	fa1f fb8b 	uxth.w	fp, fp
 8017cd8:	2a00      	cmp	r2, #0
 8017cda:	d0bc      	beq.n	8017c56 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8017cdc:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
 8017ce0:	4659      	mov	r1, fp
 8017ce2:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 8017ce6:	f04f 0800 	mov.w	r8, #0
 8017cea:	441d      	add	r5, r3
 8017cec:	b22d      	sxth	r5, r5
 8017cee:	b28b      	uxth	r3, r1
 8017cf0:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8017cf4:	429a      	cmp	r2, r3
 8017cf6:	f240 80c0 	bls.w	8017e7a <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 8017cfa:	4427      	add	r7, r4
 8017cfc:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 8017d00:	4608      	mov	r0, r1
 8017d02:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8017d06:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
 8017d0a:	4563      	cmp	r3, ip
 8017d0c:	f340 80a2 	ble.w	8017e54 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 8017d10:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
 8017d14:	4465      	add	r5, ip
 8017d16:	b22d      	sxth	r5, r5
 8017d18:	429d      	cmp	r5, r3
 8017d1a:	bfa8      	it	ge
 8017d1c:	461d      	movge	r5, r3
 8017d1e:	3101      	adds	r1, #1
 8017d20:	4680      	mov	r8, r0
 8017d22:	e7e4      	b.n	8017cee <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 8017d24:	d10b      	bne.n	8017d3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 8017d26:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
 8017d2a:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
 8017d2e:	458c      	cmp	ip, r1
 8017d30:	bfb4      	ite	lt
 8017d32:	469c      	movlt	ip, r3
 8017d34:	46bc      	movge	ip, r7
 8017d36:	4572      	cmp	r2, lr
 8017d38:	bfb8      	it	lt
 8017d3a:	4672      	movlt	r2, lr
 8017d3c:	e087      	b.n	8017e4e <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8017d3e:	428a      	cmp	r2, r1
 8017d40:	46bc      	mov	ip, r7
 8017d42:	bfb8      	it	lt
 8017d44:	460a      	movlt	r2, r1
 8017d46:	e082      	b.n	8017e4e <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8017d48:	2400eb10 	.word	0x2400eb10
 8017d4c:	2400eb1c 	.word	0x2400eb1c
 8017d50:	2400005c 	.word	0x2400005c
 8017d54:	2400ead0 	.word	0x2400ead0
 8017d58:	2400eac6 	.word	0x2400eac6
 8017d5c:	2400eac4 	.word	0x2400eac4
 8017d60:	2400eace 	.word	0x2400eace
 8017d64:	2400eac8 	.word	0x2400eac8
 8017d68:	1961      	adds	r1, r4, r5
 8017d6a:	ab07      	add	r3, sp, #28
 8017d6c:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8017d70:	6849      	ldr	r1, [r1, #4]
 8017d72:	c303      	stmia	r3!, {r0, r1}
 8017d74:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8017d78:	a807      	add	r0, sp, #28
 8017d7a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8017d7e:	2b13      	cmp	r3, #19
 8017d80:	440b      	add	r3, r1
 8017d82:	bfd8      	it	le
 8017d84:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8017d88:	1a9b      	subs	r3, r3, r2
 8017d8a:	f8ad 201c 	strh.w	r2, [sp, #28]
 8017d8e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017d92:	f7ff f897 	bl	8016ec4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017d96:	a807      	add	r0, sp, #28
 8017d98:	f7f9 fb1f 	bl	80113da <_ZNK8touchgfx4Rect7isEmptyEv>
 8017d9c:	bb78      	cbnz	r0, 8017dfe <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8017d9e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8017da2:	4425      	add	r5, r4
 8017da4:	f8d8 0000 	ldr.w	r0, [r8]
 8017da8:	f1bc 0f14 	cmp.w	ip, #20
 8017dac:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8017db0:	f8d0 e000 	ldr.w	lr, [r0]
 8017db4:	bfa8      	it	ge
 8017db6:	f04f 0c14 	movge.w	ip, #20
 8017dba:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8017dbe:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8017dc2:	fa1f fc8c 	uxth.w	ip, ip
 8017dc6:	f8cd c000 	str.w	ip, [sp]
 8017dca:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 8017dce:	47d0      	blx	sl
 8017dd0:	4682      	mov	sl, r0
 8017dd2:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8017dd6:	a807      	add	r0, sp, #28
 8017dd8:	f7ff f85a 	bl	8016e90 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8017ddc:	6823      	ldr	r3, [r4, #0]
 8017dde:	4620      	mov	r0, r4
 8017de0:	a907      	add	r1, sp, #28
 8017de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017de4:	4798      	blx	r3
 8017de6:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
 8017dea:	eba0 000a 	sub.w	r0, r0, sl
 8017dee:	b200      	sxth	r0, r0
 8017df0:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 8017df4:	b918      	cbnz	r0, 8017dfe <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8017df6:	b2b9      	uxth	r1, r7
 8017df8:	4648      	mov	r0, r9
 8017dfa:	f7ff faad 	bl	8017358 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017dfe:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 8017e02:	f1bb 0f00 	cmp.w	fp, #0
 8017e06:	f43f af26 	beq.w	8017c56 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8017e0a:	9b02      	ldr	r3, [sp, #8]
 8017e0c:	2700      	movs	r7, #0
 8017e0e:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 8017e12:	881b      	ldrh	r3, [r3, #0]
 8017e14:	3301      	adds	r3, #1
 8017e16:	b29b      	uxth	r3, r3
 8017e18:	b299      	uxth	r1, r3
 8017e1a:	00fd      	lsls	r5, r7, #3
 8017e1c:	458b      	cmp	fp, r1
 8017e1e:	d9a3      	bls.n	8017d68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 8017e20:	4425      	add	r5, r4
 8017e22:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8017e26:	469c      	mov	ip, r3
 8017e28:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
 8017e2c:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8017e30:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
 8017e34:	4408      	add	r0, r1
 8017e36:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
 8017e3a:	4471      	add	r1, lr
 8017e3c:	b200      	sxth	r0, r0
 8017e3e:	b209      	sxth	r1, r1
 8017e40:	4288      	cmp	r0, r1
 8017e42:	f6bf af6f 	bge.w	8017d24 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 8017e46:	4586      	cmp	lr, r0
 8017e48:	4672      	mov	r2, lr
 8017e4a:	bfb8      	it	lt
 8017e4c:	4602      	movlt	r2, r0
 8017e4e:	3301      	adds	r3, #1
 8017e50:	4667      	mov	r7, ip
 8017e52:	e7e1      	b.n	8017e18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 8017e54:	d10c      	bne.n	8017e70 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 8017e56:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 8017e5a:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 8017e5e:	4287      	cmp	r7, r0
 8017e60:	bfb4      	ite	lt
 8017e62:	4608      	movlt	r0, r1
 8017e64:	4640      	movge	r0, r8
 8017e66:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
 8017e6a:	443b      	add	r3, r7
 8017e6c:	b21b      	sxth	r3, r3
 8017e6e:	e753      	b.n	8017d18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8017e70:	4565      	cmp	r5, ip
 8017e72:	4640      	mov	r0, r8
 8017e74:	bfa8      	it	ge
 8017e76:	4665      	movge	r5, ip
 8017e78:	e751      	b.n	8017d1e <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 8017e7a:	eb09 0007 	add.w	r0, r9, r7
 8017e7e:	4427      	add	r7, r4
 8017e80:	9203      	str	r2, [sp, #12]
 8017e82:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
 8017e86:	f1ba 0f13 	cmp.w	sl, #19
 8017e8a:	bfde      	ittt	le
 8017e8c:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
 8017e90:	4455      	addle	r5, sl
 8017e92:	b22d      	sxthle	r5, r5
 8017e94:	f7f9 faa1 	bl	80113da <_ZNK8touchgfx4Rect7isEmptyEv>
 8017e98:	9a03      	ldr	r2, [sp, #12]
 8017e9a:	2800      	cmp	r0, #0
 8017e9c:	f47f af1c 	bne.w	8017cd8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 8017ea0:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8017ea4:	fa1f fa8a 	uxth.w	sl, sl
 8017ea8:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8017eac:	1aad      	subs	r5, r5, r2
 8017eae:	4829      	ldr	r0, [pc, #164]	; (8017f54 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 8017eb0:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 8017eb4:	2d14      	cmp	r5, #20
 8017eb6:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8017eba:	6800      	ldr	r0, [r0, #0]
 8017ebc:	bfa8      	it	ge
 8017ebe:	2514      	movge	r5, #20
 8017ec0:	f8ad 101c 	strh.w	r1, [sp, #28]
 8017ec4:	f8ad 201e 	strh.w	r2, [sp, #30]
 8017ec8:	b289      	uxth	r1, r1
 8017eca:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017ece:	b2ad      	uxth	r5, r5
 8017ed0:	f8d0 c000 	ldr.w	ip, [r0]
 8017ed4:	b292      	uxth	r2, r2
 8017ed6:	4555      	cmp	r5, sl
 8017ed8:	bf94      	ite	ls
 8017eda:	9500      	strls	r5, [sp, #0]
 8017edc:	f8cd a000 	strhi.w	sl, [sp]
 8017ee0:	b29b      	uxth	r3, r3
 8017ee2:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 8017ee6:	47a8      	blx	r5
 8017ee8:	6823      	ldr	r3, [r4, #0]
 8017eea:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8017eee:	a907      	add	r1, sp, #28
 8017ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ef2:	4620      	mov	r0, r4
 8017ef4:	4798      	blx	r3
 8017ef6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8017efa:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8017efe:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8017f02:	1a5b      	subs	r3, r3, r1
 8017f04:	440a      	add	r2, r1
 8017f06:	b21b      	sxth	r3, r3
 8017f08:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 8017f0c:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	f47f aed8 	bne.w	8017cc6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8017f16:	fa1f f188 	uxth.w	r1, r8
 8017f1a:	4648      	mov	r0, r9
 8017f1c:	f7ff fa1c 	bl	8017358 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017f20:	e6d1      	b.n	8017cc6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8017f22:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8017f26:	42ab      	cmp	r3, r5
 8017f28:	f67f ae95 	bls.w	8017c56 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8017f2c:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8017f30:	ab07      	add	r3, sp, #28
 8017f32:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8017f36:	6851      	ldr	r1, [r2, #4]
 8017f38:	c303      	stmia	r3!, {r0, r1}
 8017f3a:	a807      	add	r0, sp, #28
 8017f3c:	f7f9 fa4d 	bl	80113da <_ZNK8touchgfx4Rect7isEmptyEv>
 8017f40:	b920      	cbnz	r0, 8017f4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 8017f42:	6823      	ldr	r3, [r4, #0]
 8017f44:	a907      	add	r1, sp, #28
 8017f46:	4620      	mov	r0, r4
 8017f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f4a:	4798      	blx	r3
 8017f4c:	3501      	adds	r5, #1
 8017f4e:	b2ad      	uxth	r5, r5
 8017f50:	e7e7      	b.n	8017f22 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 8017f52:	bf00      	nop
 8017f54:	2400ead0 	.word	0x2400ead0

08017f58 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8017f58:	4b03      	ldr	r3, [pc, #12]	; (8017f68 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8017f5a:	2200      	movs	r2, #0
 8017f5c:	801a      	strh	r2, [r3, #0]
 8017f5e:	805a      	strh	r2, [r3, #2]
 8017f60:	809a      	strh	r2, [r3, #4]
 8017f62:	80da      	strh	r2, [r3, #6]
 8017f64:	4770      	bx	lr
 8017f66:	bf00      	nop
 8017f68:	2400eb1c 	.word	0x2400eb1c

08017f6c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8017f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f70:	b09d      	sub	sp, #116	; 0x74
 8017f72:	4606      	mov	r6, r0
 8017f74:	4614      	mov	r4, r2
 8017f76:	468a      	mov	sl, r1
 8017f78:	a803      	add	r0, sp, #12
 8017f7a:	461d      	mov	r5, r3
 8017f7c:	f000 fe44 	bl	8018c08 <_ZN8touchgfx12TextProviderC1Ev>
 8017f80:	6833      	ldr	r3, [r6, #0]
 8017f82:	4630      	mov	r0, r6
 8017f84:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8017f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017f8a:	4798      	blx	r3
 8017f8c:	6833      	ldr	r3, [r6, #0]
 8017f8e:	4607      	mov	r7, r0
 8017f90:	4630      	mov	r0, r6
 8017f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017f94:	4798      	blx	r3
 8017f96:	462a      	mov	r2, r5
 8017f98:	2500      	movs	r5, #0
 8017f9a:	4621      	mov	r1, r4
 8017f9c:	9000      	str	r0, [sp, #0]
 8017f9e:	463b      	mov	r3, r7
 8017fa0:	462c      	mov	r4, r5
 8017fa2:	46a9      	mov	r9, r5
 8017fa4:	46a8      	mov	r8, r5
 8017fa6:	a803      	add	r0, sp, #12
 8017fa8:	f000 fe89 	bl	8018cbe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017fac:	2300      	movs	r3, #0
 8017fae:	9302      	str	r3, [sp, #8]
 8017fb0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017fb4:	429c      	cmp	r4, r3
 8017fb6:	d002      	beq.n	8017fbe <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8017fb8:	455c      	cmp	r4, fp
 8017fba:	bf18      	it	ne
 8017fbc:	4625      	movne	r5, r4
 8017fbe:	ab02      	add	r3, sp, #8
 8017fc0:	4632      	mov	r2, r6
 8017fc2:	4651      	mov	r1, sl
 8017fc4:	a803      	add	r0, sp, #12
 8017fc6:	f001 f97f 	bl	80192c8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017fca:	4604      	mov	r4, r0
 8017fcc:	b108      	cbz	r0, 8017fd2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8017fce:	280a      	cmp	r0, #10
 8017fd0:	d10a      	bne.n	8017fe8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8017fd2:	45c1      	cmp	r9, r8
 8017fd4:	bf38      	it	cc
 8017fd6:	46c1      	movcc	r9, r8
 8017fd8:	f04f 0800 	mov.w	r8, #0
 8017fdc:	2c00      	cmp	r4, #0
 8017fde:	d1e5      	bne.n	8017fac <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8017fe0:	4648      	mov	r0, r9
 8017fe2:	b01d      	add	sp, #116	; 0x74
 8017fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fe8:	9a02      	ldr	r2, [sp, #8]
 8017fea:	2a00      	cmp	r2, #0
 8017fec:	d0de      	beq.n	8017fac <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8017fee:	7b57      	ldrb	r7, [r2, #13]
 8017ff0:	4629      	mov	r1, r5
 8017ff2:	6833      	ldr	r3, [r6, #0]
 8017ff4:	007f      	lsls	r7, r7, #1
 8017ff6:	8894      	ldrh	r4, [r2, #4]
 8017ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017ffa:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8017ffe:	7a97      	ldrb	r7, [r2, #10]
 8018000:	4307      	orrs	r7, r0
 8018002:	4630      	mov	r0, r6
 8018004:	4798      	blx	r3
 8018006:	4438      	add	r0, r7
 8018008:	4480      	add	r8, r0
 801800a:	fa1f f888 	uxth.w	r8, r8
 801800e:	e7e5      	b.n	8017fdc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08018010 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8018010:	b508      	push	{r3, lr}
 8018012:	6803      	ldr	r3, [r0, #0]
 8018014:	68db      	ldr	r3, [r3, #12]
 8018016:	4798      	blx	r3
 8018018:	b128      	cbz	r0, 8018026 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801801a:	7b43      	ldrb	r3, [r0, #13]
 801801c:	7a80      	ldrb	r0, [r0, #10]
 801801e:	005b      	lsls	r3, r3, #1
 8018020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018024:	4318      	orrs	r0, r3
 8018026:	bd08      	pop	{r3, pc}

08018028 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8018028:	b40e      	push	{r1, r2, r3}
 801802a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801802c:	b09e      	sub	sp, #120	; 0x78
 801802e:	4605      	mov	r5, r0
 8018030:	ab23      	add	r3, sp, #140	; 0x8c
 8018032:	a805      	add	r0, sp, #20
 8018034:	f853 4b04 	ldr.w	r4, [r3], #4
 8018038:	9303      	str	r3, [sp, #12]
 801803a:	f000 fde5 	bl	8018c08 <_ZN8touchgfx12TextProviderC1Ev>
 801803e:	682b      	ldr	r3, [r5, #0]
 8018040:	4628      	mov	r0, r5
 8018042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018044:	4798      	blx	r3
 8018046:	682b      	ldr	r3, [r5, #0]
 8018048:	4606      	mov	r6, r0
 801804a:	4628      	mov	r0, r5
 801804c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801804e:	4798      	blx	r3
 8018050:	4633      	mov	r3, r6
 8018052:	4621      	mov	r1, r4
 8018054:	ae1e      	add	r6, sp, #120	; 0x78
 8018056:	2400      	movs	r4, #0
 8018058:	9000      	str	r0, [sp, #0]
 801805a:	9a03      	ldr	r2, [sp, #12]
 801805c:	a805      	add	r0, sp, #20
 801805e:	f000 fe2e 	bl	8018cbe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018062:	f846 4d68 	str.w	r4, [r6, #-104]!
 8018066:	462a      	mov	r2, r5
 8018068:	4633      	mov	r3, r6
 801806a:	4621      	mov	r1, r4
 801806c:	a805      	add	r0, sp, #20
 801806e:	f001 f92b 	bl	80192c8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018072:	b300      	cbz	r0, 80180b6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8018074:	280a      	cmp	r0, #10
 8018076:	d01a      	beq.n	80180ae <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8018078:	9f04      	ldr	r7, [sp, #16]
 801807a:	b1c7      	cbz	r7, 80180ae <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801807c:	7b78      	ldrb	r0, [r7, #13]
 801807e:	7a3b      	ldrb	r3, [r7, #8]
 8018080:	00c1      	lsls	r1, r0, #3
 8018082:	88ea      	ldrh	r2, [r5, #6]
 8018084:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018088:	4319      	orrs	r1, r3
 801808a:	0643      	lsls	r3, r0, #25
 801808c:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8018090:	bf48      	it	mi
 8018092:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8018096:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801809a:	bf48      	it	mi
 801809c:	b219      	sxthmi	r1, r3
 801809e:	79fb      	ldrb	r3, [r7, #7]
 80180a0:	4303      	orrs	r3, r0
 80180a2:	4413      	add	r3, r2
 80180a4:	1a5b      	subs	r3, r3, r1
 80180a6:	b21b      	sxth	r3, r3
 80180a8:	429c      	cmp	r4, r3
 80180aa:	bfb8      	it	lt
 80180ac:	461c      	movlt	r4, r3
 80180ae:	4633      	mov	r3, r6
 80180b0:	462a      	mov	r2, r5
 80180b2:	2100      	movs	r1, #0
 80180b4:	e7da      	b.n	801806c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 80180b6:	b2a0      	uxth	r0, r4
 80180b8:	b01e      	add	sp, #120	; 0x78
 80180ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80180be:	b003      	add	sp, #12
 80180c0:	4770      	bx	lr

080180c2 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 80180c2:	7a43      	ldrb	r3, [r0, #9]
 80180c4:	8880      	ldrh	r0, [r0, #4]
 80180c6:	4418      	add	r0, r3
 80180c8:	b280      	uxth	r0, r0
 80180ca:	4770      	bx	lr

080180cc <_ZNK8touchgfx4Font13getFontHeightEv>:
 80180cc:	6803      	ldr	r3, [r0, #0]
 80180ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80180d0:	4718      	bx	r3

080180d2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80180d2:	b40e      	push	{r1, r2, r3}
 80180d4:	b570      	push	{r4, r5, r6, lr}
 80180d6:	b09d      	sub	sp, #116	; 0x74
 80180d8:	4604      	mov	r4, r0
 80180da:	ab21      	add	r3, sp, #132	; 0x84
 80180dc:	a803      	add	r0, sp, #12
 80180de:	f853 5b04 	ldr.w	r5, [r3], #4
 80180e2:	9302      	str	r3, [sp, #8]
 80180e4:	f000 fd90 	bl	8018c08 <_ZN8touchgfx12TextProviderC1Ev>
 80180e8:	6823      	ldr	r3, [r4, #0]
 80180ea:	4620      	mov	r0, r4
 80180ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80180ee:	4798      	blx	r3
 80180f0:	6823      	ldr	r3, [r4, #0]
 80180f2:	4606      	mov	r6, r0
 80180f4:	4620      	mov	r0, r4
 80180f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80180f8:	2401      	movs	r4, #1
 80180fa:	4798      	blx	r3
 80180fc:	4633      	mov	r3, r6
 80180fe:	9000      	str	r0, [sp, #0]
 8018100:	4629      	mov	r1, r5
 8018102:	9a02      	ldr	r2, [sp, #8]
 8018104:	a803      	add	r0, sp, #12
 8018106:	f000 fdda 	bl	8018cbe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801810a:	a803      	add	r0, sp, #12
 801810c:	f001 f9a8 	bl	8019460 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018110:	b2a3      	uxth	r3, r4
 8018112:	b138      	cbz	r0, 8018124 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8018114:	280a      	cmp	r0, #10
 8018116:	a803      	add	r0, sp, #12
 8018118:	bf04      	itt	eq
 801811a:	3301      	addeq	r3, #1
 801811c:	b21c      	sxtheq	r4, r3
 801811e:	f001 f99f 	bl	8019460 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018122:	e7f5      	b.n	8018110 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8018124:	4618      	mov	r0, r3
 8018126:	b01d      	add	sp, #116	; 0x74
 8018128:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801812c:	b003      	add	sp, #12
 801812e:	4770      	bx	lr

08018130 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8018130:	b40e      	push	{r1, r2, r3}
 8018132:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018134:	b09e      	sub	sp, #120	; 0x78
 8018136:	4604      	mov	r4, r0
 8018138:	ab23      	add	r3, sp, #140	; 0x8c
 801813a:	a805      	add	r0, sp, #20
 801813c:	f853 5b04 	ldr.w	r5, [r3], #4
 8018140:	9303      	str	r3, [sp, #12]
 8018142:	f000 fd61 	bl	8018c08 <_ZN8touchgfx12TextProviderC1Ev>
 8018146:	6823      	ldr	r3, [r4, #0]
 8018148:	4620      	mov	r0, r4
 801814a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801814c:	4798      	blx	r3
 801814e:	6823      	ldr	r3, [r4, #0]
 8018150:	4606      	mov	r6, r0
 8018152:	4620      	mov	r0, r4
 8018154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018156:	4798      	blx	r3
 8018158:	4633      	mov	r3, r6
 801815a:	4629      	mov	r1, r5
 801815c:	9000      	str	r0, [sp, #0]
 801815e:	9a03      	ldr	r2, [sp, #12]
 8018160:	a805      	add	r0, sp, #20
 8018162:	f000 fdac 	bl	8018cbe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018166:	ad1e      	add	r5, sp, #120	; 0x78
 8018168:	2100      	movs	r1, #0
 801816a:	f647 76ff 	movw	r6, #32767	; 0x7fff
 801816e:	4622      	mov	r2, r4
 8018170:	a805      	add	r0, sp, #20
 8018172:	f845 1d68 	str.w	r1, [r5, #-104]!
 8018176:	462b      	mov	r3, r5
 8018178:	f001 f8a6 	bl	80192c8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801817c:	b1d8      	cbz	r0, 80181b6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801817e:	280a      	cmp	r0, #10
 8018180:	d012      	beq.n	80181a8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8018182:	9804      	ldr	r0, [sp, #16]
 8018184:	b180      	cbz	r0, 80181a8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8018186:	7b47      	ldrb	r7, [r0, #13]
 8018188:	88e2      	ldrh	r2, [r4, #6]
 801818a:	00fb      	lsls	r3, r7, #3
 801818c:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8018190:	7a03      	ldrb	r3, [r0, #8]
 8018192:	430b      	orrs	r3, r1
 8018194:	0679      	lsls	r1, r7, #25
 8018196:	bf44      	itt	mi
 8018198:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801819c:	b21b      	sxthmi	r3, r3
 801819e:	1ad3      	subs	r3, r2, r3
 80181a0:	b21b      	sxth	r3, r3
 80181a2:	429e      	cmp	r6, r3
 80181a4:	bfa8      	it	ge
 80181a6:	461e      	movge	r6, r3
 80181a8:	462b      	mov	r3, r5
 80181aa:	4622      	mov	r2, r4
 80181ac:	2100      	movs	r1, #0
 80181ae:	a805      	add	r0, sp, #20
 80181b0:	f001 f88a 	bl	80192c8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80181b4:	e7e2      	b.n	801817c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 80181b6:	4630      	mov	r0, r6
 80181b8:	b01e      	add	sp, #120	; 0x78
 80181ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80181be:	b003      	add	sp, #12
 80181c0:	4770      	bx	lr

080181c2 <_ZNK8touchgfx8Drawable10invalidateEv>:
 80181c2:	b513      	push	{r0, r1, r4, lr}
 80181c4:	6803      	ldr	r3, [r0, #0]
 80181c6:	2400      	movs	r4, #0
 80181c8:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80181cc:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80181d0:	f8ad 1004 	strh.w	r1, [sp, #4]
 80181d4:	4669      	mov	r1, sp
 80181d6:	691b      	ldr	r3, [r3, #16]
 80181d8:	9400      	str	r4, [sp, #0]
 80181da:	f8ad 2006 	strh.w	r2, [sp, #6]
 80181de:	4798      	blx	r3
 80181e0:	b002      	add	sp, #8
 80181e2:	bd10      	pop	{r4, pc}

080181e4 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80181e4:	b538      	push	{r3, r4, r5, lr}
 80181e6:	680b      	ldr	r3, [r1, #0]
 80181e8:	460c      	mov	r4, r1
 80181ea:	4605      	mov	r5, r0
 80181ec:	68db      	ldr	r3, [r3, #12]
 80181ee:	4798      	blx	r3
 80181f0:	6823      	ldr	r3, [r4, #0]
 80181f2:	4620      	mov	r0, r4
 80181f4:	4629      	mov	r1, r5
 80181f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181f8:	4798      	blx	r3
 80181fa:	4628      	mov	r0, r5
 80181fc:	bd38      	pop	{r3, r4, r5, pc}

080181fe <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 80181fe:	b410      	push	{r4}
 8018200:	880a      	ldrh	r2, [r1, #0]
 8018202:	8884      	ldrh	r4, [r0, #4]
 8018204:	4422      	add	r2, r4
 8018206:	800a      	strh	r2, [r1, #0]
 8018208:	884a      	ldrh	r2, [r1, #2]
 801820a:	88c4      	ldrh	r4, [r0, #6]
 801820c:	4422      	add	r2, r4
 801820e:	804a      	strh	r2, [r1, #2]
 8018210:	6940      	ldr	r0, [r0, #20]
 8018212:	b120      	cbz	r0, 801821e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8018214:	6803      	ldr	r3, [r0, #0]
 8018216:	f85d 4b04 	ldr.w	r4, [sp], #4
 801821a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801821c:	4718      	bx	r3
 801821e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018222:	4770      	bx	lr

08018224 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8018224:	b570      	push	{r4, r5, r6, lr}
 8018226:	8882      	ldrh	r2, [r0, #4]
 8018228:	460c      	mov	r4, r1
 801822a:	880b      	ldrh	r3, [r1, #0]
 801822c:	4605      	mov	r5, r0
 801822e:	4413      	add	r3, r2
 8018230:	800b      	strh	r3, [r1, #0]
 8018232:	884b      	ldrh	r3, [r1, #2]
 8018234:	88c2      	ldrh	r2, [r0, #6]
 8018236:	4413      	add	r3, r2
 8018238:	804b      	strh	r3, [r1, #2]
 801823a:	1d01      	adds	r1, r0, #4
 801823c:	4620      	mov	r0, r4
 801823e:	f7f9 f889 	bl	8011354 <_ZN8touchgfx4RectaNERKS0_>
 8018242:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8018246:	2b00      	cmp	r3, #0
 8018248:	dd0b      	ble.n	8018262 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801824a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801824e:	2b00      	cmp	r3, #0
 8018250:	dd07      	ble.n	8018262 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8018252:	6968      	ldr	r0, [r5, #20]
 8018254:	b128      	cbz	r0, 8018262 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8018256:	6803      	ldr	r3, [r0, #0]
 8018258:	4621      	mov	r1, r4
 801825a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801825c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018260:	4718      	bx	r3
 8018262:	bd70      	pop	{r4, r5, r6, pc}

08018264 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8018264:	b570      	push	{r4, r5, r6, lr}
 8018266:	8882      	ldrh	r2, [r0, #4]
 8018268:	460c      	mov	r4, r1
 801826a:	880b      	ldrh	r3, [r1, #0]
 801826c:	4605      	mov	r5, r0
 801826e:	4413      	add	r3, r2
 8018270:	800b      	strh	r3, [r1, #0]
 8018272:	884b      	ldrh	r3, [r1, #2]
 8018274:	88c2      	ldrh	r2, [r0, #6]
 8018276:	4413      	add	r3, r2
 8018278:	804b      	strh	r3, [r1, #2]
 801827a:	1d01      	adds	r1, r0, #4
 801827c:	4620      	mov	r0, r4
 801827e:	f7f9 f869 	bl	8011354 <_ZN8touchgfx4RectaNERKS0_>
 8018282:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8018286:	2b00      	cmp	r3, #0
 8018288:	dd18      	ble.n	80182bc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801828a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801828e:	2b00      	cmp	r3, #0
 8018290:	dd14      	ble.n	80182bc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8018292:	6968      	ldr	r0, [r5, #20]
 8018294:	b128      	cbz	r0, 80182a2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8018296:	6803      	ldr	r3, [r0, #0]
 8018298:	4621      	mov	r1, r4
 801829a:	691b      	ldr	r3, [r3, #16]
 801829c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80182a0:	4718      	bx	r3
 80182a2:	4b07      	ldr	r3, [pc, #28]	; (80182c0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 80182a4:	681b      	ldr	r3, [r3, #0]
 80182a6:	3304      	adds	r3, #4
 80182a8:	429d      	cmp	r5, r3
 80182aa:	d107      	bne.n	80182bc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 80182ac:	f7fe ff44 	bl	8017138 <_ZN8touchgfx11Application11getInstanceEv>
 80182b0:	6821      	ldr	r1, [r4, #0]
 80182b2:	6862      	ldr	r2, [r4, #4]
 80182b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80182b8:	f7ff b862 	b.w	8017380 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80182bc:	bd70      	pop	{r4, r5, r6, pc}
 80182be:	bf00      	nop
 80182c0:	2400eb14 	.word	0x2400eb14

080182c4 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80182c4:	b570      	push	{r4, r5, r6, lr}
 80182c6:	4604      	mov	r4, r0
 80182c8:	4616      	mov	r6, r2
 80182ca:	460d      	mov	r5, r1
 80182cc:	b901      	cbnz	r1, 80182d0 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 80182ce:	b192      	cbz	r2, 80182f6 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 80182d0:	6823      	ldr	r3, [r4, #0]
 80182d2:	4620      	mov	r0, r4
 80182d4:	699b      	ldr	r3, [r3, #24]
 80182d6:	4798      	blx	r3
 80182d8:	88e2      	ldrh	r2, [r4, #6]
 80182da:	88a1      	ldrh	r1, [r4, #4]
 80182dc:	4620      	mov	r0, r4
 80182de:	4432      	add	r2, r6
 80182e0:	4429      	add	r1, r5
 80182e2:	b212      	sxth	r2, r2
 80182e4:	b209      	sxth	r1, r1
 80182e6:	f7eb f864 	bl	80033b2 <_ZN8touchgfx8Drawable5setXYEss>
 80182ea:	6823      	ldr	r3, [r4, #0]
 80182ec:	4620      	mov	r0, r4
 80182ee:	699b      	ldr	r3, [r3, #24]
 80182f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80182f4:	4718      	bx	r3
 80182f6:	bd70      	pop	{r4, r5, r6, pc}

080182f8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 80182f8:	b510      	push	{r4, lr}
 80182fa:	2300      	movs	r3, #0
 80182fc:	4604      	mov	r4, r0
 80182fe:	4608      	mov	r0, r1
 8018300:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8018304:	8023      	strh	r3, [r4, #0]
 8018306:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801830a:	8063      	strh	r3, [r4, #2]
 801830c:	6803      	ldr	r3, [r0, #0]
 801830e:	80a1      	strh	r1, [r4, #4]
 8018310:	4621      	mov	r1, r4
 8018312:	80e2      	strh	r2, [r4, #6]
 8018314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018316:	4798      	blx	r3
 8018318:	4620      	mov	r0, r4
 801831a:	bd10      	pop	{r4, pc}

0801831c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801831c:	b530      	push	{r4, r5, lr}
 801831e:	8083      	strh	r3, [r0, #4]
 8018320:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8018324:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8018328:	80c3      	strh	r3, [r0, #6]
 801832a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801832e:	6141      	str	r1, [r0, #20]
 8018330:	7203      	strb	r3, [r0, #8]
 8018332:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8018336:	8302      	strh	r2, [r0, #24]
 8018338:	7243      	strb	r3, [r0, #9]
 801833a:	7a83      	ldrb	r3, [r0, #10]
 801833c:	f365 0306 	bfi	r3, r5, #0, #7
 8018340:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8018344:	f365 13c7 	bfi	r3, r5, #7, #1
 8018348:	7283      	strb	r3, [r0, #10]
 801834a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801834e:	72c3      	strb	r3, [r0, #11]
 8018350:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8018354:	7303      	strb	r3, [r0, #12]
 8018356:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801835a:	81c3      	strh	r3, [r0, #14]
 801835c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8018360:	8203      	strh	r3, [r0, #16]
 8018362:	4b01      	ldr	r3, [pc, #4]	; (8018368 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8018364:	6003      	str	r3, [r0, #0]
 8018366:	bd30      	pop	{r4, r5, pc}
 8018368:	08026008 	.word	0x08026008

0801836c <_ZNK8touchgfx9ConstFont4findEt>:
 801836c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801836e:	6944      	ldr	r4, [r0, #20]
 8018370:	b3bc      	cbz	r4, 80183e2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018372:	88a3      	ldrh	r3, [r4, #4]
 8018374:	8b02      	ldrh	r2, [r0, #24]
 8018376:	1acb      	subs	r3, r1, r3
 8018378:	f102 32ff 	add.w	r2, r2, #4294967295
 801837c:	d431      	bmi.n	80183e2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801837e:	4293      	cmp	r3, r2
 8018380:	dd0c      	ble.n	801839c <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8018382:	230e      	movs	r3, #14
 8018384:	fb03 4302 	mla	r3, r3, r2, r4
 8018388:	889b      	ldrh	r3, [r3, #4]
 801838a:	1a5b      	subs	r3, r3, r1
 801838c:	1ad3      	subs	r3, r2, r3
 801838e:	429a      	cmp	r2, r3
 8018390:	db27      	blt.n	80183e2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018392:	2b00      	cmp	r3, #0
 8018394:	bfbc      	itt	lt
 8018396:	2302      	movlt	r3, #2
 8018398:	fb92 f3f3 	sdivlt	r3, r2, r3
 801839c:	2500      	movs	r5, #0
 801839e:	260e      	movs	r6, #14
 80183a0:	4295      	cmp	r5, r2
 80183a2:	dc1e      	bgt.n	80183e2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80183a4:	fb06 4003 	mla	r0, r6, r3, r4
 80183a8:	8887      	ldrh	r7, [r0, #4]
 80183aa:	42b9      	cmp	r1, r7
 80183ac:	d01a      	beq.n	80183e4 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 80183ae:	d20d      	bcs.n	80183cc <_ZNK8touchgfx9ConstFont4findEt+0x60>
 80183b0:	1e5a      	subs	r2, r3, #1
 80183b2:	4295      	cmp	r5, r2
 80183b4:	dc15      	bgt.n	80183e2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80183b6:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 80183ba:	1a5b      	subs	r3, r3, r1
 80183bc:	1ad3      	subs	r3, r2, r3
 80183be:	429a      	cmp	r2, r3
 80183c0:	db0f      	blt.n	80183e2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80183c2:	429d      	cmp	r5, r3
 80183c4:	ddec      	ble.n	80183a0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80183c6:	1953      	adds	r3, r2, r5
 80183c8:	105b      	asrs	r3, r3, #1
 80183ca:	e7e9      	b.n	80183a0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80183cc:	1c5d      	adds	r5, r3, #1
 80183ce:	42aa      	cmp	r2, r5
 80183d0:	db07      	blt.n	80183e2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80183d2:	8a43      	ldrh	r3, [r0, #18]
 80183d4:	1acb      	subs	r3, r1, r3
 80183d6:	442b      	add	r3, r5
 80183d8:	429d      	cmp	r5, r3
 80183da:	dc02      	bgt.n	80183e2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80183dc:	429a      	cmp	r2, r3
 80183de:	dadf      	bge.n	80183a0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80183e0:	e7f1      	b.n	80183c6 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 80183e2:	2000      	movs	r0, #0
 80183e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080183e6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80183e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183e8:	4604      	mov	r4, r0
 80183ea:	4617      	mov	r7, r2
 80183ec:	461e      	mov	r6, r3
 80183ee:	b911      	cbnz	r1, 80183f6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80183f0:	2500      	movs	r5, #0
 80183f2:	4628      	mov	r0, r5
 80183f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80183f6:	290a      	cmp	r1, #10
 80183f8:	d0fa      	beq.n	80183f0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80183fa:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80183fe:	4291      	cmp	r1, r2
 8018400:	d0f6      	beq.n	80183f0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018402:	f242 020b 	movw	r2, #8203	; 0x200b
 8018406:	4291      	cmp	r1, r2
 8018408:	d0f2      	beq.n	80183f0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801840a:	f7ff ffaf 	bl	801836c <_ZNK8touchgfx9ConstFont4findEt>
 801840e:	4605      	mov	r5, r0
 8018410:	b950      	cbnz	r0, 8018428 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8018412:	6823      	ldr	r3, [r4, #0]
 8018414:	4620      	mov	r0, r4
 8018416:	691b      	ldr	r3, [r3, #16]
 8018418:	4798      	blx	r3
 801841a:	4601      	mov	r1, r0
 801841c:	4620      	mov	r0, r4
 801841e:	f7ff ffa5 	bl	801836c <_ZNK8touchgfx9ConstFont4findEt>
 8018422:	4605      	mov	r5, r0
 8018424:	2800      	cmp	r0, #0
 8018426:	d0e3      	beq.n	80183f0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018428:	6823      	ldr	r3, [r4, #0]
 801842a:	4629      	mov	r1, r5
 801842c:	4620      	mov	r0, r4
 801842e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018430:	4798      	blx	r3
 8018432:	6038      	str	r0, [r7, #0]
 8018434:	6823      	ldr	r3, [r4, #0]
 8018436:	4620      	mov	r0, r4
 8018438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801843a:	4798      	blx	r3
 801843c:	7030      	strb	r0, [r6, #0]
 801843e:	e7d8      	b.n	80183f2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08018440 <_ZN8touchgfx4clzuEm>:
 8018440:	4603      	mov	r3, r0
 8018442:	b1c8      	cbz	r0, 8018478 <_ZN8touchgfx4clzuEm+0x38>
 8018444:	0c02      	lsrs	r2, r0, #16
 8018446:	0412      	lsls	r2, r2, #16
 8018448:	b9a2      	cbnz	r2, 8018474 <_ZN8touchgfx4clzuEm+0x34>
 801844a:	0403      	lsls	r3, r0, #16
 801844c:	2010      	movs	r0, #16
 801844e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018452:	bf04      	itt	eq
 8018454:	021b      	lsleq	r3, r3, #8
 8018456:	3008      	addeq	r0, #8
 8018458:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801845c:	bf04      	itt	eq
 801845e:	011b      	lsleq	r3, r3, #4
 8018460:	3004      	addeq	r0, #4
 8018462:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018466:	bf04      	itt	eq
 8018468:	009b      	lsleq	r3, r3, #2
 801846a:	3002      	addeq	r0, #2
 801846c:	2b00      	cmp	r3, #0
 801846e:	db04      	blt.n	801847a <_ZN8touchgfx4clzuEm+0x3a>
 8018470:	3001      	adds	r0, #1
 8018472:	4770      	bx	lr
 8018474:	2000      	movs	r0, #0
 8018476:	e7ea      	b.n	801844e <_ZN8touchgfx4clzuEm+0xe>
 8018478:	2020      	movs	r0, #32
 801847a:	4770      	bx	lr

0801847c <_ZN8touchgfx7muldivuEmmmRm>:
 801847c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018480:	4680      	mov	r8, r0
 8018482:	460f      	mov	r7, r1
 8018484:	4615      	mov	r5, r2
 8018486:	461e      	mov	r6, r3
 8018488:	f7ff ffda 	bl	8018440 <_ZN8touchgfx4clzuEm>
 801848c:	b998      	cbnz	r0, 80184b6 <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 801848e:	4608      	mov	r0, r1
 8018490:	f7ff ffd6 	bl	8018440 <_ZN8touchgfx4clzuEm>
 8018494:	2800      	cmp	r0, #0
 8018496:	dd08      	ble.n	80184aa <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 8018498:	4633      	mov	r3, r6
 801849a:	462a      	mov	r2, r5
 801849c:	4641      	mov	r1, r8
 801849e:	4638      	mov	r0, r7
 80184a0:	f7ff ffec 	bl	801847c <_ZN8touchgfx7muldivuEmmmRm>
 80184a4:	b003      	add	sp, #12
 80184a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184aa:	f04f 33ff 	mov.w	r3, #4294967295
 80184ae:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80184b2:	6033      	str	r3, [r6, #0]
 80184b4:	e7f6      	b.n	80184a4 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 80184b6:	fa31 f900 	lsrs.w	r9, r1, r0
 80184ba:	fb01 f308 	mul.w	r3, r1, r8
 80184be:	d105      	bne.n	80184cc <_ZN8touchgfx7muldivuEmmmRm+0x50>
 80184c0:	fbb3 f0f5 	udiv	r0, r3, r5
 80184c4:	fb05 3510 	mls	r5, r5, r0, r3
 80184c8:	6035      	str	r5, [r6, #0]
 80184ca:	e7eb      	b.n	80184a4 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 80184cc:	2301      	movs	r3, #1
 80184ce:	fa08 fb00 	lsl.w	fp, r8, r0
 80184d2:	462a      	mov	r2, r5
 80184d4:	4641      	mov	r1, r8
 80184d6:	fa03 f000 	lsl.w	r0, r3, r0
 80184da:	4633      	mov	r3, r6
 80184dc:	fbbb faf5 	udiv	sl, fp, r5
 80184e0:	3801      	subs	r0, #1
 80184e2:	fb09 f40a 	mul.w	r4, r9, sl
 80184e6:	4038      	ands	r0, r7
 80184e8:	f7ff ffc8 	bl	801847c <_ZN8touchgfx7muldivuEmmmRm>
 80184ec:	462a      	mov	r2, r5
 80184ee:	4607      	mov	r7, r0
 80184f0:	ab01      	add	r3, sp, #4
 80184f2:	fb05 b11a 	mls	r1, r5, sl, fp
 80184f6:	4648      	mov	r0, r9
 80184f8:	f7ff ffc0 	bl	801847c <_ZN8touchgfx7muldivuEmmmRm>
 80184fc:	9b01      	ldr	r3, [sp, #4]
 80184fe:	6832      	ldr	r2, [r6, #0]
 8018500:	441a      	add	r2, r3
 8018502:	fbb2 f3f5 	udiv	r3, r2, r5
 8018506:	441c      	add	r4, r3
 8018508:	fb05 2513 	mls	r5, r5, r3, r2
 801850c:	443c      	add	r4, r7
 801850e:	4420      	add	r0, r4
 8018510:	e7da      	b.n	80184c8 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

08018512 <_ZN8touchgfx6muldivElllRl>:
 8018512:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018514:	2800      	cmp	r0, #0
 8018516:	461e      	mov	r6, r3
 8018518:	bfba      	itte	lt
 801851a:	4240      	neglt	r0, r0
 801851c:	f04f 34ff 	movlt.w	r4, #4294967295
 8018520:	2401      	movge	r4, #1
 8018522:	2900      	cmp	r1, #0
 8018524:	bfbc      	itt	lt
 8018526:	4249      	neglt	r1, r1
 8018528:	4264      	neglt	r4, r4
 801852a:	2a00      	cmp	r2, #0
 801852c:	bfb6      	itet	lt
 801852e:	4265      	neglt	r5, r4
 8018530:	4625      	movge	r5, r4
 8018532:	4252      	neglt	r2, r2
 8018534:	4288      	cmp	r0, r1
 8018536:	bfc2      	ittt	gt
 8018538:	4603      	movgt	r3, r0
 801853a:	4608      	movgt	r0, r1
 801853c:	4619      	movgt	r1, r3
 801853e:	ab01      	add	r3, sp, #4
 8018540:	f7ff ff9c 	bl	801847c <_ZN8touchgfx7muldivuEmmmRm>
 8018544:	9b01      	ldr	r3, [sp, #4]
 8018546:	4368      	muls	r0, r5
 8018548:	435c      	muls	r4, r3
 801854a:	6034      	str	r4, [r6, #0]
 801854c:	b002      	add	sp, #8
 801854e:	bd70      	pop	{r4, r5, r6, pc}

08018550 <_ZN8touchgfx6muldivElll>:
 8018550:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018552:	4606      	mov	r6, r0
 8018554:	ab01      	add	r3, sp, #4
 8018556:	460d      	mov	r5, r1
 8018558:	4614      	mov	r4, r2
 801855a:	f7ff ffda 	bl	8018512 <_ZN8touchgfx6muldivElllRl>
 801855e:	2e00      	cmp	r6, #0
 8018560:	db20      	blt.n	80185a4 <_ZN8touchgfx6muldivElll+0x54>
 8018562:	bf14      	ite	ne
 8018564:	2301      	movne	r3, #1
 8018566:	2300      	moveq	r3, #0
 8018568:	2d00      	cmp	r5, #0
 801856a:	db1e      	blt.n	80185aa <_ZN8touchgfx6muldivElll+0x5a>
 801856c:	bf14      	ite	ne
 801856e:	2201      	movne	r2, #1
 8018570:	2200      	moveq	r2, #0
 8018572:	2c00      	cmp	r4, #0
 8018574:	fb03 f202 	mul.w	r2, r3, r2
 8018578:	db1a      	blt.n	80185b0 <_ZN8touchgfx6muldivElll+0x60>
 801857a:	bf14      	ite	ne
 801857c:	2301      	movne	r3, #1
 801857e:	2300      	moveq	r3, #0
 8018580:	4353      	muls	r3, r2
 8018582:	2b01      	cmp	r3, #1
 8018584:	d117      	bne.n	80185b6 <_ZN8touchgfx6muldivElll+0x66>
 8018586:	2c00      	cmp	r4, #0
 8018588:	9b01      	ldr	r3, [sp, #4]
 801858a:	bfb8      	it	lt
 801858c:	4264      	neglt	r4, r4
 801858e:	2b00      	cmp	r3, #0
 8018590:	f104 0401 	add.w	r4, r4, #1
 8018594:	bfb8      	it	lt
 8018596:	425b      	neglt	r3, r3
 8018598:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801859c:	db00      	blt.n	80185a0 <_ZN8touchgfx6muldivElll+0x50>
 801859e:	3001      	adds	r0, #1
 80185a0:	b002      	add	sp, #8
 80185a2:	bd70      	pop	{r4, r5, r6, pc}
 80185a4:	f04f 33ff 	mov.w	r3, #4294967295
 80185a8:	e7de      	b.n	8018568 <_ZN8touchgfx6muldivElll+0x18>
 80185aa:	f04f 32ff 	mov.w	r2, #4294967295
 80185ae:	e7e0      	b.n	8018572 <_ZN8touchgfx6muldivElll+0x22>
 80185b0:	f04f 33ff 	mov.w	r3, #4294967295
 80185b4:	e7e4      	b.n	8018580 <_ZN8touchgfx6muldivElll+0x30>
 80185b6:	3301      	adds	r3, #1
 80185b8:	d1f2      	bne.n	80185a0 <_ZN8touchgfx6muldivElll+0x50>
 80185ba:	9b01      	ldr	r3, [sp, #4]
 80185bc:	2c00      	cmp	r4, #0
 80185be:	bfb8      	it	lt
 80185c0:	4264      	neglt	r4, r4
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	bfb8      	it	lt
 80185c6:	425b      	neglt	r3, r3
 80185c8:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 80185cc:	bfc8      	it	gt
 80185ce:	f100 30ff 	addgt.w	r0, r0, #4294967295
 80185d2:	e7e5      	b.n	80185a0 <_ZN8touchgfx6muldivElll+0x50>

080185d4 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 80185d4:	2000      	movs	r0, #0
 80185d6:	4770      	bx	lr

080185d8 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 80185d8:	2001      	movs	r0, #1
 80185da:	4770      	bx	lr

080185dc <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 80185dc:	2002      	movs	r0, #2
 80185de:	4770      	bx	lr

080185e0 <_ZN8touchgfx6ScreenD1Ev>:
 80185e0:	4770      	bx	lr

080185e2 <_ZN8touchgfx12GestureEventD1Ev>:
 80185e2:	4770      	bx	lr

080185e4 <_ZN8touchgfx9DragEventD1Ev>:
 80185e4:	4770      	bx	lr

080185e6 <_ZN8touchgfx10ClickEventD1Ev>:
 80185e6:	4770      	bx	lr

080185e8 <_ZN8touchgfx10ClickEventD0Ev>:
 80185e8:	b510      	push	{r4, lr}
 80185ea:	4604      	mov	r4, r0
 80185ec:	210c      	movs	r1, #12
 80185ee:	f00a fb4a 	bl	8022c86 <_ZdlPvj>
 80185f2:	4620      	mov	r0, r4
 80185f4:	bd10      	pop	{r4, pc}

080185f6 <_ZN8touchgfx9DragEventD0Ev>:
 80185f6:	b510      	push	{r4, lr}
 80185f8:	4604      	mov	r4, r0
 80185fa:	2110      	movs	r1, #16
 80185fc:	f00a fb43 	bl	8022c86 <_ZdlPvj>
 8018600:	4620      	mov	r0, r4
 8018602:	bd10      	pop	{r4, pc}

08018604 <_ZN8touchgfx12GestureEventD0Ev>:
 8018604:	b510      	push	{r4, lr}
 8018606:	4604      	mov	r4, r0
 8018608:	210c      	movs	r1, #12
 801860a:	f00a fb3c 	bl	8022c86 <_ZdlPvj>
 801860e:	4620      	mov	r0, r4
 8018610:	bd10      	pop	{r4, pc}

08018612 <_ZN8touchgfx6ScreenD0Ev>:
 8018612:	b510      	push	{r4, lr}
 8018614:	4604      	mov	r4, r0
 8018616:	213c      	movs	r1, #60	; 0x3c
 8018618:	f00a fb35 	bl	8022c86 <_ZdlPvj>
 801861c:	4620      	mov	r0, r4
 801861e:	bd10      	pop	{r4, pc}

08018620 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8018620:	b530      	push	{r4, r5, lr}
 8018622:	460d      	mov	r5, r1
 8018624:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8018626:	b087      	sub	sp, #28
 8018628:	4604      	mov	r4, r0
 801862a:	b301      	cbz	r1, 801866e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801862c:	a801      	add	r0, sp, #4
 801862e:	f7ff fe63 	bl	80182f8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018632:	892a      	ldrh	r2, [r5, #8]
 8018634:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018638:	7928      	ldrb	r0, [r5, #4]
 801863a:	1ad2      	subs	r2, r2, r3
 801863c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801863e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8018642:	441a      	add	r2, r3
 8018644:	896b      	ldrh	r3, [r5, #10]
 8018646:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801864a:	f88d 0010 	strb.w	r0, [sp, #16]
 801864e:	1b5b      	subs	r3, r3, r5
 8018650:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8018652:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8018654:	442b      	add	r3, r5
 8018656:	4d07      	ldr	r5, [pc, #28]	; (8018674 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8018658:	f8ad 1012 	strh.w	r1, [sp, #18]
 801865c:	a903      	add	r1, sp, #12
 801865e:	9503      	str	r5, [sp, #12]
 8018660:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018664:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018668:	6803      	ldr	r3, [r0, #0]
 801866a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801866c:	4798      	blx	r3
 801866e:	b007      	add	sp, #28
 8018670:	bd30      	pop	{r4, r5, pc}
 8018672:	bf00      	nop
 8018674:	08026090 	.word	0x08026090

08018678 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8018678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801867c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801867e:	b08a      	sub	sp, #40	; 0x28
 8018680:	4604      	mov	r4, r0
 8018682:	460d      	mov	r5, r1
 8018684:	b113      	cbz	r3, 801868c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8018686:	790b      	ldrb	r3, [r1, #4]
 8018688:	2b00      	cmp	r3, #0
 801868a:	d044      	beq.n	8018716 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801868c:	f104 0804 	add.w	r8, r4, #4
 8018690:	a803      	add	r0, sp, #12
 8018692:	4641      	mov	r1, r8
 8018694:	f7ff fe30 	bl	80182f8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018698:	792b      	ldrb	r3, [r5, #4]
 801869a:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801869e:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 80186a2:	b983      	cbnz	r3, 80186c6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 80186a4:	f104 0336 	add.w	r3, r4, #54	; 0x36
 80186a8:	892a      	ldrh	r2, [r5, #8]
 80186aa:	88e9      	ldrh	r1, [r5, #6]
 80186ac:	4640      	mov	r0, r8
 80186ae:	1b92      	subs	r2, r2, r6
 80186b0:	9301      	str	r3, [sp, #4]
 80186b2:	1bc9      	subs	r1, r1, r7
 80186b4:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80186b8:	b212      	sxth	r2, r2
 80186ba:	9300      	str	r3, [sp, #0]
 80186bc:	b209      	sxth	r1, r1
 80186be:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80186c2:	f7f8 fd65 	bl	8011190 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 80186c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80186c8:	b329      	cbz	r1, 8018716 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80186ca:	a805      	add	r0, sp, #20
 80186cc:	f7ff fe14 	bl	80182f8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80186d0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80186d4:	792b      	ldrb	r3, [r5, #4]
 80186d6:	a907      	add	r1, sp, #28
 80186d8:	1abf      	subs	r7, r7, r2
 80186da:	88ea      	ldrh	r2, [r5, #6]
 80186dc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80186de:	4417      	add	r7, r2
 80186e0:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 80186e2:	f88d 3020 	strb.w	r3, [sp, #32]
 80186e6:	4417      	add	r7, r2
 80186e8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80186ec:	1ab6      	subs	r6, r6, r2
 80186ee:	892a      	ldrh	r2, [r5, #8]
 80186f0:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 80186f4:	4416      	add	r6, r2
 80186f6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80186f8:	4416      	add	r6, r2
 80186fa:	4a08      	ldr	r2, [pc, #32]	; (801871c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 80186fc:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8018700:	2600      	movs	r6, #0
 8018702:	9207      	str	r2, [sp, #28]
 8018704:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8018708:	6803      	ldr	r3, [r0, #0]
 801870a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801870c:	4798      	blx	r3
 801870e:	792b      	ldrb	r3, [r5, #4]
 8018710:	b10b      	cbz	r3, 8018716 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018712:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8018716:	b00a      	add	sp, #40	; 0x28
 8018718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801871c:	08026068 	.word	0x08026068

08018720 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8018720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018724:	460c      	mov	r4, r1
 8018726:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8018728:	b088      	sub	sp, #32
 801872a:	4605      	mov	r5, r0
 801872c:	2900      	cmp	r1, #0
 801872e:	d06d      	beq.n	801880c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8018730:	4668      	mov	r0, sp
 8018732:	f7ff fde1 	bl	80182f8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018736:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8018738:	88e3      	ldrh	r3, [r4, #6]
 801873a:	f9bd 8000 	ldrsh.w	r8, [sp]
 801873e:	440b      	add	r3, r1
 8018740:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8018744:	b21b      	sxth	r3, r3
 8018746:	4543      	cmp	r3, r8
 8018748:	db31      	blt.n	80187ae <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801874a:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801874e:	44c4      	add	ip, r8
 8018750:	fa0f fc8c 	sxth.w	ip, ip
 8018754:	4563      	cmp	r3, ip
 8018756:	da2a      	bge.n	80187ae <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018758:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801875a:	8926      	ldrh	r6, [r4, #8]
 801875c:	4416      	add	r6, r2
 801875e:	b236      	sxth	r6, r6
 8018760:	42be      	cmp	r6, r7
 8018762:	db24      	blt.n	80187ae <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018764:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8018768:	4438      	add	r0, r7
 801876a:	b200      	sxth	r0, r0
 801876c:	4286      	cmp	r6, r0
 801876e:	da1e      	bge.n	80187ae <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018770:	8963      	ldrh	r3, [r4, #10]
 8018772:	4419      	add	r1, r3
 8018774:	b209      	sxth	r1, r1
 8018776:	4541      	cmp	r1, r8
 8018778:	db08      	blt.n	801878c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801877a:	4561      	cmp	r1, ip
 801877c:	da06      	bge.n	801878c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801877e:	89a3      	ldrh	r3, [r4, #12]
 8018780:	441a      	add	r2, r3
 8018782:	b212      	sxth	r2, r2
 8018784:	42ba      	cmp	r2, r7
 8018786:	db01      	blt.n	801878c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8018788:	4282      	cmp	r2, r0
 801878a:	db10      	blt.n	80187ae <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801878c:	4b21      	ldr	r3, [pc, #132]	; (8018814 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801878e:	a904      	add	r1, sp, #16
 8018790:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8018792:	9304      	str	r3, [sp, #16]
 8018794:	2302      	movs	r3, #2
 8018796:	f88d 3014 	strb.w	r3, [sp, #20]
 801879a:	2300      	movs	r3, #0
 801879c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80187a0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80187a4:	f8ad 301a 	strh.w	r3, [sp, #26]
 80187a8:	6803      	ldr	r3, [r0, #0]
 80187aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80187ac:	4798      	blx	r3
 80187ae:	1d29      	adds	r1, r5, #4
 80187b0:	a802      	add	r0, sp, #8
 80187b2:	f7ff fda1 	bl	80182f8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80187b6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80187ba:	88e0      	ldrh	r0, [r4, #6]
 80187bc:	eba3 0808 	sub.w	r8, r3, r8
 80187c0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80187c4:	7921      	ldrb	r1, [r4, #4]
 80187c6:	fa1f f888 	uxth.w	r8, r8
 80187ca:	1bdf      	subs	r7, r3, r7
 80187cc:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 80187d0:	b2bb      	uxth	r3, r7
 80187d2:	4440      	add	r0, r8
 80187d4:	8922      	ldrh	r2, [r4, #8]
 80187d6:	8967      	ldrh	r7, [r4, #10]
 80187d8:	4460      	add	r0, ip
 80187da:	89a4      	ldrh	r4, [r4, #12]
 80187dc:	441a      	add	r2, r3
 80187de:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 80187e0:	44b8      	add	r8, r7
 80187e2:	4423      	add	r3, r4
 80187e4:	f8ad 0016 	strh.w	r0, [sp, #22]
 80187e8:	4432      	add	r2, r6
 80187ea:	44e0      	add	r8, ip
 80187ec:	4433      	add	r3, r6
 80187ee:	4c0a      	ldr	r4, [pc, #40]	; (8018818 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 80187f0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80187f2:	f88d 1014 	strb.w	r1, [sp, #20]
 80187f6:	a904      	add	r1, sp, #16
 80187f8:	9404      	str	r4, [sp, #16]
 80187fa:	f8ad 2018 	strh.w	r2, [sp, #24]
 80187fe:	f8ad 801a 	strh.w	r8, [sp, #26]
 8018802:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018806:	6803      	ldr	r3, [r0, #0]
 8018808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801880a:	4798      	blx	r3
 801880c:	b008      	add	sp, #32
 801880e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018812:	bf00      	nop
 8018814:	08026068 	.word	0x08026068
 8018818:	0802607c 	.word	0x0802607c

0801881c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801881c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801881e:	4604      	mov	r4, r0
 8018820:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8018824:	3201      	adds	r2, #1
 8018826:	d112      	bne.n	801884e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8018828:	2500      	movs	r5, #0
 801882a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801882e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018832:	6803      	ldr	r3, [r0, #0]
 8018834:	9500      	str	r5, [sp, #0]
 8018836:	466d      	mov	r5, sp
 8018838:	f8ad 1004 	strh.w	r1, [sp, #4]
 801883c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018840:	4629      	mov	r1, r5
 8018842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018844:	4798      	blx	r3
 8018846:	e895 0003 	ldmia.w	r5, {r0, r1}
 801884a:	e884 0003 	stmia.w	r4, {r0, r1}
 801884e:	4620      	mov	r0, r4
 8018850:	b003      	add	sp, #12
 8018852:	bd30      	pop	{r4, r5, pc}

08018854 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8018854:	b513      	push	{r0, r1, r4, lr}
 8018856:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801885a:	4604      	mov	r4, r0
 801885c:	3301      	adds	r3, #1
 801885e:	d109      	bne.n	8018874 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8018860:	4601      	mov	r1, r0
 8018862:	4668      	mov	r0, sp
 8018864:	f7ff fd48 	bl	80182f8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018868:	f8bd 3000 	ldrh.w	r3, [sp]
 801886c:	8423      	strh	r3, [r4, #32]
 801886e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018872:	8463      	strh	r3, [r4, #34]	; 0x22
 8018874:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8018878:	b002      	add	sp, #8
 801887a:	bd10      	pop	{r4, pc}

0801887c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801887c:	b513      	push	{r0, r1, r4, lr}
 801887e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8018882:	4604      	mov	r4, r0
 8018884:	3301      	adds	r3, #1
 8018886:	d109      	bne.n	801889c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8018888:	4601      	mov	r1, r0
 801888a:	4668      	mov	r0, sp
 801888c:	f7ff fd34 	bl	80182f8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018890:	f8bd 3000 	ldrh.w	r3, [sp]
 8018894:	8423      	strh	r3, [r4, #32]
 8018896:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801889a:	8463      	strh	r3, [r4, #34]	; 0x22
 801889c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 80188a0:	b002      	add	sp, #8
 80188a2:	bd10      	pop	{r4, pc}

080188a4 <_ZN8touchgfx6ScreenC1Ev>:
 80188a4:	b570      	push	{r4, r5, r6, lr}
 80188a6:	4b17      	ldr	r3, [pc, #92]	; (8018904 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 80188a8:	4605      	mov	r5, r0
 80188aa:	4a17      	ldr	r2, [pc, #92]	; (8018908 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80188ac:	2101      	movs	r1, #1
 80188ae:	f845 3b04 	str.w	r3, [r5], #4
 80188b2:	2300      	movs	r3, #0
 80188b4:	6042      	str	r2, [r0, #4]
 80188b6:	4604      	mov	r4, r0
 80188b8:	8103      	strh	r3, [r0, #8]
 80188ba:	8143      	strh	r3, [r0, #10]
 80188bc:	8183      	strh	r3, [r0, #12]
 80188be:	81c3      	strh	r3, [r0, #14]
 80188c0:	8203      	strh	r3, [r0, #16]
 80188c2:	8243      	strh	r3, [r0, #18]
 80188c4:	8283      	strh	r3, [r0, #20]
 80188c6:	82c3      	strh	r3, [r0, #22]
 80188c8:	6203      	str	r3, [r0, #32]
 80188ca:	8483      	strh	r3, [r0, #36]	; 0x24
 80188cc:	84c3      	strh	r3, [r0, #38]	; 0x26
 80188ce:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 80188d2:	6343      	str	r3, [r0, #52]	; 0x34
 80188d4:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 80188d8:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80188dc:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80188e0:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 80188e4:	4b09      	ldr	r3, [pc, #36]	; (801890c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80188e6:	4628      	mov	r0, r5
 80188e8:	f9b3 6000 	ldrsh.w	r6, [r3]
 80188ec:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80188ee:	4a08      	ldr	r2, [pc, #32]	; (8018910 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80188f0:	f9b2 1000 	ldrsh.w	r1, [r2]
 80188f4:	4798      	blx	r3
 80188f6:	6863      	ldr	r3, [r4, #4]
 80188f8:	4628      	mov	r0, r5
 80188fa:	4631      	mov	r1, r6
 80188fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80188fe:	4798      	blx	r3
 8018900:	4620      	mov	r0, r4
 8018902:	bd70      	pop	{r4, r5, r6, pc}
 8018904:	080260a4 	.word	0x080260a4
 8018908:	08025748 	.word	0x08025748
 801890c:	2400eac6 	.word	0x2400eac6
 8018910:	2400eac4 	.word	0x2400eac4

08018914 <_ZN8touchgfx6Screen4drawEv>:
 8018914:	4b09      	ldr	r3, [pc, #36]	; (801893c <_ZN8touchgfx6Screen4drawEv+0x28>)
 8018916:	b507      	push	{r0, r1, r2, lr}
 8018918:	f9b3 2000 	ldrsh.w	r2, [r3]
 801891c:	2100      	movs	r1, #0
 801891e:	4b08      	ldr	r3, [pc, #32]	; (8018940 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8018920:	9100      	str	r1, [sp, #0]
 8018922:	4669      	mov	r1, sp
 8018924:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018928:	f8ad 2004 	strh.w	r2, [sp, #4]
 801892c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018930:	6803      	ldr	r3, [r0, #0]
 8018932:	689b      	ldr	r3, [r3, #8]
 8018934:	4798      	blx	r3
 8018936:	b003      	add	sp, #12
 8018938:	f85d fb04 	ldr.w	pc, [sp], #4
 801893c:	2400eac4 	.word	0x2400eac4
 8018940:	2400eac6 	.word	0x2400eac6

08018944 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8018944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018948:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801894c:	b089      	sub	sp, #36	; 0x24
 801894e:	4680      	mov	r8, r0
 8018950:	460c      	mov	r4, r1
 8018952:	2b00      	cmp	r3, #0
 8018954:	4615      	mov	r5, r2
 8018956:	dd0e      	ble.n	8018976 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018958:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801895c:	2b00      	cmp	r3, #0
 801895e:	dd0a      	ble.n	8018976 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018960:	4628      	mov	r0, r5
 8018962:	f7ff ff5b 	bl	801881c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018966:	4621      	mov	r1, r4
 8018968:	f7fe fb4d 	bl	8017006 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801896c:	69eb      	ldr	r3, [r5, #28]
 801896e:	b928      	cbnz	r0, 801897c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8018970:	461d      	mov	r5, r3
 8018972:	2b00      	cmp	r3, #0
 8018974:	d1f4      	bne.n	8018960 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8018976:	b009      	add	sp, #36	; 0x24
 8018978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801897c:	ae04      	add	r6, sp, #16
 801897e:	2b00      	cmp	r3, #0
 8018980:	f000 80b5 	beq.w	8018aee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8018984:	682b      	ldr	r3, [r5, #0]
 8018986:	4629      	mov	r1, r5
 8018988:	a802      	add	r0, sp, #8
 801898a:	68db      	ldr	r3, [r3, #12]
 801898c:	4798      	blx	r3
 801898e:	4628      	mov	r0, r5
 8018990:	f7ff ff60 	bl	8018854 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8018994:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8018998:	4407      	add	r7, r0
 801899a:	4628      	mov	r0, r5
 801899c:	f7ff ff6e 	bl	801887c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80189a0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80189a4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80189a8:	b23f      	sxth	r7, r7
 80189aa:	4418      	add	r0, r3
 80189ac:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80189b0:	4621      	mov	r1, r4
 80189b2:	f8ad 2014 	strh.w	r2, [sp, #20]
 80189b6:	f8ad 0012 	strh.w	r0, [sp, #18]
 80189ba:	4630      	mov	r0, r6
 80189bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80189c0:	f8ad 7010 	strh.w	r7, [sp, #16]
 80189c4:	f7f8 fcc6 	bl	8011354 <_ZN8touchgfx4RectaNERKS0_>
 80189c8:	4628      	mov	r0, r5
 80189ca:	f7ff ff27 	bl	801881c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80189ce:	ab06      	add	r3, sp, #24
 80189d0:	4602      	mov	r2, r0
 80189d2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80189d6:	e883 0003 	stmia.w	r3, {r0, r1}
 80189da:	4611      	mov	r1, r2
 80189dc:	4618      	mov	r0, r3
 80189de:	f7f8 fcb9 	bl	8011354 <_ZN8touchgfx4RectaNERKS0_>
 80189e2:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80189e6:	f9b4 1000 	ldrsh.w	r1, [r4]
 80189ea:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80189ee:	4299      	cmp	r1, r3
 80189f0:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80189f4:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80189f8:	d10b      	bne.n	8018a12 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80189fa:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80189fe:	4552      	cmp	r2, sl
 8018a00:	d107      	bne.n	8018a12 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8018a02:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8018a06:	455a      	cmp	r2, fp
 8018a08:	d103      	bne.n	8018a12 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8018a0a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8018a0e:	454a      	cmp	r2, r9
 8018a10:	d06d      	beq.n	8018aee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8018a12:	f1bb 0f00 	cmp.w	fp, #0
 8018a16:	dd65      	ble.n	8018ae4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8018a18:	f1b9 0f00 	cmp.w	r9, #0
 8018a1c:	dd62      	ble.n	8018ae4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8018a1e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8018a22:	fa1f f08a 	uxth.w	r0, sl
 8018a26:	4552      	cmp	r2, sl
 8018a28:	9000      	str	r0, [sp, #0]
 8018a2a:	da12      	bge.n	8018a52 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8018a2c:	9301      	str	r3, [sp, #4]
 8018a2e:	9b00      	ldr	r3, [sp, #0]
 8018a30:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8018a34:	f8ad 2012 	strh.w	r2, [sp, #18]
 8018a38:	1a9a      	subs	r2, r3, r2
 8018a3a:	f8ad 1010 	strh.w	r1, [sp, #16]
 8018a3e:	4631      	mov	r1, r6
 8018a40:	f8ad 0014 	strh.w	r0, [sp, #20]
 8018a44:	4640      	mov	r0, r8
 8018a46:	f8ad 2016 	strh.w	r2, [sp, #22]
 8018a4a:	69ea      	ldr	r2, [r5, #28]
 8018a4c:	f7ff ff7a 	bl	8018944 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018a50:	9b01      	ldr	r3, [sp, #4]
 8018a52:	f9b4 2000 	ldrsh.w	r2, [r4]
 8018a56:	b29f      	uxth	r7, r3
 8018a58:	429a      	cmp	r2, r3
 8018a5a:	da0d      	bge.n	8018a78 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8018a5c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018a60:	1aba      	subs	r2, r7, r2
 8018a62:	f8ad a012 	strh.w	sl, [sp, #18]
 8018a66:	4631      	mov	r1, r6
 8018a68:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018a6c:	4640      	mov	r0, r8
 8018a6e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8018a72:	69ea      	ldr	r2, [r5, #28]
 8018a74:	f7ff ff66 	bl	8018944 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018a78:	8822      	ldrh	r2, [r4, #0]
 8018a7a:	445f      	add	r7, fp
 8018a7c:	88a3      	ldrh	r3, [r4, #4]
 8018a7e:	b2bf      	uxth	r7, r7
 8018a80:	4413      	add	r3, r2
 8018a82:	b23a      	sxth	r2, r7
 8018a84:	b29b      	uxth	r3, r3
 8018a86:	b219      	sxth	r1, r3
 8018a88:	4291      	cmp	r1, r2
 8018a8a:	dd0d      	ble.n	8018aa8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8018a8c:	1bdb      	subs	r3, r3, r7
 8018a8e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018a92:	f8ad a012 	strh.w	sl, [sp, #18]
 8018a96:	4631      	mov	r1, r6
 8018a98:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018a9c:	4640      	mov	r0, r8
 8018a9e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8018aa2:	69ea      	ldr	r2, [r5, #28]
 8018aa4:	f7ff ff4e 	bl	8018944 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018aa8:	88e2      	ldrh	r2, [r4, #6]
 8018aaa:	8863      	ldrh	r3, [r4, #2]
 8018aac:	4413      	add	r3, r2
 8018aae:	9a00      	ldr	r2, [sp, #0]
 8018ab0:	444a      	add	r2, r9
 8018ab2:	b29b      	uxth	r3, r3
 8018ab4:	fa1f f982 	uxth.w	r9, r2
 8018ab8:	b219      	sxth	r1, r3
 8018aba:	fa0f f289 	sxth.w	r2, r9
 8018abe:	428a      	cmp	r2, r1
 8018ac0:	da15      	bge.n	8018aee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8018ac2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8018ac6:	eba3 0309 	sub.w	r3, r3, r9
 8018aca:	f9b4 0000 	ldrsh.w	r0, [r4]
 8018ace:	f8ad 1014 	strh.w	r1, [sp, #20]
 8018ad2:	4631      	mov	r1, r6
 8018ad4:	f8ad 0010 	strh.w	r0, [sp, #16]
 8018ad8:	f8ad 2012 	strh.w	r2, [sp, #18]
 8018adc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018ae0:	69ea      	ldr	r2, [r5, #28]
 8018ae2:	e001      	b.n	8018ae8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8018ae4:	69ea      	ldr	r2, [r5, #28]
 8018ae6:	4621      	mov	r1, r4
 8018ae8:	4640      	mov	r0, r8
 8018aea:	f7ff ff2b 	bl	8018944 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018aee:	4628      	mov	r0, r5
 8018af0:	f7ff fe94 	bl	801881c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018af4:	6861      	ldr	r1, [r4, #4]
 8018af6:	4602      	mov	r2, r0
 8018af8:	4633      	mov	r3, r6
 8018afa:	6820      	ldr	r0, [r4, #0]
 8018afc:	c303      	stmia	r3!, {r0, r1}
 8018afe:	4611      	mov	r1, r2
 8018b00:	4630      	mov	r0, r6
 8018b02:	f7f8 fc27 	bl	8011354 <_ZN8touchgfx4RectaNERKS0_>
 8018b06:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	f77f af33 	ble.w	8018976 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018b10:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	f77f af2e 	ble.w	8018976 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018b1a:	4628      	mov	r0, r5
 8018b1c:	f7ff fe9a 	bl	8018854 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8018b20:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8018b24:	1a18      	subs	r0, r3, r0
 8018b26:	f8ad 0010 	strh.w	r0, [sp, #16]
 8018b2a:	4628      	mov	r0, r5
 8018b2c:	f7ff fea6 	bl	801887c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8018b30:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8018b34:	4631      	mov	r1, r6
 8018b36:	1a18      	subs	r0, r3, r0
 8018b38:	f8ad 0012 	strh.w	r0, [sp, #18]
 8018b3c:	4628      	mov	r0, r5
 8018b3e:	682b      	ldr	r3, [r5, #0]
 8018b40:	689b      	ldr	r3, [r3, #8]
 8018b42:	4798      	blx	r3
 8018b44:	e717      	b.n	8018976 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08018b46 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8018b46:	b570      	push	{r4, r5, r6, lr}
 8018b48:	1d06      	adds	r6, r0, #4
 8018b4a:	b086      	sub	sp, #24
 8018b4c:	460c      	mov	r4, r1
 8018b4e:	2300      	movs	r3, #0
 8018b50:	4631      	mov	r1, r6
 8018b52:	4605      	mov	r5, r0
 8018b54:	a802      	add	r0, sp, #8
 8018b56:	9301      	str	r3, [sp, #4]
 8018b58:	f7ff fbce 	bl	80182f8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018b5c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018b60:	8822      	ldrh	r2, [r4, #0]
 8018b62:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8018b66:	1ad2      	subs	r2, r2, r3
 8018b68:	8863      	ldrh	r3, [r4, #2]
 8018b6a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8018b6e:	1a5b      	subs	r3, r3, r1
 8018b70:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8018b74:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018b78:	aa01      	add	r2, sp, #4
 8018b7a:	f8ad 0014 	strh.w	r0, [sp, #20]
 8018b7e:	4630      	mov	r0, r6
 8018b80:	f8ad 1016 	strh.w	r1, [sp, #22]
 8018b84:	a904      	add	r1, sp, #16
 8018b86:	f8ad 3012 	strh.w	r3, [sp, #18]
 8018b8a:	f7f8 fcbb 	bl	8011504 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8018b8e:	9a01      	ldr	r2, [sp, #4]
 8018b90:	b11a      	cbz	r2, 8018b9a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8018b92:	4621      	mov	r1, r4
 8018b94:	4628      	mov	r0, r5
 8018b96:	f7ff fed5 	bl	8018944 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018b9a:	b006      	add	sp, #24
 8018b9c:	bd70      	pop	{r4, r5, r6, pc}

08018b9e <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8018b9e:	4602      	mov	r2, r0
 8018ba0:	b530      	push	{r4, r5, lr}
 8018ba2:	4604      	mov	r4, r0
 8018ba4:	b085      	sub	sp, #20
 8018ba6:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8018baa:	460d      	mov	r5, r1
 8018bac:	466b      	mov	r3, sp
 8018bae:	6851      	ldr	r1, [r2, #4]
 8018bb0:	c303      	stmia	r3!, {r0, r1}
 8018bb2:	4629      	mov	r1, r5
 8018bb4:	4668      	mov	r0, sp
 8018bb6:	f7f8 fbcd 	bl	8011354 <_ZN8touchgfx4RectaNERKS0_>
 8018bba:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8018bbe:	b12b      	cbz	r3, 8018bcc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8018bc0:	4669      	mov	r1, sp
 8018bc2:	4620      	mov	r0, r4
 8018bc4:	f7ff ffbf 	bl	8018b46 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8018bc8:	b005      	add	sp, #20
 8018bca:	bd30      	pop	{r4, r5, pc}
 8018bcc:	3404      	adds	r4, #4
 8018bce:	a802      	add	r0, sp, #8
 8018bd0:	4621      	mov	r1, r4
 8018bd2:	f7ff fb91 	bl	80182f8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018bd6:	f8bd 3000 	ldrh.w	r3, [sp]
 8018bda:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8018bde:	4669      	mov	r1, sp
 8018be0:	4620      	mov	r0, r4
 8018be2:	1a9b      	subs	r3, r3, r2
 8018be4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8018be8:	f8ad 3000 	strh.w	r3, [sp]
 8018bec:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018bf0:	1a9b      	subs	r3, r3, r2
 8018bf2:	f8ad 3002 	strh.w	r3, [sp, #2]
 8018bf6:	f7f8 fc4c 	bl	8011492 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8018bfa:	e7e5      	b.n	8018bc8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08018bfc <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8018bfc:	460b      	mov	r3, r1
 8018bfe:	680a      	ldr	r2, [r1, #0]
 8018c00:	1d01      	adds	r1, r0, #4
 8018c02:	6992      	ldr	r2, [r2, #24]
 8018c04:	4618      	mov	r0, r3
 8018c06:	4710      	bx	r2

08018c08 <_ZN8touchgfx12TextProviderC1Ev>:
 8018c08:	b538      	push	{r3, r4, r5, lr}
 8018c0a:	2500      	movs	r5, #0
 8018c0c:	2302      	movs	r3, #2
 8018c0e:	4604      	mov	r4, r0
 8018c10:	220e      	movs	r2, #14
 8018c12:	7403      	strb	r3, [r0, #16]
 8018c14:	4629      	mov	r1, r5
 8018c16:	6145      	str	r5, [r0, #20]
 8018c18:	7605      	strb	r5, [r0, #24]
 8018c1a:	83c5      	strh	r5, [r0, #30]
 8018c1c:	8405      	strh	r5, [r0, #32]
 8018c1e:	86c5      	strh	r5, [r0, #54]	; 0x36
 8018c20:	8705      	strh	r5, [r0, #56]	; 0x38
 8018c22:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8018c24:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8018c28:	e9c0 5500 	strd	r5, r5, [r0]
 8018c2c:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8018c30:	304c      	adds	r0, #76	; 0x4c
 8018c32:	f00a f9c1 	bl	8022fb8 <memset>
 8018c36:	2301      	movs	r3, #1
 8018c38:	4620      	mov	r0, r4
 8018c3a:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8018c3e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8018c42:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8018c46:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8018c4a:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8018c4e:	f7ed fd53 	bl	80066f8 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8018c52:	4620      	mov	r0, r4
 8018c54:	bd38      	pop	{r3, r4, r5, pc}

08018c56 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 8018c56:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8018c58:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8018c5c:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 8018c5e:	fab0 f080 	clz	r0, r0
 8018c62:	0940      	lsrs	r0, r0, #5
 8018c64:	4770      	bx	lr

08018c66 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8018c66:	b530      	push	{r4, r5, lr}
 8018c68:	2500      	movs	r5, #0
 8018c6a:	2401      	movs	r4, #1
 8018c6c:	6843      	ldr	r3, [r0, #4]
 8018c6e:	b913      	cbnz	r3, 8018c76 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8018c70:	6803      	ldr	r3, [r0, #0]
 8018c72:	b313      	cbz	r3, 8018cba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8018c74:	6043      	str	r3, [r0, #4]
 8018c76:	7e03      	ldrb	r3, [r0, #24]
 8018c78:	b143      	cbz	r3, 8018c8c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8018c7a:	6943      	ldr	r3, [r0, #20]
 8018c7c:	b12b      	cbz	r3, 8018c8a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8018c7e:	881a      	ldrh	r2, [r3, #0]
 8018c80:	b11a      	cbz	r2, 8018c8a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8018c82:	1c9a      	adds	r2, r3, #2
 8018c84:	6142      	str	r2, [r0, #20]
 8018c86:	8818      	ldrh	r0, [r3, #0]
 8018c88:	bd30      	pop	{r4, r5, pc}
 8018c8a:	7605      	strb	r5, [r0, #24]
 8018c8c:	6843      	ldr	r3, [r0, #4]
 8018c8e:	8819      	ldrh	r1, [r3, #0]
 8018c90:	b199      	cbz	r1, 8018cba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8018c92:	1c9a      	adds	r2, r3, #2
 8018c94:	2902      	cmp	r1, #2
 8018c96:	6042      	str	r2, [r0, #4]
 8018c98:	d1f5      	bne.n	8018c86 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8018c9a:	7c03      	ldrb	r3, [r0, #16]
 8018c9c:	2b01      	cmp	r3, #1
 8018c9e:	d8e5      	bhi.n	8018c6c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018ca0:	1c5a      	adds	r2, r3, #1
 8018ca2:	3302      	adds	r3, #2
 8018ca4:	7402      	strb	r2, [r0, #16]
 8018ca6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8018caa:	6143      	str	r3, [r0, #20]
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	d0dd      	beq.n	8018c6c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018cb0:	881b      	ldrh	r3, [r3, #0]
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	d0da      	beq.n	8018c6c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018cb6:	7604      	strb	r4, [r0, #24]
 8018cb8:	e7d8      	b.n	8018c6c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018cba:	2000      	movs	r0, #0
 8018cbc:	e7e4      	b.n	8018c88 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08018cbe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8018cbe:	6001      	str	r1, [r0, #0]
 8018cc0:	2100      	movs	r1, #0
 8018cc2:	b430      	push	{r4, r5}
 8018cc4:	6041      	str	r1, [r0, #4]
 8018cc6:	6815      	ldr	r5, [r2, #0]
 8018cc8:	6085      	str	r5, [r0, #8]
 8018cca:	6852      	ldr	r2, [r2, #4]
 8018ccc:	6443      	str	r3, [r0, #68]	; 0x44
 8018cce:	9b02      	ldr	r3, [sp, #8]
 8018cd0:	60c2      	str	r2, [r0, #12]
 8018cd2:	7401      	strb	r1, [r0, #16]
 8018cd4:	6141      	str	r1, [r0, #20]
 8018cd6:	7601      	strb	r1, [r0, #24]
 8018cd8:	8701      	strh	r1, [r0, #56]	; 0x38
 8018cda:	8401      	strh	r1, [r0, #32]
 8018cdc:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8018ce0:	6483      	str	r3, [r0, #72]	; 0x48
 8018ce2:	bc30      	pop	{r4, r5}
 8018ce4:	f7ed bd08 	b.w	80066f8 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08018ce8 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 8018ce8:	b408      	push	{r3}
 8018cea:	b510      	push	{r4, lr}
 8018cec:	b085      	sub	sp, #20
 8018cee:	ac07      	add	r4, sp, #28
 8018cf0:	f854 3b04 	ldr.w	r3, [r4], #4
 8018cf4:	9300      	str	r3, [sp, #0]
 8018cf6:	4613      	mov	r3, r2
 8018cf8:	4622      	mov	r2, r4
 8018cfa:	9403      	str	r4, [sp, #12]
 8018cfc:	f7ff ffdf 	bl	8018cbe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018d00:	b005      	add	sp, #20
 8018d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018d06:	b001      	add	sp, #4
 8018d08:	4770      	bx	lr

08018d0a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8018d0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018d0c:	4605      	mov	r5, r0
 8018d0e:	4608      	mov	r0, r1
 8018d10:	b1f1      	cbz	r1, 8018d50 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8018d12:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8018d16:	460b      	mov	r3, r1
 8018d18:	f101 0708 	add.w	r7, r1, #8
 8018d1c:	4622      	mov	r2, r4
 8018d1e:	6818      	ldr	r0, [r3, #0]
 8018d20:	3308      	adds	r3, #8
 8018d22:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8018d26:	4626      	mov	r6, r4
 8018d28:	42bb      	cmp	r3, r7
 8018d2a:	c603      	stmia	r6!, {r0, r1}
 8018d2c:	4634      	mov	r4, r6
 8018d2e:	d1f6      	bne.n	8018d1e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8018d30:	6818      	ldr	r0, [r3, #0]
 8018d32:	6030      	str	r0, [r6, #0]
 8018d34:	4610      	mov	r0, r2
 8018d36:	889b      	ldrh	r3, [r3, #4]
 8018d38:	80b3      	strh	r3, [r6, #4]
 8018d3a:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8018d3e:	015b      	lsls	r3, r3, #5
 8018d40:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8018d44:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8018d48:	430b      	orrs	r3, r1
 8018d4a:	425b      	negs	r3, r3
 8018d4c:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8018d50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018d52 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8018d52:	b538      	push	{r3, r4, r5, lr}
 8018d54:	460c      	mov	r4, r1
 8018d56:	6811      	ldr	r1, [r2, #0]
 8018d58:	4610      	mov	r0, r2
 8018d5a:	68cd      	ldr	r5, [r1, #12]
 8018d5c:	4619      	mov	r1, r3
 8018d5e:	47a8      	blx	r5
 8018d60:	2800      	cmp	r0, #0
 8018d62:	bf08      	it	eq
 8018d64:	4620      	moveq	r0, r4
 8018d66:	bd38      	pop	{r3, r4, r5, pc}

08018d68 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8018d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d6a:	4604      	mov	r4, r0
 8018d6c:	4615      	mov	r5, r2
 8018d6e:	4608      	mov	r0, r1
 8018d70:	b93a      	cbnz	r2, 8018d82 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8018d72:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8018d76:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8018d7a:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8018d7e:	4628      	mov	r0, r5
 8018d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d82:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8018d86:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 8018d8a:	8893      	ldrh	r3, [r2, #4]
 8018d8c:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8018d90:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8018d94:	79ee      	ldrb	r6, [r5, #7]
 8018d96:	4316      	orrs	r6, r2
 8018d98:	19da      	adds	r2, r3, r7
 8018d9a:	b291      	uxth	r1, r2
 8018d9c:	b2b7      	uxth	r7, r6
 8018d9e:	291d      	cmp	r1, #29
 8018da0:	d87b      	bhi.n	8018e9a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8018da2:	2201      	movs	r2, #1
 8018da4:	10f6      	asrs	r6, r6, #3
 8018da6:	408a      	lsls	r2, r1
 8018da8:	4974      	ldr	r1, [pc, #464]	; (8018f7c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 8018daa:	420a      	tst	r2, r1
 8018dac:	d12e      	bne.n	8018e0c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8018dae:	f412 7f60 	tst.w	r2, #896	; 0x380
 8018db2:	d072      	beq.n	8018e9a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8018db4:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8018db8:	462b      	mov	r3, r5
 8018dba:	f105 0e08 	add.w	lr, r5, #8
 8018dbe:	4615      	mov	r5, r2
 8018dc0:	6818      	ldr	r0, [r3, #0]
 8018dc2:	3308      	adds	r3, #8
 8018dc4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8018dc8:	4694      	mov	ip, r2
 8018dca:	4573      	cmp	r3, lr
 8018dcc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8018dd0:	4662      	mov	r2, ip
 8018dd2:	d1f5      	bne.n	8018dc0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8018dd4:	6818      	ldr	r0, [r3, #0]
 8018dd6:	f8cc 0000 	str.w	r0, [ip]
 8018dda:	889b      	ldrh	r3, [r3, #4]
 8018ddc:	f8ac 3004 	strh.w	r3, [ip, #4]
 8018de0:	b2b3      	uxth	r3, r6
 8018de2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8018de6:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8018dea:	1aca      	subs	r2, r1, r3
 8018dec:	1bcf      	subs	r7, r1, r7
 8018dee:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8018df2:	b292      	uxth	r2, r2
 8018df4:	1afb      	subs	r3, r7, r3
 8018df6:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8018dfa:	10d2      	asrs	r2, r2, #3
 8018dfc:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8018e00:	4302      	orrs	r2, r0
 8018e02:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8018e06:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8018e0a:	e7b8      	b.n	8018d7e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8018e0c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8018e0e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018e12:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8018e14:	f640 6333 	movw	r3, #3635	; 0xe33
 8018e18:	4299      	cmp	r1, r3
 8018e1a:	d110      	bne.n	8018e3e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 8018e1c:	6803      	ldr	r3, [r0, #0]
 8018e1e:	68db      	ldr	r3, [r3, #12]
 8018e20:	4798      	blx	r3
 8018e22:	7b41      	ldrb	r1, [r0, #13]
 8018e24:	00cb      	lsls	r3, r1, #3
 8018e26:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018e2a:	7a03      	ldrb	r3, [r0, #8]
 8018e2c:	0648      	lsls	r0, r1, #25
 8018e2e:	ea43 0302 	orr.w	r3, r3, r2
 8018e32:	bf44      	itt	mi
 8018e34:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018e38:	b21b      	sxthmi	r3, r3
 8018e3a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018e3e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8018e42:	462a      	mov	r2, r5
 8018e44:	f105 0c08 	add.w	ip, r5, #8
 8018e48:	443b      	add	r3, r7
 8018e4a:	4433      	add	r3, r6
 8018e4c:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8018e50:	b29b      	uxth	r3, r3
 8018e52:	4635      	mov	r5, r6
 8018e54:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018e58:	6810      	ldr	r0, [r2, #0]
 8018e5a:	3208      	adds	r2, #8
 8018e5c:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8018e60:	4637      	mov	r7, r6
 8018e62:	4562      	cmp	r2, ip
 8018e64:	c703      	stmia	r7!, {r0, r1}
 8018e66:	463e      	mov	r6, r7
 8018e68:	d1f6      	bne.n	8018e58 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 8018e6a:	6810      	ldr	r0, [r2, #0]
 8018e6c:	6038      	str	r0, [r7, #0]
 8018e6e:	8892      	ldrh	r2, [r2, #4]
 8018e70:	80ba      	strh	r2, [r7, #4]
 8018e72:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8018e76:	10db      	asrs	r3, r3, #3
 8018e78:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8018e7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018e80:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8018e84:	4313      	orrs	r3, r2
 8018e86:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8018e8a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8018e8e:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8018e92:	1a9b      	subs	r3, r3, r2
 8018e94:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8018e98:	e771      	b.n	8018d7e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8018e9a:	f023 0204 	bic.w	r2, r3, #4
 8018e9e:	f640 611b 	movw	r1, #3611	; 0xe1b
 8018ea2:	428a      	cmp	r2, r1
 8018ea4:	d003      	beq.n	8018eae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 8018ea6:	f640 621d 	movw	r2, #3613	; 0xe1d
 8018eaa:	4293      	cmp	r3, r2
 8018eac:	d120      	bne.n	8018ef0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 8018eae:	3b01      	subs	r3, #1
 8018eb0:	4602      	mov	r2, r0
 8018eb2:	4629      	mov	r1, r5
 8018eb4:	4620      	mov	r0, r4
 8018eb6:	b29b      	uxth	r3, r3
 8018eb8:	f7ff ff4b 	bl	8018d52 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8018ebc:	7b41      	ldrb	r1, [r0, #13]
 8018ebe:	00cb      	lsls	r3, r1, #3
 8018ec0:	0649      	lsls	r1, r1, #25
 8018ec2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018ec6:	7a03      	ldrb	r3, [r0, #8]
 8018ec8:	ea43 0302 	orr.w	r3, r3, r2
 8018ecc:	bf44      	itt	mi
 8018ece:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018ed2:	b21b      	sxthmi	r3, r3
 8018ed4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018ed8:	7b6b      	ldrb	r3, [r5, #13]
 8018eda:	7aaa      	ldrb	r2, [r5, #10]
 8018edc:	005b      	lsls	r3, r3, #1
 8018ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018ee2:	4313      	orrs	r3, r2
 8018ee4:	115a      	asrs	r2, r3, #5
 8018ee6:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8018eea:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8018eee:	e035      	b.n	8018f5c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8018ef0:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8018ef4:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8018ef8:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8018efc:	7a2a      	ldrb	r2, [r5, #8]
 8018efe:	ea42 0201 	orr.w	r2, r2, r1
 8018f02:	f640 6109 	movw	r1, #3593	; 0xe09
 8018f06:	bf1c      	itt	ne
 8018f08:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8018f0c:	b212      	sxthne	r2, r2
 8018f0e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8018f12:	f023 0210 	bic.w	r2, r3, #16
 8018f16:	428a      	cmp	r2, r1
 8018f18:	d003      	beq.n	8018f22 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8018f1a:	f640 6213 	movw	r2, #3603	; 0xe13
 8018f1e:	4293      	cmp	r3, r2
 8018f20:	d129      	bne.n	8018f76 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 8018f22:	7b6e      	ldrb	r6, [r5, #13]
 8018f24:	4629      	mov	r1, r5
 8018f26:	0076      	lsls	r6, r6, #1
 8018f28:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8018f2c:	7aae      	ldrb	r6, [r5, #10]
 8018f2e:	4316      	orrs	r6, r2
 8018f30:	f640 6213 	movw	r2, #3603	; 0xe13
 8018f34:	4293      	cmp	r3, r2
 8018f36:	4602      	mov	r2, r0
 8018f38:	4620      	mov	r0, r4
 8018f3a:	bf16      	itet	ne
 8018f3c:	f103 33ff 	addne.w	r3, r3, #4294967295
 8018f40:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8018f44:	b29b      	uxthne	r3, r3
 8018f46:	f7ff ff04 	bl	8018d52 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8018f4a:	7b43      	ldrb	r3, [r0, #13]
 8018f4c:	7a82      	ldrb	r2, [r0, #10]
 8018f4e:	005b      	lsls	r3, r3, #1
 8018f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018f54:	4313      	orrs	r3, r2
 8018f56:	1af6      	subs	r6, r6, r3
 8018f58:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8018f5c:	7b69      	ldrb	r1, [r5, #13]
 8018f5e:	00cb      	lsls	r3, r1, #3
 8018f60:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018f64:	7a2b      	ldrb	r3, [r5, #8]
 8018f66:	4313      	orrs	r3, r2
 8018f68:	064a      	lsls	r2, r1, #25
 8018f6a:	bf44      	itt	mi
 8018f6c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018f70:	b21b      	sxthmi	r3, r3
 8018f72:	1bdb      	subs	r3, r3, r7
 8018f74:	e747      	b.n	8018e06 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8018f76:	2300      	movs	r3, #0
 8018f78:	e7b7      	b.n	8018eea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 8018f7a:	bf00      	nop
 8018f7c:	3fc00079 	.word	0x3fc00079

08018f80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8018f80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018f84:	4604      	mov	r4, r0
 8018f86:	b942      	cbnz	r2, 8018f9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8018f88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018f8c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8018f90:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8018f94:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8018f98:	e047      	b.n	801902a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8018f9a:	7b51      	ldrb	r1, [r2, #13]
 8018f9c:	8893      	ldrh	r3, [r2, #4]
 8018f9e:	010d      	lsls	r5, r1, #4
 8018fa0:	f405 7080 	and.w	r0, r5, #256	; 0x100
 8018fa4:	79d5      	ldrb	r5, [r2, #7]
 8018fa6:	4305      	orrs	r5, r0
 8018fa8:	2d04      	cmp	r5, #4
 8018faa:	bfcc      	ite	gt
 8018fac:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8018fb0:	f04f 0e01 	movle.w	lr, #1
 8018fb4:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8018fb8:	f200 80ab 	bhi.w	8019112 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8018fbc:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8018fc0:	4283      	cmp	r3, r0
 8018fc2:	d216      	bcs.n	8018ff2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018fc4:	f240 605b 	movw	r0, #1627	; 0x65b
 8018fc8:	4283      	cmp	r3, r0
 8018fca:	d859      	bhi.n	8019080 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8018fcc:	f240 6057 	movw	r0, #1623	; 0x657
 8018fd0:	4283      	cmp	r3, r0
 8018fd2:	d20e      	bcs.n	8018ff2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018fd4:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8018fd8:	d24a      	bcs.n	8019070 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8018fda:	f240 604e 	movw	r0, #1614	; 0x64e
 8018fde:	4283      	cmp	r3, r0
 8018fe0:	d207      	bcs.n	8018ff2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018fe2:	f240 601a 	movw	r0, #1562	; 0x61a
 8018fe6:	4283      	cmp	r3, r0
 8018fe8:	d02a      	beq.n	8019040 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018fea:	d821      	bhi.n	8019030 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8018fec:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8018ff0:	d35b      	bcc.n	80190aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018ff2:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8018ff6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018ffa:	f040 80d0 	bne.w	801919e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8018ffe:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8019002:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8019006:	f040 80ca 	bne.w	801919e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801900a:	00cb      	lsls	r3, r1, #3
 801900c:	0649      	lsls	r1, r1, #25
 801900e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8019012:	7a13      	ldrb	r3, [r2, #8]
 8019014:	ea43 0300 	orr.w	r3, r3, r0
 8019018:	bf44      	itt	mi
 801901a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801901e:	b21b      	sxthmi	r3, r3
 8019020:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8019024:	1b5d      	subs	r5, r3, r5
 8019026:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801902a:	4610      	mov	r0, r2
 801902c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019030:	f240 604b 	movw	r0, #1611	; 0x64b
 8019034:	4283      	cmp	r3, r0
 8019036:	d338      	bcc.n	80190aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019038:	f240 604c 	movw	r0, #1612	; 0x64c
 801903c:	4283      	cmp	r3, r0
 801903e:	d9d8      	bls.n	8018ff2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019040:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8019044:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8019048:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801904c:	f040 80f3 	bne.w	8019236 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8019050:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8019054:	f040 80ef 	bne.w	8019236 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8019058:	00cb      	lsls	r3, r1, #3
 801905a:	064e      	lsls	r6, r1, #25
 801905c:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8019060:	7a13      	ldrb	r3, [r2, #8]
 8019062:	ea43 0300 	orr.w	r3, r3, r0
 8019066:	bf44      	itt	mi
 8019068:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801906c:	b21b      	sxthmi	r3, r3
 801906e:	e7d9      	b.n	8019024 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8019070:	f240 6054 	movw	r0, #1620	; 0x654
 8019074:	4283      	cmp	r3, r0
 8019076:	d8e3      	bhi.n	8019040 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019078:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801907c:	d9e0      	bls.n	8019040 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801907e:	e7b8      	b.n	8018ff2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019080:	f240 6074 	movw	r0, #1652	; 0x674
 8019084:	4283      	cmp	r3, r0
 8019086:	d0b4      	beq.n	8018ff2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019088:	d82d      	bhi.n	80190e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801908a:	f240 605e 	movw	r0, #1630	; 0x65e
 801908e:	4283      	cmp	r3, r0
 8019090:	d804      	bhi.n	801909c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8019092:	f240 605d 	movw	r0, #1629	; 0x65d
 8019096:	4283      	cmp	r3, r0
 8019098:	d3d2      	bcc.n	8019040 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801909a:	e7aa      	b.n	8018ff2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801909c:	f240 605f 	movw	r0, #1631	; 0x65f
 80190a0:	4283      	cmp	r3, r0
 80190a2:	d0cd      	beq.n	8019040 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80190a4:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 80190a8:	d0a3      	beq.n	8018ff2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80190aa:	00cb      	lsls	r3, r1, #3
 80190ac:	0649      	lsls	r1, r1, #25
 80190ae:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80190b2:	7a13      	ldrb	r3, [r2, #8]
 80190b4:	ea43 0300 	orr.w	r3, r3, r0
 80190b8:	bf44      	itt	mi
 80190ba:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80190be:	b21b      	sxthmi	r3, r3
 80190c0:	1b5d      	subs	r5, r3, r5
 80190c2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80190c6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80190ca:	7b53      	ldrb	r3, [r2, #13]
 80190cc:	015b      	lsls	r3, r3, #5
 80190ce:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80190d2:	7993      	ldrb	r3, [r2, #6]
 80190d4:	430b      	orrs	r3, r1
 80190d6:	2105      	movs	r1, #5
 80190d8:	005b      	lsls	r3, r3, #1
 80190da:	fb93 f3f1 	sdiv	r3, r3, r1
 80190de:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80190e2:	440b      	add	r3, r1
 80190e4:	e756      	b.n	8018f94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80190e6:	f240 60e2 	movw	r0, #1762	; 0x6e2
 80190ea:	4283      	cmp	r3, r0
 80190ec:	d809      	bhi.n	8019102 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 80190ee:	f240 60df 	movw	r0, #1759	; 0x6df
 80190f2:	4283      	cmp	r3, r0
 80190f4:	f4bf af7d 	bcs.w	8018ff2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80190f8:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 80190fc:	2b05      	cmp	r3, #5
 80190fe:	d8d4      	bhi.n	80190aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019100:	e777      	b.n	8018ff2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019102:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8019106:	4283      	cmp	r3, r0
 8019108:	d09a      	beq.n	8019040 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801910a:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801910e:	4283      	cmp	r3, r0
 8019110:	e7ca      	b.n	80190a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8019112:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8019116:	d22b      	bcs.n	8019170 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8019118:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801911c:	4283      	cmp	r3, r0
 801911e:	d28f      	bcs.n	8019040 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019120:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8019124:	4283      	cmp	r3, r0
 8019126:	d816      	bhi.n	8019156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8019128:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801912c:	4283      	cmp	r3, r0
 801912e:	f4bf af60 	bcs.w	8018ff2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019132:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8019136:	4283      	cmp	r3, r0
 8019138:	d80a      	bhi.n	8019150 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801913a:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801913e:	4283      	cmp	r3, r0
 8019140:	f4bf af57 	bcs.w	8018ff2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019144:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8019148:	4283      	cmp	r3, r0
 801914a:	f43f af79 	beq.w	8019040 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801914e:	e7ac      	b.n	80190aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8019150:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8019154:	e7f8      	b.n	8019148 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8019156:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801915a:	4283      	cmp	r3, r0
 801915c:	d802      	bhi.n	8019164 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801915e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8019162:	e798      	b.n	8019096 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8019164:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8019168:	4283      	cmp	r3, r0
 801916a:	f47f af42 	bne.w	8018ff2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801916e:	e767      	b.n	8019040 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019170:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8019174:	4283      	cmp	r3, r0
 8019176:	f43f af63 	beq.w	8019040 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801917a:	d802      	bhi.n	8019182 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801917c:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8019180:	e7f2      	b.n	8019168 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8019182:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8019186:	4283      	cmp	r3, r0
 8019188:	d805      	bhi.n	8019196 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801918a:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801918e:	4283      	cmp	r3, r0
 8019190:	f4ff af2f 	bcc.w	8018ff2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019194:	e754      	b.n	8019040 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019196:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801919a:	4283      	cmp	r3, r0
 801919c:	e7af      	b.n	80190fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801919e:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 80191a2:	4617      	mov	r7, r2
 80191a4:	f102 0808 	add.w	r8, r2, #8
 80191a8:	4666      	mov	r6, ip
 80191aa:	6838      	ldr	r0, [r7, #0]
 80191ac:	3708      	adds	r7, #8
 80191ae:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80191b2:	46e6      	mov	lr, ip
 80191b4:	4547      	cmp	r7, r8
 80191b6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80191ba:	46f4      	mov	ip, lr
 80191bc:	d1f5      	bne.n	80191aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 80191be:	6838      	ldr	r0, [r7, #0]
 80191c0:	f8ce 0000 	str.w	r0, [lr]
 80191c4:	88b9      	ldrh	r1, [r7, #4]
 80191c6:	f8ae 1004 	strh.w	r1, [lr, #4]
 80191ca:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80191ce:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80191d2:	d009      	beq.n	80191e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 80191d4:	7b51      	ldrb	r1, [r2, #13]
 80191d6:	7992      	ldrb	r2, [r2, #6]
 80191d8:	0149      	lsls	r1, r1, #5
 80191da:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80191de:	4311      	orrs	r1, r2
 80191e0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80191e4:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80191e8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80191ec:	b2ad      	uxth	r5, r5
 80191ee:	d00d      	beq.n	801920c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 80191f0:	442b      	add	r3, r5
 80191f2:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80191f6:	b29b      	uxth	r3, r3
 80191f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80191fc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8019200:	10db      	asrs	r3, r3, #3
 8019202:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8019206:	4313      	orrs	r3, r2
 8019208:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801920c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8019210:	00cb      	lsls	r3, r1, #3
 8019212:	064f      	lsls	r7, r1, #25
 8019214:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019218:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801921c:	ea43 0302 	orr.w	r3, r3, r2
 8019220:	bf44      	itt	mi
 8019222:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019226:	b21b      	sxthmi	r3, r3
 8019228:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801922c:	1b5b      	subs	r3, r3, r5
 801922e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8019232:	4632      	mov	r2, r6
 8019234:	e6f9      	b.n	801902a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8019236:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801923a:	4617      	mov	r7, r2
 801923c:	f102 0908 	add.w	r9, r2, #8
 8019240:	4666      	mov	r6, ip
 8019242:	6838      	ldr	r0, [r7, #0]
 8019244:	3708      	adds	r7, #8
 8019246:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801924a:	46e0      	mov	r8, ip
 801924c:	454f      	cmp	r7, r9
 801924e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8019252:	46c4      	mov	ip, r8
 8019254:	d1f5      	bne.n	8019242 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8019256:	6838      	ldr	r0, [r7, #0]
 8019258:	f8c8 0000 	str.w	r0, [r8]
 801925c:	88b9      	ldrh	r1, [r7, #4]
 801925e:	f8a8 1004 	strh.w	r1, [r8, #4]
 8019262:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8019266:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801926a:	d009      	beq.n	8019280 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801926c:	7b51      	ldrb	r1, [r2, #13]
 801926e:	7992      	ldrb	r2, [r2, #6]
 8019270:	0149      	lsls	r1, r1, #5
 8019272:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8019276:	4311      	orrs	r1, r2
 8019278:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801927c:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8019280:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8019284:	d00e      	beq.n	80192a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8019286:	eba3 030e 	sub.w	r3, r3, lr
 801928a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801928e:	b29b      	uxth	r3, r3
 8019290:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8019294:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8019298:	10db      	asrs	r3, r3, #3
 801929a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801929e:	4313      	orrs	r3, r2
 80192a0:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80192a4:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80192a8:	00cb      	lsls	r3, r1, #3
 80192aa:	0648      	lsls	r0, r1, #25
 80192ac:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80192b0:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80192b4:	ea43 0302 	orr.w	r3, r3, r2
 80192b8:	bf44      	itt	mi
 80192ba:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80192be:	b21b      	sxthmi	r3, r3
 80192c0:	1b5d      	subs	r5, r3, r5
 80192c2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80192c6:	e7b4      	b.n	8019232 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

080192c8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80192c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80192cc:	461e      	mov	r6, r3
 80192ce:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80192d0:	4604      	mov	r4, r0
 80192d2:	4617      	mov	r7, r2
 80192d4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80192d8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80192dc:	f7ed f9ca 	bl	8006674 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80192e0:	4605      	mov	r5, r0
 80192e2:	b918      	cbnz	r0, 80192ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 80192e4:	6030      	str	r0, [r6, #0]
 80192e6:	4628      	mov	r0, r5
 80192e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192ec:	683b      	ldr	r3, [r7, #0]
 80192ee:	4601      	mov	r1, r0
 80192f0:	4638      	mov	r0, r7
 80192f2:	68db      	ldr	r3, [r3, #12]
 80192f4:	4798      	blx	r3
 80192f6:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 80192fa:	4602      	mov	r2, r0
 80192fc:	6030      	str	r0, [r6, #0]
 80192fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8019302:	d213      	bcs.n	801932c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8019304:	4643      	mov	r3, r8
 8019306:	4639      	mov	r1, r7
 8019308:	4620      	mov	r0, r4
 801930a:	f7ff fe39 	bl	8018f80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801930e:	6030      	str	r0, [r6, #0]
 8019310:	6833      	ldr	r3, [r6, #0]
 8019312:	b143      	cbz	r3, 8019326 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8019314:	7b5a      	ldrb	r2, [r3, #13]
 8019316:	7a9b      	ldrb	r3, [r3, #10]
 8019318:	0052      	lsls	r2, r2, #1
 801931a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801931e:	4313      	orrs	r3, r2
 8019320:	bf0c      	ite	eq
 8019322:	2301      	moveq	r3, #1
 8019324:	2300      	movne	r3, #0
 8019326:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801932a:	e7dc      	b.n	80192e6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801932c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8019330:	b29b      	uxth	r3, r3
 8019332:	2b7f      	cmp	r3, #127	; 0x7f
 8019334:	d804      	bhi.n	8019340 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8019336:	4639      	mov	r1, r7
 8019338:	4620      	mov	r0, r4
 801933a:	f7ff fd15 	bl	8018d68 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801933e:	e7e6      	b.n	801930e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8019340:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8019344:	2b00      	cmp	r3, #0
 8019346:	d0e3      	beq.n	8019310 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8019348:	f640 1302 	movw	r3, #2306	; 0x902
 801934c:	429d      	cmp	r5, r3
 801934e:	d1df      	bne.n	8019310 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8019350:	4601      	mov	r1, r0
 8019352:	4620      	mov	r0, r4
 8019354:	f7ff fcd9 	bl	8018d0a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8019358:	e7d9      	b.n	801930e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801935a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801935a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801935e:	461e      	mov	r6, r3
 8019360:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8019362:	4604      	mov	r4, r0
 8019364:	4617      	mov	r7, r2
 8019366:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801936a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801936e:	f7ed f981 	bl	8006674 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019372:	4605      	mov	r5, r0
 8019374:	b918      	cbnz	r0, 801937e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 8019376:	6030      	str	r0, [r6, #0]
 8019378:	4628      	mov	r0, r5
 801937a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801937e:	683b      	ldr	r3, [r7, #0]
 8019380:	4601      	mov	r1, r0
 8019382:	4638      	mov	r0, r7
 8019384:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8019388:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801938c:	47c8      	blx	r9
 801938e:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8019392:	4602      	mov	r2, r0
 8019394:	6030      	str	r0, [r6, #0]
 8019396:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801939a:	d213      	bcs.n	80193c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801939c:	4643      	mov	r3, r8
 801939e:	4639      	mov	r1, r7
 80193a0:	4620      	mov	r0, r4
 80193a2:	f7ff fded 	bl	8018f80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80193a6:	6030      	str	r0, [r6, #0]
 80193a8:	6833      	ldr	r3, [r6, #0]
 80193aa:	b143      	cbz	r3, 80193be <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 80193ac:	7b5a      	ldrb	r2, [r3, #13]
 80193ae:	7a9b      	ldrb	r3, [r3, #10]
 80193b0:	0052      	lsls	r2, r2, #1
 80193b2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80193b6:	4313      	orrs	r3, r2
 80193b8:	bf0c      	ite	eq
 80193ba:	2301      	moveq	r3, #1
 80193bc:	2300      	movne	r3, #0
 80193be:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 80193c2:	e7d9      	b.n	8019378 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 80193c4:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 80193c8:	b29b      	uxth	r3, r3
 80193ca:	2b7f      	cmp	r3, #127	; 0x7f
 80193cc:	d804      	bhi.n	80193d8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 80193ce:	4639      	mov	r1, r7
 80193d0:	4620      	mov	r0, r4
 80193d2:	f7ff fcc9 	bl	8018d68 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80193d6:	e7e6      	b.n	80193a6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 80193d8:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 80193dc:	2b00      	cmp	r3, #0
 80193de:	d0e3      	beq.n	80193a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 80193e0:	f640 1302 	movw	r3, #2306	; 0x902
 80193e4:	429d      	cmp	r5, r3
 80193e6:	d1df      	bne.n	80193a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 80193e8:	4601      	mov	r1, r0
 80193ea:	4620      	mov	r0, r4
 80193ec:	f7ff fc8d 	bl	8018d0a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80193f0:	e7d9      	b.n	80193a6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

080193f2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 80193f2:	b510      	push	{r4, lr}
 80193f4:	4604      	mov	r4, r0
 80193f6:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 80193fa:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80193fc:	b1e1      	cbz	r1, 8019438 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 80193fe:	2b0a      	cmp	r3, #10
 8019400:	d02d      	beq.n	801945e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8019402:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8019404:	3901      	subs	r1, #1
 8019406:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801940a:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801940c:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8019410:	1c51      	adds	r1, r2, #1
 8019412:	b289      	uxth	r1, r1
 8019414:	2901      	cmp	r1, #1
 8019416:	bf8a      	itet	hi
 8019418:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801941c:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801941e:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8019420:	1c5a      	adds	r2, r3, #1
 8019422:	8722      	strh	r2, [r4, #56]	; 0x38
 8019424:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8019426:	4413      	add	r3, r2
 8019428:	b29b      	uxth	r3, r3
 801942a:	2b09      	cmp	r3, #9
 801942c:	bf88      	it	hi
 801942e:	3b0a      	subhi	r3, #10
 8019430:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019434:	8458      	strh	r0, [r3, #34]	; 0x22
 8019436:	e7de      	b.n	80193f6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8019438:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801943a:	2b0a      	cmp	r3, #10
 801943c:	d00f      	beq.n	801945e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801943e:	4620      	mov	r0, r4
 8019440:	f7ff fc11 	bl	8018c66 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8019444:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8019446:	1c5a      	adds	r2, r3, #1
 8019448:	8722      	strh	r2, [r4, #56]	; 0x38
 801944a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801944c:	4413      	add	r3, r2
 801944e:	b29b      	uxth	r3, r3
 8019450:	2b09      	cmp	r3, #9
 8019452:	bf88      	it	hi
 8019454:	3b0a      	subhi	r3, #10
 8019456:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801945a:	8458      	strh	r0, [r3, #34]	; 0x22
 801945c:	e7ec      	b.n	8019438 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801945e:	bd10      	pop	{r4, pc}

08019460 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8019460:	b538      	push	{r3, r4, r5, lr}
 8019462:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8019464:	4604      	mov	r4, r0
 8019466:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801946a:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801946c:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801946e:	3a01      	subs	r2, #1
 8019470:	8702      	strh	r2, [r0, #56]	; 0x38
 8019472:	1c5a      	adds	r2, r3, #1
 8019474:	b292      	uxth	r2, r2
 8019476:	2a09      	cmp	r2, #9
 8019478:	bf8a      	itet	hi
 801947a:	3b09      	subhi	r3, #9
 801947c:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801947e:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8019480:	f7ff ffb7 	bl	80193f2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8019484:	8c23      	ldrh	r3, [r4, #32]
 8019486:	2b01      	cmp	r3, #1
 8019488:	bf9c      	itt	ls
 801948a:	3301      	addls	r3, #1
 801948c:	8423      	strhls	r3, [r4, #32]
 801948e:	8be3      	ldrh	r3, [r4, #30]
 8019490:	b90b      	cbnz	r3, 8019496 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8019492:	2302      	movs	r3, #2
 8019494:	83e3      	strh	r3, [r4, #30]
 8019496:	8be3      	ldrh	r3, [r4, #30]
 8019498:	4628      	mov	r0, r5
 801949a:	3b01      	subs	r3, #1
 801949c:	b29b      	uxth	r3, r3
 801949e:	83e3      	strh	r3, [r4, #30]
 80194a0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80194a4:	8365      	strh	r5, [r4, #26]
 80194a6:	bd38      	pop	{r3, r4, r5, pc}

080194a8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 80194a8:	428a      	cmp	r2, r1
 80194aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80194ae:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 80194b0:	d932      	bls.n	8019518 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 80194b2:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 80194b4:	1a54      	subs	r4, r2, r1
 80194b6:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 80194ba:	19ee      	adds	r6, r5, r7
 80194bc:	fa1f fe84 	uxth.w	lr, r4
 80194c0:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 80194c4:	3e01      	subs	r6, #1
 80194c6:	b2b4      	uxth	r4, r6
 80194c8:	eba4 090e 	sub.w	r9, r4, lr
 80194cc:	fa1f f989 	uxth.w	r9, r9
 80194d0:	2c09      	cmp	r4, #9
 80194d2:	4626      	mov	r6, r4
 80194d4:	bf88      	it	hi
 80194d6:	f1a4 060a 	subhi.w	r6, r4, #10
 80194da:	f1bc 0f00 	cmp.w	ip, #0
 80194de:	f104 34ff 	add.w	r4, r4, #4294967295
 80194e2:	bf08      	it	eq
 80194e4:	f04f 0c02 	moveq.w	ip, #2
 80194e8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80194ec:	b2a4      	uxth	r4, r4
 80194ee:	f10c 3cff 	add.w	ip, ip, #4294967295
 80194f2:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 80194f6:	454c      	cmp	r4, r9
 80194f8:	fa1f fc8c 	uxth.w	ip, ip
 80194fc:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8019500:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8019504:	d1e4      	bne.n	80194d0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8019506:	eba5 050e 	sub.w	r5, r5, lr
 801950a:	eb0e 0408 	add.w	r4, lr, r8
 801950e:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 8019512:	8705      	strh	r5, [r0, #56]	; 0x38
 8019514:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8019518:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801951a:	250a      	movs	r5, #10
 801951c:	1a64      	subs	r4, r4, r1
 801951e:	4439      	add	r1, r7
 8019520:	b289      	uxth	r1, r1
 8019522:	8704      	strh	r4, [r0, #56]	; 0x38
 8019524:	2909      	cmp	r1, #9
 8019526:	bf88      	it	hi
 8019528:	390a      	subhi	r1, #10
 801952a:	86c1      	strh	r1, [r0, #54]	; 0x36
 801952c:	b18a      	cbz	r2, 8019552 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801952e:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8019530:	3a01      	subs	r2, #1
 8019532:	3101      	adds	r1, #1
 8019534:	b292      	uxth	r2, r2
 8019536:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801953a:	8701      	strh	r1, [r0, #56]	; 0x38
 801953c:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801953e:	b901      	cbnz	r1, 8019542 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8019540:	86c5      	strh	r5, [r0, #54]	; 0x36
 8019542:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8019544:	3901      	subs	r1, #1
 8019546:	b289      	uxth	r1, r1
 8019548:	86c1      	strh	r1, [r0, #54]	; 0x36
 801954a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801954e:	844c      	strh	r4, [r1, #34]	; 0x22
 8019550:	e7ec      	b.n	801952c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 8019552:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019556:	f7ff bf4c 	b.w	80193f2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801955a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801955a:	b570      	push	{r4, r5, r6, lr}
 801955c:	2500      	movs	r5, #0
 801955e:	4295      	cmp	r5, r2
 8019560:	d011      	beq.n	8019586 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8019562:	8bc4      	ldrh	r4, [r0, #30]
 8019564:	f831 6b02 	ldrh.w	r6, [r1], #2
 8019568:	4414      	add	r4, r2
 801956a:	3c01      	subs	r4, #1
 801956c:	1b64      	subs	r4, r4, r5
 801956e:	b2a4      	uxth	r4, r4
 8019570:	2c01      	cmp	r4, #1
 8019572:	bf88      	it	hi
 8019574:	3c02      	subhi	r4, #2
 8019576:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801957a:	8b64      	ldrh	r4, [r4, #26]
 801957c:	42b4      	cmp	r4, r6
 801957e:	d117      	bne.n	80195b0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8019580:	3501      	adds	r5, #1
 8019582:	b2ad      	uxth	r5, r5
 8019584:	e7eb      	b.n	801955e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8019586:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801958a:	2400      	movs	r4, #0
 801958c:	4413      	add	r3, r2
 801958e:	b2a2      	uxth	r2, r4
 8019590:	429a      	cmp	r2, r3
 8019592:	da0f      	bge.n	80195b4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8019594:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8019596:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801959a:	3401      	adds	r4, #1
 801959c:	4432      	add	r2, r6
 801959e:	b292      	uxth	r2, r2
 80195a0:	2a09      	cmp	r2, #9
 80195a2:	bf88      	it	hi
 80195a4:	3a0a      	subhi	r2, #10
 80195a6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80195aa:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80195ac:	42aa      	cmp	r2, r5
 80195ae:	d0ee      	beq.n	801958e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 80195b0:	2000      	movs	r0, #0
 80195b2:	bd70      	pop	{r4, r5, r6, pc}
 80195b4:	2001      	movs	r0, #1
 80195b6:	e7fc      	b.n	80195b2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

080195b8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 80195b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195bc:	4605      	mov	r5, r0
 80195be:	4616      	mov	r6, r2
 80195c0:	1c8c      	adds	r4, r1, #2
 80195c2:	8809      	ldrh	r1, [r1, #0]
 80195c4:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 80195c8:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 80195cc:	42b3      	cmp	r3, r6
 80195ce:	d124      	bne.n	801961a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 80195d0:	f3c1 2903 	ubfx	r9, r1, #8, #4
 80195d4:	f3c1 1803 	ubfx	r8, r1, #4, #4
 80195d8:	f001 070f 	and.w	r7, r1, #15
 80195dc:	4652      	mov	r2, sl
 80195de:	f8cd 8000 	str.w	r8, [sp]
 80195e2:	464b      	mov	r3, r9
 80195e4:	4621      	mov	r1, r4
 80195e6:	4628      	mov	r0, r5
 80195e8:	f7ff ffb7 	bl	801955a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80195ec:	4683      	mov	fp, r0
 80195ee:	b168      	cbz	r0, 801960c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80195f0:	eb0a 0109 	add.w	r1, sl, r9
 80195f4:	463a      	mov	r2, r7
 80195f6:	4628      	mov	r0, r5
 80195f8:	4441      	add	r1, r8
 80195fa:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 80195fe:	4649      	mov	r1, r9
 8019600:	f7ff ff52 	bl	80194a8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8019604:	4658      	mov	r0, fp
 8019606:	b003      	add	sp, #12
 8019608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801960c:	eb07 010a 	add.w	r1, r7, sl
 8019610:	4449      	add	r1, r9
 8019612:	4441      	add	r1, r8
 8019614:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8019618:	e7d2      	b.n	80195c0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801961a:	f04f 0b00 	mov.w	fp, #0
 801961e:	e7f1      	b.n	8019604 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08019620 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8019620:	b570      	push	{r4, r5, r6, lr}
 8019622:	8810      	ldrh	r0, [r2, #0]
 8019624:	4298      	cmp	r0, r3
 8019626:	d817      	bhi.n	8019658 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019628:	1e48      	subs	r0, r1, #1
 801962a:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801962e:	4298      	cmp	r0, r3
 8019630:	d312      	bcc.n	8019658 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019632:	2400      	movs	r4, #0
 8019634:	428c      	cmp	r4, r1
 8019636:	d20f      	bcs.n	8019658 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8019638:	1860      	adds	r0, r4, r1
 801963a:	1040      	asrs	r0, r0, #1
 801963c:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8019640:	0085      	lsls	r5, r0, #2
 8019642:	42b3      	cmp	r3, r6
 8019644:	d902      	bls.n	801964c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8019646:	3001      	adds	r0, #1
 8019648:	b284      	uxth	r4, r0
 801964a:	e7f3      	b.n	8019634 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801964c:	d201      	bcs.n	8019652 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801964e:	b281      	uxth	r1, r0
 8019650:	e7f0      	b.n	8019634 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8019652:	442a      	add	r2, r5
 8019654:	8850      	ldrh	r0, [r2, #2]
 8019656:	bd70      	pop	{r4, r5, r6, pc}
 8019658:	2000      	movs	r0, #0
 801965a:	e7fc      	b.n	8019656 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801965c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801965c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019660:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8019662:	4604      	mov	r4, r0
 8019664:	260b      	movs	r6, #11
 8019666:	886f      	ldrh	r7, [r5, #2]
 8019668:	087f      	lsrs	r7, r7, #1
 801966a:	3e01      	subs	r6, #1
 801966c:	d013      	beq.n	8019696 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801966e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8019670:	462a      	mov	r2, r5
 8019672:	4639      	mov	r1, r7
 8019674:	4620      	mov	r0, r4
 8019676:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801967a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801967e:	4643      	mov	r3, r8
 8019680:	f7ff ffce 	bl	8019620 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8019684:	b138      	cbz	r0, 8019696 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8019686:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801968a:	4642      	mov	r2, r8
 801968c:	4620      	mov	r0, r4
 801968e:	f7ff ff93 	bl	80195b8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8019692:	2800      	cmp	r0, #0
 8019694:	d1e9      	bne.n	801966a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8019696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801969c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801969c:	b570      	push	{r4, r5, r6, lr}
 801969e:	694a      	ldr	r2, [r1, #20]
 80196a0:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80196a2:	684b      	ldr	r3, [r1, #4]
 80196a4:	1b54      	subs	r4, r2, r5
 80196a6:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 80196a8:	f000 8106 	beq.w	80198b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 80196ac:	1b9b      	subs	r3, r3, r6
 80196ae:	d003      	beq.n	80196b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80196b0:	4363      	muls	r3, r4
 80196b2:	2210      	movs	r2, #16
 80196b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80196b8:	680c      	ldr	r4, [r1, #0]
 80196ba:	698a      	ldr	r2, [r1, #24]
 80196bc:	1b65      	subs	r5, r4, r5
 80196be:	f000 80fd 	beq.w	80198bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 80196c2:	1b92      	subs	r2, r2, r6
 80196c4:	d003      	beq.n	80196ce <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80196c6:	436a      	muls	r2, r5
 80196c8:	2410      	movs	r4, #16
 80196ca:	fb92 f2f4 	sdiv	r2, r2, r4
 80196ce:	1a9b      	subs	r3, r3, r2
 80196d0:	ed9f 4a89 	vldr	s8, [pc, #548]	; 80198f8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 80196d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80196d8:	460a      	mov	r2, r1
 80196da:	ee07 3a90 	vmov	s15, r3
 80196de:	f100 040c 	add.w	r4, r0, #12
 80196e2:	4603      	mov	r3, r0
 80196e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80196e8:	ee67 7a84 	vmul.f32	s15, s15, s8
 80196ec:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80196f0:	eeb1 6a43 	vneg.f32	s12, s6
 80196f4:	edd2 7a02 	vldr	s15, [r2, #8]
 80196f8:	3214      	adds	r2, #20
 80196fa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80196fe:	ece3 6a01 	vstmia	r3!, {s13}
 8019702:	429c      	cmp	r4, r3
 8019704:	ed52 7a02 	vldr	s15, [r2, #-8]
 8019708:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801970c:	edc3 7a02 	vstr	s15, [r3, #8]
 8019710:	ed52 7a01 	vldr	s15, [r2, #-4]
 8019714:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019718:	edc3 7a05 	vstr	s15, [r3, #20]
 801971c:	d1ea      	bne.n	80196f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801971e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8019720:	698b      	ldr	r3, [r1, #24]
 8019722:	edd0 4a02 	vldr	s9, [r0, #8]
 8019726:	1a9b      	subs	r3, r3, r2
 8019728:	edd0 3a00 	vldr	s7, [r0]
 801972c:	edd0 6a01 	vldr	s13, [r0, #4]
 8019730:	ee07 3a90 	vmov	s15, r3
 8019734:	684b      	ldr	r3, [r1, #4]
 8019736:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801973a:	ed90 5a05 	vldr	s10, [r0, #20]
 801973e:	1a9b      	subs	r3, r3, r2
 8019740:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019744:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8019748:	ed90 2a03 	vldr	s4, [r0, #12]
 801974c:	ee07 3a10 	vmov	s14, r3
 8019750:	edd0 5a04 	vldr	s11, [r0, #16]
 8019754:	ee67 7a84 	vmul.f32	s15, s15, s8
 8019758:	ed90 1a07 	vldr	s2, [r0, #28]
 801975c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019760:	edd0 2a06 	vldr	s5, [r0, #24]
 8019764:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8019768:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801976c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019770:	ee32 5a45 	vsub.f32	s10, s4, s10
 8019774:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019778:	ee67 7a83 	vmul.f32	s15, s15, s6
 801977c:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8019780:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8019782:	694a      	ldr	r2, [r1, #20]
 8019784:	1b13      	subs	r3, r2, r4
 8019786:	ee07 3a10 	vmov	s14, r3
 801978a:	680b      	ldr	r3, [r1, #0]
 801978c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019790:	1b1b      	subs	r3, r3, r4
 8019792:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019796:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801979a:	ee07 3a10 	vmov	s14, r3
 801979e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80197a2:	ee27 7a04 	vmul.f32	s14, s14, s8
 80197a6:	eee6 4a87 	vfma.f32	s9, s13, s14
 80197aa:	ee64 4a86 	vmul.f32	s9, s9, s12
 80197ae:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 80197b2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80197b4:	698b      	ldr	r3, [r1, #24]
 80197b6:	1a9b      	subs	r3, r3, r2
 80197b8:	ee06 3a90 	vmov	s13, r3
 80197bc:	684b      	ldr	r3, [r1, #4]
 80197be:	1a9b      	subs	r3, r3, r2
 80197c0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80197c4:	ee07 3a10 	vmov	s14, r3
 80197c8:	ee66 6a84 	vmul.f32	s13, s13, s8
 80197cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80197d0:	ee65 6a66 	vnmul.f32	s13, s10, s13
 80197d4:	ee27 7a04 	vmul.f32	s14, s14, s8
 80197d8:	eee5 6a87 	vfma.f32	s13, s11, s14
 80197dc:	ee66 6a83 	vmul.f32	s13, s13, s6
 80197e0:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 80197e4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80197e6:	694a      	ldr	r2, [r1, #20]
 80197e8:	1b13      	subs	r3, r2, r4
 80197ea:	ee07 3a10 	vmov	s14, r3
 80197ee:	680b      	ldr	r3, [r1, #0]
 80197f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80197f4:	1b1b      	subs	r3, r3, r4
 80197f6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80197fa:	ee25 5a47 	vnmul.f32	s10, s10, s14
 80197fe:	ee07 3a10 	vmov	s14, r3
 8019802:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019806:	ee27 7a04 	vmul.f32	s14, s14, s8
 801980a:	eea5 5a87 	vfma.f32	s10, s11, s14
 801980e:	edd0 5a08 	vldr	s11, [r0, #32]
 8019812:	ee31 1a65 	vsub.f32	s2, s2, s11
 8019816:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801981a:	ee25 5a06 	vmul.f32	s10, s10, s12
 801981e:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8019822:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8019824:	698b      	ldr	r3, [r1, #24]
 8019826:	1a9b      	subs	r3, r3, r2
 8019828:	ee07 3a10 	vmov	s14, r3
 801982c:	684b      	ldr	r3, [r1, #4]
 801982e:	1a9b      	subs	r3, r3, r2
 8019830:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019834:	ee01 3a90 	vmov	s3, r3
 8019838:	ee27 7a04 	vmul.f32	s14, s14, s8
 801983c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8019840:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8019844:	ee61 1a84 	vmul.f32	s3, s3, s8
 8019848:	eea1 7a21 	vfma.f32	s14, s2, s3
 801984c:	ee27 7a03 	vmul.f32	s14, s14, s6
 8019850:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8019854:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8019856:	694a      	ldr	r2, [r1, #20]
 8019858:	1b13      	subs	r3, r2, r4
 801985a:	ee03 3a10 	vmov	s6, r3
 801985e:	680b      	ldr	r3, [r1, #0]
 8019860:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8019864:	1b1b      	subs	r3, r3, r4
 8019866:	ee23 3a04 	vmul.f32	s6, s6, s8
 801986a:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801986e:	ee03 3a10 	vmov	s6, r3
 8019872:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8019876:	ee23 4a04 	vmul.f32	s8, s6, s8
 801987a:	eee1 5a04 	vfma.f32	s11, s2, s8
 801987e:	ee25 6a86 	vmul.f32	s12, s11, s12
 8019882:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8019886:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801988a:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801988e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8019892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019896:	dd13      	ble.n	80198c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8019898:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801989c:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 80198a0:	63c3      	str	r3, [r0, #60]	; 0x3c
 80198a2:	eee3 7a87 	vfma.f32	s15, s7, s14
 80198a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80198aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198ae:	dd15      	ble.n	80198dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 80198b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80198b4:	6403      	str	r3, [r0, #64]	; 0x40
 80198b6:	bd70      	pop	{r4, r5, r6, pc}
 80198b8:	4623      	mov	r3, r4
 80198ba:	e6fd      	b.n	80196b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80198bc:	462a      	mov	r2, r5
 80198be:	e706      	b.n	80196ce <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80198c0:	d502      	bpl.n	80198c8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 80198c2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80198c6:	e7e9      	b.n	801989c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 80198c8:	ee22 2a64 	vnmul.f32	s4, s4, s9
 80198cc:	eea3 2a85 	vfma.f32	s4, s7, s10
 80198d0:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 80198d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198d8:	dade      	bge.n	8019898 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 80198da:	e7f2      	b.n	80198c2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 80198dc:	d502      	bpl.n	80198e4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 80198de:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80198e2:	e7e7      	b.n	80198b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 80198e4:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 80198e8:	eee3 4a86 	vfma.f32	s9, s7, s12
 80198ec:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80198f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198f4:	dadc      	bge.n	80198b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 80198f6:	e7f2      	b.n	80198de <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 80198f8:	3d800000 	.word	0x3d800000

080198fc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 80198fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019900:	2714      	movs	r7, #20
 8019902:	435f      	muls	r7, r3
 8019904:	eb02 0c07 	add.w	ip, r2, r7
 8019908:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801990c:	f115 0e0f 	adds.w	lr, r5, #15
 8019910:	f100 80a2 	bmi.w	8019a58 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8019914:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8019918:	9c08      	ldr	r4, [sp, #32]
 801991a:	2614      	movs	r6, #20
 801991c:	f8c0 e014 	str.w	lr, [r0, #20]
 8019920:	4366      	muls	r6, r4
 8019922:	eb02 0806 	add.w	r8, r2, r6
 8019926:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801992a:	f115 040f 	adds.w	r4, r5, #15
 801992e:	f100 809f 	bmi.w	8019a70 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8019932:	1124      	asrs	r4, r4, #4
 8019934:	eba4 040e 	sub.w	r4, r4, lr
 8019938:	6184      	str	r4, [r0, #24]
 801993a:	2c00      	cmp	r4, #0
 801993c:	f000 808a 	beq.w	8019a54 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8019940:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8019944:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8019948:	5995      	ldr	r5, [r2, r6]
 801994a:	eba4 0809 	sub.w	r8, r4, r9
 801994e:	59d4      	ldr	r4, [r2, r7]
 8019950:	eba5 0a04 	sub.w	sl, r5, r4
 8019954:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8019958:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801995c:	fb0e fe05 	mul.w	lr, lr, r5
 8019960:	fb0a ee19 	mls	lr, sl, r9, lr
 8019964:	fb08 e404 	mla	r4, r8, r4, lr
 8019968:	3c01      	subs	r4, #1
 801996a:	19a4      	adds	r4, r4, r6
 801996c:	f100 808c 	bmi.w	8019a88 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8019970:	fb94 fef6 	sdiv	lr, r4, r6
 8019974:	fb06 441e 	mls	r4, r6, lr, r4
 8019978:	f8c0 e000 	str.w	lr, [r0]
 801997c:	6104      	str	r4, [r0, #16]
 801997e:	2d00      	cmp	r5, #0
 8019980:	f2c0 8095 	blt.w	8019aae <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8019984:	fb95 f4f6 	sdiv	r4, r5, r6
 8019988:	fb06 5514 	mls	r5, r6, r4, r5
 801998c:	6044      	str	r4, [r0, #4]
 801998e:	6085      	str	r5, [r0, #8]
 8019990:	60c6      	str	r6, [r0, #12]
 8019992:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8019996:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801999a:	6945      	ldr	r5, [r0, #20]
 801999c:	59d2      	ldr	r2, [r2, r7]
 801999e:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 80199a2:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8019ad0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 80199a6:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 80199aa:	ee07 4a10 	vmov	s14, r4
 80199ae:	6804      	ldr	r4, [r0, #0]
 80199b0:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 80199b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80199b8:	ee07 2a90 	vmov	s15, r2
 80199bc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80199c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80199c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80199c8:	edd3 6a00 	vldr	s13, [r3]
 80199cc:	eee6 6a07 	vfma.f32	s13, s12, s14
 80199d0:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 80199d4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80199d8:	edc0 6a07 	vstr	s13, [r0, #28]
 80199dc:	edd0 6a01 	vldr	s13, [r0, #4]
 80199e0:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 80199e4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80199e8:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 80199ec:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80199f0:	ed80 6a08 	vstr	s12, [r0, #32]
 80199f4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80199f6:	6242      	str	r2, [r0, #36]	; 0x24
 80199f8:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 80199fc:	ed93 6a03 	vldr	s12, [r3, #12]
 8019a00:	eea5 6a87 	vfma.f32	s12, s11, s14
 8019a04:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8019a08:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8019a0c:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 8019a10:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8019a14:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8019a18:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8019a1c:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8019a20:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8019a22:	6302      	str	r2, [r0, #48]	; 0x30
 8019a24:	ed93 6a06 	vldr	s12, [r3, #24]
 8019a28:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8019a2c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8019a30:	eeb0 7a46 	vmov.f32	s14, s12
 8019a34:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8019a38:	eea6 7a27 	vfma.f32	s14, s12, s15
 8019a3c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8019a40:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8019a44:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8019a48:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019a4c:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 8019a50:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8019a52:	63c3      	str	r3, [r0, #60]	; 0x3c
 8019a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a58:	2410      	movs	r4, #16
 8019a5a:	f1c5 0501 	rsb	r5, r5, #1
 8019a5e:	fb9e fef4 	sdiv	lr, lr, r4
 8019a62:	f015 050f 	ands.w	r5, r5, #15
 8019a66:	bf18      	it	ne
 8019a68:	2501      	movne	r5, #1
 8019a6a:	ebae 0e05 	sub.w	lr, lr, r5
 8019a6e:	e753      	b.n	8019918 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8019a70:	f04f 0910 	mov.w	r9, #16
 8019a74:	f1c5 0501 	rsb	r5, r5, #1
 8019a78:	fb94 f4f9 	sdiv	r4, r4, r9
 8019a7c:	f015 050f 	ands.w	r5, r5, #15
 8019a80:	bf18      	it	ne
 8019a82:	2501      	movne	r5, #1
 8019a84:	1b64      	subs	r4, r4, r5
 8019a86:	e755      	b.n	8019934 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8019a88:	4264      	negs	r4, r4
 8019a8a:	fb94 fef6 	sdiv	lr, r4, r6
 8019a8e:	f1ce 0800 	rsb	r8, lr, #0
 8019a92:	fb06 441e 	mls	r4, r6, lr, r4
 8019a96:	f8c0 8000 	str.w	r8, [r0]
 8019a9a:	6104      	str	r4, [r0, #16]
 8019a9c:	2c00      	cmp	r4, #0
 8019a9e:	f43f af6e 	beq.w	801997e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8019aa2:	ea6f 0e0e 	mvn.w	lr, lr
 8019aa6:	1b34      	subs	r4, r6, r4
 8019aa8:	f8c0 e000 	str.w	lr, [r0]
 8019aac:	e766      	b.n	801997c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8019aae:	426d      	negs	r5, r5
 8019ab0:	fb95 f4f6 	sdiv	r4, r5, r6
 8019ab4:	f1c4 0e00 	rsb	lr, r4, #0
 8019ab8:	fb06 5514 	mls	r5, r6, r4, r5
 8019abc:	f8c0 e004 	str.w	lr, [r0, #4]
 8019ac0:	6085      	str	r5, [r0, #8]
 8019ac2:	2d00      	cmp	r5, #0
 8019ac4:	f43f af64 	beq.w	8019990 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8019ac8:	43e4      	mvns	r4, r4
 8019aca:	1b75      	subs	r5, r6, r5
 8019acc:	6044      	str	r4, [r0, #4]
 8019ace:	e75e      	b.n	801998e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8019ad0:	3d800000 	.word	0x3d800000

08019ad4 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8019ad4:	4602      	mov	r2, r0
 8019ad6:	b148      	cbz	r0, 8019aec <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8019ad8:	2300      	movs	r3, #0
 8019ada:	b298      	uxth	r0, r3
 8019adc:	3301      	adds	r3, #1
 8019ade:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8019ae2:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8019ae6:	2900      	cmp	r1, #0
 8019ae8:	d1f7      	bne.n	8019ada <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8019aea:	4770      	bx	lr
 8019aec:	4770      	bx	lr

08019aee <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8019aee:	b530      	push	{r4, r5, lr}
 8019af0:	4604      	mov	r4, r0
 8019af2:	b159      	cbz	r1, 8019b0c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8019af4:	b148      	cbz	r0, 8019b0a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8019af6:	2300      	movs	r3, #0
 8019af8:	b298      	uxth	r0, r3
 8019afa:	4282      	cmp	r2, r0
 8019afc:	d905      	bls.n	8019b0a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8019afe:	5ccd      	ldrb	r5, [r1, r3]
 8019b00:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8019b04:	3301      	adds	r3, #1
 8019b06:	2d00      	cmp	r5, #0
 8019b08:	d1f6      	bne.n	8019af8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8019b0a:	bd30      	pop	{r4, r5, pc}
 8019b0c:	4608      	mov	r0, r1
 8019b0e:	e7fc      	b.n	8019b0a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08019b10 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 8019b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b12:	468c      	mov	ip, r1
 8019b14:	b08b      	sub	sp, #44	; 0x2c
 8019b16:	2100      	movs	r1, #0
 8019b18:	ae01      	add	r6, sp, #4
 8019b1a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8019b1e:	211f      	movs	r1, #31
 8019b20:	fbb0 f7f3 	udiv	r7, r0, r3
 8019b24:	fb03 0517 	mls	r5, r3, r7, r0
 8019b28:	4638      	mov	r0, r7
 8019b2a:	b2ec      	uxtb	r4, r5
 8019b2c:	2d09      	cmp	r5, #9
 8019b2e:	bfd4      	ite	le
 8019b30:	3430      	addle	r4, #48	; 0x30
 8019b32:	3457      	addgt	r4, #87	; 0x57
 8019b34:	b2e4      	uxtb	r4, r4
 8019b36:	558c      	strb	r4, [r1, r6]
 8019b38:	1e4c      	subs	r4, r1, #1
 8019b3a:	b92f      	cbnz	r7, 8019b48 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 8019b3c:	4431      	add	r1, r6
 8019b3e:	4660      	mov	r0, ip
 8019b40:	f7ff ffd5 	bl	8019aee <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8019b44:	b00b      	add	sp, #44	; 0x2c
 8019b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b48:	4621      	mov	r1, r4
 8019b4a:	e7e9      	b.n	8019b20 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

08019b4c <_ZN8touchgfx7Unicode4itoaElPtti>:
 8019b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b4e:	4607      	mov	r7, r0
 8019b50:	b08b      	sub	sp, #44	; 0x2c
 8019b52:	4608      	mov	r0, r1
 8019b54:	b341      	cbz	r1, 8019ba8 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8019b56:	1e99      	subs	r1, r3, #2
 8019b58:	2922      	cmp	r1, #34	; 0x22
 8019b5a:	d825      	bhi.n	8019ba8 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8019b5c:	2100      	movs	r1, #0
 8019b5e:	463c      	mov	r4, r7
 8019b60:	261f      	movs	r6, #31
 8019b62:	f10d 0c04 	add.w	ip, sp, #4
 8019b66:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8019b6a:	1e71      	subs	r1, r6, #1
 8019b6c:	fb94 fef3 	sdiv	lr, r4, r3
 8019b70:	fb03 441e 	mls	r4, r3, lr, r4
 8019b74:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8019b78:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8019b7c:	b2ec      	uxtb	r4, r5
 8019b7e:	2d09      	cmp	r5, #9
 8019b80:	bfd4      	ite	le
 8019b82:	3430      	addle	r4, #48	; 0x30
 8019b84:	3457      	addgt	r4, #87	; 0x57
 8019b86:	b2e4      	uxtb	r4, r4
 8019b88:	f80c 4006 	strb.w	r4, [ip, r6]
 8019b8c:	4674      	mov	r4, lr
 8019b8e:	b96c      	cbnz	r4, 8019bac <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 8019b90:	2f00      	cmp	r7, #0
 8019b92:	da05      	bge.n	8019ba0 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 8019b94:	ab0a      	add	r3, sp, #40	; 0x28
 8019b96:	4419      	add	r1, r3
 8019b98:	232d      	movs	r3, #45	; 0x2d
 8019b9a:	f801 3c24 	strb.w	r3, [r1, #-36]
 8019b9e:	1eb1      	subs	r1, r6, #2
 8019ba0:	3101      	adds	r1, #1
 8019ba2:	4461      	add	r1, ip
 8019ba4:	f7ff ffa3 	bl	8019aee <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8019ba8:	b00b      	add	sp, #44	; 0x2c
 8019baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019bac:	460e      	mov	r6, r1
 8019bae:	e7dc      	b.n	8019b6a <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

08019bb0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 8019bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bb4:	b085      	sub	sp, #20
 8019bb6:	4691      	mov	r9, r2
 8019bb8:	6802      	ldr	r2, [r0, #0]
 8019bba:	4688      	mov	r8, r1
 8019bbc:	461c      	mov	r4, r3
 8019bbe:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8019bc2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8019bc6:	4683      	mov	fp, r0
 8019bc8:	4610      	mov	r0, r2
 8019bca:	9103      	str	r1, [sp, #12]
 8019bcc:	9302      	str	r3, [sp, #8]
 8019bce:	9201      	str	r2, [sp, #4]
 8019bd0:	f7ff ff80 	bl	8019ad4 <_ZN8touchgfx7Unicode6strlenEPKt>
 8019bd4:	f1b8 0f00 	cmp.w	r8, #0
 8019bd8:	bf0c      	ite	eq
 8019bda:	4684      	moveq	ip, r0
 8019bdc:	f100 0c01 	addne.w	ip, r0, #1
 8019be0:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 8019be4:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8019be8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8019bea:	fa1f fc8c 	uxth.w	ip, ip
 8019bee:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019bf0:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8019bf4:	9903      	ldr	r1, [sp, #12]
 8019bf6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8019bfa:	d041      	beq.n	8019c80 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8019bfc:	d834      	bhi.n	8019c68 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 8019bfe:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 8019c02:	d059      	beq.n	8019cb8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8019c04:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8019c08:	d03a      	beq.n	8019c80 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8019c0a:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 8019c0e:	d034      	beq.n	8019c7a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8019c10:	2400      	movs	r4, #0
 8019c12:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8019c16:	3a01      	subs	r2, #1
 8019c18:	b169      	cbz	r1, 8019c36 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8019c1a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019c1c:	458c      	cmp	ip, r1
 8019c1e:	da09      	bge.n	8019c34 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8019c20:	eba1 010c 	sub.w	r1, r1, ip
 8019c24:	b289      	uxth	r1, r1
 8019c26:	b933      	cbnz	r3, 8019c36 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8019c28:	2e00      	cmp	r6, #0
 8019c2a:	d051      	beq.n	8019cd0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8019c2c:	2800      	cmp	r0, #0
 8019c2e:	d04f      	beq.n	8019cd0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8019c30:	440c      	add	r4, r1
 8019c32:	b2a4      	uxth	r4, r4
 8019c34:	2100      	movs	r1, #0
 8019c36:	682b      	ldr	r3, [r5, #0]
 8019c38:	4293      	cmp	r3, r2
 8019c3a:	da07      	bge.n	8019c4c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8019c3c:	f1b8 0f00 	cmp.w	r8, #0
 8019c40:	d004      	beq.n	8019c4c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8019c42:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 8019c46:	682b      	ldr	r3, [r5, #0]
 8019c48:	3301      	adds	r3, #1
 8019c4a:	602b      	str	r3, [r5, #0]
 8019c4c:	2730      	movs	r7, #48	; 0x30
 8019c4e:	2c00      	cmp	r4, #0
 8019c50:	d04e      	beq.n	8019cf0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8019c52:	682e      	ldr	r6, [r5, #0]
 8019c54:	3c01      	subs	r4, #1
 8019c56:	42b2      	cmp	r2, r6
 8019c58:	b2a4      	uxth	r4, r4
 8019c5a:	dd49      	ble.n	8019cf0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8019c5c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8019c60:	682b      	ldr	r3, [r5, #0]
 8019c62:	3301      	adds	r3, #1
 8019c64:	602b      	str	r3, [r5, #0]
 8019c66:	e7f2      	b.n	8019c4e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 8019c68:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 8019c6c:	d01d      	beq.n	8019caa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 8019c6e:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 8019c72:	d002      	beq.n	8019c7a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8019c74:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 8019c78:	e7c9      	b.n	8019c0e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 8019c7a:	4684      	mov	ip, r0
 8019c7c:	f04f 0800 	mov.w	r8, #0
 8019c80:	2c00      	cmp	r4, #0
 8019c82:	d0c6      	beq.n	8019c12 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8019c84:	b947      	cbnz	r7, 8019c98 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8019c86:	2801      	cmp	r0, #1
 8019c88:	d106      	bne.n	8019c98 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8019c8a:	8814      	ldrh	r4, [r2, #0]
 8019c8c:	2c30      	cmp	r4, #48	; 0x30
 8019c8e:	bf02      	ittt	eq
 8019c90:	3202      	addeq	r2, #2
 8019c92:	4638      	moveq	r0, r7
 8019c94:	f8cb 2000 	streq.w	r2, [fp]
 8019c98:	45bc      	cmp	ip, r7
 8019c9a:	da14      	bge.n	8019cc6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8019c9c:	b2bf      	uxth	r7, r7
 8019c9e:	eba7 040c 	sub.w	r4, r7, ip
 8019ca2:	46bc      	mov	ip, r7
 8019ca4:	b2a4      	uxth	r4, r4
 8019ca6:	2600      	movs	r6, #0
 8019ca8:	e7b3      	b.n	8019c12 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8019caa:	4684      	mov	ip, r0
 8019cac:	b16c      	cbz	r4, 8019cca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 8019cae:	42b8      	cmp	r0, r7
 8019cb0:	dd00      	ble.n	8019cb4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 8019cb2:	b2b8      	uxth	r0, r7
 8019cb4:	2400      	movs	r4, #0
 8019cb6:	e003      	b.n	8019cc0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8019cb8:	f04f 0c01 	mov.w	ip, #1
 8019cbc:	2400      	movs	r4, #0
 8019cbe:	4660      	mov	r0, ip
 8019cc0:	4626      	mov	r6, r4
 8019cc2:	46a0      	mov	r8, r4
 8019cc4:	e7a5      	b.n	8019c12 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8019cc6:	2400      	movs	r4, #0
 8019cc8:	e7ed      	b.n	8019ca6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 8019cca:	4626      	mov	r6, r4
 8019ccc:	46a0      	mov	r8, r4
 8019cce:	e7a0      	b.n	8019c12 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8019cd0:	2900      	cmp	r1, #0
 8019cd2:	d0b0      	beq.n	8019c36 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8019cd4:	2720      	movs	r7, #32
 8019cd6:	682e      	ldr	r6, [r5, #0]
 8019cd8:	2900      	cmp	r1, #0
 8019cda:	d0ac      	beq.n	8019c36 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8019cdc:	3901      	subs	r1, #1
 8019cde:	4296      	cmp	r6, r2
 8019ce0:	b289      	uxth	r1, r1
 8019ce2:	daa7      	bge.n	8019c34 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8019ce4:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8019ce8:	682b      	ldr	r3, [r5, #0]
 8019cea:	3301      	adds	r3, #1
 8019cec:	602b      	str	r3, [r5, #0]
 8019cee:	e7f2      	b.n	8019cd6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 8019cf0:	b188      	cbz	r0, 8019d16 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8019cf2:	682b      	ldr	r3, [r5, #0]
 8019cf4:	3801      	subs	r0, #1
 8019cf6:	429a      	cmp	r2, r3
 8019cf8:	b280      	uxth	r0, r0
 8019cfa:	dd0c      	ble.n	8019d16 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8019cfc:	f8db 3000 	ldr.w	r3, [fp]
 8019d00:	1c9c      	adds	r4, r3, #2
 8019d02:	f8cb 4000 	str.w	r4, [fp]
 8019d06:	881c      	ldrh	r4, [r3, #0]
 8019d08:	682b      	ldr	r3, [r5, #0]
 8019d0a:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 8019d0e:	682b      	ldr	r3, [r5, #0]
 8019d10:	3301      	adds	r3, #1
 8019d12:	602b      	str	r3, [r5, #0]
 8019d14:	e7ec      	b.n	8019cf0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8019d16:	2620      	movs	r6, #32
 8019d18:	b151      	cbz	r1, 8019d30 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8019d1a:	6828      	ldr	r0, [r5, #0]
 8019d1c:	3901      	subs	r1, #1
 8019d1e:	4282      	cmp	r2, r0
 8019d20:	b289      	uxth	r1, r1
 8019d22:	dd05      	ble.n	8019d30 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8019d24:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8019d28:	682b      	ldr	r3, [r5, #0]
 8019d2a:	3301      	adds	r3, #1
 8019d2c:	602b      	str	r3, [r5, #0]
 8019d2e:	e7f3      	b.n	8019d18 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 8019d30:	b005      	add	sp, #20
 8019d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019d36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 8019d36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019d3a:	2400      	movs	r4, #0
 8019d3c:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 8019d40:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 8019d44:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 8019d48:	8014      	strh	r4, [r2, #0]
 8019d4a:	701c      	strb	r4, [r3, #0]
 8019d4c:	f888 4000 	strb.w	r4, [r8]
 8019d50:	f88c 4000 	strb.w	r4, [ip]
 8019d54:	f88e 4000 	strb.w	r4, [lr]
 8019d58:	703c      	strb	r4, [r7, #0]
 8019d5a:	6804      	ldr	r4, [r0, #0]
 8019d5c:	b1a4      	cbz	r4, 8019d88 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 8019d5e:	8824      	ldrh	r4, [r4, #0]
 8019d60:	f04f 0901 	mov.w	r9, #1
 8019d64:	b314      	cbz	r4, 8019dac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8019d66:	2c2b      	cmp	r4, #43	; 0x2b
 8019d68:	d001      	beq.n	8019d6e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 8019d6a:	2c20      	cmp	r4, #32
 8019d6c:	d110      	bne.n	8019d90 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 8019d6e:	8014      	strh	r4, [r2, #0]
 8019d70:	6804      	ldr	r4, [r0, #0]
 8019d72:	b10c      	cbz	r4, 8019d78 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 8019d74:	3402      	adds	r4, #2
 8019d76:	6004      	str	r4, [r0, #0]
 8019d78:	680c      	ldr	r4, [r1, #0]
 8019d7a:	b10c      	cbz	r4, 8019d80 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 8019d7c:	3401      	adds	r4, #1
 8019d7e:	600c      	str	r4, [r1, #0]
 8019d80:	6804      	ldr	r4, [r0, #0]
 8019d82:	b17c      	cbz	r4, 8019da4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 8019d84:	8824      	ldrh	r4, [r4, #0]
 8019d86:	e7ed      	b.n	8019d64 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8019d88:	680c      	ldr	r4, [r1, #0]
 8019d8a:	b17c      	cbz	r4, 8019dac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8019d8c:	7824      	ldrb	r4, [r4, #0]
 8019d8e:	e7e7      	b.n	8019d60 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 8019d90:	2c2d      	cmp	r4, #45	; 0x2d
 8019d92:	d102      	bne.n	8019d9a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 8019d94:	f883 9000 	strb.w	r9, [r3]
 8019d98:	e7ea      	b.n	8019d70 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8019d9a:	2c23      	cmp	r4, #35	; 0x23
 8019d9c:	d107      	bne.n	8019dae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 8019d9e:	f888 9000 	strb.w	r9, [r8]
 8019da2:	e7e5      	b.n	8019d70 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8019da4:	680c      	ldr	r4, [r1, #0]
 8019da6:	b10c      	cbz	r4, 8019dac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8019da8:	7824      	ldrb	r4, [r4, #0]
 8019daa:	e7db      	b.n	8019d64 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8019dac:	2400      	movs	r4, #0
 8019dae:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8019db2:	2b09      	cmp	r3, #9
 8019db4:	d901      	bls.n	8019dba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 8019db6:	2c2a      	cmp	r4, #42	; 0x2a
 8019db8:	d122      	bne.n	8019e00 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8019dba:	2301      	movs	r3, #1
 8019dbc:	2c30      	cmp	r4, #48	; 0x30
 8019dbe:	f88e 3000 	strb.w	r3, [lr]
 8019dc2:	d10d      	bne.n	8019de0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8019dc4:	f88c 3000 	strb.w	r3, [ip]
 8019dc8:	6803      	ldr	r3, [r0, #0]
 8019dca:	b10b      	cbz	r3, 8019dd0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8019dcc:	3302      	adds	r3, #2
 8019dce:	6003      	str	r3, [r0, #0]
 8019dd0:	680b      	ldr	r3, [r1, #0]
 8019dd2:	b10b      	cbz	r3, 8019dd8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8019dd4:	3301      	adds	r3, #1
 8019dd6:	600b      	str	r3, [r1, #0]
 8019dd8:	6803      	ldr	r3, [r0, #0]
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	d02f      	beq.n	8019e3e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 8019dde:	881c      	ldrh	r4, [r3, #0]
 8019de0:	2c2a      	cmp	r4, #42	; 0x2a
 8019de2:	d135      	bne.n	8019e50 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8019de4:	f04f 33ff 	mov.w	r3, #4294967295
 8019de8:	6033      	str	r3, [r6, #0]
 8019dea:	6803      	ldr	r3, [r0, #0]
 8019dec:	b10b      	cbz	r3, 8019df2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 8019dee:	3302      	adds	r3, #2
 8019df0:	6003      	str	r3, [r0, #0]
 8019df2:	680b      	ldr	r3, [r1, #0]
 8019df4:	b10b      	cbz	r3, 8019dfa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8019df6:	3301      	adds	r3, #1
 8019df8:	600b      	str	r3, [r1, #0]
 8019dfa:	6803      	ldr	r3, [r0, #0]
 8019dfc:	b31b      	cbz	r3, 8019e46 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 8019dfe:	881c      	ldrh	r4, [r3, #0]
 8019e00:	2c2e      	cmp	r4, #46	; 0x2e
 8019e02:	d11a      	bne.n	8019e3a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8019e04:	2301      	movs	r3, #1
 8019e06:	703b      	strb	r3, [r7, #0]
 8019e08:	6803      	ldr	r3, [r0, #0]
 8019e0a:	b10b      	cbz	r3, 8019e10 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 8019e0c:	3302      	adds	r3, #2
 8019e0e:	6003      	str	r3, [r0, #0]
 8019e10:	680b      	ldr	r3, [r1, #0]
 8019e12:	b10b      	cbz	r3, 8019e18 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8019e14:	3301      	adds	r3, #1
 8019e16:	600b      	str	r3, [r1, #0]
 8019e18:	6803      	ldr	r3, [r0, #0]
 8019e1a:	2b00      	cmp	r3, #0
 8019e1c:	d036      	beq.n	8019e8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 8019e1e:	881b      	ldrh	r3, [r3, #0]
 8019e20:	2b2a      	cmp	r3, #42	; 0x2a
 8019e22:	d137      	bne.n	8019e94 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8019e24:	f04f 33ff 	mov.w	r3, #4294967295
 8019e28:	602b      	str	r3, [r5, #0]
 8019e2a:	6803      	ldr	r3, [r0, #0]
 8019e2c:	b10b      	cbz	r3, 8019e32 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 8019e2e:	3302      	adds	r3, #2
 8019e30:	6003      	str	r3, [r0, #0]
 8019e32:	680b      	ldr	r3, [r1, #0]
 8019e34:	b10b      	cbz	r3, 8019e3a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8019e36:	3301      	adds	r3, #1
 8019e38:	600b      	str	r3, [r1, #0]
 8019e3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019e3e:	680c      	ldr	r4, [r1, #0]
 8019e40:	b134      	cbz	r4, 8019e50 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8019e42:	7824      	ldrb	r4, [r4, #0]
 8019e44:	e7cc      	b.n	8019de0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8019e46:	680b      	ldr	r3, [r1, #0]
 8019e48:	2b00      	cmp	r3, #0
 8019e4a:	d0f6      	beq.n	8019e3a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8019e4c:	781c      	ldrb	r4, [r3, #0]
 8019e4e:	e7d7      	b.n	8019e00 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8019e50:	2300      	movs	r3, #0
 8019e52:	220a      	movs	r2, #10
 8019e54:	6033      	str	r3, [r6, #0]
 8019e56:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8019e5a:	fa1f f38c 	uxth.w	r3, ip
 8019e5e:	2b09      	cmp	r3, #9
 8019e60:	d8ce      	bhi.n	8019e00 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8019e62:	6833      	ldr	r3, [r6, #0]
 8019e64:	fb02 c303 	mla	r3, r2, r3, ip
 8019e68:	6033      	str	r3, [r6, #0]
 8019e6a:	6803      	ldr	r3, [r0, #0]
 8019e6c:	b10b      	cbz	r3, 8019e72 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 8019e6e:	3302      	adds	r3, #2
 8019e70:	6003      	str	r3, [r0, #0]
 8019e72:	680b      	ldr	r3, [r1, #0]
 8019e74:	b10b      	cbz	r3, 8019e7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 8019e76:	3301      	adds	r3, #1
 8019e78:	600b      	str	r3, [r1, #0]
 8019e7a:	6803      	ldr	r3, [r0, #0]
 8019e7c:	b10b      	cbz	r3, 8019e82 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 8019e7e:	881c      	ldrh	r4, [r3, #0]
 8019e80:	e7e9      	b.n	8019e56 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8019e82:	680c      	ldr	r4, [r1, #0]
 8019e84:	2c00      	cmp	r4, #0
 8019e86:	d0e6      	beq.n	8019e56 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8019e88:	7824      	ldrb	r4, [r4, #0]
 8019e8a:	e7e4      	b.n	8019e56 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8019e8c:	680b      	ldr	r3, [r1, #0]
 8019e8e:	b10b      	cbz	r3, 8019e94 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8019e90:	781b      	ldrb	r3, [r3, #0]
 8019e92:	e7c5      	b.n	8019e20 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8019e94:	2200      	movs	r2, #0
 8019e96:	240a      	movs	r4, #10
 8019e98:	602a      	str	r2, [r5, #0]
 8019e9a:	3b30      	subs	r3, #48	; 0x30
 8019e9c:	682a      	ldr	r2, [r5, #0]
 8019e9e:	b29e      	uxth	r6, r3
 8019ea0:	2e09      	cmp	r6, #9
 8019ea2:	d813      	bhi.n	8019ecc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 8019ea4:	fb04 3302 	mla	r3, r4, r2, r3
 8019ea8:	602b      	str	r3, [r5, #0]
 8019eaa:	6803      	ldr	r3, [r0, #0]
 8019eac:	b10b      	cbz	r3, 8019eb2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 8019eae:	3302      	adds	r3, #2
 8019eb0:	6003      	str	r3, [r0, #0]
 8019eb2:	680b      	ldr	r3, [r1, #0]
 8019eb4:	b10b      	cbz	r3, 8019eba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 8019eb6:	3301      	adds	r3, #1
 8019eb8:	600b      	str	r3, [r1, #0]
 8019eba:	6803      	ldr	r3, [r0, #0]
 8019ebc:	b10b      	cbz	r3, 8019ec2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 8019ebe:	881b      	ldrh	r3, [r3, #0]
 8019ec0:	e7eb      	b.n	8019e9a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8019ec2:	680b      	ldr	r3, [r1, #0]
 8019ec4:	2b00      	cmp	r3, #0
 8019ec6:	d0e8      	beq.n	8019e9a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8019ec8:	781b      	ldrb	r3, [r3, #0]
 8019eca:	e7e6      	b.n	8019e9a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8019ecc:	2a06      	cmp	r2, #6
 8019ece:	bfa8      	it	ge
 8019ed0:	2206      	movge	r2, #6
 8019ed2:	602a      	str	r2, [r5, #0]
 8019ed4:	e7b1      	b.n	8019e3a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

08019ed6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 8019ed6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019eda:	b0a3      	sub	sp, #140	; 0x8c
 8019edc:	2600      	movs	r6, #0
 8019ede:	4607      	mov	r7, r0
 8019ee0:	4688      	mov	r8, r1
 8019ee2:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8019ee6:	4631      	mov	r1, r6
 8019ee8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8019eea:	4648      	mov	r0, r9
 8019eec:	960d      	str	r6, [sp, #52]	; 0x34
 8019eee:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8019ef2:	2242      	movs	r2, #66	; 0x42
 8019ef4:	f009 f860 	bl	8022fb8 <memset>
 8019ef8:	b15f      	cbz	r7, 8019f12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 8019efa:	f108 3aff 	add.w	sl, r8, #4294967295
 8019efe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019f00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019f02:	b152      	cbz	r2, 8019f1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8019f04:	8812      	ldrh	r2, [r2, #0]
 8019f06:	b10a      	cbz	r2, 8019f0c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8019f08:	459a      	cmp	sl, r3
 8019f0a:	dc2e      	bgt.n	8019f6a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 8019f0c:	2200      	movs	r2, #0
 8019f0e:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8019f12:	4638      	mov	r0, r7
 8019f14:	b023      	add	sp, #140	; 0x8c
 8019f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f1a:	9a08      	ldr	r2, [sp, #32]
 8019f1c:	2a00      	cmp	r2, #0
 8019f1e:	d0f5      	beq.n	8019f0c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8019f20:	7812      	ldrb	r2, [r2, #0]
 8019f22:	e7f0      	b.n	8019f06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8019f24:	2d00      	cmp	r5, #0
 8019f26:	d0ea      	beq.n	8019efe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8019f28:	782a      	ldrb	r2, [r5, #0]
 8019f2a:	b142      	cbz	r2, 8019f3e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 8019f2c:	2a25      	cmp	r2, #37	; 0x25
 8019f2e:	d001      	beq.n	8019f34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 8019f30:	459a      	cmp	sl, r3
 8019f32:	dc08      	bgt.n	8019f46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8019f34:	f1bb 0f00 	cmp.w	fp, #0
 8019f38:	d121      	bne.n	8019f7e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 8019f3a:	2d00      	cmp	r5, #0
 8019f3c:	d0df      	beq.n	8019efe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8019f3e:	782a      	ldrb	r2, [r5, #0]
 8019f40:	f04f 0b00 	mov.w	fp, #0
 8019f44:	e01d      	b.n	8019f82 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8019f46:	f1bb 0f00 	cmp.w	fp, #0
 8019f4a:	d077      	beq.n	801a03c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 8019f4c:	f8bb 2000 	ldrh.w	r2, [fp]
 8019f50:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8019f54:	f1bb 0f00 	cmp.w	fp, #0
 8019f58:	d002      	beq.n	8019f60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8019f5a:	f10b 0202 	add.w	r2, fp, #2
 8019f5e:	9209      	str	r2, [sp, #36]	; 0x24
 8019f60:	b10d      	cbz	r5, 8019f66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 8019f62:	3501      	adds	r5, #1
 8019f64:	9508      	str	r5, [sp, #32]
 8019f66:	3301      	adds	r3, #1
 8019f68:	930d      	str	r3, [sp, #52]	; 0x34
 8019f6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019f6c:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 8019f70:	f1bb 0f00 	cmp.w	fp, #0
 8019f74:	d0d6      	beq.n	8019f24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 8019f76:	f8bb 2000 	ldrh.w	r2, [fp]
 8019f7a:	2a00      	cmp	r2, #0
 8019f7c:	d1d6      	bne.n	8019f2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 8019f7e:	f8bb 2000 	ldrh.w	r2, [fp]
 8019f82:	2a00      	cmp	r2, #0
 8019f84:	d0bb      	beq.n	8019efe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8019f86:	459a      	cmp	sl, r3
 8019f88:	ddb9      	ble.n	8019efe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8019f8a:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 8019f8e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8019f92:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 8019f96:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 8019f9a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 8019f9e:	960e      	str	r6, [sp, #56]	; 0x38
 8019fa0:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 8019fa4:	960f      	str	r6, [sp, #60]	; 0x3c
 8019fa6:	f1bb 0f00 	cmp.w	fp, #0
 8019faa:	d002      	beq.n	8019fb2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8019fac:	f10b 0302 	add.w	r3, fp, #2
 8019fb0:	9309      	str	r3, [sp, #36]	; 0x24
 8019fb2:	b10d      	cbz	r5, 8019fb8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 8019fb4:	1c6b      	adds	r3, r5, #1
 8019fb6:	9308      	str	r3, [sp, #32]
 8019fb8:	ab0f      	add	r3, sp, #60	; 0x3c
 8019fba:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8019fbe:	a908      	add	r1, sp, #32
 8019fc0:	a809      	add	r0, sp, #36	; 0x24
 8019fc2:	9305      	str	r3, [sp, #20]
 8019fc4:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 8019fc8:	9304      	str	r3, [sp, #16]
 8019fca:	ab0e      	add	r3, sp, #56	; 0x38
 8019fcc:	9303      	str	r3, [sp, #12]
 8019fce:	ab0c      	add	r3, sp, #48	; 0x30
 8019fd0:	9302      	str	r3, [sp, #8]
 8019fd2:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8019fd6:	9301      	str	r3, [sp, #4]
 8019fd8:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8019fdc:	9300      	str	r3, [sp, #0]
 8019fde:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 8019fe2:	f7ff fea8 	bl	8019d36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8019fe6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019fe8:	2b00      	cmp	r3, #0
 8019fea:	bfbf      	itttt	lt
 8019fec:	6823      	ldrlt	r3, [r4, #0]
 8019fee:	3404      	addlt	r4, #4
 8019ff0:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8019ff4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8019ff6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019ff8:	2b00      	cmp	r3, #0
 8019ffa:	bfbe      	ittt	lt
 8019ffc:	6823      	ldrlt	r3, [r4, #0]
 8019ffe:	3404      	addlt	r4, #4
 801a000:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801a004:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801a008:	bfb8      	it	lt
 801a00a:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801a00c:	b1d9      	cbz	r1, 801a046 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801a00e:	880b      	ldrh	r3, [r1, #0]
 801a010:	2b69      	cmp	r3, #105	; 0x69
 801a012:	d01f      	beq.n	801a054 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801a014:	d82f      	bhi.n	801a076 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801a016:	2b58      	cmp	r3, #88	; 0x58
 801a018:	d01c      	beq.n	801a054 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801a01a:	d818      	bhi.n	801a04e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801a01c:	2b25      	cmp	r3, #37	; 0x25
 801a01e:	d034      	beq.n	801a08a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801a020:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a022:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801a026:	f1bb 0f00 	cmp.w	fp, #0
 801a02a:	f000 80b7 	beq.w	801a19c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801a02e:	f8bb 5000 	ldrh.w	r5, [fp]
 801a032:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801a036:	3301      	adds	r3, #1
 801a038:	930d      	str	r3, [sp, #52]	; 0x34
 801a03a:	e029      	b.n	801a090 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801a03c:	b10d      	cbz	r5, 801a042 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801a03e:	782a      	ldrb	r2, [r5, #0]
 801a040:	e786      	b.n	8019f50 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801a042:	462a      	mov	r2, r5
 801a044:	e784      	b.n	8019f50 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801a046:	2a00      	cmp	r2, #0
 801a048:	d0ea      	beq.n	801a020 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801a04a:	7813      	ldrb	r3, [r2, #0]
 801a04c:	e7e0      	b.n	801a010 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801a04e:	3b63      	subs	r3, #99	; 0x63
 801a050:	2b01      	cmp	r3, #1
 801a052:	d8e5      	bhi.n	801a020 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801a054:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801a058:	b329      	cbz	r1, 801a0a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801a05a:	880b      	ldrh	r3, [r1, #0]
 801a05c:	2b69      	cmp	r3, #105	; 0x69
 801a05e:	d063      	beq.n	801a128 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801a060:	d825      	bhi.n	801a0ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801a062:	2b63      	cmp	r3, #99	; 0x63
 801a064:	d038      	beq.n	801a0d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801a066:	2b64      	cmp	r3, #100	; 0x64
 801a068:	d05e      	beq.n	801a128 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801a06a:	2b58      	cmp	r3, #88	; 0x58
 801a06c:	d07a      	beq.n	801a164 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801a06e:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801a072:	4625      	mov	r5, r4
 801a074:	e036      	b.n	801a0e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801a076:	2b73      	cmp	r3, #115	; 0x73
 801a078:	d0ec      	beq.n	801a054 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801a07a:	d802      	bhi.n	801a082 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801a07c:	2b6f      	cmp	r3, #111	; 0x6f
 801a07e:	d1cf      	bne.n	801a020 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801a080:	e7e8      	b.n	801a054 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801a082:	2b75      	cmp	r3, #117	; 0x75
 801a084:	d0e6      	beq.n	801a054 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801a086:	2b78      	cmp	r3, #120	; 0x78
 801a088:	e7f9      	b.n	801a07e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801a08a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a08c:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801a090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a092:	b10b      	cbz	r3, 801a098 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801a094:	3302      	adds	r3, #2
 801a096:	9309      	str	r3, [sp, #36]	; 0x24
 801a098:	9b08      	ldr	r3, [sp, #32]
 801a09a:	2b00      	cmp	r3, #0
 801a09c:	f43f af2f 	beq.w	8019efe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801a0a0:	3301      	adds	r3, #1
 801a0a2:	9308      	str	r3, [sp, #32]
 801a0a4:	e72b      	b.n	8019efe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801a0a6:	2a00      	cmp	r2, #0
 801a0a8:	d0e1      	beq.n	801a06e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801a0aa:	7813      	ldrb	r3, [r2, #0]
 801a0ac:	e7d6      	b.n	801a05c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801a0ae:	2b73      	cmp	r3, #115	; 0x73
 801a0b0:	d036      	beq.n	801a120 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801a0b2:	d807      	bhi.n	801a0c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801a0b4:	2b6f      	cmp	r3, #111	; 0x6f
 801a0b6:	d1da      	bne.n	801a06e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801a0b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a0ba:	1d25      	adds	r5, r4, #4
 801a0bc:	2308      	movs	r3, #8
 801a0be:	eba8 0202 	sub.w	r2, r8, r2
 801a0c2:	e049      	b.n	801a158 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801a0c4:	2b75      	cmp	r3, #117	; 0x75
 801a0c6:	d042      	beq.n	801a14e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801a0c8:	2b78      	cmp	r3, #120	; 0x78
 801a0ca:	d1d0      	bne.n	801a06e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801a0cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a0ce:	1d25      	adds	r5, r4, #4
 801a0d0:	2310      	movs	r3, #16
 801a0d2:	eba8 0202 	sub.w	r2, r8, r2
 801a0d6:	e03f      	b.n	801a158 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801a0d8:	6823      	ldr	r3, [r4, #0]
 801a0da:	1d25      	adds	r5, r4, #4
 801a0dc:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801a0e0:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801a0e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a0e6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801a0ea:	2b00      	cmp	r3, #0
 801a0ec:	d051      	beq.n	801a192 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801a0ee:	881a      	ldrh	r2, [r3, #0]
 801a0f0:	a80d      	add	r0, sp, #52	; 0x34
 801a0f2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801a0f6:	462c      	mov	r4, r5
 801a0f8:	9005      	str	r0, [sp, #20]
 801a0fa:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801a0fe:	9004      	str	r0, [sp, #16]
 801a100:	980e      	ldr	r0, [sp, #56]	; 0x38
 801a102:	9003      	str	r0, [sp, #12]
 801a104:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801a108:	9002      	str	r0, [sp, #8]
 801a10a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801a10c:	9001      	str	r0, [sp, #4]
 801a10e:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801a112:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801a116:	9000      	str	r0, [sp, #0]
 801a118:	a810      	add	r0, sp, #64	; 0x40
 801a11a:	f7ff fd49 	bl	8019bb0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801a11e:	e7b7      	b.n	801a090 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801a120:	1d25      	adds	r5, r4, #4
 801a122:	6823      	ldr	r3, [r4, #0]
 801a124:	9310      	str	r3, [sp, #64]	; 0x40
 801a126:	e7dd      	b.n	801a0e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801a128:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a12a:	230a      	movs	r3, #10
 801a12c:	4649      	mov	r1, r9
 801a12e:	6820      	ldr	r0, [r4, #0]
 801a130:	eba8 0202 	sub.w	r2, r8, r2
 801a134:	1d25      	adds	r5, r4, #4
 801a136:	b292      	uxth	r2, r2
 801a138:	f7ff fd08 	bl	8019b4c <_ZN8touchgfx7Unicode4itoaElPtti>
 801a13c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801a140:	2b2d      	cmp	r3, #45	; 0x2d
 801a142:	d1cf      	bne.n	801a0e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801a144:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801a148:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a14a:	3302      	adds	r3, #2
 801a14c:	e7ea      	b.n	801a124 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801a14e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a150:	1d25      	adds	r5, r4, #4
 801a152:	230a      	movs	r3, #10
 801a154:	eba8 0202 	sub.w	r2, r8, r2
 801a158:	b292      	uxth	r2, r2
 801a15a:	4649      	mov	r1, r9
 801a15c:	6820      	ldr	r0, [r4, #0]
 801a15e:	f7ff fcd7 	bl	8019b10 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801a162:	e7bf      	b.n	801a0e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801a164:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a166:	2310      	movs	r3, #16
 801a168:	4649      	mov	r1, r9
 801a16a:	6820      	ldr	r0, [r4, #0]
 801a16c:	eba8 0202 	sub.w	r2, r8, r2
 801a170:	1d25      	adds	r5, r4, #4
 801a172:	b292      	uxth	r2, r2
 801a174:	f7ff fccc 	bl	8019b10 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801a178:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801a17c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801a180:	2b00      	cmp	r3, #0
 801a182:	d0af      	beq.n	801a0e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801a184:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801a188:	2919      	cmp	r1, #25
 801a18a:	d8f7      	bhi.n	801a17c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801a18c:	3b20      	subs	r3, #32
 801a18e:	8013      	strh	r3, [r2, #0]
 801a190:	e7f4      	b.n	801a17c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801a192:	9a08      	ldr	r2, [sp, #32]
 801a194:	2a00      	cmp	r2, #0
 801a196:	d0ab      	beq.n	801a0f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801a198:	7812      	ldrb	r2, [r2, #0]
 801a19a:	e7a9      	b.n	801a0f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801a19c:	2d00      	cmp	r5, #0
 801a19e:	f43f af48 	beq.w	801a032 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801a1a2:	782d      	ldrb	r5, [r5, #0]
 801a1a4:	e745      	b.n	801a032 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801a1a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801a1a6:	b507      	push	{r0, r1, r2, lr}
 801a1a8:	9300      	str	r3, [sp, #0]
 801a1aa:	4613      	mov	r3, r2
 801a1ac:	2200      	movs	r2, #0
 801a1ae:	f7ff fe92 	bl	8019ed6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801a1b2:	b003      	add	sp, #12
 801a1b4:	f85d fb04 	ldr.w	pc, [sp], #4

0801a1b8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801a1b8:	b40c      	push	{r2, r3}
 801a1ba:	b507      	push	{r0, r1, r2, lr}
 801a1bc:	ab04      	add	r3, sp, #16
 801a1be:	f853 2b04 	ldr.w	r2, [r3], #4
 801a1c2:	9301      	str	r3, [sp, #4]
 801a1c4:	f7ff ffef 	bl	801a1a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801a1c8:	b003      	add	sp, #12
 801a1ca:	f85d eb04 	ldr.w	lr, [sp], #4
 801a1ce:	b002      	add	sp, #8
 801a1d0:	4770      	bx	lr
	...

0801a1d4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801a1d4:	4b01      	ldr	r3, [pc, #4]	; (801a1dc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801a1d6:	6018      	str	r0, [r3, #0]
 801a1d8:	4770      	bx	lr
 801a1da:	bf00      	nop
 801a1dc:	2400eb38 	.word	0x2400eb38

0801a1e0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801a1e0:	4b06      	ldr	r3, [pc, #24]	; (801a1fc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801a1e2:	881a      	ldrh	r2, [r3, #0]
 801a1e4:	4282      	cmp	r2, r0
 801a1e6:	d807      	bhi.n	801a1f8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801a1e8:	4b05      	ldr	r3, [pc, #20]	; (801a200 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801a1ea:	881b      	ldrh	r3, [r3, #0]
 801a1ec:	4413      	add	r3, r2
 801a1ee:	4298      	cmp	r0, r3
 801a1f0:	bfac      	ite	ge
 801a1f2:	2000      	movge	r0, #0
 801a1f4:	2001      	movlt	r0, #1
 801a1f6:	4770      	bx	lr
 801a1f8:	2000      	movs	r0, #0
 801a1fa:	4770      	bx	lr
 801a1fc:	2400eb58 	.word	0x2400eb58
 801a200:	2400eb5c 	.word	0x2400eb5c

0801a204 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801a204:	b508      	push	{r3, lr}
 801a206:	4601      	mov	r1, r0
 801a208:	f7ff ffea 	bl	801a1e0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801a20c:	b118      	cbz	r0, 801a216 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801a20e:	4b02      	ldr	r3, [pc, #8]	; (801a218 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801a210:	681b      	ldr	r3, [r3, #0]
 801a212:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801a216:	bd08      	pop	{r3, pc}
 801a218:	2400eb3c 	.word	0x2400eb3c

0801a21c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801a21c:	b538      	push	{r3, r4, r5, lr}
 801a21e:	4604      	mov	r4, r0
 801a220:	f7ff ffde 	bl	801a1e0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801a224:	b188      	cbz	r0, 801a24a <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 801a226:	4b09      	ldr	r3, [pc, #36]	; (801a24c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 801a228:	881a      	ldrh	r2, [r3, #0]
 801a22a:	4b09      	ldr	r3, [pc, #36]	; (801a250 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 801a22c:	1aa4      	subs	r4, r4, r2
 801a22e:	220e      	movs	r2, #14
 801a230:	681d      	ldr	r5, [r3, #0]
 801a232:	4362      	muls	r2, r4
 801a234:	18ac      	adds	r4, r5, r2
 801a236:	7b23      	ldrb	r3, [r4, #12]
 801a238:	f013 0320 	ands.w	r3, r3, #32
 801a23c:	bf17      	itett	ne
 801a23e:	680b      	ldrne	r3, [r1, #0]
 801a240:	4618      	moveq	r0, r3
 801a242:	50ab      	strne	r3, [r5, r2]
 801a244:	684b      	ldrne	r3, [r1, #4]
 801a246:	bf18      	it	ne
 801a248:	6063      	strne	r3, [r4, #4]
 801a24a:	bd38      	pop	{r3, r4, r5, pc}
 801a24c:	2400eb58 	.word	0x2400eb58
 801a250:	2400eb40 	.word	0x2400eb40

0801a254 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801a254:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801a258:	4606      	mov	r6, r0
 801a25a:	460c      	mov	r4, r1
 801a25c:	f7ff ffc0 	bl	801a1e0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801a260:	b918      	cbnz	r0, 801a26a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801a262:	2000      	movs	r0, #0
 801a264:	b002      	add	sp, #8
 801a266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a26a:	4608      	mov	r0, r1
 801a26c:	f7f7 f8b5 	bl	80113da <_ZNK8touchgfx4Rect7isEmptyEv>
 801a270:	2800      	cmp	r0, #0
 801a272:	d1f6      	bne.n	801a262 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801a274:	4b3f      	ldr	r3, [pc, #252]	; (801a374 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801a276:	f8df 9100 	ldr.w	r9, [pc, #256]	; 801a378 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801a27a:	881d      	ldrh	r5, [r3, #0]
 801a27c:	f8d9 a000 	ldr.w	sl, [r9]
 801a280:	46c8      	mov	r8, r9
 801a282:	1b73      	subs	r3, r6, r5
 801a284:	250e      	movs	r5, #14
 801a286:	435d      	muls	r5, r3
 801a288:	eb0a 0705 	add.w	r7, sl, r5
 801a28c:	7b3b      	ldrb	r3, [r7, #12]
 801a28e:	f013 0f20 	tst.w	r3, #32
 801a292:	d0e6      	beq.n	801a262 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801a294:	4621      	mov	r1, r4
 801a296:	4638      	mov	r0, r7
 801a298:	f7fc ff28 	bl	80170ec <_ZNK8touchgfx4Rect8includesERKS0_>
 801a29c:	2800      	cmp	r0, #0
 801a29e:	d1e1      	bne.n	801a264 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801a2a0:	4639      	mov	r1, r7
 801a2a2:	4620      	mov	r0, r4
 801a2a4:	f7fc ff22 	bl	80170ec <_ZNK8touchgfx4Rect8includesERKS0_>
 801a2a8:	b108      	cbz	r0, 801a2ae <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801a2aa:	4621      	mov	r1, r4
 801a2ac:	e020      	b.n	801a2f0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801a2ae:	f9b4 2000 	ldrsh.w	r2, [r4]
 801a2b2:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801a2b6:	429a      	cmp	r2, r3
 801a2b8:	d11e      	bne.n	801a2f8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801a2ba:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a2be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801a2c2:	429a      	cmp	r2, r3
 801a2c4:	d118      	bne.n	801a2f8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801a2c6:	6820      	ldr	r0, [r4, #0]
 801a2c8:	466b      	mov	r3, sp
 801a2ca:	6861      	ldr	r1, [r4, #4]
 801a2cc:	c303      	stmia	r3!, {r0, r1}
 801a2ce:	4639      	mov	r1, r7
 801a2d0:	4668      	mov	r0, sp
 801a2d2:	f7f8 fdc0 	bl	8012e56 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a2d6:	f8d9 3000 	ldr.w	r3, [r9]
 801a2da:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801a2de:	442b      	add	r3, r5
 801a2e0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801a2e4:	4413      	add	r3, r2
 801a2e6:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801a2ea:	4293      	cmp	r3, r2
 801a2ec:	dc04      	bgt.n	801a2f8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801a2ee:	4669      	mov	r1, sp
 801a2f0:	4630      	mov	r0, r6
 801a2f2:	f7ff ff93 	bl	801a21c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801a2f6:	e7b5      	b.n	801a264 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801a2f8:	f8d8 3000 	ldr.w	r3, [r8]
 801a2fc:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801a300:	442b      	add	r3, r5
 801a302:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a306:	4291      	cmp	r1, r2
 801a308:	d119      	bne.n	801a33e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801a30a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801a30e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801a312:	4291      	cmp	r1, r2
 801a314:	d113      	bne.n	801a33e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801a316:	6820      	ldr	r0, [r4, #0]
 801a318:	466a      	mov	r2, sp
 801a31a:	6861      	ldr	r1, [r4, #4]
 801a31c:	c203      	stmia	r2!, {r0, r1}
 801a31e:	4619      	mov	r1, r3
 801a320:	4668      	mov	r0, sp
 801a322:	f7f8 fd98 	bl	8012e56 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a326:	f8d8 3000 	ldr.w	r3, [r8]
 801a32a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a32e:	442b      	add	r3, r5
 801a330:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801a334:	4413      	add	r3, r2
 801a336:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801a33a:	4293      	cmp	r3, r2
 801a33c:	ddd7      	ble.n	801a2ee <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801a33e:	4620      	mov	r0, r4
 801a340:	f7f7 f84b 	bl	80113da <_ZNK8touchgfx4Rect7isEmptyEv>
 801a344:	b990      	cbnz	r0, 801a36c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801a346:	88a7      	ldrh	r7, [r4, #4]
 801a348:	88e3      	ldrh	r3, [r4, #6]
 801a34a:	fb17 f703 	smulbb	r7, r7, r3
 801a34e:	f8d8 3000 	ldr.w	r3, [r8]
 801a352:	441d      	add	r5, r3
 801a354:	4628      	mov	r0, r5
 801a356:	f7f7 f840 	bl	80113da <_ZNK8touchgfx4Rect7isEmptyEv>
 801a35a:	b948      	cbnz	r0, 801a370 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801a35c:	88ab      	ldrh	r3, [r5, #4]
 801a35e:	88ea      	ldrh	r2, [r5, #6]
 801a360:	fb13 f302 	smulbb	r3, r3, r2
 801a364:	42bb      	cmp	r3, r7
 801a366:	f6bf af7c 	bge.w	801a262 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801a36a:	e79e      	b.n	801a2aa <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801a36c:	2700      	movs	r7, #0
 801a36e:	e7ee      	b.n	801a34e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 801a370:	2300      	movs	r3, #0
 801a372:	e7f7      	b.n	801a364 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801a374:	2400eb58 	.word	0x2400eb58
 801a378:	2400eb40 	.word	0x2400eb40

0801a37c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801a37c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a37e:	4c24      	ldr	r4, [pc, #144]	; (801a410 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801a380:	6823      	ldr	r3, [r4, #0]
 801a382:	2b00      	cmp	r3, #0
 801a384:	d042      	beq.n	801a40c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801a386:	4a23      	ldr	r2, [pc, #140]	; (801a414 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801a388:	4d23      	ldr	r5, [pc, #140]	; (801a418 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801a38a:	8811      	ldrh	r1, [r2, #0]
 801a38c:	f8b5 c000 	ldrh.w	ip, [r5]
 801a390:	4822      	ldr	r0, [pc, #136]	; (801a41c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801a392:	4461      	add	r1, ip
 801a394:	1c4a      	adds	r2, r1, #1
 801a396:	008f      	lsls	r7, r1, #2
 801a398:	f022 0201 	bic.w	r2, r2, #1
 801a39c:	19de      	adds	r6, r3, r7
 801a39e:	0412      	lsls	r2, r2, #16
 801a3a0:	6006      	str	r6, [r0, #0]
 801a3a2:	4e1f      	ldr	r6, [pc, #124]	; (801a420 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801a3a4:	0c12      	lsrs	r2, r2, #16
 801a3a6:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801a3aa:	19da      	adds	r2, r3, r7
 801a3ac:	6032      	str	r2, [r6, #0]
 801a3ae:	220e      	movs	r2, #14
 801a3b0:	fb02 f20c 	mul.w	r2, r2, ip
 801a3b4:	3203      	adds	r2, #3
 801a3b6:	f022 0203 	bic.w	r2, r2, #3
 801a3ba:	443a      	add	r2, r7
 801a3bc:	4f19      	ldr	r7, [pc, #100]	; (801a424 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801a3be:	4413      	add	r3, r2
 801a3c0:	603b      	str	r3, [r7, #0]
 801a3c2:	2300      	movs	r3, #0
 801a3c4:	4f18      	ldr	r7, [pc, #96]	; (801a428 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801a3c6:	469c      	mov	ip, r3
 801a3c8:	803b      	strh	r3, [r7, #0]
 801a3ca:	4f18      	ldr	r7, [pc, #96]	; (801a42c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801a3cc:	683f      	ldr	r7, [r7, #0]
 801a3ce:	1aba      	subs	r2, r7, r2
 801a3d0:	4f17      	ldr	r7, [pc, #92]	; (801a430 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801a3d2:	603a      	str	r2, [r7, #0]
 801a3d4:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801a3d8:	4a16      	ldr	r2, [pc, #88]	; (801a434 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801a3da:	8013      	strh	r3, [r2, #0]
 801a3dc:	428b      	cmp	r3, r1
 801a3de:	d10d      	bne.n	801a3fc <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801a3e0:	882d      	ldrh	r5, [r5, #0]
 801a3e2:	2300      	movs	r3, #0
 801a3e4:	6830      	ldr	r0, [r6, #0]
 801a3e6:	240e      	movs	r4, #14
 801a3e8:	429d      	cmp	r5, r3
 801a3ea:	d90f      	bls.n	801a40c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801a3ec:	fb04 0203 	mla	r2, r4, r3, r0
 801a3f0:	3301      	adds	r3, #1
 801a3f2:	7b11      	ldrb	r1, [r2, #12]
 801a3f4:	f36f 1145 	bfc	r1, #5, #1
 801a3f8:	7311      	strb	r1, [r2, #12]
 801a3fa:	e7f5      	b.n	801a3e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801a3fc:	6822      	ldr	r2, [r4, #0]
 801a3fe:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801a402:	6802      	ldr	r2, [r0, #0]
 801a404:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801a408:	3301      	adds	r3, #1
 801a40a:	e7e7      	b.n	801a3dc <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801a40c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a40e:	bf00      	nop
 801a410:	2400eb3c 	.word	0x2400eb3c
 801a414:	2400eb58 	.word	0x2400eb58
 801a418:	2400eb5c 	.word	0x2400eb5c
 801a41c:	2400eb50 	.word	0x2400eb50
 801a420:	2400eb40 	.word	0x2400eb40
 801a424:	2400eb48 	.word	0x2400eb48
 801a428:	2400eb5a 	.word	0x2400eb5a
 801a42c:	2400eb44 	.word	0x2400eb44
 801a430:	2400eb54 	.word	0x2400eb54
 801a434:	2400eb4c 	.word	0x2400eb4c

0801a438 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801a438:	4b06      	ldr	r3, [pc, #24]	; (801a454 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801a43a:	681b      	ldr	r3, [r3, #0]
 801a43c:	b943      	cbnz	r3, 801a450 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801a43e:	b139      	cbz	r1, 801a450 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801a440:	4b05      	ldr	r3, [pc, #20]	; (801a458 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801a442:	801a      	strh	r2, [r3, #0]
 801a444:	4b05      	ldr	r3, [pc, #20]	; (801a45c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801a446:	6019      	str	r1, [r3, #0]
 801a448:	4b05      	ldr	r3, [pc, #20]	; (801a460 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801a44a:	6018      	str	r0, [r3, #0]
 801a44c:	f7ff bf96 	b.w	801a37c <_ZN8touchgfx6Bitmap10clearCacheEv>
 801a450:	4770      	bx	lr
 801a452:	bf00      	nop
 801a454:	2400eb48 	.word	0x2400eb48
 801a458:	2400eb5c 	.word	0x2400eb5c
 801a45c:	2400eb44 	.word	0x2400eb44
 801a460:	2400eb3c 	.word	0x2400eb3c

0801a464 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801a464:	b470      	push	{r4, r5, r6}
 801a466:	4c07      	ldr	r4, [pc, #28]	; (801a484 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801a468:	4605      	mov	r5, r0
 801a46a:	4610      	mov	r0, r2
 801a46c:	9a03      	ldr	r2, [sp, #12]
 801a46e:	6826      	ldr	r6, [r4, #0]
 801a470:	b936      	cbnz	r6, 801a480 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801a472:	6025      	str	r5, [r4, #0]
 801a474:	4c04      	ldr	r4, [pc, #16]	; (801a488 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801a476:	8021      	strh	r1, [r4, #0]
 801a478:	4619      	mov	r1, r3
 801a47a:	bc70      	pop	{r4, r5, r6}
 801a47c:	f7ff bfdc 	b.w	801a438 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801a480:	bc70      	pop	{r4, r5, r6}
 801a482:	4770      	bx	lr
 801a484:	2400eb60 	.word	0x2400eb60
 801a488:	2400eb58 	.word	0x2400eb58

0801a48c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801a48c:	4a12      	ldr	r2, [pc, #72]	; (801a4d8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801a48e:	8803      	ldrh	r3, [r0, #0]
 801a490:	8812      	ldrh	r2, [r2, #0]
 801a492:	4293      	cmp	r3, r2
 801a494:	d207      	bcs.n	801a4a6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801a496:	4a11      	ldr	r2, [pc, #68]	; (801a4dc <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801a498:	2114      	movs	r1, #20
 801a49a:	6812      	ldr	r2, [r2, #0]
 801a49c:	fb01 2303 	mla	r3, r1, r3, r2
 801a4a0:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801a4a4:	4770      	bx	lr
 801a4a6:	490e      	ldr	r1, [pc, #56]	; (801a4e0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801a4a8:	8809      	ldrh	r1, [r1, #0]
 801a4aa:	4411      	add	r1, r2
 801a4ac:	428b      	cmp	r3, r1
 801a4ae:	da04      	bge.n	801a4ba <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801a4b0:	1a9b      	subs	r3, r3, r2
 801a4b2:	4a0c      	ldr	r2, [pc, #48]	; (801a4e4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801a4b4:	210e      	movs	r1, #14
 801a4b6:	6812      	ldr	r2, [r2, #0]
 801a4b8:	e7f0      	b.n	801a49c <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801a4ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a4be:	4293      	cmp	r3, r2
 801a4c0:	d108      	bne.n	801a4d4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801a4c2:	4b09      	ldr	r3, [pc, #36]	; (801a4e8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801a4c4:	781b      	ldrb	r3, [r3, #0]
 801a4c6:	b91b      	cbnz	r3, 801a4d0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801a4c8:	4b08      	ldr	r3, [pc, #32]	; (801a4ec <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801a4ca:	f9b3 0000 	ldrsh.w	r0, [r3]
 801a4ce:	4770      	bx	lr
 801a4d0:	4b07      	ldr	r3, [pc, #28]	; (801a4f0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801a4d2:	e7fa      	b.n	801a4ca <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801a4d4:	2000      	movs	r0, #0
 801a4d6:	4770      	bx	lr
 801a4d8:	2400eb58 	.word	0x2400eb58
 801a4dc:	2400eb60 	.word	0x2400eb60
 801a4e0:	2400eb5c 	.word	0x2400eb5c
 801a4e4:	2400eb40 	.word	0x2400eb40
 801a4e8:	2400eac8 	.word	0x2400eac8
 801a4ec:	2400eaca 	.word	0x2400eaca
 801a4f0:	2400eacc 	.word	0x2400eacc

0801a4f4 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801a4f4:	4a12      	ldr	r2, [pc, #72]	; (801a540 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801a4f6:	8803      	ldrh	r3, [r0, #0]
 801a4f8:	8812      	ldrh	r2, [r2, #0]
 801a4fa:	4293      	cmp	r3, r2
 801a4fc:	d207      	bcs.n	801a50e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801a4fe:	4a11      	ldr	r2, [pc, #68]	; (801a544 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801a500:	2114      	movs	r1, #20
 801a502:	6812      	ldr	r2, [r2, #0]
 801a504:	fb01 2303 	mla	r3, r1, r3, r2
 801a508:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801a50c:	4770      	bx	lr
 801a50e:	490e      	ldr	r1, [pc, #56]	; (801a548 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801a510:	8809      	ldrh	r1, [r1, #0]
 801a512:	4411      	add	r1, r2
 801a514:	428b      	cmp	r3, r1
 801a516:	da04      	bge.n	801a522 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801a518:	1a9b      	subs	r3, r3, r2
 801a51a:	4a0c      	ldr	r2, [pc, #48]	; (801a54c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801a51c:	210e      	movs	r1, #14
 801a51e:	6812      	ldr	r2, [r2, #0]
 801a520:	e7f0      	b.n	801a504 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801a522:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a526:	4293      	cmp	r3, r2
 801a528:	d108      	bne.n	801a53c <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801a52a:	4b09      	ldr	r3, [pc, #36]	; (801a550 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801a52c:	781b      	ldrb	r3, [r3, #0]
 801a52e:	b91b      	cbnz	r3, 801a538 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801a530:	4b08      	ldr	r3, [pc, #32]	; (801a554 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801a532:	f9b3 0000 	ldrsh.w	r0, [r3]
 801a536:	4770      	bx	lr
 801a538:	4b07      	ldr	r3, [pc, #28]	; (801a558 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801a53a:	e7fa      	b.n	801a532 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801a53c:	2000      	movs	r0, #0
 801a53e:	4770      	bx	lr
 801a540:	2400eb58 	.word	0x2400eb58
 801a544:	2400eb60 	.word	0x2400eb60
 801a548:	2400eb5c 	.word	0x2400eb5c
 801a54c:	2400eb40 	.word	0x2400eb40
 801a550:	2400eac8 	.word	0x2400eac8
 801a554:	2400eacc 	.word	0x2400eacc
 801a558:	2400eaca 	.word	0x2400eaca

0801a55c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801a55c:	4a1f      	ldr	r2, [pc, #124]	; (801a5dc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801a55e:	b510      	push	{r4, lr}
 801a560:	880b      	ldrh	r3, [r1, #0]
 801a562:	8812      	ldrh	r2, [r2, #0]
 801a564:	4293      	cmp	r3, r2
 801a566:	d213      	bcs.n	801a590 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801a568:	4a1d      	ldr	r2, [pc, #116]	; (801a5e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801a56a:	2114      	movs	r1, #20
 801a56c:	6812      	ldr	r2, [r2, #0]
 801a56e:	fb01 2303 	mla	r3, r1, r3, r2
 801a572:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801a576:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801a57a:	8a1a      	ldrh	r2, [r3, #16]
 801a57c:	8a5b      	ldrh	r3, [r3, #18]
 801a57e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801a582:	8004      	strh	r4, [r0, #0]
 801a584:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a588:	8041      	strh	r1, [r0, #2]
 801a58a:	8082      	strh	r2, [r0, #4]
 801a58c:	80c3      	strh	r3, [r0, #6]
 801a58e:	e00e      	b.n	801a5ae <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801a590:	4914      	ldr	r1, [pc, #80]	; (801a5e4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801a592:	8809      	ldrh	r1, [r1, #0]
 801a594:	4411      	add	r1, r2
 801a596:	428b      	cmp	r3, r1
 801a598:	da0a      	bge.n	801a5b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801a59a:	1a9b      	subs	r3, r3, r2
 801a59c:	4a12      	ldr	r2, [pc, #72]	; (801a5e8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801a59e:	210e      	movs	r1, #14
 801a5a0:	6812      	ldr	r2, [r2, #0]
 801a5a2:	fb01 2303 	mla	r3, r1, r3, r2
 801a5a6:	681a      	ldr	r2, [r3, #0]
 801a5a8:	6002      	str	r2, [r0, #0]
 801a5aa:	685a      	ldr	r2, [r3, #4]
 801a5ac:	6042      	str	r2, [r0, #4]
 801a5ae:	bd10      	pop	{r4, pc}
 801a5b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a5b4:	4293      	cmp	r3, r2
 801a5b6:	d10b      	bne.n	801a5d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 801a5b8:	4b0c      	ldr	r3, [pc, #48]	; (801a5ec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801a5ba:	f9b3 1000 	ldrsh.w	r1, [r3]
 801a5be:	4b0c      	ldr	r3, [pc, #48]	; (801a5f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801a5c0:	8081      	strh	r1, [r0, #4]
 801a5c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a5c6:	2300      	movs	r3, #0
 801a5c8:	80c2      	strh	r2, [r0, #6]
 801a5ca:	8003      	strh	r3, [r0, #0]
 801a5cc:	8043      	strh	r3, [r0, #2]
 801a5ce:	e7ee      	b.n	801a5ae <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801a5d0:	2300      	movs	r3, #0
 801a5d2:	8003      	strh	r3, [r0, #0]
 801a5d4:	8043      	strh	r3, [r0, #2]
 801a5d6:	8083      	strh	r3, [r0, #4]
 801a5d8:	e7d8      	b.n	801a58c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801a5da:	bf00      	nop
 801a5dc:	2400eb58 	.word	0x2400eb58
 801a5e0:	2400eb60 	.word	0x2400eb60
 801a5e4:	2400eb5c 	.word	0x2400eb5c
 801a5e8:	2400eb40 	.word	0x2400eb40
 801a5ec:	2400eac4 	.word	0x2400eac4
 801a5f0:	2400eac6 	.word	0x2400eac6

0801a5f4 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801a5f4:	4a12      	ldr	r2, [pc, #72]	; (801a640 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801a5f6:	8803      	ldrh	r3, [r0, #0]
 801a5f8:	8811      	ldrh	r1, [r2, #0]
 801a5fa:	428b      	cmp	r3, r1
 801a5fc:	d20b      	bcs.n	801a616 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801a5fe:	4a11      	ldr	r2, [pc, #68]	; (801a644 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801a600:	6812      	ldr	r2, [r2, #0]
 801a602:	b112      	cbz	r2, 801a60a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801a604:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a608:	b9c0      	cbnz	r0, 801a63c <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801a60a:	4a0f      	ldr	r2, [pc, #60]	; (801a648 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801a60c:	6811      	ldr	r1, [r2, #0]
 801a60e:	2214      	movs	r2, #20
 801a610:	4353      	muls	r3, r2
 801a612:	58c8      	ldr	r0, [r1, r3]
 801a614:	4770      	bx	lr
 801a616:	4a0d      	ldr	r2, [pc, #52]	; (801a64c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801a618:	8812      	ldrh	r2, [r2, #0]
 801a61a:	440a      	add	r2, r1
 801a61c:	4293      	cmp	r3, r2
 801a61e:	da04      	bge.n	801a62a <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801a620:	4a08      	ldr	r2, [pc, #32]	; (801a644 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801a622:	6812      	ldr	r2, [r2, #0]
 801a624:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a628:	4770      	bx	lr
 801a62a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a62e:	4293      	cmp	r3, r2
 801a630:	d103      	bne.n	801a63a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801a632:	4b07      	ldr	r3, [pc, #28]	; (801a650 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801a634:	681b      	ldr	r3, [r3, #0]
 801a636:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801a638:	4770      	bx	lr
 801a63a:	2000      	movs	r0, #0
 801a63c:	4770      	bx	lr
 801a63e:	bf00      	nop
 801a640:	2400eb58 	.word	0x2400eb58
 801a644:	2400eb3c 	.word	0x2400eb3c
 801a648:	2400eb60 	.word	0x2400eb60
 801a64c:	2400eb5c 	.word	0x2400eb5c
 801a650:	2400ead0 	.word	0x2400ead0

0801a654 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801a654:	4b24      	ldr	r3, [pc, #144]	; (801a6e8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801a656:	8802      	ldrh	r2, [r0, #0]
 801a658:	8818      	ldrh	r0, [r3, #0]
 801a65a:	4282      	cmp	r2, r0
 801a65c:	d221      	bcs.n	801a6a2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801a65e:	4b23      	ldr	r3, [pc, #140]	; (801a6ec <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801a660:	6819      	ldr	r1, [r3, #0]
 801a662:	2314      	movs	r3, #20
 801a664:	fb03 1302 	mla	r3, r3, r2, r1
 801a668:	6858      	ldr	r0, [r3, #4]
 801a66a:	2800      	cmp	r0, #0
 801a66c:	d03a      	beq.n	801a6e4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801a66e:	4920      	ldr	r1, [pc, #128]	; (801a6f0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801a670:	6809      	ldr	r1, [r1, #0]
 801a672:	2900      	cmp	r1, #0
 801a674:	d036      	beq.n	801a6e4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801a676:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801a67a:	2900      	cmp	r1, #0
 801a67c:	d032      	beq.n	801a6e4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801a67e:	891a      	ldrh	r2, [r3, #8]
 801a680:	8958      	ldrh	r0, [r3, #10]
 801a682:	4350      	muls	r0, r2
 801a684:	7c5a      	ldrb	r2, [r3, #17]
 801a686:	7cdb      	ldrb	r3, [r3, #19]
 801a688:	0952      	lsrs	r2, r2, #5
 801a68a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801a68e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801a692:	2b0b      	cmp	r3, #11
 801a694:	bf18      	it	ne
 801a696:	0040      	lslne	r0, r0, #1
 801a698:	3003      	adds	r0, #3
 801a69a:	f020 0003 	bic.w	r0, r0, #3
 801a69e:	4408      	add	r0, r1
 801a6a0:	4770      	bx	lr
 801a6a2:	4b14      	ldr	r3, [pc, #80]	; (801a6f4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801a6a4:	881b      	ldrh	r3, [r3, #0]
 801a6a6:	4403      	add	r3, r0
 801a6a8:	429a      	cmp	r2, r3
 801a6aa:	da1a      	bge.n	801a6e2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801a6ac:	4b12      	ldr	r3, [pc, #72]	; (801a6f8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801a6ae:	1a10      	subs	r0, r2, r0
 801a6b0:	210e      	movs	r1, #14
 801a6b2:	681b      	ldr	r3, [r3, #0]
 801a6b4:	fb01 3000 	mla	r0, r1, r0, r3
 801a6b8:	7b03      	ldrb	r3, [r0, #12]
 801a6ba:	f003 031f 	and.w	r3, r3, #31
 801a6be:	2b0b      	cmp	r3, #11
 801a6c0:	d10b      	bne.n	801a6da <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801a6c2:	8903      	ldrh	r3, [r0, #8]
 801a6c4:	8940      	ldrh	r0, [r0, #10]
 801a6c6:	4358      	muls	r0, r3
 801a6c8:	4b09      	ldr	r3, [pc, #36]	; (801a6f0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801a6ca:	3003      	adds	r0, #3
 801a6cc:	6819      	ldr	r1, [r3, #0]
 801a6ce:	f020 0303 	bic.w	r3, r0, #3
 801a6d2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801a6d6:	4418      	add	r0, r3
 801a6d8:	4770      	bx	lr
 801a6da:	2b0d      	cmp	r3, #13
 801a6dc:	d101      	bne.n	801a6e2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801a6de:	300d      	adds	r0, #13
 801a6e0:	4770      	bx	lr
 801a6e2:	2000      	movs	r0, #0
 801a6e4:	4770      	bx	lr
 801a6e6:	bf00      	nop
 801a6e8:	2400eb58 	.word	0x2400eb58
 801a6ec:	2400eb60 	.word	0x2400eb60
 801a6f0:	2400eb3c 	.word	0x2400eb3c
 801a6f4:	2400eb5c 	.word	0x2400eb5c
 801a6f8:	2400eb40 	.word	0x2400eb40

0801a6fc <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801a6fc:	4a17      	ldr	r2, [pc, #92]	; (801a75c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801a6fe:	b510      	push	{r4, lr}
 801a700:	8803      	ldrh	r3, [r0, #0]
 801a702:	8812      	ldrh	r2, [r2, #0]
 801a704:	4293      	cmp	r3, r2
 801a706:	d20c      	bcs.n	801a722 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801a708:	4a15      	ldr	r2, [pc, #84]	; (801a760 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801a70a:	2114      	movs	r1, #20
 801a70c:	6812      	ldr	r2, [r2, #0]
 801a70e:	fb01 2303 	mla	r3, r1, r3, r2
 801a712:	7c58      	ldrb	r0, [r3, #17]
 801a714:	0942      	lsrs	r2, r0, #5
 801a716:	7cd8      	ldrb	r0, [r3, #19]
 801a718:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801a71c:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801a720:	bd10      	pop	{r4, pc}
 801a722:	4910      	ldr	r1, [pc, #64]	; (801a764 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801a724:	8809      	ldrh	r1, [r1, #0]
 801a726:	4411      	add	r1, r2
 801a728:	428b      	cmp	r3, r1
 801a72a:	da09      	bge.n	801a740 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801a72c:	1a9b      	subs	r3, r3, r2
 801a72e:	4a0e      	ldr	r2, [pc, #56]	; (801a768 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801a730:	210e      	movs	r1, #14
 801a732:	6812      	ldr	r2, [r2, #0]
 801a734:	fb01 2303 	mla	r3, r1, r3, r2
 801a738:	7b18      	ldrb	r0, [r3, #12]
 801a73a:	f000 001f 	and.w	r0, r0, #31
 801a73e:	e7ef      	b.n	801a720 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801a740:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a744:	4293      	cmp	r3, r2
 801a746:	d106      	bne.n	801a756 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801a748:	f7f7 f8d4 	bl	80118f4 <_ZN8touchgfx3HAL3lcdEv>
 801a74c:	6803      	ldr	r3, [r0, #0]
 801a74e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a754:	4718      	bx	r3
 801a756:	2000      	movs	r0, #0
 801a758:	e7e2      	b.n	801a720 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801a75a:	bf00      	nop
 801a75c:	2400eb58 	.word	0x2400eb58
 801a760:	2400eb60 	.word	0x2400eb60
 801a764:	2400eb5c 	.word	0x2400eb5c
 801a768:	2400eb40 	.word	0x2400eb40

0801a76c <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801a76c:	2018      	movs	r0, #24
 801a76e:	4770      	bx	lr

0801a770 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801a770:	2001      	movs	r0, #1
 801a772:	4770      	bx	lr

0801a774 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801a774:	4b02      	ldr	r3, [pc, #8]	; (801a780 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 801a776:	8818      	ldrh	r0, [r3, #0]
 801a778:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a77c:	b280      	uxth	r0, r0
 801a77e:	4770      	bx	lr
 801a780:	2400eaca 	.word	0x2400eaca

0801a784 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801a784:	2bff      	cmp	r3, #255	; 0xff
 801a786:	d040      	beq.n	801a80a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 801a788:	2a2c      	cmp	r2, #44	; 0x2c
 801a78a:	d02a      	beq.n	801a7e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 801a78c:	d80f      	bhi.n	801a7ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 801a78e:	2a08      	cmp	r2, #8
 801a790:	d037      	beq.n	801a802 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a792:	d805      	bhi.n	801a7a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 801a794:	2a04      	cmp	r2, #4
 801a796:	d032      	beq.n	801a7fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 801a798:	2a05      	cmp	r2, #5
 801a79a:	d02e      	beq.n	801a7fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801a79c:	2000      	movs	r0, #0
 801a79e:	4770      	bx	lr
 801a7a0:	2a0a      	cmp	r2, #10
 801a7a2:	d02e      	beq.n	801a802 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a7a4:	d301      	bcc.n	801a7aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 801a7a6:	2a0b      	cmp	r2, #11
 801a7a8:	d1f8      	bne.n	801a79c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a7aa:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801a7ac:	4770      	bx	lr
 801a7ae:	2a30      	cmp	r2, #48	; 0x30
 801a7b0:	d029      	beq.n	801a806 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801a7b2:	d808      	bhi.n	801a7c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 801a7b4:	2a2e      	cmp	r2, #46	; 0x2e
 801a7b6:	684b      	ldr	r3, [r1, #4]
 801a7b8:	d01a      	beq.n	801a7f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801a7ba:	d90b      	bls.n	801a7d4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 801a7bc:	781b      	ldrb	r3, [r3, #0]
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	d1ec      	bne.n	801a79c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a7c2:	6a00      	ldr	r0, [r0, #32]
 801a7c4:	4770      	bx	lr
 801a7c6:	2a32      	cmp	r2, #50	; 0x32
 801a7c8:	d01d      	beq.n	801a806 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801a7ca:	d301      	bcc.n	801a7d0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 801a7cc:	2a33      	cmp	r2, #51	; 0x33
 801a7ce:	d1e5      	bne.n	801a79c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a7d0:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801a7d2:	4770      	bx	lr
 801a7d4:	781b      	ldrb	r3, [r3, #0]
 801a7d6:	2b00      	cmp	r3, #0
 801a7d8:	d0f3      	beq.n	801a7c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 801a7da:	2b01      	cmp	r3, #1
 801a7dc:	d1de      	bne.n	801a79c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a7de:	6900      	ldr	r0, [r0, #16]
 801a7e0:	4770      	bx	lr
 801a7e2:	684b      	ldr	r3, [r1, #4]
 801a7e4:	781b      	ldrb	r3, [r3, #0]
 801a7e6:	b133      	cbz	r3, 801a7f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801a7e8:	2b01      	cmp	r3, #1
 801a7ea:	d1d7      	bne.n	801a79c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a7ec:	6880      	ldr	r0, [r0, #8]
 801a7ee:	4770      	bx	lr
 801a7f0:	781b      	ldrb	r3, [r3, #0]
 801a7f2:	2b00      	cmp	r3, #0
 801a7f4:	d1d2      	bne.n	801a79c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a7f6:	6980      	ldr	r0, [r0, #24]
 801a7f8:	4770      	bx	lr
 801a7fa:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801a7fc:	4770      	bx	lr
 801a7fe:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801a800:	4770      	bx	lr
 801a802:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801a804:	4770      	bx	lr
 801a806:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801a808:	4770      	bx	lr
 801a80a:	2a2c      	cmp	r2, #44	; 0x2c
 801a80c:	d02a      	beq.n	801a864 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801a80e:	d80f      	bhi.n	801a830 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 801a810:	2a08      	cmp	r2, #8
 801a812:	d035      	beq.n	801a880 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 801a814:	d805      	bhi.n	801a822 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801a816:	2a04      	cmp	r2, #4
 801a818:	d030      	beq.n	801a87c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 801a81a:	2a05      	cmp	r2, #5
 801a81c:	d1be      	bne.n	801a79c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a81e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801a820:	4770      	bx	lr
 801a822:	2a0a      	cmp	r2, #10
 801a824:	d02c      	beq.n	801a880 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 801a826:	d301      	bcc.n	801a82c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 801a828:	2a0b      	cmp	r2, #11
 801a82a:	d1b7      	bne.n	801a79c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a82c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801a82e:	4770      	bx	lr
 801a830:	2a30      	cmp	r2, #48	; 0x30
 801a832:	d027      	beq.n	801a884 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801a834:	d808      	bhi.n	801a848 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 801a836:	2a2e      	cmp	r2, #46	; 0x2e
 801a838:	684b      	ldr	r3, [r1, #4]
 801a83a:	d01a      	beq.n	801a872 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801a83c:	d90b      	bls.n	801a856 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 801a83e:	781b      	ldrb	r3, [r3, #0]
 801a840:	2b00      	cmp	r3, #0
 801a842:	d1ab      	bne.n	801a79c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a844:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801a846:	4770      	bx	lr
 801a848:	2a32      	cmp	r2, #50	; 0x32
 801a84a:	d01b      	beq.n	801a884 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801a84c:	d301      	bcc.n	801a852 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 801a84e:	2a33      	cmp	r2, #51	; 0x33
 801a850:	d1a4      	bne.n	801a79c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a852:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801a854:	4770      	bx	lr
 801a856:	781b      	ldrb	r3, [r3, #0]
 801a858:	2b00      	cmp	r3, #0
 801a85a:	d0f3      	beq.n	801a844 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801a85c:	2b01      	cmp	r3, #1
 801a85e:	d19d      	bne.n	801a79c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a860:	6940      	ldr	r0, [r0, #20]
 801a862:	4770      	bx	lr
 801a864:	684b      	ldr	r3, [r1, #4]
 801a866:	781b      	ldrb	r3, [r3, #0]
 801a868:	b133      	cbz	r3, 801a878 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 801a86a:	2b01      	cmp	r3, #1
 801a86c:	d196      	bne.n	801a79c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a86e:	68c0      	ldr	r0, [r0, #12]
 801a870:	4770      	bx	lr
 801a872:	781b      	ldrb	r3, [r3, #0]
 801a874:	2b00      	cmp	r3, #0
 801a876:	d191      	bne.n	801a79c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a878:	69c0      	ldr	r0, [r0, #28]
 801a87a:	4770      	bx	lr
 801a87c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801a87e:	4770      	bx	lr
 801a880:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801a882:	4770      	bx	lr
 801a884:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801a886:	4770      	bx	lr

0801a888 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a88c:	b085      	sub	sp, #20
 801a88e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a890:	9203      	str	r2, [sp, #12]
 801a892:	6870      	ldr	r0, [r6, #4]
 801a894:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801a898:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801a89c:	9101      	str	r1, [sp, #4]
 801a89e:	fa1f f885 	uxth.w	r8, r5
 801a8a2:	43ed      	mvns	r5, r5
 801a8a4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a8a8:	b2ed      	uxtb	r5, r5
 801a8aa:	fb00 2404 	mla	r4, r0, r4, r2
 801a8ae:	6832      	ldr	r2, [r6, #0]
 801a8b0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a8b4:	4414      	add	r4, r2
 801a8b6:	f8dc 2000 	ldr.w	r2, [ip]
 801a8ba:	9202      	str	r2, [sp, #8]
 801a8bc:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801a8c0:	f102 0e04 	add.w	lr, r2, #4
 801a8c4:	9a01      	ldr	r2, [sp, #4]
 801a8c6:	2a00      	cmp	r2, #0
 801a8c8:	dc03      	bgt.n	801a8d2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801a8ca:	9a03      	ldr	r2, [sp, #12]
 801a8cc:	2a00      	cmp	r2, #0
 801a8ce:	f340 8116 	ble.w	801aafe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801a8d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a8d4:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801a8d8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a8dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a8de:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801a8e2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a8e6:	2b00      	cmp	r3, #0
 801a8e8:	dd0e      	ble.n	801a908 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801a8ea:	1406      	asrs	r6, r0, #16
 801a8ec:	d405      	bmi.n	801a8fa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a8ee:	4556      	cmp	r6, sl
 801a8f0:	da03      	bge.n	801a8fa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a8f2:	1416      	asrs	r6, r2, #16
 801a8f4:	d401      	bmi.n	801a8fa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a8f6:	454e      	cmp	r6, r9
 801a8f8:	db07      	blt.n	801a90a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801a8fa:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801a8fc:	3b01      	subs	r3, #1
 801a8fe:	3403      	adds	r4, #3
 801a900:	4430      	add	r0, r6
 801a902:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801a904:	4432      	add	r2, r6
 801a906:	e7ee      	b.n	801a8e6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801a908:	d063      	beq.n	801a9d2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801a90a:	1e5e      	subs	r6, r3, #1
 801a90c:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801a90e:	fb07 0706 	mla	r7, r7, r6, r0
 801a912:	143f      	asrs	r7, r7, #16
 801a914:	d454      	bmi.n	801a9c0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801a916:	4557      	cmp	r7, sl
 801a918:	da52      	bge.n	801a9c0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801a91a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801a91c:	fb07 2606 	mla	r6, r7, r6, r2
 801a920:	1436      	asrs	r6, r6, #16
 801a922:	d44d      	bmi.n	801a9c0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801a924:	454e      	cmp	r6, r9
 801a926:	da4b      	bge.n	801a9c0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801a928:	1ce6      	adds	r6, r4, #3
 801a92a:	4699      	mov	r9, r3
 801a92c:	f1b9 0f00 	cmp.w	r9, #0
 801a930:	f106 0603 	add.w	r6, r6, #3
 801a934:	dd48      	ble.n	801a9c8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801a936:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801a93a:	1417      	asrs	r7, r2, #16
 801a93c:	9902      	ldr	r1, [sp, #8]
 801a93e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801a942:	f109 39ff 	add.w	r9, r9, #4294967295
 801a946:	fb0b 1707 	mla	r7, fp, r7, r1
 801a94a:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801a94e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801a950:	f817 700a 	ldrb.w	r7, [r7, sl]
 801a954:	fb1b fb05 	smulbb	fp, fp, r5
 801a958:	4408      	add	r0, r1
 801a95a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a95c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801a960:	440a      	add	r2, r1
 801a962:	eb0e 0a07 	add.w	sl, lr, r7
 801a966:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801a96a:	fb07 b708 	mla	r7, r7, r8, fp
 801a96e:	b2bf      	uxth	r7, r7
 801a970:	f107 0b01 	add.w	fp, r7, #1
 801a974:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801a978:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801a97c:	fb1b fb05 	smulbb	fp, fp, r5
 801a980:	123f      	asrs	r7, r7, #8
 801a982:	f806 7c06 	strb.w	r7, [r6, #-6]
 801a986:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801a98a:	fb07 b708 	mla	r7, r7, r8, fp
 801a98e:	b2bf      	uxth	r7, r7
 801a990:	f107 0b01 	add.w	fp, r7, #1
 801a994:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801a998:	123f      	asrs	r7, r7, #8
 801a99a:	f806 7c05 	strb.w	r7, [r6, #-5]
 801a99e:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801a9a2:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801a9a6:	fb1a fa05 	smulbb	sl, sl, r5
 801a9aa:	fb07 a708 	mla	r7, r7, r8, sl
 801a9ae:	b2bf      	uxth	r7, r7
 801a9b0:	f107 0a01 	add.w	sl, r7, #1
 801a9b4:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801a9b8:	123f      	asrs	r7, r7, #8
 801a9ba:	f806 7c04 	strb.w	r7, [r6, #-4]
 801a9be:	e7b5      	b.n	801a92c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801a9c0:	2700      	movs	r7, #0
 801a9c2:	1bde      	subs	r6, r3, r7
 801a9c4:	2e00      	cmp	r6, #0
 801a9c6:	dc42      	bgt.n	801aa4e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801a9c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a9cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a9d0:	441c      	add	r4, r3
 801a9d2:	9b01      	ldr	r3, [sp, #4]
 801a9d4:	2b00      	cmp	r3, #0
 801a9d6:	f340 8092 	ble.w	801aafe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801a9da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a9de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a9e0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a9e4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a9e8:	eef0 6a62 	vmov.f32	s13, s5
 801a9ec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a9f0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a9f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a9f8:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801a9fc:	eef0 6a43 	vmov.f32	s13, s6
 801aa00:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801aa04:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801aa08:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801aa0c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801aa10:	ee77 2a62 	vsub.f32	s5, s14, s5
 801aa14:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801aa18:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801aa1c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801aa20:	ee12 2a90 	vmov	r2, s5
 801aa24:	eef0 2a47 	vmov.f32	s5, s14
 801aa28:	fb92 f3f3 	sdiv	r3, r2, r3
 801aa2c:	ee13 2a10 	vmov	r2, s6
 801aa30:	9311      	str	r3, [sp, #68]	; 0x44
 801aa32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aa34:	eeb0 3a67 	vmov.f32	s6, s15
 801aa38:	fb92 f3f3 	sdiv	r3, r2, r3
 801aa3c:	9312      	str	r3, [sp, #72]	; 0x48
 801aa3e:	9b01      	ldr	r3, [sp, #4]
 801aa40:	9a03      	ldr	r2, [sp, #12]
 801aa42:	3b01      	subs	r3, #1
 801aa44:	9301      	str	r3, [sp, #4]
 801aa46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aa48:	bf08      	it	eq
 801aa4a:	4613      	moveq	r3, r2
 801aa4c:	e73a      	b.n	801a8c4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801aa4e:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801aa52:	d44e      	bmi.n	801aaf2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801aa54:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801aa58:	4556      	cmp	r6, sl
 801aa5a:	dd4a      	ble.n	801aaf2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801aa5c:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801aa60:	d447      	bmi.n	801aaf2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801aa62:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801aa66:	4559      	cmp	r1, fp
 801aa68:	dd43      	ble.n	801aaf2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801aa6a:	fa0f f986 	sxth.w	r9, r6
 801aa6e:	9902      	ldr	r1, [sp, #8]
 801aa70:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801aa74:	fb0b 1909 	mla	r9, fp, r9, r1
 801aa78:	f814 b006 	ldrb.w	fp, [r4, r6]
 801aa7c:	f819 900a 	ldrb.w	r9, [r9, sl]
 801aa80:	fb1b fb05 	smulbb	fp, fp, r5
 801aa84:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801aa88:	eb0e 0a09 	add.w	sl, lr, r9
 801aa8c:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801aa90:	fb09 b908 	mla	r9, r9, r8, fp
 801aa94:	fa1f f989 	uxth.w	r9, r9
 801aa98:	f109 0b01 	add.w	fp, r9, #1
 801aa9c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801aaa0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801aaa4:	f804 9006 	strb.w	r9, [r4, r6]
 801aaa8:	4426      	add	r6, r4
 801aaaa:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801aaae:	f896 b001 	ldrb.w	fp, [r6, #1]
 801aab2:	fb1b fb05 	smulbb	fp, fp, r5
 801aab6:	fb09 b908 	mla	r9, r9, r8, fp
 801aaba:	fa1f f989 	uxth.w	r9, r9
 801aabe:	f109 0b01 	add.w	fp, r9, #1
 801aac2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801aac6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801aaca:	f886 9001 	strb.w	r9, [r6, #1]
 801aace:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801aad2:	f896 a002 	ldrb.w	sl, [r6, #2]
 801aad6:	fb1a fa05 	smulbb	sl, sl, r5
 801aada:	fb09 a908 	mla	r9, r9, r8, sl
 801aade:	fa1f f989 	uxth.w	r9, r9
 801aae2:	f109 0a01 	add.w	sl, r9, #1
 801aae6:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801aaea:	ea4f 2929 	mov.w	r9, r9, asr #8
 801aaee:	f886 9002 	strb.w	r9, [r6, #2]
 801aaf2:	9911      	ldr	r1, [sp, #68]	; 0x44
 801aaf4:	3701      	adds	r7, #1
 801aaf6:	4408      	add	r0, r1
 801aaf8:	9912      	ldr	r1, [sp, #72]	; 0x48
 801aafa:	440a      	add	r2, r1
 801aafc:	e761      	b.n	801a9c2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801aafe:	b005      	add	sp, #20
 801ab00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ab04 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ab04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab08:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ab0a:	4693      	mov	fp, r2
 801ab0c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801ab0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ab12:	6868      	ldr	r0, [r5, #4]
 801ab14:	6877      	ldr	r7, [r6, #4]
 801ab16:	9100      	str	r1, [sp, #0]
 801ab18:	3704      	adds	r7, #4
 801ab1a:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801ab1e:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 801ab22:	fb00 2404 	mla	r4, r0, r4, r2
 801ab26:	682a      	ldr	r2, [r5, #0]
 801ab28:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ab2c:	4414      	add	r4, r2
 801ab2e:	6832      	ldr	r2, [r6, #0]
 801ab30:	9201      	str	r2, [sp, #4]
 801ab32:	9a00      	ldr	r2, [sp, #0]
 801ab34:	2a00      	cmp	r2, #0
 801ab36:	dc03      	bgt.n	801ab40 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ab38:	f1bb 0f00 	cmp.w	fp, #0
 801ab3c:	f340 80bc 	ble.w	801acb8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801ab40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ab42:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801ab46:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ab4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ab4c:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801ab50:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ab54:	2b00      	cmp	r3, #0
 801ab56:	dd0c      	ble.n	801ab72 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ab58:	1405      	asrs	r5, r0, #16
 801ab5a:	d405      	bmi.n	801ab68 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801ab5c:	4555      	cmp	r5, sl
 801ab5e:	da03      	bge.n	801ab68 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801ab60:	1415      	asrs	r5, r2, #16
 801ab62:	d401      	bmi.n	801ab68 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801ab64:	454d      	cmp	r5, r9
 801ab66:	db05      	blt.n	801ab74 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ab68:	4440      	add	r0, r8
 801ab6a:	4472      	add	r2, lr
 801ab6c:	3b01      	subs	r3, #1
 801ab6e:	3403      	adds	r4, #3
 801ab70:	e7f0      	b.n	801ab54 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801ab72:	d03f      	beq.n	801abf4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801ab74:	1e5d      	subs	r5, r3, #1
 801ab76:	fb08 0c05 	mla	ip, r8, r5, r0
 801ab7a:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801ab7e:	d42e      	bmi.n	801abde <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801ab80:	45d4      	cmp	ip, sl
 801ab82:	da2c      	bge.n	801abde <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801ab84:	fb0e 2505 	mla	r5, lr, r5, r2
 801ab88:	142d      	asrs	r5, r5, #16
 801ab8a:	d428      	bmi.n	801abde <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801ab8c:	454d      	cmp	r5, r9
 801ab8e:	da26      	bge.n	801abde <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801ab90:	1ce5      	adds	r5, r4, #3
 801ab92:	469c      	mov	ip, r3
 801ab94:	f1bc 0f00 	cmp.w	ip, #0
 801ab98:	f105 0503 	add.w	r5, r5, #3
 801ab9c:	dd25      	ble.n	801abea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801ab9e:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801aba2:	ea4f 4922 	mov.w	r9, r2, asr #16
 801aba6:	f10c 3cff 	add.w	ip, ip, #4294967295
 801abaa:	4472      	add	r2, lr
 801abac:	468a      	mov	sl, r1
 801abae:	9901      	ldr	r1, [sp, #4]
 801abb0:	fb0a 1909 	mla	r9, sl, r9, r1
 801abb4:	1401      	asrs	r1, r0, #16
 801abb6:	4440      	add	r0, r8
 801abb8:	f819 9001 	ldrb.w	r9, [r9, r1]
 801abbc:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801abc0:	eb07 0a09 	add.w	sl, r7, r9
 801abc4:	f817 9009 	ldrb.w	r9, [r7, r9]
 801abc8:	f805 9c06 	strb.w	r9, [r5, #-6]
 801abcc:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801abd0:	f805 9c05 	strb.w	r9, [r5, #-5]
 801abd4:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801abd8:	f805 9c04 	strb.w	r9, [r5, #-4]
 801abdc:	e7da      	b.n	801ab94 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801abde:	2500      	movs	r5, #0
 801abe0:	eba3 0c05 	sub.w	ip, r3, r5
 801abe4:	f1bc 0f00 	cmp.w	ip, #0
 801abe8:	dc3b      	bgt.n	801ac62 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801abea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801abee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801abf2:	441c      	add	r4, r3
 801abf4:	9b00      	ldr	r3, [sp, #0]
 801abf6:	2b00      	cmp	r3, #0
 801abf8:	dd5e      	ble.n	801acb8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801abfa:	ee30 0a04 	vadd.f32	s0, s0, s8
 801abfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ac00:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ac04:	eeb0 6a62 	vmov.f32	s12, s5
 801ac08:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ac0c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ac10:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ac14:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801ac18:	eeb0 6a43 	vmov.f32	s12, s6
 801ac1c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ac20:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801ac24:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ac28:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ac2c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ac30:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ac34:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ac38:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ac3c:	ee12 2a90 	vmov	r2, s5
 801ac40:	eef0 2a47 	vmov.f32	s5, s14
 801ac44:	fb92 f8f3 	sdiv	r8, r2, r3
 801ac48:	ee13 2a10 	vmov	r2, s6
 801ac4c:	eeb0 3a67 	vmov.f32	s6, s15
 801ac50:	fb92 fef3 	sdiv	lr, r2, r3
 801ac54:	9b00      	ldr	r3, [sp, #0]
 801ac56:	3b01      	subs	r3, #1
 801ac58:	9300      	str	r3, [sp, #0]
 801ac5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ac5c:	bf08      	it	eq
 801ac5e:	465b      	moveq	r3, fp
 801ac60:	e767      	b.n	801ab32 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801ac62:	ea5f 4920 	movs.w	r9, r0, asr #16
 801ac66:	d423      	bmi.n	801acb0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801ac68:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801ac6c:	45cc      	cmp	ip, r9
 801ac6e:	dd1f      	ble.n	801acb0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801ac70:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801ac74:	d41c      	bmi.n	801acb0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801ac76:	68f1      	ldr	r1, [r6, #12]
 801ac78:	4551      	cmp	r1, sl
 801ac7a:	dd19      	ble.n	801acb0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801ac7c:	fa0f fc8c 	sxth.w	ip, ip
 801ac80:	9901      	ldr	r1, [sp, #4]
 801ac82:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801ac86:	f81c c009 	ldrb.w	ip, [ip, r9]
 801ac8a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801ac8e:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801ac92:	eb07 090c 	add.w	r9, r7, ip
 801ac96:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801ac9a:	f804 a00c 	strb.w	sl, [r4, ip]
 801ac9e:	44a4      	add	ip, r4
 801aca0:	f899 a001 	ldrb.w	sl, [r9, #1]
 801aca4:	f88c a001 	strb.w	sl, [ip, #1]
 801aca8:	f899 9002 	ldrb.w	r9, [r9, #2]
 801acac:	f88c 9002 	strb.w	r9, [ip, #2]
 801acb0:	4440      	add	r0, r8
 801acb2:	4472      	add	r2, lr
 801acb4:	3501      	adds	r5, #1
 801acb6:	e793      	b.n	801abe0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801acb8:	b003      	add	sp, #12
 801acba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801acbe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801acbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acc2:	b085      	sub	sp, #20
 801acc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801acc8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801acca:	9202      	str	r2, [sp, #8]
 801accc:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801acd0:	6860      	ldr	r0, [r4, #4]
 801acd2:	9203      	str	r2, [sp, #12]
 801acd4:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801acd8:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801acdc:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801ace0:	fb00 2505 	mla	r5, r0, r5, r2
 801ace4:	6822      	ldr	r2, [r4, #0]
 801ace6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801acea:	4415      	add	r5, r2
 801acec:	f8dc 2000 	ldr.w	r2, [ip]
 801acf0:	9200      	str	r2, [sp, #0]
 801acf2:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801acf6:	3204      	adds	r2, #4
 801acf8:	9201      	str	r2, [sp, #4]
 801acfa:	2900      	cmp	r1, #0
 801acfc:	dc03      	bgt.n	801ad06 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801acfe:	9a02      	ldr	r2, [sp, #8]
 801ad00:	2a00      	cmp	r2, #0
 801ad02:	f340 8127 	ble.w	801af54 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801ad06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ad08:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801ad0c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801ad10:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ad12:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801ad16:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ad1a:	2b00      	cmp	r3, #0
 801ad1c:	dd0d      	ble.n	801ad3a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ad1e:	1422      	asrs	r2, r4, #16
 801ad20:	d405      	bmi.n	801ad2e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ad22:	4542      	cmp	r2, r8
 801ad24:	da03      	bge.n	801ad2e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ad26:	1402      	asrs	r2, r0, #16
 801ad28:	d401      	bmi.n	801ad2e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ad2a:	42ba      	cmp	r2, r7
 801ad2c:	db06      	blt.n	801ad3c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ad2e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ad30:	4474      	add	r4, lr
 801ad32:	3b01      	subs	r3, #1
 801ad34:	3503      	adds	r5, #3
 801ad36:	4410      	add	r0, r2
 801ad38:	e7ef      	b.n	801ad1a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ad3a:	d075      	beq.n	801ae28 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801ad3c:	1e5a      	subs	r2, r3, #1
 801ad3e:	fb0e 4602 	mla	r6, lr, r2, r4
 801ad42:	1436      	asrs	r6, r6, #16
 801ad44:	d465      	bmi.n	801ae12 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ad46:	4546      	cmp	r6, r8
 801ad48:	da63      	bge.n	801ae12 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ad4a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801ad4c:	fb06 0202 	mla	r2, r6, r2, r0
 801ad50:	1412      	asrs	r2, r2, #16
 801ad52:	d45e      	bmi.n	801ae12 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ad54:	42ba      	cmp	r2, r7
 801ad56:	da5c      	bge.n	801ae12 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801ad58:	1cef      	adds	r7, r5, #3
 801ad5a:	4699      	mov	r9, r3
 801ad5c:	f1b9 0f00 	cmp.w	r9, #0
 801ad60:	dd5d      	ble.n	801ae1e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801ad62:	1402      	asrs	r2, r0, #16
 801ad64:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801ad68:	1426      	asrs	r6, r4, #16
 801ad6a:	4692      	mov	sl, r2
 801ad6c:	9a00      	ldr	r2, [sp, #0]
 801ad6e:	fb08 220a 	mla	r2, r8, sl, r2
 801ad72:	5d92      	ldrb	r2, [r2, r6]
 801ad74:	9e01      	ldr	r6, [sp, #4]
 801ad76:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801ad7a:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801ad7e:	d041      	beq.n	801ae04 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801ad80:	9a03      	ldr	r2, [sp, #12]
 801ad82:	fa5f fb86 	uxtb.w	fp, r6
 801ad86:	fb02 f808 	mul.w	r8, r2, r8
 801ad8a:	f108 0201 	add.w	r2, r8, #1
 801ad8e:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801ad92:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801ad96:	1212      	asrs	r2, r2, #8
 801ad98:	fa1f fa82 	uxth.w	sl, r2
 801ad9c:	43d2      	mvns	r2, r2
 801ad9e:	fb1b fb0a 	smulbb	fp, fp, sl
 801ada2:	b2d2      	uxtb	r2, r2
 801ada4:	fb08 b802 	mla	r8, r8, r2, fp
 801ada8:	fa1f f888 	uxth.w	r8, r8
 801adac:	f108 0b01 	add.w	fp, r8, #1
 801adb0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801adb4:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801adb8:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801adbc:	fb1b fb0a 	smulbb	fp, fp, sl
 801adc0:	ea4f 2828 	mov.w	r8, r8, asr #8
 801adc4:	fb16 fa0a 	smulbb	sl, r6, sl
 801adc8:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801adcc:	f807 8c03 	strb.w	r8, [r7, #-3]
 801add0:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801add4:	fb06 aa02 	mla	sl, r6, r2, sl
 801add8:	fb08 b802 	mla	r8, r8, r2, fp
 801addc:	fa1f fa8a 	uxth.w	sl, sl
 801ade0:	fa1f f888 	uxth.w	r8, r8
 801ade4:	f10a 0601 	add.w	r6, sl, #1
 801ade8:	f108 0b01 	add.w	fp, r8, #1
 801adec:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801adf0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801adf4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801adf8:	ea4f 2828 	mov.w	r8, r8, asr #8
 801adfc:	f807 ac01 	strb.w	sl, [r7, #-1]
 801ae00:	f807 8c02 	strb.w	r8, [r7, #-2]
 801ae04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ae06:	4474      	add	r4, lr
 801ae08:	3703      	adds	r7, #3
 801ae0a:	f109 39ff 	add.w	r9, r9, #4294967295
 801ae0e:	4410      	add	r0, r2
 801ae10:	e7a4      	b.n	801ad5c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ae12:	f04f 0800 	mov.w	r8, #0
 801ae16:	eba3 0208 	sub.w	r2, r3, r8
 801ae1a:	2a00      	cmp	r2, #0
 801ae1c:	dc3b      	bgt.n	801ae96 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801ae1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ae22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ae26:	441d      	add	r5, r3
 801ae28:	2900      	cmp	r1, #0
 801ae2a:	f340 8093 	ble.w	801af54 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801ae2e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ae32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ae34:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ae38:	3901      	subs	r1, #1
 801ae3a:	eeb0 6a62 	vmov.f32	s12, s5
 801ae3e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ae42:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ae46:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ae4a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ae4e:	eeb0 6a43 	vmov.f32	s12, s6
 801ae52:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ae56:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ae5a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ae5e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ae62:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ae66:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ae6a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ae6e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ae72:	ee12 2a90 	vmov	r2, s5
 801ae76:	eef0 2a47 	vmov.f32	s5, s14
 801ae7a:	fb92 fef3 	sdiv	lr, r2, r3
 801ae7e:	ee13 2a10 	vmov	r2, s6
 801ae82:	eeb0 3a67 	vmov.f32	s6, s15
 801ae86:	fb92 f3f3 	sdiv	r3, r2, r3
 801ae8a:	9a02      	ldr	r2, [sp, #8]
 801ae8c:	9312      	str	r3, [sp, #72]	; 0x48
 801ae8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ae90:	bf08      	it	eq
 801ae92:	4613      	moveq	r3, r2
 801ae94:	e731      	b.n	801acfa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ae96:	1427      	asrs	r7, r4, #16
 801ae98:	d456      	bmi.n	801af48 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801ae9a:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801ae9e:	42be      	cmp	r6, r7
 801aea0:	dd52      	ble.n	801af48 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801aea2:	ea5f 4920 	movs.w	r9, r0, asr #16
 801aea6:	d44f      	bmi.n	801af48 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801aea8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801aeac:	454a      	cmp	r2, r9
 801aeae:	dd4b      	ble.n	801af48 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801aeb0:	9a00      	ldr	r2, [sp, #0]
 801aeb2:	b236      	sxth	r6, r6
 801aeb4:	fb09 2606 	mla	r6, r9, r6, r2
 801aeb8:	5df2      	ldrb	r2, [r6, r7]
 801aeba:	9e01      	ldr	r6, [sp, #4]
 801aebc:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801aec0:	0e3a      	lsrs	r2, r7, #24
 801aec2:	d041      	beq.n	801af48 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801aec4:	9e03      	ldr	r6, [sp, #12]
 801aec6:	fa5f fb87 	uxtb.w	fp, r7
 801aeca:	4372      	muls	r2, r6
 801aecc:	1c56      	adds	r6, r2, #1
 801aece:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801aed2:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801aed6:	1212      	asrs	r2, r2, #8
 801aed8:	f815 9006 	ldrb.w	r9, [r5, r6]
 801aedc:	fa1f fa82 	uxth.w	sl, r2
 801aee0:	43d2      	mvns	r2, r2
 801aee2:	fb1b fb0a 	smulbb	fp, fp, sl
 801aee6:	b2d2      	uxtb	r2, r2
 801aee8:	fb09 b902 	mla	r9, r9, r2, fp
 801aeec:	fa1f f989 	uxth.w	r9, r9
 801aef0:	f109 0b01 	add.w	fp, r9, #1
 801aef4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801aef8:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801aefc:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801af00:	fb1b fb0a 	smulbb	fp, fp, sl
 801af04:	ea4f 2929 	mov.w	r9, r9, asr #8
 801af08:	fb17 fa0a 	smulbb	sl, r7, sl
 801af0c:	f805 9006 	strb.w	r9, [r5, r6]
 801af10:	442e      	add	r6, r5
 801af12:	78b7      	ldrb	r7, [r6, #2]
 801af14:	f896 9001 	ldrb.w	r9, [r6, #1]
 801af18:	fb07 aa02 	mla	sl, r7, r2, sl
 801af1c:	fb09 b902 	mla	r9, r9, r2, fp
 801af20:	fa1f fa8a 	uxth.w	sl, sl
 801af24:	fa1f f989 	uxth.w	r9, r9
 801af28:	f10a 0701 	add.w	r7, sl, #1
 801af2c:	f109 0b01 	add.w	fp, r9, #1
 801af30:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801af34:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801af38:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801af3c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801af40:	f886 a002 	strb.w	sl, [r6, #2]
 801af44:	f886 9001 	strb.w	r9, [r6, #1]
 801af48:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801af4a:	4474      	add	r4, lr
 801af4c:	f108 0801 	add.w	r8, r8, #1
 801af50:	4410      	add	r0, r2
 801af52:	e760      	b.n	801ae16 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801af54:	b005      	add	sp, #20
 801af56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801af5a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801af5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af5e:	b085      	sub	sp, #20
 801af60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801af64:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801af66:	9203      	str	r2, [sp, #12]
 801af68:	6868      	ldr	r0, [r5, #4]
 801af6a:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801af6e:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801af72:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801af76:	fb00 2404 	mla	r4, r0, r4, r2
 801af7a:	682a      	ldr	r2, [r5, #0]
 801af7c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801af80:	4414      	add	r4, r2
 801af82:	f8dc 2000 	ldr.w	r2, [ip]
 801af86:	9201      	str	r2, [sp, #4]
 801af88:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801af8c:	3204      	adds	r2, #4
 801af8e:	9202      	str	r2, [sp, #8]
 801af90:	2900      	cmp	r1, #0
 801af92:	dc03      	bgt.n	801af9c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801af94:	9a03      	ldr	r2, [sp, #12]
 801af96:	2a00      	cmp	r2, #0
 801af98:	f340 8137 	ble.w	801b20a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801af9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801af9e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801afa2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801afa6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801afa8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801afac:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801afb0:	2b00      	cmp	r3, #0
 801afb2:	dd0d      	ble.n	801afd0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801afb4:	1405      	asrs	r5, r0, #16
 801afb6:	d405      	bmi.n	801afc4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801afb8:	4545      	cmp	r5, r8
 801afba:	da03      	bge.n	801afc4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801afbc:	1415      	asrs	r5, r2, #16
 801afbe:	d401      	bmi.n	801afc4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801afc0:	42bd      	cmp	r5, r7
 801afc2:	db06      	blt.n	801afd2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801afc4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801afc6:	4470      	add	r0, lr
 801afc8:	3b01      	subs	r3, #1
 801afca:	3403      	adds	r4, #3
 801afcc:	442a      	add	r2, r5
 801afce:	e7ef      	b.n	801afb0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801afd0:	d070      	beq.n	801b0b4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801afd2:	1e5d      	subs	r5, r3, #1
 801afd4:	fb0e 0605 	mla	r6, lr, r5, r0
 801afd8:	1436      	asrs	r6, r6, #16
 801afda:	d462      	bmi.n	801b0a2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801afdc:	4546      	cmp	r6, r8
 801afde:	da60      	bge.n	801b0a2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801afe0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801afe2:	fb06 2505 	mla	r5, r6, r5, r2
 801afe6:	142d      	asrs	r5, r5, #16
 801afe8:	d45b      	bmi.n	801b0a2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801afea:	42bd      	cmp	r5, r7
 801afec:	da59      	bge.n	801b0a2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801afee:	1ce5      	adds	r5, r4, #3
 801aff0:	469a      	mov	sl, r3
 801aff2:	f1ba 0f00 	cmp.w	sl, #0
 801aff6:	dd58      	ble.n	801b0aa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801aff8:	1416      	asrs	r6, r2, #16
 801affa:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801affe:	1407      	asrs	r7, r0, #16
 801b000:	46b1      	mov	r9, r6
 801b002:	9e01      	ldr	r6, [sp, #4]
 801b004:	fb08 6609 	mla	r6, r8, r9, r6
 801b008:	5df6      	ldrb	r6, [r6, r7]
 801b00a:	9f02      	ldr	r7, [sp, #8]
 801b00c:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801b010:	0e37      	lsrs	r7, r6, #24
 801b012:	2fff      	cmp	r7, #255	; 0xff
 801b014:	f000 80f0 	beq.w	801b1f8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801b018:	fa5f f887 	uxtb.w	r8, r7
 801b01c:	b3d7      	cbz	r7, 801b094 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801b01e:	fa1f f788 	uxth.w	r7, r8
 801b022:	ea6f 0808 	mvn.w	r8, r8
 801b026:	fa5f fb86 	uxtb.w	fp, r6
 801b02a:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801b02e:	fa5f f888 	uxtb.w	r8, r8
 801b032:	fb1b fb07 	smulbb	fp, fp, r7
 801b036:	fb09 b908 	mla	r9, r9, r8, fp
 801b03a:	fa1f f989 	uxth.w	r9, r9
 801b03e:	f109 0b01 	add.w	fp, r9, #1
 801b042:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b046:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801b04a:	fb1b fb08 	smulbb	fp, fp, r8
 801b04e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b052:	f805 9c03 	strb.w	r9, [r5, #-3]
 801b056:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801b05a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801b05e:	fb09 b907 	mla	r9, r9, r7, fp
 801b062:	fa1f f989 	uxth.w	r9, r9
 801b066:	f109 0b01 	add.w	fp, r9, #1
 801b06a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b06e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b072:	f805 9c02 	strb.w	r9, [r5, #-2]
 801b076:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801b07a:	fb19 f808 	smulbb	r8, r9, r8
 801b07e:	fb06 8607 	mla	r6, r6, r7, r8
 801b082:	b2b6      	uxth	r6, r6
 801b084:	f106 0801 	add.w	r8, r6, #1
 801b088:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801b08c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b090:	f805 8c01 	strb.w	r8, [r5, #-1]
 801b094:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801b096:	4470      	add	r0, lr
 801b098:	3503      	adds	r5, #3
 801b09a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b09e:	4432      	add	r2, r6
 801b0a0:	e7a7      	b.n	801aff2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b0a2:	2600      	movs	r6, #0
 801b0a4:	1b9d      	subs	r5, r3, r6
 801b0a6:	2d00      	cmp	r5, #0
 801b0a8:	dc3b      	bgt.n	801b122 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801b0aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b0ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b0b2:	441c      	add	r4, r3
 801b0b4:	2900      	cmp	r1, #0
 801b0b6:	f340 80a8 	ble.w	801b20a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b0ba:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b0be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b0c0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b0c4:	3901      	subs	r1, #1
 801b0c6:	eeb0 6a62 	vmov.f32	s12, s5
 801b0ca:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b0ce:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b0d2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b0d6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b0da:	eeb0 6a43 	vmov.f32	s12, s6
 801b0de:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b0e2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b0e6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b0ea:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b0ee:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b0f2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b0f6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b0fa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b0fe:	ee12 2a90 	vmov	r2, s5
 801b102:	eef0 2a47 	vmov.f32	s5, s14
 801b106:	fb92 fef3 	sdiv	lr, r2, r3
 801b10a:	ee13 2a10 	vmov	r2, s6
 801b10e:	eeb0 3a67 	vmov.f32	s6, s15
 801b112:	fb92 f3f3 	sdiv	r3, r2, r3
 801b116:	9a03      	ldr	r2, [sp, #12]
 801b118:	9312      	str	r3, [sp, #72]	; 0x48
 801b11a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b11c:	bf08      	it	eq
 801b11e:	4613      	moveq	r3, r2
 801b120:	e736      	b.n	801af90 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801b122:	ea5f 4820 	movs.w	r8, r0, asr #16
 801b126:	d457      	bmi.n	801b1d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b128:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801b12c:	4547      	cmp	r7, r8
 801b12e:	dd53      	ble.n	801b1d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b130:	ea5f 4922 	movs.w	r9, r2, asr #16
 801b134:	d450      	bmi.n	801b1d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b136:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801b13a:	454d      	cmp	r5, r9
 801b13c:	dd4c      	ble.n	801b1d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b13e:	9d01      	ldr	r5, [sp, #4]
 801b140:	b23f      	sxth	r7, r7
 801b142:	fb09 5707 	mla	r7, r9, r7, r5
 801b146:	f817 5008 	ldrb.w	r5, [r7, r8]
 801b14a:	9f02      	ldr	r7, [sp, #8]
 801b14c:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801b150:	0e2f      	lsrs	r7, r5, #24
 801b152:	2fff      	cmp	r7, #255	; 0xff
 801b154:	d045      	beq.n	801b1e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801b156:	fa5f f987 	uxtb.w	r9, r7
 801b15a:	b3ef      	cbz	r7, 801b1d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b15c:	fa1f f889 	uxth.w	r8, r9
 801b160:	ea6f 0909 	mvn.w	r9, r9
 801b164:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801b168:	fa5f fb85 	uxtb.w	fp, r5
 801b16c:	f814 a007 	ldrb.w	sl, [r4, r7]
 801b170:	fa5f f989 	uxtb.w	r9, r9
 801b174:	fb1b fb08 	smulbb	fp, fp, r8
 801b178:	fb0a ba09 	mla	sl, sl, r9, fp
 801b17c:	fa1f fa8a 	uxth.w	sl, sl
 801b180:	f10a 0b01 	add.w	fp, sl, #1
 801b184:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801b188:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b18c:	f804 a007 	strb.w	sl, [r4, r7]
 801b190:	4427      	add	r7, r4
 801b192:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801b196:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801b19a:	f897 b001 	ldrb.w	fp, [r7, #1]
 801b19e:	fb1b fb09 	smulbb	fp, fp, r9
 801b1a2:	fb0a ba08 	mla	sl, sl, r8, fp
 801b1a6:	fa1f fa8a 	uxth.w	sl, sl
 801b1aa:	f10a 0b01 	add.w	fp, sl, #1
 801b1ae:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801b1b2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b1b6:	f887 a001 	strb.w	sl, [r7, #1]
 801b1ba:	f897 a002 	ldrb.w	sl, [r7, #2]
 801b1be:	fb1a f909 	smulbb	r9, sl, r9
 801b1c2:	fb05 9508 	mla	r5, r5, r8, r9
 801b1c6:	b2ad      	uxth	r5, r5
 801b1c8:	f105 0901 	add.w	r9, r5, #1
 801b1cc:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801b1d0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b1d4:	f887 9002 	strb.w	r9, [r7, #2]
 801b1d8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801b1da:	4470      	add	r0, lr
 801b1dc:	3601      	adds	r6, #1
 801b1de:	442a      	add	r2, r5
 801b1e0:	e760      	b.n	801b0a4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801b1e2:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801b1e6:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801b1ea:	55e5      	strb	r5, [r4, r7]
 801b1ec:	4427      	add	r7, r4
 801b1ee:	0c2d      	lsrs	r5, r5, #16
 801b1f0:	f887 8001 	strb.w	r8, [r7, #1]
 801b1f4:	70bd      	strb	r5, [r7, #2]
 801b1f6:	e7ef      	b.n	801b1d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b1f8:	0a37      	lsrs	r7, r6, #8
 801b1fa:	f805 6c03 	strb.w	r6, [r5, #-3]
 801b1fe:	0c36      	lsrs	r6, r6, #16
 801b200:	f805 7c02 	strb.w	r7, [r5, #-2]
 801b204:	f805 6c01 	strb.w	r6, [r5, #-1]
 801b208:	e744      	b.n	801b094 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801b20a:	b005      	add	sp, #20
 801b20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b210 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b210:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b214:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801b216:	9201      	str	r2, [sp, #4]
 801b218:	6870      	ldr	r0, [r6, #4]
 801b21a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801b21e:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801b222:	fa1f fe85 	uxth.w	lr, r5
 801b226:	43ed      	mvns	r5, r5
 801b228:	f8dc 8000 	ldr.w	r8, [ip]
 801b22c:	b2ed      	uxtb	r5, r5
 801b22e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801b232:	fb00 2404 	mla	r4, r0, r4, r2
 801b236:	6832      	ldr	r2, [r6, #0]
 801b238:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b23c:	4414      	add	r4, r2
 801b23e:	2900      	cmp	r1, #0
 801b240:	dc03      	bgt.n	801b24a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801b242:	9a01      	ldr	r2, [sp, #4]
 801b244:	2a00      	cmp	r2, #0
 801b246:	f340 810d 	ble.w	801b464 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801b24a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b24c:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801b250:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b254:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b256:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801b25a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b25e:	2b00      	cmp	r3, #0
 801b260:	dd0e      	ble.n	801b280 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b262:	1406      	asrs	r6, r0, #16
 801b264:	d405      	bmi.n	801b272 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801b266:	4556      	cmp	r6, sl
 801b268:	da03      	bge.n	801b272 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801b26a:	1416      	asrs	r6, r2, #16
 801b26c:	d401      	bmi.n	801b272 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801b26e:	454e      	cmp	r6, r9
 801b270:	db07      	blt.n	801b282 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b272:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801b274:	3b01      	subs	r3, #1
 801b276:	3403      	adds	r4, #3
 801b278:	4430      	add	r0, r6
 801b27a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801b27c:	4432      	add	r2, r6
 801b27e:	e7ee      	b.n	801b25e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801b280:	d060      	beq.n	801b344 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801b282:	1e5e      	subs	r6, r3, #1
 801b284:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801b286:	fb07 0706 	mla	r7, r7, r6, r0
 801b28a:	143f      	asrs	r7, r7, #16
 801b28c:	d451      	bmi.n	801b332 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801b28e:	4557      	cmp	r7, sl
 801b290:	da4f      	bge.n	801b332 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801b292:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801b294:	fb07 2606 	mla	r6, r7, r6, r2
 801b298:	1436      	asrs	r6, r6, #16
 801b29a:	d44a      	bmi.n	801b332 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801b29c:	454e      	cmp	r6, r9
 801b29e:	da48      	bge.n	801b332 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801b2a0:	1ce6      	adds	r6, r4, #3
 801b2a2:	4699      	mov	r9, r3
 801b2a4:	f1b9 0f00 	cmp.w	r9, #0
 801b2a8:	f106 0603 	add.w	r6, r6, #3
 801b2ac:	dd45      	ble.n	801b33a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801b2ae:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801b2b2:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801b2b6:	1417      	asrs	r7, r2, #16
 801b2b8:	f109 39ff 	add.w	r9, r9, #4294967295
 801b2bc:	fb0b a707 	mla	r7, fp, r7, sl
 801b2c0:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801b2c4:	fb1b fb05 	smulbb	fp, fp, r5
 801b2c8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801b2cc:	eb08 0a07 	add.w	sl, r8, r7
 801b2d0:	f818 7007 	ldrb.w	r7, [r8, r7]
 801b2d4:	fb07 b70e 	mla	r7, r7, lr, fp
 801b2d8:	b2bf      	uxth	r7, r7
 801b2da:	f107 0b01 	add.w	fp, r7, #1
 801b2de:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801b2e2:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801b2e6:	fb1b fb05 	smulbb	fp, fp, r5
 801b2ea:	123f      	asrs	r7, r7, #8
 801b2ec:	f806 7c06 	strb.w	r7, [r6, #-6]
 801b2f0:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801b2f4:	fb07 b70e 	mla	r7, r7, lr, fp
 801b2f8:	b2bf      	uxth	r7, r7
 801b2fa:	f107 0b01 	add.w	fp, r7, #1
 801b2fe:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801b302:	123f      	asrs	r7, r7, #8
 801b304:	f806 7c05 	strb.w	r7, [r6, #-5]
 801b308:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801b30c:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801b310:	fb1a fa05 	smulbb	sl, sl, r5
 801b314:	fb07 a70e 	mla	r7, r7, lr, sl
 801b318:	b2bf      	uxth	r7, r7
 801b31a:	f107 0a01 	add.w	sl, r7, #1
 801b31e:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801b322:	123f      	asrs	r7, r7, #8
 801b324:	f806 7c04 	strb.w	r7, [r6, #-4]
 801b328:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801b32a:	4438      	add	r0, r7
 801b32c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801b32e:	443a      	add	r2, r7
 801b330:	e7b8      	b.n	801b2a4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b332:	2700      	movs	r7, #0
 801b334:	1bde      	subs	r6, r3, r7
 801b336:	2e00      	cmp	r6, #0
 801b338:	dc3f      	bgt.n	801b3ba <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801b33a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b33e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b342:	441c      	add	r4, r3
 801b344:	2900      	cmp	r1, #0
 801b346:	f340 808d 	ble.w	801b464 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801b34a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b34e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b350:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b354:	3901      	subs	r1, #1
 801b356:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b35a:	eef0 6a62 	vmov.f32	s13, s5
 801b35e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b362:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b366:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b36a:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801b36e:	eef0 6a43 	vmov.f32	s13, s6
 801b372:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b376:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801b37a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b37e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b382:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b386:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b38a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b38e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b392:	ee12 2a90 	vmov	r2, s5
 801b396:	eef0 2a47 	vmov.f32	s5, s14
 801b39a:	fb92 f3f3 	sdiv	r3, r2, r3
 801b39e:	ee13 2a10 	vmov	r2, s6
 801b3a2:	930f      	str	r3, [sp, #60]	; 0x3c
 801b3a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b3a6:	eeb0 3a67 	vmov.f32	s6, s15
 801b3aa:	fb92 f3f3 	sdiv	r3, r2, r3
 801b3ae:	9a01      	ldr	r2, [sp, #4]
 801b3b0:	9310      	str	r3, [sp, #64]	; 0x40
 801b3b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b3b4:	bf08      	it	eq
 801b3b6:	4613      	moveq	r3, r2
 801b3b8:	e741      	b.n	801b23e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801b3ba:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b3be:	d44b      	bmi.n	801b458 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801b3c0:	f8dc b008 	ldr.w	fp, [ip, #8]
 801b3c4:	45cb      	cmp	fp, r9
 801b3c6:	dd47      	ble.n	801b458 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801b3c8:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801b3cc:	d444      	bmi.n	801b458 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801b3ce:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801b3d2:	4556      	cmp	r6, sl
 801b3d4:	dd40      	ble.n	801b458 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801b3d6:	fa0f f68b 	sxth.w	r6, fp
 801b3da:	fb0a 9906 	mla	r9, sl, r6, r9
 801b3de:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801b3e2:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801b3e6:	f814 b006 	ldrb.w	fp, [r4, r6]
 801b3ea:	fb1b fb05 	smulbb	fp, fp, r5
 801b3ee:	eb08 0a09 	add.w	sl, r8, r9
 801b3f2:	f818 9009 	ldrb.w	r9, [r8, r9]
 801b3f6:	fb09 b90e 	mla	r9, r9, lr, fp
 801b3fa:	fa1f f989 	uxth.w	r9, r9
 801b3fe:	f109 0b01 	add.w	fp, r9, #1
 801b402:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b406:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b40a:	f804 9006 	strb.w	r9, [r4, r6]
 801b40e:	4426      	add	r6, r4
 801b410:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801b414:	f896 b001 	ldrb.w	fp, [r6, #1]
 801b418:	fb1b fb05 	smulbb	fp, fp, r5
 801b41c:	fb09 b90e 	mla	r9, r9, lr, fp
 801b420:	fa1f f989 	uxth.w	r9, r9
 801b424:	f109 0b01 	add.w	fp, r9, #1
 801b428:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b42c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b430:	f886 9001 	strb.w	r9, [r6, #1]
 801b434:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801b438:	f896 a002 	ldrb.w	sl, [r6, #2]
 801b43c:	fb1a fa05 	smulbb	sl, sl, r5
 801b440:	fb09 a90e 	mla	r9, r9, lr, sl
 801b444:	fa1f f989 	uxth.w	r9, r9
 801b448:	f109 0a01 	add.w	sl, r9, #1
 801b44c:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801b450:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b454:	f886 9002 	strb.w	r9, [r6, #2]
 801b458:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801b45a:	3701      	adds	r7, #1
 801b45c:	4430      	add	r0, r6
 801b45e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801b460:	4432      	add	r2, r6
 801b462:	e767      	b.n	801b334 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801b464:	b003      	add	sp, #12
 801b466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b46a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b46a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b46e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b470:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b474:	9201      	str	r2, [sp, #4]
 801b476:	6868      	ldr	r0, [r5, #4]
 801b478:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801b47a:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801b47e:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 801b482:	fb00 2404 	mla	r4, r0, r4, r2
 801b486:	682a      	ldr	r2, [r5, #0]
 801b488:	f8d7 8000 	ldr.w	r8, [r7]
 801b48c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b490:	4414      	add	r4, r2
 801b492:	2900      	cmp	r1, #0
 801b494:	dc03      	bgt.n	801b49e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801b496:	9a01      	ldr	r2, [sp, #4]
 801b498:	2a00      	cmp	r2, #0
 801b49a:	f340 80af 	ble.w	801b5fc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801b49e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b4a0:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801b4a4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b4a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b4aa:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801b4ae:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b4b2:	2b00      	cmp	r3, #0
 801b4b4:	dd0c      	ble.n	801b4d0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b4b6:	1405      	asrs	r5, r0, #16
 801b4b8:	d405      	bmi.n	801b4c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801b4ba:	4555      	cmp	r5, sl
 801b4bc:	da03      	bge.n	801b4c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801b4be:	1415      	asrs	r5, r2, #16
 801b4c0:	d401      	bmi.n	801b4c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801b4c2:	454d      	cmp	r5, r9
 801b4c4:	db05      	blt.n	801b4d2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b4c6:	4470      	add	r0, lr
 801b4c8:	4462      	add	r2, ip
 801b4ca:	3b01      	subs	r3, #1
 801b4cc:	3403      	adds	r4, #3
 801b4ce:	e7f0      	b.n	801b4b2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801b4d0:	d038      	beq.n	801b544 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801b4d2:	1e5d      	subs	r5, r3, #1
 801b4d4:	fb0e 0605 	mla	r6, lr, r5, r0
 801b4d8:	1436      	asrs	r6, r6, #16
 801b4da:	d42a      	bmi.n	801b532 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801b4dc:	4556      	cmp	r6, sl
 801b4de:	da28      	bge.n	801b532 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801b4e0:	fb0c 2505 	mla	r5, ip, r5, r2
 801b4e4:	142d      	asrs	r5, r5, #16
 801b4e6:	d424      	bmi.n	801b532 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801b4e8:	454d      	cmp	r5, r9
 801b4ea:	da22      	bge.n	801b532 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801b4ec:	1ce6      	adds	r6, r4, #3
 801b4ee:	4699      	mov	r9, r3
 801b4f0:	f1b9 0f00 	cmp.w	r9, #0
 801b4f4:	f106 0603 	add.w	r6, r6, #3
 801b4f8:	dd1f      	ble.n	801b53a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801b4fa:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801b4fe:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801b502:	1415      	asrs	r5, r2, #16
 801b504:	4470      	add	r0, lr
 801b506:	4462      	add	r2, ip
 801b508:	f109 39ff 	add.w	r9, r9, #4294967295
 801b50c:	fb0b a505 	mla	r5, fp, r5, sl
 801b510:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b514:	eb08 0a05 	add.w	sl, r8, r5
 801b518:	f818 5005 	ldrb.w	r5, [r8, r5]
 801b51c:	f806 5c06 	strb.w	r5, [r6, #-6]
 801b520:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801b524:	f806 5c05 	strb.w	r5, [r6, #-5]
 801b528:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801b52c:	f806 5c04 	strb.w	r5, [r6, #-4]
 801b530:	e7de      	b.n	801b4f0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801b532:	2600      	movs	r6, #0
 801b534:	1b9d      	subs	r5, r3, r6
 801b536:	2d00      	cmp	r5, #0
 801b538:	dc38      	bgt.n	801b5ac <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801b53a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b53e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b542:	441c      	add	r4, r3
 801b544:	2900      	cmp	r1, #0
 801b546:	dd59      	ble.n	801b5fc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801b548:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b54c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b54e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b552:	3901      	subs	r1, #1
 801b554:	eeb0 6a62 	vmov.f32	s12, s5
 801b558:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b55c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b560:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b564:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801b568:	eeb0 6a43 	vmov.f32	s12, s6
 801b56c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b570:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801b574:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b578:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b57c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b580:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b584:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b588:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b58c:	ee12 2a90 	vmov	r2, s5
 801b590:	eef0 2a47 	vmov.f32	s5, s14
 801b594:	fb92 fef3 	sdiv	lr, r2, r3
 801b598:	ee13 2a10 	vmov	r2, s6
 801b59c:	eeb0 3a67 	vmov.f32	s6, s15
 801b5a0:	fb92 fcf3 	sdiv	ip, r2, r3
 801b5a4:	9a01      	ldr	r2, [sp, #4]
 801b5a6:	bf08      	it	eq
 801b5a8:	4613      	moveq	r3, r2
 801b5aa:	e772      	b.n	801b492 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801b5ac:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b5b0:	d420      	bmi.n	801b5f4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801b5b2:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801b5b6:	45cb      	cmp	fp, r9
 801b5b8:	dd1c      	ble.n	801b5f4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801b5ba:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801b5be:	d419      	bmi.n	801b5f4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801b5c0:	68fd      	ldr	r5, [r7, #12]
 801b5c2:	4555      	cmp	r5, sl
 801b5c4:	dd16      	ble.n	801b5f4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801b5c6:	fa0f f58b 	sxth.w	r5, fp
 801b5ca:	fb0a 9505 	mla	r5, sl, r5, r9
 801b5ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b5d2:	f818 9005 	ldrb.w	r9, [r8, r5]
 801b5d6:	eb08 0b05 	add.w	fp, r8, r5
 801b5da:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801b5de:	f804 9005 	strb.w	r9, [r4, r5]
 801b5e2:	4425      	add	r5, r4
 801b5e4:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801b5e8:	f885 9001 	strb.w	r9, [r5, #1]
 801b5ec:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801b5f0:	f885 9002 	strb.w	r9, [r5, #2]
 801b5f4:	4470      	add	r0, lr
 801b5f6:	4462      	add	r2, ip
 801b5f8:	3601      	adds	r6, #1
 801b5fa:	e79b      	b.n	801b534 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801b5fc:	b003      	add	sp, #12
 801b5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b602 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b602:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b606:	b085      	sub	sp, #20
 801b608:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b60c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b60e:	9202      	str	r2, [sp, #8]
 801b610:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801b614:	6860      	ldr	r0, [r4, #4]
 801b616:	9203      	str	r2, [sp, #12]
 801b618:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801b61c:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801b620:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801b624:	fb00 2505 	mla	r5, r0, r5, r2
 801b628:	6822      	ldr	r2, [r4, #0]
 801b62a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b62e:	4415      	add	r5, r2
 801b630:	f8dc 2000 	ldr.w	r2, [ip]
 801b634:	9201      	str	r2, [sp, #4]
 801b636:	2900      	cmp	r1, #0
 801b638:	dc03      	bgt.n	801b642 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801b63a:	9a02      	ldr	r2, [sp, #8]
 801b63c:	2a00      	cmp	r2, #0
 801b63e:	f340 8122 	ble.w	801b886 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801b642:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b644:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801b648:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801b64c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b64e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801b652:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b656:	2b00      	cmp	r3, #0
 801b658:	dd0d      	ble.n	801b676 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801b65a:	1422      	asrs	r2, r4, #16
 801b65c:	d405      	bmi.n	801b66a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b65e:	4542      	cmp	r2, r8
 801b660:	da03      	bge.n	801b66a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b662:	1402      	asrs	r2, r0, #16
 801b664:	d401      	bmi.n	801b66a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b666:	42ba      	cmp	r2, r7
 801b668:	db06      	blt.n	801b678 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b66a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b66c:	4474      	add	r4, lr
 801b66e:	3b01      	subs	r3, #1
 801b670:	3503      	adds	r5, #3
 801b672:	4410      	add	r0, r2
 801b674:	e7ef      	b.n	801b656 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801b676:	d072      	beq.n	801b75e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801b678:	1e5a      	subs	r2, r3, #1
 801b67a:	fb0e 4602 	mla	r6, lr, r2, r4
 801b67e:	1436      	asrs	r6, r6, #16
 801b680:	d462      	bmi.n	801b748 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801b682:	4546      	cmp	r6, r8
 801b684:	da60      	bge.n	801b748 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801b686:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801b688:	fb06 0202 	mla	r2, r6, r2, r0
 801b68c:	1412      	asrs	r2, r2, #16
 801b68e:	d45b      	bmi.n	801b748 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801b690:	42ba      	cmp	r2, r7
 801b692:	da59      	bge.n	801b748 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801b694:	1cef      	adds	r7, r5, #3
 801b696:	4699      	mov	r9, r3
 801b698:	f1b9 0f00 	cmp.w	r9, #0
 801b69c:	dd5a      	ble.n	801b754 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b69e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801b6a2:	1426      	asrs	r6, r4, #16
 801b6a4:	1402      	asrs	r2, r0, #16
 801b6a6:	fb08 6202 	mla	r2, r8, r2, r6
 801b6aa:	9e01      	ldr	r6, [sp, #4]
 801b6ac:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801b6b0:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801b6b4:	d041      	beq.n	801b73a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801b6b6:	9a03      	ldr	r2, [sp, #12]
 801b6b8:	fa5f fb86 	uxtb.w	fp, r6
 801b6bc:	fb02 f808 	mul.w	r8, r2, r8
 801b6c0:	f108 0201 	add.w	r2, r8, #1
 801b6c4:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801b6c8:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801b6cc:	1212      	asrs	r2, r2, #8
 801b6ce:	fa1f fa82 	uxth.w	sl, r2
 801b6d2:	43d2      	mvns	r2, r2
 801b6d4:	fb1b fb0a 	smulbb	fp, fp, sl
 801b6d8:	b2d2      	uxtb	r2, r2
 801b6da:	fb08 b802 	mla	r8, r8, r2, fp
 801b6de:	fa1f f888 	uxth.w	r8, r8
 801b6e2:	f108 0b01 	add.w	fp, r8, #1
 801b6e6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801b6ea:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801b6ee:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801b6f2:	fb1b fb0a 	smulbb	fp, fp, sl
 801b6f6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b6fa:	fb16 fa0a 	smulbb	sl, r6, sl
 801b6fe:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801b702:	f807 8c03 	strb.w	r8, [r7, #-3]
 801b706:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801b70a:	fb06 aa02 	mla	sl, r6, r2, sl
 801b70e:	fb08 b802 	mla	r8, r8, r2, fp
 801b712:	fa1f fa8a 	uxth.w	sl, sl
 801b716:	fa1f f888 	uxth.w	r8, r8
 801b71a:	f10a 0601 	add.w	r6, sl, #1
 801b71e:	f108 0b01 	add.w	fp, r8, #1
 801b722:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801b726:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801b72a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b72e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b732:	f807 ac01 	strb.w	sl, [r7, #-1]
 801b736:	f807 8c02 	strb.w	r8, [r7, #-2]
 801b73a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b73c:	4474      	add	r4, lr
 801b73e:	3703      	adds	r7, #3
 801b740:	f109 39ff 	add.w	r9, r9, #4294967295
 801b744:	4410      	add	r0, r2
 801b746:	e7a7      	b.n	801b698 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b748:	f04f 0800 	mov.w	r8, #0
 801b74c:	eba3 0208 	sub.w	r2, r3, r8
 801b750:	2a00      	cmp	r2, #0
 801b752:	dc3b      	bgt.n	801b7cc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801b754:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b758:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b75c:	441d      	add	r5, r3
 801b75e:	2900      	cmp	r1, #0
 801b760:	f340 8091 	ble.w	801b886 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801b764:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b768:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b76a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b76e:	3901      	subs	r1, #1
 801b770:	eeb0 6a62 	vmov.f32	s12, s5
 801b774:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b778:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b77c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b780:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b784:	eeb0 6a43 	vmov.f32	s12, s6
 801b788:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b78c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b790:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b794:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b798:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b79c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b7a0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b7a4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b7a8:	ee12 2a90 	vmov	r2, s5
 801b7ac:	eef0 2a47 	vmov.f32	s5, s14
 801b7b0:	fb92 fef3 	sdiv	lr, r2, r3
 801b7b4:	ee13 2a10 	vmov	r2, s6
 801b7b8:	eeb0 3a67 	vmov.f32	s6, s15
 801b7bc:	fb92 f3f3 	sdiv	r3, r2, r3
 801b7c0:	9a02      	ldr	r2, [sp, #8]
 801b7c2:	9312      	str	r3, [sp, #72]	; 0x48
 801b7c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b7c6:	bf08      	it	eq
 801b7c8:	4613      	moveq	r3, r2
 801b7ca:	e734      	b.n	801b636 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801b7cc:	1427      	asrs	r7, r4, #16
 801b7ce:	d454      	bmi.n	801b87a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801b7d0:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801b7d4:	42be      	cmp	r6, r7
 801b7d6:	dd50      	ble.n	801b87a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801b7d8:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b7dc:	d44d      	bmi.n	801b87a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801b7de:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801b7e2:	454a      	cmp	r2, r9
 801b7e4:	dd49      	ble.n	801b87a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801b7e6:	b236      	sxth	r6, r6
 801b7e8:	9a01      	ldr	r2, [sp, #4]
 801b7ea:	fb09 7606 	mla	r6, r9, r6, r7
 801b7ee:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801b7f2:	0e3a      	lsrs	r2, r7, #24
 801b7f4:	d041      	beq.n	801b87a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801b7f6:	9e03      	ldr	r6, [sp, #12]
 801b7f8:	fa5f fb87 	uxtb.w	fp, r7
 801b7fc:	4372      	muls	r2, r6
 801b7fe:	1c56      	adds	r6, r2, #1
 801b800:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801b804:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801b808:	1212      	asrs	r2, r2, #8
 801b80a:	f815 9006 	ldrb.w	r9, [r5, r6]
 801b80e:	fa1f fa82 	uxth.w	sl, r2
 801b812:	43d2      	mvns	r2, r2
 801b814:	fb1b fb0a 	smulbb	fp, fp, sl
 801b818:	b2d2      	uxtb	r2, r2
 801b81a:	fb09 b902 	mla	r9, r9, r2, fp
 801b81e:	fa1f f989 	uxth.w	r9, r9
 801b822:	f109 0b01 	add.w	fp, r9, #1
 801b826:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b82a:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801b82e:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801b832:	fb1b fb0a 	smulbb	fp, fp, sl
 801b836:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b83a:	fb17 fa0a 	smulbb	sl, r7, sl
 801b83e:	f805 9006 	strb.w	r9, [r5, r6]
 801b842:	442e      	add	r6, r5
 801b844:	78b7      	ldrb	r7, [r6, #2]
 801b846:	f896 9001 	ldrb.w	r9, [r6, #1]
 801b84a:	fb07 aa02 	mla	sl, r7, r2, sl
 801b84e:	fb09 b902 	mla	r9, r9, r2, fp
 801b852:	fa1f fa8a 	uxth.w	sl, sl
 801b856:	fa1f f989 	uxth.w	r9, r9
 801b85a:	f10a 0701 	add.w	r7, sl, #1
 801b85e:	f109 0b01 	add.w	fp, r9, #1
 801b862:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b866:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b86a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b86e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b872:	f886 a002 	strb.w	sl, [r6, #2]
 801b876:	f886 9001 	strb.w	r9, [r6, #1]
 801b87a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b87c:	4474      	add	r4, lr
 801b87e:	f108 0801 	add.w	r8, r8, #1
 801b882:	4410      	add	r0, r2
 801b884:	e762      	b.n	801b74c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801b886:	b005      	add	sp, #20
 801b888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b88c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b88c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b890:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801b892:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b896:	9201      	str	r2, [sp, #4]
 801b898:	6860      	ldr	r0, [r4, #4]
 801b89a:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801b89e:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 801b8a2:	fb00 2505 	mla	r5, r0, r5, r2
 801b8a6:	6822      	ldr	r2, [r4, #0]
 801b8a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b8ac:	4415      	add	r5, r2
 801b8ae:	f8dc 2000 	ldr.w	r2, [ip]
 801b8b2:	9200      	str	r2, [sp, #0]
 801b8b4:	2900      	cmp	r1, #0
 801b8b6:	dc03      	bgt.n	801b8c0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801b8b8:	9a01      	ldr	r2, [sp, #4]
 801b8ba:	2a00      	cmp	r2, #0
 801b8bc:	f340 812b 	ble.w	801bb16 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801b8c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b8c2:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801b8c6:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801b8ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b8cc:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801b8d0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b8d4:	2b00      	cmp	r3, #0
 801b8d6:	dd0e      	ble.n	801b8f6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b8d8:	1422      	asrs	r2, r4, #16
 801b8da:	d405      	bmi.n	801b8e8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801b8dc:	4572      	cmp	r2, lr
 801b8de:	da03      	bge.n	801b8e8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801b8e0:	1402      	asrs	r2, r0, #16
 801b8e2:	d401      	bmi.n	801b8e8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801b8e4:	42ba      	cmp	r2, r7
 801b8e6:	db07      	blt.n	801b8f8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801b8e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b8ea:	3b01      	subs	r3, #1
 801b8ec:	3503      	adds	r5, #3
 801b8ee:	4414      	add	r4, r2
 801b8f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b8f2:	4410      	add	r0, r2
 801b8f4:	e7ee      	b.n	801b8d4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801b8f6:	d06f      	beq.n	801b9d8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801b8f8:	1e5a      	subs	r2, r3, #1
 801b8fa:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801b8fc:	fb06 4602 	mla	r6, r6, r2, r4
 801b900:	1436      	asrs	r6, r6, #16
 801b902:	d45e      	bmi.n	801b9c2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801b904:	4576      	cmp	r6, lr
 801b906:	da5c      	bge.n	801b9c2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801b908:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801b90a:	fb06 0202 	mla	r2, r6, r2, r0
 801b90e:	1412      	asrs	r2, r2, #16
 801b910:	d457      	bmi.n	801b9c2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801b912:	42ba      	cmp	r2, r7
 801b914:	da55      	bge.n	801b9c2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801b916:	1cee      	adds	r6, r5, #3
 801b918:	469a      	mov	sl, r3
 801b91a:	f1ba 0f00 	cmp.w	sl, #0
 801b91e:	dd56      	ble.n	801b9ce <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801b920:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801b924:	1427      	asrs	r7, r4, #16
 801b926:	1402      	asrs	r2, r0, #16
 801b928:	fb0e 7202 	mla	r2, lr, r2, r7
 801b92c:	9f00      	ldr	r7, [sp, #0]
 801b92e:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801b932:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801b936:	d03c      	beq.n	801b9b2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801b938:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801b93c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801b940:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801b944:	fa5f f28e 	uxtb.w	r2, lr
 801b948:	b2ff      	uxtb	r7, r7
 801b94a:	f000 80dd 	beq.w	801bb08 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801b94e:	fa1f f882 	uxth.w	r8, r2
 801b952:	43d2      	mvns	r2, r2
 801b954:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801b958:	fb17 f708 	smulbb	r7, r7, r8
 801b95c:	b2d2      	uxtb	r2, r2
 801b95e:	fb19 f908 	smulbb	r9, r9, r8
 801b962:	fb0e 7702 	mla	r7, lr, r2, r7
 801b966:	fb1b f808 	smulbb	r8, fp, r8
 801b96a:	b2bf      	uxth	r7, r7
 801b96c:	f107 0e01 	add.w	lr, r7, #1
 801b970:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801b974:	123f      	asrs	r7, r7, #8
 801b976:	f806 7c03 	strb.w	r7, [r6, #-3]
 801b97a:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801b97e:	fb07 9902 	mla	r9, r7, r2, r9
 801b982:	fa1f f989 	uxth.w	r9, r9
 801b986:	f109 0701 	add.w	r7, r9, #1
 801b98a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801b98e:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801b992:	fb07 8802 	mla	r8, r7, r2, r8
 801b996:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b99a:	fa1f f888 	uxth.w	r8, r8
 801b99e:	f806 9c02 	strb.w	r9, [r6, #-2]
 801b9a2:	f108 0201 	add.w	r2, r8, #1
 801b9a6:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801b9aa:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b9ae:	f806 8c01 	strb.w	r8, [r6, #-1]
 801b9b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b9b4:	3603      	adds	r6, #3
 801b9b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b9ba:	4414      	add	r4, r2
 801b9bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b9be:	4410      	add	r0, r2
 801b9c0:	e7ab      	b.n	801b91a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801b9c2:	f04f 0e00 	mov.w	lr, #0
 801b9c6:	eba3 020e 	sub.w	r2, r3, lr
 801b9ca:	2a00      	cmp	r2, #0
 801b9cc:	dc3d      	bgt.n	801ba4a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801b9ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b9d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b9d6:	441d      	add	r5, r3
 801b9d8:	2900      	cmp	r1, #0
 801b9da:	f340 809c 	ble.w	801bb16 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801b9de:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b9e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b9e4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b9e8:	3901      	subs	r1, #1
 801b9ea:	eeb0 6a62 	vmov.f32	s12, s5
 801b9ee:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b9f2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b9f6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b9fa:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801b9fe:	eeb0 6a43 	vmov.f32	s12, s6
 801ba02:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ba06:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801ba0a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ba0e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ba12:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ba16:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ba1a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ba1e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ba22:	ee12 2a90 	vmov	r2, s5
 801ba26:	eef0 2a47 	vmov.f32	s5, s14
 801ba2a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba2e:	ee13 2a10 	vmov	r2, s6
 801ba32:	930f      	str	r3, [sp, #60]	; 0x3c
 801ba34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ba36:	eeb0 3a67 	vmov.f32	s6, s15
 801ba3a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba3e:	9a01      	ldr	r2, [sp, #4]
 801ba40:	9310      	str	r3, [sp, #64]	; 0x40
 801ba42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ba44:	bf08      	it	eq
 801ba46:	4613      	moveq	r3, r2
 801ba48:	e734      	b.n	801b8b4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801ba4a:	1427      	asrs	r7, r4, #16
 801ba4c:	d44d      	bmi.n	801baea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801ba4e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801ba52:	42be      	cmp	r6, r7
 801ba54:	dd49      	ble.n	801baea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801ba56:	ea5f 4820 	movs.w	r8, r0, asr #16
 801ba5a:	d446      	bmi.n	801baea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801ba5c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801ba60:	4542      	cmp	r2, r8
 801ba62:	dd42      	ble.n	801baea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801ba64:	b236      	sxth	r6, r6
 801ba66:	9a00      	ldr	r2, [sp, #0]
 801ba68:	fb08 7606 	mla	r6, r8, r6, r7
 801ba6c:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801ba70:	0e3a      	lsrs	r2, r7, #24
 801ba72:	d03a      	beq.n	801baea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801ba74:	2aff      	cmp	r2, #255	; 0xff
 801ba76:	b2d6      	uxtb	r6, r2
 801ba78:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801ba7c:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801ba80:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801ba84:	b2ff      	uxtb	r7, r7
 801ba86:	d037      	beq.n	801baf8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801ba88:	fa1f f986 	uxth.w	r9, r6
 801ba8c:	4472      	add	r2, lr
 801ba8e:	43f6      	mvns	r6, r6
 801ba90:	f815 8002 	ldrb.w	r8, [r5, r2]
 801ba94:	fb17 f709 	smulbb	r7, r7, r9
 801ba98:	fb1a fa09 	smulbb	sl, sl, r9
 801ba9c:	b2f6      	uxtb	r6, r6
 801ba9e:	fb1b f909 	smulbb	r9, fp, r9
 801baa2:	fb08 7706 	mla	r7, r8, r6, r7
 801baa6:	b2bf      	uxth	r7, r7
 801baa8:	f107 0801 	add.w	r8, r7, #1
 801baac:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801bab0:	123f      	asrs	r7, r7, #8
 801bab2:	54af      	strb	r7, [r5, r2]
 801bab4:	442a      	add	r2, r5
 801bab6:	7857      	ldrb	r7, [r2, #1]
 801bab8:	fb07 aa06 	mla	sl, r7, r6, sl
 801babc:	fa1f fa8a 	uxth.w	sl, sl
 801bac0:	f10a 0701 	add.w	r7, sl, #1
 801bac4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801bac8:	7897      	ldrb	r7, [r2, #2]
 801baca:	fb07 9906 	mla	r9, r7, r6, r9
 801bace:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bad2:	fa1f f989 	uxth.w	r9, r9
 801bad6:	f882 a001 	strb.w	sl, [r2, #1]
 801bada:	f109 0601 	add.w	r6, r9, #1
 801bade:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801bae2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bae6:	f882 9002 	strb.w	r9, [r2, #2]
 801baea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801baec:	f10e 0e01 	add.w	lr, lr, #1
 801baf0:	4414      	add	r4, r2
 801baf2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801baf4:	4410      	add	r0, r2
 801baf6:	e766      	b.n	801b9c6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801baf8:	4472      	add	r2, lr
 801bafa:	54af      	strb	r7, [r5, r2]
 801bafc:	442a      	add	r2, r5
 801bafe:	f882 a001 	strb.w	sl, [r2, #1]
 801bb02:	f882 b002 	strb.w	fp, [r2, #2]
 801bb06:	e7f0      	b.n	801baea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801bb08:	f806 7c03 	strb.w	r7, [r6, #-3]
 801bb0c:	f806 9c02 	strb.w	r9, [r6, #-2]
 801bb10:	f806 bc01 	strb.w	fp, [r6, #-1]
 801bb14:	e74d      	b.n	801b9b2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801bb16:	b003      	add	sp, #12
 801bb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bb1c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bb1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb20:	b087      	sub	sp, #28
 801bb22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bb26:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801bb28:	9204      	str	r2, [sp, #16]
 801bb2a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801bb2e:	6860      	ldr	r0, [r4, #4]
 801bb30:	9205      	str	r2, [sp, #20]
 801bb32:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801bb36:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 801bb3a:	9101      	str	r1, [sp, #4]
 801bb3c:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801bb40:	fb00 2505 	mla	r5, r0, r5, r2
 801bb44:	6822      	ldr	r2, [r4, #0]
 801bb46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bb4a:	4415      	add	r5, r2
 801bb4c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801bb50:	3201      	adds	r2, #1
 801bb52:	f022 0201 	bic.w	r2, r2, #1
 801bb56:	9202      	str	r2, [sp, #8]
 801bb58:	f8dc 2000 	ldr.w	r2, [ip]
 801bb5c:	9203      	str	r2, [sp, #12]
 801bb5e:	9a01      	ldr	r2, [sp, #4]
 801bb60:	2a00      	cmp	r2, #0
 801bb62:	dc03      	bgt.n	801bb6c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801bb64:	9a04      	ldr	r2, [sp, #16]
 801bb66:	2a00      	cmp	r2, #0
 801bb68:	f340 8135 	ble.w	801bdd6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801bb6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bb6e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801bb72:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801bb76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bb78:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801bb7c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bb80:	2b00      	cmp	r3, #0
 801bb82:	dd0d      	ble.n	801bba0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801bb84:	1422      	asrs	r2, r4, #16
 801bb86:	d405      	bmi.n	801bb94 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801bb88:	4542      	cmp	r2, r8
 801bb8a:	da03      	bge.n	801bb94 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801bb8c:	1402      	asrs	r2, r0, #16
 801bb8e:	d401      	bmi.n	801bb94 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801bb90:	42ba      	cmp	r2, r7
 801bb92:	db06      	blt.n	801bba2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801bb94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bb96:	4474      	add	r4, lr
 801bb98:	3b01      	subs	r3, #1
 801bb9a:	3503      	adds	r5, #3
 801bb9c:	4410      	add	r0, r2
 801bb9e:	e7ef      	b.n	801bb80 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801bba0:	d077      	beq.n	801bc92 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801bba2:	1e5a      	subs	r2, r3, #1
 801bba4:	fb0e 4602 	mla	r6, lr, r2, r4
 801bba8:	1436      	asrs	r6, r6, #16
 801bbaa:	d469      	bmi.n	801bc80 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801bbac:	4546      	cmp	r6, r8
 801bbae:	da67      	bge.n	801bc80 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801bbb0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801bbb2:	fb06 0202 	mla	r2, r6, r2, r0
 801bbb6:	1412      	asrs	r2, r2, #16
 801bbb8:	d462      	bmi.n	801bc80 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801bbba:	42ba      	cmp	r2, r7
 801bbbc:	da60      	bge.n	801bc80 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801bbbe:	1cee      	adds	r6, r5, #3
 801bbc0:	4699      	mov	r9, r3
 801bbc2:	f1b9 0f00 	cmp.w	r9, #0
 801bbc6:	dd5f      	ble.n	801bc88 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801bbc8:	1422      	asrs	r2, r4, #16
 801bbca:	9902      	ldr	r1, [sp, #8]
 801bbcc:	1407      	asrs	r7, r0, #16
 801bbce:	fb01 2707 	mla	r7, r1, r7, r2
 801bbd2:	9903      	ldr	r1, [sp, #12]
 801bbd4:	087a      	lsrs	r2, r7, #1
 801bbd6:	5c8a      	ldrb	r2, [r1, r2]
 801bbd8:	07f9      	lsls	r1, r7, #31
 801bbda:	bf54      	ite	pl
 801bbdc:	f002 020f 	andpl.w	r2, r2, #15
 801bbe0:	1112      	asrmi	r2, r2, #4
 801bbe2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bbe6:	b2d2      	uxtb	r2, r2
 801bbe8:	2a00      	cmp	r2, #0
 801bbea:	d042      	beq.n	801bc72 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801bbec:	497b      	ldr	r1, [pc, #492]	; (801bddc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801bbee:	680f      	ldr	r7, [r1, #0]
 801bbf0:	9905      	ldr	r1, [sp, #20]
 801bbf2:	fa5f fb87 	uxtb.w	fp, r7
 801bbf6:	434a      	muls	r2, r1
 801bbf8:	f102 0801 	add.w	r8, r2, #1
 801bbfc:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801bc00:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801bc04:	1212      	asrs	r2, r2, #8
 801bc06:	fa1f fa82 	uxth.w	sl, r2
 801bc0a:	43d2      	mvns	r2, r2
 801bc0c:	fb1b fb0a 	smulbb	fp, fp, sl
 801bc10:	b2d2      	uxtb	r2, r2
 801bc12:	fb08 b802 	mla	r8, r8, r2, fp
 801bc16:	fa1f f888 	uxth.w	r8, r8
 801bc1a:	f108 0b01 	add.w	fp, r8, #1
 801bc1e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801bc22:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801bc26:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801bc2a:	fb1b fb0a 	smulbb	fp, fp, sl
 801bc2e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801bc32:	fb17 fa0a 	smulbb	sl, r7, sl
 801bc36:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801bc3a:	f806 8c03 	strb.w	r8, [r6, #-3]
 801bc3e:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801bc42:	fb07 aa02 	mla	sl, r7, r2, sl
 801bc46:	fb08 b802 	mla	r8, r8, r2, fp
 801bc4a:	fa1f fa8a 	uxth.w	sl, sl
 801bc4e:	fa1f f888 	uxth.w	r8, r8
 801bc52:	f10a 0701 	add.w	r7, sl, #1
 801bc56:	f108 0b01 	add.w	fp, r8, #1
 801bc5a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801bc5e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801bc62:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bc66:	ea4f 2828 	mov.w	r8, r8, asr #8
 801bc6a:	f806 ac01 	strb.w	sl, [r6, #-1]
 801bc6e:	f806 8c02 	strb.w	r8, [r6, #-2]
 801bc72:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bc74:	4474      	add	r4, lr
 801bc76:	3603      	adds	r6, #3
 801bc78:	f109 39ff 	add.w	r9, r9, #4294967295
 801bc7c:	4410      	add	r0, r2
 801bc7e:	e7a0      	b.n	801bbc2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801bc80:	2700      	movs	r7, #0
 801bc82:	1bda      	subs	r2, r3, r7
 801bc84:	2a00      	cmp	r2, #0
 801bc86:	dc3e      	bgt.n	801bd06 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801bc88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bc8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bc90:	441d      	add	r5, r3
 801bc92:	9b01      	ldr	r3, [sp, #4]
 801bc94:	2b00      	cmp	r3, #0
 801bc96:	f340 809e 	ble.w	801bdd6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801bc9a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bc9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bca0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bca4:	eeb0 6a62 	vmov.f32	s12, s5
 801bca8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bcac:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bcb0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bcb4:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801bcb8:	eeb0 6a43 	vmov.f32	s12, s6
 801bcbc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bcc0:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801bcc4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bcc8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bccc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bcd0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bcd4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bcd8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bcdc:	ee12 2a90 	vmov	r2, s5
 801bce0:	eef0 2a47 	vmov.f32	s5, s14
 801bce4:	fb92 fef3 	sdiv	lr, r2, r3
 801bce8:	ee13 2a10 	vmov	r2, s6
 801bcec:	eeb0 3a67 	vmov.f32	s6, s15
 801bcf0:	fb92 f3f3 	sdiv	r3, r2, r3
 801bcf4:	9314      	str	r3, [sp, #80]	; 0x50
 801bcf6:	9b01      	ldr	r3, [sp, #4]
 801bcf8:	9a04      	ldr	r2, [sp, #16]
 801bcfa:	3b01      	subs	r3, #1
 801bcfc:	9301      	str	r3, [sp, #4]
 801bcfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bd00:	bf08      	it	eq
 801bd02:	4613      	moveq	r3, r2
 801bd04:	e72b      	b.n	801bb5e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801bd06:	1426      	asrs	r6, r4, #16
 801bd08:	d460      	bmi.n	801bdcc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801bd0a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801bd0e:	42b2      	cmp	r2, r6
 801bd10:	dd5c      	ble.n	801bdcc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801bd12:	ea5f 4820 	movs.w	r8, r0, asr #16
 801bd16:	d459      	bmi.n	801bdcc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801bd18:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801bd1c:	4542      	cmp	r2, r8
 801bd1e:	dd55      	ble.n	801bdcc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801bd20:	9a02      	ldr	r2, [sp, #8]
 801bd22:	9903      	ldr	r1, [sp, #12]
 801bd24:	fb08 6602 	mla	r6, r8, r2, r6
 801bd28:	0872      	lsrs	r2, r6, #1
 801bd2a:	07f6      	lsls	r6, r6, #31
 801bd2c:	5c8a      	ldrb	r2, [r1, r2]
 801bd2e:	bf54      	ite	pl
 801bd30:	f002 020f 	andpl.w	r2, r2, #15
 801bd34:	1112      	asrmi	r2, r2, #4
 801bd36:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bd3a:	b2d2      	uxtb	r2, r2
 801bd3c:	2a00      	cmp	r2, #0
 801bd3e:	d045      	beq.n	801bdcc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801bd40:	4926      	ldr	r1, [pc, #152]	; (801bddc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801bd42:	f8d1 8000 	ldr.w	r8, [r1]
 801bd46:	9905      	ldr	r1, [sp, #20]
 801bd48:	fa5f fb88 	uxtb.w	fp, r8
 801bd4c:	434a      	muls	r2, r1
 801bd4e:	1c56      	adds	r6, r2, #1
 801bd50:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801bd54:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801bd58:	1212      	asrs	r2, r2, #8
 801bd5a:	f815 9006 	ldrb.w	r9, [r5, r6]
 801bd5e:	fa1f fa82 	uxth.w	sl, r2
 801bd62:	43d2      	mvns	r2, r2
 801bd64:	fb1b fb0a 	smulbb	fp, fp, sl
 801bd68:	b2d2      	uxtb	r2, r2
 801bd6a:	fb09 b902 	mla	r9, r9, r2, fp
 801bd6e:	fa1f f989 	uxth.w	r9, r9
 801bd72:	f109 0b01 	add.w	fp, r9, #1
 801bd76:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bd7a:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801bd7e:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801bd82:	fb1b fb0a 	smulbb	fp, fp, sl
 801bd86:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bd8a:	fb18 fa0a 	smulbb	sl, r8, sl
 801bd8e:	f805 9006 	strb.w	r9, [r5, r6]
 801bd92:	442e      	add	r6, r5
 801bd94:	f896 8002 	ldrb.w	r8, [r6, #2]
 801bd98:	f896 9001 	ldrb.w	r9, [r6, #1]
 801bd9c:	fb08 aa02 	mla	sl, r8, r2, sl
 801bda0:	fb09 b902 	mla	r9, r9, r2, fp
 801bda4:	fa1f fa8a 	uxth.w	sl, sl
 801bda8:	fa1f f989 	uxth.w	r9, r9
 801bdac:	f10a 0801 	add.w	r8, sl, #1
 801bdb0:	f109 0b01 	add.w	fp, r9, #1
 801bdb4:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801bdb8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bdbc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bdc0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bdc4:	f886 a002 	strb.w	sl, [r6, #2]
 801bdc8:	f886 9001 	strb.w	r9, [r6, #1]
 801bdcc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bdce:	4474      	add	r4, lr
 801bdd0:	3701      	adds	r7, #1
 801bdd2:	4410      	add	r0, r2
 801bdd4:	e755      	b.n	801bc82 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801bdd6:	b007      	add	sp, #28
 801bdd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bddc:	2400eae0 	.word	0x2400eae0

0801bde0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bde4:	b085      	sub	sp, #20
 801bde6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bdea:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801bdec:	9203      	str	r2, [sp, #12]
 801bdee:	6860      	ldr	r0, [r4, #4]
 801bdf0:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801bdf4:	9100      	str	r1, [sp, #0]
 801bdf6:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 801bdfa:	fb00 2606 	mla	r6, r0, r6, r2
 801bdfe:	6822      	ldr	r2, [r4, #0]
 801be00:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801be04:	4416      	add	r6, r2
 801be06:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801be0a:	3201      	adds	r2, #1
 801be0c:	f022 0201 	bic.w	r2, r2, #1
 801be10:	9201      	str	r2, [sp, #4]
 801be12:	f8dc 2000 	ldr.w	r2, [ip]
 801be16:	9202      	str	r2, [sp, #8]
 801be18:	9a00      	ldr	r2, [sp, #0]
 801be1a:	2a00      	cmp	r2, #0
 801be1c:	dc03      	bgt.n	801be26 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801be1e:	9a03      	ldr	r2, [sp, #12]
 801be20:	2a00      	cmp	r2, #0
 801be22:	f340 8140 	ble.w	801c0a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801be26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801be28:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801be2c:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801be30:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801be32:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801be36:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801be3a:	2b00      	cmp	r3, #0
 801be3c:	dd0e      	ble.n	801be5c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801be3e:	142a      	asrs	r2, r5, #16
 801be40:	d405      	bmi.n	801be4e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801be42:	4572      	cmp	r2, lr
 801be44:	da03      	bge.n	801be4e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801be46:	1422      	asrs	r2, r4, #16
 801be48:	d401      	bmi.n	801be4e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801be4a:	42ba      	cmp	r2, r7
 801be4c:	db07      	blt.n	801be5e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801be4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801be50:	3b01      	subs	r3, #1
 801be52:	3603      	adds	r6, #3
 801be54:	4415      	add	r5, r2
 801be56:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801be58:	4414      	add	r4, r2
 801be5a:	e7ee      	b.n	801be3a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801be5c:	d072      	beq.n	801bf44 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801be5e:	1e5a      	subs	r2, r3, #1
 801be60:	9811      	ldr	r0, [sp, #68]	; 0x44
 801be62:	fb00 5002 	mla	r0, r0, r2, r5
 801be66:	1400      	asrs	r0, r0, #16
 801be68:	d463      	bmi.n	801bf32 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801be6a:	4570      	cmp	r0, lr
 801be6c:	da61      	bge.n	801bf32 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801be6e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801be70:	fb00 4202 	mla	r2, r0, r2, r4
 801be74:	1412      	asrs	r2, r2, #16
 801be76:	d45c      	bmi.n	801bf32 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801be78:	42ba      	cmp	r2, r7
 801be7a:	da5a      	bge.n	801bf32 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801be7c:	1cf0      	adds	r0, r6, #3
 801be7e:	469a      	mov	sl, r3
 801be80:	f1ba 0f00 	cmp.w	sl, #0
 801be84:	dd59      	ble.n	801bf3a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801be86:	142a      	asrs	r2, r5, #16
 801be88:	9901      	ldr	r1, [sp, #4]
 801be8a:	1427      	asrs	r7, r4, #16
 801be8c:	fb01 2707 	mla	r7, r1, r7, r2
 801be90:	9902      	ldr	r1, [sp, #8]
 801be92:	087a      	lsrs	r2, r7, #1
 801be94:	5c8a      	ldrb	r2, [r1, r2]
 801be96:	07f9      	lsls	r1, r7, #31
 801be98:	bf54      	ite	pl
 801be9a:	f002 020f 	andpl.w	r2, r2, #15
 801be9e:	1112      	asrmi	r2, r2, #4
 801bea0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bea4:	b2d2      	uxtb	r2, r2
 801bea6:	2a00      	cmp	r2, #0
 801bea8:	d03b      	beq.n	801bf22 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801beaa:	4980      	ldr	r1, [pc, #512]	; (801c0ac <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801beac:	2aff      	cmp	r2, #255	; 0xff
 801beae:	680f      	ldr	r7, [r1, #0]
 801beb0:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801beb4:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801beb8:	b2ff      	uxtb	r7, r7
 801beba:	f000 80ed 	beq.w	801c098 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801bebe:	fa1f f882 	uxth.w	r8, r2
 801bec2:	43d2      	mvns	r2, r2
 801bec4:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801bec8:	fb17 f708 	smulbb	r7, r7, r8
 801becc:	b2d2      	uxtb	r2, r2
 801bece:	fb19 f908 	smulbb	r9, r9, r8
 801bed2:	fb0e 7702 	mla	r7, lr, r2, r7
 801bed6:	fb1b f808 	smulbb	r8, fp, r8
 801beda:	b2bf      	uxth	r7, r7
 801bedc:	f107 0e01 	add.w	lr, r7, #1
 801bee0:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801bee4:	123f      	asrs	r7, r7, #8
 801bee6:	f800 7c03 	strb.w	r7, [r0, #-3]
 801beea:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801beee:	fb07 9902 	mla	r9, r7, r2, r9
 801bef2:	fa1f f989 	uxth.w	r9, r9
 801bef6:	f109 0701 	add.w	r7, r9, #1
 801befa:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801befe:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801bf02:	fb07 8802 	mla	r8, r7, r2, r8
 801bf06:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bf0a:	fa1f f888 	uxth.w	r8, r8
 801bf0e:	f800 9c02 	strb.w	r9, [r0, #-2]
 801bf12:	f108 0201 	add.w	r2, r8, #1
 801bf16:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801bf1a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801bf1e:	f800 8c01 	strb.w	r8, [r0, #-1]
 801bf22:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bf24:	3003      	adds	r0, #3
 801bf26:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bf2a:	4415      	add	r5, r2
 801bf2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bf2e:	4414      	add	r4, r2
 801bf30:	e7a6      	b.n	801be80 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801bf32:	2700      	movs	r7, #0
 801bf34:	1bda      	subs	r2, r3, r7
 801bf36:	2a00      	cmp	r2, #0
 801bf38:	dc40      	bgt.n	801bfbc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801bf3a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bf3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bf42:	441e      	add	r6, r3
 801bf44:	9b00      	ldr	r3, [sp, #0]
 801bf46:	2b00      	cmp	r3, #0
 801bf48:	f340 80ad 	ble.w	801c0a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801bf4c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bf50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bf52:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bf56:	eeb0 6a62 	vmov.f32	s12, s5
 801bf5a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bf5e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bf62:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bf66:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801bf6a:	eeb0 6a43 	vmov.f32	s12, s6
 801bf6e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bf72:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801bf76:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bf7a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bf7e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bf82:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bf86:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bf8a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bf8e:	ee12 2a90 	vmov	r2, s5
 801bf92:	eef0 2a47 	vmov.f32	s5, s14
 801bf96:	fb92 f3f3 	sdiv	r3, r2, r3
 801bf9a:	ee13 2a10 	vmov	r2, s6
 801bf9e:	9311      	str	r3, [sp, #68]	; 0x44
 801bfa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bfa2:	eeb0 3a67 	vmov.f32	s6, s15
 801bfa6:	fb92 f3f3 	sdiv	r3, r2, r3
 801bfaa:	9312      	str	r3, [sp, #72]	; 0x48
 801bfac:	9b00      	ldr	r3, [sp, #0]
 801bfae:	9a03      	ldr	r2, [sp, #12]
 801bfb0:	3b01      	subs	r3, #1
 801bfb2:	9300      	str	r3, [sp, #0]
 801bfb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bfb6:	bf08      	it	eq
 801bfb8:	4613      	moveq	r3, r2
 801bfba:	e72d      	b.n	801be18 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801bfbc:	1428      	asrs	r0, r5, #16
 801bfbe:	d45c      	bmi.n	801c07a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801bfc0:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801bfc4:	4282      	cmp	r2, r0
 801bfc6:	dd58      	ble.n	801c07a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801bfc8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801bfcc:	d455      	bmi.n	801c07a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801bfce:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801bfd2:	4572      	cmp	r2, lr
 801bfd4:	dd51      	ble.n	801c07a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801bfd6:	9a01      	ldr	r2, [sp, #4]
 801bfd8:	9902      	ldr	r1, [sp, #8]
 801bfda:	fb0e 0002 	mla	r0, lr, r2, r0
 801bfde:	0842      	lsrs	r2, r0, #1
 801bfe0:	07c0      	lsls	r0, r0, #31
 801bfe2:	5c8a      	ldrb	r2, [r1, r2]
 801bfe4:	bf54      	ite	pl
 801bfe6:	f002 020f 	andpl.w	r2, r2, #15
 801bfea:	1112      	asrmi	r2, r2, #4
 801bfec:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bff0:	b2d2      	uxtb	r2, r2
 801bff2:	2a00      	cmp	r2, #0
 801bff4:	d041      	beq.n	801c07a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801bff6:	492d      	ldr	r1, [pc, #180]	; (801c0ac <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801bff8:	2aff      	cmp	r2, #255	; 0xff
 801bffa:	6808      	ldr	r0, [r1, #0]
 801bffc:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801c000:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801c004:	fa5f fe80 	uxtb.w	lr, r0
 801c008:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801c00c:	d03b      	beq.n	801c086 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801c00e:	fa1f f982 	uxth.w	r9, r2
 801c012:	4438      	add	r0, r7
 801c014:	43d2      	mvns	r2, r2
 801c016:	f816 8000 	ldrb.w	r8, [r6, r0]
 801c01a:	fb1e fe09 	smulbb	lr, lr, r9
 801c01e:	fb1a fa09 	smulbb	sl, sl, r9
 801c022:	b2d2      	uxtb	r2, r2
 801c024:	fb1b f909 	smulbb	r9, fp, r9
 801c028:	fb08 ee02 	mla	lr, r8, r2, lr
 801c02c:	fa1f fe8e 	uxth.w	lr, lr
 801c030:	f10e 0801 	add.w	r8, lr, #1
 801c034:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801c038:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c03c:	f806 e000 	strb.w	lr, [r6, r0]
 801c040:	4430      	add	r0, r6
 801c042:	f890 e001 	ldrb.w	lr, [r0, #1]
 801c046:	fb0e aa02 	mla	sl, lr, r2, sl
 801c04a:	fa1f fa8a 	uxth.w	sl, sl
 801c04e:	f10a 0e01 	add.w	lr, sl, #1
 801c052:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801c056:	f890 e002 	ldrb.w	lr, [r0, #2]
 801c05a:	fb0e 9902 	mla	r9, lr, r2, r9
 801c05e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c062:	fa1f f989 	uxth.w	r9, r9
 801c066:	f880 a001 	strb.w	sl, [r0, #1]
 801c06a:	f109 0201 	add.w	r2, r9, #1
 801c06e:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801c072:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c076:	f880 9002 	strb.w	r9, [r0, #2]
 801c07a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c07c:	3701      	adds	r7, #1
 801c07e:	4415      	add	r5, r2
 801c080:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c082:	4414      	add	r4, r2
 801c084:	e756      	b.n	801bf34 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c086:	4438      	add	r0, r7
 801c088:	f806 e000 	strb.w	lr, [r6, r0]
 801c08c:	4430      	add	r0, r6
 801c08e:	f880 a001 	strb.w	sl, [r0, #1]
 801c092:	f880 b002 	strb.w	fp, [r0, #2]
 801c096:	e7f0      	b.n	801c07a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801c098:	f800 7c03 	strb.w	r7, [r0, #-3]
 801c09c:	f800 9c02 	strb.w	r9, [r0, #-2]
 801c0a0:	f800 bc01 	strb.w	fp, [r0, #-1]
 801c0a4:	e73d      	b.n	801bf22 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801c0a6:	b005      	add	sp, #20
 801c0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0ac:	2400eae0 	.word	0x2400eae0

0801c0b0 <_ZN8touchgfx8LCD24bppD1Ev>:
 801c0b0:	4770      	bx	lr

0801c0b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801c0b2:	4770      	bx	lr

0801c0b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801c0b4:	4770      	bx	lr

0801c0b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801c0b6:	4770      	bx	lr

0801c0b8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801c0b8:	4770      	bx	lr

0801c0ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c0ba:	4770      	bx	lr

0801c0bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c0bc:	4770      	bx	lr

0801c0be <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c0be:	4770      	bx	lr

0801c0c0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c0c0:	4770      	bx	lr

0801c0c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c0c2:	4770      	bx	lr

0801c0c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801c0c4:	4770      	bx	lr

0801c0c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c0c6:	4770      	bx	lr

0801c0c8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801c0c8:	4770      	bx	lr

0801c0ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c0ca:	4770      	bx	lr

0801c0cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c0cc:	4770      	bx	lr

0801c0ce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c0ce:	4770      	bx	lr

0801c0d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c0d0:	4770      	bx	lr

0801c0d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c0d2:	4770      	bx	lr

0801c0d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801c0d4:	4770      	bx	lr

0801c0d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c0d6:	4770      	bx	lr

0801c0d8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801c0d8:	4770      	bx	lr
	...

0801c0dc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801c0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c0de:	4606      	mov	r6, r0
 801c0e0:	b087      	sub	sp, #28
 801c0e2:	4615      	mov	r5, r2
 801c0e4:	461f      	mov	r7, r3
 801c0e6:	b353      	cbz	r3, 801c13e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801c0e8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801c0ec:	2b00      	cmp	r3, #0
 801c0ee:	dd26      	ble.n	801c13e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801c0f0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801c0f4:	2b00      	cmp	r3, #0
 801c0f6:	dd22      	ble.n	801c13e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801c0f8:	6808      	ldr	r0, [r1, #0]
 801c0fa:	aa04      	add	r2, sp, #16
 801c0fc:	6849      	ldr	r1, [r1, #4]
 801c0fe:	4c1b      	ldr	r4, [pc, #108]	; (801c16c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801c100:	c203      	stmia	r2!, {r0, r1}
 801c102:	a804      	add	r0, sp, #16
 801c104:	f7fa fede 	bl	8016ec4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c108:	6820      	ldr	r0, [r4, #0]
 801c10a:	6803      	ldr	r3, [r0, #0]
 801c10c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c10e:	4798      	blx	r3
 801c110:	2fff      	cmp	r7, #255	; 0xff
 801c112:	d016      	beq.n	801c142 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801c114:	f010 0f08 	tst.w	r0, #8
 801c118:	6820      	ldr	r0, [r4, #0]
 801c11a:	d015      	beq.n	801c148 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801c11c:	2400      	movs	r4, #0
 801c11e:	6801      	ldr	r1, [r0, #0]
 801c120:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801c124:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c128:	e9cd 7402 	strd	r7, r4, [sp, #8]
 801c12c:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801c130:	9401      	str	r4, [sp, #4]
 801c132:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801c136:	9400      	str	r4, [sp, #0]
 801c138:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801c13a:	4629      	mov	r1, r5
 801c13c:	47a0      	blx	r4
 801c13e:	b007      	add	sp, #28
 801c140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c142:	f010 0f02 	tst.w	r0, #2
 801c146:	e7e7      	b.n	801c118 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801c148:	6803      	ldr	r3, [r0, #0]
 801c14a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c14c:	4798      	blx	r3
 801c14e:	4b08      	ldr	r3, [pc, #32]	; (801c170 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 801c150:	4601      	mov	r1, r0
 801c152:	4630      	mov	r0, r6
 801c154:	881a      	ldrh	r2, [r3, #0]
 801c156:	6833      	ldr	r3, [r6, #0]
 801c158:	e9cd 5700 	strd	r5, r7, [sp]
 801c15c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801c15e:	ab04      	add	r3, sp, #16
 801c160:	47a8      	blx	r5
 801c162:	6820      	ldr	r0, [r4, #0]
 801c164:	6803      	ldr	r3, [r0, #0]
 801c166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c168:	4798      	blx	r3
 801c16a:	e7e8      	b.n	801c13e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801c16c:	2400ead0 	.word	0x2400ead0
 801c170:	2400eaca 	.word	0x2400eaca

0801c174 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801c174:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c178:	b08b      	sub	sp, #44	; 0x2c
 801c17a:	460d      	mov	r5, r1
 801c17c:	4616      	mov	r6, r2
 801c17e:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 801c182:	f1b8 0f00 	cmp.w	r8, #0
 801c186:	d047      	beq.n	801c218 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801c188:	6810      	ldr	r0, [r2, #0]
 801c18a:	ac06      	add	r4, sp, #24
 801c18c:	6851      	ldr	r1, [r2, #4]
 801c18e:	4f51      	ldr	r7, [pc, #324]	; (801c2d4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801c190:	c403      	stmia	r4!, {r0, r1}
 801c192:	6818      	ldr	r0, [r3, #0]
 801c194:	ac08      	add	r4, sp, #32
 801c196:	6859      	ldr	r1, [r3, #4]
 801c198:	c403      	stmia	r4!, {r0, r1}
 801c19a:	a806      	add	r0, sp, #24
 801c19c:	f7fa fe92 	bl	8016ec4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c1a0:	4631      	mov	r1, r6
 801c1a2:	a808      	add	r0, sp, #32
 801c1a4:	f7fa feb6 	bl	8016f14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c1a8:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801c1ac:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801c1b0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801c1b4:	6838      	ldr	r0, [r7, #0]
 801c1b6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c1ba:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801c1be:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 801c1c2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c1c6:	440d      	add	r5, r1
 801c1c8:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801c1cc:	440a      	add	r2, r1
 801c1ce:	f8ad 2020 	strh.w	r2, [sp, #32]
 801c1d2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c1d6:	4413      	add	r3, r2
 801c1d8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801c1dc:	6803      	ldr	r3, [r0, #0]
 801c1de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c1e0:	4798      	blx	r3
 801c1e2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801c1e6:	d01a      	beq.n	801c21e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 801c1e8:	f010 0f04 	tst.w	r0, #4
 801c1ec:	6838      	ldr	r0, [r7, #0]
 801c1ee:	d019      	beq.n	801c224 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 801c1f0:	2100      	movs	r1, #0
 801c1f2:	6807      	ldr	r7, [r0, #0]
 801c1f4:	b2a4      	uxth	r4, r4
 801c1f6:	f8cd 800c 	str.w	r8, [sp, #12]
 801c1fa:	b2b6      	uxth	r6, r6
 801c1fc:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801c200:	9401      	str	r4, [sp, #4]
 801c202:	9600      	str	r6, [sp, #0]
 801c204:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801c208:	e9cd 1104 	strd	r1, r1, [sp, #16]
 801c20c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801c210:	9102      	str	r1, [sp, #8]
 801c212:	4629      	mov	r1, r5
 801c214:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 801c216:	47a0      	blx	r4
 801c218:	b00b      	add	sp, #44	; 0x2c
 801c21a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c21e:	f010 0f01 	tst.w	r0, #1
 801c222:	e7e3      	b.n	801c1ec <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801c224:	6803      	ldr	r3, [r0, #0]
 801c226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c228:	4798      	blx	r3
 801c22a:	4a2b      	ldr	r2, [pc, #172]	; (801c2d8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 801c22c:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801c230:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801c234:	8813      	ldrh	r3, [r2, #0]
 801c236:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801c23a:	fb03 f404 	mul.w	r4, r3, r4
 801c23e:	fb03 c101 	mla	r1, r3, r1, ip
 801c242:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c246:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c24a:	4408      	add	r0, r1
 801c24c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801c250:	4404      	add	r4, r0
 801c252:	d02e      	beq.n	801c2b2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801c254:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801c258:	1b9b      	subs	r3, r3, r6
 801c25a:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 801c25e:	1b96      	subs	r6, r2, r6
 801c260:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c264:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c268:	42a0      	cmp	r0, r4
 801c26a:	d22d      	bcs.n	801c2c8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801c26c:	eb00 0e01 	add.w	lr, r0, r1
 801c270:	4570      	cmp	r0, lr
 801c272:	d210      	bcs.n	801c296 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 801c274:	f890 9000 	ldrb.w	r9, [r0]
 801c278:	f815 2b01 	ldrb.w	r2, [r5], #1
 801c27c:	fb19 f90c 	smulbb	r9, r9, ip
 801c280:	fb02 9208 	mla	r2, r2, r8, r9
 801c284:	b292      	uxth	r2, r2
 801c286:	f102 0901 	add.w	r9, r2, #1
 801c28a:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801c28e:	1212      	asrs	r2, r2, #8
 801c290:	f800 2b01 	strb.w	r2, [r0], #1
 801c294:	e7ec      	b.n	801c270 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801c296:	4418      	add	r0, r3
 801c298:	4435      	add	r5, r6
 801c29a:	e7e5      	b.n	801c268 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801c29c:	8813      	ldrh	r3, [r2, #0]
 801c29e:	1b9b      	subs	r3, r3, r6
 801c2a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c2a4:	4418      	add	r0, r3
 801c2a6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801c2aa:	1b9b      	subs	r3, r3, r6
 801c2ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c2b0:	441d      	add	r5, r3
 801c2b2:	42a0      	cmp	r0, r4
 801c2b4:	d208      	bcs.n	801c2c8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801c2b6:	eb00 0c01 	add.w	ip, r0, r1
 801c2ba:	4560      	cmp	r0, ip
 801c2bc:	d2ee      	bcs.n	801c29c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801c2be:	f815 3b01 	ldrb.w	r3, [r5], #1
 801c2c2:	f800 3b01 	strb.w	r3, [r0], #1
 801c2c6:	e7f8      	b.n	801c2ba <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 801c2c8:	6838      	ldr	r0, [r7, #0]
 801c2ca:	6803      	ldr	r3, [r0, #0]
 801c2cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c2ce:	4798      	blx	r3
 801c2d0:	e7a2      	b.n	801c218 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801c2d2:	bf00      	nop
 801c2d4:	2400ead0 	.word	0x2400ead0
 801c2d8:	2400eaca 	.word	0x2400eaca

0801c2dc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801c2dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c2de:	2300      	movs	r3, #0
 801c2e0:	b085      	sub	sp, #20
 801c2e2:	9300      	str	r3, [sp, #0]
 801c2e4:	4b41      	ldr	r3, [pc, #260]	; (801c3ec <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801c2e6:	781b      	ldrb	r3, [r3, #0]
 801c2e8:	2b00      	cmp	r3, #0
 801c2ea:	d136      	bne.n	801c35a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 801c2ec:	4a40      	ldr	r2, [pc, #256]	; (801c3f0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801c2ee:	f9b2 2000 	ldrsh.w	r2, [r2]
 801c2f2:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c2f6:	2b00      	cmp	r3, #0
 801c2f8:	d131      	bne.n	801c35e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 801c2fa:	4b3e      	ldr	r3, [pc, #248]	; (801c3f4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801c2fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c300:	ac02      	add	r4, sp, #8
 801c302:	6808      	ldr	r0, [r1, #0]
 801c304:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c308:	ab02      	add	r3, sp, #8
 801c30a:	6849      	ldr	r1, [r1, #4]
 801c30c:	4d3a      	ldr	r5, [pc, #232]	; (801c3f8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 801c30e:	c303      	stmia	r3!, {r0, r1}
 801c310:	4669      	mov	r1, sp
 801c312:	4620      	mov	r0, r4
 801c314:	f7fa fdfe 	bl	8016f14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c318:	4668      	mov	r0, sp
 801c31a:	f7fa fdd3 	bl	8016ec4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c31e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c322:	f8bd 2000 	ldrh.w	r2, [sp]
 801c326:	462e      	mov	r6, r5
 801c328:	6828      	ldr	r0, [r5, #0]
 801c32a:	4413      	add	r3, r2
 801c32c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801c330:	f8ad 3008 	strh.w	r3, [sp, #8]
 801c334:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c338:	4413      	add	r3, r2
 801c33a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801c33e:	6803      	ldr	r3, [r0, #0]
 801c340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c342:	4798      	blx	r3
 801c344:	f010 0f01 	tst.w	r0, #1
 801c348:	d00b      	beq.n	801c362 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 801c34a:	6828      	ldr	r0, [r5, #0]
 801c34c:	6803      	ldr	r3, [r0, #0]
 801c34e:	e894 0006 	ldmia.w	r4, {r1, r2}
 801c352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c354:	4798      	blx	r3
 801c356:	b005      	add	sp, #20
 801c358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c35a:	4a26      	ldr	r2, [pc, #152]	; (801c3f4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801c35c:	e7c7      	b.n	801c2ee <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801c35e:	4b24      	ldr	r3, [pc, #144]	; (801c3f0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801c360:	e7cc      	b.n	801c2fc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801c362:	6830      	ldr	r0, [r6, #0]
 801c364:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801c368:	6803      	ldr	r3, [r0, #0]
 801c36a:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 801c36e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c370:	4798      	blx	r3
 801c372:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801c376:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801c37a:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 801c37e:	fb14 3402 	smlabb	r4, r4, r2, r3
 801c382:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c386:	4404      	add	r4, r0
 801c388:	6830      	ldr	r0, [r6, #0]
 801c38a:	6803      	ldr	r3, [r0, #0]
 801c38c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c38e:	4798      	blx	r3
 801c390:	4917      	ldr	r1, [pc, #92]	; (801c3f0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801c392:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801c396:	880b      	ldrh	r3, [r1, #0]
 801c398:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 801c39c:	fb03 c202 	mla	r2, r3, r2, ip
 801c3a0:	437b      	muls	r3, r7
 801c3a2:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 801c3a6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c3aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c3ae:	4410      	add	r0, r2
 801c3b0:	18c2      	adds	r2, r0, r3
 801c3b2:	4290      	cmp	r0, r2
 801c3b4:	d214      	bcs.n	801c3e0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801c3b6:	eb00 0c07 	add.w	ip, r0, r7
 801c3ba:	4560      	cmp	r0, ip
 801c3bc:	d204      	bcs.n	801c3c8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 801c3be:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c3c2:	f800 3b01 	strb.w	r3, [r0], #1
 801c3c6:	e7f8      	b.n	801c3ba <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 801c3c8:	880b      	ldrh	r3, [r1, #0]
 801c3ca:	1b5b      	subs	r3, r3, r5
 801c3cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c3d0:	4418      	add	r0, r3
 801c3d2:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801c3d6:	1b5b      	subs	r3, r3, r5
 801c3d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c3dc:	441c      	add	r4, r3
 801c3de:	e7e8      	b.n	801c3b2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 801c3e0:	6830      	ldr	r0, [r6, #0]
 801c3e2:	6803      	ldr	r3, [r0, #0]
 801c3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c3e6:	4798      	blx	r3
 801c3e8:	e7b5      	b.n	801c356 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801c3ea:	bf00      	nop
 801c3ec:	2400eac8 	.word	0x2400eac8
 801c3f0:	2400eaca 	.word	0x2400eaca
 801c3f4:	2400eacc 	.word	0x2400eacc
 801c3f8:	2400ead0 	.word	0x2400ead0

0801c3fc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801c3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c400:	b089      	sub	sp, #36	; 0x24
 801c402:	4607      	mov	r7, r0
 801c404:	4689      	mov	r9, r1
 801c406:	4692      	mov	sl, r2
 801c408:	ac08      	add	r4, sp, #32
 801c40a:	461e      	mov	r6, r3
 801c40c:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801c410:	4620      	mov	r0, r4
 801c412:	f7fe f8ef 	bl	801a5f4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c416:	683b      	ldr	r3, [r7, #0]
 801c418:	4605      	mov	r5, r0
 801c41a:	4620      	mov	r0, r4
 801c41c:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801c420:	f7fe f834 	bl	801a48c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c424:	4683      	mov	fp, r0
 801c426:	4620      	mov	r0, r4
 801c428:	f7fe f864 	bl	801a4f4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c42c:	4653      	mov	r3, sl
 801c42e:	464a      	mov	r2, r9
 801c430:	4639      	mov	r1, r7
 801c432:	9500      	str	r5, [sp, #0]
 801c434:	e9cd b001 	strd	fp, r0, [sp, #4]
 801c438:	a806      	add	r0, sp, #24
 801c43a:	47c0      	blx	r8
 801c43c:	a906      	add	r1, sp, #24
 801c43e:	4630      	mov	r0, r6
 801c440:	f7fd ff08 	bl	801a254 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 801c444:	4628      	mov	r0, r5
 801c446:	b009      	add	sp, #36	; 0x24
 801c448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c44c <_ZN8touchgfx8LCD24bppD0Ev>:
 801c44c:	b510      	push	{r4, lr}
 801c44e:	4604      	mov	r4, r0
 801c450:	2158      	movs	r1, #88	; 0x58
 801c452:	f006 fc18 	bl	8022c86 <_ZdlPvj>
 801c456:	4620      	mov	r0, r4
 801c458:	bd10      	pop	{r4, pc}

0801c45a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c45a:	b510      	push	{r4, lr}
 801c45c:	4604      	mov	r4, r0
 801c45e:	2104      	movs	r1, #4
 801c460:	f006 fc11 	bl	8022c86 <_ZdlPvj>
 801c464:	4620      	mov	r0, r4
 801c466:	bd10      	pop	{r4, pc}

0801c468 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801c468:	b510      	push	{r4, lr}
 801c46a:	4604      	mov	r4, r0
 801c46c:	2104      	movs	r1, #4
 801c46e:	f006 fc0a 	bl	8022c86 <_ZdlPvj>
 801c472:	4620      	mov	r0, r4
 801c474:	bd10      	pop	{r4, pc}

0801c476 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c476:	b510      	push	{r4, lr}
 801c478:	4604      	mov	r4, r0
 801c47a:	2104      	movs	r1, #4
 801c47c:	f006 fc03 	bl	8022c86 <_ZdlPvj>
 801c480:	4620      	mov	r0, r4
 801c482:	bd10      	pop	{r4, pc}

0801c484 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801c484:	b510      	push	{r4, lr}
 801c486:	4604      	mov	r4, r0
 801c488:	2104      	movs	r1, #4
 801c48a:	f006 fbfc 	bl	8022c86 <_ZdlPvj>
 801c48e:	4620      	mov	r0, r4
 801c490:	bd10      	pop	{r4, pc}

0801c492 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c492:	b510      	push	{r4, lr}
 801c494:	4604      	mov	r4, r0
 801c496:	2104      	movs	r1, #4
 801c498:	f006 fbf5 	bl	8022c86 <_ZdlPvj>
 801c49c:	4620      	mov	r0, r4
 801c49e:	bd10      	pop	{r4, pc}

0801c4a0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c4a0:	b510      	push	{r4, lr}
 801c4a2:	4604      	mov	r4, r0
 801c4a4:	2104      	movs	r1, #4
 801c4a6:	f006 fbee 	bl	8022c86 <_ZdlPvj>
 801c4aa:	4620      	mov	r0, r4
 801c4ac:	bd10      	pop	{r4, pc}

0801c4ae <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c4ae:	b510      	push	{r4, lr}
 801c4b0:	4604      	mov	r4, r0
 801c4b2:	2104      	movs	r1, #4
 801c4b4:	f006 fbe7 	bl	8022c86 <_ZdlPvj>
 801c4b8:	4620      	mov	r0, r4
 801c4ba:	bd10      	pop	{r4, pc}

0801c4bc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c4bc:	b510      	push	{r4, lr}
 801c4be:	4604      	mov	r4, r0
 801c4c0:	2104      	movs	r1, #4
 801c4c2:	f006 fbe0 	bl	8022c86 <_ZdlPvj>
 801c4c6:	4620      	mov	r0, r4
 801c4c8:	bd10      	pop	{r4, pc}

0801c4ca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c4ca:	b510      	push	{r4, lr}
 801c4cc:	4604      	mov	r4, r0
 801c4ce:	2104      	movs	r1, #4
 801c4d0:	f006 fbd9 	bl	8022c86 <_ZdlPvj>
 801c4d4:	4620      	mov	r0, r4
 801c4d6:	bd10      	pop	{r4, pc}

0801c4d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801c4d8:	b510      	push	{r4, lr}
 801c4da:	4604      	mov	r4, r0
 801c4dc:	2104      	movs	r1, #4
 801c4de:	f006 fbd2 	bl	8022c86 <_ZdlPvj>
 801c4e2:	4620      	mov	r0, r4
 801c4e4:	bd10      	pop	{r4, pc}

0801c4e6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c4e6:	b510      	push	{r4, lr}
 801c4e8:	4604      	mov	r4, r0
 801c4ea:	2104      	movs	r1, #4
 801c4ec:	f006 fbcb 	bl	8022c86 <_ZdlPvj>
 801c4f0:	4620      	mov	r0, r4
 801c4f2:	bd10      	pop	{r4, pc}

0801c4f4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801c4f4:	b510      	push	{r4, lr}
 801c4f6:	4604      	mov	r4, r0
 801c4f8:	2104      	movs	r1, #4
 801c4fa:	f006 fbc4 	bl	8022c86 <_ZdlPvj>
 801c4fe:	4620      	mov	r0, r4
 801c500:	bd10      	pop	{r4, pc}

0801c502 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c502:	b510      	push	{r4, lr}
 801c504:	4604      	mov	r4, r0
 801c506:	2104      	movs	r1, #4
 801c508:	f006 fbbd 	bl	8022c86 <_ZdlPvj>
 801c50c:	4620      	mov	r0, r4
 801c50e:	bd10      	pop	{r4, pc}

0801c510 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c510:	b510      	push	{r4, lr}
 801c512:	4604      	mov	r4, r0
 801c514:	2104      	movs	r1, #4
 801c516:	f006 fbb6 	bl	8022c86 <_ZdlPvj>
 801c51a:	4620      	mov	r0, r4
 801c51c:	bd10      	pop	{r4, pc}

0801c51e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c51e:	b510      	push	{r4, lr}
 801c520:	4604      	mov	r4, r0
 801c522:	2104      	movs	r1, #4
 801c524:	f006 fbaf 	bl	8022c86 <_ZdlPvj>
 801c528:	4620      	mov	r0, r4
 801c52a:	bd10      	pop	{r4, pc}

0801c52c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c52c:	b510      	push	{r4, lr}
 801c52e:	4604      	mov	r4, r0
 801c530:	2104      	movs	r1, #4
 801c532:	f006 fba8 	bl	8022c86 <_ZdlPvj>
 801c536:	4620      	mov	r0, r4
 801c538:	bd10      	pop	{r4, pc}

0801c53a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801c53a:	b510      	push	{r4, lr}
 801c53c:	4604      	mov	r4, r0
 801c53e:	2104      	movs	r1, #4
 801c540:	f006 fba1 	bl	8022c86 <_ZdlPvj>
 801c544:	4620      	mov	r0, r4
 801c546:	bd10      	pop	{r4, pc}

0801c548 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801c548:	b510      	push	{r4, lr}
 801c54a:	4604      	mov	r4, r0
 801c54c:	2104      	movs	r1, #4
 801c54e:	f006 fb9a 	bl	8022c86 <_ZdlPvj>
 801c552:	4620      	mov	r0, r4
 801c554:	bd10      	pop	{r4, pc}

0801c556 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801c556:	b510      	push	{r4, lr}
 801c558:	4604      	mov	r4, r0
 801c55a:	2104      	movs	r1, #4
 801c55c:	f006 fb93 	bl	8022c86 <_ZdlPvj>
 801c560:	4620      	mov	r0, r4
 801c562:	bd10      	pop	{r4, pc}

0801c564 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801c564:	b510      	push	{r4, lr}
 801c566:	4604      	mov	r4, r0
 801c568:	2104      	movs	r1, #4
 801c56a:	f006 fb8c 	bl	8022c86 <_ZdlPvj>
 801c56e:	4620      	mov	r0, r4
 801c570:	bd10      	pop	{r4, pc}

0801c572 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801c572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c576:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801c57a:	9c06      	ldr	r4, [sp, #24]
 801c57c:	2800      	cmp	r0, #0
 801c57e:	d06e      	beq.n	801c65e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801c580:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801c584:	2d00      	cmp	r5, #0
 801c586:	dd6a      	ble.n	801c65e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801c588:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801c58c:	f1bc 0f00 	cmp.w	ip, #0
 801c590:	dd65      	ble.n	801c65e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801c592:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801c596:	28ff      	cmp	r0, #255	; 0xff
 801c598:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c59c:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801c5a0:	fb02 3306 	mla	r3, r2, r6, r3
 801c5a4:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801c5a8:	b2e4      	uxtb	r4, r4
 801c5aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c5ae:	4419      	add	r1, r3
 801c5b0:	fb02 f30c 	mul.w	r3, r2, ip
 801c5b4:	eba2 0205 	sub.w	r2, r2, r5
 801c5b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c5bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c5c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c5c4:	440b      	add	r3, r1
 801c5c6:	d03e      	beq.n	801c646 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 801c5c8:	fa1f fc80 	uxth.w	ip, r0
 801c5cc:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801c5d0:	fb06 f60c 	mul.w	r6, r6, ip
 801c5d4:	b280      	uxth	r0, r0
 801c5d6:	fb07 f70c 	mul.w	r7, r7, ip
 801c5da:	fb04 f40c 	mul.w	r4, r4, ip
 801c5de:	4299      	cmp	r1, r3
 801c5e0:	d23d      	bcs.n	801c65e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801c5e2:	eb01 0c05 	add.w	ip, r1, r5
 801c5e6:	458c      	cmp	ip, r1
 801c5e8:	f101 0e03 	add.w	lr, r1, #3
 801c5ec:	d928      	bls.n	801c640 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 801c5ee:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801c5f2:	fb11 f100 	smulbb	r1, r1, r0
 801c5f6:	4421      	add	r1, r4
 801c5f8:	b289      	uxth	r1, r1
 801c5fa:	f101 0801 	add.w	r8, r1, #1
 801c5fe:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801c602:	1209      	asrs	r1, r1, #8
 801c604:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801c608:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801c60c:	fb11 f100 	smulbb	r1, r1, r0
 801c610:	4439      	add	r1, r7
 801c612:	b289      	uxth	r1, r1
 801c614:	f101 0801 	add.w	r8, r1, #1
 801c618:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801c61c:	1209      	asrs	r1, r1, #8
 801c61e:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801c622:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801c626:	fb11 f100 	smulbb	r1, r1, r0
 801c62a:	4431      	add	r1, r6
 801c62c:	b289      	uxth	r1, r1
 801c62e:	f101 0801 	add.w	r8, r1, #1
 801c632:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801c636:	1209      	asrs	r1, r1, #8
 801c638:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801c63c:	4671      	mov	r1, lr
 801c63e:	e7d2      	b.n	801c5e6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 801c640:	4411      	add	r1, r2
 801c642:	e7cc      	b.n	801c5de <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 801c644:	4411      	add	r1, r2
 801c646:	4299      	cmp	r1, r3
 801c648:	d209      	bcs.n	801c65e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801c64a:	1948      	adds	r0, r1, r5
 801c64c:	4281      	cmp	r1, r0
 801c64e:	d2f9      	bcs.n	801c644 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 801c650:	700c      	strb	r4, [r1, #0]
 801c652:	3103      	adds	r1, #3
 801c654:	f801 7c02 	strb.w	r7, [r1, #-2]
 801c658:	f801 6c01 	strb.w	r6, [r1, #-1]
 801c65c:	e7f6      	b.n	801c64c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 801c65e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801c664 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801c664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c668:	b093      	sub	sp, #76	; 0x4c
 801c66a:	4699      	mov	r9, r3
 801c66c:	4617      	mov	r7, r2
 801c66e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c672:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	; 0x74
 801c676:	4604      	mov	r4, r0
 801c678:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801c67c:	a80c      	add	r0, sp, #48	; 0x30
 801c67e:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 801c682:	460d      	mov	r5, r1
 801c684:	4649      	mov	r1, r9
 801c686:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801c68a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801c68e:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 801c692:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
 801c696:	f7f4 fe5d 	bl	8011354 <_ZN8touchgfx4RectaNERKS0_>
 801c69a:	4639      	mov	r1, r7
 801c69c:	a80c      	add	r0, sp, #48	; 0x30
 801c69e:	f7f4 fe59 	bl	8011354 <_ZN8touchgfx4RectaNERKS0_>
 801c6a2:	4b78      	ldr	r3, [pc, #480]	; (801c884 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801c6a4:	8818      	ldrh	r0, [r3, #0]
 801c6a6:	4b78      	ldr	r3, [pc, #480]	; (801c888 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 801c6a8:	b202      	sxth	r2, r0
 801c6aa:	8819      	ldrh	r1, [r3, #0]
 801c6ac:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801c6b0:	b20f      	sxth	r7, r1
 801c6b2:	2b00      	cmp	r3, #0
 801c6b4:	da07      	bge.n	801c6c6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 801c6b6:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 801c6ba:	4463      	add	r3, ip
 801c6bc:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801c6c0:	2300      	movs	r3, #0
 801c6c2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801c6c6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801c6ca:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 801c6ce:	1ad2      	subs	r2, r2, r3
 801c6d0:	4594      	cmp	ip, r2
 801c6d2:	bfc4      	itt	gt
 801c6d4:	1ac2      	subgt	r2, r0, r3
 801c6d6:	f8ad 2034 	strhgt.w	r2, [sp, #52]	; 0x34
 801c6da:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801c6de:	2a00      	cmp	r2, #0
 801c6e0:	da07      	bge.n	801c6f2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 801c6e2:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 801c6e6:	4462      	add	r2, ip
 801c6e8:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 801c6ec:	2200      	movs	r2, #0
 801c6ee:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801c6f2:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801c6f6:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 801c6fa:	1abf      	subs	r7, r7, r2
 801c6fc:	45bc      	cmp	ip, r7
 801c6fe:	f8df c190 	ldr.w	ip, [pc, #400]	; 801c890 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 801c702:	bfc8      	it	gt
 801c704:	1a8f      	subgt	r7, r1, r2
 801c706:	f89c c000 	ldrb.w	ip, [ip]
 801c70a:	bfc8      	it	gt
 801c70c:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 801c710:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801c714:	f1bc 0f00 	cmp.w	ip, #0
 801c718:	d176      	bne.n	801c808 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 801c71a:	4287      	cmp	r7, r0
 801c71c:	bf14      	ite	ne
 801c71e:	2100      	movne	r1, #0
 801c720:	2101      	moveq	r1, #1
 801c722:	2f00      	cmp	r7, #0
 801c724:	9107      	str	r1, [sp, #28]
 801c726:	dd73      	ble.n	801c810 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801c728:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 801c72c:	2900      	cmp	r1, #0
 801c72e:	9104      	str	r1, [sp, #16]
 801c730:	dd6e      	ble.n	801c810 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801c732:	f8b9 1000 	ldrh.w	r1, [r9]
 801c736:	a80e      	add	r0, sp, #56	; 0x38
 801c738:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 801c73c:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801c740:	1a5b      	subs	r3, r3, r1
 801c742:	a910      	add	r1, sp, #64	; 0x40
 801c744:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801c748:	b21b      	sxth	r3, r3
 801c74a:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 801c74e:	f8df a144 	ldr.w	sl, [pc, #324]	; 801c894 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801c752:	9305      	str	r3, [sp, #20]
 801c754:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 801c758:	1ad2      	subs	r2, r2, r3
 801c75a:	b213      	sxth	r3, r2
 801c75c:	9306      	str	r3, [sp, #24]
 801c75e:	9b05      	ldr	r3, [sp, #20]
 801c760:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801c764:	9b06      	ldr	r3, [sp, #24]
 801c766:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801c76a:	9b04      	ldr	r3, [sp, #16]
 801c76c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801c770:	2300      	movs	r3, #0
 801c772:	9310      	str	r3, [sp, #64]	; 0x40
 801c774:	f7fa fbce 	bl	8016f14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c778:	4640      	mov	r0, r8
 801c77a:	f7fa fba3 	bl	8016ec4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c77e:	a810      	add	r0, sp, #64	; 0x40
 801c780:	f7fa fba0 	bl	8016ec4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c784:	4b41      	ldr	r3, [pc, #260]	; (801c88c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 801c786:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801c78a:	4628      	mov	r0, r5
 801c78c:	881b      	ldrh	r3, [r3, #0]
 801c78e:	9308      	str	r3, [sp, #32]
 801c790:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801c794:	b21b      	sxth	r3, r3
 801c796:	9303      	str	r3, [sp, #12]
 801c798:	682b      	ldr	r3, [r5, #0]
 801c79a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c79c:	4798      	blx	r3
 801c79e:	9a03      	ldr	r2, [sp, #12]
 801c7a0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801c7a4:	4681      	mov	r9, r0
 801c7a6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801c7aa:	fb13 f302 	smulbb	r3, r3, r2
 801c7ae:	2203      	movs	r2, #3
 801c7b0:	f8da 0000 	ldr.w	r0, [sl]
 801c7b4:	fb15 3302 	smlabb	r3, r5, r2, r3
 801c7b8:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801c7ba:	920b      	str	r2, [sp, #44]	; 0x2c
 801c7bc:	441d      	add	r5, r3
 801c7be:	6803      	ldr	r3, [r0, #0]
 801c7c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c7c2:	4798      	blx	r3
 801c7c4:	9009      	str	r0, [sp, #36]	; 0x24
 801c7c6:	f8da 0000 	ldr.w	r0, [sl]
 801c7ca:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801c7ce:	6803      	ldr	r3, [r0, #0]
 801c7d0:	910a      	str	r1, [sp, #40]	; 0x28
 801c7d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c7d4:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 801c7d8:	4798      	blx	r3
 801c7da:	f010 0f01 	tst.w	r0, #1
 801c7de:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801c7e2:	d01e      	beq.n	801c822 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 801c7e4:	f8da 0000 	ldr.w	r0, [sl]
 801c7e8:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801c7ec:	6803      	ldr	r3, [r0, #0]
 801c7ee:	9200      	str	r2, [sp, #0]
 801c7f0:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801c7f2:	462b      	mov	r3, r5
 801c7f4:	e898 0006 	ldmia.w	r8, {r1, r2}
 801c7f8:	47b0      	blx	r6
 801c7fa:	9b05      	ldr	r3, [sp, #20]
 801c7fc:	80a7      	strh	r7, [r4, #4]
 801c7fe:	8023      	strh	r3, [r4, #0]
 801c800:	9b06      	ldr	r3, [sp, #24]
 801c802:	8063      	strh	r3, [r4, #2]
 801c804:	9b04      	ldr	r3, [sp, #16]
 801c806:	e007      	b.n	801c818 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 801c808:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 801c80c:	4288      	cmp	r0, r1
 801c80e:	e785      	b.n	801c71c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 801c810:	2300      	movs	r3, #0
 801c812:	8023      	strh	r3, [r4, #0]
 801c814:	8063      	strh	r3, [r4, #2]
 801c816:	80a3      	strh	r3, [r4, #4]
 801c818:	4620      	mov	r0, r4
 801c81a:	80e3      	strh	r3, [r4, #6]
 801c81c:	b013      	add	sp, #76	; 0x4c
 801c81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c822:	fb09 f606 	mul.w	r6, r9, r6
 801c826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c828:	fb11 6602 	smlabb	r6, r1, r2, r6
 801c82c:	9a07      	ldr	r2, [sp, #28]
 801c82e:	4433      	add	r3, r6
 801c830:	461e      	mov	r6, r3
 801c832:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801c836:	b16a      	cbz	r2, 801c854 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801c838:	9a08      	ldr	r2, [sp, #32]
 801c83a:	4593      	cmp	fp, r2
 801c83c:	d10a      	bne.n	801c854 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801c83e:	f8da 0000 	ldr.w	r0, [sl]
 801c842:	fb09 f303 	mul.w	r3, r9, r3
 801c846:	4629      	mov	r1, r5
 801c848:	6802      	ldr	r2, [r0, #0]
 801c84a:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801c84e:	4632      	mov	r2, r6
 801c850:	47d0      	blx	sl
 801c852:	e7d2      	b.n	801c7fa <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801c854:	9a03      	ldr	r2, [sp, #12]
 801c856:	f8df b03c 	ldr.w	fp, [pc, #60]	; 801c894 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801c85a:	fb02 5803 	mla	r8, r2, r3, r5
 801c85e:	4545      	cmp	r5, r8
 801c860:	d2cb      	bcs.n	801c7fa <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801c862:	f8db 0000 	ldr.w	r0, [fp]
 801c866:	4629      	mov	r1, r5
 801c868:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801c86c:	6802      	ldr	r2, [r0, #0]
 801c86e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c872:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801c876:	4632      	mov	r2, r6
 801c878:	47d0      	blx	sl
 801c87a:	9b03      	ldr	r3, [sp, #12]
 801c87c:	444e      	add	r6, r9
 801c87e:	441d      	add	r5, r3
 801c880:	e7ed      	b.n	801c85e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801c882:	bf00      	nop
 801c884:	2400eac4 	.word	0x2400eac4
 801c888:	2400eac6 	.word	0x2400eac6
 801c88c:	2400eaca 	.word	0x2400eaca
 801c890:	2400eac8 	.word	0x2400eac8
 801c894:	2400ead0 	.word	0x2400ead0

0801c898 <_ZN8touchgfx8LCD24bppC1Ev>:
 801c898:	2200      	movs	r2, #0
 801c89a:	490c      	ldr	r1, [pc, #48]	; (801c8cc <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 801c89c:	6042      	str	r2, [r0, #4]
 801c89e:	6001      	str	r1, [r0, #0]
 801c8a0:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801c8a4:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801c8a8:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801c8ac:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801c8b0:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801c8b4:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801c8b8:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801c8bc:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801c8c0:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801c8c4:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801c8c8:	4770      	bx	lr
 801c8ca:	bf00      	nop
 801c8cc:	08026268 	.word	0x08026268

0801c8d0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801c8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8d4:	b091      	sub	sp, #68	; 0x44
 801c8d6:	4607      	mov	r7, r0
 801c8d8:	4688      	mov	r8, r1
 801c8da:	6810      	ldr	r0, [r2, #0]
 801c8dc:	6851      	ldr	r1, [r2, #4]
 801c8de:	ac0c      	add	r4, sp, #48	; 0x30
 801c8e0:	4616      	mov	r6, r2
 801c8e2:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801c8e6:	4d64      	ldr	r5, [pc, #400]	; (801ca78 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801c8e8:	f8df a190 	ldr.w	sl, [pc, #400]	; 801ca7c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801c8ec:	c403      	stmia	r4!, {r0, r1}
 801c8ee:	6818      	ldr	r0, [r3, #0]
 801c8f0:	ac0e      	add	r4, sp, #56	; 0x38
 801c8f2:	6859      	ldr	r1, [r3, #4]
 801c8f4:	c403      	stmia	r4!, {r0, r1}
 801c8f6:	a80c      	add	r0, sp, #48	; 0x30
 801c8f8:	f7fa fae4 	bl	8016ec4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c8fc:	4631      	mov	r1, r6
 801c8fe:	a80e      	add	r0, sp, #56	; 0x38
 801c900:	f7fa fb08 	bl	8016f14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c904:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801c908:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801c90c:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801c910:	6828      	ldr	r0, [r5, #0]
 801c912:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c916:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 801c91a:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 801c91e:	440f      	add	r7, r1
 801c920:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801c924:	440a      	add	r2, r1
 801c926:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801c92a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801c92e:	4413      	add	r3, r2
 801c930:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801c934:	6803      	ldr	r3, [r0, #0]
 801c936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c938:	4798      	blx	r3
 801c93a:	f010 0f80 	tst.w	r0, #128	; 0x80
 801c93e:	6828      	ldr	r0, [r5, #0]
 801c940:	d01f      	beq.n	801c982 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 801c942:	2201      	movs	r2, #1
 801c944:	2500      	movs	r5, #0
 801c946:	6801      	ldr	r1, [r0, #0]
 801c948:	b2a4      	uxth	r4, r4
 801c94a:	b2b6      	uxth	r6, r6
 801c94c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801c950:	e9cd 2508 	strd	r2, r5, [sp, #32]
 801c954:	250b      	movs	r5, #11
 801c956:	9507      	str	r5, [sp, #28]
 801c958:	f8ba 5000 	ldrh.w	r5, [sl]
 801c95c:	f8cd 9010 	str.w	r9, [sp, #16]
 801c960:	9602      	str	r6, [sp, #8]
 801c962:	9401      	str	r4, [sp, #4]
 801c964:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801c968:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801c96c:	9203      	str	r2, [sp, #12]
 801c96e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801c972:	9200      	str	r2, [sp, #0]
 801c974:	4642      	mov	r2, r8
 801c976:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801c978:	4639      	mov	r1, r7
 801c97a:	47a0      	blx	r4
 801c97c:	b011      	add	sp, #68	; 0x44
 801c97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c982:	6803      	ldr	r3, [r0, #0]
 801c984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c986:	4798      	blx	r3
 801c988:	f8ba 5000 	ldrh.w	r5, [sl]
 801c98c:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801c990:	f04f 0e04 	mov.w	lr, #4
 801c994:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801c998:	436e      	muls	r6, r5
 801c99a:	fb05 2303 	mla	r3, r5, r3, r2
 801c99e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c9a2:	1b2d      	subs	r5, r5, r4
 801c9a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c9a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c9ac:	4418      	add	r0, r3
 801c9ae:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801c9b2:	1982      	adds	r2, r0, r6
 801c9b4:	1b1b      	subs	r3, r3, r4
 801c9b6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c9ba:	930b      	str	r3, [sp, #44]	; 0x2c
 801c9bc:	4290      	cmp	r0, r2
 801c9be:	d254      	bcs.n	801ca6a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 801c9c0:	eb00 0a04 	add.w	sl, r0, r4
 801c9c4:	4550      	cmp	r0, sl
 801c9c6:	d24c      	bcs.n	801ca62 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801c9c8:	f817 1b01 	ldrb.w	r1, [r7], #1
 801c9cc:	fb1e e101 	smlabb	r1, lr, r1, lr
 801c9d0:	eb08 0c01 	add.w	ip, r8, r1
 801c9d4:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801c9d8:	b173      	cbz	r3, 801c9f8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801c9da:	2bff      	cmp	r3, #255	; 0xff
 801c9dc:	f818 b001 	ldrb.w	fp, [r8, r1]
 801c9e0:	d10c      	bne.n	801c9fc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801c9e2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801c9e6:	d109      	bne.n	801c9fc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801c9e8:	f880 b000 	strb.w	fp, [r0]
 801c9ec:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801c9f0:	7043      	strb	r3, [r0, #1]
 801c9f2:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801c9f6:	7083      	strb	r3, [r0, #2]
 801c9f8:	3003      	adds	r0, #3
 801c9fa:	e7e3      	b.n	801c9c4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801c9fc:	fb09 f103 	mul.w	r1, r9, r3
 801ca00:	1c4b      	adds	r3, r1, #1
 801ca02:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801ca06:	7801      	ldrb	r1, [r0, #0]
 801ca08:	121b      	asrs	r3, r3, #8
 801ca0a:	b29e      	uxth	r6, r3
 801ca0c:	43db      	mvns	r3, r3
 801ca0e:	fb1b fb06 	smulbb	fp, fp, r6
 801ca12:	b2db      	uxtb	r3, r3
 801ca14:	fb01 b103 	mla	r1, r1, r3, fp
 801ca18:	b289      	uxth	r1, r1
 801ca1a:	f101 0b01 	add.w	fp, r1, #1
 801ca1e:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801ca22:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ca26:	fb1b fb03 	smulbb	fp, fp, r3
 801ca2a:	1209      	asrs	r1, r1, #8
 801ca2c:	7001      	strb	r1, [r0, #0]
 801ca2e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801ca32:	fb01 b106 	mla	r1, r1, r6, fp
 801ca36:	b289      	uxth	r1, r1
 801ca38:	f101 0b01 	add.w	fp, r1, #1
 801ca3c:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801ca40:	1209      	asrs	r1, r1, #8
 801ca42:	7041      	strb	r1, [r0, #1]
 801ca44:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801ca48:	f890 c002 	ldrb.w	ip, [r0, #2]
 801ca4c:	fb1c f303 	smulbb	r3, ip, r3
 801ca50:	fb01 3606 	mla	r6, r1, r6, r3
 801ca54:	b2b6      	uxth	r6, r6
 801ca56:	1c73      	adds	r3, r6, #1
 801ca58:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801ca5c:	1236      	asrs	r6, r6, #8
 801ca5e:	7086      	strb	r6, [r0, #2]
 801ca60:	e7ca      	b.n	801c9f8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801ca62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ca64:	4428      	add	r0, r5
 801ca66:	441f      	add	r7, r3
 801ca68:	e7a8      	b.n	801c9bc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801ca6a:	4b03      	ldr	r3, [pc, #12]	; (801ca78 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801ca6c:	6818      	ldr	r0, [r3, #0]
 801ca6e:	6803      	ldr	r3, [r0, #0]
 801ca70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ca72:	4798      	blx	r3
 801ca74:	e782      	b.n	801c97c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801ca76:	bf00      	nop
 801ca78:	2400ead0 	.word	0x2400ead0
 801ca7c:	2400eaca 	.word	0x2400eaca

0801ca80 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801ca80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca84:	b091      	sub	sp, #68	; 0x44
 801ca86:	4680      	mov	r8, r0
 801ca88:	460e      	mov	r6, r1
 801ca8a:	6810      	ldr	r0, [r2, #0]
 801ca8c:	6851      	ldr	r1, [r2, #4]
 801ca8e:	ad0c      	add	r5, sp, #48	; 0x30
 801ca90:	4614      	mov	r4, r2
 801ca92:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801ca96:	f8df 9198 	ldr.w	r9, [pc, #408]	; 801cc30 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801ca9a:	f8df a198 	ldr.w	sl, [pc, #408]	; 801cc34 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801ca9e:	c503      	stmia	r5!, {r0, r1}
 801caa0:	6818      	ldr	r0, [r3, #0]
 801caa2:	ad0e      	add	r5, sp, #56	; 0x38
 801caa4:	6859      	ldr	r1, [r3, #4]
 801caa6:	c503      	stmia	r5!, {r0, r1}
 801caa8:	a80c      	add	r0, sp, #48	; 0x30
 801caaa:	f7fa fa0b 	bl	8016ec4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801caae:	4621      	mov	r1, r4
 801cab0:	a80e      	add	r0, sp, #56	; 0x38
 801cab2:	f7fa fa2f 	bl	8016f14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cab6:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801caba:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801cabe:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801cac2:	f8d9 0000 	ldr.w	r0, [r9]
 801cac6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801caca:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801cace:	eb08 0401 	add.w	r4, r8, r1
 801cad2:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801cad6:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801cada:	440a      	add	r2, r1
 801cadc:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801cae0:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801cae4:	4413      	add	r3, r2
 801cae6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801caea:	6803      	ldr	r3, [r0, #0]
 801caec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801caee:	4798      	blx	r3
 801caf0:	f010 0f80 	tst.w	r0, #128	; 0x80
 801caf4:	f8d9 0000 	ldr.w	r0, [r9]
 801caf8:	d022      	beq.n	801cb40 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801cafa:	2200      	movs	r2, #0
 801cafc:	f04f 0c01 	mov.w	ip, #1
 801cb00:	6801      	ldr	r1, [r0, #0]
 801cb02:	b2ad      	uxth	r5, r5
 801cb04:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801cb08:	e9cd c208 	strd	ip, r2, [sp, #32]
 801cb0c:	f04f 0c0b 	mov.w	ip, #11
 801cb10:	f8cd c01c 	str.w	ip, [sp, #28]
 801cb14:	f8ba c000 	ldrh.w	ip, [sl]
 801cb18:	9704      	str	r7, [sp, #16]
 801cb1a:	9502      	str	r5, [sp, #8]
 801cb1c:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 801cb20:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801cb24:	9203      	str	r2, [sp, #12]
 801cb26:	fa1f f288 	uxth.w	r2, r8
 801cb2a:	9201      	str	r2, [sp, #4]
 801cb2c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801cb30:	9200      	str	r2, [sp, #0]
 801cb32:	4632      	mov	r2, r6
 801cb34:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801cb36:	4621      	mov	r1, r4
 801cb38:	47a8      	blx	r5
 801cb3a:	b011      	add	sp, #68	; 0x44
 801cb3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb40:	6803      	ldr	r3, [r0, #0]
 801cb42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cb44:	4798      	blx	r3
 801cb46:	f8ba 2000 	ldrh.w	r2, [sl]
 801cb4a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801cb4e:	f04f 0e03 	mov.w	lr, #3
 801cb52:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801cb56:	4355      	muls	r5, r2
 801cb58:	fa1f fc87 	uxth.w	ip, r7
 801cb5c:	fb02 1303 	mla	r3, r2, r3, r1
 801cb60:	eba2 0208 	sub.w	r2, r2, r8
 801cb64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cb68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cb6c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cb70:	4418      	add	r0, r3
 801cb72:	920b      	str	r2, [sp, #44]	; 0x2c
 801cb74:	1943      	adds	r3, r0, r5
 801cb76:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801cb7a:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 801cb7e:	eba2 0208 	sub.w	r2, r2, r8
 801cb82:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801cb86:	b2ad      	uxth	r5, r5
 801cb88:	4298      	cmp	r0, r3
 801cb8a:	d24a      	bcs.n	801cc22 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 801cb8c:	eb00 0908 	add.w	r9, r0, r8
 801cb90:	4621      	mov	r1, r4
 801cb92:	4548      	cmp	r0, r9
 801cb94:	460c      	mov	r4, r1
 801cb96:	d240      	bcs.n	801cc1a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801cb98:	f04f 0a04 	mov.w	sl, #4
 801cb9c:	7824      	ldrb	r4, [r4, #0]
 801cb9e:	2fff      	cmp	r7, #255	; 0xff
 801cba0:	f101 0101 	add.w	r1, r1, #1
 801cba4:	fb1e a404 	smlabb	r4, lr, r4, sl
 801cba8:	eb06 0a04 	add.w	sl, r6, r4
 801cbac:	f816 b004 	ldrb.w	fp, [r6, r4]
 801cbb0:	d02b      	beq.n	801cc0a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 801cbb2:	7804      	ldrb	r4, [r0, #0]
 801cbb4:	fb14 f405 	smulbb	r4, r4, r5
 801cbb8:	fb0b 440c 	mla	r4, fp, ip, r4
 801cbbc:	b2a4      	uxth	r4, r4
 801cbbe:	f104 0b01 	add.w	fp, r4, #1
 801cbc2:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801cbc6:	f890 b001 	ldrb.w	fp, [r0, #1]
 801cbca:	fb1b fb05 	smulbb	fp, fp, r5
 801cbce:	1224      	asrs	r4, r4, #8
 801cbd0:	7004      	strb	r4, [r0, #0]
 801cbd2:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801cbd6:	fb04 b40c 	mla	r4, r4, ip, fp
 801cbda:	b2a4      	uxth	r4, r4
 801cbdc:	f104 0b01 	add.w	fp, r4, #1
 801cbe0:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801cbe4:	1224      	asrs	r4, r4, #8
 801cbe6:	7044      	strb	r4, [r0, #1]
 801cbe8:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801cbec:	f890 a002 	ldrb.w	sl, [r0, #2]
 801cbf0:	fb1a fa05 	smulbb	sl, sl, r5
 801cbf4:	fb04 a40c 	mla	r4, r4, ip, sl
 801cbf8:	b2a4      	uxth	r4, r4
 801cbfa:	f104 0a01 	add.w	sl, r4, #1
 801cbfe:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801cc02:	1224      	asrs	r4, r4, #8
 801cc04:	7084      	strb	r4, [r0, #2]
 801cc06:	3003      	adds	r0, #3
 801cc08:	e7c3      	b.n	801cb92 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801cc0a:	f880 b000 	strb.w	fp, [r0]
 801cc0e:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801cc12:	7044      	strb	r4, [r0, #1]
 801cc14:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801cc18:	e7f4      	b.n	801cc04 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801cc1a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801cc1c:	4420      	add	r0, r4
 801cc1e:	188c      	adds	r4, r1, r2
 801cc20:	e7b2      	b.n	801cb88 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 801cc22:	4b03      	ldr	r3, [pc, #12]	; (801cc30 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801cc24:	6818      	ldr	r0, [r3, #0]
 801cc26:	6803      	ldr	r3, [r0, #0]
 801cc28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cc2a:	4798      	blx	r3
 801cc2c:	e785      	b.n	801cb3a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 801cc2e:	bf00      	nop
 801cc30:	2400ead0 	.word	0x2400ead0
 801cc34:	2400eaca 	.word	0x2400eaca

0801cc38 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801cc38:	b430      	push	{r4, r5}
 801cc3a:	780d      	ldrb	r5, [r1, #0]
 801cc3c:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801cc40:	b11d      	cbz	r5, 801cc4a <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x12>
 801cc42:	2d01      	cmp	r5, #1
 801cc44:	d005      	beq.n	801cc52 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801cc46:	bc30      	pop	{r4, r5}
 801cc48:	4770      	bx	lr
 801cc4a:	9402      	str	r4, [sp, #8]
 801cc4c:	bc30      	pop	{r4, r5}
 801cc4e:	f7ff be3f 	b.w	801c8d0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801cc52:	9402      	str	r4, [sp, #8]
 801cc54:	bc30      	pop	{r4, r5}
 801cc56:	f7ff bf13 	b.w	801ca80 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
	...

0801cc5c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801cc5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cc60:	4605      	mov	r5, r0
 801cc62:	b08f      	sub	sp, #60	; 0x3c
 801cc64:	460c      	mov	r4, r1
 801cc66:	461f      	mov	r7, r3
 801cc68:	2b00      	cmp	r3, #0
 801cc6a:	d052      	beq.n	801cd12 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801cc6c:	6808      	ldr	r0, [r1, #0]
 801cc6e:	ab0a      	add	r3, sp, #40	; 0x28
 801cc70:	6849      	ldr	r1, [r1, #4]
 801cc72:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 801ce3c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801cc76:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 801ce40 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801cc7a:	c303      	stmia	r3!, {r0, r1}
 801cc7c:	6810      	ldr	r0, [r2, #0]
 801cc7e:	ab0c      	add	r3, sp, #48	; 0x30
 801cc80:	6851      	ldr	r1, [r2, #4]
 801cc82:	c303      	stmia	r3!, {r0, r1}
 801cc84:	a80a      	add	r0, sp, #40	; 0x28
 801cc86:	f7fa f91d 	bl	8016ec4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cc8a:	4621      	mov	r1, r4
 801cc8c:	a80c      	add	r0, sp, #48	; 0x30
 801cc8e:	f7fa f941 	bl	8016f14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cc92:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801cc96:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801cc9a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801cc9e:	f8d8 0000 	ldr.w	r0, [r8]
 801cca2:	fb11 2103 	smlabb	r1, r1, r3, r2
 801cca6:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 801ccaa:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 801ccae:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801ccb2:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801ccb6:	440a      	add	r2, r1
 801ccb8:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801ccbc:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801ccc0:	4413      	add	r3, r2
 801ccc2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801ccc6:	6803      	ldr	r3, [r0, #0]
 801ccc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ccca:	4798      	blx	r3
 801cccc:	2fff      	cmp	r7, #255	; 0xff
 801ccce:	d023      	beq.n	801cd18 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 801ccd0:	f010 0f04 	tst.w	r0, #4
 801ccd4:	f8d8 0000 	ldr.w	r0, [r8]
 801ccd8:	d021      	beq.n	801cd1e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801ccda:	2100      	movs	r1, #0
 801ccdc:	f04f 0e01 	mov.w	lr, #1
 801cce0:	f8d0 c000 	ldr.w	ip, [r0]
 801cce4:	b2a4      	uxth	r4, r4
 801cce6:	9106      	str	r1, [sp, #24]
 801cce8:	b2b6      	uxth	r6, r6
 801ccea:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801ccee:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801ccf2:	e9cd e107 	strd	lr, r1, [sp, #28]
 801ccf6:	f8b9 e000 	ldrh.w	lr, [r9]
 801ccfa:	9703      	str	r7, [sp, #12]
 801ccfc:	9401      	str	r4, [sp, #4]
 801ccfe:	9600      	str	r6, [sp, #0]
 801cd00:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801cd04:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801cd08:	9102      	str	r1, [sp, #8]
 801cd0a:	4629      	mov	r1, r5
 801cd0c:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 801cd10:	47a0      	blx	r4
 801cd12:	b00f      	add	sp, #60	; 0x3c
 801cd14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cd18:	f010 0f01 	tst.w	r0, #1
 801cd1c:	e7da      	b.n	801ccd4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801cd1e:	6803      	ldr	r3, [r0, #0]
 801cd20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cd22:	4798      	blx	r3
 801cd24:	f8b9 1000 	ldrh.w	r1, [r9]
 801cd28:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801cd2c:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801cd30:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801cd34:	434c      	muls	r4, r1
 801cd36:	2fff      	cmp	r7, #255	; 0xff
 801cd38:	fb01 2303 	mla	r3, r1, r3, r2
 801cd3c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801cd40:	eba1 0106 	sub.w	r1, r1, r6
 801cd44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cd48:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801cd4c:	4418      	add	r0, r3
 801cd4e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801cd52:	eba3 0606 	sub.w	r6, r3, r6
 801cd56:	4404      	add	r4, r0
 801cd58:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801cd5c:	d04a      	beq.n	801cdf4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 801cd5e:	43fa      	mvns	r2, r7
 801cd60:	b2bb      	uxth	r3, r7
 801cd62:	b2d7      	uxtb	r7, r2
 801cd64:	42a0      	cmp	r0, r4
 801cd66:	d263      	bcs.n	801ce30 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801cd68:	eb00 0e0c 	add.w	lr, r0, ip
 801cd6c:	4586      	cmp	lr, r0
 801cd6e:	f100 0803 	add.w	r8, r0, #3
 801cd72:	d93a      	bls.n	801cdea <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801cd74:	f835 2b02 	ldrh.w	r2, [r5], #2
 801cd78:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801cd7c:	00d0      	lsls	r0, r2, #3
 801cd7e:	fb19 f907 	smulbb	r9, r9, r7
 801cd82:	b2c0      	uxtb	r0, r0
 801cd84:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801cd88:	fb00 9003 	mla	r0, r0, r3, r9
 801cd8c:	b280      	uxth	r0, r0
 801cd8e:	f100 0901 	add.w	r9, r0, #1
 801cd92:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801cd96:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801cd9a:	fb19 f907 	smulbb	r9, r9, r7
 801cd9e:	1200      	asrs	r0, r0, #8
 801cda0:	f808 0c03 	strb.w	r0, [r8, #-3]
 801cda4:	10d0      	asrs	r0, r2, #3
 801cda6:	1212      	asrs	r2, r2, #8
 801cda8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801cdac:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801cdb0:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801cdb4:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801cdb8:	fb00 9003 	mla	r0, r0, r3, r9
 801cdbc:	b280      	uxth	r0, r0
 801cdbe:	f100 0901 	add.w	r9, r0, #1
 801cdc2:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801cdc6:	1200      	asrs	r0, r0, #8
 801cdc8:	f808 0c02 	strb.w	r0, [r8, #-2]
 801cdcc:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801cdd0:	fb10 f007 	smulbb	r0, r0, r7
 801cdd4:	fb02 0203 	mla	r2, r2, r3, r0
 801cdd8:	b292      	uxth	r2, r2
 801cdda:	1c50      	adds	r0, r2, #1
 801cddc:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801cde0:	4640      	mov	r0, r8
 801cde2:	1212      	asrs	r2, r2, #8
 801cde4:	f808 2c01 	strb.w	r2, [r8, #-1]
 801cde8:	e7c0      	b.n	801cd6c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801cdea:	4408      	add	r0, r1
 801cdec:	4435      	add	r5, r6
 801cdee:	e7b9      	b.n	801cd64 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 801cdf0:	4408      	add	r0, r1
 801cdf2:	4435      	add	r5, r6
 801cdf4:	42a0      	cmp	r0, r4
 801cdf6:	d21b      	bcs.n	801ce30 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801cdf8:	eb00 070c 	add.w	r7, r0, ip
 801cdfc:	42b8      	cmp	r0, r7
 801cdfe:	d2f7      	bcs.n	801cdf0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 801ce00:	f835 3b02 	ldrh.w	r3, [r5], #2
 801ce04:	3003      	adds	r0, #3
 801ce06:	00da      	lsls	r2, r3, #3
 801ce08:	b2d2      	uxtb	r2, r2
 801ce0a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801ce0e:	f800 2c03 	strb.w	r2, [r0, #-3]
 801ce12:	10da      	asrs	r2, r3, #3
 801ce14:	121b      	asrs	r3, r3, #8
 801ce16:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801ce1a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801ce1e:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801ce22:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801ce26:	f800 2c02 	strb.w	r2, [r0, #-2]
 801ce2a:	f800 3c01 	strb.w	r3, [r0, #-1]
 801ce2e:	e7e5      	b.n	801cdfc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801ce30:	4b02      	ldr	r3, [pc, #8]	; (801ce3c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801ce32:	6818      	ldr	r0, [r3, #0]
 801ce34:	6803      	ldr	r3, [r0, #0]
 801ce36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ce38:	4798      	blx	r3
 801ce3a:	e76a      	b.n	801cd12 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801ce3c:	2400ead0 	.word	0x2400ead0
 801ce40:	2400eaca 	.word	0x2400eaca

0801ce44 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801ce44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ce48:	b08a      	sub	sp, #40	; 0x28
 801ce4a:	460d      	mov	r5, r1
 801ce4c:	4604      	mov	r4, r0
 801ce4e:	461e      	mov	r6, r3
 801ce50:	6808      	ldr	r0, [r1, #0]
 801ce52:	ab06      	add	r3, sp, #24
 801ce54:	6849      	ldr	r1, [r1, #4]
 801ce56:	4f5d      	ldr	r7, [pc, #372]	; (801cfcc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801ce58:	c303      	stmia	r3!, {r0, r1}
 801ce5a:	6810      	ldr	r0, [r2, #0]
 801ce5c:	ab08      	add	r3, sp, #32
 801ce5e:	6851      	ldr	r1, [r2, #4]
 801ce60:	c303      	stmia	r3!, {r0, r1}
 801ce62:	a806      	add	r0, sp, #24
 801ce64:	f7fa f82e 	bl	8016ec4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ce68:	4629      	mov	r1, r5
 801ce6a:	a808      	add	r0, sp, #32
 801ce6c:	f7fa f852 	bl	8016f14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ce70:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801ce74:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801ce78:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801ce7c:	6838      	ldr	r0, [r7, #0]
 801ce7e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ce82:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801ce86:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801ce8a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801ce8e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801ce92:	440a      	add	r2, r1
 801ce94:	f8ad 2020 	strh.w	r2, [sp, #32]
 801ce98:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801ce9c:	4413      	add	r3, r2
 801ce9e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801cea2:	6803      	ldr	r3, [r0, #0]
 801cea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cea6:	4798      	blx	r3
 801cea8:	2eff      	cmp	r6, #255	; 0xff
 801ceaa:	d119      	bne.n	801cee0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801ceac:	f010 0f20 	tst.w	r0, #32
 801ceb0:	6838      	ldr	r0, [r7, #0]
 801ceb2:	d018      	beq.n	801cee6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801ceb4:	b2ad      	uxth	r5, r5
 801ceb6:	2700      	movs	r7, #0
 801ceb8:	6801      	ldr	r1, [r0, #0]
 801ceba:	9501      	str	r5, [sp, #4]
 801cebc:	fa1f f588 	uxth.w	r5, r8
 801cec0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801cec4:	9500      	str	r5, [sp, #0]
 801cec6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801ceca:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801cece:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801ced2:	9602      	str	r6, [sp, #8]
 801ced4:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801ced6:	4621      	mov	r1, r4
 801ced8:	47a8      	blx	r5
 801ceda:	b00a      	add	sp, #40	; 0x28
 801cedc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cee0:	f010 0f40 	tst.w	r0, #64	; 0x40
 801cee4:	e7e4      	b.n	801ceb0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801cee6:	6803      	ldr	r3, [r0, #0]
 801cee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ceea:	4798      	blx	r3
 801ceec:	4b38      	ldr	r3, [pc, #224]	; (801cfd0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801ceee:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801cef2:	f8b3 c000 	ldrh.w	ip, [r3]
 801cef6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801cefa:	fb0c f505 	mul.w	r5, ip, r5
 801cefe:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801cf02:	fb0c 2303 	mla	r3, ip, r3, r2
 801cf06:	ebac 0c08 	sub.w	ip, ip, r8
 801cf0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cf0e:	ebae 0e08 	sub.w	lr, lr, r8
 801cf12:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cf16:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801cf1a:	4418      	add	r0, r3
 801cf1c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801cf20:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801cf24:	4405      	add	r5, r0
 801cf26:	42a8      	cmp	r0, r5
 801cf28:	d24a      	bcs.n	801cfc0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801cf2a:	eb00 0803 	add.w	r8, r0, r3
 801cf2e:	4540      	cmp	r0, r8
 801cf30:	d243      	bcs.n	801cfba <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801cf32:	78e2      	ldrb	r2, [r4, #3]
 801cf34:	b15a      	cbz	r2, 801cf4e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801cf36:	2aff      	cmp	r2, #255	; 0xff
 801cf38:	f894 9000 	ldrb.w	r9, [r4]
 801cf3c:	d10a      	bne.n	801cf54 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801cf3e:	2eff      	cmp	r6, #255	; 0xff
 801cf40:	d108      	bne.n	801cf54 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801cf42:	f880 9000 	strb.w	r9, [r0]
 801cf46:	7862      	ldrb	r2, [r4, #1]
 801cf48:	7042      	strb	r2, [r0, #1]
 801cf4a:	78a2      	ldrb	r2, [r4, #2]
 801cf4c:	7082      	strb	r2, [r0, #2]
 801cf4e:	3003      	adds	r0, #3
 801cf50:	3404      	adds	r4, #4
 801cf52:	e7ec      	b.n	801cf2e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801cf54:	4372      	muls	r2, r6
 801cf56:	1c51      	adds	r1, r2, #1
 801cf58:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801cf5c:	1209      	asrs	r1, r1, #8
 801cf5e:	fa1f fa81 	uxth.w	sl, r1
 801cf62:	43c9      	mvns	r1, r1
 801cf64:	fb19 f90a 	smulbb	r9, r9, sl
 801cf68:	b2ca      	uxtb	r2, r1
 801cf6a:	7801      	ldrb	r1, [r0, #0]
 801cf6c:	fb01 9902 	mla	r9, r1, r2, r9
 801cf70:	fa1f f989 	uxth.w	r9, r9
 801cf74:	f109 0101 	add.w	r1, r9, #1
 801cf78:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801cf7c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cf80:	f880 9000 	strb.w	r9, [r0]
 801cf84:	f890 9001 	ldrb.w	r9, [r0, #1]
 801cf88:	7861      	ldrb	r1, [r4, #1]
 801cf8a:	fb19 f902 	smulbb	r9, r9, r2
 801cf8e:	fb01 910a 	mla	r1, r1, sl, r9
 801cf92:	b289      	uxth	r1, r1
 801cf94:	f101 0901 	add.w	r9, r1, #1
 801cf98:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801cf9c:	1209      	asrs	r1, r1, #8
 801cf9e:	7041      	strb	r1, [r0, #1]
 801cfa0:	7881      	ldrb	r1, [r0, #2]
 801cfa2:	f894 9002 	ldrb.w	r9, [r4, #2]
 801cfa6:	fb11 f202 	smulbb	r2, r1, r2
 801cfaa:	fb09 220a 	mla	r2, r9, sl, r2
 801cfae:	b292      	uxth	r2, r2
 801cfb0:	1c51      	adds	r1, r2, #1
 801cfb2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801cfb6:	1212      	asrs	r2, r2, #8
 801cfb8:	e7c8      	b.n	801cf4c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801cfba:	4460      	add	r0, ip
 801cfbc:	4474      	add	r4, lr
 801cfbe:	e7b2      	b.n	801cf26 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 801cfc0:	6838      	ldr	r0, [r7, #0]
 801cfc2:	6803      	ldr	r3, [r0, #0]
 801cfc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cfc6:	4798      	blx	r3
 801cfc8:	e787      	b.n	801ceda <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801cfca:	bf00      	nop
 801cfcc:	2400ead0 	.word	0x2400ead0
 801cfd0:	2400eaca 	.word	0x2400eaca

0801cfd4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801cfd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cfd8:	b085      	sub	sp, #20
 801cfda:	4606      	mov	r6, r0
 801cfdc:	460c      	mov	r4, r1
 801cfde:	4691      	mov	r9, r2
 801cfe0:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801cfe4:	4698      	mov	r8, r3
 801cfe6:	b31d      	cbz	r5, 801d030 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801cfe8:	4608      	mov	r0, r1
 801cfea:	f7fd fa4f 	bl	801a48c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801cfee:	4607      	mov	r7, r0
 801cff0:	4620      	mov	r0, r4
 801cff2:	f7fd fa7f 	bl	801a4f4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801cff6:	f8ad 000e 	strh.w	r0, [sp, #14]
 801cffa:	4620      	mov	r0, r4
 801cffc:	f8ad 9008 	strh.w	r9, [sp, #8]
 801d000:	f8ad 800a 	strh.w	r8, [sp, #10]
 801d004:	f8ad 700c 	strh.w	r7, [sp, #12]
 801d008:	f7fd fb78 	bl	801a6fc <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d00c:	280b      	cmp	r0, #11
 801d00e:	d80f      	bhi.n	801d030 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801d010:	e8df f000 	tbb	[pc, r0]
 801d014:	0e062920 	.word	0x0e062920
 801d018:	0e0e0e0e 	.word	0x0e0e0e0e
 801d01c:	110e0e0e 	.word	0x110e0e0e
 801d020:	4620      	mov	r0, r4
 801d022:	f7fd fae7 	bl	801a5f4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d026:	462b      	mov	r3, r5
 801d028:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d02a:	a902      	add	r1, sp, #8
 801d02c:	f7ff ff0a 	bl	801ce44 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d030:	b005      	add	sp, #20
 801d032:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d036:	4620      	mov	r0, r4
 801d038:	f7fd fadc 	bl	801a5f4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d03c:	4606      	mov	r6, r0
 801d03e:	4620      	mov	r0, r4
 801d040:	f7fd fb08 	bl	801a654 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801d044:	9500      	str	r5, [sp, #0]
 801d046:	4601      	mov	r1, r0
 801d048:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d04a:	aa02      	add	r2, sp, #8
 801d04c:	4630      	mov	r0, r6
 801d04e:	f7ff fdf3 	bl	801cc38 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801d052:	e7ed      	b.n	801d030 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801d054:	4620      	mov	r0, r4
 801d056:	f7fd facd 	bl	801a5f4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d05a:	462b      	mov	r3, r5
 801d05c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d05e:	a902      	add	r1, sp, #8
 801d060:	f7ff fdfc 	bl	801cc5c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801d064:	e7e4      	b.n	801d030 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801d066:	6833      	ldr	r3, [r6, #0]
 801d068:	4620      	mov	r0, r4
 801d06a:	68df      	ldr	r7, [r3, #12]
 801d06c:	f7fd fac2 	bl	801a5f4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d070:	2300      	movs	r3, #0
 801d072:	4601      	mov	r1, r0
 801d074:	aa02      	add	r2, sp, #8
 801d076:	4630      	mov	r0, r6
 801d078:	e9cd 5300 	strd	r5, r3, [sp]
 801d07c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d07e:	47b8      	blx	r7
 801d080:	e7d6      	b.n	801d030 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

0801d082 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801d082:	b4f0      	push	{r4, r5, r6, r7}
 801d084:	4616      	mov	r6, r2
 801d086:	461c      	mov	r4, r3
 801d088:	460d      	mov	r5, r1
 801d08a:	9a04      	ldr	r2, [sp, #16]
 801d08c:	2e01      	cmp	r6, #1
 801d08e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801d092:	d00e      	beq.n	801d0b2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 801d094:	d303      	bcc.n	801d09e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 801d096:	2e02      	cmp	r6, #2
 801d098:	d006      	beq.n	801d0a8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801d09a:	bcf0      	pop	{r4, r5, r6, r7}
 801d09c:	4770      	bx	lr
 801d09e:	4621      	mov	r1, r4
 801d0a0:	4628      	mov	r0, r5
 801d0a2:	bcf0      	pop	{r4, r5, r6, r7}
 801d0a4:	f7ff bdda 	b.w	801cc5c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801d0a8:	4621      	mov	r1, r4
 801d0aa:	4628      	mov	r0, r5
 801d0ac:	bcf0      	pop	{r4, r5, r6, r7}
 801d0ae:	f7ff bec9 	b.w	801ce44 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801d0b2:	6805      	ldr	r5, [r0, #0]
 801d0b4:	2600      	movs	r6, #0
 801d0b6:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801d0ba:	68ed      	ldr	r5, [r5, #12]
 801d0bc:	4613      	mov	r3, r2
 801d0be:	4622      	mov	r2, r4
 801d0c0:	46ac      	mov	ip, r5
 801d0c2:	bcf0      	pop	{r4, r5, r6, r7}
 801d0c4:	4760      	bx	ip
	...

0801d0c8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801d0c8:	b160      	cbz	r0, 801d0e4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 801d0ca:	2903      	cmp	r1, #3
 801d0cc:	d818      	bhi.n	801d100 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801d0ce:	e8df f001 	tbb	[pc, r1]
 801d0d2:	1902      	.short	0x1902
 801d0d4:	1b06      	.short	0x1b06
 801d0d6:	4b0e      	ldr	r3, [pc, #56]	; (801d110 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801d0d8:	8818      	ldrh	r0, [r3, #0]
 801d0da:	4240      	negs	r0, r0
 801d0dc:	4770      	bx	lr
 801d0de:	4b0c      	ldr	r3, [pc, #48]	; (801d110 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801d0e0:	8818      	ldrh	r0, [r3, #0]
 801d0e2:	4770      	bx	lr
 801d0e4:	2903      	cmp	r1, #3
 801d0e6:	d80b      	bhi.n	801d100 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801d0e8:	a301      	add	r3, pc, #4	; (adr r3, 801d0f0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801d0ea:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801d0ee:	bf00      	nop
 801d0f0:	0801d105 	.word	0x0801d105
 801d0f4:	0801d0df 	.word	0x0801d0df
 801d0f8:	0801d109 	.word	0x0801d109
 801d0fc:	0801d0d7 	.word	0x0801d0d7
 801d100:	2000      	movs	r0, #0
 801d102:	4770      	bx	lr
 801d104:	2001      	movs	r0, #1
 801d106:	4770      	bx	lr
 801d108:	f04f 30ff 	mov.w	r0, #4294967295
 801d10c:	4770      	bx	lr
 801d10e:	bf00      	nop
 801d110:	2400eaca 	.word	0x2400eaca

0801d114 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801d114:	b160      	cbz	r0, 801d130 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801d116:	2903      	cmp	r1, #3
 801d118:	d818      	bhi.n	801d14c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801d11a:	e8df f001 	tbb	[pc, r1]
 801d11e:	0219      	.short	0x0219
 801d120:	051b      	.short	0x051b
 801d122:	4b0e      	ldr	r3, [pc, #56]	; (801d15c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801d124:	8818      	ldrh	r0, [r3, #0]
 801d126:	4770      	bx	lr
 801d128:	4b0c      	ldr	r3, [pc, #48]	; (801d15c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801d12a:	8818      	ldrh	r0, [r3, #0]
 801d12c:	4240      	negs	r0, r0
 801d12e:	4770      	bx	lr
 801d130:	2903      	cmp	r1, #3
 801d132:	d80b      	bhi.n	801d14c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801d134:	a301      	add	r3, pc, #4	; (adr r3, 801d13c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801d136:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801d13a:	bf00      	nop
 801d13c:	0801d123 	.word	0x0801d123
 801d140:	0801d155 	.word	0x0801d155
 801d144:	0801d129 	.word	0x0801d129
 801d148:	0801d151 	.word	0x0801d151
 801d14c:	2000      	movs	r0, #0
 801d14e:	4770      	bx	lr
 801d150:	2001      	movs	r0, #1
 801d152:	4770      	bx	lr
 801d154:	f04f 30ff 	mov.w	r0, #4294967295
 801d158:	4770      	bx	lr
 801d15a:	bf00      	nop
 801d15c:	2400eaca 	.word	0x2400eaca

0801d160 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801d160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d164:	b097      	sub	sp, #92	; 0x5c
 801d166:	910b      	str	r1, [sp, #44]	; 0x2c
 801d168:	a912      	add	r1, sp, #72	; 0x48
 801d16a:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 801d16e:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 801d172:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 801d176:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 801d17a:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 801d17e:	e881 000c 	stmia.w	r1, {r2, r3}
 801d182:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801d186:	930a      	str	r3, [sp, #40]	; 0x28
 801d188:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801d18c:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 801d190:	9311      	str	r3, [sp, #68]	; 0x44
 801d192:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 801d196:	798d      	ldrb	r5, [r1, #6]
 801d198:	930c      	str	r3, [sp, #48]	; 0x30
 801d19a:	7b4b      	ldrb	r3, [r1, #13]
 801d19c:	0158      	lsls	r0, r3, #5
 801d19e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801d1a2:	4328      	orrs	r0, r5
 801d1a4:	9009      	str	r0, [sp, #36]	; 0x24
 801d1a6:	f000 817c 	beq.w	801d4a2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801d1aa:	011b      	lsls	r3, r3, #4
 801d1ac:	79c8      	ldrb	r0, [r1, #7]
 801d1ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d1b2:	4303      	orrs	r3, r0
 801d1b4:	930e      	str	r3, [sp, #56]	; 0x38
 801d1b6:	f000 8174 	beq.w	801d4a2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801d1ba:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801d1be:	b29b      	uxth	r3, r3
 801d1c0:	2f00      	cmp	r7, #0
 801d1c2:	f000 8116 	beq.w	801d3f2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801d1c6:	1aff      	subs	r7, r7, r3
 801d1c8:	b2bf      	uxth	r7, r7
 801d1ca:	043b      	lsls	r3, r7, #16
 801d1cc:	d502      	bpl.n	801d1d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801d1ce:	1bf6      	subs	r6, r6, r7
 801d1d0:	2700      	movs	r7, #0
 801d1d2:	b236      	sxth	r6, r6
 801d1d4:	f9b2 1000 	ldrsh.w	r1, [r2]
 801d1d8:	a812      	add	r0, sp, #72	; 0x48
 801d1da:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801d1de:	428e      	cmp	r6, r1
 801d1e0:	b28b      	uxth	r3, r1
 801d1e2:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801d1e6:	bfbf      	itttt	lt
 801d1e8:	18ff      	addlt	r7, r7, r3
 801d1ea:	1bbe      	sublt	r6, r7, r6
 801d1ec:	b2b7      	uxthlt	r7, r6
 801d1ee:	460e      	movlt	r6, r1
 801d1f0:	8891      	ldrh	r1, [r2, #4]
 801d1f2:	440b      	add	r3, r1
 801d1f4:	4631      	mov	r1, r6
 801d1f6:	b21b      	sxth	r3, r3
 801d1f8:	9310      	str	r3, [sp, #64]	; 0x40
 801d1fa:	88d3      	ldrh	r3, [r2, #6]
 801d1fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d1fe:	449a      	add	sl, r3
 801d200:	fa0f f38a 	sxth.w	r3, sl
 801d204:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801d208:	930f      	str	r3, [sp, #60]	; 0x3c
 801d20a:	4bb5      	ldr	r3, [pc, #724]	; (801d4e0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801d20c:	f893 b000 	ldrb.w	fp, [r3]
 801d210:	f10b 3cff 	add.w	ip, fp, #4294967295
 801d214:	f1dc 0300 	rsbs	r3, ip, #0
 801d218:	eb43 030c 	adc.w	r3, r3, ip
 801d21c:	930d      	str	r3, [sp, #52]	; 0x34
 801d21e:	464b      	mov	r3, r9
 801d220:	f7f9 fcca 	bl	8016bb8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801d224:	4631      	mov	r1, r6
 801d226:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801d22a:	464b      	mov	r3, r9
 801d22c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d22e:	a812      	add	r0, sp, #72	; 0x48
 801d230:	f7f9 fcdf 	bl	8016bf2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801d234:	a916      	add	r1, sp, #88	; 0x58
 801d236:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801d23a:	a815      	add	r0, sp, #84	; 0x54
 801d23c:	f7f9 fe00 	bl	8016e40 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801d240:	f1b9 0f00 	cmp.w	r9, #0
 801d244:	f040 80d8 	bne.w	801d3f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 801d248:	f1bb 0f01 	cmp.w	fp, #1
 801d24c:	f040 80dc 	bne.w	801d408 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801d250:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d252:	b153      	cbz	r3, 801d26a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801d254:	2508      	movs	r5, #8
 801d256:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d258:	fb95 f3f8 	sdiv	r3, r5, r8
 801d25c:	1e5d      	subs	r5, r3, #1
 801d25e:	4415      	add	r5, r2
 801d260:	fb95 f5f3 	sdiv	r5, r5, r3
 801d264:	fb15 f503 	smulbb	r5, r5, r3
 801d268:	b2ad      	uxth	r5, r5
 801d26a:	b907      	cbnz	r7, 801d26e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801d26c:	b16c      	cbz	r4, 801d28a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801d26e:	fb04 7305 	mla	r3, r4, r5, r7
 801d272:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801d274:	ebaa 0a04 	sub.w	sl, sl, r4
 801d278:	fb08 f303 	mul.w	r3, r8, r3
 801d27c:	fa1f fa8a 	uxth.w	sl, sl
 801d280:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801d284:	f003 0407 	and.w	r4, r3, #7
 801d288:	9226      	str	r2, [sp, #152]	; 0x98
 801d28a:	4649      	mov	r1, r9
 801d28c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d28e:	f7ff ff1b 	bl	801d0c8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801d292:	4683      	mov	fp, r0
 801d294:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d296:	f7ff ff3d 	bl	801d114 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801d29a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d29c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d29e:	4681      	mov	r9, r0
 801d2a0:	1a9b      	subs	r3, r3, r2
 801d2a2:	459a      	cmp	sl, r3
 801d2a4:	bfa8      	it	ge
 801d2a6:	469a      	movge	sl, r3
 801d2a8:	f1ba 0f00 	cmp.w	sl, #0
 801d2ac:	f340 80f9 	ble.w	801d4a2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801d2b0:	1bf6      	subs	r6, r6, r7
 801d2b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d2b4:	1b9e      	subs	r6, r3, r6
 801d2b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2b8:	429e      	cmp	r6, r3
 801d2ba:	bfd4      	ite	le
 801d2bc:	ebc7 0706 	rsble	r7, r7, r6
 801d2c0:	ebc7 0703 	rsbgt	r7, r7, r3
 801d2c4:	2f00      	cmp	r7, #0
 801d2c6:	f340 80ec 	ble.w	801d4a2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801d2ca:	1bed      	subs	r5, r5, r7
 801d2cc:	fb08 f305 	mul.w	r3, r8, r5
 801d2d0:	930d      	str	r3, [sp, #52]	; 0x34
 801d2d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d2d4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801d2d8:	930e      	str	r3, [sp, #56]	; 0x38
 801d2da:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d2dc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d2e0:	930f      	str	r3, [sp, #60]	; 0x3c
 801d2e2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d2e4:	b2db      	uxtb	r3, r3
 801d2e6:	9310      	str	r3, [sp, #64]	; 0x40
 801d2e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d2ea:	2b00      	cmp	r3, #0
 801d2ec:	f040 80de 	bne.w	801d4ac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801d2f0:	4b7c      	ldr	r3, [pc, #496]	; (801d4e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801d2f2:	6818      	ldr	r0, [r3, #0]
 801d2f4:	6803      	ldr	r3, [r0, #0]
 801d2f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d2f8:	4798      	blx	r3
 801d2fa:	2301      	movs	r3, #1
 801d2fc:	4a7a      	ldr	r2, [pc, #488]	; (801d4e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801d2fe:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801d302:	fb07 9b1b 	mls	fp, r7, fp, r9
 801d306:	fa03 f308 	lsl.w	r3, r3, r8
 801d30a:	8811      	ldrh	r1, [r2, #0]
 801d30c:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801d310:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801d314:	3b01      	subs	r3, #1
 801d316:	fb06 bb07 	mla	fp, r6, r7, fp
 801d31a:	b2db      	uxtb	r3, r3
 801d31c:	930a      	str	r3, [sp, #40]	; 0x28
 801d31e:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801d322:	fb01 2303 	mla	r3, r1, r3, r2
 801d326:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d32a:	18c3      	adds	r3, r0, r3
 801d32c:	9309      	str	r3, [sp, #36]	; 0x24
 801d32e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d330:	781a      	ldrb	r2, [r3, #0]
 801d332:	4122      	asrs	r2, r4
 801d334:	b2d2      	uxtb	r2, r2
 801d336:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801d33a:	f0c0 80d7 	bcc.w	801d4ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 801d33e:	46be      	mov	lr, r7
 801d340:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d342:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801d346:	f0c0 80ba 	bcc.w	801d4be <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801d34a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d34c:	4013      	ands	r3, r2
 801d34e:	d041      	beq.n	801d3d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801d350:	20ff      	movs	r0, #255	; 0xff
 801d352:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801d354:	fb90 f5f5 	sdiv	r5, r0, r5
 801d358:	436b      	muls	r3, r5
 801d35a:	2bfe      	cmp	r3, #254	; 0xfe
 801d35c:	dd03      	ble.n	801d366 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 801d35e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d360:	4285      	cmp	r5, r0
 801d362:	f000 80a5 	beq.w	801d4b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801d366:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d368:	9810      	ldr	r0, [sp, #64]	; 0x40
 801d36a:	fb15 f303 	smulbb	r3, r5, r3
 801d36e:	b29b      	uxth	r3, r3
 801d370:	1c5d      	adds	r5, r3, #1
 801d372:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801d376:	780d      	ldrb	r5, [r1, #0]
 801d378:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d37c:	fa1f fc83 	uxth.w	ip, r3
 801d380:	43db      	mvns	r3, r3
 801d382:	fb10 f90c 	smulbb	r9, r0, ip
 801d386:	b2db      	uxtb	r3, r3
 801d388:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801d38a:	fb05 9503 	mla	r5, r5, r3, r9
 801d38e:	b2ad      	uxth	r5, r5
 801d390:	f105 0901 	add.w	r9, r5, #1
 801d394:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801d398:	fb10 f90c 	smulbb	r9, r0, ip
 801d39c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801d39e:	122d      	asrs	r5, r5, #8
 801d3a0:	fb10 fc0c 	smulbb	ip, r0, ip
 801d3a4:	700d      	strb	r5, [r1, #0]
 801d3a6:	784d      	ldrb	r5, [r1, #1]
 801d3a8:	fb05 9503 	mla	r5, r5, r3, r9
 801d3ac:	b2ad      	uxth	r5, r5
 801d3ae:	f105 0901 	add.w	r9, r5, #1
 801d3b2:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801d3b6:	122d      	asrs	r5, r5, #8
 801d3b8:	704d      	strb	r5, [r1, #1]
 801d3ba:	788d      	ldrb	r5, [r1, #2]
 801d3bc:	fb05 cc03 	mla	ip, r5, r3, ip
 801d3c0:	fa1f fc8c 	uxth.w	ip, ip
 801d3c4:	f10c 0301 	add.w	r3, ip, #1
 801d3c8:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801d3cc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d3d0:	f881 c002 	strb.w	ip, [r1, #2]
 801d3d4:	4444      	add	r4, r8
 801d3d6:	4431      	add	r1, r6
 801d3d8:	b2a4      	uxth	r4, r4
 801d3da:	2c07      	cmp	r4, #7
 801d3dc:	bf89      	itett	hi
 801d3de:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 801d3e0:	fa42 f208 	asrls.w	r2, r2, r8
 801d3e4:	2400      	movhi	r4, #0
 801d3e6:	785a      	ldrbhi	r2, [r3, #1]
 801d3e8:	bf8a      	itet	hi
 801d3ea:	3301      	addhi	r3, #1
 801d3ec:	b2d2      	uxtbls	r2, r2
 801d3ee:	9326      	strhi	r3, [sp, #152]	; 0x98
 801d3f0:	e7a7      	b.n	801d342 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801d3f2:	441e      	add	r6, r3
 801d3f4:	b236      	sxth	r6, r6
 801d3f6:	e6ed      	b.n	801d1d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801d3f8:	f1b9 0f01 	cmp.w	r9, #1
 801d3fc:	f47f af28 	bne.w	801d250 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d400:	f1bb 0f01 	cmp.w	fp, #1
 801d404:	f47f af24 	bne.w	801d250 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d408:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 801d4e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801d40c:	f8db 0000 	ldr.w	r0, [fp]
 801d410:	6803      	ldr	r3, [r0, #0]
 801d412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d414:	4798      	blx	r3
 801d416:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801d41a:	465a      	mov	r2, fp
 801d41c:	d006      	beq.n	801d42c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801d41e:	f1b8 0f04 	cmp.w	r8, #4
 801d422:	d141      	bne.n	801d4a8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801d424:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d426:	3300      	adds	r3, #0
 801d428:	bf18      	it	ne
 801d42a:	2301      	movne	r3, #1
 801d42c:	0580      	lsls	r0, r0, #22
 801d42e:	d566      	bpl.n	801d4fe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801d430:	f1b8 0f08 	cmp.w	r8, #8
 801d434:	d163      	bne.n	801d4fe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801d436:	2b00      	cmp	r3, #0
 801d438:	bf0c      	ite	eq
 801d43a:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801d43e:	f44f 7180 	movne.w	r1, #256	; 0x100
 801d442:	2f00      	cmp	r7, #0
 801d444:	f47f af04 	bne.w	801d250 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d448:	2c00      	cmp	r4, #0
 801d44a:	f47f af01 	bne.w	801d250 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d44e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d450:	9810      	ldr	r0, [sp, #64]	; 0x40
 801d452:	18f3      	adds	r3, r6, r3
 801d454:	4283      	cmp	r3, r0
 801d456:	f73f aefb 	bgt.w	801d250 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d45a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801d45c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d45e:	4403      	add	r3, r0
 801d460:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801d462:	4283      	cmp	r3, r0
 801d464:	f73f aef4 	bgt.w	801d250 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d468:	f1b8 0f08 	cmp.w	r8, #8
 801d46c:	6810      	ldr	r0, [r2, #0]
 801d46e:	f04f 0600 	mov.w	r6, #0
 801d472:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801d476:	bf18      	it	ne
 801d478:	3501      	addne	r5, #1
 801d47a:	6804      	ldr	r4, [r0, #0]
 801d47c:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801d480:	bf18      	it	ne
 801d482:	f025 0501 	bicne.w	r5, r5, #1
 801d486:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801d48a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d48c:	bf18      	it	ne
 801d48e:	b2ad      	uxthne	r5, r5
 801d490:	9104      	str	r1, [sp, #16]
 801d492:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801d494:	e9cd 5a00 	strd	r5, sl, [sp]
 801d498:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801d49c:	9926      	ldr	r1, [sp, #152]	; 0x98
 801d49e:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801d4a0:	47a0      	blx	r4
 801d4a2:	b017      	add	sp, #92	; 0x5c
 801d4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4a8:	2300      	movs	r3, #0
 801d4aa:	e7bf      	b.n	801d42c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801d4ac:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d4ae:	e724      	b.n	801d2fa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 801d4b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d4b2:	700b      	strb	r3, [r1, #0]
 801d4b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d4b6:	704b      	strb	r3, [r1, #1]
 801d4b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d4ba:	708b      	strb	r3, [r1, #2]
 801d4bc:	e78a      	b.n	801d3d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801d4be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d4c0:	b153      	cbz	r3, 801d4d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801d4c2:	441c      	add	r4, r3
 801d4c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d4c6:	b2a4      	uxth	r4, r4
 801d4c8:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801d4cc:	f004 0407 	and.w	r4, r4, #7
 801d4d0:	781a      	ldrb	r2, [r3, #0]
 801d4d2:	9326      	str	r3, [sp, #152]	; 0x98
 801d4d4:	4122      	asrs	r2, r4
 801d4d6:	b2d2      	uxtb	r2, r2
 801d4d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d4da:	445b      	add	r3, fp
 801d4dc:	9309      	str	r3, [sp, #36]	; 0x24
 801d4de:	e72a      	b.n	801d336 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 801d4e0:	2400eac8 	.word	0x2400eac8
 801d4e4:	2400ead0 	.word	0x2400ead0
 801d4e8:	2400eaca 	.word	0x2400eaca
 801d4ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d4ee:	2b00      	cmp	r3, #0
 801d4f0:	d1d7      	bne.n	801d4a2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801d4f2:	4b06      	ldr	r3, [pc, #24]	; (801d50c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801d4f4:	6818      	ldr	r0, [r3, #0]
 801d4f6:	6803      	ldr	r3, [r0, #0]
 801d4f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d4fa:	4798      	blx	r3
 801d4fc:	e7d1      	b.n	801d4a2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801d4fe:	2b00      	cmp	r3, #0
 801d500:	f43f aea6 	beq.w	801d250 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801d504:	f44f 7180 	mov.w	r1, #256	; 0x100
 801d508:	e79b      	b.n	801d442 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801d50a:	bf00      	nop
 801d50c:	2400ead0 	.word	0x2400ead0

0801d510 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801d510:	b538      	push	{r3, r4, r5, lr}
 801d512:	4c15      	ldr	r4, [pc, #84]	; (801d568 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801d514:	4605      	mov	r5, r0
 801d516:	7823      	ldrb	r3, [r4, #0]
 801d518:	f3bf 8f5b 	dmb	ish
 801d51c:	07da      	lsls	r2, r3, #31
 801d51e:	d40b      	bmi.n	801d538 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801d520:	4620      	mov	r0, r4
 801d522:	f005 fbb2 	bl	8022c8a <__cxa_guard_acquire>
 801d526:	b138      	cbz	r0, 801d538 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801d528:	4620      	mov	r0, r4
 801d52a:	f005 fbba 	bl	8022ca2 <__cxa_guard_release>
 801d52e:	4a0f      	ldr	r2, [pc, #60]	; (801d56c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801d530:	490f      	ldr	r1, [pc, #60]	; (801d570 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801d532:	4810      	ldr	r0, [pc, #64]	; (801d574 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801d534:	f005 fba2 	bl	8022c7c <__aeabi_atexit>
 801d538:	4c0f      	ldr	r4, [pc, #60]	; (801d578 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801d53a:	7823      	ldrb	r3, [r4, #0]
 801d53c:	f3bf 8f5b 	dmb	ish
 801d540:	07db      	lsls	r3, r3, #31
 801d542:	d40b      	bmi.n	801d55c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801d544:	4620      	mov	r0, r4
 801d546:	f005 fba0 	bl	8022c8a <__cxa_guard_acquire>
 801d54a:	b138      	cbz	r0, 801d55c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801d54c:	4620      	mov	r0, r4
 801d54e:	f005 fba8 	bl	8022ca2 <__cxa_guard_release>
 801d552:	4a06      	ldr	r2, [pc, #24]	; (801d56c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801d554:	4909      	ldr	r1, [pc, #36]	; (801d57c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801d556:	480a      	ldr	r0, [pc, #40]	; (801d580 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801d558:	f005 fb90 	bl	8022c7c <__aeabi_atexit>
 801d55c:	4b05      	ldr	r3, [pc, #20]	; (801d574 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801d55e:	612b      	str	r3, [r5, #16]
 801d560:	4b07      	ldr	r3, [pc, #28]	; (801d580 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801d562:	616b      	str	r3, [r5, #20]
 801d564:	bd38      	pop	{r3, r4, r5, pc}
 801d566:	bf00      	nop
 801d568:	2400eba4 	.word	0x2400eba4
 801d56c:	24000000 	.word	0x24000000
 801d570:	0801c0d5 	.word	0x0801c0d5
 801d574:	240000a0 	.word	0x240000a0
 801d578:	2400eba8 	.word	0x2400eba8
 801d57c:	0801c0d3 	.word	0x0801c0d3
 801d580:	240000a4 	.word	0x240000a4

0801d584 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801d584:	b538      	push	{r3, r4, r5, lr}
 801d586:	4c15      	ldr	r4, [pc, #84]	; (801d5dc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801d588:	4605      	mov	r5, r0
 801d58a:	7823      	ldrb	r3, [r4, #0]
 801d58c:	f3bf 8f5b 	dmb	ish
 801d590:	07da      	lsls	r2, r3, #31
 801d592:	d40b      	bmi.n	801d5ac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801d594:	4620      	mov	r0, r4
 801d596:	f005 fb78 	bl	8022c8a <__cxa_guard_acquire>
 801d59a:	b138      	cbz	r0, 801d5ac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801d59c:	4620      	mov	r0, r4
 801d59e:	f005 fb80 	bl	8022ca2 <__cxa_guard_release>
 801d5a2:	4a0f      	ldr	r2, [pc, #60]	; (801d5e0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801d5a4:	490f      	ldr	r1, [pc, #60]	; (801d5e4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801d5a6:	4810      	ldr	r0, [pc, #64]	; (801d5e8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801d5a8:	f005 fb68 	bl	8022c7c <__aeabi_atexit>
 801d5ac:	4c0f      	ldr	r4, [pc, #60]	; (801d5ec <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801d5ae:	7823      	ldrb	r3, [r4, #0]
 801d5b0:	f3bf 8f5b 	dmb	ish
 801d5b4:	07db      	lsls	r3, r3, #31
 801d5b6:	d40b      	bmi.n	801d5d0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801d5b8:	4620      	mov	r0, r4
 801d5ba:	f005 fb66 	bl	8022c8a <__cxa_guard_acquire>
 801d5be:	b138      	cbz	r0, 801d5d0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801d5c0:	4620      	mov	r0, r4
 801d5c2:	f005 fb6e 	bl	8022ca2 <__cxa_guard_release>
 801d5c6:	4a06      	ldr	r2, [pc, #24]	; (801d5e0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801d5c8:	4909      	ldr	r1, [pc, #36]	; (801d5f0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801d5ca:	480a      	ldr	r0, [pc, #40]	; (801d5f4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801d5cc:	f005 fb56 	bl	8022c7c <__aeabi_atexit>
 801d5d0:	4b05      	ldr	r3, [pc, #20]	; (801d5e8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801d5d2:	60ab      	str	r3, [r5, #8]
 801d5d4:	4b07      	ldr	r3, [pc, #28]	; (801d5f4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801d5d6:	60eb      	str	r3, [r5, #12]
 801d5d8:	bd38      	pop	{r3, r4, r5, pc}
 801d5da:	bf00      	nop
 801d5dc:	2400eb84 	.word	0x2400eb84
 801d5e0:	24000000 	.word	0x24000000
 801d5e4:	0801c0d9 	.word	0x0801c0d9
 801d5e8:	24000080 	.word	0x24000080
 801d5ec:	2400eb88 	.word	0x2400eb88
 801d5f0:	0801c0d7 	.word	0x0801c0d7
 801d5f4:	24000084 	.word	0x24000084

0801d5f8 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801d5f8:	b510      	push	{r4, lr}
 801d5fa:	4604      	mov	r4, r0
 801d5fc:	f7ff ff88 	bl	801d510 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801d600:	4620      	mov	r0, r4
 801d602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d606:	f7ff bfbd 	b.w	801d584 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801d60c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801d60c:	b538      	push	{r3, r4, r5, lr}
 801d60e:	4c15      	ldr	r4, [pc, #84]	; (801d664 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801d610:	4605      	mov	r5, r0
 801d612:	7823      	ldrb	r3, [r4, #0]
 801d614:	f3bf 8f5b 	dmb	ish
 801d618:	07da      	lsls	r2, r3, #31
 801d61a:	d40b      	bmi.n	801d634 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801d61c:	4620      	mov	r0, r4
 801d61e:	f005 fb34 	bl	8022c8a <__cxa_guard_acquire>
 801d622:	b138      	cbz	r0, 801d634 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801d624:	4620      	mov	r0, r4
 801d626:	f005 fb3c 	bl	8022ca2 <__cxa_guard_release>
 801d62a:	4a0f      	ldr	r2, [pc, #60]	; (801d668 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801d62c:	490f      	ldr	r1, [pc, #60]	; (801d66c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801d62e:	4810      	ldr	r0, [pc, #64]	; (801d670 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801d630:	f005 fb24 	bl	8022c7c <__aeabi_atexit>
 801d634:	4c0f      	ldr	r4, [pc, #60]	; (801d674 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801d636:	7823      	ldrb	r3, [r4, #0]
 801d638:	f3bf 8f5b 	dmb	ish
 801d63c:	07db      	lsls	r3, r3, #31
 801d63e:	d40b      	bmi.n	801d658 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801d640:	4620      	mov	r0, r4
 801d642:	f005 fb22 	bl	8022c8a <__cxa_guard_acquire>
 801d646:	b138      	cbz	r0, 801d658 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801d648:	4620      	mov	r0, r4
 801d64a:	f005 fb2a 	bl	8022ca2 <__cxa_guard_release>
 801d64e:	4a06      	ldr	r2, [pc, #24]	; (801d668 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801d650:	4909      	ldr	r1, [pc, #36]	; (801d678 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801d652:	480a      	ldr	r0, [pc, #40]	; (801d67c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801d654:	f005 fb12 	bl	8022c7c <__aeabi_atexit>
 801d658:	4b05      	ldr	r3, [pc, #20]	; (801d670 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801d65a:	622b      	str	r3, [r5, #32]
 801d65c:	4b07      	ldr	r3, [pc, #28]	; (801d67c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801d65e:	626b      	str	r3, [r5, #36]	; 0x24
 801d660:	bd38      	pop	{r3, r4, r5, pc}
 801d662:	bf00      	nop
 801d664:	2400ebac 	.word	0x2400ebac
 801d668:	24000000 	.word	0x24000000
 801d66c:	0801c0cd 	.word	0x0801c0cd
 801d670:	240000a8 	.word	0x240000a8
 801d674:	2400ebb0 	.word	0x2400ebb0
 801d678:	0801c0cb 	.word	0x0801c0cb
 801d67c:	240000ac 	.word	0x240000ac

0801d680 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801d680:	b538      	push	{r3, r4, r5, lr}
 801d682:	4c15      	ldr	r4, [pc, #84]	; (801d6d8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801d684:	4605      	mov	r5, r0
 801d686:	7823      	ldrb	r3, [r4, #0]
 801d688:	f3bf 8f5b 	dmb	ish
 801d68c:	07da      	lsls	r2, r3, #31
 801d68e:	d40b      	bmi.n	801d6a8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801d690:	4620      	mov	r0, r4
 801d692:	f005 fafa 	bl	8022c8a <__cxa_guard_acquire>
 801d696:	b138      	cbz	r0, 801d6a8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801d698:	4620      	mov	r0, r4
 801d69a:	f005 fb02 	bl	8022ca2 <__cxa_guard_release>
 801d69e:	4a0f      	ldr	r2, [pc, #60]	; (801d6dc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801d6a0:	490f      	ldr	r1, [pc, #60]	; (801d6e0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801d6a2:	4810      	ldr	r0, [pc, #64]	; (801d6e4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801d6a4:	f005 faea 	bl	8022c7c <__aeabi_atexit>
 801d6a8:	4c0f      	ldr	r4, [pc, #60]	; (801d6e8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801d6aa:	7823      	ldrb	r3, [r4, #0]
 801d6ac:	f3bf 8f5b 	dmb	ish
 801d6b0:	07db      	lsls	r3, r3, #31
 801d6b2:	d40b      	bmi.n	801d6cc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801d6b4:	4620      	mov	r0, r4
 801d6b6:	f005 fae8 	bl	8022c8a <__cxa_guard_acquire>
 801d6ba:	b138      	cbz	r0, 801d6cc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801d6bc:	4620      	mov	r0, r4
 801d6be:	f005 faf0 	bl	8022ca2 <__cxa_guard_release>
 801d6c2:	4a06      	ldr	r2, [pc, #24]	; (801d6dc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801d6c4:	4909      	ldr	r1, [pc, #36]	; (801d6ec <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801d6c6:	480a      	ldr	r0, [pc, #40]	; (801d6f0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801d6c8:	f005 fad8 	bl	8022c7c <__aeabi_atexit>
 801d6cc:	4b05      	ldr	r3, [pc, #20]	; (801d6e4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801d6ce:	61ab      	str	r3, [r5, #24]
 801d6d0:	4b07      	ldr	r3, [pc, #28]	; (801d6f0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801d6d2:	61eb      	str	r3, [r5, #28]
 801d6d4:	bd38      	pop	{r3, r4, r5, pc}
 801d6d6:	bf00      	nop
 801d6d8:	2400eb8c 	.word	0x2400eb8c
 801d6dc:	24000000 	.word	0x24000000
 801d6e0:	0801c0d1 	.word	0x0801c0d1
 801d6e4:	24000088 	.word	0x24000088
 801d6e8:	2400eb90 	.word	0x2400eb90
 801d6ec:	0801c0cf 	.word	0x0801c0cf
 801d6f0:	2400008c 	.word	0x2400008c

0801d6f4 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801d6f4:	b510      	push	{r4, lr}
 801d6f6:	4604      	mov	r4, r0
 801d6f8:	f7ff ff88 	bl	801d60c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801d6fc:	4620      	mov	r0, r4
 801d6fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d702:	f7ff bfbd 	b.w	801d680 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801d708 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801d708:	b538      	push	{r3, r4, r5, lr}
 801d70a:	4c15      	ldr	r4, [pc, #84]	; (801d760 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801d70c:	4605      	mov	r5, r0
 801d70e:	7823      	ldrb	r3, [r4, #0]
 801d710:	f3bf 8f5b 	dmb	ish
 801d714:	07da      	lsls	r2, r3, #31
 801d716:	d40b      	bmi.n	801d730 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801d718:	4620      	mov	r0, r4
 801d71a:	f005 fab6 	bl	8022c8a <__cxa_guard_acquire>
 801d71e:	b138      	cbz	r0, 801d730 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801d720:	4620      	mov	r0, r4
 801d722:	f005 fabe 	bl	8022ca2 <__cxa_guard_release>
 801d726:	4a0f      	ldr	r2, [pc, #60]	; (801d764 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801d728:	490f      	ldr	r1, [pc, #60]	; (801d768 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801d72a:	4810      	ldr	r0, [pc, #64]	; (801d76c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801d72c:	f005 faa6 	bl	8022c7c <__aeabi_atexit>
 801d730:	4c0f      	ldr	r4, [pc, #60]	; (801d770 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801d732:	7823      	ldrb	r3, [r4, #0]
 801d734:	f3bf 8f5b 	dmb	ish
 801d738:	07db      	lsls	r3, r3, #31
 801d73a:	d40b      	bmi.n	801d754 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801d73c:	4620      	mov	r0, r4
 801d73e:	f005 faa4 	bl	8022c8a <__cxa_guard_acquire>
 801d742:	b138      	cbz	r0, 801d754 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801d744:	4620      	mov	r0, r4
 801d746:	f005 faac 	bl	8022ca2 <__cxa_guard_release>
 801d74a:	4a06      	ldr	r2, [pc, #24]	; (801d764 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801d74c:	4909      	ldr	r1, [pc, #36]	; (801d774 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801d74e:	480a      	ldr	r0, [pc, #40]	; (801d778 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801d750:	f005 fa94 	bl	8022c7c <__aeabi_atexit>
 801d754:	4b05      	ldr	r3, [pc, #20]	; (801d76c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801d756:	632b      	str	r3, [r5, #48]	; 0x30
 801d758:	4b07      	ldr	r3, [pc, #28]	; (801d778 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801d75a:	636b      	str	r3, [r5, #52]	; 0x34
 801d75c:	bd38      	pop	{r3, r4, r5, pc}
 801d75e:	bf00      	nop
 801d760:	2400eb94 	.word	0x2400eb94
 801d764:	24000000 	.word	0x24000000
 801d768:	0801c0c5 	.word	0x0801c0c5
 801d76c:	24000090 	.word	0x24000090
 801d770:	2400eb98 	.word	0x2400eb98
 801d774:	0801c0c3 	.word	0x0801c0c3
 801d778:	24000094 	.word	0x24000094

0801d77c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801d77c:	b538      	push	{r3, r4, r5, lr}
 801d77e:	4c15      	ldr	r4, [pc, #84]	; (801d7d4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801d780:	4605      	mov	r5, r0
 801d782:	7823      	ldrb	r3, [r4, #0]
 801d784:	f3bf 8f5b 	dmb	ish
 801d788:	07da      	lsls	r2, r3, #31
 801d78a:	d40b      	bmi.n	801d7a4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801d78c:	4620      	mov	r0, r4
 801d78e:	f005 fa7c 	bl	8022c8a <__cxa_guard_acquire>
 801d792:	b138      	cbz	r0, 801d7a4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801d794:	4620      	mov	r0, r4
 801d796:	f005 fa84 	bl	8022ca2 <__cxa_guard_release>
 801d79a:	4a0f      	ldr	r2, [pc, #60]	; (801d7d8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801d79c:	490f      	ldr	r1, [pc, #60]	; (801d7dc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801d79e:	4810      	ldr	r0, [pc, #64]	; (801d7e0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801d7a0:	f005 fa6c 	bl	8022c7c <__aeabi_atexit>
 801d7a4:	4c0f      	ldr	r4, [pc, #60]	; (801d7e4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801d7a6:	7823      	ldrb	r3, [r4, #0]
 801d7a8:	f3bf 8f5b 	dmb	ish
 801d7ac:	07db      	lsls	r3, r3, #31
 801d7ae:	d40b      	bmi.n	801d7c8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801d7b0:	4620      	mov	r0, r4
 801d7b2:	f005 fa6a 	bl	8022c8a <__cxa_guard_acquire>
 801d7b6:	b138      	cbz	r0, 801d7c8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801d7b8:	4620      	mov	r0, r4
 801d7ba:	f005 fa72 	bl	8022ca2 <__cxa_guard_release>
 801d7be:	4a06      	ldr	r2, [pc, #24]	; (801d7d8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801d7c0:	4909      	ldr	r1, [pc, #36]	; (801d7e8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801d7c2:	480a      	ldr	r0, [pc, #40]	; (801d7ec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801d7c4:	f005 fa5a 	bl	8022c7c <__aeabi_atexit>
 801d7c8:	4b05      	ldr	r3, [pc, #20]	; (801d7e0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801d7ca:	62ab      	str	r3, [r5, #40]	; 0x28
 801d7cc:	4b07      	ldr	r3, [pc, #28]	; (801d7ec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801d7ce:	62eb      	str	r3, [r5, #44]	; 0x2c
 801d7d0:	bd38      	pop	{r3, r4, r5, pc}
 801d7d2:	bf00      	nop
 801d7d4:	2400eb6c 	.word	0x2400eb6c
 801d7d8:	24000000 	.word	0x24000000
 801d7dc:	0801c0c9 	.word	0x0801c0c9
 801d7e0:	24000068 	.word	0x24000068
 801d7e4:	2400eb70 	.word	0x2400eb70
 801d7e8:	0801c0c7 	.word	0x0801c0c7
 801d7ec:	2400006c 	.word	0x2400006c

0801d7f0 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801d7f0:	b510      	push	{r4, lr}
 801d7f2:	4604      	mov	r4, r0
 801d7f4:	f7ff ff88 	bl	801d708 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801d7f8:	4620      	mov	r0, r4
 801d7fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d7fe:	f7ff bfbd 	b.w	801d77c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801d804 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801d804:	b538      	push	{r3, r4, r5, lr}
 801d806:	4c15      	ldr	r4, [pc, #84]	; (801d85c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801d808:	4605      	mov	r5, r0
 801d80a:	7823      	ldrb	r3, [r4, #0]
 801d80c:	f3bf 8f5b 	dmb	ish
 801d810:	07da      	lsls	r2, r3, #31
 801d812:	d40b      	bmi.n	801d82c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801d814:	4620      	mov	r0, r4
 801d816:	f005 fa38 	bl	8022c8a <__cxa_guard_acquire>
 801d81a:	b138      	cbz	r0, 801d82c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801d81c:	4620      	mov	r0, r4
 801d81e:	f005 fa40 	bl	8022ca2 <__cxa_guard_release>
 801d822:	4a0f      	ldr	r2, [pc, #60]	; (801d860 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801d824:	490f      	ldr	r1, [pc, #60]	; (801d864 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801d826:	4810      	ldr	r0, [pc, #64]	; (801d868 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801d828:	f005 fa28 	bl	8022c7c <__aeabi_atexit>
 801d82c:	4c0f      	ldr	r4, [pc, #60]	; (801d86c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801d82e:	7823      	ldrb	r3, [r4, #0]
 801d830:	f3bf 8f5b 	dmb	ish
 801d834:	07db      	lsls	r3, r3, #31
 801d836:	d40b      	bmi.n	801d850 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801d838:	4620      	mov	r0, r4
 801d83a:	f005 fa26 	bl	8022c8a <__cxa_guard_acquire>
 801d83e:	b138      	cbz	r0, 801d850 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801d840:	4620      	mov	r0, r4
 801d842:	f005 fa2e 	bl	8022ca2 <__cxa_guard_release>
 801d846:	4a06      	ldr	r2, [pc, #24]	; (801d860 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801d848:	4909      	ldr	r1, [pc, #36]	; (801d870 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801d84a:	480a      	ldr	r0, [pc, #40]	; (801d874 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801d84c:	f005 fa16 	bl	8022c7c <__aeabi_atexit>
 801d850:	4b05      	ldr	r3, [pc, #20]	; (801d868 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801d852:	642b      	str	r3, [r5, #64]	; 0x40
 801d854:	4b07      	ldr	r3, [pc, #28]	; (801d874 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801d856:	646b      	str	r3, [r5, #68]	; 0x44
 801d858:	bd38      	pop	{r3, r4, r5, pc}
 801d85a:	bf00      	nop
 801d85c:	2400eb9c 	.word	0x2400eb9c
 801d860:	24000000 	.word	0x24000000
 801d864:	0801c0bd 	.word	0x0801c0bd
 801d868:	24000098 	.word	0x24000098
 801d86c:	2400eba0 	.word	0x2400eba0
 801d870:	0801c0bb 	.word	0x0801c0bb
 801d874:	2400009c 	.word	0x2400009c

0801d878 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801d878:	b538      	push	{r3, r4, r5, lr}
 801d87a:	4c15      	ldr	r4, [pc, #84]	; (801d8d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801d87c:	4605      	mov	r5, r0
 801d87e:	7823      	ldrb	r3, [r4, #0]
 801d880:	f3bf 8f5b 	dmb	ish
 801d884:	07da      	lsls	r2, r3, #31
 801d886:	d40b      	bmi.n	801d8a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801d888:	4620      	mov	r0, r4
 801d88a:	f005 f9fe 	bl	8022c8a <__cxa_guard_acquire>
 801d88e:	b138      	cbz	r0, 801d8a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801d890:	4620      	mov	r0, r4
 801d892:	f005 fa06 	bl	8022ca2 <__cxa_guard_release>
 801d896:	4a0f      	ldr	r2, [pc, #60]	; (801d8d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801d898:	490f      	ldr	r1, [pc, #60]	; (801d8d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801d89a:	4810      	ldr	r0, [pc, #64]	; (801d8dc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801d89c:	f005 f9ee 	bl	8022c7c <__aeabi_atexit>
 801d8a0:	4c0f      	ldr	r4, [pc, #60]	; (801d8e0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801d8a2:	7823      	ldrb	r3, [r4, #0]
 801d8a4:	f3bf 8f5b 	dmb	ish
 801d8a8:	07db      	lsls	r3, r3, #31
 801d8aa:	d40b      	bmi.n	801d8c4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801d8ac:	4620      	mov	r0, r4
 801d8ae:	f005 f9ec 	bl	8022c8a <__cxa_guard_acquire>
 801d8b2:	b138      	cbz	r0, 801d8c4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801d8b4:	4620      	mov	r0, r4
 801d8b6:	f005 f9f4 	bl	8022ca2 <__cxa_guard_release>
 801d8ba:	4a06      	ldr	r2, [pc, #24]	; (801d8d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801d8bc:	4909      	ldr	r1, [pc, #36]	; (801d8e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801d8be:	480a      	ldr	r0, [pc, #40]	; (801d8e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801d8c0:	f005 f9dc 	bl	8022c7c <__aeabi_atexit>
 801d8c4:	4b05      	ldr	r3, [pc, #20]	; (801d8dc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801d8c6:	63ab      	str	r3, [r5, #56]	; 0x38
 801d8c8:	4b07      	ldr	r3, [pc, #28]	; (801d8e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801d8ca:	63eb      	str	r3, [r5, #60]	; 0x3c
 801d8cc:	bd38      	pop	{r3, r4, r5, pc}
 801d8ce:	bf00      	nop
 801d8d0:	2400eb7c 	.word	0x2400eb7c
 801d8d4:	24000000 	.word	0x24000000
 801d8d8:	0801c0c1 	.word	0x0801c0c1
 801d8dc:	24000078 	.word	0x24000078
 801d8e0:	2400eb80 	.word	0x2400eb80
 801d8e4:	0801c0bf 	.word	0x0801c0bf
 801d8e8:	2400007c 	.word	0x2400007c

0801d8ec <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801d8ec:	b510      	push	{r4, lr}
 801d8ee:	4604      	mov	r4, r0
 801d8f0:	f7ff ff88 	bl	801d804 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801d8f4:	4620      	mov	r0, r4
 801d8f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d8fa:	f7ff bfbd 	b.w	801d878 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801d900 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801d900:	b538      	push	{r3, r4, r5, lr}
 801d902:	4c15      	ldr	r4, [pc, #84]	; (801d958 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801d904:	4605      	mov	r5, r0
 801d906:	7823      	ldrb	r3, [r4, #0]
 801d908:	f3bf 8f5b 	dmb	ish
 801d90c:	07da      	lsls	r2, r3, #31
 801d90e:	d40b      	bmi.n	801d928 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801d910:	4620      	mov	r0, r4
 801d912:	f005 f9ba 	bl	8022c8a <__cxa_guard_acquire>
 801d916:	b138      	cbz	r0, 801d928 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801d918:	4620      	mov	r0, r4
 801d91a:	f005 f9c2 	bl	8022ca2 <__cxa_guard_release>
 801d91e:	4a0f      	ldr	r2, [pc, #60]	; (801d95c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801d920:	490f      	ldr	r1, [pc, #60]	; (801d960 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801d922:	4810      	ldr	r0, [pc, #64]	; (801d964 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801d924:	f005 f9aa 	bl	8022c7c <__aeabi_atexit>
 801d928:	4c0f      	ldr	r4, [pc, #60]	; (801d968 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801d92a:	7823      	ldrb	r3, [r4, #0]
 801d92c:	f3bf 8f5b 	dmb	ish
 801d930:	07db      	lsls	r3, r3, #31
 801d932:	d40b      	bmi.n	801d94c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801d934:	4620      	mov	r0, r4
 801d936:	f005 f9a8 	bl	8022c8a <__cxa_guard_acquire>
 801d93a:	b138      	cbz	r0, 801d94c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801d93c:	4620      	mov	r0, r4
 801d93e:	f005 f9b0 	bl	8022ca2 <__cxa_guard_release>
 801d942:	4a06      	ldr	r2, [pc, #24]	; (801d95c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801d944:	4909      	ldr	r1, [pc, #36]	; (801d96c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801d946:	480a      	ldr	r0, [pc, #40]	; (801d970 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801d948:	f005 f998 	bl	8022c7c <__aeabi_atexit>
 801d94c:	4b05      	ldr	r3, [pc, #20]	; (801d964 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801d94e:	652b      	str	r3, [r5, #80]	; 0x50
 801d950:	4b07      	ldr	r3, [pc, #28]	; (801d970 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801d952:	656b      	str	r3, [r5, #84]	; 0x54
 801d954:	bd38      	pop	{r3, r4, r5, pc}
 801d956:	bf00      	nop
 801d958:	2400eb74 	.word	0x2400eb74
 801d95c:	24000000 	.word	0x24000000
 801d960:	0801c0b5 	.word	0x0801c0b5
 801d964:	24000070 	.word	0x24000070
 801d968:	2400eb78 	.word	0x2400eb78
 801d96c:	0801c0b3 	.word	0x0801c0b3
 801d970:	24000074 	.word	0x24000074

0801d974 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801d974:	b538      	push	{r3, r4, r5, lr}
 801d976:	4c15      	ldr	r4, [pc, #84]	; (801d9cc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801d978:	4605      	mov	r5, r0
 801d97a:	7823      	ldrb	r3, [r4, #0]
 801d97c:	f3bf 8f5b 	dmb	ish
 801d980:	07da      	lsls	r2, r3, #31
 801d982:	d40b      	bmi.n	801d99c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801d984:	4620      	mov	r0, r4
 801d986:	f005 f980 	bl	8022c8a <__cxa_guard_acquire>
 801d98a:	b138      	cbz	r0, 801d99c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801d98c:	4620      	mov	r0, r4
 801d98e:	f005 f988 	bl	8022ca2 <__cxa_guard_release>
 801d992:	4a0f      	ldr	r2, [pc, #60]	; (801d9d0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801d994:	490f      	ldr	r1, [pc, #60]	; (801d9d4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801d996:	4810      	ldr	r0, [pc, #64]	; (801d9d8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801d998:	f005 f970 	bl	8022c7c <__aeabi_atexit>
 801d99c:	4c0f      	ldr	r4, [pc, #60]	; (801d9dc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801d99e:	7823      	ldrb	r3, [r4, #0]
 801d9a0:	f3bf 8f5b 	dmb	ish
 801d9a4:	07db      	lsls	r3, r3, #31
 801d9a6:	d40b      	bmi.n	801d9c0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801d9a8:	4620      	mov	r0, r4
 801d9aa:	f005 f96e 	bl	8022c8a <__cxa_guard_acquire>
 801d9ae:	b138      	cbz	r0, 801d9c0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801d9b0:	4620      	mov	r0, r4
 801d9b2:	f005 f976 	bl	8022ca2 <__cxa_guard_release>
 801d9b6:	4a06      	ldr	r2, [pc, #24]	; (801d9d0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801d9b8:	4909      	ldr	r1, [pc, #36]	; (801d9e0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801d9ba:	480a      	ldr	r0, [pc, #40]	; (801d9e4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801d9bc:	f005 f95e 	bl	8022c7c <__aeabi_atexit>
 801d9c0:	4b05      	ldr	r3, [pc, #20]	; (801d9d8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801d9c2:	64ab      	str	r3, [r5, #72]	; 0x48
 801d9c4:	4b07      	ldr	r3, [pc, #28]	; (801d9e4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801d9c6:	64eb      	str	r3, [r5, #76]	; 0x4c
 801d9c8:	bd38      	pop	{r3, r4, r5, pc}
 801d9ca:	bf00      	nop
 801d9cc:	2400eb64 	.word	0x2400eb64
 801d9d0:	24000000 	.word	0x24000000
 801d9d4:	0801c0b9 	.word	0x0801c0b9
 801d9d8:	24000060 	.word	0x24000060
 801d9dc:	2400eb68 	.word	0x2400eb68
 801d9e0:	0801c0b7 	.word	0x0801c0b7
 801d9e4:	24000064 	.word	0x24000064

0801d9e8 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801d9e8:	b510      	push	{r4, lr}
 801d9ea:	4604      	mov	r4, r0
 801d9ec:	f7ff ff88 	bl	801d900 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801d9f0:	4620      	mov	r0, r4
 801d9f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d9f6:	f7ff bfbd 	b.w	801d974 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801d9fa <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801d9fa:	b510      	push	{r4, lr}
 801d9fc:	4604      	mov	r4, r0
 801d9fe:	f7ff fff3 	bl	801d9e8 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801da02:	4620      	mov	r0, r4
 801da04:	f7ff ff72 	bl	801d8ec <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801da08:	4620      	mov	r0, r4
 801da0a:	f7ff fe73 	bl	801d6f4 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801da0e:	4620      	mov	r0, r4
 801da10:	f7ff fdf2 	bl	801d5f8 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801da14:	4620      	mov	r0, r4
 801da16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801da1a:	f7ff bee9 	b.w	801d7f0 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>

0801da1e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801da1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da22:	b087      	sub	sp, #28
 801da24:	788d      	ldrb	r5, [r1, #2]
 801da26:	f891 9000 	ldrb.w	r9, [r1]
 801da2a:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801da2e:	9501      	str	r5, [sp, #4]
 801da30:	784d      	ldrb	r5, [r1, #1]
 801da32:	9203      	str	r2, [sp, #12]
 801da34:	9502      	str	r5, [sp, #8]
 801da36:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801da3a:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 801da3e:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 801da42:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 801da46:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 801da4a:	fb06 0708 	mla	r7, r6, r8, r0
 801da4e:	2e00      	cmp	r6, #0
 801da50:	eb02 0a07 	add.w	sl, r2, r7
 801da54:	ea4f 2205 	mov.w	r2, r5, lsl #8
 801da58:	9d01      	ldr	r5, [sp, #4]
 801da5a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801da5e:	ea45 0509 	orr.w	r5, r5, r9
 801da62:	9505      	str	r5, [sp, #20]
 801da64:	f2c0 80b2 	blt.w	801dbcc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801da68:	45b3      	cmp	fp, r6
 801da6a:	f340 80af 	ble.w	801dbcc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801da6e:	2800      	cmp	r0, #0
 801da70:	f2c0 80aa 	blt.w	801dbc8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801da74:	4580      	cmp	r8, r0
 801da76:	f340 80a7 	ble.w	801dbc8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801da7a:	9a03      	ldr	r2, [sp, #12]
 801da7c:	5dd7      	ldrb	r7, [r2, r7]
 801da7e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801da82:	441f      	add	r7, r3
 801da84:	1c42      	adds	r2, r0, #1
 801da86:	f100 80a4 	bmi.w	801dbd2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801da8a:	4590      	cmp	r8, r2
 801da8c:	f340 80a1 	ble.w	801dbd2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801da90:	2c00      	cmp	r4, #0
 801da92:	f000 809e 	beq.w	801dbd2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801da96:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801da9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801da9e:	441d      	add	r5, r3
 801daa0:	3601      	adds	r6, #1
 801daa2:	f100 809a 	bmi.w	801dbda <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801daa6:	45b3      	cmp	fp, r6
 801daa8:	f340 8097 	ble.w	801dbda <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801daac:	f1bc 0f00 	cmp.w	ip, #0
 801dab0:	f000 8093 	beq.w	801dbda <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801dab4:	2800      	cmp	r0, #0
 801dab6:	f2c0 808e 	blt.w	801dbd6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801daba:	4580      	cmp	r8, r0
 801dabc:	f340 808b 	ble.w	801dbd6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801dac0:	f81a 6008 	ldrb.w	r6, [sl, r8]
 801dac4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801dac8:	441e      	add	r6, r3
 801daca:	3001      	adds	r0, #1
 801dacc:	f100 8088 	bmi.w	801dbe0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801dad0:	4580      	cmp	r8, r0
 801dad2:	f340 8085 	ble.w	801dbe0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801dad6:	2c00      	cmp	r4, #0
 801dad8:	f000 8082 	beq.w	801dbe0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801dadc:	44d0      	add	r8, sl
 801dade:	f898 2001 	ldrb.w	r2, [r8, #1]
 801dae2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801dae6:	4413      	add	r3, r2
 801dae8:	b2a4      	uxth	r4, r4
 801daea:	f895 a000 	ldrb.w	sl, [r5]
 801daee:	fa1f fc8c 	uxth.w	ip, ip
 801daf2:	fb04 fb0c 	mul.w	fp, r4, ip
 801daf6:	0124      	lsls	r4, r4, #4
 801daf8:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 801dafc:	f5c4 7880 	rsb	r8, r4, #256	; 0x100
 801db00:	eba4 040b 	sub.w	r4, r4, fp
 801db04:	fa1f f08c 	uxth.w	r0, ip
 801db08:	b2a2      	uxth	r2, r4
 801db0a:	783c      	ldrb	r4, [r7, #0]
 801db0c:	eba8 0800 	sub.w	r8, r8, r0
 801db10:	fa1f fc8e 	uxth.w	ip, lr
 801db14:	fb02 fa0a 	mul.w	sl, r2, sl
 801db18:	ea6f 0e0e 	mvn.w	lr, lr
 801db1c:	fa1f f888 	uxth.w	r8, r8
 801db20:	fa5f fe8e 	uxtb.w	lr, lr
 801db24:	fb08 aa04 	mla	sl, r8, r4, sl
 801db28:	7834      	ldrb	r4, [r6, #0]
 801db2a:	fb19 f90e 	smulbb	r9, r9, lr
 801db2e:	fb00 aa04 	mla	sl, r0, r4, sl
 801db32:	781c      	ldrb	r4, [r3, #0]
 801db34:	fb0b a404 	mla	r4, fp, r4, sl
 801db38:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801db3c:	fb04 990c 	mla	r9, r4, ip, r9
 801db40:	fa1f f989 	uxth.w	r9, r9
 801db44:	f109 0401 	add.w	r4, r9, #1
 801db48:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801db4c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801db50:	f881 9000 	strb.w	r9, [r1]
 801db54:	f895 9001 	ldrb.w	r9, [r5, #1]
 801db58:	787c      	ldrb	r4, [r7, #1]
 801db5a:	fb02 f909 	mul.w	r9, r2, r9
 801db5e:	fb08 9904 	mla	r9, r8, r4, r9
 801db62:	7874      	ldrb	r4, [r6, #1]
 801db64:	fb00 9904 	mla	r9, r0, r4, r9
 801db68:	785c      	ldrb	r4, [r3, #1]
 801db6a:	fb0b 9404 	mla	r4, fp, r4, r9
 801db6e:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801db72:	9c02      	ldr	r4, [sp, #8]
 801db74:	fb14 f90e 	smulbb	r9, r4, lr
 801db78:	fb0a 940c 	mla	r4, sl, ip, r9
 801db7c:	b2a4      	uxth	r4, r4
 801db7e:	f104 0901 	add.w	r9, r4, #1
 801db82:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801db86:	1224      	asrs	r4, r4, #8
 801db88:	704c      	strb	r4, [r1, #1]
 801db8a:	78ad      	ldrb	r5, [r5, #2]
 801db8c:	78bc      	ldrb	r4, [r7, #2]
 801db8e:	436a      	muls	r2, r5
 801db90:	789b      	ldrb	r3, [r3, #2]
 801db92:	fb08 2204 	mla	r2, r8, r4, r2
 801db96:	78b4      	ldrb	r4, [r6, #2]
 801db98:	fb00 2004 	mla	r0, r0, r4, r2
 801db9c:	fb0b 0b03 	mla	fp, fp, r3, r0
 801dba0:	9b01      	ldr	r3, [sp, #4]
 801dba2:	fb13 fe0e 	smulbb	lr, r3, lr
 801dba6:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801dbaa:	fb0b ec0c 	mla	ip, fp, ip, lr
 801dbae:	fa1f fc8c 	uxth.w	ip, ip
 801dbb2:	f10c 0e01 	add.w	lr, ip, #1
 801dbb6:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801dbba:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801dbbe:	f881 c002 	strb.w	ip, [r1, #2]
 801dbc2:	b007      	add	sp, #28
 801dbc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbc8:	af05      	add	r7, sp, #20
 801dbca:	e75b      	b.n	801da84 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 801dbcc:	ad05      	add	r5, sp, #20
 801dbce:	462f      	mov	r7, r5
 801dbd0:	e766      	b.n	801daa0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801dbd2:	ad05      	add	r5, sp, #20
 801dbd4:	e764      	b.n	801daa0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801dbd6:	ae05      	add	r6, sp, #20
 801dbd8:	e777      	b.n	801daca <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801dbda:	ab05      	add	r3, sp, #20
 801dbdc:	461e      	mov	r6, r3
 801dbde:	e783      	b.n	801dae8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801dbe0:	ab05      	add	r3, sp, #20
 801dbe2:	e781      	b.n	801dae8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801dbe4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dbe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbe8:	b093      	sub	sp, #76	; 0x4c
 801dbea:	9210      	str	r2, [sp, #64]	; 0x40
 801dbec:	9309      	str	r3, [sp, #36]	; 0x24
 801dbee:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801dbf0:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801dbf4:	9011      	str	r0, [sp, #68]	; 0x44
 801dbf6:	930e      	str	r3, [sp, #56]	; 0x38
 801dbf8:	6850      	ldr	r0, [r2, #4]
 801dbfa:	910d      	str	r1, [sp, #52]	; 0x34
 801dbfc:	6812      	ldr	r2, [r2, #0]
 801dbfe:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801dc02:	fb00 1303 	mla	r3, r0, r3, r1
 801dc06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dc0a:	18d3      	adds	r3, r2, r3
 801dc0c:	930a      	str	r3, [sp, #40]	; 0x28
 801dc0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801dc10:	681b      	ldr	r3, [r3, #0]
 801dc12:	930c      	str	r3, [sp, #48]	; 0x30
 801dc14:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801dc16:	685c      	ldr	r4, [r3, #4]
 801dc18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dc1a:	3404      	adds	r4, #4
 801dc1c:	43db      	mvns	r3, r3
 801dc1e:	b2db      	uxtb	r3, r3
 801dc20:	930b      	str	r3, [sp, #44]	; 0x2c
 801dc22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dc24:	2b00      	cmp	r3, #0
 801dc26:	dc03      	bgt.n	801dc30 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801dc28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dc2a:	2b00      	cmp	r3, #0
 801dc2c:	f340 8250 	ble.w	801e0d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801dc30:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801dc32:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801dc36:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801dc3a:	1e48      	subs	r0, r1, #1
 801dc3c:	1e55      	subs	r5, r2, #1
 801dc3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dc40:	2b00      	cmp	r3, #0
 801dc42:	f340 80ee 	ble.w	801de22 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801dc46:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801dc48:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801dc4a:	1436      	asrs	r6, r6, #16
 801dc4c:	ea4f 4323 	mov.w	r3, r3, asr #16
 801dc50:	d406      	bmi.n	801dc60 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801dc52:	4286      	cmp	r6, r0
 801dc54:	da04      	bge.n	801dc60 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801dc56:	2b00      	cmp	r3, #0
 801dc58:	db02      	blt.n	801dc60 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801dc5a:	42ab      	cmp	r3, r5
 801dc5c:	f2c0 80e2 	blt.w	801de24 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801dc60:	3601      	adds	r6, #1
 801dc62:	f100 80cf 	bmi.w	801de04 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801dc66:	42b1      	cmp	r1, r6
 801dc68:	f2c0 80cc 	blt.w	801de04 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801dc6c:	3301      	adds	r3, #1
 801dc6e:	f100 80c9 	bmi.w	801de04 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801dc72:	429a      	cmp	r2, r3
 801dc74:	f2c0 80c6 	blt.w	801de04 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801dc78:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 801dc7c:	f1bb 0f00 	cmp.w	fp, #0
 801dc80:	f340 80f1 	ble.w	801de66 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801dc84:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801dc86:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801dc88:	9824      	ldr	r0, [sp, #144]	; 0x90
 801dc8a:	141d      	asrs	r5, r3, #16
 801dc8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801dc8e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801dc92:	68c7      	ldr	r7, [r0, #12]
 801dc94:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801dc96:	1418      	asrs	r0, r3, #16
 801dc98:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801dc9c:	6892      	ldr	r2, [r2, #8]
 801dc9e:	f100 8137 	bmi.w	801df10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801dca2:	f102 3cff 	add.w	ip, r2, #4294967295
 801dca6:	4560      	cmp	r0, ip
 801dca8:	f280 8132 	bge.w	801df10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801dcac:	2d00      	cmp	r5, #0
 801dcae:	f2c0 812f 	blt.w	801df10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801dcb2:	f107 3cff 	add.w	ip, r7, #4294967295
 801dcb6:	4565      	cmp	r5, ip
 801dcb8:	f280 812a 	bge.w	801df10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801dcbc:	b212      	sxth	r2, r2
 801dcbe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801dcc0:	fb05 0002 	mla	r0, r5, r2, r0
 801dcc4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801dcc6:	f817 c000 	ldrb.w	ip, [r7, r0]
 801dcca:	4405      	add	r5, r0
 801dccc:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801dcd0:	eb04 0e0c 	add.w	lr, r4, ip
 801dcd4:	f1b8 0f00 	cmp.w	r8, #0
 801dcd8:	f000 810c 	beq.w	801def4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801dcdc:	786f      	ldrb	r7, [r5, #1]
 801dcde:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801dce2:	4427      	add	r7, r4
 801dce4:	2900      	cmp	r1, #0
 801dce6:	f000 810d 	beq.w	801df04 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801dcea:	18a8      	adds	r0, r5, r2
 801dcec:	5caa      	ldrb	r2, [r5, r2]
 801dcee:	7840      	ldrb	r0, [r0, #1]
 801dcf0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801dcf4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801dcf8:	4422      	add	r2, r4
 801dcfa:	4420      	add	r0, r4
 801dcfc:	fa1f f388 	uxth.w	r3, r8
 801dd00:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801dd04:	b289      	uxth	r1, r1
 801dd06:	f897 c000 	ldrb.w	ip, [r7]
 801dd0a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801dd0e:	fb03 f901 	mul.w	r9, r3, r1
 801dd12:	011b      	lsls	r3, r3, #4
 801dd14:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801dd18:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801dd1c:	eba3 0309 	sub.w	r3, r3, r9
 801dd20:	b289      	uxth	r1, r1
 801dd22:	b29b      	uxth	r3, r3
 801dd24:	eba8 0801 	sub.w	r8, r8, r1
 801dd28:	fb03 fc0c 	mul.w	ip, r3, ip
 801dd2c:	fa1f f888 	uxth.w	r8, r8
 801dd30:	930f      	str	r3, [sp, #60]	; 0x3c
 801dd32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dd34:	fb08 cc0a 	mla	ip, r8, sl, ip
 801dd38:	f892 a000 	ldrb.w	sl, [r2]
 801dd3c:	fb01 cc0a 	mla	ip, r1, sl, ip
 801dd40:	f890 a000 	ldrb.w	sl, [r0]
 801dd44:	fb09 cc0a 	mla	ip, r9, sl, ip
 801dd48:	f896 a000 	ldrb.w	sl, [r6]
 801dd4c:	fb1a fa03 	smulbb	sl, sl, r3
 801dd50:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801dd54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801dd56:	fb0c ac05 	mla	ip, ip, r5, sl
 801dd5a:	fa1f fc8c 	uxth.w	ip, ip
 801dd5e:	f10c 0a01 	add.w	sl, ip, #1
 801dd62:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801dd66:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801dd6a:	f886 a000 	strb.w	sl, [r6]
 801dd6e:	f897 c001 	ldrb.w	ip, [r7, #1]
 801dd72:	f89e a001 	ldrb.w	sl, [lr, #1]
 801dd76:	fb03 fc0c 	mul.w	ip, r3, ip
 801dd7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dd7c:	fb08 cc0a 	mla	ip, r8, sl, ip
 801dd80:	f892 a001 	ldrb.w	sl, [r2, #1]
 801dd84:	fb01 cc0a 	mla	ip, r1, sl, ip
 801dd88:	f890 a001 	ldrb.w	sl, [r0, #1]
 801dd8c:	fb09 cc0a 	mla	ip, r9, sl, ip
 801dd90:	f896 a001 	ldrb.w	sl, [r6, #1]
 801dd94:	fb1a fa03 	smulbb	sl, sl, r3
 801dd98:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801dd9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801dd9e:	fb0c ac05 	mla	ip, ip, r5, sl
 801dda2:	fa1f fc8c 	uxth.w	ip, ip
 801dda6:	f10c 0a01 	add.w	sl, ip, #1
 801ddaa:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801ddae:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ddb2:	f886 c001 	strb.w	ip, [r6, #1]
 801ddb6:	78bf      	ldrb	r7, [r7, #2]
 801ddb8:	f89e c002 	ldrb.w	ip, [lr, #2]
 801ddbc:	437b      	muls	r3, r7
 801ddbe:	fb08 330c 	mla	r3, r8, ip, r3
 801ddc2:	f892 c002 	ldrb.w	ip, [r2, #2]
 801ddc6:	7882      	ldrb	r2, [r0, #2]
 801ddc8:	fb01 310c 	mla	r1, r1, ip, r3
 801ddcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ddce:	fb09 1902 	mla	r9, r9, r2, r1
 801ddd2:	78b1      	ldrb	r1, [r6, #2]
 801ddd4:	fb11 f103 	smulbb	r1, r1, r3
 801ddd8:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801dddc:	fb09 1505 	mla	r5, r9, r5, r1
 801dde0:	b2ad      	uxth	r5, r5
 801dde2:	1c6b      	adds	r3, r5, #1
 801dde4:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801dde8:	122d      	asrs	r5, r5, #8
 801ddea:	70b5      	strb	r5, [r6, #2]
 801ddec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ddee:	3603      	adds	r6, #3
 801ddf0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801ddf2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ddf6:	4413      	add	r3, r2
 801ddf8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801ddfa:	931d      	str	r3, [sp, #116]	; 0x74
 801ddfc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801ddfe:	4413      	add	r3, r2
 801de00:	931e      	str	r3, [sp, #120]	; 0x78
 801de02:	e73b      	b.n	801dc7c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801de04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801de06:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801de08:	4433      	add	r3, r6
 801de0a:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801de0c:	931d      	str	r3, [sp, #116]	; 0x74
 801de0e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801de10:	4433      	add	r3, r6
 801de12:	931e      	str	r3, [sp, #120]	; 0x78
 801de14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de16:	3b01      	subs	r3, #1
 801de18:	9309      	str	r3, [sp, #36]	; 0x24
 801de1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801de1c:	3303      	adds	r3, #3
 801de1e:	930a      	str	r3, [sp, #40]	; 0x28
 801de20:	e70d      	b.n	801dc3e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801de22:	d028      	beq.n	801de76 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801de24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de26:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801de28:	3b01      	subs	r3, #1
 801de2a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801de2c:	fb00 5003 	mla	r0, r0, r3, r5
 801de30:	1400      	asrs	r0, r0, #16
 801de32:	f53f af21 	bmi.w	801dc78 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801de36:	3901      	subs	r1, #1
 801de38:	4288      	cmp	r0, r1
 801de3a:	f6bf af1d 	bge.w	801dc78 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801de3e:	9920      	ldr	r1, [sp, #128]	; 0x80
 801de40:	981e      	ldr	r0, [sp, #120]	; 0x78
 801de42:	fb01 0303 	mla	r3, r1, r3, r0
 801de46:	141b      	asrs	r3, r3, #16
 801de48:	f53f af16 	bmi.w	801dc78 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801de4c:	3a01      	subs	r2, #1
 801de4e:	4293      	cmp	r3, r2
 801de50:	f6bf af12 	bge.w	801dc78 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801de54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801de56:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801de5a:	1cdf      	adds	r7, r3, #3
 801de5c:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801de60:	f1b9 0f00 	cmp.w	r9, #0
 801de64:	dc73      	bgt.n	801df4e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801de66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801de6a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801de6e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801de72:	441a      	add	r2, r3
 801de74:	920a      	str	r2, [sp, #40]	; 0x28
 801de76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801de78:	2b00      	cmp	r3, #0
 801de7a:	f340 8129 	ble.w	801e0d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801de7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801de82:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801de84:	ee30 0a04 	vadd.f32	s0, s0, s8
 801de88:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801de8c:	eef0 6a62 	vmov.f32	s13, s5
 801de90:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801de94:	ee31 1a05 	vadd.f32	s2, s2, s10
 801de98:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801de9c:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 801dea0:	eef0 6a43 	vmov.f32	s13, s6
 801dea4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dea8:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 801deac:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801deb0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801deb4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801deb8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801debc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dec0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dec4:	ee12 2a90 	vmov	r2, s5
 801dec8:	eef0 2a47 	vmov.f32	s5, s14
 801decc:	fb92 f3f3 	sdiv	r3, r2, r3
 801ded0:	ee13 2a10 	vmov	r2, s6
 801ded4:	931f      	str	r3, [sp, #124]	; 0x7c
 801ded6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ded8:	eeb0 3a67 	vmov.f32	s6, s15
 801dedc:	fb92 f3f3 	sdiv	r3, r2, r3
 801dee0:	9320      	str	r3, [sp, #128]	; 0x80
 801dee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dee4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801dee6:	3b01      	subs	r3, #1
 801dee8:	930d      	str	r3, [sp, #52]	; 0x34
 801deea:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801deec:	bf08      	it	eq
 801deee:	4613      	moveq	r3, r2
 801def0:	9309      	str	r3, [sp, #36]	; 0x24
 801def2:	e696      	b.n	801dc22 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801def4:	b149      	cbz	r1, 801df0a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801def6:	5caa      	ldrb	r2, [r5, r2]
 801def8:	4670      	mov	r0, lr
 801defa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801defe:	4422      	add	r2, r4
 801df00:	4677      	mov	r7, lr
 801df02:	e6fb      	b.n	801dcfc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801df04:	4670      	mov	r0, lr
 801df06:	4672      	mov	r2, lr
 801df08:	e6f8      	b.n	801dcfc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801df0a:	4670      	mov	r0, lr
 801df0c:	4672      	mov	r2, lr
 801df0e:	e7f7      	b.n	801df00 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801df10:	f110 0c01 	adds.w	ip, r0, #1
 801df14:	f53f af6a 	bmi.w	801ddec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801df18:	4562      	cmp	r2, ip
 801df1a:	f6ff af67 	blt.w	801ddec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801df1e:	f115 0c01 	adds.w	ip, r5, #1
 801df22:	f53f af63 	bmi.w	801ddec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801df26:	4567      	cmp	r7, ip
 801df28:	f6ff af60 	blt.w	801ddec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801df2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801df2e:	b23f      	sxth	r7, r7
 801df30:	b212      	sxth	r2, r2
 801df32:	9002      	str	r0, [sp, #8]
 801df34:	9701      	str	r7, [sp, #4]
 801df36:	9200      	str	r2, [sp, #0]
 801df38:	9811      	ldr	r0, [sp, #68]	; 0x44
 801df3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801df3c:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801df40:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801df44:	4623      	mov	r3, r4
 801df46:	4631      	mov	r1, r6
 801df48:	f7ff fd69 	bl	801da1e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801df4c:	e74e      	b.n	801ddec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801df4e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801df50:	981e      	ldr	r0, [sp, #120]	; 0x78
 801df52:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801df56:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801df58:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801df5a:	1400      	asrs	r0, r0, #16
 801df5c:	142d      	asrs	r5, r5, #16
 801df5e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801df60:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801df64:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801df68:	fb02 5000 	mla	r0, r2, r0, r5
 801df6c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801df6e:	f815 e000 	ldrb.w	lr, [r5, r0]
 801df72:	eb05 0c00 	add.w	ip, r5, r0
 801df76:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801df7a:	eb04 060e 	add.w	r6, r4, lr
 801df7e:	2b00      	cmp	r3, #0
 801df80:	f000 8097 	beq.w	801e0b2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801df84:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801df88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801df8c:	4425      	add	r5, r4
 801df8e:	2900      	cmp	r1, #0
 801df90:	f000 8098 	beq.w	801e0c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801df94:	eb0c 0002 	add.w	r0, ip, r2
 801df98:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801df9c:	7840      	ldrb	r0, [r0, #1]
 801df9e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801dfa2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801dfa6:	4422      	add	r2, r4
 801dfa8:	4420      	add	r0, r4
 801dfaa:	b29b      	uxth	r3, r3
 801dfac:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801dfb0:	b289      	uxth	r1, r1
 801dfb2:	f895 e000 	ldrb.w	lr, [r5]
 801dfb6:	3703      	adds	r7, #3
 801dfb8:	f109 39ff 	add.w	r9, r9, #4294967295
 801dfbc:	fb03 f801 	mul.w	r8, r3, r1
 801dfc0:	011b      	lsls	r3, r3, #4
 801dfc2:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801dfc6:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801dfca:	eba3 0308 	sub.w	r3, r3, r8
 801dfce:	b289      	uxth	r1, r1
 801dfd0:	b29b      	uxth	r3, r3
 801dfd2:	ebac 0c01 	sub.w	ip, ip, r1
 801dfd6:	fb03 fe0e 	mul.w	lr, r3, lr
 801dfda:	fa1f fc8c 	uxth.w	ip, ip
 801dfde:	930f      	str	r3, [sp, #60]	; 0x3c
 801dfe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dfe2:	fb0c ee0b 	mla	lr, ip, fp, lr
 801dfe6:	f892 b000 	ldrb.w	fp, [r2]
 801dfea:	fb01 ee0b 	mla	lr, r1, fp, lr
 801dfee:	f890 b000 	ldrb.w	fp, [r0]
 801dff2:	fb08 ee0b 	mla	lr, r8, fp, lr
 801dff6:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801dffa:	fb1b fb03 	smulbb	fp, fp, r3
 801dffe:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801e002:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e004:	fb0e be0a 	mla	lr, lr, sl, fp
 801e008:	fa1f fe8e 	uxth.w	lr, lr
 801e00c:	f10e 0b01 	add.w	fp, lr, #1
 801e010:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801e014:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e018:	f807 ec06 	strb.w	lr, [r7, #-6]
 801e01c:	f895 e001 	ldrb.w	lr, [r5, #1]
 801e020:	f896 b001 	ldrb.w	fp, [r6, #1]
 801e024:	fb03 fe0e 	mul.w	lr, r3, lr
 801e028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e02a:	fb0c ee0b 	mla	lr, ip, fp, lr
 801e02e:	f892 b001 	ldrb.w	fp, [r2, #1]
 801e032:	fb01 ee0b 	mla	lr, r1, fp, lr
 801e036:	f890 b001 	ldrb.w	fp, [r0, #1]
 801e03a:	fb08 ee0b 	mla	lr, r8, fp, lr
 801e03e:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801e042:	fb1b fb03 	smulbb	fp, fp, r3
 801e046:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801e04a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e04c:	fb0e be0a 	mla	lr, lr, sl, fp
 801e050:	fa1f fe8e 	uxth.w	lr, lr
 801e054:	f10e 0b01 	add.w	fp, lr, #1
 801e058:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801e05c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e060:	f807 ec05 	strb.w	lr, [r7, #-5]
 801e064:	78ad      	ldrb	r5, [r5, #2]
 801e066:	78b6      	ldrb	r6, [r6, #2]
 801e068:	436b      	muls	r3, r5
 801e06a:	7895      	ldrb	r5, [r2, #2]
 801e06c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e06e:	fb0c 3306 	mla	r3, ip, r6, r3
 801e072:	fb01 3305 	mla	r3, r1, r5, r3
 801e076:	7885      	ldrb	r5, [r0, #2]
 801e078:	fb08 3805 	mla	r8, r8, r5, r3
 801e07c:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801e080:	fb13 f302 	smulbb	r3, r3, r2
 801e084:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801e088:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801e08a:	fb08 380a 	mla	r8, r8, sl, r3
 801e08e:	fa1f f888 	uxth.w	r8, r8
 801e092:	f108 0301 	add.w	r3, r8, #1
 801e096:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801e09a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e09c:	4413      	add	r3, r2
 801e09e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801e0a0:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e0a4:	931d      	str	r3, [sp, #116]	; 0x74
 801e0a6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e0a8:	f807 8c04 	strb.w	r8, [r7, #-4]
 801e0ac:	4413      	add	r3, r2
 801e0ae:	931e      	str	r3, [sp, #120]	; 0x78
 801e0b0:	e6d6      	b.n	801de60 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801e0b2:	b151      	cbz	r1, 801e0ca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801e0b4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801e0b8:	4630      	mov	r0, r6
 801e0ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e0be:	4422      	add	r2, r4
 801e0c0:	4635      	mov	r5, r6
 801e0c2:	e772      	b.n	801dfaa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801e0c4:	4630      	mov	r0, r6
 801e0c6:	4632      	mov	r2, r6
 801e0c8:	e76f      	b.n	801dfaa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801e0ca:	4630      	mov	r0, r6
 801e0cc:	4632      	mov	r2, r6
 801e0ce:	e7f7      	b.n	801e0c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801e0d0:	b013      	add	sp, #76	; 0x4c
 801e0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e0d6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801e0d6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801e0da:	784c      	ldrb	r4, [r1, #1]
 801e0dc:	f891 a002 	ldrb.w	sl, [r1, #2]
 801e0e0:	0224      	lsls	r4, r4, #8
 801e0e2:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801e0e6:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801e0ea:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801e0ee:	f891 a000 	ldrb.w	sl, [r1]
 801e0f2:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 801e0f6:	ea44 040a 	orr.w	r4, r4, sl
 801e0fa:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801e0fe:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	; 0x30
 801e102:	9401      	str	r4, [sp, #4]
 801e104:	fb05 c70e 	mla	r7, r5, lr, ip
 801e108:	2d00      	cmp	r5, #0
 801e10a:	eb02 0807 	add.w	r8, r2, r7
 801e10e:	db72      	blt.n	801e1f6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801e110:	45a9      	cmp	r9, r5
 801e112:	dd70      	ble.n	801e1f6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801e114:	f1bc 0f00 	cmp.w	ip, #0
 801e118:	db6b      	blt.n	801e1f2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801e11a:	45e6      	cmp	lr, ip
 801e11c:	dd69      	ble.n	801e1f2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801e11e:	5dd7      	ldrb	r7, [r2, r7]
 801e120:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e124:	441f      	add	r7, r3
 801e126:	f11c 0201 	adds.w	r2, ip, #1
 801e12a:	d467      	bmi.n	801e1fc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801e12c:	4596      	cmp	lr, r2
 801e12e:	dd65      	ble.n	801e1fc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801e130:	2800      	cmp	r0, #0
 801e132:	d063      	beq.n	801e1fc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801e134:	f898 4001 	ldrb.w	r4, [r8, #1]
 801e138:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e13c:	441c      	add	r4, r3
 801e13e:	3501      	adds	r5, #1
 801e140:	d460      	bmi.n	801e204 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801e142:	45a9      	cmp	r9, r5
 801e144:	dd5e      	ble.n	801e204 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801e146:	2e00      	cmp	r6, #0
 801e148:	d05c      	beq.n	801e204 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801e14a:	f1bc 0f00 	cmp.w	ip, #0
 801e14e:	db57      	blt.n	801e200 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801e150:	45e6      	cmp	lr, ip
 801e152:	dd55      	ble.n	801e200 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801e154:	f818 500e 	ldrb.w	r5, [r8, lr]
 801e158:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e15c:	441d      	add	r5, r3
 801e15e:	f11c 0201 	adds.w	r2, ip, #1
 801e162:	d452      	bmi.n	801e20a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801e164:	4596      	cmp	lr, r2
 801e166:	dd50      	ble.n	801e20a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801e168:	2800      	cmp	r0, #0
 801e16a:	d04e      	beq.n	801e20a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801e16c:	44c6      	add	lr, r8
 801e16e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801e172:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e176:	4413      	add	r3, r2
 801e178:	b280      	uxth	r0, r0
 801e17a:	f897 8000 	ldrb.w	r8, [r7]
 801e17e:	b2b2      	uxth	r2, r6
 801e180:	fb00 f602 	mul.w	r6, r0, r2
 801e184:	0100      	lsls	r0, r0, #4
 801e186:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801e18a:	f5c0 7e80 	rsb	lr, r0, #256	; 0x100
 801e18e:	1b80      	subs	r0, r0, r6
 801e190:	fa1f fc82 	uxth.w	ip, r2
 801e194:	b282      	uxth	r2, r0
 801e196:	7820      	ldrb	r0, [r4, #0]
 801e198:	ebae 0e0c 	sub.w	lr, lr, ip
 801e19c:	4350      	muls	r0, r2
 801e19e:	fa1f fe8e 	uxth.w	lr, lr
 801e1a2:	fb0e 0808 	mla	r8, lr, r8, r0
 801e1a6:	7828      	ldrb	r0, [r5, #0]
 801e1a8:	fb0c 8800 	mla	r8, ip, r0, r8
 801e1ac:	7818      	ldrb	r0, [r3, #0]
 801e1ae:	fb06 8000 	mla	r0, r6, r0, r8
 801e1b2:	1200      	asrs	r0, r0, #8
 801e1b4:	7008      	strb	r0, [r1, #0]
 801e1b6:	7860      	ldrb	r0, [r4, #1]
 801e1b8:	f897 8001 	ldrb.w	r8, [r7, #1]
 801e1bc:	4350      	muls	r0, r2
 801e1be:	fb0e 0808 	mla	r8, lr, r8, r0
 801e1c2:	7868      	ldrb	r0, [r5, #1]
 801e1c4:	fb0c 8800 	mla	r8, ip, r0, r8
 801e1c8:	7858      	ldrb	r0, [r3, #1]
 801e1ca:	fb06 8000 	mla	r0, r6, r0, r8
 801e1ce:	1200      	asrs	r0, r0, #8
 801e1d0:	7048      	strb	r0, [r1, #1]
 801e1d2:	78a0      	ldrb	r0, [r4, #2]
 801e1d4:	78bf      	ldrb	r7, [r7, #2]
 801e1d6:	4350      	muls	r0, r2
 801e1d8:	78aa      	ldrb	r2, [r5, #2]
 801e1da:	fb0e 0007 	mla	r0, lr, r7, r0
 801e1de:	fb0c 0c02 	mla	ip, ip, r2, r0
 801e1e2:	789a      	ldrb	r2, [r3, #2]
 801e1e4:	fb06 c202 	mla	r2, r6, r2, ip
 801e1e8:	1212      	asrs	r2, r2, #8
 801e1ea:	708a      	strb	r2, [r1, #2]
 801e1ec:	b002      	add	sp, #8
 801e1ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e1f2:	af01      	add	r7, sp, #4
 801e1f4:	e797      	b.n	801e126 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801e1f6:	ac01      	add	r4, sp, #4
 801e1f8:	4627      	mov	r7, r4
 801e1fa:	e7a0      	b.n	801e13e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801e1fc:	ac01      	add	r4, sp, #4
 801e1fe:	e79e      	b.n	801e13e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801e200:	ad01      	add	r5, sp, #4
 801e202:	e7ac      	b.n	801e15e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 801e204:	ab01      	add	r3, sp, #4
 801e206:	461d      	mov	r5, r3
 801e208:	e7b6      	b.n	801e178 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801e20a:	ab01      	add	r3, sp, #4
 801e20c:	e7b4      	b.n	801e178 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

0801e20e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e20e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e212:	b08d      	sub	sp, #52	; 0x34
 801e214:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e218:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 801e21c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801e21e:	900b      	str	r0, [sp, #44]	; 0x2c
 801e220:	9306      	str	r3, [sp, #24]
 801e222:	6850      	ldr	r0, [r2, #4]
 801e224:	6812      	ldr	r2, [r2, #0]
 801e226:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801e228:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	; 0x70
 801e22c:	fb00 1303 	mla	r3, r0, r3, r1
 801e230:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e234:	18d3      	adds	r3, r2, r3
 801e236:	9307      	str	r3, [sp, #28]
 801e238:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e23a:	681b      	ldr	r3, [r3, #0]
 801e23c:	9308      	str	r3, [sp, #32]
 801e23e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e240:	685d      	ldr	r5, [r3, #4]
 801e242:	3504      	adds	r5, #4
 801e244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e246:	2b00      	cmp	r3, #0
 801e248:	dc03      	bgt.n	801e252 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801e24a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e24c:	2b00      	cmp	r3, #0
 801e24e:	f340 81e6 	ble.w	801e61e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801e252:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e254:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e258:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e25c:	1e48      	subs	r0, r1, #1
 801e25e:	1e56      	subs	r6, r2, #1
 801e260:	9b06      	ldr	r3, [sp, #24]
 801e262:	2b00      	cmp	r3, #0
 801e264:	f340 80bd 	ble.w	801e3e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801e268:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e26a:	1427      	asrs	r7, r4, #16
 801e26c:	ea4f 4323 	mov.w	r3, r3, asr #16
 801e270:	d406      	bmi.n	801e280 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e272:	4287      	cmp	r7, r0
 801e274:	da04      	bge.n	801e280 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e276:	2b00      	cmp	r3, #0
 801e278:	db02      	blt.n	801e280 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e27a:	42b3      	cmp	r3, r6
 801e27c:	f2c0 80b2 	blt.w	801e3e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801e280:	3701      	adds	r7, #1
 801e282:	f100 80a1 	bmi.w	801e3c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801e286:	42b9      	cmp	r1, r7
 801e288:	f2c0 809e 	blt.w	801e3c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801e28c:	3301      	adds	r3, #1
 801e28e:	f100 809b 	bmi.w	801e3c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801e292:	429a      	cmp	r2, r3
 801e294:	f2c0 8098 	blt.w	801e3c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801e298:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801e29c:	f1bb 0f00 	cmp.w	fp, #0
 801e2a0:	f340 80bf 	ble.w	801e422 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e2a4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e2a6:	981e      	ldr	r0, [sp, #120]	; 0x78
 801e2a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e2aa:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801e2ae:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801e2b2:	1420      	asrs	r0, r4, #16
 801e2b4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801e2b6:	ea4f 4723 	mov.w	r7, r3, asr #16
 801e2ba:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801e2be:	6892      	ldr	r2, [r2, #8]
 801e2c0:	f100 8103 	bmi.w	801e4ca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801e2c4:	f102 3eff 	add.w	lr, r2, #4294967295
 801e2c8:	4570      	cmp	r0, lr
 801e2ca:	f280 80fe 	bge.w	801e4ca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801e2ce:	2f00      	cmp	r7, #0
 801e2d0:	f2c0 80fb 	blt.w	801e4ca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801e2d4:	f10c 3eff 	add.w	lr, ip, #4294967295
 801e2d8:	4577      	cmp	r7, lr
 801e2da:	f280 80f6 	bge.w	801e4ca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801e2de:	b212      	sxth	r2, r2
 801e2e0:	fb07 0002 	mla	r0, r7, r2, r0
 801e2e4:	9f08      	ldr	r7, [sp, #32]
 801e2e6:	f817 8000 	ldrb.w	r8, [r7, r0]
 801e2ea:	eb07 0e00 	add.w	lr, r7, r0
 801e2ee:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e2f2:	eb05 0c08 	add.w	ip, r5, r8
 801e2f6:	2b00      	cmp	r3, #0
 801e2f8:	f000 80d8 	beq.w	801e4ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801e2fc:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801e300:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e304:	442f      	add	r7, r5
 801e306:	2900      	cmp	r1, #0
 801e308:	f000 80d9 	beq.w	801e4be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801e30c:	eb0e 0002 	add.w	r0, lr, r2
 801e310:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801e314:	7840      	ldrb	r0, [r0, #1]
 801e316:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e31a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e31e:	442a      	add	r2, r5
 801e320:	4428      	add	r0, r5
 801e322:	b29b      	uxth	r3, r3
 801e324:	f815 a008 	ldrb.w	sl, [r5, r8]
 801e328:	b289      	uxth	r1, r1
 801e32a:	f897 8000 	ldrb.w	r8, [r7]
 801e32e:	fb03 f901 	mul.w	r9, r3, r1
 801e332:	011b      	lsls	r3, r3, #4
 801e334:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801e338:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801e33c:	eba3 0309 	sub.w	r3, r3, r9
 801e340:	b289      	uxth	r1, r1
 801e342:	b29b      	uxth	r3, r3
 801e344:	ebae 0e01 	sub.w	lr, lr, r1
 801e348:	fb03 f808 	mul.w	r8, r3, r8
 801e34c:	fa1f fe8e 	uxth.w	lr, lr
 801e350:	fb0e 880a 	mla	r8, lr, sl, r8
 801e354:	f892 a000 	ldrb.w	sl, [r2]
 801e358:	fb01 880a 	mla	r8, r1, sl, r8
 801e35c:	f890 a000 	ldrb.w	sl, [r0]
 801e360:	fb09 880a 	mla	r8, r9, sl, r8
 801e364:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e368:	f886 8000 	strb.w	r8, [r6]
 801e36c:	f897 8001 	ldrb.w	r8, [r7, #1]
 801e370:	f89c a001 	ldrb.w	sl, [ip, #1]
 801e374:	fb03 f808 	mul.w	r8, r3, r8
 801e378:	fb0e 880a 	mla	r8, lr, sl, r8
 801e37c:	f892 a001 	ldrb.w	sl, [r2, #1]
 801e380:	fb01 880a 	mla	r8, r1, sl, r8
 801e384:	f890 a001 	ldrb.w	sl, [r0, #1]
 801e388:	fb09 880a 	mla	r8, r9, sl, r8
 801e38c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e390:	f886 8001 	strb.w	r8, [r6, #1]
 801e394:	78bf      	ldrb	r7, [r7, #2]
 801e396:	f89c c002 	ldrb.w	ip, [ip, #2]
 801e39a:	437b      	muls	r3, r7
 801e39c:	7892      	ldrb	r2, [r2, #2]
 801e39e:	fb0e 330c 	mla	r3, lr, ip, r3
 801e3a2:	fb01 3102 	mla	r1, r1, r2, r3
 801e3a6:	7882      	ldrb	r2, [r0, #2]
 801e3a8:	fb09 1902 	mla	r9, r9, r2, r1
 801e3ac:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e3b0:	f886 9002 	strb.w	r9, [r6, #2]
 801e3b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e3b6:	3603      	adds	r6, #3
 801e3b8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801e3ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e3be:	441c      	add	r4, r3
 801e3c0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e3c2:	4413      	add	r3, r2
 801e3c4:	9318      	str	r3, [sp, #96]	; 0x60
 801e3c6:	e769      	b.n	801e29c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801e3c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e3ca:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801e3cc:	441c      	add	r4, r3
 801e3ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e3d0:	443b      	add	r3, r7
 801e3d2:	9318      	str	r3, [sp, #96]	; 0x60
 801e3d4:	9b06      	ldr	r3, [sp, #24]
 801e3d6:	3b01      	subs	r3, #1
 801e3d8:	9306      	str	r3, [sp, #24]
 801e3da:	9b07      	ldr	r3, [sp, #28]
 801e3dc:	3303      	adds	r3, #3
 801e3de:	9307      	str	r3, [sp, #28]
 801e3e0:	e73e      	b.n	801e260 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e3e2:	d026      	beq.n	801e432 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801e3e4:	9b06      	ldr	r3, [sp, #24]
 801e3e6:	9819      	ldr	r0, [sp, #100]	; 0x64
 801e3e8:	3b01      	subs	r3, #1
 801e3ea:	fb00 4003 	mla	r0, r0, r3, r4
 801e3ee:	1400      	asrs	r0, r0, #16
 801e3f0:	f53f af52 	bmi.w	801e298 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801e3f4:	3901      	subs	r1, #1
 801e3f6:	4288      	cmp	r0, r1
 801e3f8:	f6bf af4e 	bge.w	801e298 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801e3fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 801e3fe:	9818      	ldr	r0, [sp, #96]	; 0x60
 801e400:	fb01 0303 	mla	r3, r1, r3, r0
 801e404:	141b      	asrs	r3, r3, #16
 801e406:	f53f af47 	bmi.w	801e298 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801e40a:	3a01      	subs	r2, #1
 801e40c:	4293      	cmp	r3, r2
 801e40e:	f6bf af43 	bge.w	801e298 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801e412:	9b07      	ldr	r3, [sp, #28]
 801e414:	f8dd a018 	ldr.w	sl, [sp, #24]
 801e418:	f103 0803 	add.w	r8, r3, #3
 801e41c:	f1ba 0f00 	cmp.w	sl, #0
 801e420:	dc71      	bgt.n	801e506 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801e422:	9b06      	ldr	r3, [sp, #24]
 801e424:	9a07      	ldr	r2, [sp, #28]
 801e426:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e42a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e42e:	441a      	add	r2, r3
 801e430:	9207      	str	r2, [sp, #28]
 801e432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e434:	2b00      	cmp	r3, #0
 801e436:	f340 80f2 	ble.w	801e61e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801e43a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e43e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e440:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e444:	eeb0 6a62 	vmov.f32	s12, s5
 801e448:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e44c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e450:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e454:	ee16 4a10 	vmov	r4, s12
 801e458:	eeb0 6a43 	vmov.f32	s12, s6
 801e45c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e460:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
 801e464:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e468:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e46c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e470:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e474:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e478:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e47c:	ee12 2a90 	vmov	r2, s5
 801e480:	eef0 2a47 	vmov.f32	s5, s14
 801e484:	fb92 f3f3 	sdiv	r3, r2, r3
 801e488:	ee13 2a10 	vmov	r2, s6
 801e48c:	9319      	str	r3, [sp, #100]	; 0x64
 801e48e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e490:	eeb0 3a67 	vmov.f32	s6, s15
 801e494:	fb92 f3f3 	sdiv	r3, r2, r3
 801e498:	931a      	str	r3, [sp, #104]	; 0x68
 801e49a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e49c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e49e:	3b01      	subs	r3, #1
 801e4a0:	9309      	str	r3, [sp, #36]	; 0x24
 801e4a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e4a4:	bf08      	it	eq
 801e4a6:	4613      	moveq	r3, r2
 801e4a8:	9306      	str	r3, [sp, #24]
 801e4aa:	e6cb      	b.n	801e244 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801e4ac:	b151      	cbz	r1, 801e4c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801e4ae:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801e4b2:	4660      	mov	r0, ip
 801e4b4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e4b8:	442a      	add	r2, r5
 801e4ba:	4667      	mov	r7, ip
 801e4bc:	e731      	b.n	801e322 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801e4be:	4660      	mov	r0, ip
 801e4c0:	4662      	mov	r2, ip
 801e4c2:	e72e      	b.n	801e322 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801e4c4:	4660      	mov	r0, ip
 801e4c6:	4662      	mov	r2, ip
 801e4c8:	e7f7      	b.n	801e4ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801e4ca:	f110 0e01 	adds.w	lr, r0, #1
 801e4ce:	f53f af71 	bmi.w	801e3b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801e4d2:	4572      	cmp	r2, lr
 801e4d4:	f6ff af6e 	blt.w	801e3b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801e4d8:	f117 0e01 	adds.w	lr, r7, #1
 801e4dc:	f53f af6a 	bmi.w	801e3b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801e4e0:	45f4      	cmp	ip, lr
 801e4e2:	f6ff af67 	blt.w	801e3b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801e4e6:	b212      	sxth	r2, r2
 801e4e8:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801e4ec:	fa0f f38c 	sxth.w	r3, ip
 801e4f0:	9200      	str	r2, [sp, #0]
 801e4f2:	4631      	mov	r1, r6
 801e4f4:	9a08      	ldr	r2, [sp, #32]
 801e4f6:	9301      	str	r3, [sp, #4]
 801e4f8:	462b      	mov	r3, r5
 801e4fa:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801e4fe:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e500:	f7ff fde9 	bl	801e0d6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801e504:	e756      	b.n	801e3b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801e506:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e508:	1426      	asrs	r6, r4, #16
 801e50a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801e50c:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801e510:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801e514:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801e516:	1400      	asrs	r0, r0, #16
 801e518:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801e51c:	fb02 6000 	mla	r0, r2, r0, r6
 801e520:	9e08      	ldr	r6, [sp, #32]
 801e522:	f816 e000 	ldrb.w	lr, [r6, r0]
 801e526:	eb06 0c00 	add.w	ip, r6, r0
 801e52a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e52e:	eb05 070e 	add.w	r7, r5, lr
 801e532:	2b00      	cmp	r3, #0
 801e534:	d064      	beq.n	801e600 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801e536:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801e53a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e53e:	442e      	add	r6, r5
 801e540:	2900      	cmp	r1, #0
 801e542:	d066      	beq.n	801e612 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 801e544:	eb0c 0002 	add.w	r0, ip, r2
 801e548:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801e54c:	7840      	ldrb	r0, [r0, #1]
 801e54e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e552:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e556:	442a      	add	r2, r5
 801e558:	4428      	add	r0, r5
 801e55a:	b29b      	uxth	r3, r3
 801e55c:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801e560:	b289      	uxth	r1, r1
 801e562:	f896 e000 	ldrb.w	lr, [r6]
 801e566:	f108 0803 	add.w	r8, r8, #3
 801e56a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e56e:	fb03 f901 	mul.w	r9, r3, r1
 801e572:	011b      	lsls	r3, r3, #4
 801e574:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801e578:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801e57c:	eba3 0309 	sub.w	r3, r3, r9
 801e580:	b289      	uxth	r1, r1
 801e582:	b29b      	uxth	r3, r3
 801e584:	ebac 0c01 	sub.w	ip, ip, r1
 801e588:	fb03 fe0e 	mul.w	lr, r3, lr
 801e58c:	fa1f fc8c 	uxth.w	ip, ip
 801e590:	fb0c ee0b 	mla	lr, ip, fp, lr
 801e594:	f892 b000 	ldrb.w	fp, [r2]
 801e598:	fb01 ee0b 	mla	lr, r1, fp, lr
 801e59c:	f890 b000 	ldrb.w	fp, [r0]
 801e5a0:	fb09 ee0b 	mla	lr, r9, fp, lr
 801e5a4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e5a8:	f808 ec06 	strb.w	lr, [r8, #-6]
 801e5ac:	f896 e001 	ldrb.w	lr, [r6, #1]
 801e5b0:	f897 b001 	ldrb.w	fp, [r7, #1]
 801e5b4:	fb03 fe0e 	mul.w	lr, r3, lr
 801e5b8:	fb0c ee0b 	mla	lr, ip, fp, lr
 801e5bc:	f892 b001 	ldrb.w	fp, [r2, #1]
 801e5c0:	fb01 ee0b 	mla	lr, r1, fp, lr
 801e5c4:	f890 b001 	ldrb.w	fp, [r0, #1]
 801e5c8:	fb09 ee0b 	mla	lr, r9, fp, lr
 801e5cc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e5d0:	f808 ec05 	strb.w	lr, [r8, #-5]
 801e5d4:	78b6      	ldrb	r6, [r6, #2]
 801e5d6:	78bf      	ldrb	r7, [r7, #2]
 801e5d8:	4373      	muls	r3, r6
 801e5da:	7896      	ldrb	r6, [r2, #2]
 801e5dc:	7882      	ldrb	r2, [r0, #2]
 801e5de:	fb0c 3307 	mla	r3, ip, r7, r3
 801e5e2:	fb01 3306 	mla	r3, r1, r6, r3
 801e5e6:	fb09 3902 	mla	r9, r9, r2, r3
 801e5ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e5ec:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801e5ee:	441c      	add	r4, r3
 801e5f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e5f2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e5f6:	4413      	add	r3, r2
 801e5f8:	f808 9c04 	strb.w	r9, [r8, #-4]
 801e5fc:	9318      	str	r3, [sp, #96]	; 0x60
 801e5fe:	e70d      	b.n	801e41c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801e600:	b151      	cbz	r1, 801e618 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801e602:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801e606:	4638      	mov	r0, r7
 801e608:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e60c:	442a      	add	r2, r5
 801e60e:	463e      	mov	r6, r7
 801e610:	e7a3      	b.n	801e55a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801e612:	4638      	mov	r0, r7
 801e614:	463a      	mov	r2, r7
 801e616:	e7a0      	b.n	801e55a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801e618:	4638      	mov	r0, r7
 801e61a:	463a      	mov	r2, r7
 801e61c:	e7f7      	b.n	801e60e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801e61e:	b00d      	add	sp, #52	; 0x34
 801e620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e624 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801e624:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e628:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 801e62c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801e630:	2d00      	cmp	r5, #0
 801e632:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801e636:	fb05 700c 	mla	r0, r5, ip, r7
 801e63a:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801e63e:	f89d e044 	ldrb.w	lr, [sp, #68]	; 0x44
 801e642:	eb02 0800 	add.w	r8, r2, r0
 801e646:	f2c0 8118 	blt.w	801e87a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801e64a:	45a9      	cmp	r9, r5
 801e64c:	f340 8115 	ble.w	801e87a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801e650:	2f00      	cmp	r7, #0
 801e652:	f2c0 8110 	blt.w	801e876 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801e656:	45bc      	cmp	ip, r7
 801e658:	f340 810d 	ble.w	801e876 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801e65c:	5c12      	ldrb	r2, [r2, r0]
 801e65e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801e662:	1c7a      	adds	r2, r7, #1
 801e664:	f100 810c 	bmi.w	801e880 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801e668:	4594      	cmp	ip, r2
 801e66a:	f340 8109 	ble.w	801e880 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801e66e:	2c00      	cmp	r4, #0
 801e670:	f000 8108 	beq.w	801e884 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 801e674:	f898 2001 	ldrb.w	r2, [r8, #1]
 801e678:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801e67c:	3501      	adds	r5, #1
 801e67e:	f100 8105 	bmi.w	801e88c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801e682:	45a9      	cmp	r9, r5
 801e684:	f340 8102 	ble.w	801e88c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801e688:	f1be 0f00 	cmp.w	lr, #0
 801e68c:	f000 8101 	beq.w	801e892 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 801e690:	2f00      	cmp	r7, #0
 801e692:	f2c0 80f9 	blt.w	801e888 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801e696:	45bc      	cmp	ip, r7
 801e698:	f340 80f6 	ble.w	801e888 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801e69c:	f818 200c 	ldrb.w	r2, [r8, ip]
 801e6a0:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801e6a4:	3701      	adds	r7, #1
 801e6a6:	f100 80f7 	bmi.w	801e898 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801e6aa:	45bc      	cmp	ip, r7
 801e6ac:	f340 80f4 	ble.w	801e898 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801e6b0:	2c00      	cmp	r4, #0
 801e6b2:	f000 80f3 	beq.w	801e89c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 801e6b6:	44c4      	add	ip, r8
 801e6b8:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801e6bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801e6c0:	fa1f fc84 	uxth.w	ip, r4
 801e6c4:	fa1f f48e 	uxth.w	r4, lr
 801e6c8:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801e6cc:	fb04 fe0c 	mul.w	lr, r4, ip
 801e6d0:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801e6d4:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801e6d8:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801e6dc:	ebac 070e 	sub.w	r7, ip, lr
 801e6e0:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801e6e4:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801e6e8:	b2a4      	uxth	r4, r4
 801e6ea:	b2bf      	uxth	r7, r7
 801e6ec:	1b1b      	subs	r3, r3, r4
 801e6ee:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801e6f2:	fb07 fc0a 	mul.w	ip, r7, sl
 801e6f6:	b29b      	uxth	r3, r3
 801e6f8:	fb03 cc0b 	mla	ip, r3, fp, ip
 801e6fc:	9300      	str	r3, [sp, #0]
 801e6fe:	fb04 cc09 	mla	ip, r4, r9, ip
 801e702:	fb0e cc08 	mla	ip, lr, r8, ip
 801e706:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801e70a:	9301      	str	r3, [sp, #4]
 801e70c:	2b00      	cmp	r3, #0
 801e70e:	f000 80af 	beq.w	801e870 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 801e712:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801e716:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e71a:	fb0b fc0c 	mul.w	ip, fp, ip
 801e71e:	fb0b f606 	mul.w	r6, fp, r6
 801e722:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801e726:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801e72a:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801e72e:	44dc      	add	ip, fp
 801e730:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 801e734:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e738:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e73c:	fb0a fb0b 	mul.w	fp, sl, fp
 801e740:	fb0a fa00 	mul.w	sl, sl, r0
 801e744:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801e748:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801e74c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801e750:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801e754:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801e758:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e75c:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801e760:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e764:	0a36      	lsrs	r6, r6, #8
 801e766:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e76a:	44dc      	add	ip, fp
 801e76c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801e770:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801e774:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e778:	fb09 fb0b 	mul.w	fp, r9, fp
 801e77c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e780:	fb09 f905 	mul.w	r9, r9, r5
 801e784:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801e788:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e78c:	f509 7580 	add.w	r5, r9, #256	; 0x100
 801e790:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e794:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e798:	fb0c fc07 	mul.w	ip, ip, r7
 801e79c:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801e7a0:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 801e7a4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801e7a8:	4458      	add	r0, fp
 801e7aa:	fb08 f505 	mul.w	r5, r8, r5
 801e7ae:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e7b2:	fb08 f802 	mul.w	r8, r8, r2
 801e7b6:	0a00      	lsrs	r0, r0, #8
 801e7b8:	0a2a      	lsrs	r2, r5, #8
 801e7ba:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801e7be:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e7c2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801e7c6:	4415      	add	r5, r2
 801e7c8:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801e7cc:	0a2d      	lsrs	r5, r5, #8
 801e7ce:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801e7d2:	9a00      	ldr	r2, [sp, #0]
 801e7d4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801e7d8:	fb03 cc02 	mla	ip, r3, r2, ip
 801e7dc:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801e7e0:	9b01      	ldr	r3, [sp, #4]
 801e7e2:	fb05 c50e 	mla	r5, r5, lr, ip
 801e7e6:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801e7ea:	fb00 5004 	mla	r0, r0, r4, r5
 801e7ee:	0a00      	lsrs	r0, r0, #8
 801e7f0:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801e7f4:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 801e7f8:	4378      	muls	r0, r7
 801e7fa:	fb02 0006 	mla	r0, r2, r6, r0
 801e7fe:	fb0e 0e08 	mla	lr, lr, r8, r0
 801e802:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 801e806:	fb04 e000 	mla	r0, r4, r0, lr
 801e80a:	0a00      	lsrs	r0, r0, #8
 801e80c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e810:	4328      	orrs	r0, r5
 801e812:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 801e816:	b2ad      	uxth	r5, r5
 801e818:	b2c4      	uxtb	r4, r0
 801e81a:	436b      	muls	r3, r5
 801e81c:	fb14 f405 	smulbb	r4, r4, r5
 801e820:	1c5a      	adds	r2, r3, #1
 801e822:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801e826:	780b      	ldrb	r3, [r1, #0]
 801e828:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801e82c:	b2d2      	uxtb	r2, r2
 801e82e:	fb03 4302 	mla	r3, r3, r2, r4
 801e832:	b29b      	uxth	r3, r3
 801e834:	1c5c      	adds	r4, r3, #1
 801e836:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801e83a:	784c      	ldrb	r4, [r1, #1]
 801e83c:	fb14 f402 	smulbb	r4, r4, r2
 801e840:	121b      	asrs	r3, r3, #8
 801e842:	700b      	strb	r3, [r1, #0]
 801e844:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801e848:	fb03 4305 	mla	r3, r3, r5, r4
 801e84c:	b29b      	uxth	r3, r3
 801e84e:	1c5c      	adds	r4, r3, #1
 801e850:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801e854:	0c04      	lsrs	r4, r0, #16
 801e856:	7888      	ldrb	r0, [r1, #2]
 801e858:	121b      	asrs	r3, r3, #8
 801e85a:	fb10 f002 	smulbb	r0, r0, r2
 801e85e:	704b      	strb	r3, [r1, #1]
 801e860:	fb04 0005 	mla	r0, r4, r5, r0
 801e864:	b280      	uxth	r0, r0
 801e866:	1c43      	adds	r3, r0, #1
 801e868:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801e86c:	1200      	asrs	r0, r0, #8
 801e86e:	7088      	strb	r0, [r1, #2]
 801e870:	b003      	add	sp, #12
 801e872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e876:	2600      	movs	r6, #0
 801e878:	e6f3      	b.n	801e662 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 801e87a:	2000      	movs	r0, #0
 801e87c:	4606      	mov	r6, r0
 801e87e:	e6fd      	b.n	801e67c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801e880:	2000      	movs	r0, #0
 801e882:	e6fb      	b.n	801e67c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801e884:	4620      	mov	r0, r4
 801e886:	e6f9      	b.n	801e67c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801e888:	2500      	movs	r5, #0
 801e88a:	e70b      	b.n	801e6a4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 801e88c:	2200      	movs	r2, #0
 801e88e:	4615      	mov	r5, r2
 801e890:	e716      	b.n	801e6c0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801e892:	4672      	mov	r2, lr
 801e894:	4675      	mov	r5, lr
 801e896:	e713      	b.n	801e6c0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801e898:	2200      	movs	r2, #0
 801e89a:	e711      	b.n	801e6c0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801e89c:	4622      	mov	r2, r4
 801e89e:	e70f      	b.n	801e6c0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0801e8a0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8a4:	b09f      	sub	sp, #124	; 0x7c
 801e8a6:	921b      	str	r2, [sp, #108]	; 0x6c
 801e8a8:	9309      	str	r3, [sp, #36]	; 0x24
 801e8aa:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801e8ac:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801e8b0:	901d      	str	r0, [sp, #116]	; 0x74
 801e8b2:	931c      	str	r3, [sp, #112]	; 0x70
 801e8b4:	6850      	ldr	r0, [r2, #4]
 801e8b6:	9119      	str	r1, [sp, #100]	; 0x64
 801e8b8:	6812      	ldr	r2, [r2, #0]
 801e8ba:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801e8bc:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801e8c0:	fb00 1303 	mla	r3, r0, r3, r1
 801e8c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e8c8:	18d3      	adds	r3, r2, r3
 801e8ca:	930c      	str	r3, [sp, #48]	; 0x30
 801e8cc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e8ce:	681b      	ldr	r3, [r3, #0]
 801e8d0:	9312      	str	r3, [sp, #72]	; 0x48
 801e8d2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e8d4:	685e      	ldr	r6, [r3, #4]
 801e8d6:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801e8da:	3604      	adds	r6, #4
 801e8dc:	930d      	str	r3, [sp, #52]	; 0x34
 801e8de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e8e0:	2b00      	cmp	r3, #0
 801e8e2:	dc03      	bgt.n	801e8ec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801e8e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801e8e6:	2b00      	cmp	r3, #0
 801e8e8:	f340 8378 	ble.w	801efdc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801e8ec:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e8ee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e8f2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e8f6:	1e48      	subs	r0, r1, #1
 801e8f8:	1e57      	subs	r7, r2, #1
 801e8fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e8fc:	2b00      	cmp	r3, #0
 801e8fe:	f340 818c 	ble.w	801ec1a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801e902:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801e904:	142b      	asrs	r3, r5, #16
 801e906:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801e90a:	d406      	bmi.n	801e91a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e90c:	4584      	cmp	ip, r0
 801e90e:	da04      	bge.n	801e91a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e910:	2b00      	cmp	r3, #0
 801e912:	db02      	blt.n	801e91a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e914:	42bb      	cmp	r3, r7
 801e916:	f2c0 8181 	blt.w	801ec1c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801e91a:	f11c 0c01 	adds.w	ip, ip, #1
 801e91e:	f100 816f 	bmi.w	801ec00 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801e922:	4561      	cmp	r1, ip
 801e924:	f2c0 816c 	blt.w	801ec00 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801e928:	3301      	adds	r3, #1
 801e92a:	f100 8169 	bmi.w	801ec00 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801e92e:	429a      	cmp	r2, r3
 801e930:	f2c0 8166 	blt.w	801ec00 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801e934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e936:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801e938:	931a      	str	r3, [sp, #104]	; 0x68
 801e93a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801e93c:	2b00      	cmp	r3, #0
 801e93e:	f340 818c 	ble.w	801ec5a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801e942:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801e944:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801e948:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801e94c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e950:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e952:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801e956:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801e958:	141b      	asrs	r3, r3, #16
 801e95a:	f100 81d0 	bmi.w	801ecfe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801e95e:	f100 38ff 	add.w	r8, r0, #4294967295
 801e962:	4543      	cmp	r3, r8
 801e964:	f280 81cb 	bge.w	801ecfe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801e968:	f1bc 0f00 	cmp.w	ip, #0
 801e96c:	f2c0 81c7 	blt.w	801ecfe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801e970:	f10e 38ff 	add.w	r8, lr, #4294967295
 801e974:	45c4      	cmp	ip, r8
 801e976:	f280 81c2 	bge.w	801ecfe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801e97a:	b200      	sxth	r0, r0
 801e97c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e97e:	fb0c 3300 	mla	r3, ip, r0, r3
 801e982:	eb04 0803 	add.w	r8, r4, r3
 801e986:	5ce3      	ldrb	r3, [r4, r3]
 801e988:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e98c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801e990:	2a00      	cmp	r2, #0
 801e992:	f000 81a9 	beq.w	801ece8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801e996:	f898 c001 	ldrb.w	ip, [r8, #1]
 801e99a:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801e99e:	940e      	str	r4, [sp, #56]	; 0x38
 801e9a0:	0e24      	lsrs	r4, r4, #24
 801e9a2:	9415      	str	r4, [sp, #84]	; 0x54
 801e9a4:	b179      	cbz	r1, 801e9c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801e9a6:	eb08 0c00 	add.w	ip, r8, r0
 801e9aa:	f818 0000 	ldrb.w	r0, [r8, r0]
 801e9ae:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801e9b2:	900a      	str	r0, [sp, #40]	; 0x28
 801e9b4:	0e00      	lsrs	r0, r0, #24
 801e9b6:	9013      	str	r0, [sp, #76]	; 0x4c
 801e9b8:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801e9bc:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801e9c0:	900f      	str	r0, [sp, #60]	; 0x3c
 801e9c2:	0e00      	lsrs	r0, r0, #24
 801e9c4:	9016      	str	r0, [sp, #88]	; 0x58
 801e9c6:	b292      	uxth	r2, r2
 801e9c8:	9815      	ldr	r0, [sp, #84]	; 0x54
 801e9ca:	b289      	uxth	r1, r1
 801e9cc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e9ce:	fb02 f901 	mul.w	r9, r2, r1
 801e9d2:	0112      	lsls	r2, r2, #4
 801e9d4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801e9d8:	eba2 0809 	sub.w	r8, r2, r9
 801e9dc:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801e9e0:	b289      	uxth	r1, r1
 801e9e2:	fa1f f888 	uxth.w	r8, r8
 801e9e6:	1a52      	subs	r2, r2, r1
 801e9e8:	fb08 f000 	mul.w	r0, r8, r0
 801e9ec:	b292      	uxth	r2, r2
 801e9ee:	fb02 000e 	mla	r0, r2, lr, r0
 801e9f2:	fb01 0004 	mla	r0, r1, r4, r0
 801e9f6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801e9f8:	fb09 0004 	mla	r0, r9, r4, r0
 801e9fc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801ea00:	2800      	cmp	r0, #0
 801ea02:	f000 80f2 	beq.w	801ebea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801ea06:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801ea0a:	d01b      	beq.n	801ea44 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801ea0c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801ea10:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ea14:	fb0e fa0a 	mul.w	sl, lr, sl
 801ea18:	fb0e fe03 	mul.w	lr, lr, r3
 801ea1c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801ea20:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801ea24:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801ea28:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ea2c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801ea30:	4453      	add	r3, sl
 801ea32:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ea36:	0a1b      	lsrs	r3, r3, #8
 801ea38:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ea3c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ea40:	ea43 030c 	orr.w	r3, r3, ip
 801ea44:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ea46:	2cff      	cmp	r4, #255	; 0xff
 801ea48:	d021      	beq.n	801ea8e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801ea4a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ea4c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801ea50:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ea52:	fb04 fb0b 	mul.w	fp, r4, fp
 801ea56:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ea58:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ea5c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ea5e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ea62:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ea66:	fb04 fa0a 	mul.w	sl, r4, sl
 801ea6a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ea6e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801ea72:	44de      	add	lr, fp
 801ea74:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ea78:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ea7c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ea80:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ea84:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ea88:	ea4e 040a 	orr.w	r4, lr, sl
 801ea8c:	940e      	str	r4, [sp, #56]	; 0x38
 801ea8e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ea90:	2cff      	cmp	r4, #255	; 0xff
 801ea92:	d021      	beq.n	801ead8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801ea94:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ea96:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801ea9a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ea9c:	fb04 fb0b 	mul.w	fp, r4, fp
 801eaa0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801eaa2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801eaa6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801eaa8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801eaac:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801eab0:	fb04 fa0a 	mul.w	sl, r4, sl
 801eab4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801eab8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801eabc:	44de      	add	lr, fp
 801eabe:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801eac2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801eac6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801eaca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801eace:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ead2:	ea4e 040a 	orr.w	r4, lr, sl
 801ead6:	940a      	str	r4, [sp, #40]	; 0x28
 801ead8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801eada:	2cff      	cmp	r4, #255	; 0xff
 801eadc:	d021      	beq.n	801eb22 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801eade:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801eae0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801eae4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801eae6:	fb04 fb0b 	mul.w	fp, r4, fp
 801eaea:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801eaec:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801eaf0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801eaf2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801eaf6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801eafa:	fb04 fa0a 	mul.w	sl, r4, sl
 801eafe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801eb02:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801eb06:	44de      	add	lr, fp
 801eb08:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801eb0c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801eb10:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801eb14:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801eb18:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801eb1c:	ea4e 040a 	orr.w	r4, lr, sl
 801eb20:	940f      	str	r4, [sp, #60]	; 0x3c
 801eb22:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801eb24:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801eb28:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801eb2c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801eb30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801eb32:	fb08 fc0c 	mul.w	ip, r8, ip
 801eb36:	fb02 cc0e 	mla	ip, r2, lr, ip
 801eb3a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801eb3e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801eb40:	fb01 cc0e 	mla	ip, r1, lr, ip
 801eb44:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801eb48:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801eb4a:	fb09 cc0e 	mla	ip, r9, lr, ip
 801eb4e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801eb52:	fb08 f80e 	mul.w	r8, r8, lr
 801eb56:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eb5a:	fb02 8303 	mla	r3, r2, r3, r8
 801eb5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801eb60:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801eb64:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801eb68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801eb6a:	fb01 330a 	mla	r3, r1, sl, r3
 801eb6e:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801eb72:	fb09 3901 	mla	r9, r9, r1, r3
 801eb76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801eb78:	990d      	ldr	r1, [sp, #52]	; 0x34
 801eb7a:	4343      	muls	r3, r0
 801eb7c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801eb80:	1c58      	adds	r0, r3, #1
 801eb82:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801eb86:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801eb8a:	ea4c 0c09 	orr.w	ip, ip, r9
 801eb8e:	783b      	ldrb	r3, [r7, #0]
 801eb90:	fa5f f28c 	uxtb.w	r2, ip
 801eb94:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801eb98:	fb12 f201 	smulbb	r2, r2, r1
 801eb9c:	b2c0      	uxtb	r0, r0
 801eb9e:	fb03 2300 	mla	r3, r3, r0, r2
 801eba2:	b29b      	uxth	r3, r3
 801eba4:	1c5a      	adds	r2, r3, #1
 801eba6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ebaa:	787a      	ldrb	r2, [r7, #1]
 801ebac:	fb12 f200 	smulbb	r2, r2, r0
 801ebb0:	121b      	asrs	r3, r3, #8
 801ebb2:	703b      	strb	r3, [r7, #0]
 801ebb4:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801ebb8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801ebbc:	fb03 2301 	mla	r3, r3, r1, r2
 801ebc0:	b29b      	uxth	r3, r3
 801ebc2:	1c5a      	adds	r2, r3, #1
 801ebc4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ebc8:	121b      	asrs	r3, r3, #8
 801ebca:	707b      	strb	r3, [r7, #1]
 801ebcc:	78bb      	ldrb	r3, [r7, #2]
 801ebce:	fb13 f000 	smulbb	r0, r3, r0
 801ebd2:	fb0c 0c01 	mla	ip, ip, r1, r0
 801ebd6:	fa1f fc8c 	uxth.w	ip, ip
 801ebda:	f10c 0301 	add.w	r3, ip, #1
 801ebde:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801ebe2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ebe6:	f887 c002 	strb.w	ip, [r7, #2]
 801ebea:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801ebec:	3703      	adds	r7, #3
 801ebee:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ebf0:	441a      	add	r2, r3
 801ebf2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ebf4:	441d      	add	r5, r3
 801ebf6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801ebf8:	9229      	str	r2, [sp, #164]	; 0xa4
 801ebfa:	3b01      	subs	r3, #1
 801ebfc:	931a      	str	r3, [sp, #104]	; 0x68
 801ebfe:	e69c      	b.n	801e93a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801ec00:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801ec02:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801ec04:	441c      	add	r4, r3
 801ec06:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ec08:	441d      	add	r5, r3
 801ec0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ec0c:	9429      	str	r4, [sp, #164]	; 0xa4
 801ec0e:	3b01      	subs	r3, #1
 801ec10:	9309      	str	r3, [sp, #36]	; 0x24
 801ec12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ec14:	3303      	adds	r3, #3
 801ec16:	930c      	str	r3, [sp, #48]	; 0x30
 801ec18:	e66f      	b.n	801e8fa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801ec1a:	d026      	beq.n	801ec6a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801ec1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ec1e:	982b      	ldr	r0, [sp, #172]	; 0xac
 801ec20:	3b01      	subs	r3, #1
 801ec22:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801ec24:	fb00 4003 	mla	r0, r0, r3, r4
 801ec28:	1400      	asrs	r0, r0, #16
 801ec2a:	f53f ae83 	bmi.w	801e934 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801ec2e:	3901      	subs	r1, #1
 801ec30:	4288      	cmp	r0, r1
 801ec32:	f6bf ae7f 	bge.w	801e934 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801ec36:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801ec38:	fb01 5303 	mla	r3, r1, r3, r5
 801ec3c:	141b      	asrs	r3, r3, #16
 801ec3e:	f53f ae79 	bmi.w	801e934 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801ec42:	3a01      	subs	r2, #1
 801ec44:	4293      	cmp	r3, r2
 801ec46:	f6bf ae75 	bge.w	801e934 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801ec4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ec4c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801ec50:	f103 0e03 	add.w	lr, r3, #3
 801ec54:	f1bb 0f00 	cmp.w	fp, #0
 801ec58:	dc71      	bgt.n	801ed3e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801ec5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ec5c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ec60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ec62:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ec66:	4423      	add	r3, r4
 801ec68:	930c      	str	r3, [sp, #48]	; 0x30
 801ec6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ec6c:	2b00      	cmp	r3, #0
 801ec6e:	f340 81b5 	ble.w	801efdc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801ec72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ec76:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ec78:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ec7c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ec80:	eef0 6a62 	vmov.f32	s13, s5
 801ec84:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ec88:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ec8c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ec90:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801ec94:	eef0 6a43 	vmov.f32	s13, s6
 801ec98:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ec9c:	ee16 5a90 	vmov	r5, s13
 801eca0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eca4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eca8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ecac:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ecb0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ecb4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ecb8:	ee12 2a90 	vmov	r2, s5
 801ecbc:	eef0 2a47 	vmov.f32	s5, s14
 801ecc0:	fb92 f3f3 	sdiv	r3, r2, r3
 801ecc4:	ee13 2a10 	vmov	r2, s6
 801ecc8:	932b      	str	r3, [sp, #172]	; 0xac
 801ecca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801eccc:	eeb0 3a67 	vmov.f32	s6, s15
 801ecd0:	fb92 f3f3 	sdiv	r3, r2, r3
 801ecd4:	932c      	str	r3, [sp, #176]	; 0xb0
 801ecd6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ecd8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801ecda:	3b01      	subs	r3, #1
 801ecdc:	9319      	str	r3, [sp, #100]	; 0x64
 801ecde:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ece0:	bf08      	it	eq
 801ece2:	4613      	moveq	r3, r2
 801ece4:	9309      	str	r3, [sp, #36]	; 0x24
 801ece6:	e5fa      	b.n	801e8de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801ece8:	2900      	cmp	r1, #0
 801ecea:	f43f ae6c 	beq.w	801e9c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801ecee:	f818 0000 	ldrb.w	r0, [r8, r0]
 801ecf2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801ecf6:	900a      	str	r0, [sp, #40]	; 0x28
 801ecf8:	0e00      	lsrs	r0, r0, #24
 801ecfa:	9013      	str	r0, [sp, #76]	; 0x4c
 801ecfc:	e663      	b.n	801e9c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801ecfe:	f113 0801 	adds.w	r8, r3, #1
 801ed02:	f53f af72 	bmi.w	801ebea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801ed06:	4540      	cmp	r0, r8
 801ed08:	f6ff af6f 	blt.w	801ebea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801ed0c:	f11c 0801 	adds.w	r8, ip, #1
 801ed10:	f53f af6b 	bmi.w	801ebea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801ed14:	45c6      	cmp	lr, r8
 801ed16:	f6ff af68 	blt.w	801ebea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801ed1a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801ed1c:	b200      	sxth	r0, r0
 801ed1e:	9302      	str	r3, [sp, #8]
 801ed20:	fa0f f38e 	sxth.w	r3, lr
 801ed24:	9000      	str	r0, [sp, #0]
 801ed26:	9301      	str	r3, [sp, #4]
 801ed28:	4633      	mov	r3, r6
 801ed2a:	981d      	ldr	r0, [sp, #116]	; 0x74
 801ed2c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801ed30:	e9cd c203 	strd	ip, r2, [sp, #12]
 801ed34:	4639      	mov	r1, r7
 801ed36:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ed38:	f7ff fc74 	bl	801e624 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801ed3c:	e755      	b.n	801ebea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801ed3e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ed40:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801ed44:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801ed46:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801ed4a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ed4c:	1427      	asrs	r7, r4, #16
 801ed4e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ed50:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ed54:	142b      	asrs	r3, r5, #16
 801ed56:	fb01 7303 	mla	r3, r1, r3, r7
 801ed5a:	18e7      	adds	r7, r4, r3
 801ed5c:	5ce3      	ldrb	r3, [r4, r3]
 801ed5e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ed62:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801ed66:	2a00      	cmp	r2, #0
 801ed68:	f000 812e 	beq.w	801efc8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 801ed6c:	f897 8001 	ldrb.w	r8, [r7, #1]
 801ed70:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801ed74:	9410      	str	r4, [sp, #64]	; 0x40
 801ed76:	0e24      	lsrs	r4, r4, #24
 801ed78:	9417      	str	r4, [sp, #92]	; 0x5c
 801ed7a:	b170      	cbz	r0, 801ed9a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801ed7c:	eb07 0801 	add.w	r8, r7, r1
 801ed80:	5c79      	ldrb	r1, [r7, r1]
 801ed82:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ed86:	910b      	str	r1, [sp, #44]	; 0x2c
 801ed88:	0e09      	lsrs	r1, r1, #24
 801ed8a:	9114      	str	r1, [sp, #80]	; 0x50
 801ed8c:	f898 1001 	ldrb.w	r1, [r8, #1]
 801ed90:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ed94:	9111      	str	r1, [sp, #68]	; 0x44
 801ed96:	0e09      	lsrs	r1, r1, #24
 801ed98:	9118      	str	r1, [sp, #96]	; 0x60
 801ed9a:	b292      	uxth	r2, r2
 801ed9c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801ed9e:	b280      	uxth	r0, r0
 801eda0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801eda2:	fb02 f900 	mul.w	r9, r2, r0
 801eda6:	0112      	lsls	r2, r2, #4
 801eda8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801edac:	eba2 0809 	sub.w	r8, r2, r9
 801edb0:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801edb4:	b280      	uxth	r0, r0
 801edb6:	fa1f f888 	uxth.w	r8, r8
 801edba:	1a12      	subs	r2, r2, r0
 801edbc:	fb08 f101 	mul.w	r1, r8, r1
 801edc0:	b292      	uxth	r2, r2
 801edc2:	fb02 110c 	mla	r1, r2, ip, r1
 801edc6:	fb00 1104 	mla	r1, r0, r4, r1
 801edca:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801edcc:	fb09 1104 	mla	r1, r9, r4, r1
 801edd0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801edd4:	2900      	cmp	r1, #0
 801edd6:	f000 80ec 	beq.w	801efb2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801edda:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801edde:	d019      	beq.n	801ee14 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 801ede0:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801ede4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ede8:	fb0c fa0a 	mul.w	sl, ip, sl
 801edec:	fb0c fc03 	mul.w	ip, ip, r3
 801edf0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801edf4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801edf8:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801edfc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ee00:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801ee04:	4453      	add	r3, sl
 801ee06:	0a3f      	lsrs	r7, r7, #8
 801ee08:	0a1b      	lsrs	r3, r3, #8
 801ee0a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801ee0e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ee12:	433b      	orrs	r3, r7
 801ee14:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801ee16:	2cff      	cmp	r4, #255	; 0xff
 801ee18:	d020      	beq.n	801ee5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 801ee1a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ee1c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ee20:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801ee22:	4367      	muls	r7, r4
 801ee24:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ee26:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ee2a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ee2e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801ee30:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ee34:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ee38:	fb04 fa0a 	mul.w	sl, r4, sl
 801ee3c:	44bc      	add	ip, r7
 801ee3e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ee42:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ee46:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ee4a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ee4e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ee52:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ee56:	ea4c 040a 	orr.w	r4, ip, sl
 801ee5a:	9410      	str	r4, [sp, #64]	; 0x40
 801ee5c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ee5e:	2cff      	cmp	r4, #255	; 0xff
 801ee60:	d020      	beq.n	801eea4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 801ee62:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ee64:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ee68:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ee6a:	4367      	muls	r7, r4
 801ee6c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ee6e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ee72:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ee76:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ee78:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ee7c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ee80:	fb04 fa0a 	mul.w	sl, r4, sl
 801ee84:	44bc      	add	ip, r7
 801ee86:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ee8a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ee8e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ee92:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ee96:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ee9a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ee9e:	ea4c 040a 	orr.w	r4, ip, sl
 801eea2:	940b      	str	r4, [sp, #44]	; 0x2c
 801eea4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801eea6:	2cff      	cmp	r4, #255	; 0xff
 801eea8:	d020      	beq.n	801eeec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801eeaa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801eeac:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801eeb0:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801eeb2:	4367      	muls	r7, r4
 801eeb4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801eeb6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801eeba:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801eebe:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801eec0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801eec4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801eec8:	fb04 fa0a 	mul.w	sl, r4, sl
 801eecc:	44bc      	add	ip, r7
 801eece:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801eed2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eed6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801eeda:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801eede:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801eee2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801eee6:	ea4c 040a 	orr.w	r4, ip, sl
 801eeea:	9411      	str	r4, [sp, #68]	; 0x44
 801eeec:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801eeee:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801eef2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801eef6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801eefa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801eefc:	fb08 f707 	mul.w	r7, r8, r7
 801ef00:	fb02 770c 	mla	r7, r2, ip, r7
 801ef04:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ef08:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ef0a:	fb00 770c 	mla	r7, r0, ip, r7
 801ef0e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ef12:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ef14:	fb09 770c 	mla	r7, r9, ip, r7
 801ef18:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801ef1c:	fb08 f80c 	mul.w	r8, r8, ip
 801ef20:	0a3f      	lsrs	r7, r7, #8
 801ef22:	fb02 8303 	mla	r3, r2, r3, r8
 801ef26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ef28:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801ef2c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801ef30:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ef32:	fb00 330a 	mla	r3, r0, sl, r3
 801ef36:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801ef3a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ef3c:	fb09 3c0c 	mla	ip, r9, ip, r3
 801ef40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ef42:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ef46:	434b      	muls	r3, r1
 801ef48:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ef4c:	1c59      	adds	r1, r3, #1
 801ef4e:	ea47 070c 	orr.w	r7, r7, ip
 801ef52:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801ef56:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801ef5a:	b2fa      	uxtb	r2, r7
 801ef5c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801ef60:	fb12 f200 	smulbb	r2, r2, r0
 801ef64:	b2c9      	uxtb	r1, r1
 801ef66:	fb03 2301 	mla	r3, r3, r1, r2
 801ef6a:	b29b      	uxth	r3, r3
 801ef6c:	1c5a      	adds	r2, r3, #1
 801ef6e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ef72:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801ef76:	fb12 f201 	smulbb	r2, r2, r1
 801ef7a:	121b      	asrs	r3, r3, #8
 801ef7c:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801ef80:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801ef84:	0c3f      	lsrs	r7, r7, #16
 801ef86:	fb03 2300 	mla	r3, r3, r0, r2
 801ef8a:	b29b      	uxth	r3, r3
 801ef8c:	1c5a      	adds	r2, r3, #1
 801ef8e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ef92:	121b      	asrs	r3, r3, #8
 801ef94:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801ef98:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801ef9c:	fb13 f101 	smulbb	r1, r3, r1
 801efa0:	fb07 1700 	mla	r7, r7, r0, r1
 801efa4:	b2bf      	uxth	r7, r7
 801efa6:	1c7b      	adds	r3, r7, #1
 801efa8:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801efac:	123f      	asrs	r7, r7, #8
 801efae:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801efb2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801efb4:	f10e 0e03 	add.w	lr, lr, #3
 801efb8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801efba:	f10b 3bff 	add.w	fp, fp, #4294967295
 801efbe:	441a      	add	r2, r3
 801efc0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801efc2:	9229      	str	r2, [sp, #164]	; 0xa4
 801efc4:	441d      	add	r5, r3
 801efc6:	e645      	b.n	801ec54 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801efc8:	2800      	cmp	r0, #0
 801efca:	f43f aee6 	beq.w	801ed9a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801efce:	5c79      	ldrb	r1, [r7, r1]
 801efd0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801efd4:	910b      	str	r1, [sp, #44]	; 0x2c
 801efd6:	0e09      	lsrs	r1, r1, #24
 801efd8:	9114      	str	r1, [sp, #80]	; 0x50
 801efda:	e6de      	b.n	801ed9a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801efdc:	b01f      	add	sp, #124	; 0x7c
 801efde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801efe2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801efe2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efe6:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 801efea:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801efee:	2d00      	cmp	r5, #0
 801eff0:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801eff4:	fb05 700e 	mla	r0, r5, lr, r7
 801eff8:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801effc:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 801f000:	eb02 0800 	add.w	r8, r2, r0
 801f004:	f2c0 8105 	blt.w	801f212 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801f008:	45a9      	cmp	r9, r5
 801f00a:	f340 8102 	ble.w	801f212 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801f00e:	2f00      	cmp	r7, #0
 801f010:	f2c0 80fd 	blt.w	801f20e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801f014:	45be      	cmp	lr, r7
 801f016:	f340 80fa 	ble.w	801f20e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801f01a:	5c12      	ldrb	r2, [r2, r0]
 801f01c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801f020:	1c7a      	adds	r2, r7, #1
 801f022:	f100 80f9 	bmi.w	801f218 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801f026:	4596      	cmp	lr, r2
 801f028:	f340 80f6 	ble.w	801f218 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801f02c:	2c00      	cmp	r4, #0
 801f02e:	f000 80f5 	beq.w	801f21c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 801f032:	f898 2001 	ldrb.w	r2, [r8, #1]
 801f036:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801f03a:	3501      	adds	r5, #1
 801f03c:	f100 80f2 	bmi.w	801f224 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801f040:	45a9      	cmp	r9, r5
 801f042:	f340 80ef 	ble.w	801f224 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801f046:	f1bc 0f00 	cmp.w	ip, #0
 801f04a:	f000 80ee 	beq.w	801f22a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 801f04e:	2f00      	cmp	r7, #0
 801f050:	f2c0 80e6 	blt.w	801f220 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801f054:	45be      	cmp	lr, r7
 801f056:	f340 80e3 	ble.w	801f220 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801f05a:	f818 200e 	ldrb.w	r2, [r8, lr]
 801f05e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801f062:	3701      	adds	r7, #1
 801f064:	f100 80e4 	bmi.w	801f230 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801f068:	45be      	cmp	lr, r7
 801f06a:	f340 80e1 	ble.w	801f230 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801f06e:	2c00      	cmp	r4, #0
 801f070:	f000 80e0 	beq.w	801f234 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 801f074:	44c6      	add	lr, r8
 801f076:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801f07a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801f07e:	b2a3      	uxth	r3, r4
 801f080:	fa1f fc8c 	uxth.w	ip, ip
 801f084:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801f088:	fb0c fe03 	mul.w	lr, ip, r3
 801f08c:	011b      	lsls	r3, r3, #4
 801f08e:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801f092:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 801f096:	eba3 070e 	sub.w	r7, r3, lr
 801f09a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801f09e:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801f0a2:	fa1f f48c 	uxth.w	r4, ip
 801f0a6:	b2bf      	uxth	r7, r7
 801f0a8:	1b1b      	subs	r3, r3, r4
 801f0aa:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801f0ae:	fb07 fc0a 	mul.w	ip, r7, sl
 801f0b2:	b29b      	uxth	r3, r3
 801f0b4:	fb03 cc0b 	mla	ip, r3, fp, ip
 801f0b8:	9300      	str	r3, [sp, #0]
 801f0ba:	fb04 cc09 	mla	ip, r4, r9, ip
 801f0be:	fb0e cc08 	mla	ip, lr, r8, ip
 801f0c2:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801f0c6:	9301      	str	r3, [sp, #4]
 801f0c8:	2b00      	cmp	r3, #0
 801f0ca:	f000 809d 	beq.w	801f208 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 801f0ce:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801f0d2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f0d6:	fb0b fc0c 	mul.w	ip, fp, ip
 801f0da:	fb0b f606 	mul.w	r6, fp, r6
 801f0de:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801f0e2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f0e6:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801f0ea:	44dc      	add	ip, fp
 801f0ec:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 801f0f0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f0f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f0f8:	fb0a fb0b 	mul.w	fp, sl, fp
 801f0fc:	fb0a fa00 	mul.w	sl, sl, r0
 801f100:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801f104:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801f108:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801f10c:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801f110:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801f114:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f118:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801f11c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f120:	0a36      	lsrs	r6, r6, #8
 801f122:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f126:	44dc      	add	ip, fp
 801f128:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801f12c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f130:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f134:	fb09 fb0b 	mul.w	fp, r9, fp
 801f138:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f13c:	fb09 f905 	mul.w	r9, r9, r5
 801f140:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801f144:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f148:	f509 7580 	add.w	r5, r9, #256	; 0x100
 801f14c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f150:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f154:	fb0c fc07 	mul.w	ip, ip, r7
 801f158:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801f15c:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 801f160:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f164:	4458      	add	r0, fp
 801f166:	fb08 f505 	mul.w	r5, r8, r5
 801f16a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f16e:	fb08 f802 	mul.w	r8, r8, r2
 801f172:	0a00      	lsrs	r0, r0, #8
 801f174:	0a2a      	lsrs	r2, r5, #8
 801f176:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801f17a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f17e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f182:	4415      	add	r5, r2
 801f184:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801f188:	0a2d      	lsrs	r5, r5, #8
 801f18a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801f18e:	9a00      	ldr	r2, [sp, #0]
 801f190:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f194:	fb03 cc02 	mla	ip, r3, r2, ip
 801f198:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801f19c:	9b01      	ldr	r3, [sp, #4]
 801f19e:	fb05 c50e 	mla	r5, r5, lr, ip
 801f1a2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801f1a6:	43db      	mvns	r3, r3
 801f1a8:	fb00 5004 	mla	r0, r0, r4, r5
 801f1ac:	b2db      	uxtb	r3, r3
 801f1ae:	0a00      	lsrs	r0, r0, #8
 801f1b0:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801f1b4:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 801f1b8:	4378      	muls	r0, r7
 801f1ba:	fb02 0006 	mla	r0, r2, r6, r0
 801f1be:	780a      	ldrb	r2, [r1, #0]
 801f1c0:	fb0e 0e08 	mla	lr, lr, r8, r0
 801f1c4:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 801f1c8:	fb04 e000 	mla	r0, r4, r0, lr
 801f1cc:	fb02 f403 	mul.w	r4, r2, r3
 801f1d0:	0a00      	lsrs	r0, r0, #8
 801f1d2:	1c62      	adds	r2, r4, #1
 801f1d4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f1d8:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801f1dc:	4328      	orrs	r0, r5
 801f1de:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801f1e2:	700a      	strb	r2, [r1, #0]
 801f1e4:	784a      	ldrb	r2, [r1, #1]
 801f1e6:	435a      	muls	r2, r3
 801f1e8:	1c54      	adds	r4, r2, #1
 801f1ea:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801f1ee:	0a02      	lsrs	r2, r0, #8
 801f1f0:	0c00      	lsrs	r0, r0, #16
 801f1f2:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801f1f6:	704a      	strb	r2, [r1, #1]
 801f1f8:	788a      	ldrb	r2, [r1, #2]
 801f1fa:	4353      	muls	r3, r2
 801f1fc:	1c5a      	adds	r2, r3, #1
 801f1fe:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f202:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801f206:	7088      	strb	r0, [r1, #2]
 801f208:	b003      	add	sp, #12
 801f20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f20e:	2600      	movs	r6, #0
 801f210:	e706      	b.n	801f020 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 801f212:	2000      	movs	r0, #0
 801f214:	4606      	mov	r6, r0
 801f216:	e710      	b.n	801f03a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801f218:	2000      	movs	r0, #0
 801f21a:	e70e      	b.n	801f03a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801f21c:	4620      	mov	r0, r4
 801f21e:	e70c      	b.n	801f03a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801f220:	2500      	movs	r5, #0
 801f222:	e71e      	b.n	801f062 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 801f224:	2200      	movs	r2, #0
 801f226:	4615      	mov	r5, r2
 801f228:	e729      	b.n	801f07e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801f22a:	4662      	mov	r2, ip
 801f22c:	4665      	mov	r5, ip
 801f22e:	e726      	b.n	801f07e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801f230:	2200      	movs	r2, #0
 801f232:	e724      	b.n	801f07e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801f234:	4622      	mov	r2, r4
 801f236:	e722      	b.n	801f07e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0801f238 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f23c:	b09b      	sub	sp, #108	; 0x6c
 801f23e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f242:	9218      	str	r2, [sp, #96]	; 0x60
 801f244:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f246:	9019      	str	r0, [sp, #100]	; 0x64
 801f248:	9116      	str	r1, [sp, #88]	; 0x58
 801f24a:	6850      	ldr	r0, [r2, #4]
 801f24c:	9307      	str	r3, [sp, #28]
 801f24e:	6812      	ldr	r2, [r2, #0]
 801f250:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801f252:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801f256:	fb00 1303 	mla	r3, r0, r3, r1
 801f25a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f25e:	18d3      	adds	r3, r2, r3
 801f260:	930a      	str	r3, [sp, #40]	; 0x28
 801f262:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f264:	681b      	ldr	r3, [r3, #0]
 801f266:	930f      	str	r3, [sp, #60]	; 0x3c
 801f268:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f26a:	685e      	ldr	r6, [r3, #4]
 801f26c:	3604      	adds	r6, #4
 801f26e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f270:	2b00      	cmp	r3, #0
 801f272:	dc03      	bgt.n	801f27c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801f274:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f276:	2b00      	cmp	r3, #0
 801f278:	f340 834f 	ble.w	801f91a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801f27c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f27e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f282:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f286:	1e48      	subs	r0, r1, #1
 801f288:	1e57      	subs	r7, r2, #1
 801f28a:	9b07      	ldr	r3, [sp, #28]
 801f28c:	2b00      	cmp	r3, #0
 801f28e:	f340 8178 	ble.w	801f582 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801f292:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801f294:	142b      	asrs	r3, r5, #16
 801f296:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801f29a:	d406      	bmi.n	801f2aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f29c:	4584      	cmp	ip, r0
 801f29e:	da04      	bge.n	801f2aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f2a0:	2b00      	cmp	r3, #0
 801f2a2:	db02      	blt.n	801f2aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f2a4:	42bb      	cmp	r3, r7
 801f2a6:	f2c0 816d 	blt.w	801f584 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801f2aa:	f11c 0c01 	adds.w	ip, ip, #1
 801f2ae:	f100 815b 	bmi.w	801f568 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801f2b2:	4561      	cmp	r1, ip
 801f2b4:	f2c0 8158 	blt.w	801f568 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801f2b8:	3301      	adds	r3, #1
 801f2ba:	f100 8155 	bmi.w	801f568 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801f2be:	429a      	cmp	r2, r3
 801f2c0:	f2c0 8152 	blt.w	801f568 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801f2c4:	9b07      	ldr	r3, [sp, #28]
 801f2c6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801f2c8:	9317      	str	r3, [sp, #92]	; 0x5c
 801f2ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f2cc:	2b00      	cmp	r3, #0
 801f2ce:	f340 8178 	ble.w	801f5c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f2d2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f2d4:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801f2d8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801f2dc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f2e0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f2e2:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801f2e6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f2e8:	141b      	asrs	r3, r3, #16
 801f2ea:	f100 81ba 	bmi.w	801f662 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801f2ee:	f101 38ff 	add.w	r8, r1, #4294967295
 801f2f2:	4543      	cmp	r3, r8
 801f2f4:	f280 81b5 	bge.w	801f662 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801f2f8:	f1bc 0f00 	cmp.w	ip, #0
 801f2fc:	f2c0 81b1 	blt.w	801f662 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801f300:	f10e 38ff 	add.w	r8, lr, #4294967295
 801f304:	45c4      	cmp	ip, r8
 801f306:	f280 81ac 	bge.w	801f662 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801f30a:	b209      	sxth	r1, r1
 801f30c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f30e:	fb0c 3301 	mla	r3, ip, r1, r3
 801f312:	eb04 0803 	add.w	r8, r4, r3
 801f316:	5ce3      	ldrb	r3, [r4, r3]
 801f318:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f31c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801f320:	2a00      	cmp	r2, #0
 801f322:	f000 8193 	beq.w	801f64c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801f326:	f898 c001 	ldrb.w	ip, [r8, #1]
 801f32a:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801f32e:	940b      	str	r4, [sp, #44]	; 0x2c
 801f330:	0e24      	lsrs	r4, r4, #24
 801f332:	9412      	str	r4, [sp, #72]	; 0x48
 801f334:	b178      	cbz	r0, 801f356 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801f336:	eb08 0c01 	add.w	ip, r8, r1
 801f33a:	f818 1001 	ldrb.w	r1, [r8, r1]
 801f33e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f342:	9108      	str	r1, [sp, #32]
 801f344:	0e09      	lsrs	r1, r1, #24
 801f346:	9110      	str	r1, [sp, #64]	; 0x40
 801f348:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801f34c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f350:	910c      	str	r1, [sp, #48]	; 0x30
 801f352:	0e09      	lsrs	r1, r1, #24
 801f354:	9113      	str	r1, [sp, #76]	; 0x4c
 801f356:	b292      	uxth	r2, r2
 801f358:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f35a:	b280      	uxth	r0, r0
 801f35c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f35e:	fb02 f900 	mul.w	r9, r2, r0
 801f362:	0112      	lsls	r2, r2, #4
 801f364:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801f368:	eba2 0809 	sub.w	r8, r2, r9
 801f36c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801f370:	b280      	uxth	r0, r0
 801f372:	fa1f f888 	uxth.w	r8, r8
 801f376:	1a12      	subs	r2, r2, r0
 801f378:	fb08 f101 	mul.w	r1, r8, r1
 801f37c:	b292      	uxth	r2, r2
 801f37e:	fb02 110e 	mla	r1, r2, lr, r1
 801f382:	fb00 1104 	mla	r1, r0, r4, r1
 801f386:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f388:	fb09 1104 	mla	r1, r9, r4, r1
 801f38c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801f390:	2900      	cmp	r1, #0
 801f392:	f000 80de 	beq.w	801f552 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f396:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801f39a:	d01b      	beq.n	801f3d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 801f39c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801f3a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f3a4:	fb0e fa0a 	mul.w	sl, lr, sl
 801f3a8:	fb0e fe03 	mul.w	lr, lr, r3
 801f3ac:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801f3b0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f3b4:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801f3b8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f3bc:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801f3c0:	4453      	add	r3, sl
 801f3c2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f3c6:	0a1b      	lsrs	r3, r3, #8
 801f3c8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f3cc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f3d0:	ea43 030c 	orr.w	r3, r3, ip
 801f3d4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f3d6:	2cff      	cmp	r4, #255	; 0xff
 801f3d8:	d021      	beq.n	801f41e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801f3da:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f3dc:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f3e0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f3e2:	fb04 fb0b 	mul.w	fp, r4, fp
 801f3e6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f3e8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f3ec:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f3ee:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f3f2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f3f6:	fb04 fa0a 	mul.w	sl, r4, sl
 801f3fa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f3fe:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f402:	44de      	add	lr, fp
 801f404:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f408:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f40c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f410:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f414:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f418:	ea4e 040a 	orr.w	r4, lr, sl
 801f41c:	940b      	str	r4, [sp, #44]	; 0x2c
 801f41e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f420:	2cff      	cmp	r4, #255	; 0xff
 801f422:	d021      	beq.n	801f468 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801f424:	9c08      	ldr	r4, [sp, #32]
 801f426:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f42a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f42c:	fb04 fb0b 	mul.w	fp, r4, fp
 801f430:	9c08      	ldr	r4, [sp, #32]
 801f432:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f436:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f438:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f43c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f440:	fb04 fa0a 	mul.w	sl, r4, sl
 801f444:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f448:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f44c:	44de      	add	lr, fp
 801f44e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f452:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f456:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f45a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f45e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f462:	ea4e 040a 	orr.w	r4, lr, sl
 801f466:	9408      	str	r4, [sp, #32]
 801f468:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f46a:	2cff      	cmp	r4, #255	; 0xff
 801f46c:	d021      	beq.n	801f4b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f46e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f470:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f474:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f476:	fb04 fb0b 	mul.w	fp, r4, fp
 801f47a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f47c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f480:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f482:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f486:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f48a:	fb04 fa0a 	mul.w	sl, r4, sl
 801f48e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f492:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f496:	44de      	add	lr, fp
 801f498:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f49c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f4a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f4a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f4a8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f4ac:	ea4e 040a 	orr.w	r4, lr, sl
 801f4b0:	940c      	str	r4, [sp, #48]	; 0x30
 801f4b2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f4b4:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801f4b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f4bc:	43c9      	mvns	r1, r1
 801f4be:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f4c2:	9c08      	ldr	r4, [sp, #32]
 801f4c4:	b2c9      	uxtb	r1, r1
 801f4c6:	fb08 fc0c 	mul.w	ip, r8, ip
 801f4ca:	fb02 cc0e 	mla	ip, r2, lr, ip
 801f4ce:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801f4d2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f4d4:	fb00 cc0e 	mla	ip, r0, lr, ip
 801f4d8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801f4dc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f4de:	fb09 cc0e 	mla	ip, r9, lr, ip
 801f4e2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801f4e6:	fb08 f80e 	mul.w	r8, r8, lr
 801f4ea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f4ee:	fb02 8303 	mla	r3, r2, r3, r8
 801f4f2:	9a08      	ldr	r2, [sp, #32]
 801f4f4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f4f8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801f4fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f4fe:	fb00 330a 	mla	r3, r0, sl, r3
 801f502:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801f506:	fb09 3900 	mla	r9, r9, r0, r3
 801f50a:	783b      	ldrb	r3, [r7, #0]
 801f50c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f510:	fb03 f201 	mul.w	r2, r3, r1
 801f514:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801f518:	1c53      	adds	r3, r2, #1
 801f51a:	ea4c 0c09 	orr.w	ip, ip, r9
 801f51e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f522:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801f526:	703b      	strb	r3, [r7, #0]
 801f528:	787b      	ldrb	r3, [r7, #1]
 801f52a:	434b      	muls	r3, r1
 801f52c:	1c5a      	adds	r2, r3, #1
 801f52e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f532:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801f536:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801f53a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f53e:	707b      	strb	r3, [r7, #1]
 801f540:	78bb      	ldrb	r3, [r7, #2]
 801f542:	4359      	muls	r1, r3
 801f544:	1c4b      	adds	r3, r1, #1
 801f546:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801f54a:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801f54e:	f887 c002 	strb.w	ip, [r7, #2]
 801f552:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f554:	3703      	adds	r7, #3
 801f556:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f558:	441a      	add	r2, r3
 801f55a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f55c:	441d      	add	r5, r3
 801f55e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f560:	9225      	str	r2, [sp, #148]	; 0x94
 801f562:	3b01      	subs	r3, #1
 801f564:	9317      	str	r3, [sp, #92]	; 0x5c
 801f566:	e6b0      	b.n	801f2ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f568:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f56a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801f56c:	441c      	add	r4, r3
 801f56e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f570:	441d      	add	r5, r3
 801f572:	9b07      	ldr	r3, [sp, #28]
 801f574:	9425      	str	r4, [sp, #148]	; 0x94
 801f576:	3b01      	subs	r3, #1
 801f578:	9307      	str	r3, [sp, #28]
 801f57a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f57c:	3303      	adds	r3, #3
 801f57e:	930a      	str	r3, [sp, #40]	; 0x28
 801f580:	e683      	b.n	801f28a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f582:	d026      	beq.n	801f5d2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 801f584:	9b07      	ldr	r3, [sp, #28]
 801f586:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801f588:	3b01      	subs	r3, #1
 801f58a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801f58c:	fb00 4003 	mla	r0, r0, r3, r4
 801f590:	1400      	asrs	r0, r0, #16
 801f592:	f53f ae97 	bmi.w	801f2c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f596:	3901      	subs	r1, #1
 801f598:	4288      	cmp	r0, r1
 801f59a:	f6bf ae93 	bge.w	801f2c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f59e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801f5a0:	fb01 5303 	mla	r3, r1, r3, r5
 801f5a4:	141b      	asrs	r3, r3, #16
 801f5a6:	f53f ae8d 	bmi.w	801f2c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f5aa:	3a01      	subs	r2, #1
 801f5ac:	4293      	cmp	r3, r2
 801f5ae:	f6bf ae89 	bge.w	801f2c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f5b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f5b4:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801f5b8:	f103 0e03 	add.w	lr, r3, #3
 801f5bc:	f1bb 0f00 	cmp.w	fp, #0
 801f5c0:	dc6d      	bgt.n	801f69e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 801f5c2:	9b07      	ldr	r3, [sp, #28]
 801f5c4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f5c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f5ca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f5ce:	4423      	add	r3, r4
 801f5d0:	930a      	str	r3, [sp, #40]	; 0x28
 801f5d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f5d4:	2b00      	cmp	r3, #0
 801f5d6:	f340 81a0 	ble.w	801f91a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801f5da:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f5de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f5e0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f5e4:	eeb0 6a62 	vmov.f32	s12, s5
 801f5e8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f5ec:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f5f0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f5f4:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 801f5f8:	eeb0 6a43 	vmov.f32	s12, s6
 801f5fc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f600:	ee16 5a10 	vmov	r5, s12
 801f604:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f608:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f60c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f610:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f614:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f618:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f61c:	ee12 2a90 	vmov	r2, s5
 801f620:	eef0 2a47 	vmov.f32	s5, s14
 801f624:	fb92 f3f3 	sdiv	r3, r2, r3
 801f628:	ee13 2a10 	vmov	r2, s6
 801f62c:	9327      	str	r3, [sp, #156]	; 0x9c
 801f62e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f630:	eeb0 3a67 	vmov.f32	s6, s15
 801f634:	fb92 f3f3 	sdiv	r3, r2, r3
 801f638:	9328      	str	r3, [sp, #160]	; 0xa0
 801f63a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f63c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801f63e:	3b01      	subs	r3, #1
 801f640:	9316      	str	r3, [sp, #88]	; 0x58
 801f642:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f644:	bf08      	it	eq
 801f646:	4613      	moveq	r3, r2
 801f648:	9307      	str	r3, [sp, #28]
 801f64a:	e610      	b.n	801f26e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801f64c:	2800      	cmp	r0, #0
 801f64e:	f43f ae82 	beq.w	801f356 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801f652:	f818 1001 	ldrb.w	r1, [r8, r1]
 801f656:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f65a:	9108      	str	r1, [sp, #32]
 801f65c:	0e09      	lsrs	r1, r1, #24
 801f65e:	9110      	str	r1, [sp, #64]	; 0x40
 801f660:	e679      	b.n	801f356 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801f662:	f113 0801 	adds.w	r8, r3, #1
 801f666:	f53f af74 	bmi.w	801f552 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f66a:	4541      	cmp	r1, r8
 801f66c:	f6ff af71 	blt.w	801f552 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f670:	f11c 0801 	adds.w	r8, ip, #1
 801f674:	f53f af6d 	bmi.w	801f552 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f678:	45c6      	cmp	lr, r8
 801f67a:	f6ff af6a 	blt.w	801f552 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f67e:	b209      	sxth	r1, r1
 801f680:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801f684:	fa0f f38e 	sxth.w	r3, lr
 801f688:	9100      	str	r1, [sp, #0]
 801f68a:	4639      	mov	r1, r7
 801f68c:	9301      	str	r3, [sp, #4]
 801f68e:	4633      	mov	r3, r6
 801f690:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801f694:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f696:	9819      	ldr	r0, [sp, #100]	; 0x64
 801f698:	f7ff fca3 	bl	801efe2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801f69c:	e759      	b.n	801f552 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f69e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f6a0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801f6a4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801f6a6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f6aa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f6ac:	1427      	asrs	r7, r4, #16
 801f6ae:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f6b0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f6b4:	142b      	asrs	r3, r5, #16
 801f6b6:	fb01 7303 	mla	r3, r1, r3, r7
 801f6ba:	18e7      	adds	r7, r4, r3
 801f6bc:	5ce3      	ldrb	r3, [r4, r3]
 801f6be:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f6c2:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801f6c6:	2a00      	cmp	r2, #0
 801f6c8:	f000 811d 	beq.w	801f906 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 801f6cc:	f897 8001 	ldrb.w	r8, [r7, #1]
 801f6d0:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801f6d4:	940d      	str	r4, [sp, #52]	; 0x34
 801f6d6:	0e24      	lsrs	r4, r4, #24
 801f6d8:	9414      	str	r4, [sp, #80]	; 0x50
 801f6da:	b170      	cbz	r0, 801f6fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801f6dc:	eb07 0801 	add.w	r8, r7, r1
 801f6e0:	5c79      	ldrb	r1, [r7, r1]
 801f6e2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f6e6:	9109      	str	r1, [sp, #36]	; 0x24
 801f6e8:	0e09      	lsrs	r1, r1, #24
 801f6ea:	9111      	str	r1, [sp, #68]	; 0x44
 801f6ec:	f898 1001 	ldrb.w	r1, [r8, #1]
 801f6f0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f6f4:	910e      	str	r1, [sp, #56]	; 0x38
 801f6f6:	0e09      	lsrs	r1, r1, #24
 801f6f8:	9115      	str	r1, [sp, #84]	; 0x54
 801f6fa:	b292      	uxth	r2, r2
 801f6fc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f6fe:	b280      	uxth	r0, r0
 801f700:	fb02 f900 	mul.w	r9, r2, r0
 801f704:	0112      	lsls	r2, r2, #4
 801f706:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801f70a:	eba2 0809 	sub.w	r8, r2, r9
 801f70e:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801f712:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f714:	b280      	uxth	r0, r0
 801f716:	fa1f f888 	uxth.w	r8, r8
 801f71a:	1a09      	subs	r1, r1, r0
 801f71c:	fb08 f202 	mul.w	r2, r8, r2
 801f720:	b289      	uxth	r1, r1
 801f722:	fb01 220c 	mla	r2, r1, ip, r2
 801f726:	fb00 2204 	mla	r2, r0, r4, r2
 801f72a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f72c:	fb09 2204 	mla	r2, r9, r4, r2
 801f730:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801f734:	2a00      	cmp	r2, #0
 801f736:	f000 80db 	beq.w	801f8f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801f73a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801f73e:	d019      	beq.n	801f774 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 801f740:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801f744:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f748:	fb0c fa0a 	mul.w	sl, ip, sl
 801f74c:	fb0c fc03 	mul.w	ip, ip, r3
 801f750:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801f754:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f758:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801f75c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f760:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801f764:	4453      	add	r3, sl
 801f766:	0a3f      	lsrs	r7, r7, #8
 801f768:	0a1b      	lsrs	r3, r3, #8
 801f76a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f76e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f772:	433b      	orrs	r3, r7
 801f774:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f776:	2cff      	cmp	r4, #255	; 0xff
 801f778:	d020      	beq.n	801f7bc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 801f77a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f77c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801f780:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f782:	4367      	muls	r7, r4
 801f784:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f786:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f78a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f78e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f790:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801f794:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f798:	fb04 fa0a 	mul.w	sl, r4, sl
 801f79c:	44bc      	add	ip, r7
 801f79e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801f7a2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f7a6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f7aa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f7ae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f7b2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f7b6:	ea4c 040a 	orr.w	r4, ip, sl
 801f7ba:	940d      	str	r4, [sp, #52]	; 0x34
 801f7bc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f7be:	2cff      	cmp	r4, #255	; 0xff
 801f7c0:	d020      	beq.n	801f804 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 801f7c2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f7c4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801f7c8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f7ca:	4367      	muls	r7, r4
 801f7cc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f7ce:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f7d2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f7d6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f7d8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801f7dc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f7e0:	fb04 fa0a 	mul.w	sl, r4, sl
 801f7e4:	44bc      	add	ip, r7
 801f7e6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801f7ea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f7ee:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f7f2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f7f6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f7fa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f7fe:	ea4c 040a 	orr.w	r4, ip, sl
 801f802:	9409      	str	r4, [sp, #36]	; 0x24
 801f804:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f806:	2cff      	cmp	r4, #255	; 0xff
 801f808:	d020      	beq.n	801f84c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 801f80a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f80c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801f810:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f812:	4367      	muls	r7, r4
 801f814:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f816:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801f81a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f81e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f820:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801f824:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f828:	fb04 fa0a 	mul.w	sl, r4, sl
 801f82c:	44bc      	add	ip, r7
 801f82e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801f832:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f836:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801f83a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f83e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f842:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f846:	ea4c 040a 	orr.w	r4, ip, sl
 801f84a:	940e      	str	r4, [sp, #56]	; 0x38
 801f84c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f84e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801f852:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f856:	43d2      	mvns	r2, r2
 801f858:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801f85c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f85e:	b2d2      	uxtb	r2, r2
 801f860:	fb08 f707 	mul.w	r7, r8, r7
 801f864:	fb01 770c 	mla	r7, r1, ip, r7
 801f868:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f86c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f86e:	fb00 770c 	mla	r7, r0, ip, r7
 801f872:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f876:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f878:	fb09 770c 	mla	r7, r9, ip, r7
 801f87c:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801f880:	fb08 f80c 	mul.w	r8, r8, ip
 801f884:	0a3f      	lsrs	r7, r7, #8
 801f886:	fb01 8303 	mla	r3, r1, r3, r8
 801f88a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f88c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f890:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801f894:	990e      	ldr	r1, [sp, #56]	; 0x38
 801f896:	fb00 330a 	mla	r3, r0, sl, r3
 801f89a:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801f89e:	fb09 3c0c 	mla	ip, r9, ip, r3
 801f8a2:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801f8a6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f8aa:	fb03 f102 	mul.w	r1, r3, r2
 801f8ae:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f8b2:	1c4b      	adds	r3, r1, #1
 801f8b4:	ea47 070c 	orr.w	r7, r7, ip
 801f8b8:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801f8bc:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801f8c0:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801f8c4:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 801f8c8:	4353      	muls	r3, r2
 801f8ca:	1c59      	adds	r1, r3, #1
 801f8cc:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801f8d0:	0a3b      	lsrs	r3, r7, #8
 801f8d2:	0c3f      	lsrs	r7, r7, #16
 801f8d4:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801f8d8:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801f8dc:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801f8e0:	435a      	muls	r2, r3
 801f8e2:	1c53      	adds	r3, r2, #1
 801f8e4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801f8e8:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801f8ec:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801f8f0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f8f2:	f10e 0e03 	add.w	lr, lr, #3
 801f8f6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f8f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f8fc:	441a      	add	r2, r3
 801f8fe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f900:	9225      	str	r2, [sp, #148]	; 0x94
 801f902:	441d      	add	r5, r3
 801f904:	e65a      	b.n	801f5bc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801f906:	2800      	cmp	r0, #0
 801f908:	f43f aef7 	beq.w	801f6fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801f90c:	5c79      	ldrb	r1, [r7, r1]
 801f90e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f912:	9109      	str	r1, [sp, #36]	; 0x24
 801f914:	0e09      	lsrs	r1, r1, #24
 801f916:	9111      	str	r1, [sp, #68]	; 0x44
 801f918:	e6ef      	b.n	801f6fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801f91a:	b01b      	add	sp, #108	; 0x6c
 801f91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f920 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801f920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f924:	b08d      	sub	sp, #52	; 0x34
 801f926:	468b      	mov	fp, r1
 801f928:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	; 0x5c
 801f92c:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 801f930:	fb0c 5703 	mla	r7, ip, r3, r5
 801f934:	f1bc 0f00 	cmp.w	ip, #0
 801f938:	910b      	str	r1, [sp, #44]	; 0x2c
 801f93a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f93e:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801f942:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 801f946:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 801f94a:	eb02 0607 	add.w	r6, r2, r7
 801f94e:	f89b 4000 	ldrb.w	r4, [fp]
 801f952:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801f956:	f89b 1002 	ldrb.w	r1, [fp, #2]
 801f95a:	f2c0 80c1 	blt.w	801fae0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801f95e:	45e6      	cmp	lr, ip
 801f960:	f340 80be 	ble.w	801fae0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801f964:	2d00      	cmp	r5, #0
 801f966:	f2c0 80b7 	blt.w	801fad8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801f96a:	42ab      	cmp	r3, r5
 801f96c:	f340 80b4 	ble.w	801fad8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801f970:	5dd2      	ldrb	r2, [r2, r7]
 801f972:	9205      	str	r2, [sp, #20]
 801f974:	7872      	ldrb	r2, [r6, #1]
 801f976:	9206      	str	r2, [sp, #24]
 801f978:	78b2      	ldrb	r2, [r6, #2]
 801f97a:	9207      	str	r2, [sp, #28]
 801f97c:	1c6a      	adds	r2, r5, #1
 801f97e:	f100 80b6 	bmi.w	801faee <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801f982:	4293      	cmp	r3, r2
 801f984:	f340 80b3 	ble.w	801faee <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801f988:	f1b8 0f00 	cmp.w	r8, #0
 801f98c:	f000 80af 	beq.w	801faee <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801f990:	78f2      	ldrb	r2, [r6, #3]
 801f992:	9201      	str	r2, [sp, #4]
 801f994:	7932      	ldrb	r2, [r6, #4]
 801f996:	9202      	str	r2, [sp, #8]
 801f998:	7972      	ldrb	r2, [r6, #5]
 801f99a:	9203      	str	r2, [sp, #12]
 801f99c:	f11c 0c01 	adds.w	ip, ip, #1
 801f9a0:	f100 80ad 	bmi.w	801fafe <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801f9a4:	45e6      	cmp	lr, ip
 801f9a6:	f340 80aa 	ble.w	801fafe <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801f9aa:	f1ba 0f00 	cmp.w	sl, #0
 801f9ae:	f000 80a6 	beq.w	801fafe <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801f9b2:	2d00      	cmp	r5, #0
 801f9b4:	f2c0 809f 	blt.w	801faf6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801f9b8:	42ab      	cmp	r3, r5
 801f9ba:	f340 809c 	ble.w	801faf6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801f9be:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801f9c2:	f816 9002 	ldrb.w	r9, [r6, r2]
 801f9c6:	2203      	movs	r2, #3
 801f9c8:	fb03 6c02 	mla	ip, r3, r2, r6
 801f9cc:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801f9d0:	f89c e002 	ldrb.w	lr, [ip, #2]
 801f9d4:	9704      	str	r7, [sp, #16]
 801f9d6:	3501      	adds	r5, #1
 801f9d8:	f100 8098 	bmi.w	801fb0c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801f9dc:	42ab      	cmp	r3, r5
 801f9de:	f340 8095 	ble.w	801fb0c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801f9e2:	f1b8 0f00 	cmp.w	r8, #0
 801f9e6:	f000 8091 	beq.w	801fb0c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801f9ea:	f04f 0c03 	mov.w	ip, #3
 801f9ee:	fb13 c20c 	smlabb	r2, r3, ip, ip
 801f9f2:	5cb5      	ldrb	r5, [r6, r2]
 801f9f4:	fb03 620c 	mla	r2, r3, ip, r6
 801f9f8:	fb03 630c 	mla	r3, r3, ip, r6
 801f9fc:	7912      	ldrb	r2, [r2, #4]
 801f9fe:	795e      	ldrb	r6, [r3, #5]
 801fa00:	fa1f f388 	uxth.w	r3, r8
 801fa04:	fa1f fc8a 	uxth.w	ip, sl
 801fa08:	fb03 f70c 	mul.w	r7, r3, ip
 801fa0c:	011b      	lsls	r3, r3, #4
 801fa0e:	9708      	str	r7, [sp, #32]
 801fa10:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801fa14:	f5c3 7a80 	rsb	sl, r3, #256	; 0x100
 801fa18:	1bdb      	subs	r3, r3, r7
 801fa1a:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 801fa1e:	fa1f fc8c 	uxth.w	ip, ip
 801fa22:	b29b      	uxth	r3, r3
 801fa24:	9709      	str	r7, [sp, #36]	; 0x24
 801fa26:	ebaa 0a0c 	sub.w	sl, sl, ip
 801fa2a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801fa2c:	930a      	str	r3, [sp, #40]	; 0x28
 801fa2e:	fa1f fa8a 	uxth.w	sl, sl
 801fa32:	ea6f 0807 	mvn.w	r8, r7
 801fa36:	9f01      	ldr	r7, [sp, #4]
 801fa38:	435f      	muls	r7, r3
 801fa3a:	9b05      	ldr	r3, [sp, #20]
 801fa3c:	fa5f f888 	uxtb.w	r8, r8
 801fa40:	fb0a 7703 	mla	r7, sl, r3, r7
 801fa44:	9b08      	ldr	r3, [sp, #32]
 801fa46:	fb14 f408 	smulbb	r4, r4, r8
 801fa4a:	fb0c 7709 	mla	r7, ip, r9, r7
 801fa4e:	fb10 f008 	smulbb	r0, r0, r8
 801fa52:	fb11 f108 	smulbb	r1, r1, r8
 801fa56:	fb03 7705 	mla	r7, r3, r5, r7
 801fa5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fa5c:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801fa60:	fb07 4703 	mla	r7, r7, r3, r4
 801fa64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fa66:	b2bf      	uxth	r7, r7
 801fa68:	1c7c      	adds	r4, r7, #1
 801fa6a:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 801fa6e:	1224      	asrs	r4, r4, #8
 801fa70:	f88b 4000 	strb.w	r4, [fp]
 801fa74:	9c02      	ldr	r4, [sp, #8]
 801fa76:	435c      	muls	r4, r3
 801fa78:	9b06      	ldr	r3, [sp, #24]
 801fa7a:	fb0a 4403 	mla	r4, sl, r3, r4
 801fa7e:	9b04      	ldr	r3, [sp, #16]
 801fa80:	fb0c 4403 	mla	r4, ip, r3, r4
 801fa84:	9b08      	ldr	r3, [sp, #32]
 801fa86:	fb03 4402 	mla	r4, r3, r2, r4
 801fa8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fa8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fa8e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801fa92:	fb04 0403 	mla	r4, r4, r3, r0
 801fa96:	9b03      	ldr	r3, [sp, #12]
 801fa98:	435a      	muls	r2, r3
 801fa9a:	b2a4      	uxth	r4, r4
 801fa9c:	4613      	mov	r3, r2
 801fa9e:	9a07      	ldr	r2, [sp, #28]
 801faa0:	1c60      	adds	r0, r4, #1
 801faa2:	fb0a 3a02 	mla	sl, sl, r2, r3
 801faa6:	9b08      	ldr	r3, [sp, #32]
 801faa8:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 801faac:	fb0c ac0e 	mla	ip, ip, lr, sl
 801fab0:	1224      	asrs	r4, r4, #8
 801fab2:	fb03 c606 	mla	r6, r3, r6, ip
 801fab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fab8:	f88b 4001 	strb.w	r4, [fp, #1]
 801fabc:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801fac0:	fb06 1103 	mla	r1, r6, r3, r1
 801fac4:	b289      	uxth	r1, r1
 801fac6:	1c4e      	adds	r6, r1, #1
 801fac8:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801facc:	1209      	asrs	r1, r1, #8
 801face:	f88b 1002 	strb.w	r1, [fp, #2]
 801fad2:	b00d      	add	sp, #52	; 0x34
 801fad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fad8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801fadc:	9405      	str	r4, [sp, #20]
 801fade:	e74d      	b.n	801f97c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 801fae0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801fae4:	9401      	str	r4, [sp, #4]
 801fae6:	9405      	str	r4, [sp, #20]
 801fae8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801faec:	e756      	b.n	801f99c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801faee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801faf2:	9401      	str	r4, [sp, #4]
 801faf4:	e752      	b.n	801f99c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801faf6:	468e      	mov	lr, r1
 801faf8:	9004      	str	r0, [sp, #16]
 801fafa:	46a1      	mov	r9, r4
 801fafc:	e76b      	b.n	801f9d6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 801fafe:	460e      	mov	r6, r1
 801fb00:	4602      	mov	r2, r0
 801fb02:	4625      	mov	r5, r4
 801fb04:	468e      	mov	lr, r1
 801fb06:	9004      	str	r0, [sp, #16]
 801fb08:	46a1      	mov	r9, r4
 801fb0a:	e779      	b.n	801fa00 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 801fb0c:	460e      	mov	r6, r1
 801fb0e:	4602      	mov	r2, r0
 801fb10:	4625      	mov	r5, r4
 801fb12:	e775      	b.n	801fa00 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

0801fb14 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fb14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb18:	b09f      	sub	sp, #124	; 0x7c
 801fb1a:	920e      	str	r2, [sp, #56]	; 0x38
 801fb1c:	9307      	str	r3, [sp, #28]
 801fb1e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801fb20:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801fb24:	901d      	str	r0, [sp, #116]	; 0x74
 801fb26:	930c      	str	r3, [sp, #48]	; 0x30
 801fb28:	6850      	ldr	r0, [r2, #4]
 801fb2a:	910b      	str	r1, [sp, #44]	; 0x2c
 801fb2c:	6812      	ldr	r2, [r2, #0]
 801fb2e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801fb32:	e9dd a829 	ldrd	sl, r8, [sp, #164]	; 0xa4
 801fb36:	fb00 1303 	mla	r3, r0, r3, r1
 801fb3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fb3e:	18d3      	adds	r3, r2, r3
 801fb40:	9308      	str	r3, [sp, #32]
 801fb42:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801fb44:	681b      	ldr	r3, [r3, #0]
 801fb46:	930a      	str	r3, [sp, #40]	; 0x28
 801fb48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fb4a:	43db      	mvns	r3, r3
 801fb4c:	b2db      	uxtb	r3, r3
 801fb4e:	9309      	str	r3, [sp, #36]	; 0x24
 801fb50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fb52:	2b00      	cmp	r3, #0
 801fb54:	dc03      	bgt.n	801fb5e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801fb56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fb58:	2b00      	cmp	r3, #0
 801fb5a:	f340 81f5 	ble.w	801ff48 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801fb5e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801fb60:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fb64:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fb68:	1e48      	subs	r0, r1, #1
 801fb6a:	1e54      	subs	r4, r2, #1
 801fb6c:	9b07      	ldr	r3, [sp, #28]
 801fb6e:	2b00      	cmp	r3, #0
 801fb70:	f340 80d5 	ble.w	801fd1e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801fb74:	ea5f 452a 	movs.w	r5, sl, asr #16
 801fb78:	ea4f 4328 	mov.w	r3, r8, asr #16
 801fb7c:	d406      	bmi.n	801fb8c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801fb7e:	4285      	cmp	r5, r0
 801fb80:	da04      	bge.n	801fb8c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801fb82:	2b00      	cmp	r3, #0
 801fb84:	db02      	blt.n	801fb8c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801fb86:	42a3      	cmp	r3, r4
 801fb88:	f2c0 80ca 	blt.w	801fd20 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801fb8c:	3501      	adds	r5, #1
 801fb8e:	f100 80bb 	bmi.w	801fd08 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801fb92:	42a9      	cmp	r1, r5
 801fb94:	f2c0 80b8 	blt.w	801fd08 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801fb98:	3301      	adds	r3, #1
 801fb9a:	f100 80b5 	bmi.w	801fd08 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801fb9e:	429a      	cmp	r2, r3
 801fba0:	f2c0 80b2 	blt.w	801fd08 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801fba4:	9b07      	ldr	r3, [sp, #28]
 801fba6:	9d08      	ldr	r5, [sp, #32]
 801fba8:	930d      	str	r3, [sp, #52]	; 0x34
 801fbaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fbac:	2b00      	cmp	r3, #0
 801fbae:	f340 80d6 	ble.w	801fd5e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 801fbb2:	9830      	ldr	r0, [sp, #192]	; 0xc0
 801fbb4:	ea4f 4428 	mov.w	r4, r8, asr #16
 801fbb8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801fbba:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801fbbe:	68c6      	ldr	r6, [r0, #12]
 801fbc0:	ea5f 402a 	movs.w	r0, sl, asr #16
 801fbc4:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801fbc8:	689b      	ldr	r3, [r3, #8]
 801fbca:	f100 810f 	bmi.w	801fdec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801fbce:	1e5f      	subs	r7, r3, #1
 801fbd0:	42b8      	cmp	r0, r7
 801fbd2:	f280 810b 	bge.w	801fdec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801fbd6:	2c00      	cmp	r4, #0
 801fbd8:	f2c0 8108 	blt.w	801fdec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801fbdc:	1e77      	subs	r7, r6, #1
 801fbde:	42bc      	cmp	r4, r7
 801fbe0:	f280 8104 	bge.w	801fdec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801fbe4:	b21b      	sxth	r3, r3
 801fbe6:	fb04 0003 	mla	r0, r4, r3, r0
 801fbea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801fbec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fbf0:	1826      	adds	r6, r4, r0
 801fbf2:	5c24      	ldrb	r4, [r4, r0]
 801fbf4:	78b7      	ldrb	r7, [r6, #2]
 801fbf6:	7870      	ldrb	r0, [r6, #1]
 801fbf8:	970f      	str	r7, [sp, #60]	; 0x3c
 801fbfa:	7977      	ldrb	r7, [r6, #5]
 801fbfc:	f896 e003 	ldrb.w	lr, [r6, #3]
 801fc00:	f896 c004 	ldrb.w	ip, [r6, #4]
 801fc04:	9710      	str	r7, [sp, #64]	; 0x40
 801fc06:	b1c9      	cbz	r1, 801fc3c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801fc08:	f04f 0b03 	mov.w	fp, #3
 801fc0c:	f06f 0904 	mvn.w	r9, #4
 801fc10:	3605      	adds	r6, #5
 801fc12:	fb13 930b 	smlabb	r3, r3, fp, r9
 801fc16:	eb06 0b03 	add.w	fp, r6, r3
 801fc1a:	5cf3      	ldrb	r3, [r6, r3]
 801fc1c:	9311      	str	r3, [sp, #68]	; 0x44
 801fc1e:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801fc22:	9313      	str	r3, [sp, #76]	; 0x4c
 801fc24:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801fc28:	9315      	str	r3, [sp, #84]	; 0x54
 801fc2a:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801fc2e:	9312      	str	r3, [sp, #72]	; 0x48
 801fc30:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801fc34:	9314      	str	r3, [sp, #80]	; 0x50
 801fc36:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801fc3a:	9316      	str	r3, [sp, #88]	; 0x58
 801fc3c:	b292      	uxth	r2, r2
 801fc3e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801fc40:	b289      	uxth	r1, r1
 801fc42:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801fc46:	fb02 f601 	mul.w	r6, r2, r1
 801fc4a:	0112      	lsls	r2, r2, #4
 801fc4c:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 801fc50:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 801fc54:	1b92      	subs	r2, r2, r6
 801fc56:	b289      	uxth	r1, r1
 801fc58:	b292      	uxth	r2, r2
 801fc5a:	eba9 0901 	sub.w	r9, r9, r1
 801fc5e:	fb02 fe0e 	mul.w	lr, r2, lr
 801fc62:	fa1f f989 	uxth.w	r9, r9
 801fc66:	fb02 fc0c 	mul.w	ip, r2, ip
 801fc6a:	fb09 e404 	mla	r4, r9, r4, lr
 801fc6e:	f895 e000 	ldrb.w	lr, [r5]
 801fc72:	fb09 c000 	mla	r0, r9, r0, ip
 801fc76:	fb01 4407 	mla	r4, r1, r7, r4
 801fc7a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801fc7c:	fb06 4407 	mla	r4, r6, r7, r4
 801fc80:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801fc82:	fb1e fe07 	smulbb	lr, lr, r7
 801fc86:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801fc8a:	fb04 e403 	mla	r4, r4, r3, lr
 801fc8e:	b2a4      	uxth	r4, r4
 801fc90:	f104 0e01 	add.w	lr, r4, #1
 801fc94:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 801fc98:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fc9a:	fb01 0004 	mla	r0, r1, r4, r0
 801fc9e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fca0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fca4:	fb06 0004 	mla	r0, r6, r4, r0
 801fca8:	786c      	ldrb	r4, [r5, #1]
 801fcaa:	f885 e000 	strb.w	lr, [r5]
 801fcae:	fb14 f407 	smulbb	r4, r4, r7
 801fcb2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801fcb6:	fb00 4003 	mla	r0, r0, r3, r4
 801fcba:	b280      	uxth	r0, r0
 801fcbc:	1c44      	adds	r4, r0, #1
 801fcbe:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801fcc2:	1200      	asrs	r0, r0, #8
 801fcc4:	7068      	strb	r0, [r5, #1]
 801fcc6:	9810      	ldr	r0, [sp, #64]	; 0x40
 801fcc8:	4342      	muls	r2, r0
 801fcca:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801fccc:	fb09 2200 	mla	r2, r9, r0, r2
 801fcd0:	9815      	ldr	r0, [sp, #84]	; 0x54
 801fcd2:	fb01 2100 	mla	r1, r1, r0, r2
 801fcd6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801fcd8:	fb06 1602 	mla	r6, r6, r2, r1
 801fcdc:	78a9      	ldrb	r1, [r5, #2]
 801fcde:	fb11 f107 	smulbb	r1, r1, r7
 801fce2:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801fce6:	fb06 1303 	mla	r3, r6, r3, r1
 801fcea:	b29b      	uxth	r3, r3
 801fcec:	1c5e      	adds	r6, r3, #1
 801fcee:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801fcf2:	121b      	asrs	r3, r3, #8
 801fcf4:	70ab      	strb	r3, [r5, #2]
 801fcf6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801fcf8:	3503      	adds	r5, #3
 801fcfa:	449a      	add	sl, r3
 801fcfc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fcfe:	4498      	add	r8, r3
 801fd00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fd02:	3b01      	subs	r3, #1
 801fd04:	930d      	str	r3, [sp, #52]	; 0x34
 801fd06:	e750      	b.n	801fbaa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fd08:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801fd0a:	449a      	add	sl, r3
 801fd0c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801fd0e:	4498      	add	r8, r3
 801fd10:	9b07      	ldr	r3, [sp, #28]
 801fd12:	3b01      	subs	r3, #1
 801fd14:	9307      	str	r3, [sp, #28]
 801fd16:	9b08      	ldr	r3, [sp, #32]
 801fd18:	3303      	adds	r3, #3
 801fd1a:	9308      	str	r3, [sp, #32]
 801fd1c:	e726      	b.n	801fb6c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801fd1e:	d026      	beq.n	801fd6e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801fd20:	9b07      	ldr	r3, [sp, #28]
 801fd22:	982b      	ldr	r0, [sp, #172]	; 0xac
 801fd24:	3b01      	subs	r3, #1
 801fd26:	fb00 a003 	mla	r0, r0, r3, sl
 801fd2a:	1400      	asrs	r0, r0, #16
 801fd2c:	f53f af3a 	bmi.w	801fba4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fd30:	3901      	subs	r1, #1
 801fd32:	4288      	cmp	r0, r1
 801fd34:	f6bf af36 	bge.w	801fba4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fd38:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801fd3a:	fb01 8303 	mla	r3, r1, r3, r8
 801fd3e:	141b      	asrs	r3, r3, #16
 801fd40:	f53f af30 	bmi.w	801fba4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fd44:	3a01      	subs	r2, #1
 801fd46:	4293      	cmp	r3, r2
 801fd48:	f6bf af2c 	bge.w	801fba4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fd4c:	9b08      	ldr	r3, [sp, #32]
 801fd4e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801fd52:	1cdd      	adds	r5, r3, #3
 801fd54:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 801fd58:	f1bc 0f00 	cmp.w	ip, #0
 801fd5c:	dc5f      	bgt.n	801fe1e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 801fd5e:	9b07      	ldr	r3, [sp, #28]
 801fd60:	9a08      	ldr	r2, [sp, #32]
 801fd62:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fd66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fd6a:	441a      	add	r2, r3
 801fd6c:	9208      	str	r2, [sp, #32]
 801fd6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fd70:	2b00      	cmp	r3, #0
 801fd72:	f340 80e9 	ble.w	801ff48 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801fd76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fd7a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fd7c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fd80:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fd84:	eef0 6a62 	vmov.f32	s13, s5
 801fd88:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fd8c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fd90:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fd94:	ee16 aa90 	vmov	sl, s13
 801fd98:	eef0 6a43 	vmov.f32	s13, s6
 801fd9c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fda0:	ee16 8a90 	vmov	r8, s13
 801fda4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fda8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fdac:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fdb0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fdb4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fdb8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fdbc:	ee12 2a90 	vmov	r2, s5
 801fdc0:	eef0 2a47 	vmov.f32	s5, s14
 801fdc4:	fb92 f3f3 	sdiv	r3, r2, r3
 801fdc8:	ee13 2a10 	vmov	r2, s6
 801fdcc:	932b      	str	r3, [sp, #172]	; 0xac
 801fdce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fdd0:	eeb0 3a67 	vmov.f32	s6, s15
 801fdd4:	fb92 f3f3 	sdiv	r3, r2, r3
 801fdd8:	932c      	str	r3, [sp, #176]	; 0xb0
 801fdda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fddc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fdde:	3b01      	subs	r3, #1
 801fde0:	930b      	str	r3, [sp, #44]	; 0x2c
 801fde2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801fde4:	bf08      	it	eq
 801fde6:	4613      	moveq	r3, r2
 801fde8:	9307      	str	r3, [sp, #28]
 801fdea:	e6b1      	b.n	801fb50 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801fdec:	1c47      	adds	r7, r0, #1
 801fdee:	d482      	bmi.n	801fcf6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801fdf0:	42bb      	cmp	r3, r7
 801fdf2:	db80      	blt.n	801fcf6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801fdf4:	1c67      	adds	r7, r4, #1
 801fdf6:	f53f af7e 	bmi.w	801fcf6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801fdfa:	42be      	cmp	r6, r7
 801fdfc:	f6ff af7b 	blt.w	801fcf6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801fe00:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801fe02:	b236      	sxth	r6, r6
 801fe04:	9001      	str	r0, [sp, #4]
 801fe06:	b21b      	sxth	r3, r3
 801fe08:	9600      	str	r6, [sp, #0]
 801fe0a:	981d      	ldr	r0, [sp, #116]	; 0x74
 801fe0c:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801fe10:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801fe14:	4629      	mov	r1, r5
 801fe16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fe18:	f7ff fd82 	bl	801f920 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801fe1c:	e76b      	b.n	801fcf6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801fe1e:	9930      	ldr	r1, [sp, #192]	; 0xc0
 801fe20:	ea4f 402a 	mov.w	r0, sl, asr #16
 801fe24:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801fe28:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801fe2c:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 801fe30:	ea4f 4128 	mov.w	r1, r8, asr #16
 801fe34:	fb07 0101 	mla	r1, r7, r1, r0
 801fe38:	980a      	ldr	r0, [sp, #40]	; 0x28
 801fe3a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801fe3e:	1844      	adds	r4, r0, r1
 801fe40:	5c40      	ldrb	r0, [r0, r1]
 801fe42:	78a6      	ldrb	r6, [r4, #2]
 801fe44:	7861      	ldrb	r1, [r4, #1]
 801fe46:	960f      	str	r6, [sp, #60]	; 0x3c
 801fe48:	78e6      	ldrb	r6, [r4, #3]
 801fe4a:	910d      	str	r1, [sp, #52]	; 0x34
 801fe4c:	9610      	str	r6, [sp, #64]	; 0x40
 801fe4e:	f894 9004 	ldrb.w	r9, [r4, #4]
 801fe52:	f894 b005 	ldrb.w	fp, [r4, #5]
 801fe56:	b192      	cbz	r2, 801fe7e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801fe58:	f06f 0604 	mvn.w	r6, #4
 801fe5c:	2103      	movs	r1, #3
 801fe5e:	3405      	adds	r4, #5
 801fe60:	fb17 6701 	smlabb	r7, r7, r1, r6
 801fe64:	19e6      	adds	r6, r4, r7
 801fe66:	5de4      	ldrb	r4, [r4, r7]
 801fe68:	9417      	str	r4, [sp, #92]	; 0x5c
 801fe6a:	7874      	ldrb	r4, [r6, #1]
 801fe6c:	9419      	str	r4, [sp, #100]	; 0x64
 801fe6e:	78b4      	ldrb	r4, [r6, #2]
 801fe70:	941b      	str	r4, [sp, #108]	; 0x6c
 801fe72:	78f4      	ldrb	r4, [r6, #3]
 801fe74:	9418      	str	r4, [sp, #96]	; 0x60
 801fe76:	7934      	ldrb	r4, [r6, #4]
 801fe78:	941a      	str	r4, [sp, #104]	; 0x68
 801fe7a:	7974      	ldrb	r4, [r6, #5]
 801fe7c:	941c      	str	r4, [sp, #112]	; 0x70
 801fe7e:	b29b      	uxth	r3, r3
 801fe80:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801fe82:	b292      	uxth	r2, r2
 801fe84:	9909      	ldr	r1, [sp, #36]	; 0x24
 801fe86:	3503      	adds	r5, #3
 801fe88:	f10c 3cff 	add.w	ip, ip, #4294967295
 801fe8c:	fb03 f402 	mul.w	r4, r3, r2
 801fe90:	011b      	lsls	r3, r3, #4
 801fe92:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801fe96:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 801fe9a:	1b1b      	subs	r3, r3, r4
 801fe9c:	b292      	uxth	r2, r2
 801fe9e:	b29b      	uxth	r3, r3
 801fea0:	1ab6      	subs	r6, r6, r2
 801fea2:	435f      	muls	r7, r3
 801fea4:	b2b6      	uxth	r6, r6
 801fea6:	fb03 f909 	mul.w	r9, r3, r9
 801feaa:	fb03 fb0b 	mul.w	fp, r3, fp
 801feae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801feb0:	fb06 7000 	mla	r0, r6, r0, r7
 801feb4:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801feb6:	fb06 bb03 	mla	fp, r6, r3, fp
 801feba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801febc:	fb02 0007 	mla	r0, r2, r7, r0
 801fec0:	9f18      	ldr	r7, [sp, #96]	; 0x60
 801fec2:	fb02 bb03 	mla	fp, r2, r3, fp
 801fec6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801fec8:	fb04 0007 	mla	r0, r4, r7, r0
 801fecc:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801fed0:	fb17 f701 	smulbb	r7, r7, r1
 801fed4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801fed8:	990d      	ldr	r1, [sp, #52]	; 0x34
 801feda:	fb00 700e 	mla	r0, r0, lr, r7
 801fede:	fb06 9101 	mla	r1, r6, r1, r9
 801fee2:	b280      	uxth	r0, r0
 801fee4:	1c47      	adds	r7, r0, #1
 801fee6:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801feea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801feec:	1200      	asrs	r0, r0, #8
 801feee:	f805 0c06 	strb.w	r0, [r5, #-6]
 801fef2:	9819      	ldr	r0, [sp, #100]	; 0x64
 801fef4:	fb02 1100 	mla	r1, r2, r0, r1
 801fef8:	981a      	ldr	r0, [sp, #104]	; 0x68
 801fefa:	fb04 1100 	mla	r1, r4, r0, r1
 801fefe:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 801ff02:	fb04 b403 	mla	r4, r4, r3, fp
 801ff06:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801ff0a:	fb10 f007 	smulbb	r0, r0, r7
 801ff0e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801ff12:	fb13 f307 	smulbb	r3, r3, r7
 801ff16:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801ff1a:	fb01 010e 	mla	r1, r1, lr, r0
 801ff1e:	fb04 340e 	mla	r4, r4, lr, r3
 801ff22:	b289      	uxth	r1, r1
 801ff24:	b2a4      	uxth	r4, r4
 801ff26:	1c48      	adds	r0, r1, #1
 801ff28:	1c63      	adds	r3, r4, #1
 801ff2a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801ff2e:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801ff32:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801ff34:	1209      	asrs	r1, r1, #8
 801ff36:	1224      	asrs	r4, r4, #8
 801ff38:	449a      	add	sl, r3
 801ff3a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ff3c:	f805 1c05 	strb.w	r1, [r5, #-5]
 801ff40:	f805 4c04 	strb.w	r4, [r5, #-4]
 801ff44:	4498      	add	r8, r3
 801ff46:	e707      	b.n	801fd58 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801ff48:	b01f      	add	sp, #124	; 0x7c
 801ff4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ff4e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801ff4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff52:	b087      	sub	sp, #28
 801ff54:	780d      	ldrb	r5, [r1, #0]
 801ff56:	784c      	ldrb	r4, [r1, #1]
 801ff58:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801ff5c:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 801ff60:	9004      	str	r0, [sp, #16]
 801ff62:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801ff66:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
 801ff6a:	9005      	str	r0, [sp, #20]
 801ff6c:	fb06 bc03 	mla	ip, r6, r3, fp
 801ff70:	2e00      	cmp	r6, #0
 801ff72:	7888      	ldrb	r0, [r1, #2]
 801ff74:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801ff78:	eb02 090c 	add.w	r9, r2, ip
 801ff7c:	f2c0 8084 	blt.w	8020088 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801ff80:	42b7      	cmp	r7, r6
 801ff82:	f340 8081 	ble.w	8020088 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801ff86:	f1bb 0f00 	cmp.w	fp, #0
 801ff8a:	db79      	blt.n	8020080 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801ff8c:	455b      	cmp	r3, fp
 801ff8e:	dd77      	ble.n	8020080 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801ff90:	f812 200c 	ldrb.w	r2, [r2, ip]
 801ff94:	9201      	str	r2, [sp, #4]
 801ff96:	f899 2001 	ldrb.w	r2, [r9, #1]
 801ff9a:	9202      	str	r2, [sp, #8]
 801ff9c:	f899 2002 	ldrb.w	r2, [r9, #2]
 801ffa0:	9203      	str	r2, [sp, #12]
 801ffa2:	f11b 0201 	adds.w	r2, fp, #1
 801ffa6:	d476      	bmi.n	8020096 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801ffa8:	4293      	cmp	r3, r2
 801ffaa:	dd74      	ble.n	8020096 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801ffac:	9a04      	ldr	r2, [sp, #16]
 801ffae:	2a00      	cmp	r2, #0
 801ffb0:	d071      	beq.n	8020096 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801ffb2:	f899 8003 	ldrb.w	r8, [r9, #3]
 801ffb6:	f899 c004 	ldrb.w	ip, [r9, #4]
 801ffba:	f899 a005 	ldrb.w	sl, [r9, #5]
 801ffbe:	3601      	adds	r6, #1
 801ffc0:	d471      	bmi.n	80200a6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801ffc2:	42b7      	cmp	r7, r6
 801ffc4:	dd6f      	ble.n	80200a6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801ffc6:	9a05      	ldr	r2, [sp, #20]
 801ffc8:	2a00      	cmp	r2, #0
 801ffca:	d06c      	beq.n	80200a6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801ffcc:	f1bb 0f00 	cmp.w	fp, #0
 801ffd0:	db65      	blt.n	802009e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801ffd2:	455b      	cmp	r3, fp
 801ffd4:	dd63      	ble.n	802009e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801ffd6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801ffda:	f819 e002 	ldrb.w	lr, [r9, r2]
 801ffde:	2203      	movs	r2, #3
 801ffe0:	fb03 9602 	mla	r6, r3, r2, r9
 801ffe4:	7877      	ldrb	r7, [r6, #1]
 801ffe6:	78b6      	ldrb	r6, [r6, #2]
 801ffe8:	f11b 0b01 	adds.w	fp, fp, #1
 801ffec:	d40c      	bmi.n	8020008 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801ffee:	455b      	cmp	r3, fp
 801fff0:	dd0a      	ble.n	8020008 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801fff2:	9a04      	ldr	r2, [sp, #16]
 801fff4:	b142      	cbz	r2, 8020008 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801fff6:	2203      	movs	r2, #3
 801fff8:	fb13 2002 	smlabb	r0, r3, r2, r2
 801fffc:	f819 5000 	ldrb.w	r5, [r9, r0]
 8020000:	fb03 9002 	mla	r0, r3, r2, r9
 8020004:	7904      	ldrb	r4, [r0, #4]
 8020006:	7940      	ldrb	r0, [r0, #5]
 8020008:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 802000c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8020010:	fb03 fb02 	mul.w	fp, r3, r2
 8020014:	011b      	lsls	r3, r3, #4
 8020016:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 802001a:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 802001e:	eba3 030b 	sub.w	r3, r3, fp
 8020022:	b292      	uxth	r2, r2
 8020024:	b29b      	uxth	r3, r3
 8020026:	eba9 0902 	sub.w	r9, r9, r2
 802002a:	9304      	str	r3, [sp, #16]
 802002c:	fa1f f989 	uxth.w	r9, r9
 8020030:	fb03 f808 	mul.w	r8, r3, r8
 8020034:	9b01      	ldr	r3, [sp, #4]
 8020036:	fb09 8803 	mla	r8, r9, r3, r8
 802003a:	9b04      	ldr	r3, [sp, #16]
 802003c:	fb03 fc0c 	mul.w	ip, r3, ip
 8020040:	9b02      	ldr	r3, [sp, #8]
 8020042:	fb02 880e 	mla	r8, r2, lr, r8
 8020046:	fb09 cc03 	mla	ip, r9, r3, ip
 802004a:	9b04      	ldr	r3, [sp, #16]
 802004c:	fb0b 8805 	mla	r8, fp, r5, r8
 8020050:	fb02 c707 	mla	r7, r2, r7, ip
 8020054:	fb03 f30a 	mul.w	r3, r3, sl
 8020058:	ea4f 2828 	mov.w	r8, r8, asr #8
 802005c:	fb0b 7404 	mla	r4, fp, r4, r7
 8020060:	f881 8000 	strb.w	r8, [r1]
 8020064:	1224      	asrs	r4, r4, #8
 8020066:	704c      	strb	r4, [r1, #1]
 8020068:	9c03      	ldr	r4, [sp, #12]
 802006a:	fb09 3904 	mla	r9, r9, r4, r3
 802006e:	fb02 9206 	mla	r2, r2, r6, r9
 8020072:	fb0b 2000 	mla	r0, fp, r0, r2
 8020076:	1200      	asrs	r0, r0, #8
 8020078:	7088      	strb	r0, [r1, #2]
 802007a:	b007      	add	sp, #28
 802007c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020080:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8020084:	9501      	str	r5, [sp, #4]
 8020086:	e78c      	b.n	801ffa2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 8020088:	4682      	mov	sl, r0
 802008a:	46a4      	mov	ip, r4
 802008c:	46a8      	mov	r8, r5
 802008e:	9501      	str	r5, [sp, #4]
 8020090:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8020094:	e793      	b.n	801ffbe <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8020096:	4682      	mov	sl, r0
 8020098:	46a4      	mov	ip, r4
 802009a:	46a8      	mov	r8, r5
 802009c:	e78f      	b.n	801ffbe <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 802009e:	4606      	mov	r6, r0
 80200a0:	4627      	mov	r7, r4
 80200a2:	46ae      	mov	lr, r5
 80200a4:	e7a0      	b.n	801ffe8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 80200a6:	4606      	mov	r6, r0
 80200a8:	4627      	mov	r7, r4
 80200aa:	46ae      	mov	lr, r5
 80200ac:	e7ac      	b.n	8020008 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

080200ae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80200ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200b2:	b09b      	sub	sp, #108	; 0x6c
 80200b4:	920b      	str	r2, [sp, #44]	; 0x2c
 80200b6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80200b8:	9019      	str	r0, [sp, #100]	; 0x64
 80200ba:	9109      	str	r1, [sp, #36]	; 0x24
 80200bc:	6850      	ldr	r0, [r2, #4]
 80200be:	9306      	str	r3, [sp, #24]
 80200c0:	6812      	ldr	r2, [r2, #0]
 80200c2:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80200c6:	e9dd b425 	ldrd	fp, r4, [sp, #148]	; 0x94
 80200ca:	fb00 1303 	mla	r3, r0, r3, r1
 80200ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80200d2:	18d3      	adds	r3, r2, r3
 80200d4:	9307      	str	r3, [sp, #28]
 80200d6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80200d8:	681b      	ldr	r3, [r3, #0]
 80200da:	9308      	str	r3, [sp, #32]
 80200dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80200de:	2b00      	cmp	r3, #0
 80200e0:	dc03      	bgt.n	80200ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80200e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80200e4:	2b00      	cmp	r3, #0
 80200e6:	f340 81ab 	ble.w	8020440 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80200ea:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80200ec:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80200f0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80200f4:	1e48      	subs	r0, r1, #1
 80200f6:	1e55      	subs	r5, r2, #1
 80200f8:	9b06      	ldr	r3, [sp, #24]
 80200fa:	2b00      	cmp	r3, #0
 80200fc:	f340 80b1 	ble.w	8020262 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8020100:	ea5f 462b 	movs.w	r6, fp, asr #16
 8020104:	ea4f 4324 	mov.w	r3, r4, asr #16
 8020108:	d406      	bmi.n	8020118 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802010a:	4286      	cmp	r6, r0
 802010c:	da04      	bge.n	8020118 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802010e:	2b00      	cmp	r3, #0
 8020110:	db02      	blt.n	8020118 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020112:	42ab      	cmp	r3, r5
 8020114:	f2c0 80a6 	blt.w	8020264 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8020118:	3601      	adds	r6, #1
 802011a:	f100 8097 	bmi.w	802024c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 802011e:	42b1      	cmp	r1, r6
 8020120:	f2c0 8094 	blt.w	802024c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8020124:	3301      	adds	r3, #1
 8020126:	f100 8091 	bmi.w	802024c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 802012a:	429a      	cmp	r2, r3
 802012c:	f2c0 808e 	blt.w	802024c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8020130:	9b06      	ldr	r3, [sp, #24]
 8020132:	9e07      	ldr	r6, [sp, #28]
 8020134:	930a      	str	r3, [sp, #40]	; 0x28
 8020136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020138:	2b00      	cmp	r3, #0
 802013a:	f340 80b0 	ble.w	802029e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 802013e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8020140:	1425      	asrs	r5, r4, #16
 8020142:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020144:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8020148:	68c7      	ldr	r7, [r0, #12]
 802014a:	ea5f 402b 	movs.w	r0, fp, asr #16
 802014e:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8020152:	689b      	ldr	r3, [r3, #8]
 8020154:	f100 80ea 	bmi.w	802032c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020158:	f103 3cff 	add.w	ip, r3, #4294967295
 802015c:	4560      	cmp	r0, ip
 802015e:	f280 80e5 	bge.w	802032c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020162:	2d00      	cmp	r5, #0
 8020164:	f2c0 80e2 	blt.w	802032c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020168:	f107 3cff 	add.w	ip, r7, #4294967295
 802016c:	4565      	cmp	r5, ip
 802016e:	f280 80dd 	bge.w	802032c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020172:	b21b      	sxth	r3, r3
 8020174:	fb05 0003 	mla	r0, r5, r3, r0
 8020178:	9d08      	ldr	r5, [sp, #32]
 802017a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802017e:	182f      	adds	r7, r5, r0
 8020180:	5c2d      	ldrb	r5, [r5, r0]
 8020182:	7878      	ldrb	r0, [r7, #1]
 8020184:	f897 e002 	ldrb.w	lr, [r7, #2]
 8020188:	900c      	str	r0, [sp, #48]	; 0x30
 802018a:	f897 9003 	ldrb.w	r9, [r7, #3]
 802018e:	f897 8004 	ldrb.w	r8, [r7, #4]
 8020192:	f897 a005 	ldrb.w	sl, [r7, #5]
 8020196:	b1c9      	cbz	r1, 80201cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8020198:	f04f 0c03 	mov.w	ip, #3
 802019c:	f06f 0004 	mvn.w	r0, #4
 80201a0:	3705      	adds	r7, #5
 80201a2:	fb13 030c 	smlabb	r3, r3, ip, r0
 80201a6:	eb07 0c03 	add.w	ip, r7, r3
 80201aa:	5cfb      	ldrb	r3, [r7, r3]
 80201ac:	930d      	str	r3, [sp, #52]	; 0x34
 80201ae:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80201b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80201b4:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80201b8:	9311      	str	r3, [sp, #68]	; 0x44
 80201ba:	f89c 3003 	ldrb.w	r3, [ip, #3]
 80201be:	930e      	str	r3, [sp, #56]	; 0x38
 80201c0:	f89c 3004 	ldrb.w	r3, [ip, #4]
 80201c4:	9310      	str	r3, [sp, #64]	; 0x40
 80201c6:	f89c 3005 	ldrb.w	r3, [ip, #5]
 80201ca:	9312      	str	r3, [sp, #72]	; 0x48
 80201cc:	b292      	uxth	r2, r2
 80201ce:	980c      	ldr	r0, [sp, #48]	; 0x30
 80201d0:	b289      	uxth	r1, r1
 80201d2:	fb02 f301 	mul.w	r3, r2, r1
 80201d6:	0112      	lsls	r2, r2, #4
 80201d8:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80201dc:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80201e0:	1ad2      	subs	r2, r2, r3
 80201e2:	b289      	uxth	r1, r1
 80201e4:	b292      	uxth	r2, r2
 80201e6:	1a7f      	subs	r7, r7, r1
 80201e8:	fb02 f909 	mul.w	r9, r2, r9
 80201ec:	b2bf      	uxth	r7, r7
 80201ee:	fb02 f808 	mul.w	r8, r2, r8
 80201f2:	fb02 fa0a 	mul.w	sl, r2, sl
 80201f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80201f8:	fb07 9905 	mla	r9, r7, r5, r9
 80201fc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80201fe:	fb07 8800 	mla	r8, r7, r0, r8
 8020202:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020204:	fb07 aa0e 	mla	sl, r7, lr, sl
 8020208:	fb01 9905 	mla	r9, r1, r5, r9
 802020c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802020e:	fb01 8800 	mla	r8, r1, r0, r8
 8020212:	9810      	ldr	r0, [sp, #64]	; 0x40
 8020214:	fb01 a102 	mla	r1, r1, r2, sl
 8020218:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802021a:	fb03 9905 	mla	r9, r3, r5, r9
 802021e:	fb03 8800 	mla	r8, r3, r0, r8
 8020222:	fb03 1302 	mla	r3, r3, r2, r1
 8020226:	ea4f 2929 	mov.w	r9, r9, asr #8
 802022a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802022e:	121b      	asrs	r3, r3, #8
 8020230:	f886 9000 	strb.w	r9, [r6]
 8020234:	f886 8001 	strb.w	r8, [r6, #1]
 8020238:	70b3      	strb	r3, [r6, #2]
 802023a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802023c:	3603      	adds	r6, #3
 802023e:	449b      	add	fp, r3
 8020240:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020242:	441c      	add	r4, r3
 8020244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020246:	3b01      	subs	r3, #1
 8020248:	930a      	str	r3, [sp, #40]	; 0x28
 802024a:	e774      	b.n	8020136 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802024c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802024e:	449b      	add	fp, r3
 8020250:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020252:	441c      	add	r4, r3
 8020254:	9b06      	ldr	r3, [sp, #24]
 8020256:	3b01      	subs	r3, #1
 8020258:	9306      	str	r3, [sp, #24]
 802025a:	9b07      	ldr	r3, [sp, #28]
 802025c:	3303      	adds	r3, #3
 802025e:	9307      	str	r3, [sp, #28]
 8020260:	e74a      	b.n	80200f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8020262:	d024      	beq.n	80202ae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8020264:	9b06      	ldr	r3, [sp, #24]
 8020266:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8020268:	3b01      	subs	r3, #1
 802026a:	fb00 b003 	mla	r0, r0, r3, fp
 802026e:	1400      	asrs	r0, r0, #16
 8020270:	f53f af5e 	bmi.w	8020130 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8020274:	3901      	subs	r1, #1
 8020276:	4288      	cmp	r0, r1
 8020278:	f6bf af5a 	bge.w	8020130 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802027c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802027e:	fb01 4303 	mla	r3, r1, r3, r4
 8020282:	141b      	asrs	r3, r3, #16
 8020284:	f53f af54 	bmi.w	8020130 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8020288:	3a01      	subs	r2, #1
 802028a:	4293      	cmp	r3, r2
 802028c:	f6bf af50 	bge.w	8020130 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8020290:	9b07      	ldr	r3, [sp, #28]
 8020292:	f8dd e018 	ldr.w	lr, [sp, #24]
 8020296:	1cde      	adds	r6, r3, #3
 8020298:	f1be 0f00 	cmp.w	lr, #0
 802029c:	dc5f      	bgt.n	802035e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802029e:	9b06      	ldr	r3, [sp, #24]
 80202a0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80202a4:	9b07      	ldr	r3, [sp, #28]
 80202a6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80202aa:	4423      	add	r3, r4
 80202ac:	9307      	str	r3, [sp, #28]
 80202ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80202b0:	2b00      	cmp	r3, #0
 80202b2:	f340 80c5 	ble.w	8020440 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80202b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80202ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80202bc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80202c0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80202c4:	eef0 6a62 	vmov.f32	s13, s5
 80202c8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80202cc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80202d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80202d4:	ee16 ba90 	vmov	fp, s13
 80202d8:	eef0 6a43 	vmov.f32	s13, s6
 80202dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80202e0:	ee16 4a90 	vmov	r4, s13
 80202e4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80202e8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80202ec:	ee77 2a62 	vsub.f32	s5, s14, s5
 80202f0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80202f4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80202f8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80202fc:	ee12 2a90 	vmov	r2, s5
 8020300:	eef0 2a47 	vmov.f32	s5, s14
 8020304:	fb92 f3f3 	sdiv	r3, r2, r3
 8020308:	ee13 2a10 	vmov	r2, s6
 802030c:	9327      	str	r3, [sp, #156]	; 0x9c
 802030e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020310:	eeb0 3a67 	vmov.f32	s6, s15
 8020314:	fb92 f3f3 	sdiv	r3, r2, r3
 8020318:	9328      	str	r3, [sp, #160]	; 0xa0
 802031a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802031c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802031e:	3b01      	subs	r3, #1
 8020320:	9309      	str	r3, [sp, #36]	; 0x24
 8020322:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020324:	bf08      	it	eq
 8020326:	4613      	moveq	r3, r2
 8020328:	9306      	str	r3, [sp, #24]
 802032a:	e6d7      	b.n	80200dc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802032c:	f110 0c01 	adds.w	ip, r0, #1
 8020330:	d483      	bmi.n	802023a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8020332:	4563      	cmp	r3, ip
 8020334:	db81      	blt.n	802023a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8020336:	f115 0c01 	adds.w	ip, r5, #1
 802033a:	f53f af7e 	bmi.w	802023a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 802033e:	4567      	cmp	r7, ip
 8020340:	f6ff af7b 	blt.w	802023a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8020344:	b23f      	sxth	r7, r7
 8020346:	b21b      	sxth	r3, r3
 8020348:	9700      	str	r7, [sp, #0]
 802034a:	e9cd 2103 	strd	r2, r1, [sp, #12]
 802034e:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8020352:	9a08      	ldr	r2, [sp, #32]
 8020354:	4631      	mov	r1, r6
 8020356:	9819      	ldr	r0, [sp, #100]	; 0x64
 8020358:	f7ff fdf9 	bl	801ff4e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 802035c:	e76d      	b.n	802023a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 802035e:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8020360:	ea4f 402b 	mov.w	r0, fp, asr #16
 8020364:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8020368:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802036c:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8020370:	1421      	asrs	r1, r4, #16
 8020372:	930a      	str	r3, [sp, #40]	; 0x28
 8020374:	fb0c 0101 	mla	r1, ip, r1, r0
 8020378:	9808      	ldr	r0, [sp, #32]
 802037a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802037e:	1845      	adds	r5, r0, r1
 8020380:	5c40      	ldrb	r0, [r0, r1]
 8020382:	796f      	ldrb	r7, [r5, #5]
 8020384:	7869      	ldrb	r1, [r5, #1]
 8020386:	f895 8002 	ldrb.w	r8, [r5, #2]
 802038a:	f895 a003 	ldrb.w	sl, [r5, #3]
 802038e:	f895 9004 	ldrb.w	r9, [r5, #4]
 8020392:	970c      	str	r7, [sp, #48]	; 0x30
 8020394:	b1a2      	cbz	r2, 80203c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8020396:	2703      	movs	r7, #3
 8020398:	f06f 0304 	mvn.w	r3, #4
 802039c:	3505      	adds	r5, #5
 802039e:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 80203a2:	eb05 070c 	add.w	r7, r5, ip
 80203a6:	f815 500c 	ldrb.w	r5, [r5, ip]
 80203aa:	9513      	str	r5, [sp, #76]	; 0x4c
 80203ac:	787d      	ldrb	r5, [r7, #1]
 80203ae:	9515      	str	r5, [sp, #84]	; 0x54
 80203b0:	78bd      	ldrb	r5, [r7, #2]
 80203b2:	9517      	str	r5, [sp, #92]	; 0x5c
 80203b4:	78fd      	ldrb	r5, [r7, #3]
 80203b6:	9514      	str	r5, [sp, #80]	; 0x50
 80203b8:	793d      	ldrb	r5, [r7, #4]
 80203ba:	9516      	str	r5, [sp, #88]	; 0x58
 80203bc:	797d      	ldrb	r5, [r7, #5]
 80203be:	9518      	str	r5, [sp, #96]	; 0x60
 80203c0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80203c4:	b292      	uxth	r2, r2
 80203c6:	3603      	adds	r6, #3
 80203c8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80203cc:	fb03 f502 	mul.w	r5, r3, r2
 80203d0:	011b      	lsls	r3, r3, #4
 80203d2:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 80203d6:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80203da:	1b5b      	subs	r3, r3, r5
 80203dc:	b292      	uxth	r2, r2
 80203de:	b29b      	uxth	r3, r3
 80203e0:	1abf      	subs	r7, r7, r2
 80203e2:	fb03 f909 	mul.w	r9, r3, r9
 80203e6:	b2bf      	uxth	r7, r7
 80203e8:	fb03 fa0a 	mul.w	sl, r3, sl
 80203ec:	fb07 9901 	mla	r9, r7, r1, r9
 80203f0:	9915      	ldr	r1, [sp, #84]	; 0x54
 80203f2:	fb07 aa00 	mla	sl, r7, r0, sl
 80203f6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80203f8:	fb02 9901 	mla	r9, r2, r1, r9
 80203fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80203fe:	fb02 aa00 	mla	sl, r2, r0, sl
 8020402:	9814      	ldr	r0, [sp, #80]	; 0x50
 8020404:	fb05 9901 	mla	r9, r5, r1, r9
 8020408:	990c      	ldr	r1, [sp, #48]	; 0x30
 802040a:	fb05 aa00 	mla	sl, r5, r0, sl
 802040e:	434b      	muls	r3, r1
 8020410:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8020412:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020416:	fb07 3308 	mla	r3, r7, r8, r3
 802041a:	ea4f 2929 	mov.w	r9, r9, asr #8
 802041e:	f806 ac06 	strb.w	sl, [r6, #-6]
 8020422:	fb02 3201 	mla	r2, r2, r1, r3
 8020426:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020428:	f806 9c05 	strb.w	r9, [r6, #-5]
 802042c:	fb05 2503 	mla	r5, r5, r3, r2
 8020430:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020432:	122d      	asrs	r5, r5, #8
 8020434:	449b      	add	fp, r3
 8020436:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020438:	f806 5c04 	strb.w	r5, [r6, #-4]
 802043c:	441c      	add	r4, r3
 802043e:	e72b      	b.n	8020298 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8020440:	b01b      	add	sp, #108	; 0x6c
 8020442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020446 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8020446:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802044a:	b087      	sub	sp, #28
 802044c:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 8020450:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8020454:	fb05 7003 	mla	r0, r5, r3, r7
 8020458:	2d00      	cmp	r5, #0
 802045a:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 802045e:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 8020462:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8020466:	f2c0 811f 	blt.w	80206a8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 802046a:	45a8      	cmp	r8, r5
 802046c:	f340 811c 	ble.w	80206a8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8020470:	2f00      	cmp	r7, #0
 8020472:	f2c0 8117 	blt.w	80206a4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8020476:	42bb      	cmp	r3, r7
 8020478:	f340 8114 	ble.w	80206a4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 802047c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8020480:	1c7a      	adds	r2, r7, #1
 8020482:	f100 8114 	bmi.w	80206ae <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8020486:	4293      	cmp	r3, r2
 8020488:	f340 8111 	ble.w	80206ae <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 802048c:	2c00      	cmp	r4, #0
 802048e:	f000 8110 	beq.w	80206b2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 8020492:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8020496:	3501      	adds	r5, #1
 8020498:	f100 810f 	bmi.w	80206ba <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 802049c:	45a8      	cmp	r8, r5
 802049e:	f340 810c 	ble.w	80206ba <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 80204a2:	f1be 0f00 	cmp.w	lr, #0
 80204a6:	f000 810b 	beq.w	80206c0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 80204aa:	2f00      	cmp	r7, #0
 80204ac:	f2c0 8103 	blt.w	80206b6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 80204b0:	42bb      	cmp	r3, r7
 80204b2:	f340 8100 	ble.w	80206b6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 80204b6:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 80204ba:	3701      	adds	r7, #1
 80204bc:	f100 8103 	bmi.w	80206c6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 80204c0:	42bb      	cmp	r3, r7
 80204c2:	f340 8100 	ble.w	80206c6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 80204c6:	2c00      	cmp	r4, #0
 80204c8:	f000 80ff 	beq.w	80206ca <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 80204cc:	3301      	adds	r3, #1
 80204ce:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80204d2:	fa1f fc84 	uxth.w	ip, r4
 80204d6:	fa1f fe8e 	uxth.w	lr, lr
 80204da:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80204de:	fb0c f90e 	mul.w	r9, ip, lr
 80204e2:	0e13      	lsrs	r3, r2, #24
 80204e4:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80204e8:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 80204ec:	9302      	str	r3, [sp, #8]
 80204ee:	ebac 0709 	sub.w	r7, ip, r9
 80204f2:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 80204f6:	fa1f f48e 	uxth.w	r4, lr
 80204fa:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 80204fe:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020502:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8020506:	fb0a fe0e 	mul.w	lr, sl, lr
 802050a:	1b1b      	subs	r3, r3, r4
 802050c:	fb0a f606 	mul.w	r6, sl, r6
 8020510:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8020514:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8020518:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802051c:	b29b      	uxth	r3, r3
 802051e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020522:	b2bf      	uxth	r7, r7
 8020524:	9301      	str	r3, [sp, #4]
 8020526:	44e6      	add	lr, ip
 8020528:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 802052c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020530:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8020534:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 8020538:	9303      	str	r3, [sp, #12]
 802053a:	0a33      	lsrs	r3, r6, #8
 802053c:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 8020540:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020544:	9304      	str	r3, [sp, #16]
 8020546:	fb0b f606 	mul.w	r6, fp, r6
 802054a:	fb0b f000 	mul.w	r0, fp, r0
 802054e:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8020552:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8020556:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802055a:	44b6      	add	lr, r6
 802055c:	f500 7680 	add.w	r6, r0, #256	; 0x100
 8020560:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8020564:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 8020568:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802056c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020570:	fb08 f606 	mul.w	r6, r8, r6
 8020574:	0a03      	lsrs	r3, r0, #8
 8020576:	fb08 f505 	mul.w	r5, r8, r5
 802057a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802057e:	0a30      	lsrs	r0, r6, #8
 8020580:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8020584:	9305      	str	r3, [sp, #20]
 8020586:	0e13      	lsrs	r3, r2, #24
 8020588:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802058c:	fb0e fe07 	mul.w	lr, lr, r7
 8020590:	4430      	add	r0, r6
 8020592:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8020596:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 802059a:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 802059e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80205a2:	0a00      	lsrs	r0, r0, #8
 80205a4:	435e      	muls	r6, r3
 80205a6:	0a2d      	lsrs	r5, r5, #8
 80205a8:	435a      	muls	r2, r3
 80205aa:	9b03      	ldr	r3, [sp, #12]
 80205ac:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 80205b0:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80205b4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80205b8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80205bc:	44b4      	add	ip, r6
 80205be:	f502 7680 	add.w	r6, r2, #256	; 0x100
 80205c2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80205c6:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 80205ca:	9e01      	ldr	r6, [sp, #4]
 80205cc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80205d0:	fb03 ee06 	mla	lr, r3, r6, lr
 80205d4:	9b04      	ldr	r3, [sp, #16]
 80205d6:	0a12      	lsrs	r2, r2, #8
 80205d8:	fb0c ee09 	mla	lr, ip, r9, lr
 80205dc:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 80205e0:	9b05      	ldr	r3, [sp, #20]
 80205e2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80205e6:	fb00 ee04 	mla	lr, r0, r4, lr
 80205ea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80205ee:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 80205f2:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 80205f6:	9b01      	ldr	r3, [sp, #4]
 80205f8:	fb07 fe0e 	mul.w	lr, r7, lr
 80205fc:	fb07 f70b 	mul.w	r7, r7, fp
 8020600:	fb03 ee06 	mla	lr, r3, r6, lr
 8020604:	fb03 730a 	mla	r3, r3, sl, r7
 8020608:	fb09 e202 	mla	r2, r9, r2, lr
 802060c:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8020610:	fb04 2e0e 	mla	lr, r4, lr, r2
 8020614:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8020618:	fb04 3408 	mla	r4, r4, r8, r3
 802061c:	9b02      	ldr	r3, [sp, #8]
 802061e:	b292      	uxth	r2, r2
 8020620:	fb09 4903 	mla	r9, r9, r3, r4
 8020624:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020628:	f3c9 2907 	ubfx	r9, r9, #8, #8
 802062c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020630:	fb09 f902 	mul.w	r9, r9, r2
 8020634:	ea40 0e0e 	orr.w	lr, r0, lr
 8020638:	f109 0301 	add.w	r3, r9, #1
 802063c:	fa5f f08e 	uxtb.w	r0, lr
 8020640:	fb10 f002 	smulbb	r0, r0, r2
 8020644:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8020648:	780b      	ldrb	r3, [r1, #0]
 802064a:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 802064e:	fa5f f989 	uxtb.w	r9, r9
 8020652:	fb03 0309 	mla	r3, r3, r9, r0
 8020656:	b29b      	uxth	r3, r3
 8020658:	1c58      	adds	r0, r3, #1
 802065a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802065e:	7848      	ldrb	r0, [r1, #1]
 8020660:	fb10 f009 	smulbb	r0, r0, r9
 8020664:	121b      	asrs	r3, r3, #8
 8020666:	700b      	strb	r3, [r1, #0]
 8020668:	f3ce 2307 	ubfx	r3, lr, #8, #8
 802066c:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8020670:	fb03 0302 	mla	r3, r3, r2, r0
 8020674:	b29b      	uxth	r3, r3
 8020676:	1c58      	adds	r0, r3, #1
 8020678:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802067c:	121b      	asrs	r3, r3, #8
 802067e:	704b      	strb	r3, [r1, #1]
 8020680:	788b      	ldrb	r3, [r1, #2]
 8020682:	fb13 f909 	smulbb	r9, r3, r9
 8020686:	fb0e 9e02 	mla	lr, lr, r2, r9
 802068a:	fa1f fe8e 	uxth.w	lr, lr
 802068e:	f10e 0301 	add.w	r3, lr, #1
 8020692:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8020696:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802069a:	f881 e002 	strb.w	lr, [r1, #2]
 802069e:	b007      	add	sp, #28
 80206a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206a4:	2600      	movs	r6, #0
 80206a6:	e6eb      	b.n	8020480 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 80206a8:	2000      	movs	r0, #0
 80206aa:	4606      	mov	r6, r0
 80206ac:	e6f3      	b.n	8020496 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 80206ae:	2000      	movs	r0, #0
 80206b0:	e6f1      	b.n	8020496 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 80206b2:	4620      	mov	r0, r4
 80206b4:	e6ef      	b.n	8020496 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 80206b6:	2500      	movs	r5, #0
 80206b8:	e6ff      	b.n	80204ba <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 80206ba:	2200      	movs	r2, #0
 80206bc:	4615      	mov	r5, r2
 80206be:	e708      	b.n	80204d2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80206c0:	4672      	mov	r2, lr
 80206c2:	4675      	mov	r5, lr
 80206c4:	e705      	b.n	80204d2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80206c6:	2200      	movs	r2, #0
 80206c8:	e703      	b.n	80204d2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80206ca:	4622      	mov	r2, r4
 80206cc:	e701      	b.n	80204d2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

080206ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80206ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206d2:	b09d      	sub	sp, #116	; 0x74
 80206d4:	9219      	str	r2, [sp, #100]	; 0x64
 80206d6:	9307      	str	r3, [sp, #28]
 80206d8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80206da:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 80206de:	901b      	str	r0, [sp, #108]	; 0x6c
 80206e0:	931a      	str	r3, [sp, #104]	; 0x68
 80206e2:	6850      	ldr	r0, [r2, #4]
 80206e4:	9117      	str	r1, [sp, #92]	; 0x5c
 80206e6:	6812      	ldr	r2, [r2, #0]
 80206e8:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80206ec:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 80206f0:	fb00 1303 	mla	r3, r0, r3, r1
 80206f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80206f8:	18d3      	adds	r3, r2, r3
 80206fa:	930a      	str	r3, [sp, #40]	; 0x28
 80206fc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80206fe:	681b      	ldr	r3, [r3, #0]
 8020700:	9310      	str	r3, [sp, #64]	; 0x40
 8020702:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8020706:	930b      	str	r3, [sp, #44]	; 0x2c
 8020708:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802070a:	2b00      	cmp	r3, #0
 802070c:	dc03      	bgt.n	8020716 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802070e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020710:	2b00      	cmp	r3, #0
 8020712:	f340 8368 	ble.w	8020de6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8020716:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020718:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802071c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020720:	1e48      	subs	r0, r1, #1
 8020722:	1e57      	subs	r7, r2, #1
 8020724:	9b07      	ldr	r3, [sp, #28]
 8020726:	2b00      	cmp	r3, #0
 8020728:	f340 8187 	ble.w	8020a3a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802072c:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8020730:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020734:	d406      	bmi.n	8020744 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020736:	4584      	cmp	ip, r0
 8020738:	da04      	bge.n	8020744 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802073a:	2b00      	cmp	r3, #0
 802073c:	db02      	blt.n	8020744 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802073e:	42bb      	cmp	r3, r7
 8020740:	f2c0 817c 	blt.w	8020a3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8020744:	f11c 0c01 	adds.w	ip, ip, #1
 8020748:	f100 816c 	bmi.w	8020a24 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802074c:	4561      	cmp	r1, ip
 802074e:	f2c0 8169 	blt.w	8020a24 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8020752:	3301      	adds	r3, #1
 8020754:	f100 8166 	bmi.w	8020a24 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8020758:	429a      	cmp	r2, r3
 802075a:	f2c0 8163 	blt.w	8020a24 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802075e:	9b07      	ldr	r3, [sp, #28]
 8020760:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8020762:	9318      	str	r3, [sp, #96]	; 0x60
 8020764:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020766:	2b00      	cmp	r3, #0
 8020768:	f340 8186 	ble.w	8020a78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 802076c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802076e:	142a      	asrs	r2, r5, #16
 8020770:	ea4f 4026 	mov.w	r0, r6, asr #16
 8020774:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020778:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802077c:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8020780:	f100 81cb 	bmi.w	8020b1a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8020784:	f10e 38ff 	add.w	r8, lr, #4294967295
 8020788:	4542      	cmp	r2, r8
 802078a:	f280 81c6 	bge.w	8020b1a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802078e:	2800      	cmp	r0, #0
 8020790:	f2c0 81c3 	blt.w	8020b1a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8020794:	f103 38ff 	add.w	r8, r3, #4294967295
 8020798:	4540      	cmp	r0, r8
 802079a:	f280 81be 	bge.w	8020b1a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802079e:	fa0f f38e 	sxth.w	r3, lr
 80207a2:	fb00 2203 	mla	r2, r0, r3, r2
 80207a6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80207a8:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 80207ac:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80207b0:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80207b4:	2900      	cmp	r1, #0
 80207b6:	f000 81a6 	beq.w	8020b06 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 80207ba:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80207be:	900c      	str	r0, [sp, #48]	; 0x30
 80207c0:	0e00      	lsrs	r0, r0, #24
 80207c2:	9013      	str	r0, [sp, #76]	; 0x4c
 80207c4:	f1bc 0f00 	cmp.w	ip, #0
 80207c8:	d00f      	beq.n	80207ea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80207ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80207ce:	3b01      	subs	r3, #1
 80207d0:	009b      	lsls	r3, r3, #2
 80207d2:	3304      	adds	r3, #4
 80207d4:	eb08 0003 	add.w	r0, r8, r3
 80207d8:	f858 3003 	ldr.w	r3, [r8, r3]
 80207dc:	9308      	str	r3, [sp, #32]
 80207de:	0e1b      	lsrs	r3, r3, #24
 80207e0:	9311      	str	r3, [sp, #68]	; 0x44
 80207e2:	6843      	ldr	r3, [r0, #4]
 80207e4:	930d      	str	r3, [sp, #52]	; 0x34
 80207e6:	0e1b      	lsrs	r3, r3, #24
 80207e8:	9314      	str	r3, [sp, #80]	; 0x50
 80207ea:	b289      	uxth	r1, r1
 80207ec:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80207ee:	fa1f fc8c 	uxth.w	ip, ip
 80207f2:	0108      	lsls	r0, r1, #4
 80207f4:	fb01 f90c 	mul.w	r9, r1, ip
 80207f8:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80207fc:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 8020800:	eba0 0809 	sub.w	r8, r0, r9
 8020804:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020806:	fa1f f18c 	uxth.w	r1, ip
 802080a:	fa1f f888 	uxth.w	r8, r8
 802080e:	1a5b      	subs	r3, r3, r1
 8020810:	fb08 f000 	mul.w	r0, r8, r0
 8020814:	b29b      	uxth	r3, r3
 8020816:	fb03 000e 	mla	r0, r3, lr, r0
 802081a:	fb01 0004 	mla	r0, r1, r4, r0
 802081e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020820:	fb09 0004 	mla	r0, r9, r4, r0
 8020824:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020828:	2800      	cmp	r0, #0
 802082a:	f000 80f2 	beq.w	8020a12 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802082e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020832:	d01b      	beq.n	802086c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8020834:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8020838:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802083c:	fb0e fa0a 	mul.w	sl, lr, sl
 8020840:	fb0e fe02 	mul.w	lr, lr, r2
 8020844:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8020848:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802084c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8020850:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020854:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020858:	4452      	add	r2, sl
 802085a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802085e:	0a12      	lsrs	r2, r2, #8
 8020860:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020864:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020868:	ea42 020c 	orr.w	r2, r2, ip
 802086c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802086e:	2cff      	cmp	r4, #255	; 0xff
 8020870:	d021      	beq.n	80208b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020872:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020874:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020878:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802087a:	fb04 fb0b 	mul.w	fp, r4, fp
 802087e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020880:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020884:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020886:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802088a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802088e:	fb04 fa0a 	mul.w	sl, r4, sl
 8020892:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020896:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802089a:	44de      	add	lr, fp
 802089c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80208a0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80208a4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80208a8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80208ac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80208b0:	ea4e 040a 	orr.w	r4, lr, sl
 80208b4:	940c      	str	r4, [sp, #48]	; 0x30
 80208b6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80208b8:	2cff      	cmp	r4, #255	; 0xff
 80208ba:	d021      	beq.n	8020900 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 80208bc:	9c08      	ldr	r4, [sp, #32]
 80208be:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80208c2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80208c4:	fb04 fb0b 	mul.w	fp, r4, fp
 80208c8:	9c08      	ldr	r4, [sp, #32]
 80208ca:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80208ce:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80208d0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80208d4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80208d8:	fb04 fa0a 	mul.w	sl, r4, sl
 80208dc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80208e0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80208e4:	44de      	add	lr, fp
 80208e6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80208ea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80208ee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80208f2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80208f6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80208fa:	ea4e 040a 	orr.w	r4, lr, sl
 80208fe:	9408      	str	r4, [sp, #32]
 8020900:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020902:	2cff      	cmp	r4, #255	; 0xff
 8020904:	d021      	beq.n	802094a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8020906:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020908:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802090c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802090e:	fb04 fb0b 	mul.w	fp, r4, fp
 8020912:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020914:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020918:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802091a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802091e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020922:	fb04 fa0a 	mul.w	sl, r4, sl
 8020926:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802092a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802092e:	44de      	add	lr, fp
 8020930:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020934:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020938:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802093c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020940:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020944:	ea4e 040a 	orr.w	r4, lr, sl
 8020948:	940d      	str	r4, [sp, #52]	; 0x34
 802094a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802094c:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8020950:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020954:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020958:	9c08      	ldr	r4, [sp, #32]
 802095a:	fb08 fc0c 	mul.w	ip, r8, ip
 802095e:	fb03 cc0e 	mla	ip, r3, lr, ip
 8020962:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020966:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020968:	fb01 cc0e 	mla	ip, r1, lr, ip
 802096c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020970:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020972:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020976:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802097a:	fb08 f80e 	mul.w	r8, r8, lr
 802097e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020982:	fb03 8202 	mla	r2, r3, r2, r8
 8020986:	9b08      	ldr	r3, [sp, #32]
 8020988:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802098c:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8020990:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020992:	fb01 220a 	mla	r2, r1, sl, r2
 8020996:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 802099a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802099c:	fb09 2901 	mla	r9, r9, r1, r2
 80209a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80209a2:	4343      	muls	r3, r0
 80209a4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80209a8:	1c58      	adds	r0, r3, #1
 80209aa:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80209ae:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80209b2:	783b      	ldrb	r3, [r7, #0]
 80209b4:	ea4c 0c09 	orr.w	ip, ip, r9
 80209b8:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80209bc:	fa5f f28c 	uxtb.w	r2, ip
 80209c0:	b2c0      	uxtb	r0, r0
 80209c2:	fb12 f201 	smulbb	r2, r2, r1
 80209c6:	fb03 2300 	mla	r3, r3, r0, r2
 80209ca:	b29b      	uxth	r3, r3
 80209cc:	1c5a      	adds	r2, r3, #1
 80209ce:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80209d2:	787a      	ldrb	r2, [r7, #1]
 80209d4:	fb12 f200 	smulbb	r2, r2, r0
 80209d8:	121b      	asrs	r3, r3, #8
 80209da:	703b      	strb	r3, [r7, #0]
 80209dc:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80209e0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80209e4:	fb03 2301 	mla	r3, r3, r1, r2
 80209e8:	b29b      	uxth	r3, r3
 80209ea:	1c5a      	adds	r2, r3, #1
 80209ec:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80209f0:	121b      	asrs	r3, r3, #8
 80209f2:	707b      	strb	r3, [r7, #1]
 80209f4:	78bb      	ldrb	r3, [r7, #2]
 80209f6:	fb13 f000 	smulbb	r0, r3, r0
 80209fa:	fb0c 0c01 	mla	ip, ip, r1, r0
 80209fe:	fa1f fc8c 	uxth.w	ip, ip
 8020a02:	f10c 0301 	add.w	r3, ip, #1
 8020a06:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8020a0a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020a0e:	f887 c002 	strb.w	ip, [r7, #2]
 8020a12:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020a14:	3703      	adds	r7, #3
 8020a16:	441d      	add	r5, r3
 8020a18:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020a1a:	441e      	add	r6, r3
 8020a1c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020a1e:	3b01      	subs	r3, #1
 8020a20:	9318      	str	r3, [sp, #96]	; 0x60
 8020a22:	e69f      	b.n	8020764 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020a24:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020a26:	441d      	add	r5, r3
 8020a28:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020a2a:	441e      	add	r6, r3
 8020a2c:	9b07      	ldr	r3, [sp, #28]
 8020a2e:	3b01      	subs	r3, #1
 8020a30:	9307      	str	r3, [sp, #28]
 8020a32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020a34:	3303      	adds	r3, #3
 8020a36:	930a      	str	r3, [sp, #40]	; 0x28
 8020a38:	e674      	b.n	8020724 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8020a3a:	d025      	beq.n	8020a88 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8020a3c:	9b07      	ldr	r3, [sp, #28]
 8020a3e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8020a40:	3b01      	subs	r3, #1
 8020a42:	fb00 5003 	mla	r0, r0, r3, r5
 8020a46:	1400      	asrs	r0, r0, #16
 8020a48:	f53f ae89 	bmi.w	802075e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020a4c:	3901      	subs	r1, #1
 8020a4e:	4288      	cmp	r0, r1
 8020a50:	f6bf ae85 	bge.w	802075e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020a54:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8020a56:	fb01 6303 	mla	r3, r1, r3, r6
 8020a5a:	141b      	asrs	r3, r3, #16
 8020a5c:	f53f ae7f 	bmi.w	802075e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020a60:	3a01      	subs	r2, #1
 8020a62:	4293      	cmp	r3, r2
 8020a64:	f6bf ae7b 	bge.w	802075e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020a6a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8020a6e:	f103 0e03 	add.w	lr, r3, #3
 8020a72:	f1bb 0f00 	cmp.w	fp, #0
 8020a76:	dc6e      	bgt.n	8020b56 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8020a78:	9b07      	ldr	r3, [sp, #28]
 8020a7a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020a80:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020a84:	4423      	add	r3, r4
 8020a86:	930a      	str	r3, [sp, #40]	; 0x28
 8020a88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020a8a:	2b00      	cmp	r3, #0
 8020a8c:	f340 81ab 	ble.w	8020de6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8020a90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020a94:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020a96:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020a9a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020a9e:	eef0 6a62 	vmov.f32	s13, s5
 8020aa2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020aa6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020aaa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020aae:	ee16 5a90 	vmov	r5, s13
 8020ab2:	eef0 6a43 	vmov.f32	s13, s6
 8020ab6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020aba:	ee16 6a90 	vmov	r6, s13
 8020abe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020ac2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020ac6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020aca:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020ace:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020ad2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020ad6:	ee12 2a90 	vmov	r2, s5
 8020ada:	eef0 2a47 	vmov.f32	s5, s14
 8020ade:	fb92 f3f3 	sdiv	r3, r2, r3
 8020ae2:	ee13 2a10 	vmov	r2, s6
 8020ae6:	9329      	str	r3, [sp, #164]	; 0xa4
 8020ae8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020aea:	eeb0 3a67 	vmov.f32	s6, s15
 8020aee:	fb92 f3f3 	sdiv	r3, r2, r3
 8020af2:	932a      	str	r3, [sp, #168]	; 0xa8
 8020af4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020af6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8020af8:	3b01      	subs	r3, #1
 8020afa:	9317      	str	r3, [sp, #92]	; 0x5c
 8020afc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020afe:	bf08      	it	eq
 8020b00:	4613      	moveq	r3, r2
 8020b02:	9307      	str	r3, [sp, #28]
 8020b04:	e600      	b.n	8020708 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8020b06:	f1bc 0f00 	cmp.w	ip, #0
 8020b0a:	f43f ae6e 	beq.w	80207ea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8020b0e:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8020b12:	9308      	str	r3, [sp, #32]
 8020b14:	0e1b      	lsrs	r3, r3, #24
 8020b16:	9311      	str	r3, [sp, #68]	; 0x44
 8020b18:	e667      	b.n	80207ea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8020b1a:	f112 0801 	adds.w	r8, r2, #1
 8020b1e:	f53f af78 	bmi.w	8020a12 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8020b22:	45c6      	cmp	lr, r8
 8020b24:	f6ff af75 	blt.w	8020a12 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8020b28:	f110 0801 	adds.w	r8, r0, #1
 8020b2c:	f53f af71 	bmi.w	8020a12 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8020b30:	4543      	cmp	r3, r8
 8020b32:	f6ff af6e 	blt.w	8020a12 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8020b36:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8020b38:	b21b      	sxth	r3, r3
 8020b3a:	9201      	str	r2, [sp, #4]
 8020b3c:	9300      	str	r3, [sp, #0]
 8020b3e:	fa0f f38e 	sxth.w	r3, lr
 8020b42:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020b44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020b48:	e9cd c404 	strd	ip, r4, [sp, #16]
 8020b4c:	4639      	mov	r1, r7
 8020b4e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8020b50:	f7ff fc79 	bl	8020446 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8020b54:	e75d      	b.n	8020a12 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8020b56:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8020b58:	142f      	asrs	r7, r5, #16
 8020b5a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020b5c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020b60:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8020b64:	1433      	asrs	r3, r6, #16
 8020b66:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8020b6a:	fb02 7303 	mla	r3, r2, r3, r7
 8020b6e:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8020b72:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8020b76:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020b7a:	2900      	cmp	r1, #0
 8020b7c:	f000 812a 	beq.w	8020dd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8020b80:	687c      	ldr	r4, [r7, #4]
 8020b82:	940e      	str	r4, [sp, #56]	; 0x38
 8020b84:	0e24      	lsrs	r4, r4, #24
 8020b86:	9415      	str	r4, [sp, #84]	; 0x54
 8020b88:	b178      	cbz	r0, 8020baa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8020b8a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8020b8e:	3a01      	subs	r2, #1
 8020b90:	0092      	lsls	r2, r2, #2
 8020b92:	3204      	adds	r2, #4
 8020b94:	eb07 0802 	add.w	r8, r7, r2
 8020b98:	58ba      	ldr	r2, [r7, r2]
 8020b9a:	9209      	str	r2, [sp, #36]	; 0x24
 8020b9c:	0e12      	lsrs	r2, r2, #24
 8020b9e:	9212      	str	r2, [sp, #72]	; 0x48
 8020ba0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8020ba4:	920f      	str	r2, [sp, #60]	; 0x3c
 8020ba6:	0e12      	lsrs	r2, r2, #24
 8020ba8:	9216      	str	r2, [sp, #88]	; 0x58
 8020baa:	b289      	uxth	r1, r1
 8020bac:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020bae:	b280      	uxth	r0, r0
 8020bb0:	fb01 f900 	mul.w	r9, r1, r0
 8020bb4:	0109      	lsls	r1, r1, #4
 8020bb6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8020bba:	eba1 0809 	sub.w	r8, r1, r9
 8020bbe:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8020bc2:	9915      	ldr	r1, [sp, #84]	; 0x54
 8020bc4:	b280      	uxth	r0, r0
 8020bc6:	fa1f f888 	uxth.w	r8, r8
 8020bca:	1a12      	subs	r2, r2, r0
 8020bcc:	fb08 f101 	mul.w	r1, r8, r1
 8020bd0:	b292      	uxth	r2, r2
 8020bd2:	fb02 110c 	mla	r1, r2, ip, r1
 8020bd6:	fb00 1104 	mla	r1, r0, r4, r1
 8020bda:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020bdc:	fb09 1104 	mla	r1, r9, r4, r1
 8020be0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020be4:	2900      	cmp	r1, #0
 8020be6:	f000 80ec 	beq.w	8020dc2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8020bea:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020bee:	d019      	beq.n	8020c24 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8020bf0:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020bf4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020bf8:	fb0c fa0a 	mul.w	sl, ip, sl
 8020bfc:	fb0c fc03 	mul.w	ip, ip, r3
 8020c00:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020c04:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020c08:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8020c0c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020c10:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020c14:	4453      	add	r3, sl
 8020c16:	0a3f      	lsrs	r7, r7, #8
 8020c18:	0a1b      	lsrs	r3, r3, #8
 8020c1a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020c1e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020c22:	433b      	orrs	r3, r7
 8020c24:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020c26:	2cff      	cmp	r4, #255	; 0xff
 8020c28:	d020      	beq.n	8020c6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 8020c2a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020c2c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020c30:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020c32:	4367      	muls	r7, r4
 8020c34:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020c36:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020c3a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020c3e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020c40:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020c44:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020c48:	fb04 fa0a 	mul.w	sl, r4, sl
 8020c4c:	44bc      	add	ip, r7
 8020c4e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020c52:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020c56:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020c5a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020c5e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020c62:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020c66:	ea4c 040a 	orr.w	r4, ip, sl
 8020c6a:	940e      	str	r4, [sp, #56]	; 0x38
 8020c6c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020c6e:	2cff      	cmp	r4, #255	; 0xff
 8020c70:	d020      	beq.n	8020cb4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 8020c72:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020c74:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020c78:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020c7a:	4367      	muls	r7, r4
 8020c7c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020c7e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020c82:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020c86:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020c88:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020c8c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020c90:	fb04 fa0a 	mul.w	sl, r4, sl
 8020c94:	44bc      	add	ip, r7
 8020c96:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020c9a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020c9e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020ca2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020ca6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020caa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020cae:	ea4c 040a 	orr.w	r4, ip, sl
 8020cb2:	9409      	str	r4, [sp, #36]	; 0x24
 8020cb4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020cb6:	2cff      	cmp	r4, #255	; 0xff
 8020cb8:	d020      	beq.n	8020cfc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 8020cba:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020cbc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020cc0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020cc2:	4367      	muls	r7, r4
 8020cc4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020cc6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020cca:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020cce:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020cd0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020cd4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020cd8:	fb04 fa0a 	mul.w	sl, r4, sl
 8020cdc:	44bc      	add	ip, r7
 8020cde:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020ce2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020ce6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020cea:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020cee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020cf2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020cf6:	ea4c 040a 	orr.w	r4, ip, sl
 8020cfa:	940f      	str	r4, [sp, #60]	; 0x3c
 8020cfc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020cfe:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020d02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020d06:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020d0a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020d0c:	fb08 f707 	mul.w	r7, r8, r7
 8020d10:	fb02 770c 	mla	r7, r2, ip, r7
 8020d14:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020d18:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020d1a:	fb00 770c 	mla	r7, r0, ip, r7
 8020d1e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020d22:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020d24:	fb09 770c 	mla	r7, r9, ip, r7
 8020d28:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8020d2c:	fb08 f80c 	mul.w	r8, r8, ip
 8020d30:	0a3f      	lsrs	r7, r7, #8
 8020d32:	fb02 8303 	mla	r3, r2, r3, r8
 8020d36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020d38:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020d3c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020d40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020d42:	fb00 330a 	mla	r3, r0, sl, r3
 8020d46:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020d4a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8020d4c:	fb09 3c0c 	mla	ip, r9, ip, r3
 8020d50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020d52:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020d56:	434b      	muls	r3, r1
 8020d58:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020d5c:	1c59      	adds	r1, r3, #1
 8020d5e:	ea47 070c 	orr.w	r7, r7, ip
 8020d62:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020d66:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8020d6a:	b2fa      	uxtb	r2, r7
 8020d6c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8020d70:	fb12 f200 	smulbb	r2, r2, r0
 8020d74:	b2c9      	uxtb	r1, r1
 8020d76:	fb03 2301 	mla	r3, r3, r1, r2
 8020d7a:	b29b      	uxth	r3, r3
 8020d7c:	1c5a      	adds	r2, r3, #1
 8020d7e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020d82:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8020d86:	fb12 f201 	smulbb	r2, r2, r1
 8020d8a:	121b      	asrs	r3, r3, #8
 8020d8c:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8020d90:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8020d94:	0c3f      	lsrs	r7, r7, #16
 8020d96:	fb03 2300 	mla	r3, r3, r0, r2
 8020d9a:	b29b      	uxth	r3, r3
 8020d9c:	1c5a      	adds	r2, r3, #1
 8020d9e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020da2:	121b      	asrs	r3, r3, #8
 8020da4:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8020da8:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8020dac:	fb13 f101 	smulbb	r1, r3, r1
 8020db0:	fb07 1700 	mla	r7, r7, r0, r1
 8020db4:	b2bf      	uxth	r7, r7
 8020db6:	1c79      	adds	r1, r7, #1
 8020db8:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8020dbc:	123f      	asrs	r7, r7, #8
 8020dbe:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8020dc2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020dc4:	f10e 0e03 	add.w	lr, lr, #3
 8020dc8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020dcc:	441d      	add	r5, r3
 8020dce:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020dd0:	441e      	add	r6, r3
 8020dd2:	e64e      	b.n	8020a72 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8020dd4:	2800      	cmp	r0, #0
 8020dd6:	f43f aee8 	beq.w	8020baa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8020dda:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8020dde:	9209      	str	r2, [sp, #36]	; 0x24
 8020de0:	0e12      	lsrs	r2, r2, #24
 8020de2:	9212      	str	r2, [sp, #72]	; 0x48
 8020de4:	e6e1      	b.n	8020baa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8020de6:	b01d      	add	sp, #116	; 0x74
 8020de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020dec <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8020dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020df0:	b087      	sub	sp, #28
 8020df2:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 8020df6:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8020dfa:	fb05 7003 	mla	r0, r5, r3, r7
 8020dfe:	2d00      	cmp	r5, #0
 8020e00:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8020e04:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 8020e08:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8020e0c:	f2c0 810a 	blt.w	8021024 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8020e10:	45a8      	cmp	r8, r5
 8020e12:	f340 8107 	ble.w	8021024 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8020e16:	2f00      	cmp	r7, #0
 8020e18:	f2c0 8102 	blt.w	8021020 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8020e1c:	42bb      	cmp	r3, r7
 8020e1e:	f340 80ff 	ble.w	8021020 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8020e22:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8020e26:	1c7a      	adds	r2, r7, #1
 8020e28:	f100 80ff 	bmi.w	802102a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8020e2c:	4293      	cmp	r3, r2
 8020e2e:	f340 80fc 	ble.w	802102a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8020e32:	2c00      	cmp	r4, #0
 8020e34:	f000 80fb 	beq.w	802102e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 8020e38:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8020e3c:	3501      	adds	r5, #1
 8020e3e:	f100 80fa 	bmi.w	8021036 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8020e42:	45a8      	cmp	r8, r5
 8020e44:	f340 80f7 	ble.w	8021036 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8020e48:	f1be 0f00 	cmp.w	lr, #0
 8020e4c:	f000 80f6 	beq.w	802103c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 8020e50:	2f00      	cmp	r7, #0
 8020e52:	f2c0 80ee 	blt.w	8021032 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8020e56:	42bb      	cmp	r3, r7
 8020e58:	f340 80eb 	ble.w	8021032 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8020e5c:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8020e60:	3701      	adds	r7, #1
 8020e62:	f100 80ee 	bmi.w	8021042 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8020e66:	42bb      	cmp	r3, r7
 8020e68:	f340 80eb 	ble.w	8021042 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8020e6c:	2c00      	cmp	r4, #0
 8020e6e:	f000 80ea 	beq.w	8021046 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 8020e72:	3301      	adds	r3, #1
 8020e74:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8020e78:	fa1f fc84 	uxth.w	ip, r4
 8020e7c:	fa1f fe8e 	uxth.w	lr, lr
 8020e80:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020e84:	fb0c f90e 	mul.w	r9, ip, lr
 8020e88:	0e13      	lsrs	r3, r2, #24
 8020e8a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8020e8e:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8020e92:	9302      	str	r3, [sp, #8]
 8020e94:	ebac 0709 	sub.w	r7, ip, r9
 8020e98:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8020e9c:	fa1f f48e 	uxth.w	r4, lr
 8020ea0:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 8020ea4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020ea8:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8020eac:	fb0a fe0e 	mul.w	lr, sl, lr
 8020eb0:	1b1b      	subs	r3, r3, r4
 8020eb2:	fb0a f606 	mul.w	r6, sl, r6
 8020eb6:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8020eba:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8020ebe:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8020ec2:	b29b      	uxth	r3, r3
 8020ec4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020ec8:	b2bf      	uxth	r7, r7
 8020eca:	9301      	str	r3, [sp, #4]
 8020ecc:	44e6      	add	lr, ip
 8020ece:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8020ed2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020ed6:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8020eda:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 8020ede:	9303      	str	r3, [sp, #12]
 8020ee0:	0a33      	lsrs	r3, r6, #8
 8020ee2:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 8020ee6:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020eea:	9304      	str	r3, [sp, #16]
 8020eec:	fb0b f606 	mul.w	r6, fp, r6
 8020ef0:	fb0b f000 	mul.w	r0, fp, r0
 8020ef4:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8020ef8:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8020efc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020f00:	44b6      	add	lr, r6
 8020f02:	f500 7680 	add.w	r6, r0, #256	; 0x100
 8020f06:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8020f0a:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 8020f0e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8020f12:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020f16:	fb08 f606 	mul.w	r6, r8, r6
 8020f1a:	0a03      	lsrs	r3, r0, #8
 8020f1c:	fb08 f505 	mul.w	r5, r8, r5
 8020f20:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020f24:	0a30      	lsrs	r0, r6, #8
 8020f26:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8020f2a:	9305      	str	r3, [sp, #20]
 8020f2c:	0e13      	lsrs	r3, r2, #24
 8020f2e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020f32:	fb0e fe07 	mul.w	lr, lr, r7
 8020f36:	4430      	add	r0, r6
 8020f38:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8020f3c:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8020f40:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8020f44:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020f48:	0a00      	lsrs	r0, r0, #8
 8020f4a:	435e      	muls	r6, r3
 8020f4c:	0a2d      	lsrs	r5, r5, #8
 8020f4e:	435a      	muls	r2, r3
 8020f50:	9b03      	ldr	r3, [sp, #12]
 8020f52:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8020f56:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8020f5a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020f5e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020f62:	44b4      	add	ip, r6
 8020f64:	f502 7680 	add.w	r6, r2, #256	; 0x100
 8020f68:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020f6c:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8020f70:	9e01      	ldr	r6, [sp, #4]
 8020f72:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020f76:	fb03 ee06 	mla	lr, r3, r6, lr
 8020f7a:	9b04      	ldr	r3, [sp, #16]
 8020f7c:	0a12      	lsrs	r2, r2, #8
 8020f7e:	fb0c ee09 	mla	lr, ip, r9, lr
 8020f82:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 8020f86:	9b05      	ldr	r3, [sp, #20]
 8020f88:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020f8c:	fb00 ee04 	mla	lr, r0, r4, lr
 8020f90:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020f94:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8020f98:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 8020f9c:	9b01      	ldr	r3, [sp, #4]
 8020f9e:	fb07 fe0e 	mul.w	lr, r7, lr
 8020fa2:	fb07 f70b 	mul.w	r7, r7, fp
 8020fa6:	fb03 ee06 	mla	lr, r3, r6, lr
 8020faa:	fb03 730a 	mla	r3, r3, sl, r7
 8020fae:	fb09 e202 	mla	r2, r9, r2, lr
 8020fb2:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8020fb6:	fb04 2e0e 	mla	lr, r4, lr, r2
 8020fba:	fb04 3408 	mla	r4, r4, r8, r3
 8020fbe:	9b02      	ldr	r3, [sp, #8]
 8020fc0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020fc4:	fb09 4903 	mla	r9, r9, r3, r4
 8020fc8:	780b      	ldrb	r3, [r1, #0]
 8020fca:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020fce:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8020fd2:	ea40 0e0e 	orr.w	lr, r0, lr
 8020fd6:	fa5f f989 	uxtb.w	r9, r9
 8020fda:	fb03 f209 	mul.w	r2, r3, r9
 8020fde:	1c53      	adds	r3, r2, #1
 8020fe0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020fe4:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8020fe8:	700b      	strb	r3, [r1, #0]
 8020fea:	784b      	ldrb	r3, [r1, #1]
 8020fec:	fb03 f309 	mul.w	r3, r3, r9
 8020ff0:	1c5a      	adds	r2, r3, #1
 8020ff2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020ff6:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8020ffa:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8020ffe:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021002:	704b      	strb	r3, [r1, #1]
 8021004:	788b      	ldrb	r3, [r1, #2]
 8021006:	fb03 f909 	mul.w	r9, r3, r9
 802100a:	f109 0301 	add.w	r3, r9, #1
 802100e:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8021012:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 8021016:	f881 e002 	strb.w	lr, [r1, #2]
 802101a:	b007      	add	sp, #28
 802101c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021020:	2600      	movs	r6, #0
 8021022:	e700      	b.n	8020e26 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 8021024:	2000      	movs	r0, #0
 8021026:	4606      	mov	r6, r0
 8021028:	e708      	b.n	8020e3c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 802102a:	2000      	movs	r0, #0
 802102c:	e706      	b.n	8020e3c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 802102e:	4620      	mov	r0, r4
 8021030:	e704      	b.n	8020e3c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8021032:	2500      	movs	r5, #0
 8021034:	e714      	b.n	8020e60 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 8021036:	2200      	movs	r2, #0
 8021038:	4615      	mov	r5, r2
 802103a:	e71d      	b.n	8020e78 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802103c:	4672      	mov	r2, lr
 802103e:	4675      	mov	r5, lr
 8021040:	e71a      	b.n	8020e78 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021042:	2200      	movs	r2, #0
 8021044:	e718      	b.n	8020e78 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021046:	4622      	mov	r2, r4
 8021048:	e716      	b.n	8020e78 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0802104a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802104a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802104e:	b099      	sub	sp, #100	; 0x64
 8021050:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 8021054:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8021056:	9017      	str	r0, [sp, #92]	; 0x5c
 8021058:	9306      	str	r3, [sp, #24]
 802105a:	6850      	ldr	r0, [r2, #4]
 802105c:	6812      	ldr	r2, [r2, #0]
 802105e:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 8021062:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	; 0x8c
 8021066:	fb00 1303 	mla	r3, r0, r3, r1
 802106a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802106e:	18d3      	adds	r3, r2, r3
 8021070:	9309      	str	r3, [sp, #36]	; 0x24
 8021072:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021074:	681b      	ldr	r3, [r3, #0]
 8021076:	930e      	str	r3, [sp, #56]	; 0x38
 8021078:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802107a:	2b00      	cmp	r3, #0
 802107c:	dc03      	bgt.n	8021086 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802107e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021080:	2b00      	cmp	r3, #0
 8021082:	f340 8360 	ble.w	8021746 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8021086:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021088:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802108c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021090:	1e48      	subs	r0, r1, #1
 8021092:	1e57      	subs	r7, r2, #1
 8021094:	9b06      	ldr	r3, [sp, #24]
 8021096:	2b00      	cmp	r3, #0
 8021098:	f340 817b 	ble.w	8021392 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 802109c:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80210a0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80210a4:	d406      	bmi.n	80210b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80210a6:	4584      	cmp	ip, r0
 80210a8:	da04      	bge.n	80210b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80210aa:	2b00      	cmp	r3, #0
 80210ac:	db02      	blt.n	80210b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80210ae:	42bb      	cmp	r3, r7
 80210b0:	f2c0 8170 	blt.w	8021394 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80210b4:	f11c 0c01 	adds.w	ip, ip, #1
 80210b8:	f100 8160 	bmi.w	802137c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80210bc:	4561      	cmp	r1, ip
 80210be:	f2c0 815d 	blt.w	802137c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80210c2:	3301      	adds	r3, #1
 80210c4:	f100 815a 	bmi.w	802137c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80210c8:	429a      	cmp	r2, r3
 80210ca:	f2c0 8157 	blt.w	802137c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80210ce:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80210d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80210d4:	f1b8 0f00 	cmp.w	r8, #0
 80210d8:	f340 8179 	ble.w	80213ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80210dc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80210de:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80210e2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80210e4:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80210e8:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80210ec:	142a      	asrs	r2, r5, #16
 80210ee:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80210f2:	689b      	ldr	r3, [r3, #8]
 80210f4:	f100 81be 	bmi.w	8021474 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80210f8:	f103 39ff 	add.w	r9, r3, #4294967295
 80210fc:	454a      	cmp	r2, r9
 80210fe:	f280 81b9 	bge.w	8021474 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8021102:	f1bc 0f00 	cmp.w	ip, #0
 8021106:	f2c0 81b5 	blt.w	8021474 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802110a:	f10e 39ff 	add.w	r9, lr, #4294967295
 802110e:	45cc      	cmp	ip, r9
 8021110:	f280 81b0 	bge.w	8021474 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8021114:	b21b      	sxth	r3, r3
 8021116:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021118:	fb0c 2203 	mla	r2, ip, r3, r2
 802111c:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8021120:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8021124:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8021128:	2900      	cmp	r1, #0
 802112a:	f000 8197 	beq.w	802145c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 802112e:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8021132:	940a      	str	r4, [sp, #40]	; 0x28
 8021134:	0e24      	lsrs	r4, r4, #24
 8021136:	9411      	str	r4, [sp, #68]	; 0x44
 8021138:	b180      	cbz	r0, 802115c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 802113a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802113e:	3b01      	subs	r3, #1
 8021140:	009b      	lsls	r3, r3, #2
 8021142:	3304      	adds	r3, #4
 8021144:	eb09 0c03 	add.w	ip, r9, r3
 8021148:	f859 3003 	ldr.w	r3, [r9, r3]
 802114c:	9307      	str	r3, [sp, #28]
 802114e:	0e1b      	lsrs	r3, r3, #24
 8021150:	930f      	str	r3, [sp, #60]	; 0x3c
 8021152:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8021156:	930b      	str	r3, [sp, #44]	; 0x2c
 8021158:	0e1b      	lsrs	r3, r3, #24
 802115a:	9312      	str	r3, [sp, #72]	; 0x48
 802115c:	b289      	uxth	r1, r1
 802115e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021160:	b280      	uxth	r0, r0
 8021162:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021164:	fb01 fa00 	mul.w	sl, r1, r0
 8021168:	0109      	lsls	r1, r1, #4
 802116a:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 802116e:	eba1 090a 	sub.w	r9, r1, sl
 8021172:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8021176:	b280      	uxth	r0, r0
 8021178:	fa1f f989 	uxth.w	r9, r9
 802117c:	1a09      	subs	r1, r1, r0
 802117e:	fb09 f303 	mul.w	r3, r9, r3
 8021182:	b289      	uxth	r1, r1
 8021184:	fb01 330e 	mla	r3, r1, lr, r3
 8021188:	fb00 3304 	mla	r3, r0, r4, r3
 802118c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802118e:	fb0a 3304 	mla	r3, sl, r4, r3
 8021192:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021196:	2b00      	cmp	r3, #0
 8021198:	f000 80e8 	beq.w	802136c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802119c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80211a0:	d01b      	beq.n	80211da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 80211a2:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 80211a6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80211aa:	fb0e fb0b 	mul.w	fp, lr, fp
 80211ae:	fb0e fe02 	mul.w	lr, lr, r2
 80211b2:	ea4f 221b 	mov.w	r2, fp, lsr #8
 80211b6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80211ba:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80211be:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80211c2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80211c6:	445a      	add	r2, fp
 80211c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80211cc:	0a12      	lsrs	r2, r2, #8
 80211ce:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80211d2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80211d6:	ea42 020c 	orr.w	r2, r2, ip
 80211da:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80211dc:	2cff      	cmp	r4, #255	; 0xff
 80211de:	d021      	beq.n	8021224 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80211e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80211e2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80211e6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80211e8:	fb04 fc0c 	mul.w	ip, r4, ip
 80211ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80211ee:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80211f2:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80211f6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80211f8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80211fc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021200:	fb04 fb0b 	mul.w	fp, r4, fp
 8021204:	44e6      	add	lr, ip
 8021206:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 802120a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802120e:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8021212:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021216:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802121a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802121e:	ea4e 040b 	orr.w	r4, lr, fp
 8021222:	940a      	str	r4, [sp, #40]	; 0x28
 8021224:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021226:	2cff      	cmp	r4, #255	; 0xff
 8021228:	d021      	beq.n	802126e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802122a:	9c07      	ldr	r4, [sp, #28]
 802122c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021230:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021232:	fb04 fc0c 	mul.w	ip, r4, ip
 8021236:	9c07      	ldr	r4, [sp, #28]
 8021238:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802123c:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8021240:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021242:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021246:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802124a:	fb04 fb0b 	mul.w	fp, r4, fp
 802124e:	44e6      	add	lr, ip
 8021250:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8021254:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021258:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 802125c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021260:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8021264:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8021268:	ea4e 040b 	orr.w	r4, lr, fp
 802126c:	9407      	str	r4, [sp, #28]
 802126e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021270:	2cff      	cmp	r4, #255	; 0xff
 8021272:	d021      	beq.n	80212b8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8021274:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021276:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802127a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802127c:	fb04 fc0c 	mul.w	ip, r4, ip
 8021280:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021282:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8021286:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 802128a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802128c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021290:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021294:	fb04 fb0b 	mul.w	fp, r4, fp
 8021298:	44e6      	add	lr, ip
 802129a:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 802129e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80212a2:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80212a6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80212aa:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80212ae:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80212b2:	ea4e 040b 	orr.w	r4, lr, fp
 80212b6:	940b      	str	r4, [sp, #44]	; 0x2c
 80212b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80212ba:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80212be:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80212c2:	2bff      	cmp	r3, #255	; 0xff
 80212c4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80212c8:	9c07      	ldr	r4, [sp, #28]
 80212ca:	fb09 fc0c 	mul.w	ip, r9, ip
 80212ce:	fb01 cc0e 	mla	ip, r1, lr, ip
 80212d2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80212d6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80212d8:	fb00 cc0e 	mla	ip, r0, lr, ip
 80212dc:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80212e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80212e2:	fb0a cc0e 	mla	ip, sl, lr, ip
 80212e6:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80212ea:	fb09 f90e 	mul.w	r9, r9, lr
 80212ee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80212f2:	fb01 9202 	mla	r2, r1, r2, r9
 80212f6:	9907      	ldr	r1, [sp, #28]
 80212f8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80212fc:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 8021300:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8021302:	fb00 220b 	mla	r2, r0, fp, r2
 8021306:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 802130a:	fb0a 2a00 	mla	sl, sl, r0, r2
 802130e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021312:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021316:	ea4c 0c0a 	orr.w	ip, ip, sl
 802131a:	fa5f f08c 	uxtb.w	r0, ip
 802131e:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8021322:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8021326:	f000 80a2 	beq.w	802146e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 802132a:	43db      	mvns	r3, r3
 802132c:	783a      	ldrb	r2, [r7, #0]
 802132e:	f897 a002 	ldrb.w	sl, [r7, #2]
 8021332:	b2db      	uxtb	r3, r3
 8021334:	fb02 fe03 	mul.w	lr, r2, r3
 8021338:	fb0a fa03 	mul.w	sl, sl, r3
 802133c:	f10e 0201 	add.w	r2, lr, #1
 8021340:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8021344:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8021348:	703a      	strb	r2, [r7, #0]
 802134a:	787a      	ldrb	r2, [r7, #1]
 802134c:	fb02 f003 	mul.w	r0, r2, r3
 8021350:	f10a 0301 	add.w	r3, sl, #1
 8021354:	1c42      	adds	r2, r0, #1
 8021356:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 802135a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802135e:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8021362:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8021366:	707a      	strb	r2, [r7, #1]
 8021368:	f887 c002 	strb.w	ip, [r7, #2]
 802136c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802136e:	3703      	adds	r7, #3
 8021370:	f108 38ff 	add.w	r8, r8, #4294967295
 8021374:	441d      	add	r5, r3
 8021376:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021378:	441e      	add	r6, r3
 802137a:	e6ab      	b.n	80210d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802137c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802137e:	441d      	add	r5, r3
 8021380:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021382:	441e      	add	r6, r3
 8021384:	9b06      	ldr	r3, [sp, #24]
 8021386:	3b01      	subs	r3, #1
 8021388:	9306      	str	r3, [sp, #24]
 802138a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802138c:	3303      	adds	r3, #3
 802138e:	9309      	str	r3, [sp, #36]	; 0x24
 8021390:	e680      	b.n	8021094 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8021392:	d024      	beq.n	80213de <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8021394:	9b06      	ldr	r3, [sp, #24]
 8021396:	9825      	ldr	r0, [sp, #148]	; 0x94
 8021398:	3b01      	subs	r3, #1
 802139a:	fb00 5003 	mla	r0, r0, r3, r5
 802139e:	1400      	asrs	r0, r0, #16
 80213a0:	f53f ae95 	bmi.w	80210ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80213a4:	3901      	subs	r1, #1
 80213a6:	4288      	cmp	r0, r1
 80213a8:	f6bf ae91 	bge.w	80210ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80213ac:	9926      	ldr	r1, [sp, #152]	; 0x98
 80213ae:	fb01 6303 	mla	r3, r1, r3, r6
 80213b2:	141b      	asrs	r3, r3, #16
 80213b4:	f53f ae8b 	bmi.w	80210ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80213b8:	3a01      	subs	r2, #1
 80213ba:	4293      	cmp	r3, r2
 80213bc:	f6bf ae87 	bge.w	80210ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80213c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80213c2:	f8dd b018 	ldr.w	fp, [sp, #24]
 80213c6:	1cdf      	adds	r7, r3, #3
 80213c8:	f1bb 0f00 	cmp.w	fp, #0
 80213cc:	dc6e      	bgt.n	80214ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 80213ce:	9b06      	ldr	r3, [sp, #24]
 80213d0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80213d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80213d6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80213da:	4423      	add	r3, r4
 80213dc:	9309      	str	r3, [sp, #36]	; 0x24
 80213de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80213e0:	2b00      	cmp	r3, #0
 80213e2:	f340 81b0 	ble.w	8021746 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 80213e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80213ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80213ec:	ee30 0a04 	vadd.f32	s0, s0, s8
 80213f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80213f4:	eef0 6a62 	vmov.f32	s13, s5
 80213f8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80213fc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021400:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021404:	ee16 5a90 	vmov	r5, s13
 8021408:	eef0 6a43 	vmov.f32	s13, s6
 802140c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021410:	ee16 6a90 	vmov	r6, s13
 8021414:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021418:	ee61 7a27 	vmul.f32	s15, s2, s15
 802141c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021420:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021424:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021428:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802142c:	ee12 2a90 	vmov	r2, s5
 8021430:	eef0 2a47 	vmov.f32	s5, s14
 8021434:	fb92 f3f3 	sdiv	r3, r2, r3
 8021438:	ee13 2a10 	vmov	r2, s6
 802143c:	9325      	str	r3, [sp, #148]	; 0x94
 802143e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021440:	eeb0 3a67 	vmov.f32	s6, s15
 8021444:	fb92 f3f3 	sdiv	r3, r2, r3
 8021448:	9326      	str	r3, [sp, #152]	; 0x98
 802144a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802144c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802144e:	3b01      	subs	r3, #1
 8021450:	9315      	str	r3, [sp, #84]	; 0x54
 8021452:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021454:	bf08      	it	eq
 8021456:	4613      	moveq	r3, r2
 8021458:	9306      	str	r3, [sp, #24]
 802145a:	e60d      	b.n	8021078 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802145c:	2800      	cmp	r0, #0
 802145e:	f43f ae7d 	beq.w	802115c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8021462:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8021466:	9307      	str	r3, [sp, #28]
 8021468:	0e1b      	lsrs	r3, r3, #24
 802146a:	930f      	str	r3, [sp, #60]	; 0x3c
 802146c:	e676      	b.n	802115c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 802146e:	7038      	strb	r0, [r7, #0]
 8021470:	7079      	strb	r1, [r7, #1]
 8021472:	e779      	b.n	8021368 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8021474:	f112 0901 	adds.w	r9, r2, #1
 8021478:	f53f af78 	bmi.w	802136c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802147c:	454b      	cmp	r3, r9
 802147e:	f6ff af75 	blt.w	802136c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8021482:	f11c 0901 	adds.w	r9, ip, #1
 8021486:	f53f af71 	bmi.w	802136c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802148a:	45ce      	cmp	lr, r9
 802148c:	f6ff af6e 	blt.w	802136c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8021490:	b21b      	sxth	r3, r3
 8021492:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8021496:	fa0f f28e 	sxth.w	r2, lr
 802149a:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802149e:	9200      	str	r2, [sp, #0]
 80214a0:	4639      	mov	r1, r7
 80214a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80214a4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80214a6:	f7ff fca1 	bl	8020dec <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 80214aa:	e75f      	b.n	802136c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80214ac:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80214ae:	1429      	asrs	r1, r5, #16
 80214b0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80214b2:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80214b6:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 80214ba:	1433      	asrs	r3, r6, #16
 80214bc:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80214c0:	fb0c 1303 	mla	r3, ip, r3, r1
 80214c4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80214c6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80214ca:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80214ce:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80214d2:	2a00      	cmp	r2, #0
 80214d4:	f000 8129 	beq.w	802172a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 80214d8:	684c      	ldr	r4, [r1, #4]
 80214da:	940c      	str	r4, [sp, #48]	; 0x30
 80214dc:	0e24      	lsrs	r4, r4, #24
 80214de:	9413      	str	r4, [sp, #76]	; 0x4c
 80214e0:	b198      	cbz	r0, 802150a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80214e2:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 80214e6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80214ea:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80214ee:	f10c 0c04 	add.w	ip, ip, #4
 80214f2:	eb01 080c 	add.w	r8, r1, ip
 80214f6:	f851 100c 	ldr.w	r1, [r1, ip]
 80214fa:	9108      	str	r1, [sp, #32]
 80214fc:	0e09      	lsrs	r1, r1, #24
 80214fe:	9110      	str	r1, [sp, #64]	; 0x40
 8021500:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8021504:	910d      	str	r1, [sp, #52]	; 0x34
 8021506:	0e09      	lsrs	r1, r1, #24
 8021508:	9114      	str	r1, [sp, #80]	; 0x50
 802150a:	b292      	uxth	r2, r2
 802150c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802150e:	b280      	uxth	r0, r0
 8021510:	fb02 f900 	mul.w	r9, r2, r0
 8021514:	0112      	lsls	r2, r2, #4
 8021516:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802151a:	eba2 0809 	sub.w	r8, r2, r9
 802151e:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8021522:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021524:	b280      	uxth	r0, r0
 8021526:	fa1f f888 	uxth.w	r8, r8
 802152a:	1a09      	subs	r1, r1, r0
 802152c:	fb08 f202 	mul.w	r2, r8, r2
 8021530:	b289      	uxth	r1, r1
 8021532:	fb01 220e 	mla	r2, r1, lr, r2
 8021536:	fb00 2204 	mla	r2, r0, r4, r2
 802153a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802153c:	fb09 2204 	mla	r2, r9, r4, r2
 8021540:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021544:	2a00      	cmp	r2, #0
 8021546:	f000 80e8 	beq.w	802171a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 802154a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802154e:	d01b      	beq.n	8021588 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 8021550:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021554:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021558:	fb0e fa0a 	mul.w	sl, lr, sl
 802155c:	fb0e fe03 	mul.w	lr, lr, r3
 8021560:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021564:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021568:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802156c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021570:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021574:	4453      	add	r3, sl
 8021576:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802157a:	0a1b      	lsrs	r3, r3, #8
 802157c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021580:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021584:	ea43 030c 	orr.w	r3, r3, ip
 8021588:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802158a:	2cff      	cmp	r4, #255	; 0xff
 802158c:	d021      	beq.n	80215d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 802158e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021590:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021594:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021596:	fb04 fc0c 	mul.w	ip, r4, ip
 802159a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802159c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80215a0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80215a4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80215a6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80215aa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80215ae:	fb04 fa0a 	mul.w	sl, r4, sl
 80215b2:	44e6      	add	lr, ip
 80215b4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80215b8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80215bc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80215c0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80215c4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80215c8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80215cc:	ea4e 040a 	orr.w	r4, lr, sl
 80215d0:	940c      	str	r4, [sp, #48]	; 0x30
 80215d2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80215d4:	2cff      	cmp	r4, #255	; 0xff
 80215d6:	d021      	beq.n	802161c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 80215d8:	9c08      	ldr	r4, [sp, #32]
 80215da:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80215de:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80215e0:	fb04 fc0c 	mul.w	ip, r4, ip
 80215e4:	9c08      	ldr	r4, [sp, #32]
 80215e6:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80215ea:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80215ec:	fb04 fa0e 	mul.w	sl, r4, lr
 80215f0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80215f4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80215f8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80215fc:	44e6      	add	lr, ip
 80215fe:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021602:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021606:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802160a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802160e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021612:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021616:	ea4e 040a 	orr.w	r4, lr, sl
 802161a:	9408      	str	r4, [sp, #32]
 802161c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802161e:	2cff      	cmp	r4, #255	; 0xff
 8021620:	d021      	beq.n	8021666 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8021622:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021624:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021628:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802162a:	fb04 fc0c 	mul.w	ip, r4, ip
 802162e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021630:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8021634:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021638:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802163a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802163e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021642:	fb04 fa0a 	mul.w	sl, r4, sl
 8021646:	44e6      	add	lr, ip
 8021648:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802164c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021650:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021654:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021658:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802165c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021660:	ea4e 040a 	orr.w	r4, lr, sl
 8021664:	940d      	str	r4, [sp, #52]	; 0x34
 8021666:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021668:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802166c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021670:	2aff      	cmp	r2, #255	; 0xff
 8021672:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021676:	9c08      	ldr	r4, [sp, #32]
 8021678:	fb08 fc0c 	mul.w	ip, r8, ip
 802167c:	fb01 cc0e 	mla	ip, r1, lr, ip
 8021680:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8021684:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021686:	fb00 cc0e 	mla	ip, r0, lr, ip
 802168a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802168e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021690:	fb09 cc0e 	mla	ip, r9, lr, ip
 8021694:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8021698:	fb08 f80e 	mul.w	r8, r8, lr
 802169c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80216a0:	fb01 8303 	mla	r3, r1, r3, r8
 80216a4:	9908      	ldr	r1, [sp, #32]
 80216a6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80216aa:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80216ae:	990d      	ldr	r1, [sp, #52]	; 0x34
 80216b0:	fb00 330a 	mla	r3, r0, sl, r3
 80216b4:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 80216b8:	fb09 3e0e 	mla	lr, r9, lr, r3
 80216bc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80216c0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80216c4:	ea4c 0c0e 	orr.w	ip, ip, lr
 80216c8:	fa5f f08c 	uxtb.w	r0, ip
 80216cc:	f3cc 2107 	ubfx	r1, ip, #8, #8
 80216d0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80216d4:	d032      	beq.n	802173c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 80216d6:	43d2      	mvns	r2, r2
 80216d8:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 80216dc:	b2d2      	uxtb	r2, r2
 80216de:	fb0e fe02 	mul.w	lr, lr, r2
 80216e2:	f10e 0301 	add.w	r3, lr, #1
 80216e6:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 80216ea:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80216ee:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 80216f2:	4350      	muls	r0, r2
 80216f4:	f807 3c03 	strb.w	r3, [r7, #-3]
 80216f8:	1c43      	adds	r3, r0, #1
 80216fa:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80216fe:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021702:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8021706:	4353      	muls	r3, r2
 8021708:	f807 1c02 	strb.w	r1, [r7, #-2]
 802170c:	1c5a      	adds	r2, r3, #1
 802170e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021712:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8021716:	f807 cc01 	strb.w	ip, [r7, #-1]
 802171a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802171c:	3703      	adds	r7, #3
 802171e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021722:	441d      	add	r5, r3
 8021724:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021726:	441e      	add	r6, r3
 8021728:	e64e      	b.n	80213c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 802172a:	2800      	cmp	r0, #0
 802172c:	f43f aeed 	beq.w	802150a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8021730:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8021734:	9108      	str	r1, [sp, #32]
 8021736:	0e09      	lsrs	r1, r1, #24
 8021738:	9110      	str	r1, [sp, #64]	; 0x40
 802173a:	e6e6      	b.n	802150a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 802173c:	f807 0c03 	strb.w	r0, [r7, #-3]
 8021740:	f807 1c02 	strb.w	r1, [r7, #-2]
 8021744:	e7e7      	b.n	8021716 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 8021746:	b019      	add	sp, #100	; 0x64
 8021748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802174c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 802174c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021750:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 8021754:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8021758:	2c00      	cmp	r4, #0
 802175a:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 802175e:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8021762:	fb00 4e03 	mla	lr, r0, r3, r4
 8021766:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 802176a:	f2c0 80b8 	blt.w	80218de <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 802176e:	45a1      	cmp	r9, r4
 8021770:	f340 80b5 	ble.w	80218de <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8021774:	2800      	cmp	r0, #0
 8021776:	f2c0 80b2 	blt.w	80218de <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 802177a:	4580      	cmp	r8, r0
 802177c:	f340 80af 	ble.w	80218de <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8021780:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8021784:	f01e 0f01 	tst.w	lr, #1
 8021788:	5d56      	ldrb	r6, [r2, r5]
 802178a:	bf0c      	ite	eq
 802178c:	f006 060f 	andeq.w	r6, r6, #15
 8021790:	1136      	asrne	r6, r6, #4
 8021792:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8021796:	b2f6      	uxtb	r6, r6
 8021798:	f114 0a01 	adds.w	sl, r4, #1
 802179c:	f100 80a1 	bmi.w	80218e2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80217a0:	45d1      	cmp	r9, sl
 80217a2:	f340 809e 	ble.w	80218e2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80217a6:	2800      	cmp	r0, #0
 80217a8:	f2c0 809b 	blt.w	80218e2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80217ac:	4580      	cmp	r8, r0
 80217ae:	f340 8098 	ble.w	80218e2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80217b2:	2f00      	cmp	r7, #0
 80217b4:	f000 8097 	beq.w	80218e6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 80217b8:	f10e 0b01 	add.w	fp, lr, #1
 80217bc:	ea4f 055b 	mov.w	r5, fp, lsr #1
 80217c0:	f01b 0f01 	tst.w	fp, #1
 80217c4:	5d55      	ldrb	r5, [r2, r5]
 80217c6:	bf0c      	ite	eq
 80217c8:	f005 050f 	andeq.w	r5, r5, #15
 80217cc:	112d      	asrne	r5, r5, #4
 80217ce:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80217d2:	b2ed      	uxtb	r5, r5
 80217d4:	f1bc 0f00 	cmp.w	ip, #0
 80217d8:	f000 8089 	beq.w	80218ee <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 80217dc:	2c00      	cmp	r4, #0
 80217de:	f100 0001 	add.w	r0, r0, #1
 80217e2:	f2c0 8082 	blt.w	80218ea <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80217e6:	45a1      	cmp	r9, r4
 80217e8:	dd7f      	ble.n	80218ea <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80217ea:	2800      	cmp	r0, #0
 80217ec:	db7d      	blt.n	80218ea <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80217ee:	4580      	cmp	r8, r0
 80217f0:	dd7b      	ble.n	80218ea <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80217f2:	eb03 0b0e 	add.w	fp, r3, lr
 80217f6:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80217fa:	f01b 0f01 	tst.w	fp, #1
 80217fe:	5d14      	ldrb	r4, [r2, r4]
 8021800:	bf0c      	ite	eq
 8021802:	f004 040f 	andeq.w	r4, r4, #15
 8021806:	1124      	asrne	r4, r4, #4
 8021808:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802180c:	b2e4      	uxtb	r4, r4
 802180e:	f1ba 0f00 	cmp.w	sl, #0
 8021812:	db6f      	blt.n	80218f4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8021814:	45d1      	cmp	r9, sl
 8021816:	dd6d      	ble.n	80218f4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8021818:	2800      	cmp	r0, #0
 802181a:	db6b      	blt.n	80218f4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 802181c:	4580      	cmp	r8, r0
 802181e:	dd69      	ble.n	80218f4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8021820:	2f00      	cmp	r7, #0
 8021822:	d069      	beq.n	80218f8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 8021824:	3301      	adds	r3, #1
 8021826:	449e      	add	lr, r3
 8021828:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802182c:	f01e 0f01 	tst.w	lr, #1
 8021830:	5cd0      	ldrb	r0, [r2, r3]
 8021832:	bf0c      	ite	eq
 8021834:	f000 000f 	andeq.w	r0, r0, #15
 8021838:	1100      	asrne	r0, r0, #4
 802183a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802183e:	b2c3      	uxtb	r3, r0
 8021840:	b2ba      	uxth	r2, r7
 8021842:	fa1f fc8c 	uxth.w	ip, ip
 8021846:	fb02 f00c 	mul.w	r0, r2, ip
 802184a:	0112      	lsls	r2, r2, #4
 802184c:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8021850:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8021854:	1a12      	subs	r2, r2, r0
 8021856:	fa1f fc8c 	uxth.w	ip, ip
 802185a:	b292      	uxth	r2, r2
 802185c:	eba7 070c 	sub.w	r7, r7, ip
 8021860:	436a      	muls	r2, r5
 8021862:	b2bf      	uxth	r7, r7
 8021864:	fb06 2207 	mla	r2, r6, r7, r2
 8021868:	fb0c 2404 	mla	r4, ip, r4, r2
 802186c:	fb00 4303 	mla	r3, r0, r3, r4
 8021870:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021874:	b38b      	cbz	r3, 80218da <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 8021876:	4a21      	ldr	r2, [pc, #132]	; (80218fc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8021878:	6814      	ldr	r4, [r2, #0]
 802187a:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 802187e:	b2e5      	uxtb	r5, r4
 8021880:	4353      	muls	r3, r2
 8021882:	1c5a      	adds	r2, r3, #1
 8021884:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021888:	1212      	asrs	r2, r2, #8
 802188a:	b290      	uxth	r0, r2
 802188c:	43d2      	mvns	r2, r2
 802188e:	fb15 f500 	smulbb	r5, r5, r0
 8021892:	b2d3      	uxtb	r3, r2
 8021894:	780a      	ldrb	r2, [r1, #0]
 8021896:	fb02 5203 	mla	r2, r2, r3, r5
 802189a:	b292      	uxth	r2, r2
 802189c:	1c55      	adds	r5, r2, #1
 802189e:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80218a2:	784d      	ldrb	r5, [r1, #1]
 80218a4:	fb15 f503 	smulbb	r5, r5, r3
 80218a8:	1212      	asrs	r2, r2, #8
 80218aa:	700a      	strb	r2, [r1, #0]
 80218ac:	f3c4 2207 	ubfx	r2, r4, #8, #8
 80218b0:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80218b4:	fb02 5200 	mla	r2, r2, r0, r5
 80218b8:	b292      	uxth	r2, r2
 80218ba:	1c55      	adds	r5, r2, #1
 80218bc:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80218c0:	1212      	asrs	r2, r2, #8
 80218c2:	704a      	strb	r2, [r1, #1]
 80218c4:	788a      	ldrb	r2, [r1, #2]
 80218c6:	fb12 f303 	smulbb	r3, r2, r3
 80218ca:	fb04 3300 	mla	r3, r4, r0, r3
 80218ce:	b29b      	uxth	r3, r3
 80218d0:	1c5a      	adds	r2, r3, #1
 80218d2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80218d6:	121b      	asrs	r3, r3, #8
 80218d8:	708b      	strb	r3, [r1, #2]
 80218da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80218de:	2600      	movs	r6, #0
 80218e0:	e75a      	b.n	8021798 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 80218e2:	2500      	movs	r5, #0
 80218e4:	e776      	b.n	80217d4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 80218e6:	463d      	mov	r5, r7
 80218e8:	e774      	b.n	80217d4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 80218ea:	2400      	movs	r4, #0
 80218ec:	e78f      	b.n	802180e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 80218ee:	4663      	mov	r3, ip
 80218f0:	4664      	mov	r4, ip
 80218f2:	e7a5      	b.n	8021840 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 80218f4:	2300      	movs	r3, #0
 80218f6:	e7a3      	b.n	8021840 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 80218f8:	463b      	mov	r3, r7
 80218fa:	e7a1      	b.n	8021840 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 80218fc:	2400eae0 	.word	0x2400eae0

08021900 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021904:	b097      	sub	sp, #92	; 0x5c
 8021906:	9214      	str	r2, [sp, #80]	; 0x50
 8021908:	9309      	str	r3, [sp, #36]	; 0x24
 802190a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802190c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8021910:	9015      	str	r0, [sp, #84]	; 0x54
 8021912:	910c      	str	r1, [sp, #48]	; 0x30
 8021914:	6850      	ldr	r0, [r2, #4]
 8021916:	930e      	str	r3, [sp, #56]	; 0x38
 8021918:	6812      	ldr	r2, [r2, #0]
 802191a:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 802191e:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	; 0x84
 8021922:	fb00 1303 	mla	r3, r0, r3, r1
 8021926:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802192a:	eb02 0a03 	add.w	sl, r2, r3
 802192e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021930:	689b      	ldr	r3, [r3, #8]
 8021932:	3301      	adds	r3, #1
 8021934:	f023 0301 	bic.w	r3, r3, #1
 8021938:	930f      	str	r3, [sp, #60]	; 0x3c
 802193a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802193c:	681f      	ldr	r7, [r3, #0]
 802193e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021940:	2b00      	cmp	r3, #0
 8021942:	dc03      	bgt.n	802194c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8021944:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021946:	2b00      	cmp	r3, #0
 8021948:	f340 8247 	ble.w	8021dda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 802194c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802194e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021952:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021956:	1e48      	subs	r0, r1, #1
 8021958:	f102 3cff 	add.w	ip, r2, #4294967295
 802195c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802195e:	2b00      	cmp	r3, #0
 8021960:	f340 80e5 	ble.w	8021b2e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8021964:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8021968:	ea4f 4326 	mov.w	r3, r6, asr #16
 802196c:	d406      	bmi.n	802197c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802196e:	4586      	cmp	lr, r0
 8021970:	da04      	bge.n	802197c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8021972:	2b00      	cmp	r3, #0
 8021974:	db02      	blt.n	802197c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8021976:	4563      	cmp	r3, ip
 8021978:	f2c0 80da 	blt.w	8021b30 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 802197c:	f11e 0e01 	adds.w	lr, lr, #1
 8021980:	f100 80cb 	bmi.w	8021b1a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8021984:	4571      	cmp	r1, lr
 8021986:	f2c0 80c8 	blt.w	8021b1a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 802198a:	3301      	adds	r3, #1
 802198c:	f100 80c5 	bmi.w	8021b1a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8021990:	429a      	cmp	r2, r3
 8021992:	f2c0 80c2 	blt.w	8021b1a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8021996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021998:	46d0      	mov	r8, sl
 802199a:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 802199e:	930d      	str	r3, [sp, #52]	; 0x34
 80219a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80219a2:	2b00      	cmp	r3, #0
 80219a4:	f340 80e3 	ble.w	8021b6e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 80219a8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80219aa:	1430      	asrs	r0, r6, #16
 80219ac:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80219b0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80219b4:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80219b8:	142b      	asrs	r3, r5, #16
 80219ba:	f100 812e 	bmi.w	8021c1a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80219be:	f10c 3bff 	add.w	fp, ip, #4294967295
 80219c2:	455b      	cmp	r3, fp
 80219c4:	f280 8129 	bge.w	8021c1a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80219c8:	2800      	cmp	r0, #0
 80219ca:	f2c0 8126 	blt.w	8021c1a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80219ce:	f10e 3bff 	add.w	fp, lr, #4294967295
 80219d2:	4558      	cmp	r0, fp
 80219d4:	f280 8121 	bge.w	8021c1a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80219d8:	fb00 3309 	mla	r3, r0, r9, r3
 80219dc:	0858      	lsrs	r0, r3, #1
 80219de:	07dc      	lsls	r4, r3, #31
 80219e0:	f817 c000 	ldrb.w	ip, [r7, r0]
 80219e4:	bf54      	ite	pl
 80219e6:	f00c 0c0f 	andpl.w	ip, ip, #15
 80219ea:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80219ee:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80219f2:	fa5f fc8c 	uxtb.w	ip, ip
 80219f6:	2a00      	cmp	r2, #0
 80219f8:	f000 80fe 	beq.w	8021bf8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 80219fc:	1c58      	adds	r0, r3, #1
 80219fe:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8021a02:	07c0      	lsls	r0, r0, #31
 8021a04:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8021a08:	bf54      	ite	pl
 8021a0a:	f00e 0e0f 	andpl.w	lr, lr, #15
 8021a0e:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8021a12:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8021a16:	fa5f f08e 	uxtb.w	r0, lr
 8021a1a:	9010      	str	r0, [sp, #64]	; 0x40
 8021a1c:	b1d9      	cbz	r1, 8021a56 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8021a1e:	444b      	add	r3, r9
 8021a20:	0858      	lsrs	r0, r3, #1
 8021a22:	07dc      	lsls	r4, r3, #31
 8021a24:	f103 0301 	add.w	r3, r3, #1
 8021a28:	5c38      	ldrb	r0, [r7, r0]
 8021a2a:	bf54      	ite	pl
 8021a2c:	f000 000f 	andpl.w	r0, r0, #15
 8021a30:	1100      	asrmi	r0, r0, #4
 8021a32:	07dc      	lsls	r4, r3, #31
 8021a34:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8021a38:	b2c0      	uxtb	r0, r0
 8021a3a:	900a      	str	r0, [sp, #40]	; 0x28
 8021a3c:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8021a40:	f817 e000 	ldrb.w	lr, [r7, r0]
 8021a44:	bf54      	ite	pl
 8021a46:	f00e 030f 	andpl.w	r3, lr, #15
 8021a4a:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8021a4e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8021a52:	b2db      	uxtb	r3, r3
 8021a54:	9311      	str	r3, [sp, #68]	; 0x44
 8021a56:	b292      	uxth	r2, r2
 8021a58:	b289      	uxth	r1, r1
 8021a5a:	0113      	lsls	r3, r2, #4
 8021a5c:	fb02 f001 	mul.w	r0, r2, r1
 8021a60:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021a62:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8021a66:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8021a6a:	1a1b      	subs	r3, r3, r0
 8021a6c:	b289      	uxth	r1, r1
 8021a6e:	b29b      	uxth	r3, r3
 8021a70:	ebae 0e01 	sub.w	lr, lr, r1
 8021a74:	4353      	muls	r3, r2
 8021a76:	fa1f fe8e 	uxth.w	lr, lr
 8021a7a:	fb0c 320e 	mla	r2, ip, lr, r3
 8021a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021a80:	fb01 2203 	mla	r2, r1, r3, r2
 8021a84:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021a86:	fb00 2203 	mla	r2, r0, r3, r2
 8021a8a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021a8e:	2a00      	cmp	r2, #0
 8021a90:	d039      	beq.n	8021b06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021a92:	4bc7      	ldr	r3, [pc, #796]	; (8021db0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8021a94:	6819      	ldr	r1, [r3, #0]
 8021a96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021a98:	fa5f fc81 	uxtb.w	ip, r1
 8021a9c:	435a      	muls	r2, r3
 8021a9e:	1c53      	adds	r3, r2, #1
 8021aa0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8021aa4:	1212      	asrs	r2, r2, #8
 8021aa6:	b290      	uxth	r0, r2
 8021aa8:	43d2      	mvns	r2, r2
 8021aaa:	fb1c fc00 	smulbb	ip, ip, r0
 8021aae:	b2d3      	uxtb	r3, r2
 8021ab0:	f898 2000 	ldrb.w	r2, [r8]
 8021ab4:	fb02 c203 	mla	r2, r2, r3, ip
 8021ab8:	b292      	uxth	r2, r2
 8021aba:	f102 0c01 	add.w	ip, r2, #1
 8021abe:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8021ac2:	f898 c001 	ldrb.w	ip, [r8, #1]
 8021ac6:	fb1c fc03 	smulbb	ip, ip, r3
 8021aca:	1212      	asrs	r2, r2, #8
 8021acc:	f888 2000 	strb.w	r2, [r8]
 8021ad0:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8021ad4:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8021ad8:	fb02 c200 	mla	r2, r2, r0, ip
 8021adc:	b292      	uxth	r2, r2
 8021ade:	f102 0c01 	add.w	ip, r2, #1
 8021ae2:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8021ae6:	1212      	asrs	r2, r2, #8
 8021ae8:	f888 2001 	strb.w	r2, [r8, #1]
 8021aec:	f898 2002 	ldrb.w	r2, [r8, #2]
 8021af0:	fb12 f303 	smulbb	r3, r2, r3
 8021af4:	fb01 3300 	mla	r3, r1, r0, r3
 8021af8:	b29b      	uxth	r3, r3
 8021afa:	1c5a      	adds	r2, r3, #1
 8021afc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021b00:	121b      	asrs	r3, r3, #8
 8021b02:	f888 3002 	strb.w	r3, [r8, #2]
 8021b06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021b08:	f108 0803 	add.w	r8, r8, #3
 8021b0c:	441d      	add	r5, r3
 8021b0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021b10:	441e      	add	r6, r3
 8021b12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021b14:	3b01      	subs	r3, #1
 8021b16:	930d      	str	r3, [sp, #52]	; 0x34
 8021b18:	e742      	b.n	80219a0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8021b1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021b1c:	f10a 0a03 	add.w	sl, sl, #3
 8021b20:	441d      	add	r5, r3
 8021b22:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021b24:	441e      	add	r6, r3
 8021b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021b28:	3b01      	subs	r3, #1
 8021b2a:	9309      	str	r3, [sp, #36]	; 0x24
 8021b2c:	e716      	b.n	802195c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8021b2e:	d024      	beq.n	8021b7a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8021b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021b32:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8021b34:	3b01      	subs	r3, #1
 8021b36:	fb00 5003 	mla	r0, r0, r3, r5
 8021b3a:	1400      	asrs	r0, r0, #16
 8021b3c:	f53f af2b 	bmi.w	8021996 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021b40:	3901      	subs	r1, #1
 8021b42:	4288      	cmp	r0, r1
 8021b44:	f6bf af27 	bge.w	8021996 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021b48:	9924      	ldr	r1, [sp, #144]	; 0x90
 8021b4a:	fb01 6303 	mla	r3, r1, r3, r6
 8021b4e:	141b      	asrs	r3, r3, #16
 8021b50:	f53f af21 	bmi.w	8021996 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021b54:	3a01      	subs	r2, #1
 8021b56:	4293      	cmp	r3, r2
 8021b58:	f6bf af1d 	bge.w	8021996 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021b5c:	f10a 0e03 	add.w	lr, sl, #3
 8021b60:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8021b64:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8021b68:	f1b8 0f00 	cmp.w	r8, #0
 8021b6c:	dc76      	bgt.n	8021c5c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8021b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021b70:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021b74:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021b78:	44a2      	add	sl, r4
 8021b7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021b7c:	2b00      	cmp	r3, #0
 8021b7e:	f340 812c 	ble.w	8021dda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8021b82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021b86:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021b88:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021b8c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021b90:	eef0 6a62 	vmov.f32	s13, s5
 8021b94:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021b98:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021b9c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021ba0:	ee16 5a90 	vmov	r5, s13
 8021ba4:	eef0 6a43 	vmov.f32	s13, s6
 8021ba8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021bac:	ee16 6a90 	vmov	r6, s13
 8021bb0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021bb4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021bb8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021bbc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021bc0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021bc4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021bc8:	ee12 2a90 	vmov	r2, s5
 8021bcc:	eef0 2a47 	vmov.f32	s5, s14
 8021bd0:	fb92 f3f3 	sdiv	r3, r2, r3
 8021bd4:	ee13 2a10 	vmov	r2, s6
 8021bd8:	9323      	str	r3, [sp, #140]	; 0x8c
 8021bda:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021bdc:	eeb0 3a67 	vmov.f32	s6, s15
 8021be0:	fb92 f3f3 	sdiv	r3, r2, r3
 8021be4:	9324      	str	r3, [sp, #144]	; 0x90
 8021be6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021be8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021bea:	3b01      	subs	r3, #1
 8021bec:	930c      	str	r3, [sp, #48]	; 0x30
 8021bee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021bf0:	bf08      	it	eq
 8021bf2:	4613      	moveq	r3, r2
 8021bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8021bf6:	e6a2      	b.n	802193e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8021bf8:	2900      	cmp	r1, #0
 8021bfa:	f43f af2c 	beq.w	8021a56 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8021bfe:	eb09 0003 	add.w	r0, r9, r3
 8021c02:	0843      	lsrs	r3, r0, #1
 8021c04:	07c0      	lsls	r0, r0, #31
 8021c06:	5cfb      	ldrb	r3, [r7, r3]
 8021c08:	bf54      	ite	pl
 8021c0a:	f003 030f 	andpl.w	r3, r3, #15
 8021c0e:	111b      	asrmi	r3, r3, #4
 8021c10:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8021c14:	b2db      	uxtb	r3, r3
 8021c16:	930a      	str	r3, [sp, #40]	; 0x28
 8021c18:	e71d      	b.n	8021a56 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8021c1a:	f113 0b01 	adds.w	fp, r3, #1
 8021c1e:	f53f af72 	bmi.w	8021b06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021c22:	45dc      	cmp	ip, fp
 8021c24:	f6ff af6f 	blt.w	8021b06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021c28:	f110 0b01 	adds.w	fp, r0, #1
 8021c2c:	f53f af6b 	bmi.w	8021b06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021c30:	45de      	cmp	lr, fp
 8021c32:	f6ff af68 	blt.w	8021b06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021c36:	9302      	str	r3, [sp, #8]
 8021c38:	fa0f f38e 	sxth.w	r3, lr
 8021c3c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021c3e:	9301      	str	r3, [sp, #4]
 8021c40:	fa0f f38c 	sxth.w	r3, ip
 8021c44:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8021c48:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8021c4c:	9300      	str	r3, [sp, #0]
 8021c4e:	463a      	mov	r2, r7
 8021c50:	464b      	mov	r3, r9
 8021c52:	4641      	mov	r1, r8
 8021c54:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021c56:	f7ff fd79 	bl	802174c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8021c5a:	e754      	b.n	8021b06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021c5c:	142a      	asrs	r2, r5, #16
 8021c5e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8021c62:	1433      	asrs	r3, r6, #16
 8021c64:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8021c68:	fb09 2303 	mla	r3, r9, r3, r2
 8021c6c:	085a      	lsrs	r2, r3, #1
 8021c6e:	07dc      	lsls	r4, r3, #31
 8021c70:	5cba      	ldrb	r2, [r7, r2]
 8021c72:	bf54      	ite	pl
 8021c74:	f002 020f 	andpl.w	r2, r2, #15
 8021c78:	1112      	asrmi	r2, r2, #4
 8021c7a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021c7e:	b2d2      	uxtb	r2, r2
 8021c80:	2900      	cmp	r1, #0
 8021c82:	f000 8097 	beq.w	8021db4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8021c86:	f103 0b01 	add.w	fp, r3, #1
 8021c8a:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 8021c8e:	f01b 0f01 	tst.w	fp, #1
 8021c92:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021c96:	bf0c      	ite	eq
 8021c98:	f00c 0c0f 	andeq.w	ip, ip, #15
 8021c9c:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8021ca0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021ca4:	fa5f f48c 	uxtb.w	r4, ip
 8021ca8:	9412      	str	r4, [sp, #72]	; 0x48
 8021caa:	b300      	cbz	r0, 8021cee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8021cac:	444b      	add	r3, r9
 8021cae:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8021cb2:	07dc      	lsls	r4, r3, #31
 8021cb4:	f103 0301 	add.w	r3, r3, #1
 8021cb8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021cbc:	bf54      	ite	pl
 8021cbe:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021cc2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021cc6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021cca:	fa5f f48c 	uxtb.w	r4, ip
 8021cce:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8021cd2:	940b      	str	r4, [sp, #44]	; 0x2c
 8021cd4:	07dc      	lsls	r4, r3, #31
 8021cd6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021cda:	bf54      	ite	pl
 8021cdc:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021ce0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021ce4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021ce8:	fa5f f38c 	uxtb.w	r3, ip
 8021cec:	9313      	str	r3, [sp, #76]	; 0x4c
 8021cee:	b289      	uxth	r1, r1
 8021cf0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021cf2:	b280      	uxth	r0, r0
 8021cf4:	fb01 f300 	mul.w	r3, r1, r0
 8021cf8:	0109      	lsls	r1, r1, #4
 8021cfa:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8021cfe:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8021d02:	1ac9      	subs	r1, r1, r3
 8021d04:	b280      	uxth	r0, r0
 8021d06:	b289      	uxth	r1, r1
 8021d08:	ebac 0c00 	sub.w	ip, ip, r0
 8021d0c:	4361      	muls	r1, r4
 8021d0e:	fa1f fc8c 	uxth.w	ip, ip
 8021d12:	fb02 120c 	mla	r2, r2, ip, r1
 8021d16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8021d18:	fb00 2001 	mla	r0, r0, r1, r2
 8021d1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021d1e:	fb03 0302 	mla	r3, r3, r2, r0
 8021d22:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021d26:	2b00      	cmp	r3, #0
 8021d28:	d039      	beq.n	8021d9e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8021d2a:	4a21      	ldr	r2, [pc, #132]	; (8021db0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8021d2c:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8021d30:	6810      	ldr	r0, [r2, #0]
 8021d32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021d34:	fa5f fc80 	uxtb.w	ip, r0
 8021d38:	4353      	muls	r3, r2
 8021d3a:	1c5a      	adds	r2, r3, #1
 8021d3c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021d40:	121b      	asrs	r3, r3, #8
 8021d42:	b29a      	uxth	r2, r3
 8021d44:	43db      	mvns	r3, r3
 8021d46:	fb1c fc02 	smulbb	ip, ip, r2
 8021d4a:	b2db      	uxtb	r3, r3
 8021d4c:	fb01 c103 	mla	r1, r1, r3, ip
 8021d50:	b289      	uxth	r1, r1
 8021d52:	f101 0c01 	add.w	ip, r1, #1
 8021d56:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8021d5a:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8021d5e:	fb1c fc03 	smulbb	ip, ip, r3
 8021d62:	1209      	asrs	r1, r1, #8
 8021d64:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8021d68:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8021d6c:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8021d70:	fb01 c102 	mla	r1, r1, r2, ip
 8021d74:	b289      	uxth	r1, r1
 8021d76:	f101 0c01 	add.w	ip, r1, #1
 8021d7a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8021d7e:	1209      	asrs	r1, r1, #8
 8021d80:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8021d84:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8021d88:	fb11 f303 	smulbb	r3, r1, r3
 8021d8c:	fb00 3002 	mla	r0, r0, r2, r3
 8021d90:	b280      	uxth	r0, r0
 8021d92:	1c42      	adds	r2, r0, #1
 8021d94:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021d98:	1200      	asrs	r0, r0, #8
 8021d9a:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8021d9e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021da0:	f10e 0e03 	add.w	lr, lr, #3
 8021da4:	f108 38ff 	add.w	r8, r8, #4294967295
 8021da8:	441d      	add	r5, r3
 8021daa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021dac:	441e      	add	r6, r3
 8021dae:	e6db      	b.n	8021b68 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8021db0:	2400eae0 	.word	0x2400eae0
 8021db4:	2800      	cmp	r0, #0
 8021db6:	d09a      	beq.n	8021cee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8021db8:	444b      	add	r3, r9
 8021dba:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8021dbe:	07db      	lsls	r3, r3, #31
 8021dc0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021dc4:	bf54      	ite	pl
 8021dc6:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021dca:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021dce:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021dd2:	fa5f f38c 	uxtb.w	r3, ip
 8021dd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8021dd8:	e789      	b.n	8021cee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8021dda:	b017      	add	sp, #92	; 0x5c
 8021ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021de0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8021de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021de4:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 8021de8:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8021dec:	2d00      	cmp	r5, #0
 8021dee:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8021df2:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8021df6:	fb04 5e03 	mla	lr, r4, r3, r5
 8021dfa:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8021dfe:	f2c0 80b1 	blt.w	8021f64 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8021e02:	45a9      	cmp	r9, r5
 8021e04:	f340 80ae 	ble.w	8021f64 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8021e08:	2c00      	cmp	r4, #0
 8021e0a:	f2c0 80ab 	blt.w	8021f64 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8021e0e:	45a0      	cmp	r8, r4
 8021e10:	f340 80a8 	ble.w	8021f64 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8021e14:	ea4f 065e 	mov.w	r6, lr, lsr #1
 8021e18:	f01e 0f01 	tst.w	lr, #1
 8021e1c:	5d97      	ldrb	r7, [r2, r6]
 8021e1e:	bf0c      	ite	eq
 8021e20:	f007 070f 	andeq.w	r7, r7, #15
 8021e24:	113f      	asrne	r7, r7, #4
 8021e26:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 8021e2a:	b2ff      	uxtb	r7, r7
 8021e2c:	f115 0a01 	adds.w	sl, r5, #1
 8021e30:	f100 809a 	bmi.w	8021f68 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8021e34:	45d1      	cmp	r9, sl
 8021e36:	f340 8097 	ble.w	8021f68 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8021e3a:	2c00      	cmp	r4, #0
 8021e3c:	f2c0 8094 	blt.w	8021f68 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8021e40:	45a0      	cmp	r8, r4
 8021e42:	f340 8091 	ble.w	8021f68 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8021e46:	2800      	cmp	r0, #0
 8021e48:	f000 8090 	beq.w	8021f6c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 8021e4c:	f10e 0b01 	add.w	fp, lr, #1
 8021e50:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8021e54:	f01b 0f01 	tst.w	fp, #1
 8021e58:	5d96      	ldrb	r6, [r2, r6]
 8021e5a:	bf0c      	ite	eq
 8021e5c:	f006 060f 	andeq.w	r6, r6, #15
 8021e60:	1136      	asrne	r6, r6, #4
 8021e62:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8021e66:	b2f6      	uxtb	r6, r6
 8021e68:	f1bc 0f00 	cmp.w	ip, #0
 8021e6c:	f000 8082 	beq.w	8021f74 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 8021e70:	2d00      	cmp	r5, #0
 8021e72:	f104 0401 	add.w	r4, r4, #1
 8021e76:	db7b      	blt.n	8021f70 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8021e78:	45a9      	cmp	r9, r5
 8021e7a:	dd79      	ble.n	8021f70 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8021e7c:	2c00      	cmp	r4, #0
 8021e7e:	db77      	blt.n	8021f70 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8021e80:	45a0      	cmp	r8, r4
 8021e82:	dd75      	ble.n	8021f70 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8021e84:	eb03 0b0e 	add.w	fp, r3, lr
 8021e88:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8021e8c:	f01b 0f01 	tst.w	fp, #1
 8021e90:	5d55      	ldrb	r5, [r2, r5]
 8021e92:	bf0c      	ite	eq
 8021e94:	f005 050f 	andeq.w	r5, r5, #15
 8021e98:	112d      	asrne	r5, r5, #4
 8021e9a:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8021e9e:	b2ed      	uxtb	r5, r5
 8021ea0:	f1ba 0f00 	cmp.w	sl, #0
 8021ea4:	db69      	blt.n	8021f7a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8021ea6:	45d1      	cmp	r9, sl
 8021ea8:	dd67      	ble.n	8021f7a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8021eaa:	2c00      	cmp	r4, #0
 8021eac:	db65      	blt.n	8021f7a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8021eae:	45a0      	cmp	r8, r4
 8021eb0:	dd63      	ble.n	8021f7a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8021eb2:	2800      	cmp	r0, #0
 8021eb4:	d063      	beq.n	8021f7e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 8021eb6:	3301      	adds	r3, #1
 8021eb8:	449e      	add	lr, r3
 8021eba:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8021ebe:	f01e 0f01 	tst.w	lr, #1
 8021ec2:	5cd4      	ldrb	r4, [r2, r3]
 8021ec4:	bf0c      	ite	eq
 8021ec6:	f004 040f 	andeq.w	r4, r4, #15
 8021eca:	1124      	asrne	r4, r4, #4
 8021ecc:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8021ed0:	b2e3      	uxtb	r3, r4
 8021ed2:	b282      	uxth	r2, r0
 8021ed4:	fa1f fc8c 	uxth.w	ip, ip
 8021ed8:	fb02 f40c 	mul.w	r4, r2, ip
 8021edc:	0112      	lsls	r2, r2, #4
 8021ede:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 8021ee2:	fa1f f08c 	uxth.w	r0, ip
 8021ee6:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8021eea:	1b12      	subs	r2, r2, r4
 8021eec:	ebac 0c00 	sub.w	ip, ip, r0
 8021ef0:	b292      	uxth	r2, r2
 8021ef2:	fa1f fc8c 	uxth.w	ip, ip
 8021ef6:	4372      	muls	r2, r6
 8021ef8:	fb07 220c 	mla	r2, r7, ip, r2
 8021efc:	fb00 2005 	mla	r0, r0, r5, r2
 8021f00:	fb04 0303 	mla	r3, r4, r3, r0
 8021f04:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021f08:	b353      	cbz	r3, 8021f60 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 8021f0a:	4a1e      	ldr	r2, [pc, #120]	; (8021f84 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 8021f0c:	7808      	ldrb	r0, [r1, #0]
 8021f0e:	6814      	ldr	r4, [r2, #0]
 8021f10:	b29a      	uxth	r2, r3
 8021f12:	43db      	mvns	r3, r3
 8021f14:	b2e5      	uxtb	r5, r4
 8021f16:	b2db      	uxtb	r3, r3
 8021f18:	fb15 f502 	smulbb	r5, r5, r2
 8021f1c:	fb00 5003 	mla	r0, r0, r3, r5
 8021f20:	b280      	uxth	r0, r0
 8021f22:	1c45      	adds	r5, r0, #1
 8021f24:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8021f28:	784d      	ldrb	r5, [r1, #1]
 8021f2a:	fb15 f503 	smulbb	r5, r5, r3
 8021f2e:	1200      	asrs	r0, r0, #8
 8021f30:	7008      	strb	r0, [r1, #0]
 8021f32:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8021f36:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8021f3a:	fb00 5002 	mla	r0, r0, r2, r5
 8021f3e:	b280      	uxth	r0, r0
 8021f40:	1c45      	adds	r5, r0, #1
 8021f42:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8021f46:	1200      	asrs	r0, r0, #8
 8021f48:	7048      	strb	r0, [r1, #1]
 8021f4a:	7888      	ldrb	r0, [r1, #2]
 8021f4c:	fb10 f303 	smulbb	r3, r0, r3
 8021f50:	fb04 3202 	mla	r2, r4, r2, r3
 8021f54:	b292      	uxth	r2, r2
 8021f56:	1c53      	adds	r3, r2, #1
 8021f58:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8021f5c:	1212      	asrs	r2, r2, #8
 8021f5e:	708a      	strb	r2, [r1, #2]
 8021f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021f64:	2700      	movs	r7, #0
 8021f66:	e761      	b.n	8021e2c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 8021f68:	2600      	movs	r6, #0
 8021f6a:	e77d      	b.n	8021e68 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8021f6c:	4606      	mov	r6, r0
 8021f6e:	e77b      	b.n	8021e68 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8021f70:	2500      	movs	r5, #0
 8021f72:	e795      	b.n	8021ea0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 8021f74:	4663      	mov	r3, ip
 8021f76:	4665      	mov	r5, ip
 8021f78:	e7ab      	b.n	8021ed2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8021f7a:	2300      	movs	r3, #0
 8021f7c:	e7a9      	b.n	8021ed2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8021f7e:	4603      	mov	r3, r0
 8021f80:	e7a7      	b.n	8021ed2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8021f82:	bf00      	nop
 8021f84:	2400eae0 	.word	0x2400eae0

08021f88 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f8c:	b093      	sub	sp, #76	; 0x4c
 8021f8e:	461c      	mov	r4, r3
 8021f90:	920c      	str	r2, [sp, #48]	; 0x30
 8021f92:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8021f94:	9011      	str	r0, [sp, #68]	; 0x44
 8021f96:	9107      	str	r1, [sp, #28]
 8021f98:	6850      	ldr	r0, [r2, #4]
 8021f9a:	6812      	ldr	r2, [r2, #0]
 8021f9c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8021fa0:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	; 0x74
 8021fa4:	fb00 1303 	mla	r3, r0, r3, r1
 8021fa8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021fac:	eb02 0b03 	add.w	fp, r2, r3
 8021fb0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021fb2:	689b      	ldr	r3, [r3, #8]
 8021fb4:	3301      	adds	r3, #1
 8021fb6:	f023 0301 	bic.w	r3, r3, #1
 8021fba:	9309      	str	r3, [sp, #36]	; 0x24
 8021fbc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021fbe:	f8d3 8000 	ldr.w	r8, [r3]
 8021fc2:	9b07      	ldr	r3, [sp, #28]
 8021fc4:	2b00      	cmp	r3, #0
 8021fc6:	dc03      	bgt.n	8021fd0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021fc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021fca:	2b00      	cmp	r3, #0
 8021fcc:	f340 822b 	ble.w	8022426 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8021fd0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021fd2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021fd6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021fda:	1e48      	subs	r0, r1, #1
 8021fdc:	1e57      	subs	r7, r2, #1
 8021fde:	2c00      	cmp	r4, #0
 8021fe0:	f340 80d7 	ble.w	8022192 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8021fe4:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8021fe8:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021fec:	d406      	bmi.n	8021ffc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8021fee:	4584      	cmp	ip, r0
 8021ff0:	da04      	bge.n	8021ffc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8021ff2:	2b00      	cmp	r3, #0
 8021ff4:	db02      	blt.n	8021ffc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8021ff6:	42bb      	cmp	r3, r7
 8021ff8:	f2c0 80cc 	blt.w	8022194 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8021ffc:	f11c 0c01 	adds.w	ip, ip, #1
 8022000:	f100 80bf 	bmi.w	8022182 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8022004:	4561      	cmp	r1, ip
 8022006:	f2c0 80bc 	blt.w	8022182 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802200a:	3301      	adds	r3, #1
 802200c:	f100 80b9 	bmi.w	8022182 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8022010:	429a      	cmp	r2, r3
 8022012:	f2c0 80b6 	blt.w	8022182 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8022016:	46a2      	mov	sl, r4
 8022018:	465f      	mov	r7, fp
 802201a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802201e:	f1ba 0f00 	cmp.w	sl, #0
 8022022:	f340 80d4 	ble.w	80221ce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8022026:	f3c5 3303 	ubfx	r3, r5, #12, #4
 802202a:	1430      	asrs	r0, r6, #16
 802202c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022030:	9308      	str	r3, [sp, #32]
 8022032:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022034:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8022038:	142b      	asrs	r3, r5, #16
 802203a:	f100 8124 	bmi.w	8022286 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802203e:	f10c 32ff 	add.w	r2, ip, #4294967295
 8022042:	4293      	cmp	r3, r2
 8022044:	f280 811f 	bge.w	8022286 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8022048:	2800      	cmp	r0, #0
 802204a:	f2c0 811c 	blt.w	8022286 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802204e:	f10e 32ff 	add.w	r2, lr, #4294967295
 8022052:	4290      	cmp	r0, r2
 8022054:	f280 8117 	bge.w	8022286 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8022058:	fb00 3309 	mla	r3, r0, r9, r3
 802205c:	0858      	lsrs	r0, r3, #1
 802205e:	07da      	lsls	r2, r3, #31
 8022060:	9a08      	ldr	r2, [sp, #32]
 8022062:	f818 c000 	ldrb.w	ip, [r8, r0]
 8022066:	bf54      	ite	pl
 8022068:	f00c 0c0f 	andpl.w	ip, ip, #15
 802206c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022070:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022074:	fa5f fc8c 	uxtb.w	ip, ip
 8022078:	2a00      	cmp	r2, #0
 802207a:	f000 80ed 	beq.w	8022258 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 802207e:	1c58      	adds	r0, r3, #1
 8022080:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8022084:	07c0      	lsls	r0, r0, #31
 8022086:	f818 e00e 	ldrb.w	lr, [r8, lr]
 802208a:	bf54      	ite	pl
 802208c:	f00e 0e0f 	andpl.w	lr, lr, #15
 8022090:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8022094:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8022098:	fa5f fe8e 	uxtb.w	lr, lr
 802209c:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 80220a0:	b1c9      	cbz	r1, 80220d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80220a2:	444b      	add	r3, r9
 80220a4:	0858      	lsrs	r0, r3, #1
 80220a6:	07da      	lsls	r2, r3, #31
 80220a8:	f818 0000 	ldrb.w	r0, [r8, r0]
 80220ac:	bf54      	ite	pl
 80220ae:	f000 000f 	andpl.w	r0, r0, #15
 80220b2:	1100      	asrmi	r0, r0, #4
 80220b4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80220b8:	b2c0      	uxtb	r0, r0
 80220ba:	900a      	str	r0, [sp, #40]	; 0x28
 80220bc:	1c58      	adds	r0, r3, #1
 80220be:	0843      	lsrs	r3, r0, #1
 80220c0:	07c2      	lsls	r2, r0, #31
 80220c2:	f818 3003 	ldrb.w	r3, [r8, r3]
 80220c6:	bf54      	ite	pl
 80220c8:	f003 030f 	andpl.w	r3, r3, #15
 80220cc:	111b      	asrmi	r3, r3, #4
 80220ce:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80220d2:	b2db      	uxtb	r3, r3
 80220d4:	930e      	str	r3, [sp, #56]	; 0x38
 80220d6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80220da:	b289      	uxth	r1, r1
 80220dc:	fb02 f301 	mul.w	r3, r2, r1
 80220e0:	0112      	lsls	r2, r2, #4
 80220e2:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80220e6:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80220ea:	1ad2      	subs	r2, r2, r3
 80220ec:	b289      	uxth	r1, r1
 80220ee:	b292      	uxth	r2, r2
 80220f0:	1a40      	subs	r0, r0, r1
 80220f2:	fa1f fe80 	uxth.w	lr, r0
 80220f6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80220f8:	4342      	muls	r2, r0
 80220fa:	fb0c 2c0e 	mla	ip, ip, lr, r2
 80220fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022100:	fb01 c102 	mla	r1, r1, r2, ip
 8022104:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022106:	fb03 1302 	mla	r3, r3, r2, r1
 802210a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802210e:	b383      	cbz	r3, 8022172 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022110:	4ac6      	ldr	r2, [pc, #792]	; (802242c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8022112:	2bff      	cmp	r3, #255	; 0xff
 8022114:	6812      	ldr	r2, [r2, #0]
 8022116:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 802211a:	f3c2 2007 	ubfx	r0, r2, #8, #8
 802211e:	b2d2      	uxtb	r2, r2
 8022120:	f000 80ac 	beq.w	802227c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8022124:	b299      	uxth	r1, r3
 8022126:	43db      	mvns	r3, r3
 8022128:	f897 c000 	ldrb.w	ip, [r7]
 802212c:	fb12 f201 	smulbb	r2, r2, r1
 8022130:	b2db      	uxtb	r3, r3
 8022132:	fb10 f001 	smulbb	r0, r0, r1
 8022136:	fb0c 2203 	mla	r2, ip, r3, r2
 802213a:	fb1e f101 	smulbb	r1, lr, r1
 802213e:	b292      	uxth	r2, r2
 8022140:	f102 0c01 	add.w	ip, r2, #1
 8022144:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8022148:	1212      	asrs	r2, r2, #8
 802214a:	703a      	strb	r2, [r7, #0]
 802214c:	787a      	ldrb	r2, [r7, #1]
 802214e:	fb02 0003 	mla	r0, r2, r3, r0
 8022152:	b280      	uxth	r0, r0
 8022154:	1c42      	adds	r2, r0, #1
 8022156:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802215a:	78ba      	ldrb	r2, [r7, #2]
 802215c:	fb02 1303 	mla	r3, r2, r3, r1
 8022160:	1200      	asrs	r0, r0, #8
 8022162:	b29b      	uxth	r3, r3
 8022164:	7078      	strb	r0, [r7, #1]
 8022166:	f103 0e01 	add.w	lr, r3, #1
 802216a:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 802216e:	121b      	asrs	r3, r3, #8
 8022170:	70bb      	strb	r3, [r7, #2]
 8022172:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022174:	3703      	adds	r7, #3
 8022176:	f10a 3aff 	add.w	sl, sl, #4294967295
 802217a:	441d      	add	r5, r3
 802217c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802217e:	441e      	add	r6, r3
 8022180:	e74d      	b.n	802201e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022182:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022184:	3c01      	subs	r4, #1
 8022186:	f10b 0b03 	add.w	fp, fp, #3
 802218a:	441d      	add	r5, r3
 802218c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802218e:	441e      	add	r6, r3
 8022190:	e725      	b.n	8021fde <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8022192:	d021      	beq.n	80221d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8022194:	1e63      	subs	r3, r4, #1
 8022196:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8022198:	fb00 5003 	mla	r0, r0, r3, r5
 802219c:	1400      	asrs	r0, r0, #16
 802219e:	f53f af3a 	bmi.w	8022016 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80221a2:	3901      	subs	r1, #1
 80221a4:	4288      	cmp	r0, r1
 80221a6:	f6bf af36 	bge.w	8022016 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80221aa:	9920      	ldr	r1, [sp, #128]	; 0x80
 80221ac:	fb01 6303 	mla	r3, r1, r3, r6
 80221b0:	141b      	asrs	r3, r3, #16
 80221b2:	f53f af30 	bmi.w	8022016 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80221b6:	3a01      	subs	r2, #1
 80221b8:	4293      	cmp	r3, r2
 80221ba:	f6bf af2c 	bge.w	8022016 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80221be:	f10b 0c03 	add.w	ip, fp, #3
 80221c2:	46a6      	mov	lr, r4
 80221c4:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80221c8:	f1be 0f00 	cmp.w	lr, #0
 80221cc:	dc79      	bgt.n	80222c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 80221ce:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80221d2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80221d6:	44a3      	add	fp, r4
 80221d8:	9b07      	ldr	r3, [sp, #28]
 80221da:	2b00      	cmp	r3, #0
 80221dc:	f340 8123 	ble.w	8022426 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80221e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80221e4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80221e6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80221ea:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80221ee:	eef0 6a62 	vmov.f32	s13, s5
 80221f2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80221f6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80221fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80221fe:	ee16 5a90 	vmov	r5, s13
 8022202:	eef0 6a43 	vmov.f32	s13, s6
 8022206:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802220a:	ee16 6a90 	vmov	r6, s13
 802220e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022212:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022216:	ee77 2a62 	vsub.f32	s5, s14, s5
 802221a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802221e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022222:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022226:	ee12 2a90 	vmov	r2, s5
 802222a:	eef0 2a47 	vmov.f32	s5, s14
 802222e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022232:	ee13 2a10 	vmov	r2, s6
 8022236:	931f      	str	r3, [sp, #124]	; 0x7c
 8022238:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802223a:	eeb0 3a67 	vmov.f32	s6, s15
 802223e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022242:	9320      	str	r3, [sp, #128]	; 0x80
 8022244:	9b07      	ldr	r3, [sp, #28]
 8022246:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022248:	3b01      	subs	r3, #1
 802224a:	9307      	str	r3, [sp, #28]
 802224c:	bf08      	it	eq
 802224e:	4614      	moveq	r4, r2
 8022250:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022252:	bf18      	it	ne
 8022254:	461c      	movne	r4, r3
 8022256:	e6b4      	b.n	8021fc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8022258:	2900      	cmp	r1, #0
 802225a:	f43f af3c 	beq.w	80220d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802225e:	eb09 0003 	add.w	r0, r9, r3
 8022262:	0843      	lsrs	r3, r0, #1
 8022264:	07c0      	lsls	r0, r0, #31
 8022266:	f818 3003 	ldrb.w	r3, [r8, r3]
 802226a:	bf54      	ite	pl
 802226c:	f003 030f 	andpl.w	r3, r3, #15
 8022270:	111b      	asrmi	r3, r3, #4
 8022272:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022276:	b2db      	uxtb	r3, r3
 8022278:	930a      	str	r3, [sp, #40]	; 0x28
 802227a:	e72c      	b.n	80220d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802227c:	703a      	strb	r2, [r7, #0]
 802227e:	7078      	strb	r0, [r7, #1]
 8022280:	f887 e002 	strb.w	lr, [r7, #2]
 8022284:	e775      	b.n	8022172 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022286:	1c5a      	adds	r2, r3, #1
 8022288:	f53f af73 	bmi.w	8022172 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802228c:	4594      	cmp	ip, r2
 802228e:	f6ff af70 	blt.w	8022172 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022292:	1c42      	adds	r2, r0, #1
 8022294:	f53f af6d 	bmi.w	8022172 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022298:	4596      	cmp	lr, r2
 802229a:	f6ff af6a 	blt.w	8022172 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802229e:	9302      	str	r3, [sp, #8]
 80222a0:	fa0f f38e 	sxth.w	r3, lr
 80222a4:	9a08      	ldr	r2, [sp, #32]
 80222a6:	9301      	str	r3, [sp, #4]
 80222a8:	fa0f f38c 	sxth.w	r3, ip
 80222ac:	9105      	str	r1, [sp, #20]
 80222ae:	4639      	mov	r1, r7
 80222b0:	9300      	str	r3, [sp, #0]
 80222b2:	464b      	mov	r3, r9
 80222b4:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80222b8:	4642      	mov	r2, r8
 80222ba:	9811      	ldr	r0, [sp, #68]	; 0x44
 80222bc:	f7ff fd90 	bl	8021de0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 80222c0:	e757      	b.n	8022172 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80222c2:	142a      	asrs	r2, r5, #16
 80222c4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80222c8:	1433      	asrs	r3, r6, #16
 80222ca:	f3c6 3703 	ubfx	r7, r6, #12, #4
 80222ce:	fb09 2303 	mla	r3, r9, r3, r2
 80222d2:	085a      	lsrs	r2, r3, #1
 80222d4:	07d9      	lsls	r1, r3, #31
 80222d6:	f818 2002 	ldrb.w	r2, [r8, r2]
 80222da:	bf54      	ite	pl
 80222dc:	f002 020f 	andpl.w	r2, r2, #15
 80222e0:	1112      	asrmi	r2, r2, #4
 80222e2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80222e6:	b2d2      	uxtb	r2, r2
 80222e8:	2800      	cmp	r0, #0
 80222ea:	f000 8085 	beq.w	80223f8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 80222ee:	f103 0a01 	add.w	sl, r3, #1
 80222f2:	ea4f 015a 	mov.w	r1, sl, lsr #1
 80222f6:	f01a 0f01 	tst.w	sl, #1
 80222fa:	f818 1001 	ldrb.w	r1, [r8, r1]
 80222fe:	bf0c      	ite	eq
 8022300:	f001 010f 	andeq.w	r1, r1, #15
 8022304:	1109      	asrne	r1, r1, #4
 8022306:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802230a:	b2c9      	uxtb	r1, r1
 802230c:	910f      	str	r1, [sp, #60]	; 0x3c
 802230e:	b1df      	cbz	r7, 8022348 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8022310:	444b      	add	r3, r9
 8022312:	0859      	lsrs	r1, r3, #1
 8022314:	f013 0f01 	tst.w	r3, #1
 8022318:	f103 0301 	add.w	r3, r3, #1
 802231c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8022320:	bf0c      	ite	eq
 8022322:	f001 010f 	andeq.w	r1, r1, #15
 8022326:	1109      	asrne	r1, r1, #4
 8022328:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802232c:	b2c9      	uxtb	r1, r1
 802232e:	910b      	str	r1, [sp, #44]	; 0x2c
 8022330:	0859      	lsrs	r1, r3, #1
 8022332:	07db      	lsls	r3, r3, #31
 8022334:	f818 1001 	ldrb.w	r1, [r8, r1]
 8022338:	bf54      	ite	pl
 802233a:	f001 010f 	andpl.w	r1, r1, #15
 802233e:	1109      	asrmi	r1, r1, #4
 8022340:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022344:	b2c9      	uxtb	r1, r1
 8022346:	9110      	str	r1, [sp, #64]	; 0x40
 8022348:	b280      	uxth	r0, r0
 802234a:	b2bf      	uxth	r7, r7
 802234c:	fb00 f307 	mul.w	r3, r0, r7
 8022350:	0100      	lsls	r0, r0, #4
 8022352:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8022356:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 802235a:	1ac0      	subs	r0, r0, r3
 802235c:	b2bf      	uxth	r7, r7
 802235e:	b280      	uxth	r0, r0
 8022360:	1bc9      	subs	r1, r1, r7
 8022362:	fa1f fa81 	uxth.w	sl, r1
 8022366:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022368:	4348      	muls	r0, r1
 802236a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802236c:	fb02 020a 	mla	r2, r2, sl, r0
 8022370:	fb07 2701 	mla	r7, r7, r1, r2
 8022374:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022376:	fb03 7302 	mla	r3, r3, r2, r7
 802237a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802237e:	b393      	cbz	r3, 80223e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8022380:	4a2a      	ldr	r2, [pc, #168]	; (802242c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8022382:	2bff      	cmp	r3, #255	; 0xff
 8022384:	6811      	ldr	r1, [r2, #0]
 8022386:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 802238a:	f3c1 2707 	ubfx	r7, r1, #8, #8
 802238e:	b2c9      	uxtb	r1, r1
 8022390:	d042      	beq.n	8022418 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8022392:	b298      	uxth	r0, r3
 8022394:	43db      	mvns	r3, r3
 8022396:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 802239a:	fb11 f100 	smulbb	r1, r1, r0
 802239e:	b2db      	uxtb	r3, r3
 80223a0:	fb17 f700 	smulbb	r7, r7, r0
 80223a4:	fb02 1103 	mla	r1, r2, r3, r1
 80223a8:	fb1a f000 	smulbb	r0, sl, r0
 80223ac:	b289      	uxth	r1, r1
 80223ae:	1c4a      	adds	r2, r1, #1
 80223b0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80223b4:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 80223b8:	fb02 7703 	mla	r7, r2, r3, r7
 80223bc:	1209      	asrs	r1, r1, #8
 80223be:	b2bf      	uxth	r7, r7
 80223c0:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80223c4:	1c7a      	adds	r2, r7, #1
 80223c6:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80223ca:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 80223ce:	fb02 0303 	mla	r3, r2, r3, r0
 80223d2:	123f      	asrs	r7, r7, #8
 80223d4:	b29b      	uxth	r3, r3
 80223d6:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80223da:	1c5a      	adds	r2, r3, #1
 80223dc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80223e0:	121b      	asrs	r3, r3, #8
 80223e2:	f80c 3c01 	strb.w	r3, [ip, #-1]
 80223e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80223e8:	f10c 0c03 	add.w	ip, ip, #3
 80223ec:	f10e 3eff 	add.w	lr, lr, #4294967295
 80223f0:	441d      	add	r5, r3
 80223f2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80223f4:	441e      	add	r6, r3
 80223f6:	e6e7      	b.n	80221c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80223f8:	2f00      	cmp	r7, #0
 80223fa:	d0a5      	beq.n	8022348 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80223fc:	444b      	add	r3, r9
 80223fe:	0859      	lsrs	r1, r3, #1
 8022400:	07db      	lsls	r3, r3, #31
 8022402:	f818 1001 	ldrb.w	r1, [r8, r1]
 8022406:	bf54      	ite	pl
 8022408:	f001 010f 	andpl.w	r1, r1, #15
 802240c:	1109      	asrmi	r1, r1, #4
 802240e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022412:	b2c9      	uxtb	r1, r1
 8022414:	910b      	str	r1, [sp, #44]	; 0x2c
 8022416:	e797      	b.n	8022348 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8022418:	f80c 1c03 	strb.w	r1, [ip, #-3]
 802241c:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8022420:	f80c ac01 	strb.w	sl, [ip, #-1]
 8022424:	e7df      	b.n	80223e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8022426:	b013      	add	sp, #76	; 0x4c
 8022428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802242c:	2400eae0 	.word	0x2400eae0

08022430 <CRC_Lock>:
 8022430:	4a20      	ldr	r2, [pc, #128]	; (80224b4 <CRC_Lock+0x84>)
 8022432:	b530      	push	{r4, r5, lr}
 8022434:	6813      	ldr	r3, [r2, #0]
 8022436:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802243a:	f24c 2540 	movw	r5, #49728	; 0xc240
 802243e:	f023 0301 	bic.w	r3, r3, #1
 8022442:	6013      	str	r3, [r2, #0]
 8022444:	4b1c      	ldr	r3, [pc, #112]	; (80224b8 <CRC_Lock+0x88>)
 8022446:	681a      	ldr	r2, [r3, #0]
 8022448:	4022      	ands	r2, r4
 802244a:	42aa      	cmp	r2, r5
 802244c:	d005      	beq.n	802245a <CRC_Lock+0x2a>
 802244e:	681b      	ldr	r3, [r3, #0]
 8022450:	f24c 2270 	movw	r2, #49776	; 0xc270
 8022454:	4023      	ands	r3, r4
 8022456:	4293      	cmp	r3, r2
 8022458:	d124      	bne.n	80224a4 <CRC_Lock+0x74>
 802245a:	4b18      	ldr	r3, [pc, #96]	; (80224bc <CRC_Lock+0x8c>)
 802245c:	681b      	ldr	r3, [r3, #0]
 802245e:	bb0b      	cbnz	r3, 80224a4 <CRC_Lock+0x74>
 8022460:	4b17      	ldr	r3, [pc, #92]	; (80224c0 <CRC_Lock+0x90>)
 8022462:	681a      	ldr	r2, [r3, #0]
 8022464:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8022468:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 802246c:	d00d      	beq.n	802248a <CRC_Lock+0x5a>
 802246e:	681a      	ldr	r2, [r3, #0]
 8022470:	f240 4483 	movw	r4, #1155	; 0x483
 8022474:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8022478:	42a2      	cmp	r2, r4
 802247a:	d006      	beq.n	802248a <CRC_Lock+0x5a>
 802247c:	681b      	ldr	r3, [r3, #0]
 802247e:	f240 4285 	movw	r2, #1157	; 0x485
 8022482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8022486:	4293      	cmp	r3, r2
 8022488:	d10c      	bne.n	80224a4 <CRC_Lock+0x74>
 802248a:	4b0e      	ldr	r3, [pc, #56]	; (80224c4 <CRC_Lock+0x94>)
 802248c:	2201      	movs	r2, #1
 802248e:	601a      	str	r2, [r3, #0]
 8022490:	681a      	ldr	r2, [r3, #0]
 8022492:	2a00      	cmp	r2, #0
 8022494:	d1fc      	bne.n	8022490 <CRC_Lock+0x60>
 8022496:	4b0c      	ldr	r3, [pc, #48]	; (80224c8 <CRC_Lock+0x98>)
 8022498:	6018      	str	r0, [r3, #0]
 802249a:	6818      	ldr	r0, [r3, #0]
 802249c:	1a43      	subs	r3, r0, r1
 802249e:	4258      	negs	r0, r3
 80224a0:	4158      	adcs	r0, r3
 80224a2:	bd30      	pop	{r4, r5, pc}
 80224a4:	4b09      	ldr	r3, [pc, #36]	; (80224cc <CRC_Lock+0x9c>)
 80224a6:	2201      	movs	r2, #1
 80224a8:	601a      	str	r2, [r3, #0]
 80224aa:	681a      	ldr	r2, [r3, #0]
 80224ac:	2a00      	cmp	r2, #0
 80224ae:	d1fc      	bne.n	80224aa <CRC_Lock+0x7a>
 80224b0:	4b07      	ldr	r3, [pc, #28]	; (80224d0 <CRC_Lock+0xa0>)
 80224b2:	e7f1      	b.n	8022498 <CRC_Lock+0x68>
 80224b4:	e0002000 	.word	0xe0002000
 80224b8:	e000ed00 	.word	0xe000ed00
 80224bc:	e0042000 	.word	0xe0042000
 80224c0:	5c001000 	.word	0x5c001000
 80224c4:	58024c08 	.word	0x58024c08
 80224c8:	58024c00 	.word	0x58024c00
 80224cc:	40023008 	.word	0x40023008
 80224d0:	40023000 	.word	0x40023000

080224d4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80224d4:	6101      	str	r1, [r0, #16]
 80224d6:	4770      	bx	lr

080224d8 <_ZN8touchgfx8Gestures4tickEv>:
 80224d8:	7b83      	ldrb	r3, [r0, #14]
 80224da:	b14b      	cbz	r3, 80224f0 <_ZN8touchgfx8Gestures4tickEv+0x18>
 80224dc:	8903      	ldrh	r3, [r0, #8]
 80224de:	3301      	adds	r3, #1
 80224e0:	b29b      	uxth	r3, r3
 80224e2:	2b07      	cmp	r3, #7
 80224e4:	8103      	strh	r3, [r0, #8]
 80224e6:	bf81      	itttt	hi
 80224e8:	2300      	movhi	r3, #0
 80224ea:	8143      	strhhi	r3, [r0, #10]
 80224ec:	8183      	strhhi	r3, [r0, #12]
 80224ee:	7383      	strbhi	r3, [r0, #14]
 80224f0:	4770      	bx	lr
	...

080224f4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80224f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80224f8:	4698      	mov	r8, r3
 80224fa:	8883      	ldrh	r3, [r0, #4]
 80224fc:	4604      	mov	r4, r0
 80224fe:	4617      	mov	r7, r2
 8022500:	f8ad 3006 	strh.w	r3, [sp, #6]
 8022504:	eba8 0303 	sub.w	r3, r8, r3
 8022508:	4a19      	ldr	r2, [pc, #100]	; (8022570 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802250a:	460e      	mov	r6, r1
 802250c:	b21b      	sxth	r3, r3
 802250e:	88c1      	ldrh	r1, [r0, #6]
 8022510:	9200      	str	r2, [sp, #0]
 8022512:	2000      	movs	r0, #0
 8022514:	2b00      	cmp	r3, #0
 8022516:	8aa2      	ldrh	r2, [r4, #20]
 8022518:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802251c:	bfb8      	it	lt
 802251e:	425b      	neglt	r3, r3
 8022520:	f88d 0004 	strb.w	r0, [sp, #4]
 8022524:	f8ad 1008 	strh.w	r1, [sp, #8]
 8022528:	b21b      	sxth	r3, r3
 802252a:	f8ad 800a 	strh.w	r8, [sp, #10]
 802252e:	f8ad 500c 	strh.w	r5, [sp, #12]
 8022532:	4293      	cmp	r3, r2
 8022534:	dc07      	bgt.n	8022546 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8022536:	1a69      	subs	r1, r5, r1
 8022538:	b209      	sxth	r1, r1
 802253a:	2900      	cmp	r1, #0
 802253c:	bfb8      	it	lt
 802253e:	4249      	neglt	r1, r1
 8022540:	b209      	sxth	r1, r1
 8022542:	428a      	cmp	r2, r1
 8022544:	da10      	bge.n	8022568 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8022546:	6920      	ldr	r0, [r4, #16]
 8022548:	4669      	mov	r1, sp
 802254a:	eba8 0606 	sub.w	r6, r8, r6
 802254e:	1bef      	subs	r7, r5, r7
 8022550:	6803      	ldr	r3, [r0, #0]
 8022552:	685b      	ldr	r3, [r3, #4]
 8022554:	4798      	blx	r3
 8022556:	2300      	movs	r3, #0
 8022558:	2001      	movs	r0, #1
 802255a:	8166      	strh	r6, [r4, #10]
 802255c:	8123      	strh	r3, [r4, #8]
 802255e:	81a7      	strh	r7, [r4, #12]
 8022560:	f8a4 8004 	strh.w	r8, [r4, #4]
 8022564:	80e5      	strh	r5, [r4, #6]
 8022566:	73a0      	strb	r0, [r4, #14]
 8022568:	b004      	add	sp, #16
 802256a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802256e:	bf00      	nop
 8022570:	0802607c 	.word	0x0802607c

08022574 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8022574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022576:	461e      	mov	r6, r3
 8022578:	1e4b      	subs	r3, r1, #1
 802257a:	b085      	sub	sp, #20
 802257c:	4604      	mov	r4, r0
 802257e:	2b01      	cmp	r3, #1
 8022580:	460d      	mov	r5, r1
 8022582:	4617      	mov	r7, r2
 8022584:	d84b      	bhi.n	802261e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8022586:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802258a:	1cd3      	adds	r3, r2, #3
 802258c:	b29b      	uxth	r3, r3
 802258e:	2b06      	cmp	r3, #6
 8022590:	d916      	bls.n	80225c0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8022592:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8022634 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8022596:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802259a:	f8cd c004 	str.w	ip, [sp, #4]
 802259e:	f04f 0c00 	mov.w	ip, #0
 80225a2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80225a6:	6900      	ldr	r0, [r0, #16]
 80225a8:	f8ad 100c 	strh.w	r1, [sp, #12]
 80225ac:	a901      	add	r1, sp, #4
 80225ae:	f88d c008 	strb.w	ip, [sp, #8]
 80225b2:	f8ad 200a 	strh.w	r2, [sp, #10]
 80225b6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80225ba:	6803      	ldr	r3, [r0, #0]
 80225bc:	689b      	ldr	r3, [r3, #8]
 80225be:	4798      	blx	r3
 80225c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80225c4:	1cd3      	adds	r3, r2, #3
 80225c6:	b29b      	uxth	r3, r3
 80225c8:	2b06      	cmp	r3, #6
 80225ca:	d916      	bls.n	80225fa <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80225cc:	f8df c064 	ldr.w	ip, [pc, #100]	; 8022634 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80225d0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80225d4:	f8cd c004 	str.w	ip, [sp, #4]
 80225d8:	f04f 0c01 	mov.w	ip, #1
 80225dc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80225e0:	6920      	ldr	r0, [r4, #16]
 80225e2:	f8ad 100c 	strh.w	r1, [sp, #12]
 80225e6:	a901      	add	r1, sp, #4
 80225e8:	f88d c008 	strb.w	ip, [sp, #8]
 80225ec:	f8ad 200a 	strh.w	r2, [sp, #10]
 80225f0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80225f4:	6803      	ldr	r3, [r0, #0]
 80225f6:	689b      	ldr	r3, [r3, #8]
 80225f8:	4798      	blx	r3
 80225fa:	4b0d      	ldr	r3, [pc, #52]	; (8022630 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80225fc:	a901      	add	r1, sp, #4
 80225fe:	6920      	ldr	r0, [r4, #16]
 8022600:	9301      	str	r3, [sp, #4]
 8022602:	2300      	movs	r3, #0
 8022604:	f88d 5008 	strb.w	r5, [sp, #8]
 8022608:	f8ad 700a 	strh.w	r7, [sp, #10]
 802260c:	f8ad 600c 	strh.w	r6, [sp, #12]
 8022610:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022614:	6803      	ldr	r3, [r0, #0]
 8022616:	681b      	ldr	r3, [r3, #0]
 8022618:	4798      	blx	r3
 802261a:	b005      	add	sp, #20
 802261c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802261e:	2900      	cmp	r1, #0
 8022620:	d1eb      	bne.n	80225fa <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8022622:	80a2      	strh	r2, [r4, #4]
 8022624:	80c6      	strh	r6, [r0, #6]
 8022626:	60a1      	str	r1, [r4, #8]
 8022628:	81a1      	strh	r1, [r4, #12]
 802262a:	73a1      	strb	r1, [r4, #14]
 802262c:	e7e5      	b.n	80225fa <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802262e:	bf00      	nop
 8022630:	08026068 	.word	0x08026068
 8022634:	08026090 	.word	0x08026090

08022638 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>:
 8022638:	10c9      	asrs	r1, r1, #3
 802263a:	2900      	cmp	r1, #0
 802263c:	bfb8      	it	lt
 802263e:	4249      	neglt	r1, r1
 8022640:	2801      	cmp	r0, #1
 8022642:	d108      	bne.n	8022656 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 8022644:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8022648:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 802264c:	4601      	mov	r1, r0
 802264e:	dd02      	ble.n	8022656 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 8022650:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8022654:	4770      	bx	lr
 8022656:	29ff      	cmp	r1, #255	; 0xff
 8022658:	bfa8      	it	ge
 802265a:	21ff      	movge	r1, #255	; 0xff
 802265c:	4608      	mov	r0, r1
 802265e:	4770      	bx	lr

08022660 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8022660:	b410      	push	{r4}
 8022662:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8022666:	429c      	cmp	r4, r3
 8022668:	d803      	bhi.n	8022672 <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 802266a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802266e:	f7f2 bf3b 	b.w	80154e8 <_ZN8touchgfx7Outline6lineToEii>
 8022672:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022676:	4770      	bx	lr

08022678 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8022678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802267c:	b08b      	sub	sp, #44	; 0x2c
 802267e:	4606      	mov	r6, r0
 8022680:	468a      	mov	sl, r1
 8022682:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8022686:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 802268a:	9308      	str	r3, [sp, #32]
 802268c:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8022690:	9309      	str	r3, [sp, #36]	; 0x24
 8022692:	f7f3 f894 	bl	80157be <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 8022696:	68b5      	ldr	r5, [r6, #8]
 8022698:	4604      	mov	r4, r0
 802269a:	2d00      	cmp	r5, #0
 802269c:	d044      	beq.n	8022728 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802269e:	6873      	ldr	r3, [r6, #4]
 80226a0:	42ab      	cmp	r3, r5
 80226a2:	d33d      	bcc.n	8022720 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 80226a4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80226a8:	f04f 0800 	mov.w	r8, #0
 80226ac:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 80226b0:	eb02 0b03 	add.w	fp, r2, r3
 80226b4:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80226b8:	fb02 1203 	mla	r2, r2, r3, r1
 80226bc:	9205      	str	r2, [sp, #20]
 80226be:	1e6a      	subs	r2, r5, #1
 80226c0:	9204      	str	r2, [sp, #16]
 80226c2:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 80226c6:	f9b4 7000 	ldrsh.w	r7, [r4]
 80226ca:	454b      	cmp	r3, r9
 80226cc:	463a      	mov	r2, r7
 80226ce:	d008      	beq.n	80226e2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 80226d0:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
 80226d4:	eb03 0b09 	add.w	fp, r3, r9
 80226d8:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 80226dc:	fb03 1309 	mla	r3, r3, r9, r1
 80226e0:	9305      	str	r3, [sp, #20]
 80226e2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80226e6:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80226ea:	4498      	add	r8, r3
 80226ec:	9b04      	ldr	r3, [sp, #16]
 80226ee:	3b01      	subs	r3, #1
 80226f0:	9304      	str	r3, [sp, #16]
 80226f2:	9b04      	ldr	r3, [sp, #16]
 80226f4:	3301      	adds	r3, #1
 80226f6:	d015      	beq.n	8022724 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 80226f8:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 80226fc:	42bb      	cmp	r3, r7
 80226fe:	d117      	bne.n	8022730 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 8022700:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8022704:	9b04      	ldr	r3, [sp, #16]
 8022706:	4548      	cmp	r0, r9
 8022708:	f103 33ff 	add.w	r3, r3, #4294967295
 802270c:	d17d      	bne.n	802280a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 802270e:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8022712:	4401      	add	r1, r0
 8022714:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8022718:	4480      	add	r8, r0
 802271a:	e7e9      	b.n	80226f0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 802271c:	461f      	mov	r7, r3
 802271e:	e042      	b.n	80227a6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 8022720:	2000      	movs	r0, #0
 8022722:	e002      	b.n	802272a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 8022724:	2900      	cmp	r1, #0
 8022726:	d16d      	bne.n	8022804 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8022728:	2001      	movs	r0, #1
 802272a:	b00b      	add	sp, #44	; 0x2c
 802272c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022730:	b379      	cbz	r1, 8022792 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 8022732:	2f00      	cmp	r7, #0
 8022734:	db29      	blt.n	802278a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8022736:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 802273a:	42bb      	cmp	r3, r7
 802273c:	dd25      	ble.n	802278a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802273e:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 8022742:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 8022746:	f7ff ff77 	bl	8022638 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 802274a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802274c:	fb10 f003 	smulbb	r0, r0, r3
 8022750:	b280      	uxth	r0, r0
 8022752:	1c41      	adds	r1, r0, #1
 8022754:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8022758:	1209      	asrs	r1, r1, #8
 802275a:	f011 0fff 	tst.w	r1, #255	; 0xff
 802275e:	d014      	beq.n	802278a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8022760:	b2c9      	uxtb	r1, r1
 8022762:	9808      	ldr	r0, [sp, #32]
 8022764:	b2ba      	uxth	r2, r7
 8022766:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 8022768:	9102      	str	r1, [sp, #8]
 802276a:	2101      	movs	r1, #1
 802276c:	4413      	add	r3, r2
 802276e:	4402      	add	r2, r0
 8022770:	9101      	str	r1, [sp, #4]
 8022772:	fa0f f18b 	sxth.w	r1, fp
 8022776:	f8da 0000 	ldr.w	r0, [sl]
 802277a:	b21b      	sxth	r3, r3
 802277c:	9100      	str	r1, [sp, #0]
 802277e:	b212      	sxth	r2, r2
 8022780:	6941      	ldr	r1, [r0, #20]
 8022782:	4650      	mov	r0, sl
 8022784:	460d      	mov	r5, r1
 8022786:	9905      	ldr	r1, [sp, #20]
 8022788:	47a8      	blx	r5
 802278a:	9b04      	ldr	r3, [sp, #16]
 802278c:	1c7a      	adds	r2, r7, #1
 802278e:	3301      	adds	r3, #1
 8022790:	d0ca      	beq.n	8022728 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8022792:	f9b4 7000 	ldrsh.w	r7, [r4]
 8022796:	1abb      	subs	r3, r7, r2
 8022798:	2b00      	cmp	r3, #0
 802279a:	dd31      	ble.n	8022800 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802279c:	2a00      	cmp	r2, #0
 802279e:	dabd      	bge.n	802271c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 80227a0:	2f00      	cmp	r7, #0
 80227a2:	dd2d      	ble.n	8022800 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80227a4:	2200      	movs	r2, #0
 80227a6:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 80227aa:	19d1      	adds	r1, r2, r7
 80227ac:	4299      	cmp	r1, r3
 80227ae:	db02      	blt.n	80227b6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 80227b0:	1a9f      	subs	r7, r3, r2
 80227b2:	2f00      	cmp	r7, #0
 80227b4:	dd24      	ble.n	8022800 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80227b6:	ea4f 1188 	mov.w	r1, r8, lsl #6
 80227ba:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 80227be:	f7ff ff3b 	bl	8022638 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 80227c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80227c4:	fb10 f003 	smulbb	r0, r0, r3
 80227c8:	b280      	uxth	r0, r0
 80227ca:	1c41      	adds	r1, r0, #1
 80227cc:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80227d0:	1209      	asrs	r1, r1, #8
 80227d2:	f011 0fff 	tst.w	r1, #255	; 0xff
 80227d6:	d013      	beq.n	8022800 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80227d8:	b292      	uxth	r2, r2
 80227da:	9808      	ldr	r0, [sp, #32]
 80227dc:	b2c9      	uxtb	r1, r1
 80227de:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 80227e0:	b23f      	sxth	r7, r7
 80227e2:	4413      	add	r3, r2
 80227e4:	9102      	str	r1, [sp, #8]
 80227e6:	4402      	add	r2, r0
 80227e8:	fa0f f18b 	sxth.w	r1, fp
 80227ec:	f8da 0000 	ldr.w	r0, [sl]
 80227f0:	b21b      	sxth	r3, r3
 80227f2:	9100      	str	r1, [sp, #0]
 80227f4:	b212      	sxth	r2, r2
 80227f6:	9701      	str	r7, [sp, #4]
 80227f8:	9905      	ldr	r1, [sp, #20]
 80227fa:	6947      	ldr	r7, [r0, #20]
 80227fc:	4650      	mov	r0, sl
 80227fe:	47b8      	blx	r7
 8022800:	464b      	mov	r3, r9
 8022802:	e75e      	b.n	80226c2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 8022804:	2f00      	cmp	r7, #0
 8022806:	da96      	bge.n	8022736 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 8022808:	e78e      	b.n	8022728 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802280a:	2900      	cmp	r1, #0
 802280c:	d0f8      	beq.n	8022800 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802280e:	e790      	b.n	8022732 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

08022810 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8022810:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8022814:	4b4a      	ldr	r3, [pc, #296]	; (8022940 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x130>)
 8022816:	2500      	movs	r5, #0
 8022818:	f100 0620 	add.w	r6, r0, #32
 802281c:	4604      	mov	r4, r0
 802281e:	4690      	mov	r8, r2
 8022820:	f100 0718 	add.w	r7, r0, #24
 8022824:	e9c0 3100 	strd	r3, r1, [r0]
 8022828:	e9c0 5502 	strd	r5, r5, [r0, #8]
 802282c:	e9c0 5504 	strd	r5, r5, [r0, #16]
 8022830:	e9c0 5506 	strd	r5, r5, [r0, #24]
 8022834:	4630      	mov	r0, r6
 8022836:	f7f2 f99d 	bl	8014b74 <_ZN8touchgfx7OutlineC1Ev>
 802283a:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 802283e:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 8022842:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 8022846:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 802284a:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 802284e:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 8022852:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 8022856:	f8d4 c004 	ldr.w	ip, [r4, #4]
 802285a:	9500      	str	r5, [sp, #0]
 802285c:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
 8022860:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 8022864:	f9b8 2000 	ldrsh.w	r2, [r8]
 8022868:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 802286c:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8022870:	4410      	add	r0, r2
 8022872:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8022876:	b280      	uxth	r0, r0
 8022878:	fa0f fa80 	sxth.w	sl, r0
 802287c:	45aa      	cmp	sl, r5
 802287e:	dd5c      	ble.n	802293a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 8022880:	4591      	cmp	r9, r2
 8022882:	dd5a      	ble.n	802293a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 8022884:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8022888:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 802288c:	440b      	add	r3, r1
 802288e:	b29b      	uxth	r3, r3
 8022890:	b21d      	sxth	r5, r3
 8022892:	2d00      	cmp	r5, #0
 8022894:	dd51      	ble.n	802293a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 8022896:	458e      	cmp	lr, r1
 8022898:	dd4f      	ble.n	802293a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 802289a:	45d1      	cmp	r9, sl
 802289c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80228a0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80228a4:	bfb8      	it	lt
 80228a6:	fa1f f089 	uxthlt.w	r0, r9
 80228aa:	45ae      	cmp	lr, r5
 80228ac:	f8ad 2000 	strh.w	r2, [sp]
 80228b0:	bfb8      	it	lt
 80228b2:	fa1f f38e 	uxthlt.w	r3, lr
 80228b6:	1a80      	subs	r0, r0, r2
 80228b8:	f8ad 1002 	strh.w	r1, [sp, #2]
 80228bc:	1a5b      	subs	r3, r3, r1
 80228be:	f8ad 0004 	strh.w	r0, [sp, #4]
 80228c2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80228c6:	466d      	mov	r5, sp
 80228c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80228cc:	e887 0003 	stmia.w	r7, {r0, r1}
 80228d0:	f8dc 3000 	ldr.w	r3, [ip]
 80228d4:	4660      	mov	r0, ip
 80228d6:	4639      	mov	r1, r7
 80228d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80228da:	4798      	blx	r3
 80228dc:	6861      	ldr	r1, [r4, #4]
 80228de:	4628      	mov	r0, r5
 80228e0:	3104      	adds	r1, #4
 80228e2:	f7f4 fb17 	bl	8016f14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80228e6:	4638      	mov	r0, r7
 80228e8:	f7f4 faec 	bl	8016ec4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80228ec:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80228f0:	f8bd 2000 	ldrh.w	r2, [sp]
 80228f4:	4630      	mov	r0, r6
 80228f6:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 80228fa:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 80228fe:	f7f2 f91d 	bl	8014b3c <_ZN8touchgfx7Outline5resetEv>
 8022902:	f9bd 3000 	ldrsh.w	r3, [sp]
 8022906:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
 802290a:	4620      	mov	r0, r4
 802290c:	015b      	lsls	r3, r3, #5
 802290e:	60a3      	str	r3, [r4, #8]
 8022910:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8022914:	015b      	lsls	r3, r3, #5
 8022916:	60e3      	str	r3, [r4, #12]
 8022918:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 802291c:	015b      	lsls	r3, r3, #5
 802291e:	6123      	str	r3, [r4, #16]
 8022920:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8022924:	015b      	lsls	r3, r3, #5
 8022926:	6163      	str	r3, [r4, #20]
 8022928:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 802292c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8022930:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
 8022934:	b002      	add	sp, #8
 8022936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802293a:	2300      	movs	r3, #0
 802293c:	9301      	str	r3, [sp, #4]
 802293e:	e7c2      	b.n	80228c6 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xb6>
 8022940:	080262c0 	.word	0x080262c0

08022944 <_ZN8touchgfx6Canvas5closeEv>:
 8022944:	b538      	push	{r3, r4, r5, lr}
 8022946:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 802294a:	4604      	mov	r4, r0
 802294c:	b193      	cbz	r3, 8022974 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802294e:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8022952:	f890 2065 	ldrb.w	r2, [r0, #101]	; 0x65
 8022956:	4213      	tst	r3, r2
 8022958:	d10c      	bne.n	8022974 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802295a:	f100 0520 	add.w	r5, r0, #32
 802295e:	b123      	cbz	r3, 802296a <_ZN8touchgfx6Canvas5closeEv+0x26>
 8022960:	e9d0 1217 	ldrd	r1, r2, [r0, #92]	; 0x5c
 8022964:	4628      	mov	r0, r5
 8022966:	f7ff fe7b 	bl	8022660 <_ZN8touchgfx10Rasterizer6lineToEii>
 802296a:	4628      	mov	r0, r5
 802296c:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
 8022970:	f7ff fe76 	bl	8022660 <_ZN8touchgfx10Rasterizer6lineToEii>
 8022974:	2300      	movs	r3, #0
 8022976:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 802297a:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
 802297e:	4298      	cmp	r0, r3
 8022980:	bf34      	ite	cc
 8022982:	2000      	movcc	r0, #0
 8022984:	2001      	movcs	r0, #1
 8022986:	bd38      	pop	{r3, r4, r5, pc}

08022988 <_ZN8touchgfx6Canvas6renderEh>:
 8022988:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802298c:	4604      	mov	r4, r0
 802298e:	6840      	ldr	r0, [r0, #4]
 8022990:	460d      	mov	r5, r1
 8022992:	6803      	ldr	r3, [r0, #0]
 8022994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8022996:	4798      	blx	r3
 8022998:	fb10 f105 	smulbb	r1, r0, r5
 802299c:	b289      	uxth	r1, r1
 802299e:	1c4d      	adds	r5, r1, #1
 80229a0:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 80229a4:	122d      	asrs	r5, r5, #8
 80229a6:	f000 8097 	beq.w	8022ad8 <_ZN8touchgfx6Canvas6renderEh+0x150>
 80229aa:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 80229ae:	2b00      	cmp	r3, #0
 80229b0:	f000 8092 	beq.w	8022ad8 <_ZN8touchgfx6Canvas6renderEh+0x150>
 80229b4:	4620      	mov	r0, r4
 80229b6:	f7ff ffc5 	bl	8022944 <_ZN8touchgfx6Canvas5closeEv>
 80229ba:	4607      	mov	r7, r0
 80229bc:	2800      	cmp	r0, #0
 80229be:	d043      	beq.n	8022a48 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 80229c0:	6863      	ldr	r3, [r4, #4]
 80229c2:	4e46      	ldr	r6, [pc, #280]	; (8022adc <_ZN8touchgfx6Canvas6renderEh+0x154>)
 80229c4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80229c6:	6837      	ldr	r7, [r6, #0]
 80229c8:	6803      	ldr	r3, [r0, #0]
 80229ca:	689b      	ldr	r3, [r3, #8]
 80229cc:	4798      	blx	r3
 80229ce:	4601      	mov	r1, r0
 80229d0:	4638      	mov	r0, r7
 80229d2:	f7ef fbcb 	bl	801216c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 80229d6:	4607      	mov	r7, r0
 80229d8:	f7ee ff8c 	bl	80118f4 <_ZN8touchgfx3HAL3lcdEv>
 80229dc:	6803      	ldr	r3, [r0, #0]
 80229de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80229e0:	4798      	blx	r3
 80229e2:	4680      	mov	r8, r0
 80229e4:	f7ee ff86 	bl	80118f4 <_ZN8touchgfx3HAL3lcdEv>
 80229e8:	6803      	ldr	r3, [r0, #0]
 80229ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80229ec:	4798      	blx	r3
 80229ee:	280b      	cmp	r0, #11
 80229f0:	d857      	bhi.n	8022aa2 <_ZN8touchgfx6Canvas6renderEh+0x11a>
 80229f2:	e8df f000 	tbb	[pc, r0]
 80229f6:	584d      	.short	0x584d
 80229f8:	2d560668 	.word	0x2d560668
 80229fc:	6161613d 	.word	0x6161613d
 8022a00:	6161      	.short	0x6161
 8022a02:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8022a06:	2208      	movs	r2, #8
 8022a08:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8022a0c:	fb91 f2f2 	sdiv	r2, r1, r2
 8022a10:	fb08 2303 	mla	r3, r8, r3, r2
 8022a14:	441f      	add	r7, r3
 8022a16:	424b      	negs	r3, r1
 8022a18:	f001 0107 	and.w	r1, r1, #7
 8022a1c:	f003 0307 	and.w	r3, r3, #7
 8022a20:	bf58      	it	pl
 8022a22:	4259      	negpl	r1, r3
 8022a24:	b2c9      	uxtb	r1, r1
 8022a26:	6860      	ldr	r0, [r4, #4]
 8022a28:	b2ed      	uxtb	r5, r5
 8022a2a:	fa0f f388 	sxth.w	r3, r8
 8022a2e:	463a      	mov	r2, r7
 8022a30:	e9cd 1500 	strd	r1, r5, [sp]
 8022a34:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8022a36:	f104 0020 	add.w	r0, r4, #32
 8022a3a:	f7ff fe1d 	bl	8022678 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 8022a3e:	4607      	mov	r7, r0
 8022a40:	6830      	ldr	r0, [r6, #0]
 8022a42:	6803      	ldr	r3, [r0, #0]
 8022a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022a46:	4798      	blx	r3
 8022a48:	4638      	mov	r0, r7
 8022a4a:	b002      	add	sp, #8
 8022a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022a50:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8022a54:	2204      	movs	r2, #4
 8022a56:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8022a5a:	fb91 f2f2 	sdiv	r2, r1, r2
 8022a5e:	fb08 2303 	mla	r3, r8, r3, r2
 8022a62:	441f      	add	r7, r3
 8022a64:	424b      	negs	r3, r1
 8022a66:	f001 0103 	and.w	r1, r1, #3
 8022a6a:	f003 0303 	and.w	r3, r3, #3
 8022a6e:	e7d7      	b.n	8022a20 <_ZN8touchgfx6Canvas6renderEh+0x98>
 8022a70:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8022a74:	2202      	movs	r2, #2
 8022a76:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8022a7a:	2900      	cmp	r1, #0
 8022a7c:	fb91 f2f2 	sdiv	r2, r1, r2
 8022a80:	f001 0101 	and.w	r1, r1, #1
 8022a84:	fb08 2303 	mla	r3, r8, r3, r2
 8022a88:	bfb8      	it	lt
 8022a8a:	4249      	neglt	r1, r1
 8022a8c:	441f      	add	r7, r3
 8022a8e:	e7c9      	b.n	8022a24 <_ZN8touchgfx6Canvas6renderEh+0x9c>
 8022a90:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8022a94:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8022a98:	fb08 f303 	mul.w	r3, r8, r3
 8022a9c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8022aa0:	441f      	add	r7, r3
 8022aa2:	2100      	movs	r1, #0
 8022aa4:	e7bf      	b.n	8022a26 <_ZN8touchgfx6Canvas6renderEh+0x9e>
 8022aa6:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8022aaa:	2103      	movs	r1, #3
 8022aac:	fb08 f203 	mul.w	r2, r8, r3
 8022ab0:	8b23      	ldrh	r3, [r4, #24]
 8022ab2:	fb13 2301 	smlabb	r3, r3, r1, r2
 8022ab6:	e7f3      	b.n	8022aa0 <_ZN8touchgfx6Canvas6renderEh+0x118>
 8022ab8:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8022abc:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8022ac0:	fb08 2303 	mla	r3, r8, r3, r2
 8022ac4:	e7ec      	b.n	8022aa0 <_ZN8touchgfx6Canvas6renderEh+0x118>
 8022ac6:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8022aca:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8022ace:	fb08 f303 	mul.w	r3, r8, r3
 8022ad2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8022ad6:	e7e3      	b.n	8022aa0 <_ZN8touchgfx6Canvas6renderEh+0x118>
 8022ad8:	2701      	movs	r7, #1
 8022ada:	e7b5      	b.n	8022a48 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 8022adc:	2400ead0 	.word	0x2400ead0

08022ae0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8022ae0:	4b07      	ldr	r3, [pc, #28]	; (8022b00 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 8022ae2:	b510      	push	{r4, lr}
 8022ae4:	781b      	ldrb	r3, [r3, #0]
 8022ae6:	2b01      	cmp	r3, #1
 8022ae8:	d108      	bne.n	8022afc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 8022aea:	6843      	ldr	r3, [r0, #4]
 8022aec:	6814      	ldr	r4, [r2, #0]
 8022aee:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8022af2:	680b      	ldr	r3, [r1, #0]
 8022af4:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8022af8:	6013      	str	r3, [r2, #0]
 8022afa:	600c      	str	r4, [r1, #0]
 8022afc:	bd10      	pop	{r4, pc}
 8022afe:	bf00      	nop
 8022b00:	2400eac8 	.word	0x2400eac8

08022b04 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8022b04:	b513      	push	{r0, r1, r4, lr}
 8022b06:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8022b0a:	4604      	mov	r4, r0
 8022b0c:	e9cd 2100 	strd	r2, r1, [sp]
 8022b10:	b9a3      	cbnz	r3, 8022b3c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 8022b12:	466a      	mov	r2, sp
 8022b14:	a901      	add	r1, sp, #4
 8022b16:	4620      	mov	r0, r4
 8022b18:	f7ff ffe2 	bl	8022ae0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8022b1c:	68a3      	ldr	r3, [r4, #8]
 8022b1e:	9901      	ldr	r1, [sp, #4]
 8022b20:	9a00      	ldr	r2, [sp, #0]
 8022b22:	1ac9      	subs	r1, r1, r3
 8022b24:	68e3      	ldr	r3, [r4, #12]
 8022b26:	1ad2      	subs	r2, r2, r3
 8022b28:	9101      	str	r1, [sp, #4]
 8022b2a:	2a00      	cmp	r2, #0
 8022b2c:	9200      	str	r2, [sp, #0]
 8022b2e:	da0b      	bge.n	8022b48 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 8022b30:	2301      	movs	r3, #1
 8022b32:	2900      	cmp	r1, #0
 8022b34:	da0e      	bge.n	8022b54 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 8022b36:	f043 0304 	orr.w	r3, r3, #4
 8022b3a:	e013      	b.n	8022b64 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 8022b3c:	f7ff ff02 	bl	8022944 <_ZN8touchgfx6Canvas5closeEv>
 8022b40:	2800      	cmp	r0, #0
 8022b42:	d1e6      	bne.n	8022b12 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 8022b44:	b002      	add	sp, #8
 8022b46:	bd10      	pop	{r4, pc}
 8022b48:	6963      	ldr	r3, [r4, #20]
 8022b4a:	429a      	cmp	r2, r3
 8022b4c:	bfac      	ite	ge
 8022b4e:	2302      	movge	r3, #2
 8022b50:	2300      	movlt	r3, #0
 8022b52:	e7ee      	b.n	8022b32 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 8022b54:	6920      	ldr	r0, [r4, #16]
 8022b56:	4281      	cmp	r1, r0
 8022b58:	bfac      	ite	ge
 8022b5a:	2008      	movge	r0, #8
 8022b5c:	2000      	movlt	r0, #0
 8022b5e:	4318      	orrs	r0, r3
 8022b60:	b2c3      	uxtb	r3, r0
 8022b62:	b158      	cbz	r0, 8022b7c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 8022b64:	2200      	movs	r2, #0
 8022b66:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 8022b6a:	9901      	ldr	r1, [sp, #4]
 8022b6c:	9a00      	ldr	r2, [sp, #0]
 8022b6e:	66a1      	str	r1, [r4, #104]	; 0x68
 8022b70:	66e2      	str	r2, [r4, #108]	; 0x6c
 8022b72:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8022b76:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
 8022b7a:	e7e3      	b.n	8022b44 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 8022b7c:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 8022b80:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 8022b84:	4298      	cmp	r0, r3
 8022b86:	d803      	bhi.n	8022b90 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8022b88:	f104 0020 	add.w	r0, r4, #32
 8022b8c:	f7f2 fcc6 	bl	801551c <_ZN8touchgfx7Outline6moveToEii>
 8022b90:	2301      	movs	r3, #1
 8022b92:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8022b96:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8022b9a:	2300      	movs	r3, #0
 8022b9c:	e7e5      	b.n	8022b6a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

08022b9e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8022b9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022ba0:	ab02      	add	r3, sp, #8
 8022ba2:	4604      	mov	r4, r0
 8022ba4:	9101      	str	r1, [sp, #4]
 8022ba6:	a901      	add	r1, sp, #4
 8022ba8:	f843 2d08 	str.w	r2, [r3, #-8]!
 8022bac:	461a      	mov	r2, r3
 8022bae:	f7ff ff97 	bl	8022ae0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8022bb2:	68a3      	ldr	r3, [r4, #8]
 8022bb4:	9901      	ldr	r1, [sp, #4]
 8022bb6:	9a00      	ldr	r2, [sp, #0]
 8022bb8:	1ac9      	subs	r1, r1, r3
 8022bba:	68e3      	ldr	r3, [r4, #12]
 8022bbc:	1ad2      	subs	r2, r2, r3
 8022bbe:	9101      	str	r1, [sp, #4]
 8022bc0:	2a00      	cmp	r2, #0
 8022bc2:	9200      	str	r2, [sp, #0]
 8022bc4:	db1c      	blt.n	8022c00 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 8022bc6:	6963      	ldr	r3, [r4, #20]
 8022bc8:	429a      	cmp	r2, r3
 8022bca:	bfac      	ite	ge
 8022bcc:	2002      	movge	r0, #2
 8022bce:	2000      	movlt	r0, #0
 8022bd0:	2900      	cmp	r1, #0
 8022bd2:	db17      	blt.n	8022c04 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 8022bd4:	6923      	ldr	r3, [r4, #16]
 8022bd6:	4299      	cmp	r1, r3
 8022bd8:	bfac      	ite	ge
 8022bda:	2308      	movge	r3, #8
 8022bdc:	2300      	movlt	r3, #0
 8022bde:	4303      	orrs	r3, r0
 8022be0:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 8022be4:	b2dd      	uxtb	r5, r3
 8022be6:	b978      	cbnz	r0, 8022c08 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 8022be8:	f104 0020 	add.w	r0, r4, #32
 8022bec:	f7ff fd38 	bl	8022660 <_ZN8touchgfx10Rasterizer6lineToEii>
 8022bf0:	9b01      	ldr	r3, [sp, #4]
 8022bf2:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 8022bf6:	65e3      	str	r3, [r4, #92]	; 0x5c
 8022bf8:	9b00      	ldr	r3, [sp, #0]
 8022bfa:	6623      	str	r3, [r4, #96]	; 0x60
 8022bfc:	b002      	add	sp, #8
 8022bfe:	bd70      	pop	{r4, r5, r6, pc}
 8022c00:	2001      	movs	r0, #1
 8022c02:	e7e5      	b.n	8022bd0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 8022c04:	2304      	movs	r3, #4
 8022c06:	e7ea      	b.n	8022bde <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 8022c08:	b113      	cbz	r3, 8022c10 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 8022c0a:	ea10 0305 	ands.w	r3, r0, r5
 8022c0e:	d11c      	bne.n	8022c4a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 8022c10:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8022c14:	f104 0620 	add.w	r6, r4, #32
 8022c18:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
 8022c1c:	b98b      	cbnz	r3, 8022c42 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 8022c1e:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 8022c22:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 8022c26:	4298      	cmp	r0, r3
 8022c28:	d802      	bhi.n	8022c30 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 8022c2a:	4630      	mov	r0, r6
 8022c2c:	f7f2 fc76 	bl	801551c <_ZN8touchgfx7Outline6moveToEii>
 8022c30:	2301      	movs	r3, #1
 8022c32:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8022c36:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8022c3a:	4630      	mov	r0, r6
 8022c3c:	e9dd 2100 	ldrd	r2, r1, [sp]
 8022c40:	e7d4      	b.n	8022bec <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 8022c42:	4630      	mov	r0, r6
 8022c44:	f7ff fd0c 	bl	8022660 <_ZN8touchgfx10Rasterizer6lineToEii>
 8022c48:	e7f7      	b.n	8022c3a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 8022c4a:	461d      	mov	r5, r3
 8022c4c:	e7d0      	b.n	8022bf0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

08022c50 <_ZN8touchgfx6CanvasD1Ev>:
 8022c50:	4b04      	ldr	r3, [pc, #16]	; (8022c64 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 8022c52:	b510      	push	{r4, lr}
 8022c54:	4604      	mov	r4, r0
 8022c56:	f840 3b20 	str.w	r3, [r0], #32
 8022c5a:	f7f1 ff67 	bl	8014b2c <_ZN8touchgfx7OutlineD1Ev>
 8022c5e:	4620      	mov	r0, r4
 8022c60:	bd10      	pop	{r4, pc}
 8022c62:	bf00      	nop
 8022c64:	080262c0 	.word	0x080262c0

08022c68 <_ZN8touchgfx6CanvasD0Ev>:
 8022c68:	b510      	push	{r4, lr}
 8022c6a:	4604      	mov	r4, r0
 8022c6c:	f7ff fff0 	bl	8022c50 <_ZN8touchgfx6CanvasD1Ev>
 8022c70:	2170      	movs	r1, #112	; 0x70
 8022c72:	4620      	mov	r0, r4
 8022c74:	f000 f807 	bl	8022c86 <_ZdlPvj>
 8022c78:	4620      	mov	r0, r4
 8022c7a:	bd10      	pop	{r4, pc}

08022c7c <__aeabi_atexit>:
 8022c7c:	460b      	mov	r3, r1
 8022c7e:	4601      	mov	r1, r0
 8022c80:	4618      	mov	r0, r3
 8022c82:	f000 b931 	b.w	8022ee8 <__cxa_atexit>

08022c86 <_ZdlPvj>:
 8022c86:	f000 b812 	b.w	8022cae <_ZdlPv>

08022c8a <__cxa_guard_acquire>:
 8022c8a:	6803      	ldr	r3, [r0, #0]
 8022c8c:	07db      	lsls	r3, r3, #31
 8022c8e:	d406      	bmi.n	8022c9e <__cxa_guard_acquire+0x14>
 8022c90:	7843      	ldrb	r3, [r0, #1]
 8022c92:	b103      	cbz	r3, 8022c96 <__cxa_guard_acquire+0xc>
 8022c94:	deff      	udf	#255	; 0xff
 8022c96:	2301      	movs	r3, #1
 8022c98:	7043      	strb	r3, [r0, #1]
 8022c9a:	4618      	mov	r0, r3
 8022c9c:	4770      	bx	lr
 8022c9e:	2000      	movs	r0, #0
 8022ca0:	4770      	bx	lr

08022ca2 <__cxa_guard_release>:
 8022ca2:	2301      	movs	r3, #1
 8022ca4:	6003      	str	r3, [r0, #0]
 8022ca6:	4770      	bx	lr

08022ca8 <__cxa_pure_virtual>:
 8022ca8:	b508      	push	{r3, lr}
 8022caa:	f000 f80f 	bl	8022ccc <_ZSt9terminatev>

08022cae <_ZdlPv>:
 8022cae:	f000 b96d 	b.w	8022f8c <free>

08022cb2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8022cb2:	b508      	push	{r3, lr}
 8022cb4:	4780      	blx	r0
 8022cb6:	f000 f8eb 	bl	8022e90 <abort>
	...

08022cbc <_ZSt13get_terminatev>:
 8022cbc:	4b02      	ldr	r3, [pc, #8]	; (8022cc8 <_ZSt13get_terminatev+0xc>)
 8022cbe:	6818      	ldr	r0, [r3, #0]
 8022cc0:	f3bf 8f5b 	dmb	ish
 8022cc4:	4770      	bx	lr
 8022cc6:	bf00      	nop
 8022cc8:	240000b0 	.word	0x240000b0

08022ccc <_ZSt9terminatev>:
 8022ccc:	b508      	push	{r3, lr}
 8022cce:	f7ff fff5 	bl	8022cbc <_ZSt13get_terminatev>
 8022cd2:	f7ff ffee 	bl	8022cb2 <_ZN10__cxxabiv111__terminateEPFvvE>

08022cd6 <with_errnof>:
 8022cd6:	b513      	push	{r0, r1, r4, lr}
 8022cd8:	4604      	mov	r4, r0
 8022cda:	ed8d 0a01 	vstr	s0, [sp, #4]
 8022cde:	f000 f911 	bl	8022f04 <__errno>
 8022ce2:	ed9d 0a01 	vldr	s0, [sp, #4]
 8022ce6:	6004      	str	r4, [r0, #0]
 8022ce8:	b002      	add	sp, #8
 8022cea:	bd10      	pop	{r4, pc}

08022cec <__math_invalidf>:
 8022cec:	eef0 7a40 	vmov.f32	s15, s0
 8022cf0:	ee30 7a40 	vsub.f32	s14, s0, s0
 8022cf4:	eef4 7a67 	vcmp.f32	s15, s15
 8022cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022cfc:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8022d00:	d602      	bvs.n	8022d08 <__math_invalidf+0x1c>
 8022d02:	2021      	movs	r0, #33	; 0x21
 8022d04:	f7ff bfe7 	b.w	8022cd6 <with_errnof>
 8022d08:	4770      	bx	lr

08022d0a <sinf_poly>:
 8022d0a:	07cb      	lsls	r3, r1, #31
 8022d0c:	d412      	bmi.n	8022d34 <sinf_poly+0x2a>
 8022d0e:	ee21 5b00 	vmul.f64	d5, d1, d0
 8022d12:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 8022d16:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 8022d1a:	eea6 7b01 	vfma.f64	d7, d6, d1
 8022d1e:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 8022d22:	ee21 1b05 	vmul.f64	d1, d1, d5
 8022d26:	eea6 0b05 	vfma.f64	d0, d6, d5
 8022d2a:	eea7 0b01 	vfma.f64	d0, d7, d1
 8022d2e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8022d32:	4770      	bx	lr
 8022d34:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 8022d38:	ee21 5b01 	vmul.f64	d5, d1, d1
 8022d3c:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 8022d40:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 8022d44:	eea1 7b06 	vfma.f64	d7, d1, d6
 8022d48:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 8022d4c:	eea1 0b06 	vfma.f64	d0, d1, d6
 8022d50:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 8022d54:	ee21 1b05 	vmul.f64	d1, d1, d5
 8022d58:	eea5 0b06 	vfma.f64	d0, d5, d6
 8022d5c:	e7e5      	b.n	8022d2a <sinf_poly+0x20>
	...

08022d60 <sinf>:
 8022d60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022d62:	ee10 4a10 	vmov	r4, s0
 8022d66:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8022d6a:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8022d6e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8022d72:	eef0 7a40 	vmov.f32	s15, s0
 8022d76:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8022d7a:	d218      	bcs.n	8022dae <sinf+0x4e>
 8022d7c:	ee26 1b06 	vmul.f64	d1, d6, d6
 8022d80:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 8022d84:	d20a      	bcs.n	8022d9c <sinf+0x3c>
 8022d86:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 8022d8a:	d103      	bne.n	8022d94 <sinf+0x34>
 8022d8c:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8022d90:	ed8d 1a01 	vstr	s2, [sp, #4]
 8022d94:	eeb0 0a67 	vmov.f32	s0, s15
 8022d98:	b003      	add	sp, #12
 8022d9a:	bd30      	pop	{r4, r5, pc}
 8022d9c:	483a      	ldr	r0, [pc, #232]	; (8022e88 <sinf+0x128>)
 8022d9e:	eeb0 0b46 	vmov.f64	d0, d6
 8022da2:	2100      	movs	r1, #0
 8022da4:	b003      	add	sp, #12
 8022da6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022daa:	f7ff bfae 	b.w	8022d0a <sinf_poly>
 8022dae:	f240 422e 	movw	r2, #1070	; 0x42e
 8022db2:	4293      	cmp	r3, r2
 8022db4:	d824      	bhi.n	8022e00 <sinf+0xa0>
 8022db6:	4b34      	ldr	r3, [pc, #208]	; (8022e88 <sinf+0x128>)
 8022db8:	ed93 7b08 	vldr	d7, [r3, #32]
 8022dbc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8022dc0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8022dc4:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8022dc8:	ee17 1a90 	vmov	r1, s15
 8022dcc:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 8022dd0:	1609      	asrs	r1, r1, #24
 8022dd2:	ee07 1a90 	vmov	s15, r1
 8022dd6:	f001 0203 	and.w	r2, r1, #3
 8022dda:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8022dde:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8022de2:	ed92 0b00 	vldr	d0, [r2]
 8022de6:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8022dea:	f011 0f02 	tst.w	r1, #2
 8022dee:	eea5 6b47 	vfms.f64	d6, d5, d7
 8022df2:	bf08      	it	eq
 8022df4:	4618      	moveq	r0, r3
 8022df6:	ee26 1b06 	vmul.f64	d1, d6, d6
 8022dfa:	ee20 0b06 	vmul.f64	d0, d0, d6
 8022dfe:	e7d1      	b.n	8022da4 <sinf+0x44>
 8022e00:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8022e04:	d237      	bcs.n	8022e76 <sinf+0x116>
 8022e06:	4a21      	ldr	r2, [pc, #132]	; (8022e8c <sinf+0x12c>)
 8022e08:	f3c4 6183 	ubfx	r1, r4, #26, #4
 8022e0c:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 8022e10:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8022e14:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 8022e18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8022e1c:	4083      	lsls	r3, r0
 8022e1e:	6a28      	ldr	r0, [r5, #32]
 8022e20:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8022e24:	fba3 1000 	umull	r1, r0, r3, r0
 8022e28:	6929      	ldr	r1, [r5, #16]
 8022e2a:	435a      	muls	r2, r3
 8022e2c:	fbe3 0201 	umlal	r0, r2, r3, r1
 8022e30:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 8022e34:	0f8d      	lsrs	r5, r1, #30
 8022e36:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 8022e3a:	1a51      	subs	r1, r2, r1
 8022e3c:	f7dd fc2e 	bl	800069c <__aeabi_l2d>
 8022e40:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8022e44:	4b10      	ldr	r3, [pc, #64]	; (8022e88 <sinf+0x128>)
 8022e46:	f004 0203 	and.w	r2, r4, #3
 8022e4a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8022e4e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8022e80 <sinf+0x120>
 8022e52:	ed92 0b00 	vldr	d0, [r2]
 8022e56:	ec41 0b16 	vmov	d6, r0, r1
 8022e5a:	f014 0f02 	tst.w	r4, #2
 8022e5e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8022e62:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8022e66:	4629      	mov	r1, r5
 8022e68:	bf08      	it	eq
 8022e6a:	4618      	moveq	r0, r3
 8022e6c:	ee27 1b07 	vmul.f64	d1, d7, d7
 8022e70:	ee20 0b07 	vmul.f64	d0, d0, d7
 8022e74:	e796      	b.n	8022da4 <sinf+0x44>
 8022e76:	b003      	add	sp, #12
 8022e78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022e7c:	f7ff bf36 	b.w	8022cec <__math_invalidf>
 8022e80:	54442d18 	.word	0x54442d18
 8022e84:	3c1921fb 	.word	0x3c1921fb
 8022e88:	08026330 	.word	0x08026330
 8022e8c:	080262cc 	.word	0x080262cc

08022e90 <abort>:
 8022e90:	b508      	push	{r3, lr}
 8022e92:	2006      	movs	r0, #6
 8022e94:	f000 fcdc 	bl	8023850 <raise>
 8022e98:	2001      	movs	r0, #1
 8022e9a:	f7de fb1d 	bl	80014d8 <_exit>
	...

08022ea0 <__assert_func>:
 8022ea0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022ea2:	4614      	mov	r4, r2
 8022ea4:	461a      	mov	r2, r3
 8022ea6:	4b09      	ldr	r3, [pc, #36]	; (8022ecc <__assert_func+0x2c>)
 8022ea8:	681b      	ldr	r3, [r3, #0]
 8022eaa:	4605      	mov	r5, r0
 8022eac:	68d8      	ldr	r0, [r3, #12]
 8022eae:	b14c      	cbz	r4, 8022ec4 <__assert_func+0x24>
 8022eb0:	4b07      	ldr	r3, [pc, #28]	; (8022ed0 <__assert_func+0x30>)
 8022eb2:	9100      	str	r1, [sp, #0]
 8022eb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022eb8:	4906      	ldr	r1, [pc, #24]	; (8022ed4 <__assert_func+0x34>)
 8022eba:	462b      	mov	r3, r5
 8022ebc:	f000 f828 	bl	8022f10 <fiprintf>
 8022ec0:	f7ff ffe6 	bl	8022e90 <abort>
 8022ec4:	4b04      	ldr	r3, [pc, #16]	; (8022ed8 <__assert_func+0x38>)
 8022ec6:	461c      	mov	r4, r3
 8022ec8:	e7f3      	b.n	8022eb2 <__assert_func+0x12>
 8022eca:	bf00      	nop
 8022ecc:	240000b4 	.word	0x240000b4
 8022ed0:	08026410 	.word	0x08026410
 8022ed4:	0802641d 	.word	0x0802641d
 8022ed8:	0802644b 	.word	0x0802644b

08022edc <atexit>:
 8022edc:	2300      	movs	r3, #0
 8022ede:	4601      	mov	r1, r0
 8022ee0:	461a      	mov	r2, r3
 8022ee2:	4618      	mov	r0, r3
 8022ee4:	f000 bd90 	b.w	8023a08 <__register_exitproc>

08022ee8 <__cxa_atexit>:
 8022ee8:	b510      	push	{r4, lr}
 8022eea:	4c05      	ldr	r4, [pc, #20]	; (8022f00 <__cxa_atexit+0x18>)
 8022eec:	4613      	mov	r3, r2
 8022eee:	b12c      	cbz	r4, 8022efc <__cxa_atexit+0x14>
 8022ef0:	460a      	mov	r2, r1
 8022ef2:	4601      	mov	r1, r0
 8022ef4:	2002      	movs	r0, #2
 8022ef6:	f000 fd87 	bl	8023a08 <__register_exitproc>
 8022efa:	bd10      	pop	{r4, pc}
 8022efc:	4620      	mov	r0, r4
 8022efe:	e7fc      	b.n	8022efa <__cxa_atexit+0x12>
 8022f00:	08023a09 	.word	0x08023a09

08022f04 <__errno>:
 8022f04:	4b01      	ldr	r3, [pc, #4]	; (8022f0c <__errno+0x8>)
 8022f06:	6818      	ldr	r0, [r3, #0]
 8022f08:	4770      	bx	lr
 8022f0a:	bf00      	nop
 8022f0c:	240000b4 	.word	0x240000b4

08022f10 <fiprintf>:
 8022f10:	b40e      	push	{r1, r2, r3}
 8022f12:	b503      	push	{r0, r1, lr}
 8022f14:	4601      	mov	r1, r0
 8022f16:	ab03      	add	r3, sp, #12
 8022f18:	4805      	ldr	r0, [pc, #20]	; (8022f30 <fiprintf+0x20>)
 8022f1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8022f1e:	6800      	ldr	r0, [r0, #0]
 8022f20:	9301      	str	r3, [sp, #4]
 8022f22:	f000 f95b 	bl	80231dc <_vfiprintf_r>
 8022f26:	b002      	add	sp, #8
 8022f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8022f2c:	b003      	add	sp, #12
 8022f2e:	4770      	bx	lr
 8022f30:	240000b4 	.word	0x240000b4

08022f34 <__libc_init_array>:
 8022f34:	b570      	push	{r4, r5, r6, lr}
 8022f36:	4d0d      	ldr	r5, [pc, #52]	; (8022f6c <__libc_init_array+0x38>)
 8022f38:	4c0d      	ldr	r4, [pc, #52]	; (8022f70 <__libc_init_array+0x3c>)
 8022f3a:	1b64      	subs	r4, r4, r5
 8022f3c:	10a4      	asrs	r4, r4, #2
 8022f3e:	2600      	movs	r6, #0
 8022f40:	42a6      	cmp	r6, r4
 8022f42:	d109      	bne.n	8022f58 <__libc_init_array+0x24>
 8022f44:	4d0b      	ldr	r5, [pc, #44]	; (8022f74 <__libc_init_array+0x40>)
 8022f46:	4c0c      	ldr	r4, [pc, #48]	; (8022f78 <__libc_init_array+0x44>)
 8022f48:	f001 f898 	bl	802407c <_init>
 8022f4c:	1b64      	subs	r4, r4, r5
 8022f4e:	10a4      	asrs	r4, r4, #2
 8022f50:	2600      	movs	r6, #0
 8022f52:	42a6      	cmp	r6, r4
 8022f54:	d105      	bne.n	8022f62 <__libc_init_array+0x2e>
 8022f56:	bd70      	pop	{r4, r5, r6, pc}
 8022f58:	f855 3b04 	ldr.w	r3, [r5], #4
 8022f5c:	4798      	blx	r3
 8022f5e:	3601      	adds	r6, #1
 8022f60:	e7ee      	b.n	8022f40 <__libc_init_array+0xc>
 8022f62:	f855 3b04 	ldr.w	r3, [r5], #4
 8022f66:	4798      	blx	r3
 8022f68:	3601      	adds	r6, #1
 8022f6a:	e7f2      	b.n	8022f52 <__libc_init_array+0x1e>
 8022f6c:	08026f08 	.word	0x08026f08
 8022f70:	08026f08 	.word	0x08026f08
 8022f74:	08026f08 	.word	0x08026f08
 8022f78:	08026f20 	.word	0x08026f20

08022f7c <malloc>:
 8022f7c:	4b02      	ldr	r3, [pc, #8]	; (8022f88 <malloc+0xc>)
 8022f7e:	4601      	mov	r1, r0
 8022f80:	6818      	ldr	r0, [r3, #0]
 8022f82:	f000 b88d 	b.w	80230a0 <_malloc_r>
 8022f86:	bf00      	nop
 8022f88:	240000b4 	.word	0x240000b4

08022f8c <free>:
 8022f8c:	4b02      	ldr	r3, [pc, #8]	; (8022f98 <free+0xc>)
 8022f8e:	4601      	mov	r1, r0
 8022f90:	6818      	ldr	r0, [r3, #0]
 8022f92:	f000 b819 	b.w	8022fc8 <_free_r>
 8022f96:	bf00      	nop
 8022f98:	240000b4 	.word	0x240000b4

08022f9c <memcpy>:
 8022f9c:	440a      	add	r2, r1
 8022f9e:	4291      	cmp	r1, r2
 8022fa0:	f100 33ff 	add.w	r3, r0, #4294967295
 8022fa4:	d100      	bne.n	8022fa8 <memcpy+0xc>
 8022fa6:	4770      	bx	lr
 8022fa8:	b510      	push	{r4, lr}
 8022faa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022fae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022fb2:	4291      	cmp	r1, r2
 8022fb4:	d1f9      	bne.n	8022faa <memcpy+0xe>
 8022fb6:	bd10      	pop	{r4, pc}

08022fb8 <memset>:
 8022fb8:	4402      	add	r2, r0
 8022fba:	4603      	mov	r3, r0
 8022fbc:	4293      	cmp	r3, r2
 8022fbe:	d100      	bne.n	8022fc2 <memset+0xa>
 8022fc0:	4770      	bx	lr
 8022fc2:	f803 1b01 	strb.w	r1, [r3], #1
 8022fc6:	e7f9      	b.n	8022fbc <memset+0x4>

08022fc8 <_free_r>:
 8022fc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022fca:	2900      	cmp	r1, #0
 8022fcc:	d044      	beq.n	8023058 <_free_r+0x90>
 8022fce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022fd2:	9001      	str	r0, [sp, #4]
 8022fd4:	2b00      	cmp	r3, #0
 8022fd6:	f1a1 0404 	sub.w	r4, r1, #4
 8022fda:	bfb8      	it	lt
 8022fdc:	18e4      	addlt	r4, r4, r3
 8022fde:	f000 ff95 	bl	8023f0c <__malloc_lock>
 8022fe2:	4a1e      	ldr	r2, [pc, #120]	; (802305c <_free_r+0x94>)
 8022fe4:	9801      	ldr	r0, [sp, #4]
 8022fe6:	6813      	ldr	r3, [r2, #0]
 8022fe8:	b933      	cbnz	r3, 8022ff8 <_free_r+0x30>
 8022fea:	6063      	str	r3, [r4, #4]
 8022fec:	6014      	str	r4, [r2, #0]
 8022fee:	b003      	add	sp, #12
 8022ff0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022ff4:	f000 bf90 	b.w	8023f18 <__malloc_unlock>
 8022ff8:	42a3      	cmp	r3, r4
 8022ffa:	d908      	bls.n	802300e <_free_r+0x46>
 8022ffc:	6825      	ldr	r5, [r4, #0]
 8022ffe:	1961      	adds	r1, r4, r5
 8023000:	428b      	cmp	r3, r1
 8023002:	bf01      	itttt	eq
 8023004:	6819      	ldreq	r1, [r3, #0]
 8023006:	685b      	ldreq	r3, [r3, #4]
 8023008:	1949      	addeq	r1, r1, r5
 802300a:	6021      	streq	r1, [r4, #0]
 802300c:	e7ed      	b.n	8022fea <_free_r+0x22>
 802300e:	461a      	mov	r2, r3
 8023010:	685b      	ldr	r3, [r3, #4]
 8023012:	b10b      	cbz	r3, 8023018 <_free_r+0x50>
 8023014:	42a3      	cmp	r3, r4
 8023016:	d9fa      	bls.n	802300e <_free_r+0x46>
 8023018:	6811      	ldr	r1, [r2, #0]
 802301a:	1855      	adds	r5, r2, r1
 802301c:	42a5      	cmp	r5, r4
 802301e:	d10b      	bne.n	8023038 <_free_r+0x70>
 8023020:	6824      	ldr	r4, [r4, #0]
 8023022:	4421      	add	r1, r4
 8023024:	1854      	adds	r4, r2, r1
 8023026:	42a3      	cmp	r3, r4
 8023028:	6011      	str	r1, [r2, #0]
 802302a:	d1e0      	bne.n	8022fee <_free_r+0x26>
 802302c:	681c      	ldr	r4, [r3, #0]
 802302e:	685b      	ldr	r3, [r3, #4]
 8023030:	6053      	str	r3, [r2, #4]
 8023032:	4421      	add	r1, r4
 8023034:	6011      	str	r1, [r2, #0]
 8023036:	e7da      	b.n	8022fee <_free_r+0x26>
 8023038:	d902      	bls.n	8023040 <_free_r+0x78>
 802303a:	230c      	movs	r3, #12
 802303c:	6003      	str	r3, [r0, #0]
 802303e:	e7d6      	b.n	8022fee <_free_r+0x26>
 8023040:	6825      	ldr	r5, [r4, #0]
 8023042:	1961      	adds	r1, r4, r5
 8023044:	428b      	cmp	r3, r1
 8023046:	bf04      	itt	eq
 8023048:	6819      	ldreq	r1, [r3, #0]
 802304a:	685b      	ldreq	r3, [r3, #4]
 802304c:	6063      	str	r3, [r4, #4]
 802304e:	bf04      	itt	eq
 8023050:	1949      	addeq	r1, r1, r5
 8023052:	6021      	streq	r1, [r4, #0]
 8023054:	6054      	str	r4, [r2, #4]
 8023056:	e7ca      	b.n	8022fee <_free_r+0x26>
 8023058:	b003      	add	sp, #12
 802305a:	bd30      	pop	{r4, r5, pc}
 802305c:	2400ebb4 	.word	0x2400ebb4

08023060 <sbrk_aligned>:
 8023060:	b570      	push	{r4, r5, r6, lr}
 8023062:	4e0e      	ldr	r6, [pc, #56]	; (802309c <sbrk_aligned+0x3c>)
 8023064:	460c      	mov	r4, r1
 8023066:	6831      	ldr	r1, [r6, #0]
 8023068:	4605      	mov	r5, r0
 802306a:	b911      	cbnz	r1, 8023072 <sbrk_aligned+0x12>
 802306c:	f000 fbb8 	bl	80237e0 <_sbrk_r>
 8023070:	6030      	str	r0, [r6, #0]
 8023072:	4621      	mov	r1, r4
 8023074:	4628      	mov	r0, r5
 8023076:	f000 fbb3 	bl	80237e0 <_sbrk_r>
 802307a:	1c43      	adds	r3, r0, #1
 802307c:	d00a      	beq.n	8023094 <sbrk_aligned+0x34>
 802307e:	1cc4      	adds	r4, r0, #3
 8023080:	f024 0403 	bic.w	r4, r4, #3
 8023084:	42a0      	cmp	r0, r4
 8023086:	d007      	beq.n	8023098 <sbrk_aligned+0x38>
 8023088:	1a21      	subs	r1, r4, r0
 802308a:	4628      	mov	r0, r5
 802308c:	f000 fba8 	bl	80237e0 <_sbrk_r>
 8023090:	3001      	adds	r0, #1
 8023092:	d101      	bne.n	8023098 <sbrk_aligned+0x38>
 8023094:	f04f 34ff 	mov.w	r4, #4294967295
 8023098:	4620      	mov	r0, r4
 802309a:	bd70      	pop	{r4, r5, r6, pc}
 802309c:	2400ebb8 	.word	0x2400ebb8

080230a0 <_malloc_r>:
 80230a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80230a4:	1ccd      	adds	r5, r1, #3
 80230a6:	f025 0503 	bic.w	r5, r5, #3
 80230aa:	3508      	adds	r5, #8
 80230ac:	2d0c      	cmp	r5, #12
 80230ae:	bf38      	it	cc
 80230b0:	250c      	movcc	r5, #12
 80230b2:	2d00      	cmp	r5, #0
 80230b4:	4607      	mov	r7, r0
 80230b6:	db01      	blt.n	80230bc <_malloc_r+0x1c>
 80230b8:	42a9      	cmp	r1, r5
 80230ba:	d905      	bls.n	80230c8 <_malloc_r+0x28>
 80230bc:	230c      	movs	r3, #12
 80230be:	603b      	str	r3, [r7, #0]
 80230c0:	2600      	movs	r6, #0
 80230c2:	4630      	mov	r0, r6
 80230c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80230c8:	4e2e      	ldr	r6, [pc, #184]	; (8023184 <_malloc_r+0xe4>)
 80230ca:	f000 ff1f 	bl	8023f0c <__malloc_lock>
 80230ce:	6833      	ldr	r3, [r6, #0]
 80230d0:	461c      	mov	r4, r3
 80230d2:	bb34      	cbnz	r4, 8023122 <_malloc_r+0x82>
 80230d4:	4629      	mov	r1, r5
 80230d6:	4638      	mov	r0, r7
 80230d8:	f7ff ffc2 	bl	8023060 <sbrk_aligned>
 80230dc:	1c43      	adds	r3, r0, #1
 80230de:	4604      	mov	r4, r0
 80230e0:	d14d      	bne.n	802317e <_malloc_r+0xde>
 80230e2:	6834      	ldr	r4, [r6, #0]
 80230e4:	4626      	mov	r6, r4
 80230e6:	2e00      	cmp	r6, #0
 80230e8:	d140      	bne.n	802316c <_malloc_r+0xcc>
 80230ea:	6823      	ldr	r3, [r4, #0]
 80230ec:	4631      	mov	r1, r6
 80230ee:	4638      	mov	r0, r7
 80230f0:	eb04 0803 	add.w	r8, r4, r3
 80230f4:	f000 fb74 	bl	80237e0 <_sbrk_r>
 80230f8:	4580      	cmp	r8, r0
 80230fa:	d13a      	bne.n	8023172 <_malloc_r+0xd2>
 80230fc:	6821      	ldr	r1, [r4, #0]
 80230fe:	3503      	adds	r5, #3
 8023100:	1a6d      	subs	r5, r5, r1
 8023102:	f025 0503 	bic.w	r5, r5, #3
 8023106:	3508      	adds	r5, #8
 8023108:	2d0c      	cmp	r5, #12
 802310a:	bf38      	it	cc
 802310c:	250c      	movcc	r5, #12
 802310e:	4629      	mov	r1, r5
 8023110:	4638      	mov	r0, r7
 8023112:	f7ff ffa5 	bl	8023060 <sbrk_aligned>
 8023116:	3001      	adds	r0, #1
 8023118:	d02b      	beq.n	8023172 <_malloc_r+0xd2>
 802311a:	6823      	ldr	r3, [r4, #0]
 802311c:	442b      	add	r3, r5
 802311e:	6023      	str	r3, [r4, #0]
 8023120:	e00e      	b.n	8023140 <_malloc_r+0xa0>
 8023122:	6822      	ldr	r2, [r4, #0]
 8023124:	1b52      	subs	r2, r2, r5
 8023126:	d41e      	bmi.n	8023166 <_malloc_r+0xc6>
 8023128:	2a0b      	cmp	r2, #11
 802312a:	d916      	bls.n	802315a <_malloc_r+0xba>
 802312c:	1961      	adds	r1, r4, r5
 802312e:	42a3      	cmp	r3, r4
 8023130:	6025      	str	r5, [r4, #0]
 8023132:	bf18      	it	ne
 8023134:	6059      	strne	r1, [r3, #4]
 8023136:	6863      	ldr	r3, [r4, #4]
 8023138:	bf08      	it	eq
 802313a:	6031      	streq	r1, [r6, #0]
 802313c:	5162      	str	r2, [r4, r5]
 802313e:	604b      	str	r3, [r1, #4]
 8023140:	4638      	mov	r0, r7
 8023142:	f104 060b 	add.w	r6, r4, #11
 8023146:	f000 fee7 	bl	8023f18 <__malloc_unlock>
 802314a:	f026 0607 	bic.w	r6, r6, #7
 802314e:	1d23      	adds	r3, r4, #4
 8023150:	1af2      	subs	r2, r6, r3
 8023152:	d0b6      	beq.n	80230c2 <_malloc_r+0x22>
 8023154:	1b9b      	subs	r3, r3, r6
 8023156:	50a3      	str	r3, [r4, r2]
 8023158:	e7b3      	b.n	80230c2 <_malloc_r+0x22>
 802315a:	6862      	ldr	r2, [r4, #4]
 802315c:	42a3      	cmp	r3, r4
 802315e:	bf0c      	ite	eq
 8023160:	6032      	streq	r2, [r6, #0]
 8023162:	605a      	strne	r2, [r3, #4]
 8023164:	e7ec      	b.n	8023140 <_malloc_r+0xa0>
 8023166:	4623      	mov	r3, r4
 8023168:	6864      	ldr	r4, [r4, #4]
 802316a:	e7b2      	b.n	80230d2 <_malloc_r+0x32>
 802316c:	4634      	mov	r4, r6
 802316e:	6876      	ldr	r6, [r6, #4]
 8023170:	e7b9      	b.n	80230e6 <_malloc_r+0x46>
 8023172:	230c      	movs	r3, #12
 8023174:	603b      	str	r3, [r7, #0]
 8023176:	4638      	mov	r0, r7
 8023178:	f000 fece 	bl	8023f18 <__malloc_unlock>
 802317c:	e7a1      	b.n	80230c2 <_malloc_r+0x22>
 802317e:	6025      	str	r5, [r4, #0]
 8023180:	e7de      	b.n	8023140 <_malloc_r+0xa0>
 8023182:	bf00      	nop
 8023184:	2400ebb4 	.word	0x2400ebb4

08023188 <__sfputc_r>:
 8023188:	6893      	ldr	r3, [r2, #8]
 802318a:	3b01      	subs	r3, #1
 802318c:	2b00      	cmp	r3, #0
 802318e:	b410      	push	{r4}
 8023190:	6093      	str	r3, [r2, #8]
 8023192:	da08      	bge.n	80231a6 <__sfputc_r+0x1e>
 8023194:	6994      	ldr	r4, [r2, #24]
 8023196:	42a3      	cmp	r3, r4
 8023198:	db01      	blt.n	802319e <__sfputc_r+0x16>
 802319a:	290a      	cmp	r1, #10
 802319c:	d103      	bne.n	80231a6 <__sfputc_r+0x1e>
 802319e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80231a2:	f000 bb71 	b.w	8023888 <__swbuf_r>
 80231a6:	6813      	ldr	r3, [r2, #0]
 80231a8:	1c58      	adds	r0, r3, #1
 80231aa:	6010      	str	r0, [r2, #0]
 80231ac:	7019      	strb	r1, [r3, #0]
 80231ae:	4608      	mov	r0, r1
 80231b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80231b4:	4770      	bx	lr

080231b6 <__sfputs_r>:
 80231b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80231b8:	4606      	mov	r6, r0
 80231ba:	460f      	mov	r7, r1
 80231bc:	4614      	mov	r4, r2
 80231be:	18d5      	adds	r5, r2, r3
 80231c0:	42ac      	cmp	r4, r5
 80231c2:	d101      	bne.n	80231c8 <__sfputs_r+0x12>
 80231c4:	2000      	movs	r0, #0
 80231c6:	e007      	b.n	80231d8 <__sfputs_r+0x22>
 80231c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80231cc:	463a      	mov	r2, r7
 80231ce:	4630      	mov	r0, r6
 80231d0:	f7ff ffda 	bl	8023188 <__sfputc_r>
 80231d4:	1c43      	adds	r3, r0, #1
 80231d6:	d1f3      	bne.n	80231c0 <__sfputs_r+0xa>
 80231d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080231dc <_vfiprintf_r>:
 80231dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80231e0:	460d      	mov	r5, r1
 80231e2:	b09d      	sub	sp, #116	; 0x74
 80231e4:	4614      	mov	r4, r2
 80231e6:	4698      	mov	r8, r3
 80231e8:	4606      	mov	r6, r0
 80231ea:	b118      	cbz	r0, 80231f4 <_vfiprintf_r+0x18>
 80231ec:	6983      	ldr	r3, [r0, #24]
 80231ee:	b90b      	cbnz	r3, 80231f4 <_vfiprintf_r+0x18>
 80231f0:	f000 fd86 	bl	8023d00 <__sinit>
 80231f4:	4b89      	ldr	r3, [pc, #548]	; (802341c <_vfiprintf_r+0x240>)
 80231f6:	429d      	cmp	r5, r3
 80231f8:	d11b      	bne.n	8023232 <_vfiprintf_r+0x56>
 80231fa:	6875      	ldr	r5, [r6, #4]
 80231fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80231fe:	07d9      	lsls	r1, r3, #31
 8023200:	d405      	bmi.n	802320e <_vfiprintf_r+0x32>
 8023202:	89ab      	ldrh	r3, [r5, #12]
 8023204:	059a      	lsls	r2, r3, #22
 8023206:	d402      	bmi.n	802320e <_vfiprintf_r+0x32>
 8023208:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802320a:	f000 fe17 	bl	8023e3c <__retarget_lock_acquire_recursive>
 802320e:	89ab      	ldrh	r3, [r5, #12]
 8023210:	071b      	lsls	r3, r3, #28
 8023212:	d501      	bpl.n	8023218 <_vfiprintf_r+0x3c>
 8023214:	692b      	ldr	r3, [r5, #16]
 8023216:	b9eb      	cbnz	r3, 8023254 <_vfiprintf_r+0x78>
 8023218:	4629      	mov	r1, r5
 802321a:	4630      	mov	r0, r6
 802321c:	f000 fb86 	bl	802392c <__swsetup_r>
 8023220:	b1c0      	cbz	r0, 8023254 <_vfiprintf_r+0x78>
 8023222:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023224:	07dc      	lsls	r4, r3, #31
 8023226:	d50e      	bpl.n	8023246 <_vfiprintf_r+0x6a>
 8023228:	f04f 30ff 	mov.w	r0, #4294967295
 802322c:	b01d      	add	sp, #116	; 0x74
 802322e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023232:	4b7b      	ldr	r3, [pc, #492]	; (8023420 <_vfiprintf_r+0x244>)
 8023234:	429d      	cmp	r5, r3
 8023236:	d101      	bne.n	802323c <_vfiprintf_r+0x60>
 8023238:	68b5      	ldr	r5, [r6, #8]
 802323a:	e7df      	b.n	80231fc <_vfiprintf_r+0x20>
 802323c:	4b79      	ldr	r3, [pc, #484]	; (8023424 <_vfiprintf_r+0x248>)
 802323e:	429d      	cmp	r5, r3
 8023240:	bf08      	it	eq
 8023242:	68f5      	ldreq	r5, [r6, #12]
 8023244:	e7da      	b.n	80231fc <_vfiprintf_r+0x20>
 8023246:	89ab      	ldrh	r3, [r5, #12]
 8023248:	0598      	lsls	r0, r3, #22
 802324a:	d4ed      	bmi.n	8023228 <_vfiprintf_r+0x4c>
 802324c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802324e:	f000 fdf7 	bl	8023e40 <__retarget_lock_release_recursive>
 8023252:	e7e9      	b.n	8023228 <_vfiprintf_r+0x4c>
 8023254:	2300      	movs	r3, #0
 8023256:	9309      	str	r3, [sp, #36]	; 0x24
 8023258:	2320      	movs	r3, #32
 802325a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802325e:	f8cd 800c 	str.w	r8, [sp, #12]
 8023262:	2330      	movs	r3, #48	; 0x30
 8023264:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8023428 <_vfiprintf_r+0x24c>
 8023268:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802326c:	f04f 0901 	mov.w	r9, #1
 8023270:	4623      	mov	r3, r4
 8023272:	469a      	mov	sl, r3
 8023274:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023278:	b10a      	cbz	r2, 802327e <_vfiprintf_r+0xa2>
 802327a:	2a25      	cmp	r2, #37	; 0x25
 802327c:	d1f9      	bne.n	8023272 <_vfiprintf_r+0x96>
 802327e:	ebba 0b04 	subs.w	fp, sl, r4
 8023282:	d00b      	beq.n	802329c <_vfiprintf_r+0xc0>
 8023284:	465b      	mov	r3, fp
 8023286:	4622      	mov	r2, r4
 8023288:	4629      	mov	r1, r5
 802328a:	4630      	mov	r0, r6
 802328c:	f7ff ff93 	bl	80231b6 <__sfputs_r>
 8023290:	3001      	adds	r0, #1
 8023292:	f000 80aa 	beq.w	80233ea <_vfiprintf_r+0x20e>
 8023296:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023298:	445a      	add	r2, fp
 802329a:	9209      	str	r2, [sp, #36]	; 0x24
 802329c:	f89a 3000 	ldrb.w	r3, [sl]
 80232a0:	2b00      	cmp	r3, #0
 80232a2:	f000 80a2 	beq.w	80233ea <_vfiprintf_r+0x20e>
 80232a6:	2300      	movs	r3, #0
 80232a8:	f04f 32ff 	mov.w	r2, #4294967295
 80232ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80232b0:	f10a 0a01 	add.w	sl, sl, #1
 80232b4:	9304      	str	r3, [sp, #16]
 80232b6:	9307      	str	r3, [sp, #28]
 80232b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80232bc:	931a      	str	r3, [sp, #104]	; 0x68
 80232be:	4654      	mov	r4, sl
 80232c0:	2205      	movs	r2, #5
 80232c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80232c6:	4858      	ldr	r0, [pc, #352]	; (8023428 <_vfiprintf_r+0x24c>)
 80232c8:	f7dd f80a 	bl	80002e0 <memchr>
 80232cc:	9a04      	ldr	r2, [sp, #16]
 80232ce:	b9d8      	cbnz	r0, 8023308 <_vfiprintf_r+0x12c>
 80232d0:	06d1      	lsls	r1, r2, #27
 80232d2:	bf44      	itt	mi
 80232d4:	2320      	movmi	r3, #32
 80232d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80232da:	0713      	lsls	r3, r2, #28
 80232dc:	bf44      	itt	mi
 80232de:	232b      	movmi	r3, #43	; 0x2b
 80232e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80232e4:	f89a 3000 	ldrb.w	r3, [sl]
 80232e8:	2b2a      	cmp	r3, #42	; 0x2a
 80232ea:	d015      	beq.n	8023318 <_vfiprintf_r+0x13c>
 80232ec:	9a07      	ldr	r2, [sp, #28]
 80232ee:	4654      	mov	r4, sl
 80232f0:	2000      	movs	r0, #0
 80232f2:	f04f 0c0a 	mov.w	ip, #10
 80232f6:	4621      	mov	r1, r4
 80232f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80232fc:	3b30      	subs	r3, #48	; 0x30
 80232fe:	2b09      	cmp	r3, #9
 8023300:	d94e      	bls.n	80233a0 <_vfiprintf_r+0x1c4>
 8023302:	b1b0      	cbz	r0, 8023332 <_vfiprintf_r+0x156>
 8023304:	9207      	str	r2, [sp, #28]
 8023306:	e014      	b.n	8023332 <_vfiprintf_r+0x156>
 8023308:	eba0 0308 	sub.w	r3, r0, r8
 802330c:	fa09 f303 	lsl.w	r3, r9, r3
 8023310:	4313      	orrs	r3, r2
 8023312:	9304      	str	r3, [sp, #16]
 8023314:	46a2      	mov	sl, r4
 8023316:	e7d2      	b.n	80232be <_vfiprintf_r+0xe2>
 8023318:	9b03      	ldr	r3, [sp, #12]
 802331a:	1d19      	adds	r1, r3, #4
 802331c:	681b      	ldr	r3, [r3, #0]
 802331e:	9103      	str	r1, [sp, #12]
 8023320:	2b00      	cmp	r3, #0
 8023322:	bfbb      	ittet	lt
 8023324:	425b      	neglt	r3, r3
 8023326:	f042 0202 	orrlt.w	r2, r2, #2
 802332a:	9307      	strge	r3, [sp, #28]
 802332c:	9307      	strlt	r3, [sp, #28]
 802332e:	bfb8      	it	lt
 8023330:	9204      	strlt	r2, [sp, #16]
 8023332:	7823      	ldrb	r3, [r4, #0]
 8023334:	2b2e      	cmp	r3, #46	; 0x2e
 8023336:	d10c      	bne.n	8023352 <_vfiprintf_r+0x176>
 8023338:	7863      	ldrb	r3, [r4, #1]
 802333a:	2b2a      	cmp	r3, #42	; 0x2a
 802333c:	d135      	bne.n	80233aa <_vfiprintf_r+0x1ce>
 802333e:	9b03      	ldr	r3, [sp, #12]
 8023340:	1d1a      	adds	r2, r3, #4
 8023342:	681b      	ldr	r3, [r3, #0]
 8023344:	9203      	str	r2, [sp, #12]
 8023346:	2b00      	cmp	r3, #0
 8023348:	bfb8      	it	lt
 802334a:	f04f 33ff 	movlt.w	r3, #4294967295
 802334e:	3402      	adds	r4, #2
 8023350:	9305      	str	r3, [sp, #20]
 8023352:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8023438 <_vfiprintf_r+0x25c>
 8023356:	7821      	ldrb	r1, [r4, #0]
 8023358:	2203      	movs	r2, #3
 802335a:	4650      	mov	r0, sl
 802335c:	f7dc ffc0 	bl	80002e0 <memchr>
 8023360:	b140      	cbz	r0, 8023374 <_vfiprintf_r+0x198>
 8023362:	2340      	movs	r3, #64	; 0x40
 8023364:	eba0 000a 	sub.w	r0, r0, sl
 8023368:	fa03 f000 	lsl.w	r0, r3, r0
 802336c:	9b04      	ldr	r3, [sp, #16]
 802336e:	4303      	orrs	r3, r0
 8023370:	3401      	adds	r4, #1
 8023372:	9304      	str	r3, [sp, #16]
 8023374:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023378:	482c      	ldr	r0, [pc, #176]	; (802342c <_vfiprintf_r+0x250>)
 802337a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802337e:	2206      	movs	r2, #6
 8023380:	f7dc ffae 	bl	80002e0 <memchr>
 8023384:	2800      	cmp	r0, #0
 8023386:	d03f      	beq.n	8023408 <_vfiprintf_r+0x22c>
 8023388:	4b29      	ldr	r3, [pc, #164]	; (8023430 <_vfiprintf_r+0x254>)
 802338a:	bb1b      	cbnz	r3, 80233d4 <_vfiprintf_r+0x1f8>
 802338c:	9b03      	ldr	r3, [sp, #12]
 802338e:	3307      	adds	r3, #7
 8023390:	f023 0307 	bic.w	r3, r3, #7
 8023394:	3308      	adds	r3, #8
 8023396:	9303      	str	r3, [sp, #12]
 8023398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802339a:	443b      	add	r3, r7
 802339c:	9309      	str	r3, [sp, #36]	; 0x24
 802339e:	e767      	b.n	8023270 <_vfiprintf_r+0x94>
 80233a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80233a4:	460c      	mov	r4, r1
 80233a6:	2001      	movs	r0, #1
 80233a8:	e7a5      	b.n	80232f6 <_vfiprintf_r+0x11a>
 80233aa:	2300      	movs	r3, #0
 80233ac:	3401      	adds	r4, #1
 80233ae:	9305      	str	r3, [sp, #20]
 80233b0:	4619      	mov	r1, r3
 80233b2:	f04f 0c0a 	mov.w	ip, #10
 80233b6:	4620      	mov	r0, r4
 80233b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80233bc:	3a30      	subs	r2, #48	; 0x30
 80233be:	2a09      	cmp	r2, #9
 80233c0:	d903      	bls.n	80233ca <_vfiprintf_r+0x1ee>
 80233c2:	2b00      	cmp	r3, #0
 80233c4:	d0c5      	beq.n	8023352 <_vfiprintf_r+0x176>
 80233c6:	9105      	str	r1, [sp, #20]
 80233c8:	e7c3      	b.n	8023352 <_vfiprintf_r+0x176>
 80233ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80233ce:	4604      	mov	r4, r0
 80233d0:	2301      	movs	r3, #1
 80233d2:	e7f0      	b.n	80233b6 <_vfiprintf_r+0x1da>
 80233d4:	ab03      	add	r3, sp, #12
 80233d6:	9300      	str	r3, [sp, #0]
 80233d8:	462a      	mov	r2, r5
 80233da:	4b16      	ldr	r3, [pc, #88]	; (8023434 <_vfiprintf_r+0x258>)
 80233dc:	a904      	add	r1, sp, #16
 80233de:	4630      	mov	r0, r6
 80233e0:	f3af 8000 	nop.w
 80233e4:	4607      	mov	r7, r0
 80233e6:	1c78      	adds	r0, r7, #1
 80233e8:	d1d6      	bne.n	8023398 <_vfiprintf_r+0x1bc>
 80233ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80233ec:	07d9      	lsls	r1, r3, #31
 80233ee:	d405      	bmi.n	80233fc <_vfiprintf_r+0x220>
 80233f0:	89ab      	ldrh	r3, [r5, #12]
 80233f2:	059a      	lsls	r2, r3, #22
 80233f4:	d402      	bmi.n	80233fc <_vfiprintf_r+0x220>
 80233f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80233f8:	f000 fd22 	bl	8023e40 <__retarget_lock_release_recursive>
 80233fc:	89ab      	ldrh	r3, [r5, #12]
 80233fe:	065b      	lsls	r3, r3, #25
 8023400:	f53f af12 	bmi.w	8023228 <_vfiprintf_r+0x4c>
 8023404:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023406:	e711      	b.n	802322c <_vfiprintf_r+0x50>
 8023408:	ab03      	add	r3, sp, #12
 802340a:	9300      	str	r3, [sp, #0]
 802340c:	462a      	mov	r2, r5
 802340e:	4b09      	ldr	r3, [pc, #36]	; (8023434 <_vfiprintf_r+0x258>)
 8023410:	a904      	add	r1, sp, #16
 8023412:	4630      	mov	r0, r6
 8023414:	f000 f880 	bl	8023518 <_printf_i>
 8023418:	e7e4      	b.n	80233e4 <_vfiprintf_r+0x208>
 802341a:	bf00      	nop
 802341c:	0802651c 	.word	0x0802651c
 8023420:	0802653c 	.word	0x0802653c
 8023424:	080264fc 	.word	0x080264fc
 8023428:	08026450 	.word	0x08026450
 802342c:	0802645a 	.word	0x0802645a
 8023430:	00000000 	.word	0x00000000
 8023434:	080231b7 	.word	0x080231b7
 8023438:	08026456 	.word	0x08026456

0802343c <_printf_common>:
 802343c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023440:	4616      	mov	r6, r2
 8023442:	4699      	mov	r9, r3
 8023444:	688a      	ldr	r2, [r1, #8]
 8023446:	690b      	ldr	r3, [r1, #16]
 8023448:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802344c:	4293      	cmp	r3, r2
 802344e:	bfb8      	it	lt
 8023450:	4613      	movlt	r3, r2
 8023452:	6033      	str	r3, [r6, #0]
 8023454:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8023458:	4607      	mov	r7, r0
 802345a:	460c      	mov	r4, r1
 802345c:	b10a      	cbz	r2, 8023462 <_printf_common+0x26>
 802345e:	3301      	adds	r3, #1
 8023460:	6033      	str	r3, [r6, #0]
 8023462:	6823      	ldr	r3, [r4, #0]
 8023464:	0699      	lsls	r1, r3, #26
 8023466:	bf42      	ittt	mi
 8023468:	6833      	ldrmi	r3, [r6, #0]
 802346a:	3302      	addmi	r3, #2
 802346c:	6033      	strmi	r3, [r6, #0]
 802346e:	6825      	ldr	r5, [r4, #0]
 8023470:	f015 0506 	ands.w	r5, r5, #6
 8023474:	d106      	bne.n	8023484 <_printf_common+0x48>
 8023476:	f104 0a19 	add.w	sl, r4, #25
 802347a:	68e3      	ldr	r3, [r4, #12]
 802347c:	6832      	ldr	r2, [r6, #0]
 802347e:	1a9b      	subs	r3, r3, r2
 8023480:	42ab      	cmp	r3, r5
 8023482:	dc26      	bgt.n	80234d2 <_printf_common+0x96>
 8023484:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8023488:	1e13      	subs	r3, r2, #0
 802348a:	6822      	ldr	r2, [r4, #0]
 802348c:	bf18      	it	ne
 802348e:	2301      	movne	r3, #1
 8023490:	0692      	lsls	r2, r2, #26
 8023492:	d42b      	bmi.n	80234ec <_printf_common+0xb0>
 8023494:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8023498:	4649      	mov	r1, r9
 802349a:	4638      	mov	r0, r7
 802349c:	47c0      	blx	r8
 802349e:	3001      	adds	r0, #1
 80234a0:	d01e      	beq.n	80234e0 <_printf_common+0xa4>
 80234a2:	6823      	ldr	r3, [r4, #0]
 80234a4:	68e5      	ldr	r5, [r4, #12]
 80234a6:	6832      	ldr	r2, [r6, #0]
 80234a8:	f003 0306 	and.w	r3, r3, #6
 80234ac:	2b04      	cmp	r3, #4
 80234ae:	bf08      	it	eq
 80234b0:	1aad      	subeq	r5, r5, r2
 80234b2:	68a3      	ldr	r3, [r4, #8]
 80234b4:	6922      	ldr	r2, [r4, #16]
 80234b6:	bf0c      	ite	eq
 80234b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80234bc:	2500      	movne	r5, #0
 80234be:	4293      	cmp	r3, r2
 80234c0:	bfc4      	itt	gt
 80234c2:	1a9b      	subgt	r3, r3, r2
 80234c4:	18ed      	addgt	r5, r5, r3
 80234c6:	2600      	movs	r6, #0
 80234c8:	341a      	adds	r4, #26
 80234ca:	42b5      	cmp	r5, r6
 80234cc:	d11a      	bne.n	8023504 <_printf_common+0xc8>
 80234ce:	2000      	movs	r0, #0
 80234d0:	e008      	b.n	80234e4 <_printf_common+0xa8>
 80234d2:	2301      	movs	r3, #1
 80234d4:	4652      	mov	r2, sl
 80234d6:	4649      	mov	r1, r9
 80234d8:	4638      	mov	r0, r7
 80234da:	47c0      	blx	r8
 80234dc:	3001      	adds	r0, #1
 80234de:	d103      	bne.n	80234e8 <_printf_common+0xac>
 80234e0:	f04f 30ff 	mov.w	r0, #4294967295
 80234e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80234e8:	3501      	adds	r5, #1
 80234ea:	e7c6      	b.n	802347a <_printf_common+0x3e>
 80234ec:	18e1      	adds	r1, r4, r3
 80234ee:	1c5a      	adds	r2, r3, #1
 80234f0:	2030      	movs	r0, #48	; 0x30
 80234f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80234f6:	4422      	add	r2, r4
 80234f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80234fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8023500:	3302      	adds	r3, #2
 8023502:	e7c7      	b.n	8023494 <_printf_common+0x58>
 8023504:	2301      	movs	r3, #1
 8023506:	4622      	mov	r2, r4
 8023508:	4649      	mov	r1, r9
 802350a:	4638      	mov	r0, r7
 802350c:	47c0      	blx	r8
 802350e:	3001      	adds	r0, #1
 8023510:	d0e6      	beq.n	80234e0 <_printf_common+0xa4>
 8023512:	3601      	adds	r6, #1
 8023514:	e7d9      	b.n	80234ca <_printf_common+0x8e>
	...

08023518 <_printf_i>:
 8023518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802351c:	7e0f      	ldrb	r7, [r1, #24]
 802351e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023520:	2f78      	cmp	r7, #120	; 0x78
 8023522:	4691      	mov	r9, r2
 8023524:	4680      	mov	r8, r0
 8023526:	460c      	mov	r4, r1
 8023528:	469a      	mov	sl, r3
 802352a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802352e:	d807      	bhi.n	8023540 <_printf_i+0x28>
 8023530:	2f62      	cmp	r7, #98	; 0x62
 8023532:	d80a      	bhi.n	802354a <_printf_i+0x32>
 8023534:	2f00      	cmp	r7, #0
 8023536:	f000 80d8 	beq.w	80236ea <_printf_i+0x1d2>
 802353a:	2f58      	cmp	r7, #88	; 0x58
 802353c:	f000 80a3 	beq.w	8023686 <_printf_i+0x16e>
 8023540:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023544:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8023548:	e03a      	b.n	80235c0 <_printf_i+0xa8>
 802354a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802354e:	2b15      	cmp	r3, #21
 8023550:	d8f6      	bhi.n	8023540 <_printf_i+0x28>
 8023552:	a101      	add	r1, pc, #4	; (adr r1, 8023558 <_printf_i+0x40>)
 8023554:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8023558:	080235b1 	.word	0x080235b1
 802355c:	080235c5 	.word	0x080235c5
 8023560:	08023541 	.word	0x08023541
 8023564:	08023541 	.word	0x08023541
 8023568:	08023541 	.word	0x08023541
 802356c:	08023541 	.word	0x08023541
 8023570:	080235c5 	.word	0x080235c5
 8023574:	08023541 	.word	0x08023541
 8023578:	08023541 	.word	0x08023541
 802357c:	08023541 	.word	0x08023541
 8023580:	08023541 	.word	0x08023541
 8023584:	080236d1 	.word	0x080236d1
 8023588:	080235f5 	.word	0x080235f5
 802358c:	080236b3 	.word	0x080236b3
 8023590:	08023541 	.word	0x08023541
 8023594:	08023541 	.word	0x08023541
 8023598:	080236f3 	.word	0x080236f3
 802359c:	08023541 	.word	0x08023541
 80235a0:	080235f5 	.word	0x080235f5
 80235a4:	08023541 	.word	0x08023541
 80235a8:	08023541 	.word	0x08023541
 80235ac:	080236bb 	.word	0x080236bb
 80235b0:	682b      	ldr	r3, [r5, #0]
 80235b2:	1d1a      	adds	r2, r3, #4
 80235b4:	681b      	ldr	r3, [r3, #0]
 80235b6:	602a      	str	r2, [r5, #0]
 80235b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80235bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80235c0:	2301      	movs	r3, #1
 80235c2:	e0a3      	b.n	802370c <_printf_i+0x1f4>
 80235c4:	6820      	ldr	r0, [r4, #0]
 80235c6:	6829      	ldr	r1, [r5, #0]
 80235c8:	0606      	lsls	r6, r0, #24
 80235ca:	f101 0304 	add.w	r3, r1, #4
 80235ce:	d50a      	bpl.n	80235e6 <_printf_i+0xce>
 80235d0:	680e      	ldr	r6, [r1, #0]
 80235d2:	602b      	str	r3, [r5, #0]
 80235d4:	2e00      	cmp	r6, #0
 80235d6:	da03      	bge.n	80235e0 <_printf_i+0xc8>
 80235d8:	232d      	movs	r3, #45	; 0x2d
 80235da:	4276      	negs	r6, r6
 80235dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80235e0:	485e      	ldr	r0, [pc, #376]	; (802375c <_printf_i+0x244>)
 80235e2:	230a      	movs	r3, #10
 80235e4:	e019      	b.n	802361a <_printf_i+0x102>
 80235e6:	680e      	ldr	r6, [r1, #0]
 80235e8:	602b      	str	r3, [r5, #0]
 80235ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80235ee:	bf18      	it	ne
 80235f0:	b236      	sxthne	r6, r6
 80235f2:	e7ef      	b.n	80235d4 <_printf_i+0xbc>
 80235f4:	682b      	ldr	r3, [r5, #0]
 80235f6:	6820      	ldr	r0, [r4, #0]
 80235f8:	1d19      	adds	r1, r3, #4
 80235fa:	6029      	str	r1, [r5, #0]
 80235fc:	0601      	lsls	r1, r0, #24
 80235fe:	d501      	bpl.n	8023604 <_printf_i+0xec>
 8023600:	681e      	ldr	r6, [r3, #0]
 8023602:	e002      	b.n	802360a <_printf_i+0xf2>
 8023604:	0646      	lsls	r6, r0, #25
 8023606:	d5fb      	bpl.n	8023600 <_printf_i+0xe8>
 8023608:	881e      	ldrh	r6, [r3, #0]
 802360a:	4854      	ldr	r0, [pc, #336]	; (802375c <_printf_i+0x244>)
 802360c:	2f6f      	cmp	r7, #111	; 0x6f
 802360e:	bf0c      	ite	eq
 8023610:	2308      	moveq	r3, #8
 8023612:	230a      	movne	r3, #10
 8023614:	2100      	movs	r1, #0
 8023616:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802361a:	6865      	ldr	r5, [r4, #4]
 802361c:	60a5      	str	r5, [r4, #8]
 802361e:	2d00      	cmp	r5, #0
 8023620:	bfa2      	ittt	ge
 8023622:	6821      	ldrge	r1, [r4, #0]
 8023624:	f021 0104 	bicge.w	r1, r1, #4
 8023628:	6021      	strge	r1, [r4, #0]
 802362a:	b90e      	cbnz	r6, 8023630 <_printf_i+0x118>
 802362c:	2d00      	cmp	r5, #0
 802362e:	d04d      	beq.n	80236cc <_printf_i+0x1b4>
 8023630:	4615      	mov	r5, r2
 8023632:	fbb6 f1f3 	udiv	r1, r6, r3
 8023636:	fb03 6711 	mls	r7, r3, r1, r6
 802363a:	5dc7      	ldrb	r7, [r0, r7]
 802363c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8023640:	4637      	mov	r7, r6
 8023642:	42bb      	cmp	r3, r7
 8023644:	460e      	mov	r6, r1
 8023646:	d9f4      	bls.n	8023632 <_printf_i+0x11a>
 8023648:	2b08      	cmp	r3, #8
 802364a:	d10b      	bne.n	8023664 <_printf_i+0x14c>
 802364c:	6823      	ldr	r3, [r4, #0]
 802364e:	07de      	lsls	r6, r3, #31
 8023650:	d508      	bpl.n	8023664 <_printf_i+0x14c>
 8023652:	6923      	ldr	r3, [r4, #16]
 8023654:	6861      	ldr	r1, [r4, #4]
 8023656:	4299      	cmp	r1, r3
 8023658:	bfde      	ittt	le
 802365a:	2330      	movle	r3, #48	; 0x30
 802365c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8023660:	f105 35ff 	addle.w	r5, r5, #4294967295
 8023664:	1b52      	subs	r2, r2, r5
 8023666:	6122      	str	r2, [r4, #16]
 8023668:	f8cd a000 	str.w	sl, [sp]
 802366c:	464b      	mov	r3, r9
 802366e:	aa03      	add	r2, sp, #12
 8023670:	4621      	mov	r1, r4
 8023672:	4640      	mov	r0, r8
 8023674:	f7ff fee2 	bl	802343c <_printf_common>
 8023678:	3001      	adds	r0, #1
 802367a:	d14c      	bne.n	8023716 <_printf_i+0x1fe>
 802367c:	f04f 30ff 	mov.w	r0, #4294967295
 8023680:	b004      	add	sp, #16
 8023682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023686:	4835      	ldr	r0, [pc, #212]	; (802375c <_printf_i+0x244>)
 8023688:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802368c:	6829      	ldr	r1, [r5, #0]
 802368e:	6823      	ldr	r3, [r4, #0]
 8023690:	f851 6b04 	ldr.w	r6, [r1], #4
 8023694:	6029      	str	r1, [r5, #0]
 8023696:	061d      	lsls	r5, r3, #24
 8023698:	d514      	bpl.n	80236c4 <_printf_i+0x1ac>
 802369a:	07df      	lsls	r7, r3, #31
 802369c:	bf44      	itt	mi
 802369e:	f043 0320 	orrmi.w	r3, r3, #32
 80236a2:	6023      	strmi	r3, [r4, #0]
 80236a4:	b91e      	cbnz	r6, 80236ae <_printf_i+0x196>
 80236a6:	6823      	ldr	r3, [r4, #0]
 80236a8:	f023 0320 	bic.w	r3, r3, #32
 80236ac:	6023      	str	r3, [r4, #0]
 80236ae:	2310      	movs	r3, #16
 80236b0:	e7b0      	b.n	8023614 <_printf_i+0xfc>
 80236b2:	6823      	ldr	r3, [r4, #0]
 80236b4:	f043 0320 	orr.w	r3, r3, #32
 80236b8:	6023      	str	r3, [r4, #0]
 80236ba:	2378      	movs	r3, #120	; 0x78
 80236bc:	4828      	ldr	r0, [pc, #160]	; (8023760 <_printf_i+0x248>)
 80236be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80236c2:	e7e3      	b.n	802368c <_printf_i+0x174>
 80236c4:	0659      	lsls	r1, r3, #25
 80236c6:	bf48      	it	mi
 80236c8:	b2b6      	uxthmi	r6, r6
 80236ca:	e7e6      	b.n	802369a <_printf_i+0x182>
 80236cc:	4615      	mov	r5, r2
 80236ce:	e7bb      	b.n	8023648 <_printf_i+0x130>
 80236d0:	682b      	ldr	r3, [r5, #0]
 80236d2:	6826      	ldr	r6, [r4, #0]
 80236d4:	6961      	ldr	r1, [r4, #20]
 80236d6:	1d18      	adds	r0, r3, #4
 80236d8:	6028      	str	r0, [r5, #0]
 80236da:	0635      	lsls	r5, r6, #24
 80236dc:	681b      	ldr	r3, [r3, #0]
 80236de:	d501      	bpl.n	80236e4 <_printf_i+0x1cc>
 80236e0:	6019      	str	r1, [r3, #0]
 80236e2:	e002      	b.n	80236ea <_printf_i+0x1d2>
 80236e4:	0670      	lsls	r0, r6, #25
 80236e6:	d5fb      	bpl.n	80236e0 <_printf_i+0x1c8>
 80236e8:	8019      	strh	r1, [r3, #0]
 80236ea:	2300      	movs	r3, #0
 80236ec:	6123      	str	r3, [r4, #16]
 80236ee:	4615      	mov	r5, r2
 80236f0:	e7ba      	b.n	8023668 <_printf_i+0x150>
 80236f2:	682b      	ldr	r3, [r5, #0]
 80236f4:	1d1a      	adds	r2, r3, #4
 80236f6:	602a      	str	r2, [r5, #0]
 80236f8:	681d      	ldr	r5, [r3, #0]
 80236fa:	6862      	ldr	r2, [r4, #4]
 80236fc:	2100      	movs	r1, #0
 80236fe:	4628      	mov	r0, r5
 8023700:	f7dc fdee 	bl	80002e0 <memchr>
 8023704:	b108      	cbz	r0, 802370a <_printf_i+0x1f2>
 8023706:	1b40      	subs	r0, r0, r5
 8023708:	6060      	str	r0, [r4, #4]
 802370a:	6863      	ldr	r3, [r4, #4]
 802370c:	6123      	str	r3, [r4, #16]
 802370e:	2300      	movs	r3, #0
 8023710:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023714:	e7a8      	b.n	8023668 <_printf_i+0x150>
 8023716:	6923      	ldr	r3, [r4, #16]
 8023718:	462a      	mov	r2, r5
 802371a:	4649      	mov	r1, r9
 802371c:	4640      	mov	r0, r8
 802371e:	47d0      	blx	sl
 8023720:	3001      	adds	r0, #1
 8023722:	d0ab      	beq.n	802367c <_printf_i+0x164>
 8023724:	6823      	ldr	r3, [r4, #0]
 8023726:	079b      	lsls	r3, r3, #30
 8023728:	d413      	bmi.n	8023752 <_printf_i+0x23a>
 802372a:	68e0      	ldr	r0, [r4, #12]
 802372c:	9b03      	ldr	r3, [sp, #12]
 802372e:	4298      	cmp	r0, r3
 8023730:	bfb8      	it	lt
 8023732:	4618      	movlt	r0, r3
 8023734:	e7a4      	b.n	8023680 <_printf_i+0x168>
 8023736:	2301      	movs	r3, #1
 8023738:	4632      	mov	r2, r6
 802373a:	4649      	mov	r1, r9
 802373c:	4640      	mov	r0, r8
 802373e:	47d0      	blx	sl
 8023740:	3001      	adds	r0, #1
 8023742:	d09b      	beq.n	802367c <_printf_i+0x164>
 8023744:	3501      	adds	r5, #1
 8023746:	68e3      	ldr	r3, [r4, #12]
 8023748:	9903      	ldr	r1, [sp, #12]
 802374a:	1a5b      	subs	r3, r3, r1
 802374c:	42ab      	cmp	r3, r5
 802374e:	dcf2      	bgt.n	8023736 <_printf_i+0x21e>
 8023750:	e7eb      	b.n	802372a <_printf_i+0x212>
 8023752:	2500      	movs	r5, #0
 8023754:	f104 0619 	add.w	r6, r4, #25
 8023758:	e7f5      	b.n	8023746 <_printf_i+0x22e>
 802375a:	bf00      	nop
 802375c:	08026461 	.word	0x08026461
 8023760:	08026472 	.word	0x08026472

08023764 <rand>:
 8023764:	4b16      	ldr	r3, [pc, #88]	; (80237c0 <rand+0x5c>)
 8023766:	b510      	push	{r4, lr}
 8023768:	681c      	ldr	r4, [r3, #0]
 802376a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802376c:	b9b3      	cbnz	r3, 802379c <rand+0x38>
 802376e:	2018      	movs	r0, #24
 8023770:	f7ff fc04 	bl	8022f7c <malloc>
 8023774:	63a0      	str	r0, [r4, #56]	; 0x38
 8023776:	b928      	cbnz	r0, 8023784 <rand+0x20>
 8023778:	4602      	mov	r2, r0
 802377a:	4b12      	ldr	r3, [pc, #72]	; (80237c4 <rand+0x60>)
 802377c:	4812      	ldr	r0, [pc, #72]	; (80237c8 <rand+0x64>)
 802377e:	214e      	movs	r1, #78	; 0x4e
 8023780:	f7ff fb8e 	bl	8022ea0 <__assert_func>
 8023784:	4a11      	ldr	r2, [pc, #68]	; (80237cc <rand+0x68>)
 8023786:	4b12      	ldr	r3, [pc, #72]	; (80237d0 <rand+0x6c>)
 8023788:	e9c0 2300 	strd	r2, r3, [r0]
 802378c:	4b11      	ldr	r3, [pc, #68]	; (80237d4 <rand+0x70>)
 802378e:	6083      	str	r3, [r0, #8]
 8023790:	230b      	movs	r3, #11
 8023792:	8183      	strh	r3, [r0, #12]
 8023794:	2201      	movs	r2, #1
 8023796:	2300      	movs	r3, #0
 8023798:	e9c0 2304 	strd	r2, r3, [r0, #16]
 802379c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 802379e:	4a0e      	ldr	r2, [pc, #56]	; (80237d8 <rand+0x74>)
 80237a0:	6920      	ldr	r0, [r4, #16]
 80237a2:	6963      	ldr	r3, [r4, #20]
 80237a4:	490d      	ldr	r1, [pc, #52]	; (80237dc <rand+0x78>)
 80237a6:	4342      	muls	r2, r0
 80237a8:	fb01 2203 	mla	r2, r1, r3, r2
 80237ac:	fba0 0101 	umull	r0, r1, r0, r1
 80237b0:	1c43      	adds	r3, r0, #1
 80237b2:	eb42 0001 	adc.w	r0, r2, r1
 80237b6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80237ba:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80237be:	bd10      	pop	{r4, pc}
 80237c0:	240000b4 	.word	0x240000b4
 80237c4:	08026488 	.word	0x08026488
 80237c8:	0802649f 	.word	0x0802649f
 80237cc:	abcd330e 	.word	0xabcd330e
 80237d0:	e66d1234 	.word	0xe66d1234
 80237d4:	0005deec 	.word	0x0005deec
 80237d8:	5851f42d 	.word	0x5851f42d
 80237dc:	4c957f2d 	.word	0x4c957f2d

080237e0 <_sbrk_r>:
 80237e0:	b538      	push	{r3, r4, r5, lr}
 80237e2:	4d06      	ldr	r5, [pc, #24]	; (80237fc <_sbrk_r+0x1c>)
 80237e4:	2300      	movs	r3, #0
 80237e6:	4604      	mov	r4, r0
 80237e8:	4608      	mov	r0, r1
 80237ea:	602b      	str	r3, [r5, #0]
 80237ec:	f7dd fea2 	bl	8001534 <_sbrk>
 80237f0:	1c43      	adds	r3, r0, #1
 80237f2:	d102      	bne.n	80237fa <_sbrk_r+0x1a>
 80237f4:	682b      	ldr	r3, [r5, #0]
 80237f6:	b103      	cbz	r3, 80237fa <_sbrk_r+0x1a>
 80237f8:	6023      	str	r3, [r4, #0]
 80237fa:	bd38      	pop	{r3, r4, r5, pc}
 80237fc:	2400ed58 	.word	0x2400ed58

08023800 <_raise_r>:
 8023800:	291f      	cmp	r1, #31
 8023802:	b538      	push	{r3, r4, r5, lr}
 8023804:	4604      	mov	r4, r0
 8023806:	460d      	mov	r5, r1
 8023808:	d904      	bls.n	8023814 <_raise_r+0x14>
 802380a:	2316      	movs	r3, #22
 802380c:	6003      	str	r3, [r0, #0]
 802380e:	f04f 30ff 	mov.w	r0, #4294967295
 8023812:	bd38      	pop	{r3, r4, r5, pc}
 8023814:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8023816:	b112      	cbz	r2, 802381e <_raise_r+0x1e>
 8023818:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802381c:	b94b      	cbnz	r3, 8023832 <_raise_r+0x32>
 802381e:	4620      	mov	r0, r4
 8023820:	f000 f830 	bl	8023884 <_getpid_r>
 8023824:	462a      	mov	r2, r5
 8023826:	4601      	mov	r1, r0
 8023828:	4620      	mov	r0, r4
 802382a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802382e:	f000 b817 	b.w	8023860 <_kill_r>
 8023832:	2b01      	cmp	r3, #1
 8023834:	d00a      	beq.n	802384c <_raise_r+0x4c>
 8023836:	1c59      	adds	r1, r3, #1
 8023838:	d103      	bne.n	8023842 <_raise_r+0x42>
 802383a:	2316      	movs	r3, #22
 802383c:	6003      	str	r3, [r0, #0]
 802383e:	2001      	movs	r0, #1
 8023840:	e7e7      	b.n	8023812 <_raise_r+0x12>
 8023842:	2400      	movs	r4, #0
 8023844:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023848:	4628      	mov	r0, r5
 802384a:	4798      	blx	r3
 802384c:	2000      	movs	r0, #0
 802384e:	e7e0      	b.n	8023812 <_raise_r+0x12>

08023850 <raise>:
 8023850:	4b02      	ldr	r3, [pc, #8]	; (802385c <raise+0xc>)
 8023852:	4601      	mov	r1, r0
 8023854:	6818      	ldr	r0, [r3, #0]
 8023856:	f7ff bfd3 	b.w	8023800 <_raise_r>
 802385a:	bf00      	nop
 802385c:	240000b4 	.word	0x240000b4

08023860 <_kill_r>:
 8023860:	b538      	push	{r3, r4, r5, lr}
 8023862:	4d07      	ldr	r5, [pc, #28]	; (8023880 <_kill_r+0x20>)
 8023864:	2300      	movs	r3, #0
 8023866:	4604      	mov	r4, r0
 8023868:	4608      	mov	r0, r1
 802386a:	4611      	mov	r1, r2
 802386c:	602b      	str	r3, [r5, #0]
 802386e:	f7dd fe2b 	bl	80014c8 <_kill>
 8023872:	1c43      	adds	r3, r0, #1
 8023874:	d102      	bne.n	802387c <_kill_r+0x1c>
 8023876:	682b      	ldr	r3, [r5, #0]
 8023878:	b103      	cbz	r3, 802387c <_kill_r+0x1c>
 802387a:	6023      	str	r3, [r4, #0]
 802387c:	bd38      	pop	{r3, r4, r5, pc}
 802387e:	bf00      	nop
 8023880:	2400ed58 	.word	0x2400ed58

08023884 <_getpid_r>:
 8023884:	f7dd be1e 	b.w	80014c4 <_getpid>

08023888 <__swbuf_r>:
 8023888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802388a:	460e      	mov	r6, r1
 802388c:	4614      	mov	r4, r2
 802388e:	4605      	mov	r5, r0
 8023890:	b118      	cbz	r0, 802389a <__swbuf_r+0x12>
 8023892:	6983      	ldr	r3, [r0, #24]
 8023894:	b90b      	cbnz	r3, 802389a <__swbuf_r+0x12>
 8023896:	f000 fa33 	bl	8023d00 <__sinit>
 802389a:	4b21      	ldr	r3, [pc, #132]	; (8023920 <__swbuf_r+0x98>)
 802389c:	429c      	cmp	r4, r3
 802389e:	d12b      	bne.n	80238f8 <__swbuf_r+0x70>
 80238a0:	686c      	ldr	r4, [r5, #4]
 80238a2:	69a3      	ldr	r3, [r4, #24]
 80238a4:	60a3      	str	r3, [r4, #8]
 80238a6:	89a3      	ldrh	r3, [r4, #12]
 80238a8:	071a      	lsls	r2, r3, #28
 80238aa:	d52f      	bpl.n	802390c <__swbuf_r+0x84>
 80238ac:	6923      	ldr	r3, [r4, #16]
 80238ae:	b36b      	cbz	r3, 802390c <__swbuf_r+0x84>
 80238b0:	6923      	ldr	r3, [r4, #16]
 80238b2:	6820      	ldr	r0, [r4, #0]
 80238b4:	1ac0      	subs	r0, r0, r3
 80238b6:	6963      	ldr	r3, [r4, #20]
 80238b8:	b2f6      	uxtb	r6, r6
 80238ba:	4283      	cmp	r3, r0
 80238bc:	4637      	mov	r7, r6
 80238be:	dc04      	bgt.n	80238ca <__swbuf_r+0x42>
 80238c0:	4621      	mov	r1, r4
 80238c2:	4628      	mov	r0, r5
 80238c4:	f000 f988 	bl	8023bd8 <_fflush_r>
 80238c8:	bb30      	cbnz	r0, 8023918 <__swbuf_r+0x90>
 80238ca:	68a3      	ldr	r3, [r4, #8]
 80238cc:	3b01      	subs	r3, #1
 80238ce:	60a3      	str	r3, [r4, #8]
 80238d0:	6823      	ldr	r3, [r4, #0]
 80238d2:	1c5a      	adds	r2, r3, #1
 80238d4:	6022      	str	r2, [r4, #0]
 80238d6:	701e      	strb	r6, [r3, #0]
 80238d8:	6963      	ldr	r3, [r4, #20]
 80238da:	3001      	adds	r0, #1
 80238dc:	4283      	cmp	r3, r0
 80238de:	d004      	beq.n	80238ea <__swbuf_r+0x62>
 80238e0:	89a3      	ldrh	r3, [r4, #12]
 80238e2:	07db      	lsls	r3, r3, #31
 80238e4:	d506      	bpl.n	80238f4 <__swbuf_r+0x6c>
 80238e6:	2e0a      	cmp	r6, #10
 80238e8:	d104      	bne.n	80238f4 <__swbuf_r+0x6c>
 80238ea:	4621      	mov	r1, r4
 80238ec:	4628      	mov	r0, r5
 80238ee:	f000 f973 	bl	8023bd8 <_fflush_r>
 80238f2:	b988      	cbnz	r0, 8023918 <__swbuf_r+0x90>
 80238f4:	4638      	mov	r0, r7
 80238f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80238f8:	4b0a      	ldr	r3, [pc, #40]	; (8023924 <__swbuf_r+0x9c>)
 80238fa:	429c      	cmp	r4, r3
 80238fc:	d101      	bne.n	8023902 <__swbuf_r+0x7a>
 80238fe:	68ac      	ldr	r4, [r5, #8]
 8023900:	e7cf      	b.n	80238a2 <__swbuf_r+0x1a>
 8023902:	4b09      	ldr	r3, [pc, #36]	; (8023928 <__swbuf_r+0xa0>)
 8023904:	429c      	cmp	r4, r3
 8023906:	bf08      	it	eq
 8023908:	68ec      	ldreq	r4, [r5, #12]
 802390a:	e7ca      	b.n	80238a2 <__swbuf_r+0x1a>
 802390c:	4621      	mov	r1, r4
 802390e:	4628      	mov	r0, r5
 8023910:	f000 f80c 	bl	802392c <__swsetup_r>
 8023914:	2800      	cmp	r0, #0
 8023916:	d0cb      	beq.n	80238b0 <__swbuf_r+0x28>
 8023918:	f04f 37ff 	mov.w	r7, #4294967295
 802391c:	e7ea      	b.n	80238f4 <__swbuf_r+0x6c>
 802391e:	bf00      	nop
 8023920:	0802651c 	.word	0x0802651c
 8023924:	0802653c 	.word	0x0802653c
 8023928:	080264fc 	.word	0x080264fc

0802392c <__swsetup_r>:
 802392c:	4b32      	ldr	r3, [pc, #200]	; (80239f8 <__swsetup_r+0xcc>)
 802392e:	b570      	push	{r4, r5, r6, lr}
 8023930:	681d      	ldr	r5, [r3, #0]
 8023932:	4606      	mov	r6, r0
 8023934:	460c      	mov	r4, r1
 8023936:	b125      	cbz	r5, 8023942 <__swsetup_r+0x16>
 8023938:	69ab      	ldr	r3, [r5, #24]
 802393a:	b913      	cbnz	r3, 8023942 <__swsetup_r+0x16>
 802393c:	4628      	mov	r0, r5
 802393e:	f000 f9df 	bl	8023d00 <__sinit>
 8023942:	4b2e      	ldr	r3, [pc, #184]	; (80239fc <__swsetup_r+0xd0>)
 8023944:	429c      	cmp	r4, r3
 8023946:	d10f      	bne.n	8023968 <__swsetup_r+0x3c>
 8023948:	686c      	ldr	r4, [r5, #4]
 802394a:	89a3      	ldrh	r3, [r4, #12]
 802394c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023950:	0719      	lsls	r1, r3, #28
 8023952:	d42c      	bmi.n	80239ae <__swsetup_r+0x82>
 8023954:	06dd      	lsls	r5, r3, #27
 8023956:	d411      	bmi.n	802397c <__swsetup_r+0x50>
 8023958:	2309      	movs	r3, #9
 802395a:	6033      	str	r3, [r6, #0]
 802395c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8023960:	81a3      	strh	r3, [r4, #12]
 8023962:	f04f 30ff 	mov.w	r0, #4294967295
 8023966:	e03e      	b.n	80239e6 <__swsetup_r+0xba>
 8023968:	4b25      	ldr	r3, [pc, #148]	; (8023a00 <__swsetup_r+0xd4>)
 802396a:	429c      	cmp	r4, r3
 802396c:	d101      	bne.n	8023972 <__swsetup_r+0x46>
 802396e:	68ac      	ldr	r4, [r5, #8]
 8023970:	e7eb      	b.n	802394a <__swsetup_r+0x1e>
 8023972:	4b24      	ldr	r3, [pc, #144]	; (8023a04 <__swsetup_r+0xd8>)
 8023974:	429c      	cmp	r4, r3
 8023976:	bf08      	it	eq
 8023978:	68ec      	ldreq	r4, [r5, #12]
 802397a:	e7e6      	b.n	802394a <__swsetup_r+0x1e>
 802397c:	0758      	lsls	r0, r3, #29
 802397e:	d512      	bpl.n	80239a6 <__swsetup_r+0x7a>
 8023980:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023982:	b141      	cbz	r1, 8023996 <__swsetup_r+0x6a>
 8023984:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023988:	4299      	cmp	r1, r3
 802398a:	d002      	beq.n	8023992 <__swsetup_r+0x66>
 802398c:	4630      	mov	r0, r6
 802398e:	f7ff fb1b 	bl	8022fc8 <_free_r>
 8023992:	2300      	movs	r3, #0
 8023994:	6363      	str	r3, [r4, #52]	; 0x34
 8023996:	89a3      	ldrh	r3, [r4, #12]
 8023998:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802399c:	81a3      	strh	r3, [r4, #12]
 802399e:	2300      	movs	r3, #0
 80239a0:	6063      	str	r3, [r4, #4]
 80239a2:	6923      	ldr	r3, [r4, #16]
 80239a4:	6023      	str	r3, [r4, #0]
 80239a6:	89a3      	ldrh	r3, [r4, #12]
 80239a8:	f043 0308 	orr.w	r3, r3, #8
 80239ac:	81a3      	strh	r3, [r4, #12]
 80239ae:	6923      	ldr	r3, [r4, #16]
 80239b0:	b94b      	cbnz	r3, 80239c6 <__swsetup_r+0x9a>
 80239b2:	89a3      	ldrh	r3, [r4, #12]
 80239b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80239b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80239bc:	d003      	beq.n	80239c6 <__swsetup_r+0x9a>
 80239be:	4621      	mov	r1, r4
 80239c0:	4630      	mov	r0, r6
 80239c2:	f000 fa63 	bl	8023e8c <__smakebuf_r>
 80239c6:	89a0      	ldrh	r0, [r4, #12]
 80239c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80239cc:	f010 0301 	ands.w	r3, r0, #1
 80239d0:	d00a      	beq.n	80239e8 <__swsetup_r+0xbc>
 80239d2:	2300      	movs	r3, #0
 80239d4:	60a3      	str	r3, [r4, #8]
 80239d6:	6963      	ldr	r3, [r4, #20]
 80239d8:	425b      	negs	r3, r3
 80239da:	61a3      	str	r3, [r4, #24]
 80239dc:	6923      	ldr	r3, [r4, #16]
 80239de:	b943      	cbnz	r3, 80239f2 <__swsetup_r+0xc6>
 80239e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80239e4:	d1ba      	bne.n	802395c <__swsetup_r+0x30>
 80239e6:	bd70      	pop	{r4, r5, r6, pc}
 80239e8:	0781      	lsls	r1, r0, #30
 80239ea:	bf58      	it	pl
 80239ec:	6963      	ldrpl	r3, [r4, #20]
 80239ee:	60a3      	str	r3, [r4, #8]
 80239f0:	e7f4      	b.n	80239dc <__swsetup_r+0xb0>
 80239f2:	2000      	movs	r0, #0
 80239f4:	e7f7      	b.n	80239e6 <__swsetup_r+0xba>
 80239f6:	bf00      	nop
 80239f8:	240000b4 	.word	0x240000b4
 80239fc:	0802651c 	.word	0x0802651c
 8023a00:	0802653c 	.word	0x0802653c
 8023a04:	080264fc 	.word	0x080264fc

08023a08 <__register_exitproc>:
 8023a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023a0c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8023ac8 <__register_exitproc+0xc0>
 8023a10:	4606      	mov	r6, r0
 8023a12:	f8d8 0000 	ldr.w	r0, [r8]
 8023a16:	461f      	mov	r7, r3
 8023a18:	460d      	mov	r5, r1
 8023a1a:	4691      	mov	r9, r2
 8023a1c:	f000 fa0e 	bl	8023e3c <__retarget_lock_acquire_recursive>
 8023a20:	4b25      	ldr	r3, [pc, #148]	; (8023ab8 <__register_exitproc+0xb0>)
 8023a22:	681c      	ldr	r4, [r3, #0]
 8023a24:	b934      	cbnz	r4, 8023a34 <__register_exitproc+0x2c>
 8023a26:	4c25      	ldr	r4, [pc, #148]	; (8023abc <__register_exitproc+0xb4>)
 8023a28:	601c      	str	r4, [r3, #0]
 8023a2a:	4b25      	ldr	r3, [pc, #148]	; (8023ac0 <__register_exitproc+0xb8>)
 8023a2c:	b113      	cbz	r3, 8023a34 <__register_exitproc+0x2c>
 8023a2e:	681b      	ldr	r3, [r3, #0]
 8023a30:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8023a34:	6863      	ldr	r3, [r4, #4]
 8023a36:	2b1f      	cmp	r3, #31
 8023a38:	dd07      	ble.n	8023a4a <__register_exitproc+0x42>
 8023a3a:	f8d8 0000 	ldr.w	r0, [r8]
 8023a3e:	f000 f9ff 	bl	8023e40 <__retarget_lock_release_recursive>
 8023a42:	f04f 30ff 	mov.w	r0, #4294967295
 8023a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023a4a:	b34e      	cbz	r6, 8023aa0 <__register_exitproc+0x98>
 8023a4c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8023a50:	b988      	cbnz	r0, 8023a76 <__register_exitproc+0x6e>
 8023a52:	4b1c      	ldr	r3, [pc, #112]	; (8023ac4 <__register_exitproc+0xbc>)
 8023a54:	b923      	cbnz	r3, 8023a60 <__register_exitproc+0x58>
 8023a56:	f8d8 0000 	ldr.w	r0, [r8]
 8023a5a:	f000 f9f0 	bl	8023e3e <__retarget_lock_release>
 8023a5e:	e7f0      	b.n	8023a42 <__register_exitproc+0x3a>
 8023a60:	f44f 7084 	mov.w	r0, #264	; 0x108
 8023a64:	f7ff fa8a 	bl	8022f7c <malloc>
 8023a68:	2800      	cmp	r0, #0
 8023a6a:	d0f4      	beq.n	8023a56 <__register_exitproc+0x4e>
 8023a6c:	2300      	movs	r3, #0
 8023a6e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8023a72:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8023a76:	6863      	ldr	r3, [r4, #4]
 8023a78:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8023a7c:	2201      	movs	r2, #1
 8023a7e:	409a      	lsls	r2, r3
 8023a80:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8023a84:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8023a88:	4313      	orrs	r3, r2
 8023a8a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8023a8e:	2e02      	cmp	r6, #2
 8023a90:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8023a94:	bf02      	ittt	eq
 8023a96:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8023a9a:	4313      	orreq	r3, r2
 8023a9c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8023aa0:	6863      	ldr	r3, [r4, #4]
 8023aa2:	f8d8 0000 	ldr.w	r0, [r8]
 8023aa6:	1c5a      	adds	r2, r3, #1
 8023aa8:	3302      	adds	r3, #2
 8023aaa:	6062      	str	r2, [r4, #4]
 8023aac:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8023ab0:	f000 f9c6 	bl	8023e40 <__retarget_lock_release_recursive>
 8023ab4:	2000      	movs	r0, #0
 8023ab6:	e7c6      	b.n	8023a46 <__register_exitproc+0x3e>
 8023ab8:	2400ed50 	.word	0x2400ed50
 8023abc:	2400ecc4 	.word	0x2400ecc4
 8023ac0:	08026484 	.word	0x08026484
 8023ac4:	08022f7d 	.word	0x08022f7d
 8023ac8:	24000118 	.word	0x24000118

08023acc <__sflush_r>:
 8023acc:	898a      	ldrh	r2, [r1, #12]
 8023ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023ad2:	4605      	mov	r5, r0
 8023ad4:	0710      	lsls	r0, r2, #28
 8023ad6:	460c      	mov	r4, r1
 8023ad8:	d458      	bmi.n	8023b8c <__sflush_r+0xc0>
 8023ada:	684b      	ldr	r3, [r1, #4]
 8023adc:	2b00      	cmp	r3, #0
 8023ade:	dc05      	bgt.n	8023aec <__sflush_r+0x20>
 8023ae0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8023ae2:	2b00      	cmp	r3, #0
 8023ae4:	dc02      	bgt.n	8023aec <__sflush_r+0x20>
 8023ae6:	2000      	movs	r0, #0
 8023ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023aec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023aee:	2e00      	cmp	r6, #0
 8023af0:	d0f9      	beq.n	8023ae6 <__sflush_r+0x1a>
 8023af2:	2300      	movs	r3, #0
 8023af4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8023af8:	682f      	ldr	r7, [r5, #0]
 8023afa:	602b      	str	r3, [r5, #0]
 8023afc:	d032      	beq.n	8023b64 <__sflush_r+0x98>
 8023afe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8023b00:	89a3      	ldrh	r3, [r4, #12]
 8023b02:	075a      	lsls	r2, r3, #29
 8023b04:	d505      	bpl.n	8023b12 <__sflush_r+0x46>
 8023b06:	6863      	ldr	r3, [r4, #4]
 8023b08:	1ac0      	subs	r0, r0, r3
 8023b0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8023b0c:	b10b      	cbz	r3, 8023b12 <__sflush_r+0x46>
 8023b0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023b10:	1ac0      	subs	r0, r0, r3
 8023b12:	2300      	movs	r3, #0
 8023b14:	4602      	mov	r2, r0
 8023b16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023b18:	6a21      	ldr	r1, [r4, #32]
 8023b1a:	4628      	mov	r0, r5
 8023b1c:	47b0      	blx	r6
 8023b1e:	1c43      	adds	r3, r0, #1
 8023b20:	89a3      	ldrh	r3, [r4, #12]
 8023b22:	d106      	bne.n	8023b32 <__sflush_r+0x66>
 8023b24:	6829      	ldr	r1, [r5, #0]
 8023b26:	291d      	cmp	r1, #29
 8023b28:	d82c      	bhi.n	8023b84 <__sflush_r+0xb8>
 8023b2a:	4a2a      	ldr	r2, [pc, #168]	; (8023bd4 <__sflush_r+0x108>)
 8023b2c:	40ca      	lsrs	r2, r1
 8023b2e:	07d6      	lsls	r6, r2, #31
 8023b30:	d528      	bpl.n	8023b84 <__sflush_r+0xb8>
 8023b32:	2200      	movs	r2, #0
 8023b34:	6062      	str	r2, [r4, #4]
 8023b36:	04d9      	lsls	r1, r3, #19
 8023b38:	6922      	ldr	r2, [r4, #16]
 8023b3a:	6022      	str	r2, [r4, #0]
 8023b3c:	d504      	bpl.n	8023b48 <__sflush_r+0x7c>
 8023b3e:	1c42      	adds	r2, r0, #1
 8023b40:	d101      	bne.n	8023b46 <__sflush_r+0x7a>
 8023b42:	682b      	ldr	r3, [r5, #0]
 8023b44:	b903      	cbnz	r3, 8023b48 <__sflush_r+0x7c>
 8023b46:	6560      	str	r0, [r4, #84]	; 0x54
 8023b48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023b4a:	602f      	str	r7, [r5, #0]
 8023b4c:	2900      	cmp	r1, #0
 8023b4e:	d0ca      	beq.n	8023ae6 <__sflush_r+0x1a>
 8023b50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023b54:	4299      	cmp	r1, r3
 8023b56:	d002      	beq.n	8023b5e <__sflush_r+0x92>
 8023b58:	4628      	mov	r0, r5
 8023b5a:	f7ff fa35 	bl	8022fc8 <_free_r>
 8023b5e:	2000      	movs	r0, #0
 8023b60:	6360      	str	r0, [r4, #52]	; 0x34
 8023b62:	e7c1      	b.n	8023ae8 <__sflush_r+0x1c>
 8023b64:	6a21      	ldr	r1, [r4, #32]
 8023b66:	2301      	movs	r3, #1
 8023b68:	4628      	mov	r0, r5
 8023b6a:	47b0      	blx	r6
 8023b6c:	1c41      	adds	r1, r0, #1
 8023b6e:	d1c7      	bne.n	8023b00 <__sflush_r+0x34>
 8023b70:	682b      	ldr	r3, [r5, #0]
 8023b72:	2b00      	cmp	r3, #0
 8023b74:	d0c4      	beq.n	8023b00 <__sflush_r+0x34>
 8023b76:	2b1d      	cmp	r3, #29
 8023b78:	d001      	beq.n	8023b7e <__sflush_r+0xb2>
 8023b7a:	2b16      	cmp	r3, #22
 8023b7c:	d101      	bne.n	8023b82 <__sflush_r+0xb6>
 8023b7e:	602f      	str	r7, [r5, #0]
 8023b80:	e7b1      	b.n	8023ae6 <__sflush_r+0x1a>
 8023b82:	89a3      	ldrh	r3, [r4, #12]
 8023b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023b88:	81a3      	strh	r3, [r4, #12]
 8023b8a:	e7ad      	b.n	8023ae8 <__sflush_r+0x1c>
 8023b8c:	690f      	ldr	r7, [r1, #16]
 8023b8e:	2f00      	cmp	r7, #0
 8023b90:	d0a9      	beq.n	8023ae6 <__sflush_r+0x1a>
 8023b92:	0793      	lsls	r3, r2, #30
 8023b94:	680e      	ldr	r6, [r1, #0]
 8023b96:	bf08      	it	eq
 8023b98:	694b      	ldreq	r3, [r1, #20]
 8023b9a:	600f      	str	r7, [r1, #0]
 8023b9c:	bf18      	it	ne
 8023b9e:	2300      	movne	r3, #0
 8023ba0:	eba6 0807 	sub.w	r8, r6, r7
 8023ba4:	608b      	str	r3, [r1, #8]
 8023ba6:	f1b8 0f00 	cmp.w	r8, #0
 8023baa:	dd9c      	ble.n	8023ae6 <__sflush_r+0x1a>
 8023bac:	6a21      	ldr	r1, [r4, #32]
 8023bae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8023bb0:	4643      	mov	r3, r8
 8023bb2:	463a      	mov	r2, r7
 8023bb4:	4628      	mov	r0, r5
 8023bb6:	47b0      	blx	r6
 8023bb8:	2800      	cmp	r0, #0
 8023bba:	dc06      	bgt.n	8023bca <__sflush_r+0xfe>
 8023bbc:	89a3      	ldrh	r3, [r4, #12]
 8023bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023bc2:	81a3      	strh	r3, [r4, #12]
 8023bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8023bc8:	e78e      	b.n	8023ae8 <__sflush_r+0x1c>
 8023bca:	4407      	add	r7, r0
 8023bcc:	eba8 0800 	sub.w	r8, r8, r0
 8023bd0:	e7e9      	b.n	8023ba6 <__sflush_r+0xda>
 8023bd2:	bf00      	nop
 8023bd4:	20400001 	.word	0x20400001

08023bd8 <_fflush_r>:
 8023bd8:	b538      	push	{r3, r4, r5, lr}
 8023bda:	690b      	ldr	r3, [r1, #16]
 8023bdc:	4605      	mov	r5, r0
 8023bde:	460c      	mov	r4, r1
 8023be0:	b913      	cbnz	r3, 8023be8 <_fflush_r+0x10>
 8023be2:	2500      	movs	r5, #0
 8023be4:	4628      	mov	r0, r5
 8023be6:	bd38      	pop	{r3, r4, r5, pc}
 8023be8:	b118      	cbz	r0, 8023bf2 <_fflush_r+0x1a>
 8023bea:	6983      	ldr	r3, [r0, #24]
 8023bec:	b90b      	cbnz	r3, 8023bf2 <_fflush_r+0x1a>
 8023bee:	f000 f887 	bl	8023d00 <__sinit>
 8023bf2:	4b14      	ldr	r3, [pc, #80]	; (8023c44 <_fflush_r+0x6c>)
 8023bf4:	429c      	cmp	r4, r3
 8023bf6:	d11b      	bne.n	8023c30 <_fflush_r+0x58>
 8023bf8:	686c      	ldr	r4, [r5, #4]
 8023bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023bfe:	2b00      	cmp	r3, #0
 8023c00:	d0ef      	beq.n	8023be2 <_fflush_r+0xa>
 8023c02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8023c04:	07d0      	lsls	r0, r2, #31
 8023c06:	d404      	bmi.n	8023c12 <_fflush_r+0x3a>
 8023c08:	0599      	lsls	r1, r3, #22
 8023c0a:	d402      	bmi.n	8023c12 <_fflush_r+0x3a>
 8023c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023c0e:	f000 f915 	bl	8023e3c <__retarget_lock_acquire_recursive>
 8023c12:	4628      	mov	r0, r5
 8023c14:	4621      	mov	r1, r4
 8023c16:	f7ff ff59 	bl	8023acc <__sflush_r>
 8023c1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023c1c:	07da      	lsls	r2, r3, #31
 8023c1e:	4605      	mov	r5, r0
 8023c20:	d4e0      	bmi.n	8023be4 <_fflush_r+0xc>
 8023c22:	89a3      	ldrh	r3, [r4, #12]
 8023c24:	059b      	lsls	r3, r3, #22
 8023c26:	d4dd      	bmi.n	8023be4 <_fflush_r+0xc>
 8023c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023c2a:	f000 f909 	bl	8023e40 <__retarget_lock_release_recursive>
 8023c2e:	e7d9      	b.n	8023be4 <_fflush_r+0xc>
 8023c30:	4b05      	ldr	r3, [pc, #20]	; (8023c48 <_fflush_r+0x70>)
 8023c32:	429c      	cmp	r4, r3
 8023c34:	d101      	bne.n	8023c3a <_fflush_r+0x62>
 8023c36:	68ac      	ldr	r4, [r5, #8]
 8023c38:	e7df      	b.n	8023bfa <_fflush_r+0x22>
 8023c3a:	4b04      	ldr	r3, [pc, #16]	; (8023c4c <_fflush_r+0x74>)
 8023c3c:	429c      	cmp	r4, r3
 8023c3e:	bf08      	it	eq
 8023c40:	68ec      	ldreq	r4, [r5, #12]
 8023c42:	e7da      	b.n	8023bfa <_fflush_r+0x22>
 8023c44:	0802651c 	.word	0x0802651c
 8023c48:	0802653c 	.word	0x0802653c
 8023c4c:	080264fc 	.word	0x080264fc

08023c50 <std>:
 8023c50:	2300      	movs	r3, #0
 8023c52:	b510      	push	{r4, lr}
 8023c54:	4604      	mov	r4, r0
 8023c56:	e9c0 3300 	strd	r3, r3, [r0]
 8023c5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023c5e:	6083      	str	r3, [r0, #8]
 8023c60:	8181      	strh	r1, [r0, #12]
 8023c62:	6643      	str	r3, [r0, #100]	; 0x64
 8023c64:	81c2      	strh	r2, [r0, #14]
 8023c66:	6183      	str	r3, [r0, #24]
 8023c68:	4619      	mov	r1, r3
 8023c6a:	2208      	movs	r2, #8
 8023c6c:	305c      	adds	r0, #92	; 0x5c
 8023c6e:	f7ff f9a3 	bl	8022fb8 <memset>
 8023c72:	4b05      	ldr	r3, [pc, #20]	; (8023c88 <std+0x38>)
 8023c74:	6263      	str	r3, [r4, #36]	; 0x24
 8023c76:	4b05      	ldr	r3, [pc, #20]	; (8023c8c <std+0x3c>)
 8023c78:	62a3      	str	r3, [r4, #40]	; 0x28
 8023c7a:	4b05      	ldr	r3, [pc, #20]	; (8023c90 <std+0x40>)
 8023c7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8023c7e:	4b05      	ldr	r3, [pc, #20]	; (8023c94 <std+0x44>)
 8023c80:	6224      	str	r4, [r4, #32]
 8023c82:	6323      	str	r3, [r4, #48]	; 0x30
 8023c84:	bd10      	pop	{r4, pc}
 8023c86:	bf00      	nop
 8023c88:	08023f25 	.word	0x08023f25
 8023c8c:	08023f47 	.word	0x08023f47
 8023c90:	08023f7f 	.word	0x08023f7f
 8023c94:	08023fa3 	.word	0x08023fa3

08023c98 <_cleanup_r>:
 8023c98:	4901      	ldr	r1, [pc, #4]	; (8023ca0 <_cleanup_r+0x8>)
 8023c9a:	f000 b8af 	b.w	8023dfc <_fwalk_reent>
 8023c9e:	bf00      	nop
 8023ca0:	08023bd9 	.word	0x08023bd9

08023ca4 <__sfmoreglue>:
 8023ca4:	b570      	push	{r4, r5, r6, lr}
 8023ca6:	2268      	movs	r2, #104	; 0x68
 8023ca8:	1e4d      	subs	r5, r1, #1
 8023caa:	4355      	muls	r5, r2
 8023cac:	460e      	mov	r6, r1
 8023cae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8023cb2:	f7ff f9f5 	bl	80230a0 <_malloc_r>
 8023cb6:	4604      	mov	r4, r0
 8023cb8:	b140      	cbz	r0, 8023ccc <__sfmoreglue+0x28>
 8023cba:	2100      	movs	r1, #0
 8023cbc:	e9c0 1600 	strd	r1, r6, [r0]
 8023cc0:	300c      	adds	r0, #12
 8023cc2:	60a0      	str	r0, [r4, #8]
 8023cc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8023cc8:	f7ff f976 	bl	8022fb8 <memset>
 8023ccc:	4620      	mov	r0, r4
 8023cce:	bd70      	pop	{r4, r5, r6, pc}

08023cd0 <__sfp_lock_acquire>:
 8023cd0:	4801      	ldr	r0, [pc, #4]	; (8023cd8 <__sfp_lock_acquire+0x8>)
 8023cd2:	f000 b8b3 	b.w	8023e3c <__retarget_lock_acquire_recursive>
 8023cd6:	bf00      	nop
 8023cd8:	2400ed56 	.word	0x2400ed56

08023cdc <__sfp_lock_release>:
 8023cdc:	4801      	ldr	r0, [pc, #4]	; (8023ce4 <__sfp_lock_release+0x8>)
 8023cde:	f000 b8af 	b.w	8023e40 <__retarget_lock_release_recursive>
 8023ce2:	bf00      	nop
 8023ce4:	2400ed56 	.word	0x2400ed56

08023ce8 <__sinit_lock_acquire>:
 8023ce8:	4801      	ldr	r0, [pc, #4]	; (8023cf0 <__sinit_lock_acquire+0x8>)
 8023cea:	f000 b8a7 	b.w	8023e3c <__retarget_lock_acquire_recursive>
 8023cee:	bf00      	nop
 8023cf0:	2400ed57 	.word	0x2400ed57

08023cf4 <__sinit_lock_release>:
 8023cf4:	4801      	ldr	r0, [pc, #4]	; (8023cfc <__sinit_lock_release+0x8>)
 8023cf6:	f000 b8a3 	b.w	8023e40 <__retarget_lock_release_recursive>
 8023cfa:	bf00      	nop
 8023cfc:	2400ed57 	.word	0x2400ed57

08023d00 <__sinit>:
 8023d00:	b510      	push	{r4, lr}
 8023d02:	4604      	mov	r4, r0
 8023d04:	f7ff fff0 	bl	8023ce8 <__sinit_lock_acquire>
 8023d08:	69a3      	ldr	r3, [r4, #24]
 8023d0a:	b11b      	cbz	r3, 8023d14 <__sinit+0x14>
 8023d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023d10:	f7ff bff0 	b.w	8023cf4 <__sinit_lock_release>
 8023d14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8023d18:	6523      	str	r3, [r4, #80]	; 0x50
 8023d1a:	4b13      	ldr	r3, [pc, #76]	; (8023d68 <__sinit+0x68>)
 8023d1c:	4a13      	ldr	r2, [pc, #76]	; (8023d6c <__sinit+0x6c>)
 8023d1e:	681b      	ldr	r3, [r3, #0]
 8023d20:	62a2      	str	r2, [r4, #40]	; 0x28
 8023d22:	42a3      	cmp	r3, r4
 8023d24:	bf04      	itt	eq
 8023d26:	2301      	moveq	r3, #1
 8023d28:	61a3      	streq	r3, [r4, #24]
 8023d2a:	4620      	mov	r0, r4
 8023d2c:	f000 f820 	bl	8023d70 <__sfp>
 8023d30:	6060      	str	r0, [r4, #4]
 8023d32:	4620      	mov	r0, r4
 8023d34:	f000 f81c 	bl	8023d70 <__sfp>
 8023d38:	60a0      	str	r0, [r4, #8]
 8023d3a:	4620      	mov	r0, r4
 8023d3c:	f000 f818 	bl	8023d70 <__sfp>
 8023d40:	2200      	movs	r2, #0
 8023d42:	60e0      	str	r0, [r4, #12]
 8023d44:	2104      	movs	r1, #4
 8023d46:	6860      	ldr	r0, [r4, #4]
 8023d48:	f7ff ff82 	bl	8023c50 <std>
 8023d4c:	68a0      	ldr	r0, [r4, #8]
 8023d4e:	2201      	movs	r2, #1
 8023d50:	2109      	movs	r1, #9
 8023d52:	f7ff ff7d 	bl	8023c50 <std>
 8023d56:	68e0      	ldr	r0, [r4, #12]
 8023d58:	2202      	movs	r2, #2
 8023d5a:	2112      	movs	r1, #18
 8023d5c:	f7ff ff78 	bl	8023c50 <std>
 8023d60:	2301      	movs	r3, #1
 8023d62:	61a3      	str	r3, [r4, #24]
 8023d64:	e7d2      	b.n	8023d0c <__sinit+0xc>
 8023d66:	bf00      	nop
 8023d68:	0802644c 	.word	0x0802644c
 8023d6c:	08023c99 	.word	0x08023c99

08023d70 <__sfp>:
 8023d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023d72:	4607      	mov	r7, r0
 8023d74:	f7ff ffac 	bl	8023cd0 <__sfp_lock_acquire>
 8023d78:	4b1e      	ldr	r3, [pc, #120]	; (8023df4 <__sfp+0x84>)
 8023d7a:	681e      	ldr	r6, [r3, #0]
 8023d7c:	69b3      	ldr	r3, [r6, #24]
 8023d7e:	b913      	cbnz	r3, 8023d86 <__sfp+0x16>
 8023d80:	4630      	mov	r0, r6
 8023d82:	f7ff ffbd 	bl	8023d00 <__sinit>
 8023d86:	3648      	adds	r6, #72	; 0x48
 8023d88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8023d8c:	3b01      	subs	r3, #1
 8023d8e:	d503      	bpl.n	8023d98 <__sfp+0x28>
 8023d90:	6833      	ldr	r3, [r6, #0]
 8023d92:	b30b      	cbz	r3, 8023dd8 <__sfp+0x68>
 8023d94:	6836      	ldr	r6, [r6, #0]
 8023d96:	e7f7      	b.n	8023d88 <__sfp+0x18>
 8023d98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8023d9c:	b9d5      	cbnz	r5, 8023dd4 <__sfp+0x64>
 8023d9e:	4b16      	ldr	r3, [pc, #88]	; (8023df8 <__sfp+0x88>)
 8023da0:	60e3      	str	r3, [r4, #12]
 8023da2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8023da6:	6665      	str	r5, [r4, #100]	; 0x64
 8023da8:	f000 f847 	bl	8023e3a <__retarget_lock_init_recursive>
 8023dac:	f7ff ff96 	bl	8023cdc <__sfp_lock_release>
 8023db0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8023db4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8023db8:	6025      	str	r5, [r4, #0]
 8023dba:	61a5      	str	r5, [r4, #24]
 8023dbc:	2208      	movs	r2, #8
 8023dbe:	4629      	mov	r1, r5
 8023dc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8023dc4:	f7ff f8f8 	bl	8022fb8 <memset>
 8023dc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8023dcc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8023dd0:	4620      	mov	r0, r4
 8023dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023dd4:	3468      	adds	r4, #104	; 0x68
 8023dd6:	e7d9      	b.n	8023d8c <__sfp+0x1c>
 8023dd8:	2104      	movs	r1, #4
 8023dda:	4638      	mov	r0, r7
 8023ddc:	f7ff ff62 	bl	8023ca4 <__sfmoreglue>
 8023de0:	4604      	mov	r4, r0
 8023de2:	6030      	str	r0, [r6, #0]
 8023de4:	2800      	cmp	r0, #0
 8023de6:	d1d5      	bne.n	8023d94 <__sfp+0x24>
 8023de8:	f7ff ff78 	bl	8023cdc <__sfp_lock_release>
 8023dec:	230c      	movs	r3, #12
 8023dee:	603b      	str	r3, [r7, #0]
 8023df0:	e7ee      	b.n	8023dd0 <__sfp+0x60>
 8023df2:	bf00      	nop
 8023df4:	0802644c 	.word	0x0802644c
 8023df8:	ffff0001 	.word	0xffff0001

08023dfc <_fwalk_reent>:
 8023dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023e00:	4606      	mov	r6, r0
 8023e02:	4688      	mov	r8, r1
 8023e04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8023e08:	2700      	movs	r7, #0
 8023e0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023e0e:	f1b9 0901 	subs.w	r9, r9, #1
 8023e12:	d505      	bpl.n	8023e20 <_fwalk_reent+0x24>
 8023e14:	6824      	ldr	r4, [r4, #0]
 8023e16:	2c00      	cmp	r4, #0
 8023e18:	d1f7      	bne.n	8023e0a <_fwalk_reent+0xe>
 8023e1a:	4638      	mov	r0, r7
 8023e1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023e20:	89ab      	ldrh	r3, [r5, #12]
 8023e22:	2b01      	cmp	r3, #1
 8023e24:	d907      	bls.n	8023e36 <_fwalk_reent+0x3a>
 8023e26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023e2a:	3301      	adds	r3, #1
 8023e2c:	d003      	beq.n	8023e36 <_fwalk_reent+0x3a>
 8023e2e:	4629      	mov	r1, r5
 8023e30:	4630      	mov	r0, r6
 8023e32:	47c0      	blx	r8
 8023e34:	4307      	orrs	r7, r0
 8023e36:	3568      	adds	r5, #104	; 0x68
 8023e38:	e7e9      	b.n	8023e0e <_fwalk_reent+0x12>

08023e3a <__retarget_lock_init_recursive>:
 8023e3a:	4770      	bx	lr

08023e3c <__retarget_lock_acquire_recursive>:
 8023e3c:	4770      	bx	lr

08023e3e <__retarget_lock_release>:
 8023e3e:	4770      	bx	lr

08023e40 <__retarget_lock_release_recursive>:
 8023e40:	4770      	bx	lr

08023e42 <__swhatbuf_r>:
 8023e42:	b570      	push	{r4, r5, r6, lr}
 8023e44:	460e      	mov	r6, r1
 8023e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023e4a:	2900      	cmp	r1, #0
 8023e4c:	b096      	sub	sp, #88	; 0x58
 8023e4e:	4614      	mov	r4, r2
 8023e50:	461d      	mov	r5, r3
 8023e52:	da08      	bge.n	8023e66 <__swhatbuf_r+0x24>
 8023e54:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8023e58:	2200      	movs	r2, #0
 8023e5a:	602a      	str	r2, [r5, #0]
 8023e5c:	061a      	lsls	r2, r3, #24
 8023e5e:	d410      	bmi.n	8023e82 <__swhatbuf_r+0x40>
 8023e60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023e64:	e00e      	b.n	8023e84 <__swhatbuf_r+0x42>
 8023e66:	466a      	mov	r2, sp
 8023e68:	f000 f8c2 	bl	8023ff0 <_fstat_r>
 8023e6c:	2800      	cmp	r0, #0
 8023e6e:	dbf1      	blt.n	8023e54 <__swhatbuf_r+0x12>
 8023e70:	9a01      	ldr	r2, [sp, #4]
 8023e72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8023e76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8023e7a:	425a      	negs	r2, r3
 8023e7c:	415a      	adcs	r2, r3
 8023e7e:	602a      	str	r2, [r5, #0]
 8023e80:	e7ee      	b.n	8023e60 <__swhatbuf_r+0x1e>
 8023e82:	2340      	movs	r3, #64	; 0x40
 8023e84:	2000      	movs	r0, #0
 8023e86:	6023      	str	r3, [r4, #0]
 8023e88:	b016      	add	sp, #88	; 0x58
 8023e8a:	bd70      	pop	{r4, r5, r6, pc}

08023e8c <__smakebuf_r>:
 8023e8c:	898b      	ldrh	r3, [r1, #12]
 8023e8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023e90:	079d      	lsls	r5, r3, #30
 8023e92:	4606      	mov	r6, r0
 8023e94:	460c      	mov	r4, r1
 8023e96:	d507      	bpl.n	8023ea8 <__smakebuf_r+0x1c>
 8023e98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8023e9c:	6023      	str	r3, [r4, #0]
 8023e9e:	6123      	str	r3, [r4, #16]
 8023ea0:	2301      	movs	r3, #1
 8023ea2:	6163      	str	r3, [r4, #20]
 8023ea4:	b002      	add	sp, #8
 8023ea6:	bd70      	pop	{r4, r5, r6, pc}
 8023ea8:	ab01      	add	r3, sp, #4
 8023eaa:	466a      	mov	r2, sp
 8023eac:	f7ff ffc9 	bl	8023e42 <__swhatbuf_r>
 8023eb0:	9900      	ldr	r1, [sp, #0]
 8023eb2:	4605      	mov	r5, r0
 8023eb4:	4630      	mov	r0, r6
 8023eb6:	f7ff f8f3 	bl	80230a0 <_malloc_r>
 8023eba:	b948      	cbnz	r0, 8023ed0 <__smakebuf_r+0x44>
 8023ebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023ec0:	059a      	lsls	r2, r3, #22
 8023ec2:	d4ef      	bmi.n	8023ea4 <__smakebuf_r+0x18>
 8023ec4:	f023 0303 	bic.w	r3, r3, #3
 8023ec8:	f043 0302 	orr.w	r3, r3, #2
 8023ecc:	81a3      	strh	r3, [r4, #12]
 8023ece:	e7e3      	b.n	8023e98 <__smakebuf_r+0xc>
 8023ed0:	4b0d      	ldr	r3, [pc, #52]	; (8023f08 <__smakebuf_r+0x7c>)
 8023ed2:	62b3      	str	r3, [r6, #40]	; 0x28
 8023ed4:	89a3      	ldrh	r3, [r4, #12]
 8023ed6:	6020      	str	r0, [r4, #0]
 8023ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023edc:	81a3      	strh	r3, [r4, #12]
 8023ede:	9b00      	ldr	r3, [sp, #0]
 8023ee0:	6163      	str	r3, [r4, #20]
 8023ee2:	9b01      	ldr	r3, [sp, #4]
 8023ee4:	6120      	str	r0, [r4, #16]
 8023ee6:	b15b      	cbz	r3, 8023f00 <__smakebuf_r+0x74>
 8023ee8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023eec:	4630      	mov	r0, r6
 8023eee:	f000 f891 	bl	8024014 <_isatty_r>
 8023ef2:	b128      	cbz	r0, 8023f00 <__smakebuf_r+0x74>
 8023ef4:	89a3      	ldrh	r3, [r4, #12]
 8023ef6:	f023 0303 	bic.w	r3, r3, #3
 8023efa:	f043 0301 	orr.w	r3, r3, #1
 8023efe:	81a3      	strh	r3, [r4, #12]
 8023f00:	89a0      	ldrh	r0, [r4, #12]
 8023f02:	4305      	orrs	r5, r0
 8023f04:	81a5      	strh	r5, [r4, #12]
 8023f06:	e7cd      	b.n	8023ea4 <__smakebuf_r+0x18>
 8023f08:	08023c99 	.word	0x08023c99

08023f0c <__malloc_lock>:
 8023f0c:	4801      	ldr	r0, [pc, #4]	; (8023f14 <__malloc_lock+0x8>)
 8023f0e:	f7ff bf95 	b.w	8023e3c <__retarget_lock_acquire_recursive>
 8023f12:	bf00      	nop
 8023f14:	2400ed55 	.word	0x2400ed55

08023f18 <__malloc_unlock>:
 8023f18:	4801      	ldr	r0, [pc, #4]	; (8023f20 <__malloc_unlock+0x8>)
 8023f1a:	f7ff bf91 	b.w	8023e40 <__retarget_lock_release_recursive>
 8023f1e:	bf00      	nop
 8023f20:	2400ed55 	.word	0x2400ed55

08023f24 <__sread>:
 8023f24:	b510      	push	{r4, lr}
 8023f26:	460c      	mov	r4, r1
 8023f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023f2c:	f000 f894 	bl	8024058 <_read_r>
 8023f30:	2800      	cmp	r0, #0
 8023f32:	bfab      	itete	ge
 8023f34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8023f36:	89a3      	ldrhlt	r3, [r4, #12]
 8023f38:	181b      	addge	r3, r3, r0
 8023f3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8023f3e:	bfac      	ite	ge
 8023f40:	6563      	strge	r3, [r4, #84]	; 0x54
 8023f42:	81a3      	strhlt	r3, [r4, #12]
 8023f44:	bd10      	pop	{r4, pc}

08023f46 <__swrite>:
 8023f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023f4a:	461f      	mov	r7, r3
 8023f4c:	898b      	ldrh	r3, [r1, #12]
 8023f4e:	05db      	lsls	r3, r3, #23
 8023f50:	4605      	mov	r5, r0
 8023f52:	460c      	mov	r4, r1
 8023f54:	4616      	mov	r6, r2
 8023f56:	d505      	bpl.n	8023f64 <__swrite+0x1e>
 8023f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023f5c:	2302      	movs	r3, #2
 8023f5e:	2200      	movs	r2, #0
 8023f60:	f000 f868 	bl	8024034 <_lseek_r>
 8023f64:	89a3      	ldrh	r3, [r4, #12]
 8023f66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023f6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8023f6e:	81a3      	strh	r3, [r4, #12]
 8023f70:	4632      	mov	r2, r6
 8023f72:	463b      	mov	r3, r7
 8023f74:	4628      	mov	r0, r5
 8023f76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023f7a:	f000 b817 	b.w	8023fac <_write_r>

08023f7e <__sseek>:
 8023f7e:	b510      	push	{r4, lr}
 8023f80:	460c      	mov	r4, r1
 8023f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023f86:	f000 f855 	bl	8024034 <_lseek_r>
 8023f8a:	1c43      	adds	r3, r0, #1
 8023f8c:	89a3      	ldrh	r3, [r4, #12]
 8023f8e:	bf15      	itete	ne
 8023f90:	6560      	strne	r0, [r4, #84]	; 0x54
 8023f92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8023f96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8023f9a:	81a3      	strheq	r3, [r4, #12]
 8023f9c:	bf18      	it	ne
 8023f9e:	81a3      	strhne	r3, [r4, #12]
 8023fa0:	bd10      	pop	{r4, pc}

08023fa2 <__sclose>:
 8023fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023fa6:	f000 b813 	b.w	8023fd0 <_close_r>
	...

08023fac <_write_r>:
 8023fac:	b538      	push	{r3, r4, r5, lr}
 8023fae:	4d07      	ldr	r5, [pc, #28]	; (8023fcc <_write_r+0x20>)
 8023fb0:	4604      	mov	r4, r0
 8023fb2:	4608      	mov	r0, r1
 8023fb4:	4611      	mov	r1, r2
 8023fb6:	2200      	movs	r2, #0
 8023fb8:	602a      	str	r2, [r5, #0]
 8023fba:	461a      	mov	r2, r3
 8023fbc:	f7dd faa0 	bl	8001500 <_write>
 8023fc0:	1c43      	adds	r3, r0, #1
 8023fc2:	d102      	bne.n	8023fca <_write_r+0x1e>
 8023fc4:	682b      	ldr	r3, [r5, #0]
 8023fc6:	b103      	cbz	r3, 8023fca <_write_r+0x1e>
 8023fc8:	6023      	str	r3, [r4, #0]
 8023fca:	bd38      	pop	{r3, r4, r5, pc}
 8023fcc:	2400ed58 	.word	0x2400ed58

08023fd0 <_close_r>:
 8023fd0:	b538      	push	{r3, r4, r5, lr}
 8023fd2:	4d06      	ldr	r5, [pc, #24]	; (8023fec <_close_r+0x1c>)
 8023fd4:	2300      	movs	r3, #0
 8023fd6:	4604      	mov	r4, r0
 8023fd8:	4608      	mov	r0, r1
 8023fda:	602b      	str	r3, [r5, #0]
 8023fdc:	f7dd fa9e 	bl	800151c <_close>
 8023fe0:	1c43      	adds	r3, r0, #1
 8023fe2:	d102      	bne.n	8023fea <_close_r+0x1a>
 8023fe4:	682b      	ldr	r3, [r5, #0]
 8023fe6:	b103      	cbz	r3, 8023fea <_close_r+0x1a>
 8023fe8:	6023      	str	r3, [r4, #0]
 8023fea:	bd38      	pop	{r3, r4, r5, pc}
 8023fec:	2400ed58 	.word	0x2400ed58

08023ff0 <_fstat_r>:
 8023ff0:	b538      	push	{r3, r4, r5, lr}
 8023ff2:	4d07      	ldr	r5, [pc, #28]	; (8024010 <_fstat_r+0x20>)
 8023ff4:	2300      	movs	r3, #0
 8023ff6:	4604      	mov	r4, r0
 8023ff8:	4608      	mov	r0, r1
 8023ffa:	4611      	mov	r1, r2
 8023ffc:	602b      	str	r3, [r5, #0]
 8023ffe:	f7dd fa90 	bl	8001522 <_fstat>
 8024002:	1c43      	adds	r3, r0, #1
 8024004:	d102      	bne.n	802400c <_fstat_r+0x1c>
 8024006:	682b      	ldr	r3, [r5, #0]
 8024008:	b103      	cbz	r3, 802400c <_fstat_r+0x1c>
 802400a:	6023      	str	r3, [r4, #0]
 802400c:	bd38      	pop	{r3, r4, r5, pc}
 802400e:	bf00      	nop
 8024010:	2400ed58 	.word	0x2400ed58

08024014 <_isatty_r>:
 8024014:	b538      	push	{r3, r4, r5, lr}
 8024016:	4d06      	ldr	r5, [pc, #24]	; (8024030 <_isatty_r+0x1c>)
 8024018:	2300      	movs	r3, #0
 802401a:	4604      	mov	r4, r0
 802401c:	4608      	mov	r0, r1
 802401e:	602b      	str	r3, [r5, #0]
 8024020:	f7dd fa84 	bl	800152c <_isatty>
 8024024:	1c43      	adds	r3, r0, #1
 8024026:	d102      	bne.n	802402e <_isatty_r+0x1a>
 8024028:	682b      	ldr	r3, [r5, #0]
 802402a:	b103      	cbz	r3, 802402e <_isatty_r+0x1a>
 802402c:	6023      	str	r3, [r4, #0]
 802402e:	bd38      	pop	{r3, r4, r5, pc}
 8024030:	2400ed58 	.word	0x2400ed58

08024034 <_lseek_r>:
 8024034:	b538      	push	{r3, r4, r5, lr}
 8024036:	4d07      	ldr	r5, [pc, #28]	; (8024054 <_lseek_r+0x20>)
 8024038:	4604      	mov	r4, r0
 802403a:	4608      	mov	r0, r1
 802403c:	4611      	mov	r1, r2
 802403e:	2200      	movs	r2, #0
 8024040:	602a      	str	r2, [r5, #0]
 8024042:	461a      	mov	r2, r3
 8024044:	f7dd fa74 	bl	8001530 <_lseek>
 8024048:	1c43      	adds	r3, r0, #1
 802404a:	d102      	bne.n	8024052 <_lseek_r+0x1e>
 802404c:	682b      	ldr	r3, [r5, #0]
 802404e:	b103      	cbz	r3, 8024052 <_lseek_r+0x1e>
 8024050:	6023      	str	r3, [r4, #0]
 8024052:	bd38      	pop	{r3, r4, r5, pc}
 8024054:	2400ed58 	.word	0x2400ed58

08024058 <_read_r>:
 8024058:	b538      	push	{r3, r4, r5, lr}
 802405a:	4d07      	ldr	r5, [pc, #28]	; (8024078 <_read_r+0x20>)
 802405c:	4604      	mov	r4, r0
 802405e:	4608      	mov	r0, r1
 8024060:	4611      	mov	r1, r2
 8024062:	2200      	movs	r2, #0
 8024064:	602a      	str	r2, [r5, #0]
 8024066:	461a      	mov	r2, r3
 8024068:	f7dd fa3c 	bl	80014e4 <_read>
 802406c:	1c43      	adds	r3, r0, #1
 802406e:	d102      	bne.n	8024076 <_read_r+0x1e>
 8024070:	682b      	ldr	r3, [r5, #0]
 8024072:	b103      	cbz	r3, 8024076 <_read_r+0x1e>
 8024074:	6023      	str	r3, [r4, #0]
 8024076:	bd38      	pop	{r3, r4, r5, pc}
 8024078:	2400ed58 	.word	0x2400ed58

0802407c <_init>:
 802407c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802407e:	bf00      	nop
 8024080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024082:	bc08      	pop	{r3}
 8024084:	469e      	mov	lr, r3
 8024086:	4770      	bx	lr

08024088 <_fini>:
 8024088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802408a:	bf00      	nop
 802408c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802408e:	bc08      	pop	{r3}
 8024090:	469e      	mov	lr, r3
 8024092:	4770      	bx	lr
